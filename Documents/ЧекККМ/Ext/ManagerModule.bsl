#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	//СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "Касса");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиБУ", "СебестоимостьРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Касса");
	
КонецПроцедуры


#Область УстаревшиеПроцедурыИФункции

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры   

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли; 			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
		КонецЕсли;
		
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
			
		Иначе 
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовПриВозвратеБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовПриВозвратеБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовПриВозвратеБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
			
		КонецЕсли;
			
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
			
		Иначе 
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовПриВозвратеБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовПриВозвратеБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовПриВозвратеБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И Параметры.Свойство("Основание")
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

Функция ТекстЗапросаТоварныйЧек()
	Возврат
		"ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.ВидОперации,
		|	ЧекККМ.Организация,
		|	ЧекККМ.Дата,
		|	ЧекККМ.Номер,
		|	ЧекККМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	СправочникНоменклатура.Наименование КАК НоменклатураНаименование,
		|	СправочникНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА ТаблицаТовары.Номенклатура.Код
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА ТаблицаТовары.Номенклатура.Артикул
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ТаблицаТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	1 КАК НомерТабличнойЧасти
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
		|		ПО ТаблицаТовары.Ссылка = ЧекККМ.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ЧекККМ.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТабличнойЧасти,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС)
		|ПО
		|	Ссылка";
КонецФункции

Функция ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос.Текст = ТекстЗапросаТоварныйЧек();
	
	ДанныеЗаполнения = Новый Структура;
	
	ПервыйДокумент = Истина;
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек", КодЯзыка);
		
		ОбластьКолонкаТовар = Макет.Область("Запас");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ШапкаТаблицы        = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ШапкаТаблицыКоды    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ШапкаТаблицыДанные  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьПоставщик    = Макет.ПолучитьОбласть("Поставщик");
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьСтрокаКоды   = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьСтрокаДанные = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
		ОбластьПодписи      = Макет.ПолучитьОбласть("Подписи");
		
		ВидДокумента = ?(Шапка.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, НСтр("ru = 'Товарный чек'",КодЯзыка), НСтр("ru = 'Возврат товаров'",КодЯзыка));
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='%1 № %2 от %3'",КодЯзыка), ВидДокумента, Шапка.Номер, Формат(Шапка.Дата, "ДЛФ=DD"));
		ОбластьЗаголовок.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,БИН_ИИН,ЮридическийАдрес,Телефоны,",,,КодЯзыка);
		ОбластьПоставщик.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
		
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		ТабличныйДокумент.Вывести(ШапкаТаблицы);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ШапкаТаблицыКоды.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ШапкаТаблицыКоды);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ШапкаТаблицыДанные);
		
		НомерСтроки = 0;
		ВыборкаПоДокументу = Шапка.Выбрать();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеЗаполнения = Новый Структура("НомерСтроки", НомерСтроки);
			ОбластьСтрока.Параметры.Заполнить(ДанныеЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаКоды.Параметры.Заполнить(ВыборкаПоДокументу);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКоды);
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура("Номенклатура");
			
			Если ЗначениеЗаполнено(ВыборкаПоДокументу.НоменклатураНаименованиеПолное) Тогда
				ДанныеЗаполнения.Номенклатура = ВыборкаПоДокументу.НоменклатураНаименованиеПолное;
			Иначе
				ДанныеЗаполнения.Номенклатура = ВыборкаПоДокументу.НоменклатураНаименование;
			КонецЕсли;
			
			ОбластьСтрокаДанные.Параметры.Заполнить(ВыборкаПоДокументу);
			ОбластьСтрокаДанные.Параметры.Заполнить(ДанныеЗаполнения);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанные);
		КонецЦикла;
		
		Всего = Шапка.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
		
		Если Шапка.СуммаНДС <> 0 Тогда
			ЗаголовокНДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'", КодЯзыка), НСтр("ru = 'Сумма НДС'", КодЯзыка));
		Иначе
			ЗаголовокНДС      = НСтр("ru='Без налога (НДС)'", КодЯзыка);
		КонецЕсли;
		
		ДанныеЗаполнения.Очистить();
		ДанныеЗаполнения.Вставить("Сумма",        ОбщегоНазначенияБКВызовСервера.ФорматСумм(Шапка.Сумма));
		ДанныеЗаполнения.Вставить("ЗаголовокНДС", ЗаголовокНДС);
		ДанныеЗаполнения.Вставить("СуммаНДС",     ОбщегоНазначенияБКВызовСервера.ФорматСумм(Шапка.СуммаНДС,,"-"));
		ДанныеЗаполнения.Вставить("Всего",        ОбщегоНазначенияБКВызовСервера.ФорматСумм(Всего));
		
		ОбластьИтого.Параметры.Заполнить(ДанныеЗаполнения);
		
		ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
		ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'", КодЯзыка),
			НомерСтроки, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Всего, Константы.ВалютаРегламентированногоУчета.Получить()));
		ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(Всего, Константы.ВалютаРегламентированногоУчета.Получить(),КодЯзыка);
		
		ОбластьИтого.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТоварныйЧек",
			НСтр("ru = 'Товарный чек'"),
			ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка), , "Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");   
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ТоварныйЧек"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор               = "ТоварныйЧек";
	КомандаОтправки.Представление               = НСтр("ru = 'Товарный чек'");
	КомандаОтправки.Порядок                     = 1;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, "ФормаДокумента");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Возврат, "ФормаДокумента");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей)
	
	СписокТабличныхЧастей.Вставить("Товары",                СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("Услуги",                СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("Оплата",                СписокТабличныхЧастей.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекТовары.Штрихкод КАК Штрихкод,
	|	ЧекТовары.Ссылка КАК Ссылка,
	|	ЧекТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекТовары.Количество КАК Количество,
	|	ЧекТовары.Коэффициент КАК Коэффициент,
	|	ЧекТовары.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекТовары.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ЧекТовары.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ЧекТовары.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ЧекТовары.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоСписанияСебестоимостиБУ1,
	|	ЧекТовары.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоСписанияСебестоимостиБУ2,
	|	ЧекТовары.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоСписанияСебестоимостиБУ3,
	|	ЧекТовары.Сумма КАК Сумма,
	|	ЧекТовары.СуммаНДС КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВозвратПроданнойПродукции) КАК СчетДоходовБУ,
	|	ЧекТовары.СчетСписанияСебестоимостиБУ КАК СчетСписанияСебестоимостиБУ,
	|	ЧекТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ЧекТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ЧекТовары.Цена КАК Цена,
	|	ЧекТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекТовары
	|ГДЕ
	|	(НЕ ЧекТовары.Номенклатура.Услуга
	|			ИЛИ ЧекТовары.Ссылка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка))
	|	И ЧекТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМУслуги.Ссылка КАК Ссылка,
	|	ЧекККМУслуги.НомерСтроки КАК НомерСтроки,
	|	ЧекККМУслуги.Содержание КАК Содержание,
	|	ЧекККМУслуги.Количество КАК Количество,
	|	ЧекККМУслуги.Цена КАК Цена,
	|	ЧекККМУслуги.Сумма КАК Сумма,
	|	ЧекККМУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМУслуги.СуммаНДС КАК СуммаНДС,
	|	ЧекККМУслуги.Номенклатура КАК Номенклатура,
	|	ЧекККМУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВозвратПроданнойПродукции) КАК СчетДоходовБУ,
	|	ЧекККМУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ЧекККМУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ЧекККМУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ЧекККМУслуги.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации
	|ИЗ
	|	Документ.ЧекККМ.Услуги КАК ЧекККМУслуги
	|ГДЕ
	|	ЧекККМУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекОплата.Ссылка КАК Ссылка,
	|	ЧекОплата.НомерСтроки КАК НомерСтроки,
	|	ЧекОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекОплата.МобильныйПлатеж КАК МобильныйПлатеж,
	|	ЧекОплата.Сумма КАК Сумма,
	|	ЧекОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ЧекОплата.СсылочныйНомер КАК СсылочныйНомер,
	|	ЧекОплата.НомерЧекаЭТ КАК НомерЧекаЭТ
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекОплата
	|ГДЕ
	|	ЧекОплата.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СкопироватьТабличныеЧасти(Объект, Основание) Экспорт
	
	СписокТабличныхЧастей = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей);
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатаЗапроса = Запрос.ВыполнитьПакет();
	
	Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		Объект[ТабличнаяЧасть.Ключ].Загрузить(РезультатаЗапроса[ТабличнаяЧасть.Значение].Выгрузить());
	КонецЦикла;
	
	СуммаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
	
	Объект.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(Объект, "Услуги");
	
	Если Объект.Оплата.Количество() > 0 И Объект.СуммаДокумента <> СуммаДокументаОснования Тогда
		СуммаБезналичнойОплаты = Объект.Оплата.Итог("Сумма")*Объект.СуммаДокумента/СуммаДокументаОснования;
		Если СуммаБезналичнойОплаты = 0 Тогда
			Объект.Оплата.Очистить();
		Иначе
			ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаБезналичнойОплаты, Объект.Оплата, "Сумма");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК РозничнаяПродажаТовары
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаУслуги.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЧекККМ.Услуги КАК РозничнаяПродажаУслуги
	|ГДЕ
	|	РозничнаяПродажаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
КонецФункции

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат  Неопределено;//ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	//ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

Процедура ПодготовитьКодМаркировкиBase64(СтруктураПечати, ДанныеШтрихКода)
	
	СтрокаШтрихКод = "";
	СтрокаШтрихКодBase64 = "";
	//01
	ДобавитьБлокКода(СтрокаШтрихКодBase64, ДанныеШтрихКода, "01");
	//21
	ДобавитьБлокКода(СтрокаШтрихКодBase64, ДанныеШтрихКода, "21");
	//91
	ДобавитьБлокКода(СтрокаШтрихКодBase64, ДанныеШтрихКода, "91", Истина);
	//92
	ДобавитьБлокКода(СтрокаШтрихКодBase64, ДанныеШтрихКода, "92", Истина);
	//93
	ДобавитьБлокКода(СтрокаШтрихКодBase64, ДанныеШтрихКода, "93", Истина);
	
	СтруктураПечати.Вставить("КодМаркировкиBase64", РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаШтрихКодBase64));
	
КонецПроцедуры

Процедура ДобавитьБлокКода(СтрокаКода, ДанныеШтрихКода, Блок, ДобавитьРазделитель = Ложь)
	
	Если Не ДанныеШтрихКода.Получить(Блок) = Неопределено Тогда 
		
		КлючСтруктуры = ДанныеШтрихКода.Получить(Блок);
		ЗначениеБлока	= КлючСтруктуры.Значение;
		
		Если ДобавитьРазделитель Тогда 
			СтрокаКода 	= СтрокаКода + РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазделительGS1() + Блок + ЗначениеБлока;
		Иначе 
			СтрокаКода 	= СтрокаКода + Блок + ЗначениеБлока;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Неопределено; //ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат Неопределено; //ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат Неопределено; //ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Неопределено; //ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область ФормированиеОРП

Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	//Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
	//	ЕстьПравоПриемРозничнойВыручки = Ложь;
	//ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
	//	ЕстьПравоПриемРозничнойВыручки = Истина;
	//Иначе
	//	НачатьТранзакцию();
	//	Попытка
	//		ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	//		ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.ОплатаПокупателя));
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		ЕстьПравоПриемРозничнойВыручки = Истина;
	//	Исключение
	//		ЕстьПравоПриемРозничнойВыручки = Ложь;
	//	КонецПопытки;
	//	ОтменитьТранзакцию();
	//КонецЕсли;
	//
	//Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ЕстьПравоВозвратРозничнойВыручки(Организация)
	
	//Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
	//	ЕстьПравоПриемРозничнойВыручки = Ложь;
	//ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
	//	ЕстьПравоПриемРозничнойВыручки = Истина;
	//Иначе
	//	НачатьТранзакцию();
	//	Попытка
	//		ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	//		ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю));
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		ЕстьПравоПриемРозничнойВыручки = Истина;
	//	Исключение
	//		ЕстьПравоПриемРозничнойВыручки = Ложь;
	//	КонецПопытки;
	//	ОтменитьТранзакцию();
	//КонецЕсли;
	//
	//Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ТекстЗапросаНезакрытыеЧеки(СписокТаблиц)
	
	СписокТаблиц.Вставить("ВТ_РозничныеЧекиКПогашению",   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Продажи",                   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Возвраты",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаЧеки",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаДокументы",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаТовары",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаУслуги",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаТовары",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаУслуги",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаОплаты",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаОплаты",                СписокТаблиц.Количество());

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.Касса КАК Касса,
		|	РозничнаяПродажа.УчитыватьНДС КАК УчитыватьНДС,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
		|	ЕСТЬNULL(РозничнаяПродажа.Основание.ОтчетОРозничныхПродажах, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ЭтоВозвратЗакрытогоПериода
		|ПОМЕСТИТЬ ВТ_РозничныеЧекиКПогашению
		|ИЗ
		|	Документ.ЧекККМ КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
		|	И РозничнаяПродажа.Проведен
		|	И РозничнаяПродажа.НомерЧекаККМ <> 0
		|	И РозничнаяПродажа.Организация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ВТ_Продажи
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.Касса КАК Касса,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.УчитыватьНДС КАК УчитыватьНДС
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ВТ_Возвраты
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Основание КАК Основание,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.Касса КАК Касса,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.УчитыватьНДС КАК УчитыватьНДС,
		|	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_Возвраты
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	РозничныеЧекиКПогашению.ЭтоВозврат
		|	И РозничнаяПродажа.Основание.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ТаблицаЧеки
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК РозничнаяПродажа,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ТаблицаДокументы
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса,
		|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах,
		|	МИНИМУМ(РозничныеЧекиКПогашению.УчитыватьНДС) КАК УчитыватьНДС
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ВТ_ТаблицаТовары
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ТаблицаТовары
		|ИЗ
		|	ВТ_Продажи КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	- ТаблицаТовары.Количество КАК Количество,
		|	- ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	- ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ВТ_ТаблицаУслуги
		|
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ТаблицаУслуги
		|ИЗ
		|	ВТ_Продажи КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Услуги КАК ТаблицаУслуги
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаУслуги.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Возвраты.Организация,
		|	ВТ_Возвраты.Склад,
		|	ВТ_Возвраты.Касса,
		|	РозничнаяПродажаУслуги.Номенклатура,
		|	РозничнаяПродажаУслуги.Цена,
		|	-РозничнаяПродажаУслуги.Количество,
		|	-РозничнаяПродажаУслуги.Сумма,
		|	РозничнаяПродажаУслуги.СтавкаНДС,
		|	-РозничнаяПродажаУслуги.СуммаНДС,
		|	РозничнаяПродажаУслуги.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	ВТ_Возвраты.ЦенаВключаетНДС
		|ИЗ
		|	ВТ_Возвраты КАК ВТ_Возвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Услуги КАК РозничнаяПродажаУслуги
		|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаУслуги.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ТаблицаТовары
		|ВЫБРАТЬ
		|	ТаблицаТовары.Организация КАК Организация,
		|	ТаблицаТовары.Склад КАК Склад,
		|	ТаблицаТовары.Касса КАК Касса,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	ТаблицаТовары.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ВТ_ТаблицаТовары КАК ТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Организация,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.Касса,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.ЦенаВключаетНДС
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ТаблицаУслуги
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Организация КАК Организация,
		|	ТаблицаУслуги.Склад КАК Склад,
		|	ТаблицаУслуги.Касса КАК Касса,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаУслуги.Количество) КАК Количество,
		|	СУММА(ТаблицаУслуги.Сумма) КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК НДСВидОперацииРеализации,
		|	ТаблицаУслуги.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ВТ_ТаблицаУслуги КАК ТаблицаУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Организация,
		|	ТаблицаУслуги.Склад,
		|	ТаблицаУслуги.Касса,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.ЦенаВключаетНДС
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаУслуги.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНДС) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ВТ_ТаблицаОплаты
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
		|ПОМЕСТИТЬ ВТ_ТаблицаОплаты
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Продажи КАК РозничныеЧекиКПогашению
		|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОплата.Сумма) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
		|	-СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
		//|ГДЕ
		//|	НЕ ТаблицаОплата.Ссылка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОплата.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////ТаблицаОплаты
		|ВЫБРАТЬ
		|	ТаблицаОплата.Организация КАК Организация,
		|	ТаблицаОплата.Склад КАК Склад,
		|	ТаблицаОплата.Касса КАК Касса,
		|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаОплата.СуммаОплаты) КАК СуммаОплаты
		|ИЗ
		|	ВТ_ТаблицаОплаты КАК ТаблицаОплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	ТаблицаОплата.Организация,
		|	ТаблицаОплата.Касса,
		|	ТаблицаОплата.Склад";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьОтчетыОРозничныхПродажах(Организация, ИдентификаторУстройства) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеРозничныхПродаж = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки(ДанныеРозничныхПродаж);
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",           ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из ДанныеРозничныхПродаж Цикл
		ПараметрыЗаполнения.Вставить(КлючИЗначение.Ключ, РезультатЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла; 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад, Касса");
	
	ТаблицаОплаты        = ПараметрыЗаполнения.ТаблицаОплаты;
	ДокументыКПроведению = Новый Массив;
	
	Для Каждого СтрокаДокументы Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ТоварыПоДокументу                = ПараметрыЗаполнения.ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		УслугиПоДокументу                = ПараметрыЗаполнения.ТаблицаУслуги.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу                = ТаблицаОплаты.Скопировать(ДанныеЗаполнения);
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0
			И УслугиПоДокументу.Количество() = 0
			И ОплатаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТоварыПоДокументу Цикл
			Если Не СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаУслуги Из УслугиПоДокументу Цикл
			Если Не СтрокаУслуги.ЦенаВключаетНДС Тогда
				СтрокаУслуги.Сумма = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
				СтрокаУслуги.Цена  = ?(СтрокаУслуги.Количество <> 0, СтрокаУслуги.Сумма/СтрокаУслуги.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		ОтчетОРозничныхПродажах_Шаблон = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах_Шаблон.Заполнить(ДанныеЗаполнения);
		ОтчетОРозничныхПродажах_Шаблон.УчитыватьНДС = СтрокаДокументы.УчитыватьНДС;
		ОтчетОРозничныхПродажах_Шаблон.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
		
		ОтчетОРозничныхПродажах_Шаблон.Комментарий = НСтр("ru = 'Создан автоматически закрытием кассовой смены'");
		
		ОтчетОРозничныхПродажах_Шаблон.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
		//****Временно заполняем реквизиты, пока документ Отчет не будет готов
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах_Шаблон, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ОтчетОРозничныхПродажах_Шаблон.Контрагент = Справочники.Контрагенты.ПолучитьРозничногоКонтрагента();
		ОтчетОРозничныхПродажах_Шаблон.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорРозничногоКонтрагента(ОтчетОРозничныхПродажах_Шаблон.Контрагент, ОтчетОРозничныхПродажах_Шаблон.Организация);
		ОтчетОРозничныхПродажах_Шаблон.СчетКасса = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
		//****Конец временного заполнения
		
		ОтчетОРозничныхПродажах_Шаблон.Товары.Загрузить(ТоварыПоДокументу);
		ОтчетОРозничныхПродажах_Шаблон.Услуги.Загрузить(УслугиПоДокументу);
		
		ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ОтчетОРозничныхПродажах_Шаблон);

		
		Для Каждого СтрокаТЧ Из ОтчетОРозничныхПродажах_Шаблон.Товары Цикл 
			СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТЧ.Номенклатура, ДанныеОбъекта);
			СтрокаТЧ.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТЧ, "Товары", СведенияОНоменклатуре);
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТЧ, "Товары");
			СтрокаТЧ.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ОтчетОРозничныхПродажах_Шаблон.Товары);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ОтчетОРозничныхПродажах_Шаблон.Услуги Цикл 
			СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТЧ.Номенклатура, ДанныеОбъекта);
			СтрокаТЧ.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТЧ, "Услуги", СведенияОНоменклатуре);
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТЧ, "Услуги");
		КонецЦикла;
		
		ОтчетОРозничныхПродажах_Шаблон.Оплата.Загрузить(ОплатаПоДокументу);

		// Очистка движений ЧековККМ перед проведением ОтчетОРозничныхПродажах
		НайденныеЧекиККМ = ПараметрыЗаполнения.ТаблицаЧеки.НайтиСтроки(ДанныеЗаполнения);
		Для Каждого ЧекККМ Из НайденныеЧекиККМ Цикл
			
			Попытка
				ДокументОбъект = ЧекККМ.РозничнаяПродажа.ПолучитьОбъект();
				ДокументОбъект.мЗакрытиеСмены = Истина; 
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заархивировать чеки! %1'"),
				ОписаниеОшибки()
				);
				ОбщегоНазначения.СообщитьПользователю(
				Текст);
			КонецПопытки;
			
		КонецЦикла;
	
		НачатьТранзакцию();
		
			ШаблонПроведён = Истина;
			
			Попытка
				
				ОтчетОРозничныхПродажах_Шаблон.Записать(РежимЗаписиДокумента.Проведение);
				
				НомараГТД	 = ОтчетОРозничныхПродажах_Шаблон.НомераГТД.Выгрузить();
				Товары		 = ОтчетОРозничныхПродажах_Шаблон.Товары.Выгрузить();
				
			Исключение
				ШаблонПроведён = Ложь;
			КонецПопытки;
		
		ОтменитьТранзакцию();
		
		// берем максимальное допустимое количество строк в ЭСФ 200.
		МаксимальноеКоличествоСтрок = 200;
		ОтменитьТранзакцию = Ложь;
		ОтчетОРозничныхПродажах = Неопределено;
		
		Если (ОтчетОРозничныхПродажах_Шаблон.НомераГТД.Количество() <= МаксимальноеКоличествоСтрок) Или НЕ ШаблонПроведён Тогда 
			ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах_Шаблон);
			СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах_Шаблон;
		Иначе 
			
			Счетчик = 0;
			
			Для Каждого СтрокаГТД Из НомараГТД Цикл 
				
				Если Счетчик = 0 Или Счетчик > МаксимальноеКоличествоСтрок Тогда 
					
					Если Не ОтчетОРозничныхПродажах = Неопределено Тогда 
						ОтчетОРозничныхПродажах.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Услуги");
						ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах);
					КонецЕсли;
					
					ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажах, ОтчетОРозничныхПродажах_Шаблон);
					
					Если Счетчик = 0 Тогда 
					//Спишем все услуги в первый документ
						ОтчетОРозничныхПродажах.Услуги.Загрузить(ОтчетОРозничныхПродажах_Шаблон.Услуги.Выгрузить());
					КонецЕсли;
					
					Счетчик = 1;
					
				КонецЕсли; 
				
				НоваяСтрока = ОтчетОРозничныхПродажах.НомераГТД.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГТД);
				
				НоваяСтрока = ОтчетОРозничныхПродажах.Товары.Добавить();
				СтрокаИсчтоник = Товары.Найти(СтрокаГТД.КлючСвязи, "КлючСвязи");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсчтоник);
				
				Если Не СтрокаГТД.Количество = СтрокаИсчтоник.Количество Тогда 
					
					НоваяСтрока.Количество = СтрокаГТД.Количество;
					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
					
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажах.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Услуги");
			ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах);
			
			СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах;
			
			//Распределение оплаты
			Для Каждого ДокументОтчет Из ДокументыКПроведению Цикл
				
				СчетчикОплата = ОплатаПоДокументу.Количество() - 1;
				СуммаДок = ДокументОтчет.СуммаДокумента;
				
				Пока СчетчикОплата >= 0 Цикл
					
					Если ОплатаПоДокументу[СчетчикОплата].СуммаОплаты <= СуммаДок Тогда 
						СтрокаОплаты = ДокументОтчет.Оплата.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОплаты, ОплатаПоДокументу[СчетчикОплата]);
						СуммаДок = СуммаДок - ОплатаПоДокументу[СчетчикОплата].СуммаОплаты;
						ОплатаПоДокументу.Удалить(ОплатаПоДокументу[СчетчикОплата]);
					Иначе 
						СтрокаОплаты = ДокументОтчет.Оплата.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОплаты, ОплатаПоДокументу[СчетчикОплата]);
						СтрокаОплаты.СуммаОплаты = СуммаДок ;
						ОплатаПоДокументу[СчетчикОплата].СуммаОплаты = ОплатаПоДокументу[СчетчикОплата].СуммаОплаты - СуммаДок;
						СуммаДок = 0;
					КонецЕсли;
					
					Если СуммаДок = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					СчетчикОплата = СчетчикОплата - 1;
					
				КонецЦикла;
				
				Если ОплатаПоДокументу.Количество() = 0 Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПровестиДокументы(ДокументыКПроведению);
	
	Для Каждого СтрокаПоЧеку Из ПараметрыЗаполнения.ТаблицаЧеки Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ПараметрыЗаполнения.ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			Попытка
				
				ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
				ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах.Ссылка;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				ОтменитьТранзакцию = Истина;
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заархивировать чеки! %1'"),
				ОписаниеОшибки()
				);
				ОбщегоНазначения.СообщитьПользователю(
				Текст);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтчетыОРозничныхПродажах = Новый Массив;
	Для Каждого СтрокаСписка Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		ОтчетыОРозничныхПродажах.Добавить(СтрокаСписка.ОтчетОРозничныхПродажах.Ссылка);
	КонецЦикла;
	
	Возврат ОтчетыОРозничныхПродажах;
	
КонецФункции

Процедура ПровестиДокументы(ДокументыКПроведению)
	
	ДокументыКПроведениюСсылка = Новый Массив;
	Для Каждого ДокументДляЗаписи Из ДокументыКПроведению Цикл 
		ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		ДокументыКПроведениюСсылка.Добавить(ДокументДляЗаписи.Ссылка);
	КонецЦикла;
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыКПроведениюСсылка);
	Для Каждого РезультатПроведения Из НепроведенныеДокументы Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не проведен документ %1: %2'"),
			Строка(РезультатПроведения.Ссылка), РезультатПроведения.ОписаниеОшибки),
			РезультатПроведения.Ссылка, "Объект");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ПечатьЧека

Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции, ВерсияФормата, СообщениеОбОшибке) Экспорт
	
	Запрос = Новый Запрос;
	
	НомераТаблиц = Новый Структура;
	//запрос по общим параметрам чека
	Запрос.Текст = ТекстЗапросаОсновныеПараметрыЧека(НомераТаблиц);
	//запрос по товарам
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаТоваров(НомераТаблиц);
	//запрос по оплатам
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаОплаты(НомераТаблиц);
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС" , Справочники.СтавкиНДС.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Реквизиты = РезультатЗапроса[0].Выбрать();
	ТаблицаПозицииЧека = РезультатЗапроса[1].Выгрузить();
	ТаблицаОплаты = РезультатЗапроса[2].Выгрузить();
	
	Если Реквизиты.Следующий() Тогда
		
		ТипРасчета = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат,
			Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
			Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
		//Шапка чека
		ОбщиеПараметры = МенеджерОборудованияКлиентСерверПереопределяемый.ПараметрыОперацииФискализацииЧека();
		
		ОбщиеПараметры.ТипРасчета        = ТипРасчета;
		ОбщиеПараметры.ДокументОснование = Реквизиты.Ссылка;
		ОбщиеПараметры.Электронно        = Ложь;
		
		ОбщиеПараметры.НомерКассы     = "00001";
		ОбщиеПараметры.НомерЧека      = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер, Реквизиты.Ссылка);
		ОбщиеПараметры.НомерСмены     = 1;
		
		Сведения = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Реквизиты.Организация, Реквизиты.Дата);
		
		ОбщиеПараметры.ОрганизацияНазвание       = Сведения.ПолноеНаименование;
		ОбщиеПараметры.ОрганизацияИНН            = Сведения.БИН_ИИН;
		ОбщиеПараметры.АдресМагазина             = Сведения.ЮридическийАдрес;
		ОбщиеПараметры.СерияСвидетельстваПоНДС   = Сведения.СерияСвидетельстваПоНДС;
		ОбщиеПараметры.НомерСвидетельстваПоНДС   = Сведения.НомерСвидетельстваПоНДС;
		
		ДанныеКассира = ОбщегоНазначенияБКВызовСервера.ДанныеФизЛицаТекущегоПользователя(Реквизиты.Организация, Реквизиты.Дата);
		ПозицииЧека   = ОбщиеПараметры.ПозицииЧека;
		
		Если ДанныеКассира.Представление <> Неопределено Тогда
			ОбщиеПараметры.Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
		КонецЕсли;
		
		ЭтоВерсия105 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0);
		ЭтоВерсия110 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0);
		
		ВестиУчетМаркируемогоТабака 		= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
		ВестиУчетМаркируемойОбуви   		= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
		ВестиУчетЛекарственныхПрепаратов 	= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
		
		Для Каждого Позиция Из ТаблицаПозицииЧека Цикл
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСерверПереопределяемый.ПараметрыФискальнойСтрокиЧека();
			ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Позиция);
			
			СтрокаПозицииЧека.Наименование = Позиция.НоменклатураНаименование;
			СтрокаПозицииЧека.СтавкаНДС    = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
			СтрокаПозицииЧека.НомерСекции  = 1;
			
			СтрокаПозицииЧека.КодЕдиницыИзмерения          = СокрЛП(Позиция.КодЕдиницыИзмерения);
			СтрокаПозицииЧека.НаименованиеЕдиницыИзмерения = Позиция.НаименованиеЕдиницыИзмерения;
			
			СтрокаПозицииЧека.Вставить("СтавкаНДССсылка", Позиция.СтавкаНДС);
			Если НЕ ЗначениеЗаполнено(Позиция.СтавкаНДС) Тогда
				СтрокаПозицииЧека.ОсвобожденныйОборотНДС = Истина;
			Иначе
				СтавкаНДС = Позиция.СтавкаНДС;
				СтрокаПозицииЧека.ОсвобожденныйОборотНДС = СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтавкаНДС.МестоРеализацииНеРК;
			КонецЕсли;
			
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КодМаркировки                          = Неопределено;
			
			Если НЕ ПустаяСтрока(Позиция.КодМаркировки)
				И ((Позиция.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция И ВестиУчетМаркируемогоТабака)
					ИЛИ (Позиция.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция И ВестиУчетМаркируемойОбуви)
						ИЛИ (Позиция.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты И ВестиУчетЛекарственныхПрепаратов)) Тогда
					
				НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
				РезультатРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(
					Позиция.КодМаркировки, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции,, НастройкиРазбораКодаМаркировки);
							
				Если НЕ РезультатРазбораКодаМаркировки = Неопределено Тогда
					СоставКодаМаркировки = РезультатРазбораКодаМаркировки.СоставКодаМаркировки;
					Если СоставКодаМаркировки <> Неопределено Тогда
						Если Позиция.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
							ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
						ИначеЕсли Позиция.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
							ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
						Иначе 
							ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ЛекарственныеПрепараты;
						КонецЕсли;
						СтрокаПозицииЧека.Штрихкод                                                              = Позиция.Штрихкод;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировки;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = СоставКодаМаркировки.GTIN;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КодМаркировки                          = Позиция.КодМаркировки;
						СтруктураКода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Позиция.КодМаркировки);
						Если СтруктураКода.Разобран Тогда 
							ПодготовитьКодМаркировкиBase64(СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры, СтруктураКода.ДанныеШтрихКода);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		КонецЦикла;
		
		// Платежная карта
		СуммаБезналичнойОплаты = 0;
		СуммаМобильнойОплаты = 0;
		Для каждого Оплата Из ТаблицаОплаты Цикл
			Если Оплата.МобильныйПлатеж Тогда
				СуммаМобильнойОплаты = СуммаМобильнойОплаты + Оплата.СуммаОплаты;
			Иначе
				СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + Оплата.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаБезналичнойОплаты > 0 Тогда
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
			СтрокаОплаты.Вставить("Сумма", СуммаБезналичнойОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;
		
		Если СуммаМобильнойОплаты > 0 Тогда
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.МобильныйПлатеж);
			СтрокаОплаты.Вставить("Сумма", СуммаМобильнойОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;
		
		// Наличные
		Если Реквизиты.СуммаДокумента > (СуммаБезналичнойОплаты + СуммаМобильнойОплаты) Тогда
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
			СтрокаОплаты.Вставить("Сумма", Реквизиты.СуммаДокумента-СуммаБезналичнойОплаты - СуммаМобильнойОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОбщиеПараметры;
	
КонецФункции

Функция ТекстЗапросаОсновныеПараметрыЧека(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыПечатиЧека",      НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	"""" КАК ПолучательИИН
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаТовары",      НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
	|					И ТаблицаДокумента.Ссылка.СуммаВключаетНДС
	|				ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
	|			ТОГДА ТаблицаДокумента.СтавкаНДС
	|		ИНАЧЕ &ПустаяСтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
	|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаДокумента.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Номенклатура.БазоваяЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой) КАК ПризнакСпособаРасчета,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ТаблицаДокумента.Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|   ВЫБОР КОГДА
    |        ТаблицаДокумента.Штрихкод = &ПустаяСтрока
    |            ТОГДА ТаблицаДокумента.Номенклатура.КодНацКаталога
    |        ИНАЧЕ ТаблицаДокумента.Штрихкод
    |   КОНЕЦ КАК Штрихкод,
	|	ТаблицаДокумента.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМУслуги.Номенклатура,
	|	ЧекККМУслуги.Номенклатура.Наименование,
	|	ЧекККМУслуги.Количество,
	|	ЧекККМУслуги.Цена,
	|	ВЫБОР
	|		КОГДА ЧекККМУслуги.Ссылка.УчитыватьНДС
	|					И ЧекККМУслуги.Ссылка.СуммаВключаетНДС
	|				ИЛИ НЕ ЧекККМУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ЧекККМУслуги.Сумма
	|		ИНАЧЕ ЧекККМУслуги.Сумма + ЧекККМУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧекККМУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ЧекККМУслуги.СтавкаНДС
	|		ИНАЧЕ &ПустаяСтавкаНДС
	|	КОНЕЦ,
	|	ЧекККМУслуги.СуммаНДС,
	|	ЧекККМУслуги.Ссылка.ВалютаДокумента,
	|	ЧекККМУслуги.Ссылка.СуммаВключаетНДС,
	|	ЧекККМУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМУслуги.Номенклатура.БазоваяЕдиницаИзмерения),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЧекККМУслуги.Номенклатура.ОсобенностьУчета,
	|	"""",
	|	""""
	|ИЗ
	|	Документ.ЧекККМ.Услуги КАК ЧекККМУслуги
	|ГДЕ
	|	ЧекККМУслуги.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаОплаты(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаОплаты",      НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОплата.Сумма КАК СуммаОплаты,
	|	ТаблицаОплата.МобильныйПлатеж КАК МобильныйПлатеж,
	|	ТаблицаОплата.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасчетыВВалюте", Ложь);
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик       = Реквизиты.Организация;
	НалогоплательщикАкциза = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		НалогоплательщикАкциза = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.Акциз);
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	Реквизиты.Вставить("НалогоплательщикАкциза", НалогоплательщикАкциза);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НалогоплательщикАкциза	 , "НалогоплательщикАкциза");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПлатежи(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",	           НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги",	           НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенАкциз",    НСтр("ru = 'Акциз'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
//	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары И Реквизиты.ЭтоВозврат Тогда
		СписаниеТоваровСписокНоменклатуры = ПараметрыПроведения.ТаблицаТовары.Скопировать( , "Номенклатура");
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", СписаниеТоваровСписокНоменклатуры);
		
		СписаниеТоваровСчетаУчета = ПараметрыПроведения.ТаблицаТовары.Скопировать( , "СчетУчетаБУ");
		СписаниеТоваровСчетаУчета.Колонки.Добавить("СчетУчетаНУ");
		СписаниеТоваровСчетаУчета.ЗаполнитьЗначения(Неопределено, "СчетУчетаНУ");
		СписаниеТоваровСчетаУчета.Свернуть("СчетУчетаБУ, СчетУчетаНУ");
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", СписаниеТоваровСчетаУчета);

	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", Неопределено);
	КонецЕсли;
	
		
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ЧекККМ.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	ЛОЖЬ КАК УказанСчетВозвратов,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ЛОЖЬ КАК УчитыватьКПН,
	|	ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ) КАК ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	НЕОПРЕДЕЛЕНО КАК ПризнакДоговорСовместнойДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЛОЖЬ КАК УчитыватьАкциз,
	|	ЛОЖЬ КАК СуммаВключаетАкциз,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.Касса КАК Касса,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|			ТОГДА Реквизиты.Основание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЧекККМ КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.УказанСчетВозвратов КАК УказанСчетВозвратов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	|	Реквизиты.НалогоплательщикАкциза КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности КАК ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов1,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз КАК УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Содержание КАК Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД,
	|	Реквизиты.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
	|	Реквизиты.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	0 КАК СуммаАкциза,
		|	0 КАК СуммаАкцизаВзаиморасчетов,
		|	0 КАК СтавкаАкциза,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	НЕОПРЕДЕЛЕНО КАК АкцизВидОперацииРеализации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоЗатратБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК КлючСвязи,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ЧекККМ.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Себестоимость,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВал,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетЗатратБУ КАК КорСчетСписанияБУ,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК КорСубконтоБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК КорСубконтоБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3 КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ТаблицаТовары.СчетЗатратНУ КАК КорСчетСписанияНУ,
		|	ТаблицаТовары.СубконтоЗатратНУ1 КАК КорСубконтоНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2 КАК КорСубконтоНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3 КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	&СодержаниеСписаныТМЗ КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|   Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
		|	0 КАК СуммаСписания,
		|	0 СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	0 КАК СуммаСписанияВал
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|ГДЕ
		|  НЕ ТаблицаТовары.Номенклатура.Услуга
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги Тогда 
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкцизаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетЗатратБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ЛОЖЬ КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	0 КАК СуммаАкцизаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
		|	ТаблицаУслуги.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ИСТИНА КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;

	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаРеализация.Сумма КАК Сумма,
	|	ВременнаяТаблицаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаРеализация.СуммаАкциза КАК СуммаАкциза,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.Партия КАК Партия,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаРеализация.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
	|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
	|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС И НЕ (Реквизиты.ЕстьТовары И Реквизиты.УчитыватьАкциз) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Результаты запросов ниже будут использоваться для формирования движений по регистру НДС.
	// В регистре НДС предполагается, что ресурсы СуммаБезНДС и ОборотПоРеализации заполняются
	// суммами, включающими акциз. Поле ТаблицаТовары.Сумма не содержит акциза и НДС,
	// поэтому при определении СуммаБезНДС и ОборотПоРеализации к сумме прибавляется акциз. 
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК СуммаБезНДС,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК ОборотПоРеализации,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК СуммаКорректировкиОборота,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииКорректировки,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ТаблицаТовары.СчетУчетаНДС
		|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|	КОНЕЦ КАК Счет,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) 
		|		ИНАЧЕ Реквизиты.Контрагент 
		|	КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|		ИНАЧЕ Реквизиты.ДоговорКонтрагента
		|	КОНЕЦ КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
		|		ИНАЧЕ ТаблицаТовары.СчетУчетаНДС
		|	КОНЕЦ КАК КорСчет,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Реквизиты.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) 
		|	КОНЕЦ КАК КорСубконто1,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Реквизиты.ДоговорКонтрагента
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	КОНЕЦ КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма КАК СуммаБезНДС,
		|	ТаблицаУслуги.Сумма КАК ОборотПоРеализации,
		|	ТаблицаУслуги.Сумма КАК СуммаКорректировкиОборота,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииКорректировки,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ТаблицаУслуги.СчетУчетаНДС
		|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|	КОНЕЦ КАК Счет,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) 
		|		ИНАЧЕ Реквизиты.Контрагент 
		|	КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|		ИНАЧЕ Реквизиты.ДоговорКонтрагента
		|	КОНЕЦ КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
		|		ИНАЧЕ ТаблицаУслуги.СчетУчетаНДС
		|	КОНЕЦ КАК КорСчет,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Реквизиты.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) 
		|	КОНЕЦ КАК КорСубконто1,
		|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
		|		ТОГДА Реквизиты.ДоговорКонтрагента
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	КОНЕЦ КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ЕстьНомераГТД  Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();
				 
	 Иначе     		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
		
	КонецЕсли;
	                     			
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов + ТаблицаТовары.СуммаНДСВзаиморасчетов + ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС + ТаблицаТовары.СуммаАкциза КАК Сумма
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	1 КАК КурсВзаиморасчетов,
	|	1 КАК КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Значение(ПланСчетов.Типовой.Пустаяссылка) КАК СчетРасчетов,
	|	Значение(ПланСчетов.Типовой.Пустаяссылка) КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Значение(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) КАК ВидДоговора,
	|	Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом) КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаПлатежи(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("Платежи", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации = Значение(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
	|	Реквизиты.Организация КАК Организация,
	|	ЧекККМОплата.Сумма КАК СуммаПроводки,
	|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
	|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
	|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
	|	КОНЕЦ КАК СчетДт,
	|	ДоговорыЭквайринга.Эквайрер КАК СубконтоДт1,
	|	ДоговорыЭквайринга.ДоговорВзаиморасчетов КАК СубконтоДт2,
	|	ВЫБОР КОГДА Реквизиты.ЭтоВозврат
	|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
	|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
	|	КОНЕЦ КАК СчетКт,
	|	Реквизиты.Контрагент КАК СубконтоКт1,
	|	Реквизиты.ДоговорКонтрагента КАК СубконтоКт2,
	|	""Оплата платежной карточкой"" КАК Содержание,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ЧекККМОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Дата,
	|	ЧекККМ.ВидОперации = Значение(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
	|	ЧекККМ.Организация,
	|	ЧекККМ.СуммаДокумента - ЕСТЬNULL(БезналичныеПлатежи.СуммаОплаты, 0),
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВКассе),
	|	ЧекККМ.Касса,
	|	ЧекККМ.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|		ТОГДА Значение(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг)
	|		ИНАЧЕ Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
	|	КОНЕЦ,
	|	ЧекККМ.Контрагент,
	|	ЧекККМ.ДоговорКонтрагента,
	|	""Оплата наличными денежными средствами"",
	|	ЧекККМ.ВалютаДокумента,
	|	ЧекККМ.СтруктурноеПодразделение
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЧекККМОплата.Сумма) КАК СуммаОплаты,
	|			ЧекККМОплата.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ГДЕ
	|			ЧекККМОплата.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЧекККМОплата.Ссылка) КАК БезналичныеПлатежи
	|		ПО ЧекККМ.Ссылка = БезналичныеПлатежи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|	И ЧекККМ.СуммаДокумента > ЕстьNULL(БезналичныеПлатежи.СуммаОплаты, 0)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти


#КонецЕсли













