////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(?(ЗначениеЗаполнено(Параметры.Основание), Параметры.Основание,Параметры.ЗначениеКопирования));
	КонецЕсли;
	
	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.Типовой.ТекущаяСтрока = Параметры.ПараметрТекущаяСтрока - 1;
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, НЕ Параметры.Ключ.Пустая());
	
	УстановитьУсловноеОформление();
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверкаСоответствияБУНУНеТребуется = Ложь;
	ПараметрыЗаписи.Свойство("ПроверкаСоответствияБУНУНеТребуется", ПроверкаСоответствияБУНУНеТребуется);
	Если ПроверкаСоответствияБУНУНеТребуется <> Истина Тогда
		Если ТиповойНаборЗаписей.Количество() <> 0 И Не ПроверитьСоответствиеБУНУ() Тогда
			
			Отказ = Истина;
			ПараметрыЗаписи.Вставить("Закрыть", ФлагЗакрытияФормы);
			
			ОписаниеОповещенияВопроса = Новый ОписаниеОповещения("ВопросЗаполнениеБУНУПриЗаписи", ЭтотОбъект, ПараметрыЗаписи);
			
			ТекстВопроса = НСтр("ru = 'Количества записей по налоговому и бухгалтерскому учетам отличаются.
			|Перезаполнить данные налогового учета ?'");
			ПоказатьВопрос(ОписаниеОповещенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
			Возврат
			
		КонецЕсли;
	КонецЕсли;
	
	ФлагЗакрытияФормы = Ложь;
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись") Тогда
		КлючеваяОперация = "Документ ""операция"" (запись)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	ПроверитьКорректностьПроводокНаСервере();
	
	Если НЕ ТаблицаНекорректныхПроводок.Количество() = 0 Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ не записан. Обнаружены некорректные корреспонденции!'"));
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТаблицаКорреспонденций", ТаблицаНекорректныхПроводок);
		ОткрытьФорму("РегистрСведений.КорректныеКорреспонденцииСчетов.Форма.ФормаСпискаКорреспонденций", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеБУНУ(ПроверятьСодержимое = Ложь)
	
	ТаблицаНалоговыйТекущий = НалоговыйНаборЗаписей.Выгрузить();
	
	ТаблицаНалоговыйНовый = ТаблицаНалоговыйТекущий.СкопироватьКолонки();
	БУЗаполнитьНУНаСервере(ТаблицаНалоговыйНовый);
	
	Если ТаблицаНалоговыйТекущий.Количество() <> ТаблицаНалоговыйНовый.Количество() Тогда
		Возврат Ложь
	КонецЕсли;
	
	Если ПроверятьСодержимое Тогда
		СписокПроверяемыхКолонок = Новый Массив;
		СписокПроверяемыхКолонок.Добавить("СчетДт");
		СписокПроверяемыхКолонок.Добавить("СубконтоДт1");
		СписокПроверяемыхКолонок.Добавить("СубконтоДт2");
		СписокПроверяемыхКолонок.Добавить("СубконтоДт3");
		СписокПроверяемыхКолонок.Добавить("ВидУчетаДт");
		СписокПроверяемыхКолонок.Добавить("СтруктурноеПодразделениеДт");
		СписокПроверяемыхКолонок.Добавить("КоличествоДт");
		СписокПроверяемыхКолонок.Добавить("СчетКт");
		СписокПроверяемыхКолонок.Добавить("СубконтоКт1");
		СписокПроверяемыхКолонок.Добавить("СубконтоКт2");
		СписокПроверяемыхКолонок.Добавить("СубконтоКт3");
		СписокПроверяемыхКолонок.Добавить("ВидУчетаКт");
		СписокПроверяемыхКолонок.Добавить("СтруктурноеПодразделениеКт");
		СписокПроверяемыхКолонок.Добавить("КоличествоКт");
		СписокПроверяемыхКолонок.Добавить("Сумма");
		СписокПроверяемыхКолонок.Добавить("Содержание");
		СписокПроверяемыхКолонок.Добавить("ВидРегламентнойОперации");
		
		Для Каждого ТекСтрока Из ТаблицаНалоговыйНовый Цикл
			СтруктураПоиска = Новый Структура;
			Для Каждого ИмяКолонки Из СписокПроверяемыхКолонок Цикл
				Если ЗначениеЗаполнено(ТекСтрока[ИмяКолонки]) Тогда
					СтруктураПоиска.Вставить(ИмяКолонки, ТекСтрока[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			Если ТаблицаНалоговыйТекущий.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Возврат Ложь
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура ВопросЗаполнениеБУНУПриЗаписи(Результат, ПараметрыЗаписи) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НалоговыйНаборЗаписей.Очистить();
		БУЗаполнитьНУНаСервере();
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПроверкаСоответствияБУНУНеТребуется", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя + "НаборЗаписей");
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТекущийОбъект.Движения[СтрокаРегистра.Имя].Загрузить(ТаблицаДвижений);
			СтрокаРегистра.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, НЕ Параметры.Ключ.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_Операция", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("Закрыть") И ПараметрыЗаписи.Закрыть = Истина Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыВыбораСубконто()
	
	Для Каждого ТекущиеДанные Из ТиповойНаборЗаписей Цикл
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма.Объект, ТекущиеДанные, "СубконтоДт"  + "%Индекс%", "СчетДт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекущиеДанные, "СубконтоДт" +  "%Индекс%", "ТиповойСубконтоДт" +  "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма.Объект, ТекущиеДанные, "СубконтоКт"  + "%Индекс%", "СчетКт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекущиеДанные, "СубконтоКт" +  "%Индекс%", "ТиповойСубконтоКт" +  "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла; 
	
	Для Каждого ТекущиеДанные Из НалоговыйНаборЗаписей Цикл
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма.Объект, ТекущиеДанные, "СубконтоДт"  + "%Индекс%", "СчетДт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекущиеДанные, "СубконтоДт" +  "%Индекс%", "ТиповойСубконтоДт" +  "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма.Объект, ТекущиеДанные, "СубконтоКт"  + "%Индекс%", "СчетКт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекущиеДанные, "СубконтоКт" +  "%Индекс%", "ТиповойСубконтоКт" +  "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		СтруктураПараметров = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
					И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
					
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураПараметров);

			ЗаменитьОрганизациюВТЧ();
			
			ОчиститьСвязаннуюСОрганизациейИнформацию();
			
			ИзменитьПараметрыВыбораСубконто();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "Содержание");
	Оповещение = Новый ОписаниеОповещения("СодержаниеЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
																		Оповещение,
																		Объект.Содержание,
																		НСтр("ru='Содержание'"));
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеЗавершениеВвода(Строка, Параметры) Экспорт 
	
	Если Строка <> Неопределено Тогда
		
		Объект.Содержание = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт

	Элементы.Типовой.ТолькоПросмотр = Ложь;
	Элементы.Типовой.ИзменятьСоставСтрок  = Ложь;
	Элементы.Типовой.ИзменятьПорядокСтрок = Ложь;

	Элементы.ТиповойСумма.ТолькоПросмотр = Истина;
	Элементы.ТиповойВалютаДт.ТолькоПросмотр = Истина;
	Элементы.ТиповойВалютаКт.ТолькоПросмотр = Истина;

	Элементы.ТиповойВалютнаяСуммаДт.ТолькоПросмотр = Истина;
	Элементы.ТиповойВалютнаяСуммаКт.ТолькоПросмотр = Истина;
	
	Элементы.Налоговый.ТолькоПросмотр = Ложь;
	Элементы.Налоговый.ИзменятьСоставСтрок  = Ложь;
	Элементы.Налоговый.ИзменятьПорядокСтрок = Ложь;
	Элементы.НалоговыйСумма.ТолькоПросмотр = Истина;
	
	Для Каждого СтрокаРегистра Из Объект.ТаблицаРегистровНакопления Цикл 		
		Элементы[СтрокаРегистра.Имя].ТолькоПросмотр       = Истина;
		Элементы[СтрокаРегистра.Имя].ИзменятьСоставСтрок  = Ложь;
		Элементы[СтрокаРегистра.Имя].ИзменятьПорядокСтрок = Ложь;	
	КонецЦикла;
	
	Для Каждого СтрокаРегистра Из Объект.ТаблицаРегистровСведений Цикл		
		Элементы[СтрокаРегистра.Имя].ТолькоПросмотр       = Истина;
		Элементы[СтрокаРегистра.Имя].ИзменятьСоставСтрок  = Ложь;
		Элементы[СтрокаРегистра.Имя].ИзменятьПорядокСтрок = Ложь;	
	КонецЦикла;
	
	Элементы.ФормаНастроитьСоставРегистров.Доступность = Ложь;

КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

// Управлен
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Типовой

&НаКлиенте
Процедура ТиповойПриАктивизацииСтроки(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Дт", "СчетДт", Ложь);
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Кт", "СчетКт", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойПриИзменении(Элемент)
	
	РассчитатьСуммуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Дт", "СчетДт");
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДт) Тогда 
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеДт = Объект.СтруктурноеПодразделение;
		КонецЕсли;
		
	Иначе
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеДт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Дт", "СчетДт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Дт", "СчетДт");

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Дт", "СчетДт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Кт", "СчетКт");
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда 
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеКт = Объект.СтруктурноеПодразделение;
		КонецЕсли;
		
	Иначе
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеКт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Кт", "СчетКт");

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 1, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Кт", "СчетКт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 2, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоБУ(ЭтаФорма, "Кт", "СчетКт");

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 3, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютаДтПриИзменении(Элемент)
	
	РасчетСуммыБУ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютнаяСуммаДтПриИзменении(Элемент)
	
	РасчетСуммыБУ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютаКтПриИзменении(Элемент)

	РасчетСуммыБУ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютнаяСуммаКтПриИзменении(Элемент)
	
	РасчетСуммыБУ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуОперации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Налоговый

&НаКлиенте
Процедура НалоговыйПриАктивизацииСтроки(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Дт", "СчетДт");
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Кт", "СчетКт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Дт", "СчетДт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Дт", "СчетДт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Дт", "СчетДт");

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Дт", "СчетДт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетДт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Кт", "СчетКт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Кт", "СчетКт");
		
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 1, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Кт", "СчетКт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 2, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоНУ(ЭтаФорма, "Кт", "СчетКт");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 3, "СчетКт", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаБУЗаполнитьНУ(Команда)
	
	Если ТиповойНаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НалоговыйНаборЗаписей.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Имеющиеся данные на закладке ""Налоговый учет"" будут удалены и заполнены по данным бухгалтерского учета.
							|Продолжить?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоЗаполнениюБУНУ", ЭтотОбъект,);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		БУЗаполнитьНУНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьАктивностьНУ(Команда)
	
	АктивностьНУ = Истина;
	Для Каждого СтрокаТЧ Из Объект.Движения.Налоговый Цикл 
			
		СтрокаТЧ.Активность = НЕ СтрокаТЧ.Активность;
		АктивностьНУ =  СтрокаТЧ.Активность;
		
	КонецЦикла;
	
	Элементы.ГруппаНалоговый.Картинка = ?(АктивностьНУ, 
		БиблиотекаКартинок.ЖурналПроводокНУ, БиблиотекаКартинок.ЖурналПроводокНУНеактивный);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьПроводки(Команда)
	
	ОбновитьПараметры();

	//Если ЗапрашиваемыеПараметры.Количество() = 0 Тогда
	//	Возврат
	//КонецЕсли;

	//ФормаПараметров           = ПолучитьФорму("Параметры", ЭтаФорма);
	//ФормаПараметров.Параметры = ЗапрашиваемыеПараметры.Выгрузить();
	//ТаблицаПараметров         = ФормаПараметров.ОткрытьМодально();

	//ЗаполнитьПоТО(ТаблицаПараметров);
	//ПересчитатьСуммуОперации();
	//
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере(ДокументДвижений = Неопределено)

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация = Объект.Организация;
	
	Элементы.ФормаПереключитьАктивностьДвижений.Доступность = НЕ Объект.ПометкаУдаления;
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
			ДокументДвижений, ДокументДвижений.Метаданные().Движения);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РегистрыСДвижениями = Новый Массив;
	КонецЕсли;
	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	
	Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		СформироватьДвиженияСторноНаСервере();
	Иначе
		СоздатьРеквизитыФормы();
		ПрочитатьДвиженияДокумента(ДокументДвижений);
		СоздатьЭлементыФормы();
	КонецЕсли; 
	
	УстановитьДоступностьСубконто();
	
	Элементы.СторнируемыйДокумент.Видимость = Найти(Объект.СпособЗаполнения, "Корректировка") > 0;
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	ОпредилитьСписокДоступныхСчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для Каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Типовой" ИЛИ  СтрокаРегистра.Имя = "Налоговый" Тогда
			СтрокаРегистра.Отображение = Истина;
		Иначе
			Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
			ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
			СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
				ИЛИ ДобавленПользователем;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Типовой" ИЛИ СтрокаРегистра.Имя = "Налоговый" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(АктивностьДвижений, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
		Для каждого СтрокаРегистра Из Регистры Цикл
			
			Если СтрокаРегистра.Имя = "Типовой" ИЛИ СтрокаРегистра.Имя = "Налоговый" Тогда
				Если СтрокаРегистра.Имя = "Типовой" Тогда
					Элементы.ГруппаТиповой.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
				Иначе
					Элементы.ГруппаНалоговый.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводокНУ, БиблиотекаКартинок.ЖурналПроводокНУНеактивный);
				КонецЕсли;  	
				Продолжить;
			КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				Если СтрокаРегистра.Имя = "Типовой" Тогда
					ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
				Иначе
					ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводокНУ, БиблиотекаКартинок.ЖурналПроводокНУНеактивный);
				КонецЕсли;  				
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			     
			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
									
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		КонецЕсли;

	КонецЦикла;

	//Если отображается не более одного регистра - прячем заголовок у панели регистров
	Если Регистры.НайтиСтроки(Новый Структура("Отображение", Истина)).Количество() <= 1  Тогда
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
		
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 
		
КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

&НаКлиенте
Процедура ЗаменитьОрганизациюВТЧ()
	
	Для Каждого СтрокаТаблицы Из НалоговыйНаборЗаписей Цикл 
		СтрокаТаблицы.Организация 				= Объект.Организация;
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДт) Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеДт = Объект.СтруктурноеПодразделение;
		Иначе
			СтрокаТаблицы.СтруктурноеПодразделениеДт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеКт = Объект.СтруктурноеПодразделение;
		Иначе
			СтрокаТаблицы.СтруктурноеПодразделениеКт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТиповойНаборЗаписей Цикл 
		
		СтрокаТаблицы.Организация 				= Объект.Организация;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДт) Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеДт = Объект.СтруктурноеПодразделение;
		Иначе
			СтрокаТаблицы.СтруктурноеПодразделениеДт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			СтрокаТаблицы.СтруктурноеПодразделениеКт = Объект.СтруктурноеПодразделение;
		Иначе
			СтрокаТаблицы.СтруктурноеПодразделениеКт = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипыСвязанныеСОрганизацией()
	
	 ТипыСвязанныеСОрганизацией =  Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Кассы, 
		|СправочникСсылка.ДоговорыКонтрагентов");
		
	Возврат ТипыСвязанныеСОрганизацией;

КонецФункции

&НаКлиенте
Функция ПолучитьПустуюСсылку(ЗначениеСубконто)
	
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПустоеЗначение = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ПустоеЗначение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Кассы") Тогда
		ПустоеЗначение = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ПустоеЗначение = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ПустоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСвязаннуюСОрганизациейИнформацию()
	
	    ТипыСвязанныеСОрганизацией =  ОпределитьТипыСвязанныеСОрганизацией();
		
		Для каждого Проводка Из ТиповойНаборЗаписей Цикл
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоДт" + Инд] = ПолучитьПустуюСсылку(ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоКт" + Инд] = ПолучитьПустуюСсылку(ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Проводка Из НалоговыйНаборЗаписей Цикл
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоДт" + Инд] = ПолучитьПустуюСсылку(ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоКт" + Инд] = ПолучитьПустуюСсылку(ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		ЗаменитьОрганизациюВТЧ();
		ОчиститьСвязаннуюСОрганизациейИнформацию();
		ИзменитьПараметрыВыбораСубконто();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Для Каждого Проводка Из ТиповойНаборЗаписей Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Истина);
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Истина);
	КонецЦикла;
	
	Для Каждого Проводка Из НалоговыйНаборЗаписей Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Истина);
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяСчета = "СчетДт";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти[ИмяСчета], СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	
	ИмяСчета = "СчетКт";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти[ИмяСчета], СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоБУ(Форма, Суффикс, ИмяСчета, ОчищатьСвязанныеСубконто = Истина)
	
	ТекущаяСтрока = Форма.Элементы.Типовой.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Форма.ТиповойНаборЗаписей.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		
		Если ОчищатьСвязанныеСубконто Тогда
			СтрокаТаблицы = ТекущиеДанные;
		Иначе
			СтрокаТаблицы = Новый Структура(СтрЗаменить("Субконто%Суффикс%1,Субконто%Суффикс%2,Субконто%Суффикс%3", "%Суффикс%", Суффикс));
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", "ТиповойСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
		Для НомерСубконто = 1 По 3 Цикл
			Форма.Элементы["ТиповойСубконто" + Суффикс + НомерСубконто].ПодсказкаВвода = ТекущиеДанные["ВидСубконто" + Суффикс + НомерСубконто];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоНУ(Форма, Суффикс, ИмяСчета, ОчищатьСвязанныеСубконто = Истина)
	
	ТекущаяСтрока = Форма.Элементы.Налоговый.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Форма.НалоговыйНаборЗаписей.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		
		Если ОчищатьСвязанныеСубконто Тогда
			СтрокаТаблицы = ТекущиеДанные;
		Иначе
			СтрокаТаблицы = Новый Структура(СтрЗаменить("Субконто%Суффикс%1,Субконто%Суффикс%2,Субконто%Суффикс%3", "%Суффикс%", Суффикс));
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", "НалоговыйСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
		Для НомерСубконто = 1 По 3 Цикл
			Форма.Элементы["НалоговыйСубконто" + Суффикс + НомерСубконто].ПодсказкаВвода = ТекущиеДанные["ВидСубконто" + Суффикс + НомерСубконто];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоЗаполнениюБУНУ(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НалоговыйНаборЗаписей.Очистить();
		БУЗаполнитьНУНаСервере();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БУЗаполнитьНУНаСервере(ЗаполняемыйНаборЗаписей = Неопределено)
	
	Для Каждого Выборка Из ТиповойНаборЗаписей Цикл
		// Трансляция счетов: Счет дебета
		СтруктураДт = Новый Структура("СчетБУ,СчетКоррБУ", Выборка.СчетДт, Выборка.СчетКт);
		
		Счетчик = 0;
		ЗначениеСубконто = Неопределено;
		Для Н = 1 По 3 Цикл 
			ЗначениеСубконто = Выборка["СубконтоДт" + Н];
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда 
				Счетчик = Счетчик + 1;
				СтруктураДт.Вставить("Субконто" + Счетчик, Выборка["СубконтоДт" + Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТрансляцииДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(СтруктураДт, , Истина, Объект.Дата);
		СчетДт = СтруктураТрансляцииДт.СчетНУ;
		
		// Трансляция счетов: Счет кредита
		СтруктураКт = Новый Структура("СчетБУ,СчетКоррБУ", Выборка.СчетКт, Выборка.СчетДт);
		Счетчик = 0;
		ЗначениеСубконто = Неопределено;
		Для Н = 1 По 3 Цикл 
			ЗначениеСубконто = Выборка["СубконтоКт" + Н];
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда 
				Счетчик = Счетчик + 1;
				СтруктураДт.Вставить("Субконто" + Счетчик, Выборка["СубконтоКт" + Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТрансляцииКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(СтруктураКт, , Истина, Объект.Дата);
		СчетКт = СтруктураТрансляцииКт.СчетНУ;
		
		Если НЕ ЗначениеЗаполнено(СчетДт) И НЕ ЗначениеЗаполнено(СчетКт) Тогда
			Продолжить; // оба счета в НУ не транслируются
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////
		// Формируем коррекспонденцию в НУ
		ТаблицаПроводок = ?(ЗаполняемыйНаборЗаписей = Неопределено, НалоговыйНаборЗаписей, ЗаполняемыйНаборЗаписей);
		Проводка = ТаблицаПроводок.Добавить();
		
		// по дебету
		Если ЗначениеЗаполнено(СчетДт) Тогда
			
			Проводка.СчетДт = СчетДт;
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт).Количественный Тогда
				Проводка.КоличествоДт = Выборка.КоличествоДт;
			КонецЕсли;
			
			// Назначение типа
			Для Индекс = 1 По СчетДт.ВидыСубконто.Количество() Цикл
				Если Проводка["СубконтоДт" + Индекс] = Неопределено Тогда
					Проводка["СубконтоДт" + Индекс] = СчетДт.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено);
				КонецЕсли;
			КонецЦикла;
			
			// Попытка установки по данным бух. учета
			ЗначениеСубконто = Неопределено;
			КоличествоСубконто = Выборка.СчетДт.ВидыСубконто.Количество();
			
			Для Н = 1 По КоличествоСубконто Цикл 
				
				ЗначениеСубконто = Выборка["СубконтоДт" + Н];
				Если НЕ ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					Продолжить;
				КонецЕсли;
				
				ВидСубконтоБУ = Выборка.СчетДт.ВидыСубконто[Н - 1].ВидСубконто;
				ВидСубконтоНУ = СчетДт.ВидыСубконто.Найти(ВидСубконтоБУ, "ВидСубконто");
				Если ВидСубконтоНУ = Неопределено Тогда
					// Пробуем сопоставить по типу
					Для Счетчик = 1 по 3 Цикл
						Если СчетДт.ВидыСубконто.Количество() >= Счетчик Тогда
							Если СчетДт.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
								Проводка["СубконтоДт" + Счетчик] = ЗначениеСубконто;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					//Виды субконто совпали
					Проводка["СубконтоДт" + ВидСубконтоНУ.НомерСтроки] = ЗначениеСубконто;
				КонецЕсли;
				
			КонецЦикла;
			
			// если при трансляции были заданы конкретные значения НУ, то их приоритет выше
			// устанавливаем значения субконто, полученные при трансляции.
			Для Счетчик = 1 по 3 Цикл
				СубконтоДтНУ = СтруктураТрансляцииДт["СубконтоНУ" + Счетчик];
				Если ЗначениеЗаполнено(СубконтоДтНУ) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Счетчик, СубконтоДтНУ);
				КонецЕсли;
			КонецЦикла;
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Истина);
			
		КонецЕсли;
		
		// по кредиту
		Если ЗначениеЗаполнено(СчетКт) Тогда
			
			Проводка.СчетКт = СчетКт;
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт).Количественный Тогда
				Проводка.КоличествоКт = Выборка.КоличествоКт;
			КонецЕсли;
			
			// Назначение типа
			Для Индекс = 1 По СчетКт.ВидыСубконто.Количество() Цикл
				Если Проводка["СубконтоКт" + Индекс] = Неопределено Тогда
					Проводка["СубконтоКт" + Индекс] = СчетКт.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено);
				КонецЕсли;
			КонецЦикла;
			
			// Попытка установки по данным бух. учета
			ЗначениеСубконто = Неопределено;
			КоличествоСубконто = Выборка.СчетКт.ВидыСубконто.Количество();
			
			Для Н = 1 По КоличествоСубконто Цикл 
				
				ЗначениеСубконто = Выборка["СубконтоКт" + Н];
				Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					Продолжить;
				КонецЕсли;
				
				ВидСубконтоБУ = Выборка.СчетКт.ВидыСубконто[Н - 1].ВидСубконто;
				ВидСубконтоНУ = СчетКт.ВидыСубконто.Найти(ВидСубконтоБУ, "ВидСубконто");
				Если ВидСубконтоНУ = Неопределено Тогда
					// Пробуем сопоставить по типу
					Для Счетчик = 1 по 3 Цикл
						Если СчетКт.ВидыСубконто.Количество() >= Счетчик Тогда
							Если СчетКт.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
								Проводка["СубконтоКт" + Счетчик] = ЗначениеСубконто;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					//Виды субконто совпали
					Проводка["СубконтоКт" + ВидСубконтоНУ.НомерСтроки] = ЗначениеСубконто;
				КонецЕсли;
				
			КонецЦикла;
			
			// если при трансляции были заданы конкретные значения НУ, то их приоритет выше
			// устанавливаем значения субконто, полученные при трансляции.
			Для Счетчик = 1 по 3 Цикл
				СубконтоКтНУ = СтруктураТрансляцииКт["СубконтоНУ" + Счетчик];
				Если ЗначениеЗаполнено(СубконтоКтНУ) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, Счетчик, СубконтоКтНУ);
				КонецЕсли;
			КонецЦикла;
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Истина);
			
		КонецЕсли;
		
		Проводка.Активность = Не Объект.ПометкаУдаления;
		
		Проводка.НомерЖурнала = Выборка.НомерЖурнала;
		Проводка.Организация  = Выборка.Организация;
		Проводка.Содержание   = Выборка.Содержание;
		Проводка.Сумма        = Выборка.Сумма;
		
		Проводка.СтруктурноеПодразделениеДт = Выборка.СтруктурноеПодразделениеДт;
		Проводка.СтруктурноеПодразделениеКт = Выборка.СтруктурноеПодразделениеКт;
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Справочники.ВидыУчетаНУ.НУ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыБУ(ПересчетСуммыПоКурсуДт = Неопределено)
	
	ТекущиеДанные     = Элементы.Типовой.ТекущиеДанные;
	
	СтруктураПроводки = Новый Структура("ВалютаДт,ВалютнаяСуммаДт,ВалютаКт,ВалютнаяСуммаКт,Сумма");
	
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Типовой.ТекущиеДанные, СтруктураПроводки);
	
	РассчитатьСуммуОперации();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)

	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	
	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	Возврат Сумма;

КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуОперации()
	
	Объект.СуммаОперации = ТиповойНаборЗаписей.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметры()

	//ТаблицаЗначений = Объект.ЗапрашиваемыеПараметры.Выгрузить();

	//Объект.ЗапрашиваемыеПараметры.Очистить();

	//Если Не Объект.ТиповаяОперация.Пустая() Тогда
	//	Объект.Заполнить(Объект.ТиповаяОперация);
	//КонецЕсли;

	//Для каждого Параметр Из Объект.ЗапрашиваемыеПараметры Цикл

	//	Стр = ТаблицаЗначений.Найти(Параметр.Имя, "Имя");

	//	Если Стр = Неопределено Тогда
	//		Продолжить
	//	КонецЕсли;

	//	Параметр.Значение = Стр.Значение;

	//КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьПроводокНаСервере()
	
	Если НЕ	ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "КонтрольКорреспонденцииСчетов") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаНекорректныхПроводок.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяСсылка",   ПланыСчетов.Типовой.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("ТаблицаТиповой", ТиповойНаборЗаписей.Выгрузить()); 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Типовой.СчетДт КАК ПланСчетов.Типовой) КАК СчетДт,
	|	ВЫРАЗИТЬ(Типовой.СчетКт КАК ПланСчетов.Типовой) КАК СчетКт,
	|	Типовой.Содержание КАК Комментарий
	|ПОМЕСТИТЬ Типовой
	|ИЗ
	|	&ТаблицаТиповой КАК Типовой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.СчетДт КАК СчетДт,
	|	Типовой.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ ПроверенныеСчета
	|ИЗ
	|	Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|		ПО Типовой.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт
	|			И Типовой.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Типовой.СчетДт,
	|	Типовой.СчетКт
	|ИЗ
	|	Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|		ПО Типовой.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт
	|			И (КорректныеКорреспонденцииСчетов.СчетКт = &ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Типовой.СчетДт,
	|	Типовой.СчетКт
	|ИЗ
	|	Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|		ПО (КорректныеКорреспонденцииСчетов.СчетДт = &ПустаяСсылка)
	|			И Типовой.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПСТиповойДт.Ссылка КАК СчетДт,
	|	ПСТиповойКт.Ссылка КАК СчетКт,
	|	Типовой.Комментарий КАК Комментарий,
	|	СУММА(1) КАК ВесПроводки,
	|	ПСТиповойДт.Код КАК КодДт,
	|	ПСТиповойКт.Код КАК КодКт,
	|	ПСТиповойДт.Порядок КАК ПорядокДт,
	|	ПСТиповойКт.Порядок КАК ПорядокКт
	|ИЗ
	|	Типовой КАК Типовой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроверенныеСчета КАК ПроверенныеСчета
	|		ПО (ПроверенныеСчета.СчетКт = Типовой.СчетКт)
	|			И (ПроверенныеСчета.СчетДт = Типовой.СчетДт)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК ПСТиповойДт
	|		ПО Типовой.СчетДт = ПСТиповойДт.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК ПСТиповойКт
	|		ПО Типовой.СчетКт = ПСТиповойКт.Ссылка
	|ГДЕ
	|	ПроверенныеСчета.СчетКт ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПСТиповойДт.Ссылка,
	|	ПСТиповойКт.Ссылка,
	|	Типовой.Комментарий,
	|	ПСТиповойДт.Код,
	|	ПСТиповойКт.Код,
	|	ПСТиповойДт.Порядок,
	|	ПСТиповойКт.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокДт,
	|	ПорядокКт";
	

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;		
		ТаблицаНекорректныхПроводок.Загрузить(Результат.Выгрузить());	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("СтруктурноеПодразделение")
			И ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		Элемент.ТекущиеДанные.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
	КонецЕсли; 
	//
	//
	//Если НЕ Копирование Тогда 
	//	//КолонкиРегистра = Неопределено;
	//	//СоответствиеКолонокРегистров.Свойство(Элемент.Имя, КолонкиРегистра);
	//	//Если КолонкиРегистра <> Неопределено Тогда
	//	//	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиРегистра, ",", Истина, Истина);
	//		Для Каждого ДанныеСтроки Из  Элемент.ТекущиеДанные Цикл
	//			//Если ТипЗнч(ТекущиеДанные[Колонка]) = Тип("СправочникСсылка.Организации") Тогда 
	//			//	ТекущиеДанные[Колонка] = Объект.Организация;
	//			//КонецЕсли;
	//			//
	//			//Если ТипЗнч(ТекущиеДанные[Колонка]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
	//			//	ТекущиеДанные[Колонка] = Объект.СтруктурноеПодразделение;
	//			//КонецЕсли;
	//		КонецЦикла;
	//	//КонецЕсли;
	//КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОперацияБух.Форма.ФормаНастройки", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		РезультатПоиска = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРегистра = РезультатПоиска[0];
		
		СтрокаРегистра.Отображение = ИзмененныйРегистр.Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда 
			Если  СтрокаРегистра.Имя = "Типовой" Или  СтрокаРегистра.Имя = "Налоговый" Тогда
				СтрокаРегистра.ЕстьДвижения = Истина;
			Иначе				 
				СтрокаРегистра.ЕстьДвижения = ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура СторнируемыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите организацию.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МожноРедактироватьДокумент = СторнируемыйДокументПриИзмененииНаСервере(Объект.СторнируемыйДокумент);
	
	Если Не МожноРедактироватьДокумент Тогда
		ТекстСообщения =  НСтр("ru = 'Выбранный документ нельзя корректировать!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю (ТекстСообщения);
		Объект.СторнируемыйДокумент = Неопределено;
		Возврат;
	КонецЕсли;
			
	Если ЕстьДвижения() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("СторнируемыйДокументПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СторнируемыйДокументПриИзмененииНаСервере(СторнируемыйДокумент)
	               	
	Возврат РаботаСДиалогами.ПроверитьВозможностьКорректировкиДокумента(СторнируемыйДокумент) 
			  	
КонецФункции

&НаСервере
Процедура СформироватьДвиженияСторноНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДвижения();
	Объект.ТаблицаРегистровНакопления.Очистить();
	Объект.ТаблицаРегистровСведений.Очистить();
	
	РегистрыИсключения = Новый Массив;
	Для каждого Регистр Из Метаданные.РегистрыСведений Цикл
		РегистрыИсключения.Добавить(Регистр.Имя); // Регистры сведений не сторнируются
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		Объект.СторнируемыйДокумент, Объект.СторнируемыйДокумент.Метаданные().Движения, РегистрыИсключения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(Объект.СторнируемыйДокумент);
	СторнироватьДвижения();
	СоздатьЭлементыФормы();
	
	Объект.СуммаОперации = ЭтаФорма.ТиповойНаборЗаписей.Итог("Сумма");
	Объект.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Корректировка: ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Строка(Объект.СторнируемыйДокумент));

   
КонецПроцедуры

&НаСервере
Процедура СторнироватьДвижения()
	
	Для каждого СтрокаРегистра Из Регистры Цикл

		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		ИмяРеквизита       = СтрокаРегистра.Имя + "НаборЗаписей";
		МетаданныеРегистра = РеквизитФормыВЗначение(ИмяРеквизита).Метаданные();

		Для каждого Движение Из ЭтотОбъект[ИмяРеквизита] Цикл

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Если Ресурс.ПризнакУчета = Неопределено Тогда
						Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
					Иначе
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Дт"]) Тогда
							Движение[Ресурс.Имя + "Дт"] = - Движение[Ресурс.Имя + "Дт"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Кт"]) Тогда
							Движение[Ресурс.Имя + "Кт"] = - Движение[Ресурс.Имя + "Кт"];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
				КонецЦикла;
			КонецЕсли;   
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ЕстьДвижения()
	
	КоличествоЗаписей = 0;
	Для Каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			КоличествоЗаписей       = ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество();
		КонецЕсли;
		
		Если  КоличествоЗаписей > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ОчиститьДвижения()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Очистить();
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура СторнируемыйДокументПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьАктивностьДвиженийНаСервере()
	
	НоваяАктивность = НЕ АктивностьДвижений;
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;		
		
		ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
		НаборЗаписей = РеквизитФормыВЗначение(ПутьКДаннымТаблицы);
		  		
		НаборЗаписей.УстановитьАктивность(НоваяАктивность);
		ЗначениеВРеквизитФормы(НаборЗаписей, ПутьКДаннымТаблицы);
		
		ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			Если СтрокаРегистра.Имя = "Типовой" Тогда
				ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Иначе
				ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.ЖурналПроводокНУ, БиблиотекаКартинок.ЖурналПроводокНУНеактивный);
			КонецЕсли; 
			
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
			БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
			БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
		КонецЕсли; 		
	КонецЦикла;
	
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(НоваяАктивность, 
	НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	АктивностьДвижений = НоваяАктивность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьДвижений(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , 
			НСтр("ru = 'Операция помечена на удаление, поэтому переключить активность нельзя.
        	|Снимите пометку удаления.'"));
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьДвиженийНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОпредилитьСписокДоступныхСчетов()
	
	УсловияОтбора = Новый Структура;
	УсловияОтбора.Вставить("ИспользоватьВПроводках"	, Истина);
	УсловияОтбора.Вставить("Валютный"				, Неопределено);
	УсловияОтбора.Вставить("Забалансовый"			, Неопределено);
	УсловияОтбора.Вставить("СчетаИсключения"		, Неопределено);
	
	МассивСчетов = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(Новый массив, УсловияОтбора,"Типовой");
	
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетов));
	
	Элементы.ТиповойСчетДт.ПараметрыВыбора 		= Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.ТиповойСчетКт.ПараметрыВыбора 		= Новый ФиксированныйМассив(НовыеПараметры);
	
	МассивСчетов = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(Новый массив, УсловияОтбора,"Налоговый");
	
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетов));
	
	Элементы.НалоговыйСчетДт.ПараметрыВыбора	= Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.НалоговыйСчетКт.ПараметрыВыбора 	= Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТиповойПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = ТиповойНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы.Типовой.ТекущиеДанные);
		Элементы.Типовой.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		Элементы.Типовой.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = НалоговыйНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы.Налоговый.ТекущиеДанные);
		Элементы.Налоговый.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		Элементы.Налоговый.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ТипыНаборовЗаписей = Новый Массив;
	ТипыНаборовЗаписей.Добавить("Типовой");
	ТипыНаборовЗаписей.Добавить("Налоговый");
	
	СтороныСчёта = Новый Массив;
	СтороныСчёта.Добавить("Дт");
	СтороныСчёта.Добавить("Кт");
	
	// установка отметки незаполненности в полях таблиц
	Для Каждого ТипНабораЗаписей Из ТипыНаборовЗаписей Цикл
		Для Каждого СторонаСчёта Из СтороныСчёта Цикл
			
			// субконто
			Для НомерСубконто = 1 По 3 Цикл
				
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "НаборЗаписей.Субконто" + СторонаСчёта + НомерСубконто + "Доступность");
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Истина;
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "НаборЗаписей.Субконто" + СторонаСчёта + НомерСубконто);
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
				
				ОформляемоеПоле= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Использование = Истина;
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "Субконто" + СторонаСчёта + НомерСубконто);
				
			КонецЦикла;
			
			// количество
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "НаборЗаписей.Количество" + СторонаСчёта);
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 0;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
			ОформляемоеПоле= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Использование = Истина;
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "Количество" + СторонаСчёта);
			
			Если ТипНабораЗаписей = "Типовой" Тогда
				// валюта
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "НаборЗаписей.Валюта" + СторонаСчёта);
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Использование = Истина;
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "Валюта" + СторонаСчёта);
				
				// валютная сумма
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "НаборЗаписей.ВалютнаяСумма" + СторонаСчёта);
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Использование = Истина;
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТипНабораЗаписей + "ВалютнаяСумма" + СторонаСчёта);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьИЗаписать(Команда)
	ФлагЗакрытияФормы = Истина;
	Записать(Новый Структура("Закрыть", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ФлагЗакрытияФормы = Не ЗавершениеРаботы;
КонецПроцедуры
