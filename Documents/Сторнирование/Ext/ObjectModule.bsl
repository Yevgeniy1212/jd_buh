#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.Сторнирование.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Документы.Сторнирование.ОбновитьПериодЗаписейДвижений(ЭтотОбъект);
	
	Если Не ЭтоНовый() И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ДокументОснованияДоЗаписи",Ссылка.ДокументОснование);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный");
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
		Если ОснованиеОбъект <> Неопределено И ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
			Если ПометкаУдаления Тогда
				Документы[ОснованиеОбъект.Метаданные().Имя].ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(ОснованиеОбъект, Новый Массив());
				ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Записать();
			Иначе
				ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Очистить();
				ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;        
			
	ОчиститьДозаписатьПериодыОплатыДляМедицинскогоСтрахования(Отказ); 
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл
		
		Движение.Прочитать();
		Движение.УстановитьАктивность(ФлагАктивности);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДозаписатьПериодыОплатыДляМедицинскогоСтрахования(Отказ); 
	    
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций")  Тогда
		ИспользуетсяПериодДействия = НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Организация, НачалоМесяца(ДокументОснование.ПериодРегистрации));
	
		Если НЕ ИспользуетсяПериодДействия
			И НачалоМесяца(ДокументОснование.ПериодРегистрации) >= РасчетЗарплатыСервер.ДатаИзмененияПорядкаПеречисленияОСМС2024() Тогда
							
			ОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
			
			Если ОснованиеОбъект <> Неопределено  Тогда				
				Если ПометкаУдаления Тогда                                          
										
					//нужно восстановить движения по периодам отпусков   
					ПараметрыПроведенияОснования = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПодготовитьПараметрыПроведения(ДокументОснование, Отказ);
					
					ТаблицаПериодыОплатыДляМедицинскогоСтрахования = РасчетЗарплатыСервер.ПодготовитьТаблицуПериодыОплатыДляМедицинскогоСтрахования(ПараметрыПроведенияОснования.Реквизиты[0], 
												ПараметрыПроведенияОснования.Начисления, 
												ОснованиеОбъект.Движения.ПериодыОплатыДляМедицинскогоСтрахования.ВыгрузитьКолонки(),
												Отказ);											
												
					ОснованиеОбъект.Движения.ПериодыОплатыДляМедицинскогоСтрахования.Загрузить(ТаблицаПериодыОплатыДляМедицинскогоСтрахования);   
									
				Иначе  
					//очистим движения
					ОснованиеОбъект.Движения.ПериодыОплатыДляМедицинскогоСтрахования.Очистить();					
				КонецЕсли;                                                                      
				
				Если Не Отказ Тогда
					ОснованиеОбъект.Движения.ПериодыОплатыДляМедицинскогоСтрахования.Записать(); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 	   
	КонецЕсли;
	
	ДокументОснованиеДоЗаписи = Неопределено; 
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ДокументОснованияДоЗаписи",ДокументОснованиеДоЗаписи) Тогда
	
		Если ДокументОснованиеДоЗаписи = Неопределено Тогда
			Возврат;                                           
		КонецЕсли;
			
		//проверим, если в документе был изменен сторнирующий документ, то нужно восстановить запсиси в регистре по периодам, если они там были
		ИзмененДокументОснованиеНачисления = (ДокументОснование <> ДокументОснованиеДоЗаписи И ТипЗнч(ДокументОснованиеДоЗаписи) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций")); 
		
		Если НЕ ИзмененДокументОснованиеНачисления Тогда
			Возврат;	
		КонецЕсли;
		
		ИспользуетсяПериодДействия = НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Организация, НачалоМесяца(ДокументОснованиеДоЗаписи.ПериодРегистрации)); 
		
		Если  ИспользуетсяПериодДействия
			ИЛИ НачалоМесяца(ДокументОснованиеДоЗаписи.ПериодРегистрации) < РасчетЗарплатыСервер.ДатаИзмененияПорядкаПеречисленияОСМС2024() Тогда
			Возврат;
		КонецЕсли;     
		
		ОснованиеОбъектДоЗаписи = ДокументОснованиеДоЗаписи.ПолучитьОбъект();
		
		Если ИзмененДокументОснованиеНачисления И ОснованиеОбъектДоЗаписи <> Неопределено Тогда   
			//нужно восстановить движения по периодам отпусков   
			ПараметрыПроведенияОснования = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПодготовитьПараметрыПроведения(ДокументОснованиеДоЗаписи, Отказ);
			
			ТаблицаПериодыОплатыДляМедицинскогоСтрахования = РасчетЗарплатыСервер.ПодготовитьТаблицуПериодыОплатыДляМедицинскогоСтрахования(ПараметрыПроведенияОснования.Реквизиты[0], 
			ПараметрыПроведенияОснования.Начисления, 
			ОснованиеОбъектДоЗаписи.Движения.ПериодыОплатыДляМедицинскогоСтрахования.ВыгрузитьКолонки(),
			Отказ);											
			
			ОснованиеОбъектДоЗаписи.Движения.ПериодыОплатыДляМедицинскогоСтрахования.Загрузить(ТаблицаПериодыОплатыДляМедицинскогоСтрахования);  
			
			Если Не Отказ Тогда
				ОснованиеОбъектДоЗаписи.Движения.ПериодыОплатыДляМедицинскогоСтрахования.Записать(); 
			КонецЕсли;  			
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли
