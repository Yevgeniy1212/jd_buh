#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	
	// возврат ДС поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "РасчетыСПоставщикомПоВозвратам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПоставщикомНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");

	// расчеты по займам и кредитам
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКПолучению");
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКВыплате");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКПолучениюНУ");
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКВыплатеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// приобретение/продажа валюты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "КонвертацияВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "КонвертацияВалютыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// прочие расчеты с контрагентом
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателемПрочие");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПокупателемПрочиеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// прочие виды операций
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПокупателемНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	Для Каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасшифровкаПлатежа", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасчетыПоКредитам" , "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьОперацииСВалютой"  , "ВидОперации");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасшифровкаПлатежа") Тогда
		
		ДанныеЗаполнения.ЕстьРасшифровкаПлатежа = ЕстьРасшифровкаПлатежа(ДанныеЗаполнения.ВидОперации);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасчетыПоКредитам") Тогда
		
		ДанныеЗаполнения.ЕстьРасчетыПоКредитам = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьОперацииСВалютой") Тогда
		
		ДанныеЗаполнения.ЕстьОперацииСВалютой = 
			ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
		
	КонецЕсли;

КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПоставщиком");
	ВидыОпераций.Добавить("РасчетыПоКредитамИЗаймам");
	ВидыОпераций.Добавить("ПриобретениеИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажиИностраннойВалюты");
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");
	ВидыОпераций.Добавить("ВозвратПенсионныхВзносов");
	ВидыОпераций.Добавить("ВозвратСоциальныхОтчислений");
	ВидыОпераций.Добавить("ВозвратЗаработнойПлаты");
	ВидыОпераций.Добавить("ОплатаСтруктурногоПодразделения");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаБанка(СчетОрганизации, СчетБанк) Экспорт
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		СчетУчетаБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаБанк) Тогда
			СчетБанк = СчетУчетаБанк;
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Типовой.ПустаяСсылка();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Типовой.ПустаяСсылка();
		
	ИначеЕсли НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком тогда			
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = СчетаУчета.СчетВозвратов;			
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = ПланыСчетов.Типовой.ПустаяСсылка();					
		Иначе                                                                                               			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = СчетаУчета.СчетАвансовПокупателя;						
		КонецЕсли;                                                                                          		
	КонецЕсли;   	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка =
		ВидОперации     = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами");
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Оплачено");
		БлокируемыеРеквизиты.Добавить("ДатаВыписки");
		БлокируемыеРеквизиты.Добавить("СуммаКомиссии; СуммаКомиссии");  //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("ВключатьКомиссиюБанка; ВключатьКомиссиюБанка"); //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("ПроцентКомиссии; ПроцентКомиссии ");  //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");		
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель;СтруктурноеПодразделениеОрганизацияПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель;СтруктурноеПодразделениеОрганизацияОтправитель,");
		БлокируемыеРеквизиты.Добавить("СчетКонтрагента"); 
		БлокируемыеРеквизиты.Добавить("КурсНаДатуПриобретенияРеализацииВалюты"); 		
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Контрагент; РасшифровкаПлатежаКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты;РасшифровкаПлатежаКурсНаДатуПриобретенияРеализацииВалюты");
		
		// таб. часть РасшифровкаПлатежаПокупкаВалюты платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.ДоговорКонтрагента; РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаПлатежа; РасшифровкаПлатежаПокупкаВалютыСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаНДС; РасшифровкаПлатежаПокупкаВалютыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СтавкаНДС; РасшифровкаПлатежаПокупкаВалютыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КурсВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КратностьВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыРасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КурсНаДатуПриобретенияРеализацииВалюты;РасшифровкаПлатежаПокупкаВалютыКурсНаДатуПриобретенияРеализацииВалюты");
		
		// таб. часть РасшифровкаПлатежаПродажаВалюты 
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.ДоговорКонтрагента; РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаПлатежа; РасшифровкаПлатежаПродажаВалютыСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаНДС; РасшифровкаПлатежаПродажаВалютыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СтавкаНДС; РасшифровкаПлатежаПродажаВалютыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КратностьВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КурсВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КурсНаДатуПриобретенияРеализацииВалюты;РасшифровкаПлатежаПродажаВалютыКурсНаДатуПриобретенияРеализацииВалюты");

		// таб. часть ВозвратПенсионныхВзносов
		БлокируемыеРеквизиты.Добавить("ВозвратПенсионныхВзносов");
		БлокируемыеРеквизиты.Добавить("ВозвратПенсионныхВзносов.Документ; ВозвратПенсионныхВзносовДокумент");
		БлокируемыеРеквизиты.Добавить("ВозвратПенсионныхВзносов.СуммаВозврата; ВозвратПенсионныхВзносовСуммаВозврата");
		 		
		// таб. часть ВозвратСоциальныхОтчислений
		БлокируемыеРеквизиты.Добавить("ВозвратСоциальныхОтчислений");
		БлокируемыеРеквизиты.Добавить("ВозвратСоциальныхОтчислений.Документ; ВозвратСоциальныхОтчисленийДокумент");
		БлокируемыеРеквизиты.Добавить("ВозвратСоциальныхОтчислений.СуммаВозврата; ВозвратСоциальныхОтчисленийСуммаВозврата"); 
		
		// таб. часть ВозвратЗаработнойПлаты
		БлокируемыеРеквизиты.Добавить("ВозвратЗаработнойПлаты");
		БлокируемыеРеквизиты.Добавить("ВозвратЗаработнойПлаты.Документ; ВозвратЗаработнойПлатыДокумент");
		БлокируемыеРеквизиты.Добавить("ВозвратЗаработнойПлаты.СуммаВозврата; ВозвратЗаработнойПлатыСуммаВозврата");
											
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
			
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Типовой.ПустаяСсылка());
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",     ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	     ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")	
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") 
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС")
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА")
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда		 
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком; 		 
		ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению)
				ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС") И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли; 
		
		Объект.Контрагент  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);

		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();

		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Объект.СчетОрганизации = ПараметрыДокументаОснования.СтруктурнаяЕдиница;
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") Тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе

			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();

			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;

		КонецЕсли;

		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл			
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);  			
		КонецЦикла; 
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ");			
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")   Тогда			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам");
		Иначе				
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;	
		
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснованиеРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ТипЗнч(ДокументОснованиеРТУ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснованиеРТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;

		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОПВВозвратВзносов")
			  ИЛИ  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СОВозвратОтчислений")
			  ИЛИ  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЕПВозвратПлатежа")
			  ИЛИ  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратЗарплатыРаботниковОрганизаций")
			  ИЛИ  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВозвратПрочихВыплат") Тогда
		
		ЗаполнитьДокументПоОснованиюРегл(Объект,ДокументОснование);

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		Если ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению Тогда
			ТекстСообщения = НСтр("ru = 'Для ввода на основании вид операции должен быть ""Оплата структурному подразделению""'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Организация
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Контрагент = &КонтрагентОрганизации");
		
		Запрос.УстановитьПараметр("КонтрагентОрганизации", ДокументОснование.Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ТекстСообщения  = НСтр("ru = 'Нет организации, соответствующей контрагенту документа-основания'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		ОрганизацияДокумента = ВыборкаРезультатов.Организация;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Контрагент
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", ДокументОснование.Организация);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда			
			ВыборкаРезультатов = Результат.Выбрать();
			ВыборкаРезультатов.Следующий();
			КонтрагентДокумента = ВыборкаРезультатов.Контрагент;			
		Иначе          			        			
			КонтрагентДокумента = Справочники.Контрагенты.ПустаяСсылка();
			ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);					                                             			
		КонецЕсли;
		
		Объект.Организация = ОрганизацияДокумента;		
		
		СтрокаРасшифровкиОснования = ДокументОснование.РасшифровкаПлатежа[0];
		
		Если ЗначениеЗаполнено(КонтрагентДокумента) Тогда
			
			Объект.Контрагент = КонтрагентДокумента;
			
			ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаРасшифровкиОснования.ДоговорКонтрагента) Тогда
				ПараметрВалюта = СтрокаРасшифровкиОснования.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ПараметрВалюта = ДокументОснование.ВалютаДокумента
			КонецЕсли;
			
			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(ДоступныйОсновнойДоговорКонтрагента) Тогда
				Если (ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
					 (ДоступныйОсновнойДоговорКонтрагента.Организация = Объект.Организация) И
					 (ДоступныйОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрВалюта) Тогда
					ДоговорКонтрагентаДокумента = ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаДокумента) Тогда
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
				
				Запрос.УстановитьПараметр("Владелец",    Объект.Контрагент);
				Запрос.УстановитьПараметр("Организация", Объект.Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрВалюта);
				
				Результат = Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда					
					ВыборкаРезультатов = Результат.Выбрать();
					ВыборкаРезультатов.Следующий();
					ДоговорКонтрагента = ВыборкаРезультатов.Ссылка;					
				Иначе
					ТекстСообщения  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);					
					
					ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорКонтрагентаДокумента.Владелец = Объект.Контрагент;
					ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Объект.Организация) + ", " + СокрЛП(ПараметрВалюта) + ")"; 
					ДоговорКонтрагентаДокумента.Организация = Объект.Организация;
					ДоговорКонтрагентаДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов = ПараметрВалюта;
					ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорКонтрагентаДокумента.Записать();
					
					ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;						
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе			
			// очистим контрагента, так как он может заполнится при заполнении шапки на основании
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				
		КонецЕсли;
		
		Объект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;			
		НоваяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРасшифровки.СуммаПлатежа = СтрокаРасшифровкиОснования.СуммаПлатежа;
		НоваяСтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровкиОснования.СуммаВзаиморасчетов;
		НоваяСтрокаРасшифровки.КурсВзаиморасчетов = СтрокаРасшифровкиОснования.КурсВзаиморасчетов;
		НоваяСтрокаРасшифровки.КратностьВзаиморасчетов = СтрокаРасшифровкиОснования.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			НоваяСтрокаРасшифровки.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		Объект.СуммаДокумента  = ДокументОснование.СуммаДокумента;
		Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения;
		
		Объект.ДатаВходящегоДокумента  = ДокументОснование.Дата;
		Объект.НомерВходящегоДокумента = ДокументОснование.Номер;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		Объект.Контрагент  = ДокументОснование.Эквайрер;
		ДоговорКонтрагента = ДокументОснование.ДоговорВзаиморасчетовЭквайрера;
		
	    ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрокаПлатежа = Объект.РасшифровкаПлатежа.Добавить();
		
		НоваяСтрокаПлатежа.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			НоваяСтрокаПлатежа.Сделка = ДокументОснование;
		КонецЕсли;

		НоваяСтрокаПлатежа.КурсВзаиморасчетов      = КурсДокумента;
		НоваяСтрокаПлатежа.КратностьВзаиморасчетов = КратностьДокумента;
		
		Если ДокументОснование.РасшифровкаПлатежа.Количество() = 1 Тогда
			НоваяСтрокаПлатежа.СтатьяДвиженияДенежныхСредств = ДокументОснование.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		НоваяСтрокаПлатежа.СуммаПлатежа = ДокументОснование.СуммаДокумента - ДокументОснование.СуммаТорговойУступки;
        НоваяСтрокаПлатежа.СуммаВзаиморасчетов = НоваяСтрокаПлатежа.СуммаПлатежа;
		
		УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(НоваяСтрокаПлатежа);
		
		НоваяСтрокаПлатежа.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		
		ЗначениеСтавкиНДС     = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрокаПлатежа.СтавкаНДС);		
		НоваяСтрокаПлатежа.СуммаНДС = НоваяСтрокаПлатежа.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

		Объект.СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		
		НоваяСтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПараметрыДокументаОснования.СчетУчетаРасчетовСЭквайрером;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();	
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры   

Процедура ЗаполнитьДокументПоОснованиюРегл(Объект,ДокументОснование)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОПВВозвратВзносов")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = Объект.ВозвратПенсионныхВзносов.Добавить();
		СтрокаСписок.Документ	   = ДокументОснование;
		СтрокаСписок.СуммаВозврата = ДокументОснование.ПенсионныеВзносы.Итог("Сумма");
		Объект.СуммаДокумента			   = СтрокаСписок.СуммаВозврата;
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СОВозвратОтчислений")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = Объект.ВозвратСоциальныхОтчислений.Добавить();
		СтрокаСписок.Документ	   = ДокументОснование;
		СтрокаСписок.СуммаВозврата = ДокументОснование.СоциальныеОтчисления.Итог("Сумма");
		Объект.СуммаДокумента	   = СтрокаСписок.СуммаВозврата;
	
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЕПВозвратПлатежа")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = Объект.ВозвратЕдиногоПлатежа.Добавить();
		СтрокаСписок.Документ	   = ДокументОснование;
		СтрокаСписок.СуммаВозврата = ДокументОснование.ЕдиныеПлатежи.Итог("Сумма");
		Объект.СуммаДокумента	   = СтрокаСписок.СуммаВозврата;
	
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратЗарплатыРаботниковОрганизаций")) Тогда
			
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = Объект.ВозвратЗаработнойПлаты.Добавить();
		СтрокаСписок.Документ	   = ДокументОснование;
		СтрокаСписок.СуммаВозврата = ДокументОснование.Зарплата.Итог("Сумма");
		Объект.СуммаДокумента	   = СтрокаСписок.СуммаВозврата;  
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВозвратПрочихВыплат")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат;
		
		СпособОтраженияДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.ВидПрочихВыплат, "СпособОтраженияВРеглУчете");
		
		СтруктураСчетаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтраженияДокументОснование, "СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, 
																			|СчетКтНУ, СубконтоКтНУ1, СубконтоКтНУ2,СубконтоКтНУ3");
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли; 
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетаРасчетов.СчетКт;
		Объект.СубконтоКтБУ1 = СтруктураСчетаРасчетов.СубконтоКт1;   
		Объект.СубконтоКтБУ2 = СтруктураСчетаРасчетов.СубконтоКт2;
		Объект.СубконтоКтБУ3 = СтруктураСчетаРасчетов.СубконтоКт3;  
		
		Объект.СчетУчетаРасчетовСКонтрагентомНУ = СтруктураСчетаРасчетов.СчетКтНУ;
		Объект.СубконтоКтНУ1 = СтруктураСчетаРасчетов.СубконтоКтНУ1;
		Объект.СубконтоКтНУ2 = СтруктураСчетаРасчетов.СубконтоКтНУ2;
		Объект.СубконтоКтНУ3 = СтруктураСчетаРасчетов.СубконтоКтНУ3;
		
		СтрокаСписок  = Объект.ВозвратПрочихВыплат.Добавить();
		СтрокаСписок.Документ	   = ДокументОснование;
		СтрокаСписок.СуммаВозврата = ДокументОснование.ПрочиеВыплаты.Итог("Сумма");
		Объект.СуммаДокумента	   = СтрокаСписок.СуммаВозврата;
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
//Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	// Коэффициент пересчета сумм из валюты документа в тенге
	Если Реквизиты.ДокументВРеглВалюте Тогда
		КоэффициентРеглВалюты = 1;
	Иначе                                                                                                                                               
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
		КонецЕсли;
		
		КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ПодразделениеДляРеглОпераций					= УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ); 	
	Реквизиты.Вставить("ПодразделениеДляРеглОпераций ", 			  	 ПодразделениеДляРеглОпераций);
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   ВедениеУчетаВременныхразницБалансовымМетодом);
				
	Запрос.УстановитьПараметр("КоэффициентРеглВалюты", КоэффициентРеглВалюты);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	
	Запрос.УстановитьПараметр("СодержаниеПокупкаВалюты", НСтр("ru = 'Приобретение иностранной валюты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПродажаВалюты", НСтр("ru = 'Продажа иностранной валюты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочее"       , НСтр("ru = 'Прочее поступление денежных средств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочиеРасчеты", НСтр("ru = 'Расчеты с контрагентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеРасчетыКредит", НСтр("ru = 'Расчеты по кредитам и займам'", ОбщегоНазначения.КодОсновногоЯзыка()));	
	
	Если Реквизиты.ЕстьВозвратПенсионныхВзносов
		ИЛИ Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя
		ИЛИ Реквизиты.ЕстьВозвратПрофессиональныхПенсионныхВзносов
		ИЛИ Реквизиты.ЕстьВозвратСоциальныхОтчислений
		ИЛИ Реквизиты.ЕстьВозвратВзносовОСМС
		ИЛИ Реквизиты.ЕстьВозвратОтчисленийОСМС
		ИЛИ Реквизиты.ЕстьВозвратЗаработнойПлаты 
		ИЛИ Реквизиты.ЕстьВозвратЕдиногоПлатежа
		ИЛИ Реквизиты.ЕстьВозвратПрочихВыплат Тогда
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОбщегоНазначенияБК.ПолучитьПризнакВеденияУчетаПоСотрудникам(), "ВедениеУчетаПоСотрудникам");
		
		ПризнакиРаспределенияНалогов = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Реквизиты.Организация, Реквизиты.Дата);
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций, "РаспределятьНалогиПоПодразделениямОрганизаций");
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"), "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц,  ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратЕП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратПрочихВыплат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы ИЗ НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, 						"НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПодразделениеДляРеглОпераций, 					"ПодразделениеДляРеглОпераций");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхразницБалансовымМетодом, 	"ВедениеУчетаВременныхразницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());


	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьРасшифровкаПлатежа) КАК ЕстьРасшифровкаПлатежа,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратПенсионныхВзносов) КАК ЕстьВозвратПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратПенсионныхВзносовРаботодателя) КАК ЕстьВозвратПенсионныхВзносовРаботодателя,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратПрофессиональныхПенсионныхВзносов) КАК ЕстьВозвратПрофессиональныхПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратСоциальныхОтчислений) КАК ЕстьВозвратСоциальныхОтчислений,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратВзносовОСМС) КАК ЕстьВозвратВзносовОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратОтчисленийОСМС) КАК ЕстьВозвратОтчисленийОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратЗаработнойПлаты) КАК ЕстьВозвратЗаработнойПлаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратЕдиногоПлатежа) КАК ЕстьВозвратЕдиногоПлатежа,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратПрочихВыплат) КАК ЕстьВозвратПрочихВыплат
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьРасшифровкаПлатежа,
	|		ЛОЖЬ КАК ЕстьВозвратПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьВозвратПенсионныхВзносовРаботодателя,
	|		ЛОЖЬ КАК ЕстьВозвратПрофессиональныхПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьВозвратСоциальныхОтчислений,
	|		ЛОЖЬ КАК ЕстьВозвратВзносовОСМС,
	|		ЛОЖЬ КАК ЕстьВозвратОтчисленийОСМС,
	|		ЛОЖЬ КАК ЕстьВозвратЗаработнойПлаты,
    |		ЛОЖЬ КАК ЕстьВозвратЕдиногоПлатежа,
	|		ЛОЖЬ КАК ЕстьВозвратПрочихВыплат
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносовРаботодателя)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПрофессиональныхПенсионныхВзносов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратЗаработнойПлаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратЕдиногоПлатежа КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка  
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.ВозвратПрочихВыплат КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеДляРеглОпераций,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаПоСотрудникам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
	|					ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
	|	КОНЕЦ КАК СчетБанкНУ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
	|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО Реквизиты.СчетБанк = Типовой.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ДокументВРеглВалюте КАК ДокументВРеглВалюте,
	|	1 КАК КоэффициентРеглВалюты,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПодразделениеДляРеглОпераций КАК ПодразделениеДляРеглОпераций,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.СчетБанкНУ КАК СчетБанкНУ,
	|	Реквизиты.ВедениеУчетаПоСотрудникам КАК ВедениеУчетаПоСотрудникам,
	|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ЕСТЬNULL(СоставДокумента.ЕстьРасшифровкаПлатежа, ЛОЖЬ) КАК ЕстьРасшифровкаПлатежа,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратПенсионныхВзносов, ЛОЖЬ) КАК ЕстьВозвратПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратПенсионныхВзносовРаботодателя, ЛОЖЬ) КАК ЕстьВозвратПенсионныхВзносовРаботодателя,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратПрофессиональныхПенсионныхВзносов, ЛОЖЬ) КАК ЕстьВозвратПрофессиональныхПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратСоциальныхОтчислений, ЛОЖЬ) КАК ЕстьВозвратСоциальныхОтчислений,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратЗаработнойПлаты, ЛОЖЬ) КАК ЕстьВозвратЗаработнойПлаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратВзносовОСМС, ЛОЖЬ) КАК ЕстьВозвратВзносовОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратОтчисленийОСМС, ЛОЖЬ) КАК ЕстьВозвратОтчисленийОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратЕдиногоПлатежа, ЛОЖЬ) КАК ЕстьВозвратЕдиногоПлатежа,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратПрочихВыплат, ЛОЖЬ) КАК ЕстьВозвратПрочихВыплат,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьРасшифровкаПлатежа Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав))
		|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|			ИНАЧЕ ВЫБОР
		|					КОГДА Реквизиты.ДокументВРеглВалюте
		|						ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|								ТОГДА 0
		|							ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратПенсионныхВзносов
		ИЛИ Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя
		ИЛИ Реквизиты.ЕстьВозвратПрофессиональныхПенсионныхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВозвратПенсионныхВзносов.Ссылка,
		|	ВозвратПенсионныхВзносов.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиОПВ
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ВозвратПенсионныхВзносов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВозвратПенсионныхВзносов.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиОПВ", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратСоциальныхОтчислений
		ИЛИ Реквизиты.ЕстьВозвратВзносовОСМС
		ИЛИ Реквизиты.ЕстьВозвратОтчисленийОСМС Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВозвратСоциальныхОтчислений.Ссылка,
		|	ВозвратСоциальныхОтчислений.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиСО
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ВозвратСоциальныхОтчислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВозвратСоциальныхОтчислений.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиСО", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратЕдиногоПлатежа Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВозвратЕдиногоПлатежа.Ссылка,
		|	ВозвратЕдиногоПлатежа.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиЕП
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратЕдиногоПлатежа КАК ВозвратЕдиногоПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВозвратЕдиногоПлатежа.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиЕП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратЗаработнойПлаты Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВозвратЗаработнойПлаты.Ссылка,
		|	ВозвратЗаработнойПлаты.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиЗП
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратЗаработнойПлаты КАК ВозвратЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВозвратЗаработнойПлаты.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиЗП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратПрочихВыплат Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВозвратПрочихВыплат.Ссылка,
		|	ВозвратПрочихВыплат.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПрочиеВыплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратПрочихВыплат КАК ВозвратПрочихВыплат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВозвратПрочихВыплат.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПрочиеВыплаты", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - РасчетыПоКредитамИЗаймам
	// - ПрочиеРасчетыСКонтрагентами 
	// - ВозвратДенежныхСредствПоставщиком
	// - ОплатаОтСтруктурногоПоразделения
	          	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		|			ТОГДА &СодержаниеПрочиеРасчеты
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
		|			ТОГДА &СодержаниеРасчетыКредит
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРеглПоКурсуБанка,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл,
		|	&СодержаниеПокупкаВалюты  КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПриобретениеВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПриобретениеВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = &ВалютаРеглУчета
		|						ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРеглПоКурсуБанка,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл,
		|	&СодержаниеПродажаВалюты КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПродажаВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПрочееПоступлениеБезналичныхДенежныхСредств  
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация КАК Организация,
		               	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		               	|	Реквизиты.Контрагент КАК Контрагент,
		               	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		               	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетКтБУ,
		               	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
		               	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
		               	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетКтНУ,
		               	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
		               	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
		               	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
		               	|	Реквизиты.СчетБанк КАК СчетДтБУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоДтБУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДтБУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоДтБУ3,
		               	|	Реквизиты.СчетБанкНУ КАК СчетДтНУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоДтНУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДтНУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ3,
		               	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
		               	|	ВЫБОР
		               	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
		               	|			ТОГДА Реквизиты.СтруктурноеПодразделениеОтправитель
		               	|		ИНАЧЕ Реквизиты.СтруктурноеПодразделениеПолучатель
		               	|	КОНЕЦ КАК СтруктурноеПодразделениеОтправитель,
		               	|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		               	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		               	|	&СодержаниеПрочее КАК Содержание
		               	|ИЗ
		               	|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РеквизитыПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВозвратОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВозвратПенсионныхВзносов  
		И НЕ Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя
		И НЕ Реквизиты.ЕстьВозвратПрофессиональныхПенсионныхВзносов Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратОПВ", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации КАК МесяцИсчисления,
		|	ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	ВЫБОР
		|		КОГДА ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо
		|		ИНАЧЕ ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
		|	ОПВВозвратВзносовПенсионныеВзносы.Сумма КАК Сумма,
		|	ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидОперации КАК ВидОперацииВедомости,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОПВВозвратВзносовПенсионныеВзносы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиОПВ КАК ВедомостиОПВ
		|		ПО ОПВВозвратВзносовПенсионныеВзносы.Ссылка = ВедомостиОПВ.Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратОПВ", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВозвратСоциальныхОтчислений 
		И НЕ Реквизиты.ЕстьВозвратВзносовОСМС 
		И НЕ Реквизиты.ЕстьВозвратОтчисленийОСМС Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратСО", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ПериодРегистрации КАК МесяцИсчисления,
		|	СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидОперации КАК ВидОперации,
		|	СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо
		|		ИНАЧЕ СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	СОВозвратОтчисленийСоциальныеОтчисления.Сумма КАК Сумма,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК СОВозвратОтчисленийСоциальныеОтчисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиСО КАК ВедомостиСО
		|		ПО СОВозвратОтчисленийСоциальныеОтчисления.Ссылка = ВедомостиСО.Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратСО", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВозвратЗаработнойПлаты Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратЗП", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВозвратЗарплатыРаботниковОрганизацийЗарплата.ФизЛицо,
		|	СУММА(ВозвратЗарплатыРаботниковОрганизацийЗарплата.Сумма) КАК Сумма,
		|	Реквизиты.Дата КАК ПериодВозврата,
		|	Реквизиты.СчетБанк КАК СчетДт,
		|	Реквизиты.СчетБанкНУ КАК СчетДтНУ,
		|	""ДенежныеСредства"" КАК ИмяСубконтоДт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоДт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоДт2,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк) КАК СпособВыплаты
		|ИЗ
		|	Документ.ВозвратЗарплатыРаботниковОрганизаций.Зарплата КАК ВозвратЗарплатыРаботниковОрганизацийЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЗП КАК ВедомостиЗП
		|		ПО ВозвратЗарплатыРаботниковОрганизацийЗарплата.Ссылка = ВедомостиЗП.Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратЗарплатыРаботниковОрганизацийЗарплата.ФизЛицо,
		|	Реквизиты.Дата,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратЗП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратЕП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВозвратЕдиногоПлатежа Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратЕП", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕПВозвратЕдиногОПлатежа.МесяцНалоговогоПериода КАК МесяцИсчисления,
		|	ЕПВозвратЕдиногОПлатежа.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	ЕПВозвратЕдиногОПлатежа.ФизЛицо КАК ФизЛицоБУ,
		|	ЕПВозвратЕдиногОПлатежа.ФизЛицо КАК ФизЛицо,
		|	ЕПВозвратЕдиногОПлатежа.Сумма КАК Сумма,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ЕПВозвратПлатежа.ЕдиныеПлатежи КАК ЕПВозвратЕдиногОПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЕП КАК ВедомостиЕП
		|		ПО ЕПВозвратЕдиногОПлатежа.Ссылка = ВедомостиЕП.Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратЕП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции   

Функция ТекстЗапросаВозвратПрочихВыплат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВозвратПрочихВыплат Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратПрочихВыплат", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо, 
		|	ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты.Ссылка.ВидПрочихВыплат КАК ВидПрочихВыплат, 
		|	ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты.Сумма КАК Сумма,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетКтБУ,
       	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
       	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
       	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
       	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетКтНУ,
       	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
       	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
       	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3
		|ИЗ
		|	Документ.ВедомостьНаВозвратПрочихВыплат.ПрочиеВыплаты КАК ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиПрочиеВыплаты КАК ВедомостиПрочиеВыплаты
		|		ПО ВедомостьНаВозвратПрочихВыплатПрочиеВыплаты.Ссылка = ВедомостиПрочиеВыплаты.Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратПрочихВыплат", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|  
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";  
	
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеВходящее.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
		|ГДЕ
		|	ПлатежноеПоручениеВходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|	И ПлатежноеПоручениеВходящее.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПокупателю
		|	И НЕ ПлатежноеПоручениеВходящее.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|	И НЕ ПлатежноеПоручениеВходящее.ДокументОснование ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПлатежноеПоручениеВходящее");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
			
			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли