#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеПолучатель");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.ПлатежноеПоручениеВходящее.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
    ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	МассивНепроверяемыхРеквизитов = Новый Массив();
		
	ЕстьРасшифровкаПлатежа =  Документы.ПлатежноеПоручениеВходящее.ЕстьРасшифровкаПлатежа(ВидОперации);
	
	Если НЕ ЕстьРасшифровкаПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда 
        МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
	      		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратЗаработнойПлаты");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратПенсионныхВзносов");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратСоциальныхОтчислений");   
	КонецЕсли;
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратЕдиногоПлатежа");   
	КонецЕсли;  
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратПрочихВыплат");   
	КонецЕсли;
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	Если НЕ НеобходимостьОтраженияВНУ Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли НЕ ЕстьРасчетыПоКредитам Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ"); 		
	КонецЕсли;
			
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	Если ЕстьРасшифровкаПлатежа Тогда 		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;                    
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда	
		Если ВозвратПрочихВыплат.Итог("СуммаВозврата") <> СуммаДокумента Тогда				   
			ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и суммы по списку на возврат'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;			
	КонецЕсли;
	
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
								
		  Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			  Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда 				  
				  ТекстСообщения = НСтр("ru = ' Возврат заработной платы возможно оформлять только в %1'");				  
			  ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда		
				  ТекстСообщения = НСтр("ru = ' Возврат пенсионных взносов возможно оформлять только в %1'");	  
			  ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа Тогда
				  ТекстСообщения = НСтр("ru = ' Возврат единого платежа возможно оформлять только в %1'");
			  ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
				  ТекстСообщения = НСтр("ru = ' Возврат прочих выплат возможно оформлять только в %1'");
			  Иначе
				  ТекстСообщения = НСтр("ru = ' Возврат взносов и отчислений соц. страхования возможно оформлять только в %1'");
			  КонецЕсли;         

			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаРегламентированногоУчета), ЭтотОбъект,,, Отказ);			
		КонецЕсли;
		             		
		Запрос = Новый Запрос;
				
		ТекстЗапроса = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_СпискиНаВозврат
		|ИЗ &ПеречислениеВозврат КАК ПеречислениеВозврат
		|
		|; 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Список.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Список.Ссылка) КАК ПредставлениеДок,
		|	Список.Ссылка.Организация КАК Организация,
		|	СУММА(Список.Сумма) КАК Сумма
		|ИЗ
		|	Документ.<<СписочныйДокумент>>.<<ТабличнаяЧастьСписка>> КАК Список
		|ГДЕ
		|	Список.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СпискиНаВозврат.Документ
		|						ИЗ
		|							ВТ_СпискиНаВозврат КАК СпискиНаВозврат)
		|СГРУППИРОВАТЬ ПО 
		|	Список.Ссылка,
		|	Список.Ссылка.Организация
		|
		|ИТОГИ СУММА(Сумма) ПО ОБЩИЕ
		|";
		
		// в зависимости от вида операции подставим нужные имена
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ВозвратЗарплатыРаботниковОрганизаций");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "Зарплата");
			Запрос.УстановитьПараметр("ПеречислениеВозврат",ВозвратЗаработнойПлаты.Выгрузить()); 
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ОПВВозвратВзносов");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "ПенсионныеВзносы");
			Запрос.УстановитьПараметр("ПеречислениеВозврат",ВозвратПенсионныхВзносов.Выгрузить());  
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеВозвратПенсионныхВзносов
						   |ИЗ &ПеречислениеВозврат КАК ПеречислениеВозвратПенсионныхВзносов
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов
			               |		ПО ОПВРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка
			               |        	И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов)
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ОПВРасчетыСФондами.Активность
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |// ОППВ
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов
			               |		ПО ОППВРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПрофессиональныхПенсионныхВзносов)
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ
						   |	ОППВРасчетыСФондами.Активность
			               |
						   |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |// ОПВР
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов
			               |		ПО ОПВРРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносовРаботодателя)
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ
						   |	ОПВРРасчетыСФондами.Активность
						   |
						   |;
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеВходящееПеречислениеВозвратПенсионныхВзносов.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = 
			"ВЫБРАТЬ Документ
			|ПОМЕСТИТЬ ВТ_СпискиНаВозврат
			|ИЗ &ПеречислениеВозврат КАК ПеречислениеВозврат
			|
			|;
			|////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВозвратПенсионныхВзносов.Документ.ВидОперации КАК ВидОперации
			|ИЗ
			|	ВТ_СпискиНаВозврат КАК ВозвратПенсионныхВзносов	";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'В табличной части ""Списки на возврат пенсионных взносов"" указаны ведомости с различными видами операций:
													|нельзя выполнять возврат одним документом по разным видам пенсионных взносов (ОПВ и ОППВ, ОПВ и ОПВР и т.д.)'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
												
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "СОВозвратОтчислений");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "СоциальныеОтчисления");
			Запрос.УстановитьПараметр("ПеречислениеВозврат",ВозвратСоциальныхОтчислений.Выгрузить());
			
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеВозвратСоциальныхОтчислений
						   |ИЗ &ПеречислениеВозврат КАК ПеречислениеВозвратСоциальныхОтчислений
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений
			               |		ПО СОРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений))
						   |ГДЕ
						   |	СОРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ИЗ
			               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений
			               |		ПО ООСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС))
						   |ГДЕ
						   |	ООСМСРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ИЗ
			               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений
			               |		ПО ВОСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС))
						   |ГДЕ
						   |	ВОСМСРасчетыСФондами.Активность
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеВходящееПеречислениеВозвратСоциальныхОтчислений.Документ = РанееИспользованныеВедомости.Ведомость";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда

					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);

				КонецЕсли;
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = 
			"ВЫБРАТЬ Документ
			|ПОМЕСТИТЬ ВТ_СпискиНаВозврат
			|ИЗ &ПеречислениеВозврат КАК ПеречислениеВозврат
			|
			|;
			|////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВозвратСоциальныхОтчислений.Документ.ВидОперации КАК ВидОперации
			|ИЗ
			|	ВТ_СпискиНаВозврат КАК ВозвратСоциальныхОтчислений	";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'В табличной части ""Списки на возврат взносов и отчислений социального страхования"" указаны ведомости с различными видами операций:
													|нельзя выполнять возврат одним документом по разным видам социального страхования (СО, Отчисления ОСМС, Взносы ОСМС)'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
												
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ЕПВозвратПлатежа");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "ЕдиныеПлатежи");
			Запрос.УстановитьПараметр("ПеречислениеВозврат",ВозвратЕдиногоПлатежа.Выгрузить()); 
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеВозвратЕдиныхПлатежей
						   |ИЗ &ПеречислениеВозврат КАК ПеречислениеВозвратЕдиныхПлатежей
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиногоПлатежа.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиногоПлатежа.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратЕдиногоПлатежа КАК ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиногоПлатежа
			               |		ПО ЕПРасчетыСФондами.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиногоПлатежа.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиногоПлатежа.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ЕПРасчетыСФондами.Активность
						   |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиныхПлатежей.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеВозвратЕдиныхПлатежей КАК ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиныхПлатежей
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеВходящееПеречислениеВозвратЕдиныхПлатежей.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ВедомостьНаВозвратПрочихВыплат");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "ПрочиеВыплаты");
			Запрос.УстановитьПараметр("ПеречислениеВозврат",ВозвратПрочихВыплат.Выгрузить());    
						
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеВозвратПрочихВыплат
						   |ИЗ &ПеречислениеВозврат КАК ПеречислениеВозвратПрочихВыплат
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыПоПрочимВыплатам КАК ВзаиморасчетыПоПрочимВыплатам
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратПрочихВыплат КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат
			               |		ПО ВзаиморасчетыПоПрочимВыплатам.Регистратор = ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Ссылка
						   |			И ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ВзаиморасчетыПоПрочимВыплатам.Активность
						   |
						   |;
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеВозвратПрочихВыплат КАК ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеВходящееПеречислениеВозвратПрочихВыплат.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла; 
			
			// Проверка на одинаковый вид прочих выплат в ведомости
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеВозврат
						   |ИЗ &ПеречислениеВозврат КАК ПеречислениеВозврат
						   |
						   |;
						   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеВозвратПрочихВыплат.Документ.ВидПрочихВыплат КАК ВидПрочихВыплат
			               |ИЗ
			               |	ВТ_ПеречислениеВозврат КАК ПеречислениеВозвратПрочихВыплат";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В табличной части ""Списки на возврат прочих выплат"" указаны ведомости с различными видами прочих выплат:
													|нельзя выполнять возврат одним документом по разным видам прочих выплат'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;  
											
		КонецЕсли;  
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				Если Выборка.Сумма <> СуммаДокумента Тогда
					ТекстСообщения = НСтр("ru = 'Не совпадает сумма по документу и общая сумма по спискам на возврат либо есть повторяющиеся списочные документы'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,"СуммаДокумента", "Объект", Отказ);					
				КонецЕсли;
			Иначе
				Если Выборка.Организация <> Организация Тогда
					ТекстСообщения = НСтр("ru = 'Не совпадает организация в документе и в списке на возврат %1'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Выборка.ПредставлениеДок), ЭтотОбъект,,, Отказ);										
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;  		
	КонецЕсли;
			           			
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
		Если НЕ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 			
			ТекстСообщения = НСтр("ru = 'При отражении операции реализации иностранной валюты валюта документа должна соответствовать валюте регламентированного учета'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);			
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 			
			ТекстСообщения = НСтр("ru = 'При отражении операции приобретения иностранной валюты валюта документа должна отличаться от валюты регламентированного учета'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);						
		КонецЕсли;			
	КонецЕсли;

	Если ЕстьРасшифровкаПлатежа Тогда		
		 ПроверитьЗаполнениеТабличнойЧастиПострочно(РасшифровкаПлатежа, "РасшифровкаПлатежа", Отказ, Новый Структура("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета));
	КонецЕсли;   
	 	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = "";
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Свойство ЗакрыватьФорму используется при проведении из формы документа
	Если ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ДополнительныеСвойства.Удалить("ЗакрыватьФорму");
	КонецЕсли;
	
	Если НЕ Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);		
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Оплачено"".Документ будет записан без проведения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплачено", "Объект", Ложь);		
		ДополнительныеСвойства.Вставить("ЗакрыватьФорму", Ложь);
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
		ВозвратЗаработнойПлаты.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
		ВозвратПенсионныхВзносов.Очистить();
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
		ВозвратСоциальныхОтчислений.Очистить();	
	КонецЕсли; 
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		ВозвратПрочихВыплат.Очистить();	
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(НомерВходящегодокумента) Или ЗначениеЗаполнено(ДатаВходящегоДокумента)) Тогда
		НомерВходящегодокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, ЭтотОбъект, , Истина, Истина));
		ДатаВходящегоДокумента = Дата;
	КонецЕсли;
    
    Если Документы.ПлатежноеПоручениеВходящее.ЕстьРасшифровкаПлатежа(ВидОперации)
		И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);  
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда  
		
		ЕстьСчетаНаОплату = Ложь;
		
		СчетаНаОплату = РасшифровкаПлатежа.ВыгрузитьКолонку("СчетНаОплату");
		
		Для Каждого СчетНаОплату Из СчетаНаОплату Цикл  
			
			Если СчетНаОплату <> Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
				ЕстьСчетаНаОплату = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСчетаНаОплату Тогда 
			
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			ТаблицаРеквизитов.Колонки.Добавить("Период");
			ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
			ТаблицаРеквизитов.Колонки.Добавить("Организация");
			
			СтрокаТабРеквизитов = ТаблицаРеквизитов.Добавить();
			СтрокаТабРеквизитов.Период      = Дата;
			СтрокаТабРеквизитов.Регистратор = Ссылка;
			СтрокаТабРеквизитов.Организация = Организация;
			
			ТаблицаОплатаСчетов = Документы.ПлатежноеПоручениеВходящее.ТаблицаОплатаСчетов(ЭтотОбъект);
			
			ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
				ТаблицаОплатаСчетов, ТаблицаРеквизитов, Истина);
			
			СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
				ТаблицаСтатусовСчетов, ТаблицаРеквизитов);		
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПлатежноеПоручениеВходящее.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
		
	// Изменение статуса счетов на оплату 
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;	
		
	Если Не ГрупповоеПерепроведение Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;		
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПриобретениеВалюты(ПараметрыПроведения.ПриобретениеВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПродажаВалюты(ПараметрыПроведения.ПродажаВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПрочееПоступление(ПараметрыПроведения.РеквизитыПрочее, 
		Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// ЗП
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратЗП, Движения, Ложь, Отказ);
	
	// ОПВ и ОППВ и ОПВР
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратОПВ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратОПВ, Движения, Отказ);

	// СО, ВОСМС, ООСМС
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратСО(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратСО, Движения, Отказ);

	// ЕП
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратЕП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратЕП, Движения, Отказ);
	
	// Прочие выплаты
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратПрочихВыплат(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратПрочихВыплат, Движения, Отказ);
	
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ГрупповоеПерепроведение Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаяЧасть, ИмяТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВалютаДокумента", ВалютаДокумента);
	Реквизиты.Вставить("ВалютаРегламентированногоУчета", ПараметрыПроверки.ВалютаРегламентированногоУчета);
	Реквизиты.Вставить("Регистратор", Ссылка);

	Для Каждого СтрокаТабличнойЧасти ИЗ ПроверяемаяТабличнаяЧасть Цикл
		
		//Сопоставление валюты расчетов по договору и валюты документа
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
				ИЛИ СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрыПроверки.ВалютаРегламентированногоУчета Тогда
				
				ЗначениеПараметра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов), НСтр("ru = 'не заполнена'"),
									НСтр("ru = '(%1) не отличается от валюты регламентированного учета (%2)'")),
									СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									ПараметрыПроверки.ВалютаРегламентированногоУчета);
				
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта договора %1'", ЗначениеПараметра), ЭтотОбъект,,, Отказ));										
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
				ИЛИ НЕ СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрыПроверки.ВалютаРегламентированногоУчета Тогда
				
				ЗначениеПараметра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов), НСтр("ru = 'не заполнена'"),
									НСтр("ru = '(%1) отличается от валюты регламентированного учета (%2)
									|При отражении операции ""Приобретение иностранной валюты"" валюта договора должна соответствовать валюте регламентированного учета.'")),
									СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									ПараметрыПроверки.ВалютаРегламентированногоУчета);
				
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта договора %1'", ЗначениеПараметра), ЭтотОбъект,,, Отказ));																		
			КонецЕсли;				
		Иначе   			
			ДополнениеКСообщению = НСтр("ru = 'Строка %1 - '");
			
			Реквизиты.Вставить("ДоговорКонтрагента",СтрокаТабличнойЧасти.ДоговорКонтрагента); 
			Реквизиты.Вставить("ВалютаВзаиморасчетов",СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			
			УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, 
																	  Отказ, 
																	  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДополнениеКСообщению,СтрокаТабличнойЧасти.НомерСтроки));				
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

