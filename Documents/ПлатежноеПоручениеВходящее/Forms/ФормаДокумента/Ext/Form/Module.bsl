
&НаКлиенте
Перем ЗакрыватьФорму;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюДиректБанк", "Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ТекущийОбъект.ДополнительныеСвойства.ЗакрыватьФорму);
	КонецЕсли;  
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если  СтрНайти(ЭтотОбъект.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0 Тогда
			// Это дополнительная форма редактирования табличной части.
			// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
			РасшифровкаПлатежа = ЭтотОбъект["РасшифровкаПлатежа"];
		Иначе
			// Это основная форма документа, у нее есть реквизит Объект.
			РасшифровкаПлатежа = ЭтотОбъект.Объект["РасшифровкаПлатежа"];
		КонецЕсли;
						
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	     
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет)
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗакрыватьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""платежное поручение (входящее)"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат") Тогда
		Оповестить("Запись_ПлатежноеПоручениеВходящее", ПараметрыЗаписи, Объект.Ссылка); 
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрыватьФорму") Тогда
		ЗакрыватьФорму = ПараметрыЗаписи.ЗакрыватьФорму;
	КонецЕсли;  
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Отказ = Истина;
		ЗакрыватьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		СчетБанкПриИзмененииКлиент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
						
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпискиПриИзменении(Элемент)
	
	//Если оплачено, то дата не меняестя, и никакие перерасчеты не нужны	
	Если НЕ Объект.Оплачено Тогда
		Объект.Дата = Объект.ДатаВыписки;
		ТекущаяДатаДокумента = Объект.Дата;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.ДатаВыписки, 
		ТекущаяДатаВыпискиДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
						
	КонецЕсли;
	
	// Запомним новую дату выписки документа.
	ТекущаяДатаВыпискиДокумента = Объект.ДатаВыписки;

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ВалютаДенежныхСредств = ПолучитьЗначениеРеквизита(Объект.СчетОрганизации, "ВалютаДенежныхСредств");

	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И (ВалютаДенежныхСредств <> Объект.ВалютаДокумента)
		И Объект.СуммаДокумента > 0 Тогда
		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчетОрганизации", Истина));
		
	Иначе     
		
		ПриИзмененииСчетаОрганизацииНаСервере(, Новый Массив); 		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета);
	
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);	
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ ПолучитьЗначениеРеквизита(Объект.СчетОрганизации, "ВалютаДенежныхСредств")  = ПолучитьЗначениеРеквизита(Объект.СчетКонтрагента, "ВалютаДенежныхСредств") Тогда
		Объект.СчетОрганизации = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");			
		
		ТекстСообщения  = НСтр("ru = 'Валюта счета организации не соответствует валюте счета контрагента! Значение очищено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент);
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);

	УправлениеФормой(ЭтаФорма);   	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделениеОтправитель = Неопределено;
		Объект.СтруктурноеПодразделениеПолучатель  = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств") Тогда
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочееПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтБУ1, СубконтоКтБУ2, СубконтоКтБУ3,
									|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоКтБУ1, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоКтБУ2, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоКтБУ3, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсНаДатуПриобретенияРеализацииВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Валюта", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", Объект.КурсНаДатуПриобретенияРеализацииВалюты);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "");
	ПараметрыОбъекта.Вставить("ИмяПоля", "КурсНаДатуПриобретенияРеализацииВалюты");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ИмяРеквизита", ЭтаФорма, "НазначениеПлатежа");
	Оповещение = Новый ОписаниеОповещения("НазначениеПлатежаЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.НазначениеПлатежа,
		НСтр("ru='Назначение платежа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.НазначениеПлатежа = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;				
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;				
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	ОткрытьФормуДополнительно(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаБУВозвратПрочихВыплатПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,"ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтБУ1, СубконтоКтБУ2, СубконтоКтБУ3,
									|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоКтБУ1, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоКтБУ2, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоКтБУ3, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУВозвратПрочихВыплатПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ВозвратПрочихВыплатПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ВозвратПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			
	ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПлатежноеПоручениеВходящее.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда 
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаРасчетовПоАвансам) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;    		
	КонецЕсли;       
	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	СтруктураПараметров.Вставить("ТипыДокументов", "Метаданные.Документы.ПлатежноеПоручениеВходящее.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "РасшифровкаПлатежа");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);


КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов / СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
	
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
		
	Иначе
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;		

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратОПВ

&НаКлиенте
Процедура ВозвратПенсионныхВзносовПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратПенсионныхВзносов", "СуммаВозврата");
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвратПенсионныхВзносовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВозвратПенсионныхВзносов", "СуммаВозврата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПенсионныхВзносовПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратПенсионныхВзносов", "СуммаВозврата");
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПенсионныхВзносовДокументПриИзменении(Элемент)
	
	СтрокаВозврата = Элементы.ВозвратПенсионныхВзносов.ТекущиеДанные;
	
	Если СтрокаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ВозвратПенсионныхВзносов", "Документ", СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВозврата.Документ) Тогда
		СтрокаВозврата.СуммаВозврата = ПолучитьСуммуВозврата("ОПВВозвратВзносов.ПенсионныеВзносы", СтрокаВозврата.Документ);
		ВидОперацииВедомости = ПолучитьЗначениеРеквизита(СтрокаВозврата.Документ, "ВидОперации");
		Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов") Тогда
			СтрокаВозврата.ВидВзноса = НСтр("ru = 'ОПВ'");
		ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносовРаботодателя") Тогда
			СтрокаВозврата.ВидВзноса = НСтр("ru = 'ОПВР'");
		Иначе
			СтрокаВозврата.ВидВзноса = НСтр("ru = 'ОППВ'");
		КонецЕсли;
	КонецЕсли;  	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратСО

&НаКлиенте
Процедура ВозвратСоциальныхОтчисленийПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратСоциальныхОтчислений", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратСоциальныхОтчисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВозвратСоциальныхОтчислений", "СуммаВозврата");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратСоциальныхОтчисленийПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратСоциальныхОтчислений", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратСоциальныхОтчисленийДокументПриИзменении(Элемент)
	
	СтрокаВозврата = Элементы.ВозвратСоциальныхОтчислений.ТекущиеДанные;
	
	Если СтрокаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ВозвратСоциальныхОтчислений", "Документ", СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВозврата.Документ) Тогда
		СтрокаВозврата.СуммаВозврата = ПолучитьСуммуВозврата("СОВозвратОтчислений.СоциальныеОтчисления", СтрокаВозврата.Документ);
		ВидОперацииВедомости = ПолучитьЗначениеРеквизита(СтрокаВозврата.Документ, "ВидОперации");
		Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений") Тогда
			СтрокаВозврата.ВидВзноса = НСтр("ru='СО'");
		ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС") Тогда
			СтрокаВозврата.ВидВзноса = НСтр("ru='ВОСМС'");
		ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС") Тогда
			СтрокаВозврата.ВидВзноса = НСтр("ru='ООСМС'");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратЕП

&НаКлиенте
Процедура ВозвратЕдиногоПлатежаПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратЕдиногоПлатежа", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЕдиногоПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВозвратЕдиногоПлатежа", "СуммаВозврата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЕдиногоПлатежаПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратЕдиногоПлатежа", "СуммаВозврата");
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЕдиногоПлатежаДокументПриИзменении(Элемент)
	
	СтрокаВозврата = Элементы.ВозвратЕдиногоПлатежа.ТекущиеДанные;
	
	Если СтрокаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ВозвратЕдиногоПлатежа", "Документ", СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВозврата.Документ) Тогда
		СтрокаВозврата.СуммаВозврата = ПолучитьСуммуВозврата("ЕПВозвратПлатежа.ЕдиныеПлатежи", СтрокаВозврата.Документ);
	КонецЕсли;  	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратПрочихВыплат

&НаКлиенте
Процедура ВозвратПрочихВыплатПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратПрочихВыплат", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПрочихВыплатПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВозвратПрочихВыплат", "СуммаВозврата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПрочихВыплатПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратПрочихВыплат", "СуммаВозврата");
		
КонецПроцедуры  

&НаКлиенте
Процедура ВозвратПрочихВыплатДокументПриИзменении(Элемент)
	
	СтрокаВозврата = Элементы.ВозвратПрочихВыплат.ТекущиеДанные;
	
	Если СтрокаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ВозвратПрочихВыплат", "Документ", СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);
	ПроверитьСоответствиеВидовПрочихВыплатДокументовВозврата(Объект, СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВозврата.Документ) Тогда
		СтрокаВозврата.СуммаВозврата = ПолучитьСуммуВозврата("ВедомостьНаВозвратПрочихВыплат.ПрочиеВыплаты", СтрокаВозврата.Документ); 		
		ВидПрочихВыплатВедомости = ПолучитьЗначениеРеквизита(СтрокаВозврата.Документ, "ВидПрочихВыплат");
		СтрокаВозврата.ВидПрочихВыплат = ВидПрочихВыплатВедомости;
		ТекущийВидПрочихВыплат = ВидПрочихВыплатВедомости;
		
		Если Элементы.ВозвратПрочихВыплат.ТекущиеДанные.НомерСтроки = 1 Тогда  
			
			ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
			Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) 
				ИЛИ (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) И ВидимостьНалоговогоУчета) Тогда
				
				ЗаполнитьСчетаПоСпособуОтражения(ТекущийВидПрочихВыплат);

			Иначе
				
				ТекстВопроса = НСтр("ru='Заполнить счета расчетов из способа отражения вида прочих выплат?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументаВТабЧасти", ЭтотОбъект, Параметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0); 
				
			КонецЕсли;
								
		КонецЕсли;  
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПрочихВыплатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозвратПрочихВыплат.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ВозвратПрочихВыплатВидПрочихВыплат" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидПрочихВыплат);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратЗП

&НаКлиенте
Процедура ВозвратЗаработнойПлатыПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратЗаработнойПлаты", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВозвратЗаработнойПлаты", "СуммаВозврата");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("ВозвратЗаработнойПлаты", "СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыДокументПриИзменении(Элемент)
	
	СтрокаВозврата = Элементы.ВозвратЗаработнойПлаты.ТекущиеДанные;
	
	Если СтрокаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ВозвратЗаработнойПлаты", "Документ", СтрокаВозврата.Документ, СтрокаВозврата.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВозврата.Документ) Тогда
		СтрокаВозврата.СуммаВозврата = ПолучитьСуммуВозврата("ВозвратЗарплатыРаботниковОрганизаций.Зарплата", СтрокаВозврата.Документ);
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежаПокупкаВалюты

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
			
	ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);
	      	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "РасшифровкаПлатежаПокупкаВалюты");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если (СтрокаПлатеж.СуммаПлатежа<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов / СтрокаПлатеж.СуммаПлатежа * КратностьДокумента; 
	КонецЕсли;					
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");	 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
   СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
   
   РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
   СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
   
   РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "РасшифровкаПлатежаПродажаВалюты");
		
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсНаДатуПриобретенияРеализацииВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсНаДатуПриобретенияРеализацииВалюты);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "РасшифровкаПлатежаПродажаВалюты");
	ПараметрыОбъекта.Вставить("ИмяПоля", "КурсНаДатуПриобретенияРеализацииВалюты");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчетеСуммыДокумента(Результат, Параметры) Экспорт
	
	ПараметрыРасчета = Неопределено;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыРасчета = Параметры;
	КонецЕсли;
	
	Если Параметры.Свойство("ИзмененСчетОрганизации") Тогда
		ПриИзмененииСчетаОрганизацииНаСервере(ПараметрыРасчета, Новый Массив);		
	КонецЕсли;
		   		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента        = Объект.Дата;
	ТекущаяДатаВыпискиДокумента = Объект.ДатаВыписки;
	ТекущаяВалютаДокумента      = Объект.ВалютаДокумента;
	ТекущийДокументОснование    = Объект.ДокументОснование;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	ОплатаВВалюте = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеВходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	                                                                                                   		
	//ПоказыватьВДокументахСчетаУчета =  Истина;
								
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	УстановитьКурсДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;  
	
	Если ЕстьРасшифровкаПлатежа Тогда	
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));	
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);				
		//Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетаБанка(Объект.СчетОрганизации, Объект.СчетБанк);
		
		//Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		//		Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
		//	КонецЕсли;
		//	
		//КонецЦикла; 

		Объект.ДатаВыписки = Объект.Дата;
		Объект.Оплачено = Истина;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств  Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат  Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли; 
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	                      
	УстановитьВидимостьСтраницНаСервере();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	УправлениеФормой(ЭтотОбъект);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(форма.СписокВидовДоговоров.ВыгрузитьЗначения())));
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", форма.ВалютаРегламентированногоУчета));
		Элементы.РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("ВыбиратьДоговорыВВалюте", Истина));
		Элементы.РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	Иначе
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		НовыйМассивПараметров = Новый Массив();			
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.СчетОрганизации.Пустая() Тогда			
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.ВалютаДокумента));		
			Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		КонецЕсли;
		
	КонецЕсли;
		
	//если счет не валютный или отражется реализация ин.валюты, то валюта обязательно должна регламентированной
	Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда					
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", форма.ВалютаРегламентированногоУчета));
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);  		
	КонецЕсли;
	
	Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты")  Тогда
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("ВыбиратьСчетаВВалюте", Истина));
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.ВалютаДокумента)); 
		Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);
	
	СчетаБанка = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	   	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВПути);		
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты);		
	
	СчетаРасчетов = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаРасчетов.ВыгрузитьЗначения())));			
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	                                                	
	Элементы.РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентомБУ.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс = "", ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделениеПолучатель);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоКтБУ1" + Постфикс,
		Префикс + "СубконтоКтБУ2" + Постфикс,
		Префикс + "СубконтоКтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоКтБУ1", "ЗаголовокСубконтоКтБУ2", "ЗаголовокСубконтоКтБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратОПВ);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратСО);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратЕП);
	МассивСтраниц.Добавить(Элементы.ГруппаПокупкаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПродажаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочееПоступлениеДС); 
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратПрочихВыплат);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратОПВ", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратСО", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратЗаработнойПлаты", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствПокупкаВалюты", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствПродажаВалюты", "Видимость", Ложь);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВозвратЗарплаты;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратЗаработнойПлаты", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПокупкаВалюты;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствПокупкаВалюты", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПродажаВалюты;        
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствПродажаВалюты", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВозвратОПВ;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратОПВ", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВозвратСО;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратСО", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЕдиногоПлатежа Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВозвратЕП;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратСО", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВозвратПрочихВыплат;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВозвратСО", "Видимость", Истина);	
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПрочееПоступлениеДС;
		
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
		
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	//Элементы.ГруппаСчетАналитикаНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда
	//	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = "Счет возвратов";
	//Иначе
	//	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = "Счет авансов";		
	//КонецЕсли;
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	//Элементы.СчетБанк.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	//Элементы.ГруппаПрочееПоступлениеДССчетаАналитика.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если ЕстьРасшифровкаПлатежа Тогда
		
		МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
		СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
		
		Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж.ВалютаДокумента = Объект.ВалютаДокумента;

			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
				СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
				СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
				
			Иначе
				СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
				СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ВозвратПенсионныхВзносов Цикл
			ВидОперацииВедомости = ПолучитьЗначениеРеквизита(СтрокаТаблицы.Документ, "ВидОперации");
			Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов") Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВ'");
			ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносовРаботодателя") Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВР'");
			Иначе
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОППВ'");
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ВозвратСоциальныхОтчислений Цикл
			ВидОперацииВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидОперации");
			Если ВидОперацииВедомости = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'СО'");
			ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ВОСМС'");
			ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ООСМС'");
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;  
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ВозвратПрочихВыплат Цикл
			ВидПрочихВыплатВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидПрочихВыплат");
			
			СтрокаТаблицы.ВидПрочихВыплат = ВидПрочихВыплатВедомости;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ВозвратПенсионныхВзносов.ТолькоПросмотр       = Ложь;
	Элементы.ВозвратПенсионныхВзносов.ИзменятьСоставСтрок  = Ложь;
	Элементы.ВозвратПенсионныхВзносов.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ВозвратСоциальныхОтчислений.ТолькоПросмотр       = Ложь;
	Элементы.ВозвратСоциальныхОтчислений.ИзменятьСоставСтрок  = Ложь;
	Элементы.ВозвратСоциальныхОтчислений.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ВозвратЗаработнойПлаты.ТолькоПросмотр       = Ложь;
	Элементы.ВозвратЗаработнойПлаты.ИзменятьСоставСтрок  = Ложь;
	Элементы.ВозвратЗаработнойПлаты.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.РасшифровкаПлатежаПродажаВалюты.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежаПродажаВалюты.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежаПродажаВалюты.ИзменятьПорядокСтрок = Ложь;

		
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

/////////расчет суммовых показателей документа/////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, ПересчитатьКурсПродажи = Ложь)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
				
		Если ПересчитатьКурсПродажи Тогда
			СтрокаПлатеж.КурсВзаиморасчетов =
				?(СтрокаПлатеж.СуммаВзаиморасчетов = 0, 0, СтрокаПлатеж.СуммаПлатежа / СтрокаПлатеж.СуммаВзаиморасчетов);
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = ?(
			Объект.КурсНаДатуПриобретенияРеализацииВалюты = 0, Форма.КурсДокумента, Объект.КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											СтрокаПлатеж.КурсВзаиморасчетов, 1,
											СтрокаПлатеж.КратностьВзаиморасчетов, 1);
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
											
		
    КонецЕсли;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		// Не изменяем курс взаиморасчетов.
		// Курс взиморасчетов используется для хранения курса приобретения валюты (в валюте документа)
	Иначе
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПлатеж.КурсВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоговорКонтрагента(ДоговорКонтрагента, Знач Контрагент, Знач Организация, Знач СписокВидовДоговоров, Знач Отбор = Неопределено)
	
	УправлениеВзаиморасчетамиСервер.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, Отбор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура СчетБанкПриИзмененииКлиент()
	  	
	ОплатаВВалюте = ПолучитьЗначениеРеквизита(Объект.СчетБанк, "Валютный");
	
	Если (НЕ ОплатаВВалюте ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента))
		И Объект.СуммаДокумента > 0 Тогда                                                                                    		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчетКассы", Истина));
	Иначе                                                                                                                    		
		СчетБанкПриИзмененииНаСервере();                                                                                     		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)
		
	Если НЕ ОплатаВВалюте ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
			
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
		
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)

	Если НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда
		
		НеобходимПересчетСумм = СтруктураРезультатаВыполнения = Неопределено ИЛИ (СтруктураРезультатаВыполнения.Свойство("НеобходимПересчетСумм") И СтруктураРезультатаВыполнения.НеобходимПересчетСумм);

		Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента", ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.ВалютаДокумента, НеобходимПересчетСумм);
		
		Если НеобходимПересчетСумм Тогда
			
			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
				
			Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда			
				
				Если НЕ Объект.СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
					
					Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
						//Необходимо пересчитать суммы в таблице расшифровок.
						Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
							СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																								ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
																								ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
																								ТекущиеПараметрыДокумента.КратностьДокумента, КратностьДокумента);
							
							УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
							РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);					
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;        			
	КонецЕсли; 	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(ЭтаФорма)
		
	Если ЭтаФорма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда		
		СтрокаПлатеж = ЭтаФорма.Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = ЭтаФорма.Объект.СуммаДокумента;
		
		Если ЭтаФорма.ЕстьРасшифровкаПлатежа Тогда			
			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);			
		КонецЕсли;     	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	
	// Если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Индекс = 1;
	Пока Индекс < 3  Цикл
	 
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств") Тогда
			Объект["СубконтоКтБУ" + Индекс] = Объект.СтатьяДвиженияДенежныхСредств;
		 	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоКтБУ" + Индекс], "СубконтоКтНУ");
		Прервать;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтБУ1", "СубконтоКтБУ2", "СубконтоКтБУ3", 
	                                                        ДанныеОбъекта.СубконтоКтБУ1, ДанныеОбъекта.СубконтоКтБУ2, ДанныеОбъекта.СубконтоКтБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ВозвратПенсионныхВзносов.Очистить();
	Объект.ВозвратСоциальныхОтчислений.Очистить();
	Объект.ВозвратЗаработнойПлаты.Очистить();
	Объект.ВозвратЕдиногоПлатежа.Очистить();
	Объект.ВозвратПрочихВыплат.Очистить(); 
	
	ОчиститьСчетаУчетаРасчетов();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеВходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);		
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма); 
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));	
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС"); 
		УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	Если Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда 
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;   	
	    	
	Если Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда 
		Если Объект.СчетОрганизации.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();			
			ТекстСообщения  = НСтр("ru = 'При операции ""Приобретение иностранной валюты"" валюта документа должна отличаться от валюты регламентированного учета. Счет организации очищен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;   		
	КонецЕсли;   	
	    	
	Если Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда 
		Если НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();			
			ТекстСообщения  = НСтр("ru = 'При операции ""Поступление от продажи иностранной валюты"" валюта документа должна быть равна валюте регламентированного учета. Счет организации очищен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;   		
	КонецЕсли; 
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли; 
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда

		СтруктурноеПодразделениеОрганизация = Объект.Организация;
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
		
		// Заполнение реквизитов формы "СтруктурноеПодразделение"
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
			Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
						
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияПолучатель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				
				Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
								
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				СтруктурноеПодразделениеОрганизацияПолучатель  = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			Иначе
				Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Ложь;				
			КонецЕсли;
		КонецЕсли;
						
		Иначе
	
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
				
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
			Иначе
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, Ложь);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, Ложь);
			КонецЕсли;
			
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ПричиныИзмененияСчетовУчета = Неопределено)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения") Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
							    								
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Оплата от структурного подразделения"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	УстановитьКурсДокумента();
	
	ПлатежиКПересчету = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = КурсДокумента;	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ПлатежиКПересчету = Объект.РасшифровкаПлатежа;
	Иначе
		Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ОтборВалюта = Новый Структура("ДоговорКонтрагентаВалютаВзаиморасчетов",
				 Объект.ВалютаДокумента);
				 
			ПлатежиКПересчету = Объект.РасшифровкаПлатежа.НайтиСтроки(ОтборВалюта);
					
			Для Каждого СтрокаПлатеж Из ПлатежиКПересчету Цикл
				
				УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
				
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
	Для Каждого СтрокаПлатеж Из ПлатежиКПересчету Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета)
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	Если ПричиныИзмененияСчетовУчета.Найти("Контрагент") = Неопределено Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	КонецЕсли;

	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СтавкаНДС 	= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
	
	//Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
	
	ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
	
	ИзмененаОрганизация = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;		
	ИначеЕсли НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
		
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
			И ЗначениеЗаполнено(ОсновнойДоговорКонтрагента)
			И ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;				
				Если Объект.Организация <> ОсновнойДоговорКонтрагента.Организация Тогда
					ИзмененаОрганизация = Истина;
				КонецЕсли;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				СтруктурноеПодразделениеОрганизация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОсновнойДоговорКонтрагента.Организация)
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
			КонецЕсли;
			
		КонецЕсли;	

	КонецЕсли;
	
	Если ИзмененаОрганизация Тогда
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", Истина, Ложь), Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	Иначе
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	 
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(НомерСтрокаПлатежа = Неопределено, ПричиныИзмененияСчетовУчета)

	Если НомерСтрокаПлатежа = Неопределено Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
		СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);			
		СтрокаПлатеж.ВалютаДокумента  = Объект.ВалютаДокумента;
	Иначе
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	КонецЕсли;
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПлатеж.КурсВзаиморасчетов;
	КонецЕсли; 
	                	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	//Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
	
	СтрокаПлатеж.Сделка = Неопределено;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПлатежноеПоручениеВходящее,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаОрганизацииНаСервере(СтруктураРезультатаВыполнения = Неопределено, ПричиныИзмененияСчетовУчета)

	Если Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
	
	//Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетаБанка(Объект.СчетОрганизации, Объект.СчетБанк);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации.ВалютаДенежныхСредств) И (Объект.СчетОрганизации.ВалютаДенежныхСредств <> Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Объект.СчетОрганизации.ВалютаДенежныхСредств;
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств= Объект.СчетКонтрагента.ВалютаДенежныхСредств Тогда
			Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();			
			ТекстСообщения  = НСтр("ru = 'Валюта счета контрагента не соответствует валюте счета организации! Значение очищено.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;    
							
		ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
		
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		Объект.СчетОрганизации = Объект.СтруктурноеПодразделениеПолучатель.ОсновнойБанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
	Иначе
		Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;

	ПриИзмененииСчетаОрганизацииНаСервере(, ПричиныИзмененияСчетовУчета);
	                    	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
    	
    Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) И СтруктурноеПодразделениеОрганизацияОтправитель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - отправитель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) И СтруктурноеПодразделениеОрганизацияПолучатель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Объект.СтруктурноеПодразделениеПолучатель	  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - получатель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УправлениеДенежнымиСредствамиСервер.СтруктурноеПодразделениеПриИзменении(Объект, СтруктураПараметров, "Кт");
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа Тогда
		УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);
	КонецЕсли;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ"); 
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ"); 
		
	КонецЕсли;
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучатель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправитель(Результат, Параметры) Экспорт
	
   РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("Организация, СчетОрганизации");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ВозвратЗаработнойПлаты.Очистить();
	Объект.ВозвратПенсионныхВзносов.Очистить();
	Объект.ВозвратСоциальныхОтчислений.Очистить();;
	
	Документы.ПлатежноеПоручениеВходящее.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеВходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
	ПриИзмененииЗначенияОрганизацииНаСервере(ПараметрыОбработки, Неопределено);
	
	Если ИсходныеДанные.СчетОрганизации <> Объект.СчетОрганизации Тогда
		ПриИзмененииСчетаОрганизацииНаСервере(Неопределено, Новый Массив);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");

		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;  
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат") Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,"ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоговуюСумму(ТабличнаяЧасть, Графа = "СуммаПлатежа")
	
	Объект.СуммаДокумента = Объект[ТабличнаяЧасть].Итог(Графа);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
		ИмяРасшифровкиПлатежа = "";
		ИмяПоля = "";
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ИмяРасшифровкиПлатежа", ИмяРасшифровкиПлатежа) Тогда
			Если ИмяРасшифровкиПлатежа = "" Тогда
				Объект[Параметры.ИмяПоля] = Результат.КурсВалюты;
				ЗаполнятьКурсиКратностьРасшифровки = Ложь;
			Иначе				
				ТекущиеДанные = Элементы[ИмяРасшифровкиПлатежа].ТекущиеДанные;
				Если Параметры.Свойство("ИмяПоля", ИмяПоля) Тогда
					ТекущиеДанные[ИмяПоля] = Результат.КурсВалюты;
					ЗаполнятьКурсиКратностьРасшифровки = Ложь;
				КонецЕсли;   		
			КонецЕсли;
		Иначе
			ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		КонецЕсли;
		
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
			ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
			
			РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуВозврата(ИмяТаблицы, Документ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Возвраты.Сумма КАК Сумма
	               |ИЗ
	               |	Документ." + ИмяТаблицы + " КАК Возвраты
	               |ГДЕ
	               |	Возвраты.Ссылка = &Ссылка
	               |ИТОГИ
	               |	СУММА(Сумма)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублированиеДокументовПеречисления(Объект, ИмяТабличнойЧасти, ИмяРеквизитаТЧ, ЗначениеРеквизитаТЧ, ИндексСтроки, Отказ)
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, ЗначениеРеквизитаТЧ));
	
	Если НайденныеСтроки.Количество() > 1 Тогда 
		ТекстСообщения = НСтр("ru='Документ ""%1"" уже есть в табличной части. Повторный выбор не допускается.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеРеквизитаТЧ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			, 
			, ИмяТабличнойЧасти + "[" + ИндексСтроки + "]." + ИмяРеквизитаТЧ
			, "Объект",
			Отказ);
		ЗначениеРеквизитаТЧ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("ГруппаСчетАналитикаБУ");
	ЭлементыСчетов.Добавить("ГруппаСчетАналитикаНУ");
	ЭлементыСчетов.Добавить("ГруппаПрочееПоступлениеДССчетаАналитика");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.СчетБанк.Видимость = ПоказыватьВДокументахСчетаУчета;

	Если ПоказыватьВДокументахСчетаУчета Тогда
		   		
		Если ЕстьРасшифровкаПлатежа Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет возвратов'");								
			Иначе	
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов'");
			КонецЕсли;
					
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ.Видимость =
			ВидимостьНалоговогоУчета И Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСчетАналитикаБУ.Видимость = Истина;
		Элементы.ГруппаСчетАналитикаНУ.Видимость = ВидимостьНалоговогоУчета;
		Элементы.ГруппаПрочееПоступлениеДССчетаАналитика.Видимость = Истина;
	КонецЕсли;  
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат Тогда
		Элементы.ГруппаВозвратПрочихВыплатСчетАналитикаБУ.Видимость = Истина;
		Элементы.ГруппаВозвратПрочихВыплатСчетАналитикаНУ.Видимость = ВидимостьНалоговогоУчета;
		Элементы.ГруппаВозвратПрочихВыплатСчетаАналитика.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПлатежноеПоручениеВходящее",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДополнительно(Форма)Экспорт
	
	ОбъектФормы = Форма.Объект;
	
	СтруктураДопПараметров = Новый Структура();
	
	СтруктураДопПараметров.Вставить("ДокументОснование",               	ОбъектФормы.ДокументОснование);
	СтруктураДопПараметров.Вставить("Ответственный",                   	ОбъектФормы.Ответственный);
	СтруктураДопПараметров.Вставить("ТолькоПросмотр",                  	Форма.ТолькоПросмотр);
	СтруктураДопПараметров.Вставить("ТипОбъекта",                      	"ПлатежноеПоручениеВходящее");
	СтруктураДопПараметров.Вставить("ВидВходящегоДокумента",			ОбъектФормы.ВидВходящегоДокумента);
	СтруктураДопПараметров.Вставить("Комментарий",						ОбъектФормы.Комментарий);
	СтруктураДопПараметров.Вставить("ДатаВходящегоДокумента",           ОбъектФормы.ДатаВходящегоДокумента);
	СтруктураДопПараметров.Вставить("НомерВходящегоДокумента",          ОбъектФормы.НомерВходящегоДокумента);
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(Форма, "ПлатежноеПоручениеВходящее", СтруктураДопПараметров)

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответствиеВидовПрочихВыплатДокументовВозврата(Объект, Документ, ИндексСтроки, Отказ)
	
	Если Объект.ВозвратПрочихВыплат.Количество() > 1 И ЗначениеЗаполнено(Документ) Тогда
		
		ВидПрочихВыплатТекВедомость = ПолучитьЗначениеРеквизита(Документ, "ВидПрочихВыплат");
		
		Если НЕ Объект.ВозвратПрочихВыплат[0].ВидПрочихВыплат = ВидПрочихВыплатТекВедомость Тогда 
			ТекстСообщения = НСтр("ru='Документ ""%1"" имеет вид прочих выплат, отличный от <%2>. 
										|Выбор ведомостей с разными видами прочих выплат не допускается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ, Объект.ВозвратПрочихВыплат[0].ВидПрочихВыплат);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения
				, 
				, "ВозвратПрочихВыплат[" + ИндексСтроки + "].Документ"
				, "Объект",
				Отказ);
			Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат)  
		
	СчетаПоСпособуОтражения = ПолучитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат);

	ЗаполнитьЗначенияСвойств(Объект, СчетаПоСпособуОтражения); 
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ВозвратПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "ВозвратПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат) 
	
	ДанныеПоСпособуОтражения = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовСКонтрагентомНУ, 
		|СубконтоКтБУ1, СубконтоКтБУ2, СубконтоКтБУ3,
		|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3",
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыСчетов.Налоговый.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка());  
		
	СпособОтраженияВидПрочихВыплат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедомостьВидПрочихВыплат, "СпособОтраженияВРеглУчете");
	
	Если ЗначениеЗаполнено(СпособОтраженияВидПрочихВыплат) Тогда 	
		
		ДанныеПоСпособуОтраженияСтруктура = ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СпособОтраженияВидПрочихВыплат);
		
		ДанныеПоСпособуОтражения.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеПоСпособуОтраженияСтруктура.СчетКт; 
		ДанныеПоСпособуОтражения.СчетУчетаРасчетовСКонтрагентомНУ = ДанныеПоСпособуОтраженияСтруктура.СчетКтНУ;
		ДанныеПоСпособуОтражения.СубконтоКтБУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт1; 
		ДанныеПоСпособуОтражения.СубконтоКтБУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт2;
		ДанныеПоСпособуОтражения.СубконтоКтБУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт3;
		ДанныеПоСпособуОтражения.СубконтоКтНУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ1;
		ДанныеПоСпособуОтражения.СубконтоКтНУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ2;
		ДанныеПоСпособуОтражения.СубконтоКтНУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ3;

	КонецЕсли; 
		
	Возврат ДанныеПоСпособуОтражения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СпособОтражения) 
	
	СтруктураДанных = Новый Структура;

	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтражения,"СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетКтНУ,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3");
		
	Возврат СтруктураДанных;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументаВТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьСчетаПоСпособуОтражения(ТекущийВидПрочихВыплат);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСчетаУчетаРасчетов()
	
	// БУ
	Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПустаяСсылка(); 
	Объект.СубконтоКтБУ1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоКтБУ2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоКтБУ3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
    // НУ
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ПустаяСсылка(); 
	Объект.СубконтоКтНУ1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоКтНУ2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоКтНУ3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();		
	
КонецПроцедуры

#КонецОбласти
