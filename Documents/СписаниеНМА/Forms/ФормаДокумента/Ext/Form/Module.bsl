////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьСубконтоВнеоборотныеАктиы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_СписаниеНМА", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;
				
				Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""списание нма"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента) Тогда
		ДатаПриИзмененииНаСервере();		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	
	СчетЗатратБУПриИзмененииНаСервере();
	
КонецПроцедуры     

&НаКлиенте
Процедура СубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 1, Объект.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина); 
	
КонецПроцедуры    

&НаКлиенте
Процедура СубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 2, Объект.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 3, Объект.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	
	ПоляФормы	   = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНУ1", "ЗаголовокСубконтоЗатратНУ2", "ЗаголовокСубконтоЗатратНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатратНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНУ1, ДанныеОбъекта.СубконтоЗатратНУ2, ДанныеОбъекта.СубконтоЗатратНУ3));

КонецПроцедуры
														
&НаКлиенте
Процедура СубконтоЗатратНУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 1, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 2, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 3, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Физическое лицо %1 уже включено в состав комиссии!'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаРассчитать(Команда)

	Если Модифицированность Или Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ТекстВопроса = НСтр("ru='Действие может быть выполнено только после записи документа. Записать?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписиДокумента", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
	Иначе
		РассчитатьНаСервере(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",			 Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",					 Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",			 Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",	 ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) И Не ЗначениеЗаполнено(Объект.СчетЗатратБУ) Тогда
		Объект.СчетЗатратБУ = ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;		
		СчетЗатратБУПриИзмененииНаСервере();                              		
	КонецЕсли; 
	
	ТекущаяДатаДокумента = Объект.Дата;
		
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);  
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ВидУчетаНУ.Видимость          = Объект.УчитыватьКПН;
	Элементы.ГруппаНалоговыйУчет.Видимость = Форма.ВидимостьНалоговогоУчета;
    
    Элементы.ГруппаБухгалтерскийУчет.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ГруппаСчетЗатратАналитикаНУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
			
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры   

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ЗатратБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ЗатратНУ"); 
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , , СтруктураРеквизитовШапки);
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Значение в поле ""Субконто"" не соответствует выбранной организации и было очищено.'")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетЗатратБУПриИзмененииНаСервере()
	          	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНУ1", "ЗаголовокСубконтоЗатратНУ2", "ЗаголовокСубконтоЗатратНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатратНУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратБУ, Объект, ПоляФормы);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратБУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
	                                        Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        Объект.СубконтоЗатратБУ1, Объект.СубконтоЗатратБУ2, Объект.СубконтоЗатратБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
	                                        Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        Объект.СубконтоЗатратНУ1, Объект.СубконтоЗатратНУ2, Объект.СубконтоЗатратНУ3));
	
	УстановитьДоступностьСубконтоВнеоборотныеАктиы();
															
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписиДокумента(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РассчитатьНаСервере(Истина)		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере(ЗаписатьДокумент)
	
	Если ЗаписатьДокумент Тогда
		Записать();
	КонецЕсли; 
	
	Документы.СписаниеНМА.ПолучитьСтоимостьВАПоНУ(Объект, ?(Не ЗначениеЗаполнено(Параметры.Ключ), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)));
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВнеоборотныеАктиы()
	
	Для Ном = 1 по 3 Цикл
		Если (Ном <= Объект.СчетЗатратБУ.ВидыСубконто.Количество()) И (ЗначениеЗаполнено(Объект.СчетЗатратБУ)) Тогда
			Если Объект.СчетЗатратБУ.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
				Элементы["СубконтоЗатратБУ" + Ном].Доступность = Ложь;	
			Иначе
				Элементы["СубконтоЗатратБУ" + Ном].Доступность = Истина;	
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

 
