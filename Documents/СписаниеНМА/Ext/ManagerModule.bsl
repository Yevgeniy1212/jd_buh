#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПолучитьСтоимостьВАПоНУ(Объект, Дата) Экспорт
	
	СтоимостьНУ = 0;
	
	Если ЗначениеЗаполнено(Объект.НематериальныйАктив) И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК СтоимостьНУ
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|		&Дата,
		|		Счет В ИЕРАРХИИ (&СчетаУчетаВА),
		|		,
		|		Организация = &Организация
		|			И Субконто1 = &ВнеоборотныйАктив) КАК НалоговыйОстатки");	
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("СчетаУчетаВА", ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ВнеоборотныйАктив", Объект.НематериальныйАктив);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтоимостьНУ = Результат.СтоимостьНУ;	
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.СуммаНУ = СтоимостьНУ;
		
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"						  , ДокументСсылка);
	Запрос.УстановитьПараметр("НМА",		 	ДокументСсылка.НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",	ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	ДокументСсылка.СтруктурноеПодразделение);	
	Запрос.УстановитьПараметр("НачалоПериода",	ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());  
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;           	
			  		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ТаблицаРеквизитыСписание = ПараметрыПроведения.Реквизиты.Скопировать();
	ПараметрыПроведения.Вставить("РеквизитыСписание", ТаблицаРеквизитыСписание);               	
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Налогоплательщик       = Реквизиты.Организация;
	СтруктурнаяЕдиница     = Реквизиты.Организация;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями   = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);	
	ВедетсяАналитическийУчетОСПоМОЛ 				= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитическийУчетОСПоПодразделениям 		= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
		
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
									
		СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);									
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями",        ПоддержкаРаботыСоСтруктурнымиПодразделениями); 	
	
	Запрос.УстановитьПараметр("Налогоплательщик",          Налогоплательщик);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",        СтруктурнаяЕдиница); 		
	Запрос.УстановитьПараметр("СинонимНМА",	               НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоМОЛ",              ВедетсяАналитическийУчетОСПоМОЛ);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоПодразделениям",   ВедетсяАналитическийУчетОСПоПодразделениям);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхразницБалансовымМетодом", ВедениеУчетаВременныхразницБалансовымМетодом);
		
	СубконтоНМА = Новый Массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоНМА",				СубконтоНМА);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = 	ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
					+ ТекстЗапросаСостоянияНМА(НомераТаблиц)
					+ ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц,ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеСтоимостиНМА(НомераТаблиц)
					+ ТекстЗапросаРеквизитыРаспределениеАмортизации(НомераТаблиц);
	         	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК НематериальныйАктив,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
	|	ВЫБОР
	|		КОГДА НЕ ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ФиксированныйАктив = &НМА) КАК ОбъектыНалоговогоУчетаФА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И ФиксированныйАктив = &НМА) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
	|			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	|			И (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""СписаниеНМА"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.НематериальныйАктив,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СнятьСУчетаПоНалогам,
	|	Реквизиты.УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакОбъектаФА,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ПризнакОтдельногоУчетаФА
	|	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СписаниеНМА КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.СнятьСУчетаПоНалогам,
	|	Реквизиты.ПризнакОбъектаФА,
	|	Реквизиты.ПризнакОтдельногоУчетаФА,
	|	Реквизиты.НематериальныйАктив,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ВременнаяТаблицаНМА", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	СписаниеНМА.НематериальныйАктив,
	|	СписаниеНМА.НематериальныйАктив.Код КАК Код,
	|	СписаниеНМА.СуммаНУ КАК СуммаНУ,
	|	СписаниеНМА.СубконтоЗатратБУ1 КАК СубконтоРасходовБУ1,
	|	СписаниеНМА.СубконтоЗатратБУ2 КАК СубконтоРасходовБУ2,
	|	СписаниеНМА.СубконтоЗатратБУ3 КАК СубконтоРасходовБУ3,
	|	СписаниеНМА.СубконтоЗатратНУ1 КАК СубконтоРасходовНУ1,
	|	СписаниеНМА.СубконтоЗатратНУ2 КАК СубконтоРасходовНУ2,
	|	СписаниеНМА.СубконтоЗатратНУ3 КАК СубконтоРасходовНУ3,
	|	СписаниеНМА.СчетЗатратБУ КАК СчетРасходовБУ,
	|	СписаниеНМА.СчетЗатратНУ КАК СчетРасходовНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан) КАК Состояние
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	Документ.СписаниеНМА КАК СписаниеНМА
	|ГДЕ
	|	СписаниеНМА.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСостоянияНМА(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСостоянийНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ТаблицаНМА.Состояние КАК Состояние,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Не Реквизиты.СнятьСучетаПоНалогам Тогда
		ПараметрыПроведения.Вставить("ТаблицаОбъектыИмущественногоНалога", Неопределено);	
		ПараметрыПроведения.Вставить("РеквизитыОбъектыИмущественногоНалога", Неопределено);		
		Возврат "";
	Иначе  		
		НомераТаблиц.Вставить("РеквизитыОбъектыИмущественногоНалога", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаОбъектыИмущественногоНалога", НомераТаблиц.Количество());  				
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация,
		|	Реквизиты.СтруктурноеПодразделение,
		|	&ПоддержкаРаботыСоСтруктурнымиПодразделениями
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	ЛОЖЬ КАК НачислятьНалог,
		|	Реквизиты.Организация КАК Местонахождение,
		|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога
		|ИЗ
		|	ТаблицаНМА КАК ТаблицаНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
		|				&НачалоПериода,
		|				ОбъектНалогообложения В
		|						(ВЫБРАТЬ
		|							ТаблицаНМА.НематериальныйАктив
		|						ИЗ
		|							ТаблицаНМА КАК ТаблицаНМА)
		|					И Налогоплательщик = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
		|		ПО ТаблицаНМА.НематериальныйАктив = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНМА.НомерСтроки"	
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();  						
		Возврат ТекстЗапроса;					
		
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ (Реквизиты.ПризнакОбъектаФА И Реквизиты.НеобходимостьОтраженияВНУ) Тогда		
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", Неопределено);		
	Иначе
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	ОбъектыНалоговогоУчетаФА.НематериальныйАктив КАК ФиксированныйАктив,
		               	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
		               	|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
		               	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.Выбыл) КАК СостояниеФиксированногоАктива
		               	|ИЗ
		               	|	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА"
						+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц,ПараметрыПроведения,Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ (Реквизиты.НеобходимостьОтраженияВНУ И Реквизиты.СнятьСУчетаПоНалогам
			И Реквизиты.ПризнакОтдельногоУчетаФА) Тогда		
		ПараметрыПроведения.Вставить("ТаблицаФАУчитываемыеОтдельно", Неопределено);		
	Иначе   		
		НомераТаблиц.Вставить("ТаблицаФАУчитываемыеОтдельно", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	ОбъектыНалоговогоУчетаФА.НематериальныйАктив КАК ФиксированныйАктив,
		               	|	ОбъектыНалоговогоУчетаФА.ВидЛьготыФА,
		               	|	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.Выбытие) КАК Событие
		               	|ИЗ
		               	|	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеСтоимостиНМА(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыСтоимостьНМА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСтоимостьНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =  "ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ПризнакОбъектаФА, 	
	|   &НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|   &ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НМА_БУ.НематериальныйАктив КАК НематериальныйАктив,
	|	НМА_БУ.СчетУчетаБУ КАК СчетКт,
	|	НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетДт,
	|	ЕстьNull(СтоимостьНМА_БУ.СуммаОстатокДт,0) КАК СтоимостьБУ,
	|	ЕстьNull(АмортизацияНМА_БУ.СуммаОстатокКт,0) КАК АмортизацияБУ,
	|	ТаблицаНМА.СчетРасходовБУ КАК СчетРасходовБУ,		
	|	ТаблицаНМА.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	|	ТаблицаНМА.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	|	ТаблицаНМА.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3,
	|	ТаблицаНМА.СчетРасходовНУ КАК СчетРасходовНУ,
	|	ТаблицаНМА.СубконтоРасходовНУ1 КАК СубконтоРасходовНУ1,
	|	ТаблицаНМА.СубконтоРасходовНУ2 КАК СубконтоРасходовНУ2,
	|	ТаблицаНМА.СубконтоРасходовНУ3 КАК СубконтоРасходовНУ3,
	|	ТаблицаНМА.СуммаНУ КАК СуммаНУ,	
	|	0 КАК ОстаточнаяСтоимостьНМА,
	|	0 КАК БалансоваяСтоимостьНМА                 
	|ИЗ
	|	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК НМА_БУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&НачалоПериода,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И Субконто1 В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК СтоимостьНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	|			И НМА_БУ.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&НачалоПериода,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И Субконто1 В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК АмортизацияНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	|			И НМА_БУ.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	|   ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНМА КАК  ТаблицаНМА
	|		ПО (ИСТИНА) 
	|";
			
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизитыРаспределениеАмортизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыРаспределениеАмортизации", НомераТаблиц.Количество());
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	&НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	&ВедетсяАналитическийУчетОСПоПодразделениям КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	|	&ВедетсяАналитическийУчетОСПоМОЛ КАК ВедетсяАналитическийУчетОСПоМОЛ,
	|	НЕОПРЕДЕЛЕНО КАК ВидРегламентнойОперации,
	|	"""" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ДА3
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДА3";
	КомандаПечати.Представление = НСтр("ru = 'ДА-3 (Акт на списание)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДА3";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать ДА3
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДА3") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДА3",
			НСтр("ru = 'ДА-3 (Акт на списание)'"),
			ПечатьДА3(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_ДА3");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьДА3(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент						 = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "СписаниеНМА_ДА3";
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ДА3");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	//вспомогательные запросы для формирования печатной формы документа
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеНМА.Номер КАК НомерДок,
	|	СписаниеНМА.Дата КАК ДатаДок,
	|	СписаниеНМА.Дата КАК Период,
	|	СписаниеНМА.Организация,
	|	СписаниеНМА.СтруктурноеПодразделение,
	|	СписаниеНМА.Ответственный,
	|	СписаниеНМА.СчетЗатратБУ КАК СчетСписания,
	|	СписаниеНМА.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	|	СписаниеНМА.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	|	СписаниеНМА.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	|	СписаниеНМА.СуммаНУ,
	|	СписаниеНМА.Проведен,
	|	ДвиженияТиповой.СчетКт КАК Счет,
	|	ДвиженияТиповой.Сумма КАК Сумма,
	|	СписаниеНМА.НематериальныйАктив,
	|	СписаниеНМА.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ВЫРАЗИТЬ(СписаниеНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	|	СписаниеНМА.НематериальныйАктив.Код КАК ИнвНомер,
	|	СписаниеНМА.Ссылка КАК Регистратор,
	|	СписаниеНМА.Ссылка
	|ИЗ
	|	Документ.СписаниеНМА КАК СписаниеНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	|			ТиповойДвиженияССубконто.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&ТекущийДокумент), , ) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.СчетДт,
	|			ТиповойДвиженияССубконто.Регистратор) КАК ДвиженияТиповой
	|		ПО СписаниеНМА.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	|			И СписаниеНМА.НематериальныйАктив = ДвиженияТиповой.СубконтоКт1
	|			И СписаниеНМА.Ссылка = ДвиженияТиповой.Регистратор
	|ГДЕ
	|	СписаниеНМА.Ссылка В(&ТекущийДокумент)";
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Док = Результат.Выбрать();
	
	Пока Док.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
		СтруктурнаяЕдиницаОрганизация	  = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
		СведенияОбОрганизации			  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);
		
		//формирование печатной формы документа  		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(Док);
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДок, "ru");
		
		ОбластьМакета.Параметры.НомерДок				 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.НомерДок, Док.Ссылка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		
		Руководители 							   = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);
		ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.Руководитель;	
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВалютаПечати = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ЗаголовокТаблицы1				   = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
		ЗаголовокТаблицы1.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ЗаголовокТаблицы1);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы
			ТабДокумент.Вывести(ЗаголовокТаблицы1);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Док);
		
		ОбластьМакета.Параметры.НаимОС = ?(ЗначениеЗаполнено(Док.Наименование), СокрЛП(Док.Наименование), Док.НематериальныйАктив);
		
		ЗапросПоРС = Новый Запрос;
		ЗапросПоРС.Текст = "ВЫБРАТЬ
		|	СостоянияНМАОрганизацийПринятКУчету.Период КАК ДатаВводаВЭксплуатацию,
		|	ПервоначальныеСведенияНМАСрезПоследних.Период КАК ДатаПоследнихПараметровАмортизации,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		|			&ДатаДокумента,
		|			Организация = &Организация
		|				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|				И НематериальныйАктив = &НематериальныйАктив) КАК СостоянияНМАОрганизацийПринятКУчету,
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		|			&ДатаДокумента,
		|			Организация = &Организация
		|				И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМАСрезПоследних";
		ЗапросПоРС.УстановитьПараметр("Организация",         Док.Организация);
		ЗапросПоРС.УстановитьПараметр("НематериальныйАктив", Док.НематериальныйАктив);
		ЗапросПоРС.УстановитьПараметр("ДатаДокумента",       Док.ДатаДок);
		ДанныеРС = ЗапросПоРС.Выполнить().Выбрать();
		
		Если ДанныеРС.Следующий() Тогда        		
			Если ДанныеРС.ДатаПоследнихПараметровАмортизации <> Null Тогда 
				ФактическийСрокИспользования = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьФактическийСрокИспользования(ДанныеРС.ДатаПоследнихПараметровАмортизации, Док.ДатаДок); 
				ОбластьМакета.Параметры.ФактическийСрокЭксплуатации = ФактическийСрокИспользования;
				ОбластьМакета.Параметры.ДатаВводаВЭксплуатацию = ДанныеРС.ДатаВводаВЭксплуатацию;
			КонецЕсли;
		КонецЕсли;
		
		// расчитаем амортизацию
		Если Док.Проведен Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Период"	   , Новый МоментВремени(Док.ДатаДок, Док.Ссылка));  
			Запрос.УстановитьПараметр("Организация", Док.Организация);
			Запрос.УстановитьПараметр("НМА"		   , Док.НематериальныйАктив);	
			
			Запрос.Текст="ВЫБРАТЬ
			|	ЕСТЬNULL(ТиповойОборотыДтКт.СуммаОборот, 0) КАК Сумма
			|ИЗ
			|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
			|			&Период,
			|			&Период,
			|			,
			|			СчетДт В
			|				(ВЫБРАТЬ
			|					НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетАмортизацииБУ
			|				ИЗ
			|					РегистрСведений.СчетаУчетаНМА.СрезПоследних(&Период, Организация = &Организация
			|						И НематериальныйАктив = &НМА) КАК НМА_БУ),
			|			,
			|			,
			|			,
			|			Организация = &Организация) КАК ТиповойОборотыДтКт";
			
			Аморт = Запрос.Выполнить().Выбрать();
			Если Аморт.Следующий() Тогда
				СуммаАмортизации = Аморт.Сумма;
			КонецЕсли;
		Иначе
			ТаблицаТекущегоСостоянияНМА = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуНМА(Док.Организация,
				Док.СтруктурноеПодразделение, Док.НематериальныйАктив, 	Новый МоментВремени(Док.ДатаДок, Док.Ссылка));
				
					
			ТаблицаАмортизацииБУ = УчетНМА.ПодготовитьТаблицуАмортизацииНМАБухРегл(Результат.Выгрузить(),
				Док.НематериальныйАктив);
				
			Если ТаблицаАмортизацииБУ.Колонки.Найти("НМА") <> Неопределено Тогда	
				СтрокаАмортизации = ТаблицаАмортизацииБУ.Найти(Док.НематериальныйАктив, "НМА");
			Иначе
				СтрокаАмортизации = Неопределено;
			КонецЕсли;
			
			СтрокаТТС = ТаблицаТекущегоСостоянияНМА.Найти(Док.НематериальныйАктив, "НМА_БУ");
			
			АмортизацияБУ = 0;
			АмортизацияЗаМесяц = 0;
			Если СтрокаТТС <> Неопределено Тогда
				АмортизацияБУ = СтрокаТТС.АмортизацияБУ;
				Если СтрокаАмортизации <> Неопределено тогда
					АмортизацияЗаМесяц = СтрокаАмортизации.Бух;
				КонецЕсли;
			КонецЕсли;
			
			СуммаАмортизации = АмортизацияБУ + АмортизацияЗаМесяц;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.НачАмортизация		= СуммаАмортизации;
		
		Если ЗначениеЗаполнено(ДанныеРС.ПервоначальнаяСтоимость) Тогда
			ОбластьМакета.Параметры.НачСтоимость  		= ДанныеРС.ПервоначальнаяСтоимость;
			ОбластьМакета.Параметры.БалансоваяСтоимость = ДанныеРС.ПервоначальнаяСтоимость - СуммаАмортизации;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета								   = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
		ОбластьМакета.Параметры.ДокументОснованиеДата  = НСтр("ru = '""____""________________20__года' ", КодЯзыка);
		ОбластьМакета.Параметры.ДокументОснованиеВид   = НСтр("ru = 'приказом (распоряжением)___________________________' ", КодЯзыка);
		ОбластьМакета.Параметры.ДокументОснованиеНомер = Формат("_______");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета							= Макет.ПолучитьОбласть("СписокОсмотренных");
		ОбластьМакета.Параметры.ПроизвелаОсмотр = НСтр("ru = 'на основании ________________ произвела осмотр' ", КодЯзыка);
		ОбластьМакета.Параметры.НаимОС			= СокрЛП(Док.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПричинаСписания");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОборотнаяСторона");
		ТабДокумент.Вывести(ОбластьМакета);
		
		//Печать данных о комисси
		ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
		
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("МОЛ"					, НСтр("ru = 'Материально-ответственное лицо:' ", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии:' ", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии"		, НСтр("ru = 'Члены комиссии:' ", КодЯзыка));
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если ПредседательКомиссии <> Неопределено Тогда
			ДанныеПредседателя								 = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДок);
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
			ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		Иначе
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьМакета.Параметры.Должность                = "";
			ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДок);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаКомиссии.ЧленыКомиссии, "");
			ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
			ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 1 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаКомиссии.ЧленыКомиссии, "");
			ОбластьМакета.Параметры.Должность          = "";
			ОбластьМакета.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.Ответственный.ФизЛицо) Тогда 
			ДанныеОФизЛице							   = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Док.Организация, Док.Ответственный.ФизЛицо, Док.ДатаДок);
			ОбластьМакета.Параметры.Должность          = ДанныеОФизЛице.Должность;
			ОбластьМакета.Параметры.РасшифровкаПодписи = ДанныеОФизЛице.Представление;
		Иначе
			ОбластьМакета.Параметры.РасшифровкаПодписи = Док.Ответственный;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы3");
		ОбластьМакета.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы3");
		ТабДокумент.Вывести(ОбластьМакета);	
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы3");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Валюта			   = ВалютаПечати;
		ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ОбластьМакета);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции   


#КонецЕсли
