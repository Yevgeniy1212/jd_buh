
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СписокСвойств = "ИмяТаблицы";
	Если Параметры.Свойство(СписокСвойств) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	КонецЕсли;

	ОбщегоНазначенияБКВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект); 
		
	СтатусыДокументов.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	ВыводДанныхСписка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СПИСОК

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБККлиентСервер.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦ ФОРМЫ

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ВыводДанныхСписка() 
	
	Если Элементы.Оплата.Видимость ИЛИ Элементы.Отгрузка.Видимость Тогда 
		
		Список.ТекстЗапроса = "ВЫБРАТЬ
	      |	ДокументСчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	      |	ДокументСчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления,
	      |	ДокументСчетНаОплатуПокупателю.Номер КАК Номер,
	      |	ДокументСчетНаОплатуПокупателю.Дата КАК Дата,
	      |	ДокументСчетНаОплатуПокупателю.Проведен КАК Проведен,
	      |	ДокументСчетНаОплатуПокупателю.Автор КАК Автор,
	      |	ДокументСчетНаОплатуПокупателю.АдресДоставки КАК АдресДоставки,
	      |	ДокументСчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
	      |	ДокументСчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
	      |	ДокументСчетНаОплатуПокупателю.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	      |	ДокументСчетНаОплатуПокупателю.Комментарий КАК Комментарий,
	      |	ДокументСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	      |	ДокументСчетНаОплатуПокупателю.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	      |	ДокументСчетНаОплатуПокупателю.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	      |	ДокументСчетНаОплатуПокупателю.Организация КАК Организация,
	      |	ДокументСчетНаОплатуПокупателю.Ответственный КАК Ответственный,
	      |	ДокументСчетНаОплатуПокупателю.Склад КАК Склад,
	      |	ДокументСчетНаОплатуПокупателю.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	      |	ДокументСчетНаОплатуПокупателю.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	      |	ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	      |	ДокументСчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
	      |	ДокументСчетНаОплатуПокупателю.ТипЦен КАК ТипЦен,
	      |	ДокументСчетНаОплатуПокупателю.УчитыватьНДС КАК УчитыватьНДС,
	      |	ДокументСчетНаОплатуПокупателю.УчитыватьАкциз КАК УчитыватьАкциз,
	      |	ДокументСчетНаОплатуПокупателю.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	      |	ДокументСчетНаОплатуПокупателю.МоментВремени КАК МоментВремени,
	      |	ЛОЖЬ КАК Оплата,
	      |	ЛОЖЬ КАК Отгрузка
	      |ИЗ
	      |	Документ.СчетНаОплатуПокупателю КАК ДокументСчетНаОплатуПокупателю
	      |		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	      |		ПО ДокументСчетНаОплатуПокупателю.Организация = СтатусыДокументов.Организация
	      |			И ДокументСчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ}"; 		
	
		Если Элементы.Оплата.Видимость Тогда 
			
			Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "ЛОЖЬ КАК Оплата", 
									"ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Перечисление.СтатусОплатыСчета) КАК Оплата");
			
			Список.Параметры.УстановитьЗначениеПараметра(
				"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());

		КонецЕсли;	
			
		Если Элементы.Отгрузка.Видимость Тогда
					
			Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "ЛОЖЬ КАК Отгрузка",
									"ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &СтатусОтгрузкиПоУмолчанию) КАК Перечисление.СтатусыОтгрузки) КАК Отгрузка");
			
			Список.Параметры.УстановитьЗначениеПараметра(
				"СтатусОтгрузкиПоУмолчанию", Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());

		КонецЕсли;	
	
	КонецЕсли;
								
КонецПроцедуры

