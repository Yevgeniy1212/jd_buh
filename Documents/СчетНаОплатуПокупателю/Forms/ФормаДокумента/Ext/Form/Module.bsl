
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)   
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
	ЗаполнитьИнформациюОбОплатеСчета();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		УправлениеЦенообразованием.ОбновитьЦеныНоменклатуры(Объект.Ссылка,
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораИзКлассификатора" Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КодыНазначенияПлатежей") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Объект.КодНазначенияПлатежа = ВыбранноеЗначение;
			Иначе 
				Объект.КодНазначенияПлатежа = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			
			Модифицированность = Истина;
				
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
			И Параметр.Свойство("ИдентификаторВызывающейФормы")
			И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет)
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен()Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Результат  = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			ТекущийКод = Результат.Штрихкод;
			Результат.Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Результат.Штрихкод);

			ДобавитьПоШтрихкодуНаСервере(Результат);
			Если ТипЗнч(Результат) = Тип("Структура") Тогда
				Если Результат.Свойство("НомерСтроки") Тогда
					Элементы.Товары.ТекущаяСтрока = Неопределено;
					Элементы.Товары.ТекущаяСтрока = Результат.НомерСтроки - 1;
				Конецесли;
				Если Результат.Свойство("НеНайденаНоменклатура") Тогда
					ТекстСообщения = НСтр("ru = 'Не найдена номенклатура, соответствующая штрихкоду <%1>!'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийКод);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Конецесли;
			Конецесли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка или при проведении оплаты от покупателя
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ОбработатьОповещениеОбИзмененииСтатусДокумента();
		КонецЕсли; 
		
	Иначе
		
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	            
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект, "СканерШтрихкода");

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	КлючеваяОперация = "Документ ""счет на оплату покупателю"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда  
		МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтотОбъект);
	КонецЕсли;  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);

   	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Результат.ИзмененоСтруктурноеПодразделение Тогда
				РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
    Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;
	 
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
				
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	//очистим данные адреса доставки
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	СтруктураРезультатаВыполнения = Неопределено;

	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);
	УправлениеФормой(ЭтаФорма);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоговорКонтрагентаПриИзмененииНаСервере()
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		Возврат;
	КонецЕсли;

	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		
		// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодНазначенияПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыНазначенияПлатежей");
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	"Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Объект.КодНазначенияПлатежа), Неопределено, СокрЛП(Объект.КодНазначенияПлатежа)));
	ПараметрыФормы.Вставить("ЯзыкМакета", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
    Обработчик           = Новый ОписаниеОповещения("АдресДоставкиЗавершениеВыбора", ЭтотОбъект);
    Режим                = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	СтруктураОтбора = Новый Структура("Объект, Тип",Объект.Контрагент, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, Отбор", Истина, Истина, СтруктураОтбора);
				
    ОткрытьФорму("РегистрСведений.КонтактнаяИнформация.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,, Обработчик, Режим);	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Объект.АдресДоставки = ВыбранноеЗначение;
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиентСервер.ОбработатьИзмененияПоКнопкеЦеныИВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПриИзменении(Элемент)
		
	ЗаполнитьИнформациюОбОплатеСчета();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СтавкаАкциза, СуммаАкциза, КоэффициентАкциза, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокаТаблицы, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ОСОсновноеСредствоПриИзмененииНаСервере();
	КонецЕсли;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();

	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда) 
	ПоискПоШтрихкоду();
КонецПроцедуры 
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;  
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(); 
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ИсходнаяОрганизация = Объект.Организация;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
 	УстановитьТекущуюСтраницуОсновнойПанели();	
	
	УправлениеФормой(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор); 
	
	УстановитьВидимостьСтатусаОплаты();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПоШтрихкодуНаСервере(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Штрихкод") Тогда
		Результат.Вставить("ФорматBase64", Истина);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(Результат);
		Штрихкод = Результат.Штрихкод;
	Иначе
		ШтрихКод = "";
	КонецЕсли;
	
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		Результат = Новый Структура("Номенклатура, Штрихкод", ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура, Штрихкод); 
	Иначе 
		Результат = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
		Результат.Вставить("НеНайденаНоменклатура", Истина);
	КонецЕсли; 
	
	ДобавитьНоменклатуруНаСервере(Результат, УникальныйИдентификатор);
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Штрихкод") Тогда
		Результат.Штрихкод = "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонок "Всего", "КоэффициентАкциза" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаАкциза), СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) + ?(Объект.СуммаВключаетАкциз, 0, СтрокаТаблицы.СуммаАкциза);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
		
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	Форма.Элементы.ГруппаИтогиАкциз.Видимость = Объект.УчитыватьАкциз;

	Если Форма.Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;
	
	Если Форма.Объект.СуммаВключаетАкциз Тогда
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (сверху)'");
	КонецЕсли;
	              
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС   = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	Форма.ИтогиВсегоАкциз = Объект.Товары.Итог("СуммаАкциза");
	Форма.ИтогиВсего      = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма") + Объект.ОС.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
	Если Объект.УчитыватьАкциз
	   И НЕ Объект.СуммаВключаетАкциз Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоАкциз;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;

	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
    ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	Объект.СтруктурнаяЕдиница = ОсновнойБанковскийСчет;

	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
			
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, СтруктураЦеныИВалюта, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьАкциз, ПересчитатьНДС)

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
				
		Иначе
			Цена = 0;
		КонецЕсли;
		
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		ЦенаВключаетАкциз = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетАкциз, Ложь);
		
	Иначе
		
		Если ПересчитатьЦены Тогда
			
			Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
		ЦенаВключаетАкциз = ?(ПересчитатьАкциз, НЕ Объект.СуммаВключаетАкциз, Объект.СуммаВключаетАкциз);
		
	КонецЕсли;

	Строка.Цена     = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		                                                 Неопределено,
		                                                 ЦенаВключаетНДС, 
														 СтруктураЦеныИВалюта.УчитыватьНДС,
		                                                 СтруктураЦеныИВалюта.СуммаВключаетНДС,
		                                                 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС),
														 ЦенаВключаетАкциз,
														 СтруктураЦеныИВалюта.УчитыватьАкциз,
		                                                 СтруктураЦеныИВалюта.СуммаВключаетАкциз,
		                                                 ?(ПересчитатьАкциз, Строка.СуммаАкциза, 0));
														 
	Строка.Сумма 	= Строка.Цена * ?(Строка.Количество = 0, 0, Строка.Количество);
	
	Если ПересчитатьАкциз Тогда
		
		Если СтруктураЦеныИВалюта.УчитыватьАкциз Тогда
			Строка.СуммаАкциза = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуАкциза(Строка.Количество, Строка.КоэффициентАкциза, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуАкциза(Строка.СтавкаАкциза), 
																	Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		Иначе
			Строка.СуммаАкциза = 0;
			Строка.СтавкаАкциза = Справочники.СтавкиАкциза.ПустаяСсылка();
		КонецЕсли;
																 
	КонецЕсли;
	
	Строка.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС,
															 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС), ?(ПересчитатьАкциз, Строка.СуммаАкциза, 0), Объект.СуммаВключаетАкциз);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, СтруктураЦеныИВалюта, ПересчитатьАкциз = Ложь, ПересчитатьНДС = Неопределено)

	ПерезаполнитьЦены = СтруктураЦеныИВалюта.ПерезаполнитьЦены;
	ПересчитатьЦены   = СтруктураЦеныИВалюта.ПересчитатьЦены;	
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"), Истина);
			
		ТаблицаЦенНоменклатуры	= УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата,
			Объект.Организация);
			
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		ЦенаВключаетАкциз = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетАкциз, Ложь);
			
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
		ЦенаВключаетАкциз = ?(ПересчитатьАкциз, НЕ Объект.СуммаВключаетАкциз, Объект.СуммаВключаетАкциз);
		
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, СтруктураЦеныИВалюта, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
			ПересчитатьЦены, ПересчитатьАкциз, ПересчитатьНДС);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, СтруктураЦеныИВалюта, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
			ПересчитатьЦены, Ложь, ПересчитатьНДС);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ОС Цикл
		
		Строка.Сумма     = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Строка.Сумма,
			                                                 Неопределено,
			                                                 СтруктураЦеныИВалюта.ЗначенияПриОткрытии.СуммаВключаетНДС, 
															 СтруктураЦеныИВалюта.УчитыватьНДС,
			                                                 СтруктураЦеныИВалюта.СуммаВключаетНДС,
			                                                 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		
		Строка.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС,
																 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
																 
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");  
	ПредставлениеТаблицы = "";
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
	
	Если ИмяТаблицы = "Товары" Тогда
		
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");

		СписокЗапросов.Добавить("ОстаткиНоменклатуры", НСтр("ru = 'Остатки номенклатуры'"));

		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", НСтр("ru = 'Остатки и цены номенклатуры'"));
			СписокЗапросов.Добавить("ЦеныНоменклатуры",         НСтр("ru = 'Цены номенклатуры'"));
		Иначе
			СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатурыДокументов", НСтр("ru = 'Остатки и цены продажи'"));
			СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", НСтр("ru = 'Цены продажи'"));
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		КонецЕсли;

	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныУслуг", НСтр("ru = 'Цены услуг'"));
		Иначе
			СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", НСтр("ru = 'Цены продажи'"));
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		КонецЕсли;
		
	КонецЕсли;

	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"   , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Товар"             , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("ВыбиратьВсе"       , Истина);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	ЭтоПодборПоШтрихкоду = ВыбранноеЗначение.Свойство("Штрихкод");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;			
	Иначе                                                   		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	
	ЕстьЦена = (ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,
	|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти =  Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;   		
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		Иначе  
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);			
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда   					
					Если ИмяТаблицы = "Товары" Тогда  						
						Продолжить;      						
					КонецЕсли;     					
				Иначе 					
					Если ИмяТаблицы = "Услуги" Тогда 						
						Продолжить; 						
					КонецЕсли; 					
				КонецЕсли; 				
			КонецЕсли;
			
			НоваяСтрока = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			МетаданныеДокумента = Объект.Ссылка.Метаданные();
			
			Если ИмяТаблицы = "Товары" Тогда
				
				НоваяСтрока.Коэффициент = 1;
				
				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(НоваяСтрока, "Товары", МетаданныеДокумента);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, "Товары", МетаданныеДокумента);
				
				// Рассчитываем реквизиты табличной части. 
				Если ЭтоВставкаИзБуфера ИЛИ ЭтоПодборПоШтрихкоду Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(НоваяСтрока, ПараметрыОбъекта);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПараметрыОбъекта);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(НоваяСтрока, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, "Услуги", МетаданныеДокумента);
				
				НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
				
				// Рассчитываем реквизиты табличной части. 
				Если ЭтоВставкаИзБуфера Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПараметрыОбъекта);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(НоваяСтрока, Объект.СуммаВключаетНДС);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ТипЦен) Тогда
		ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.СтавкаАкциза	   = СведенияОНоменклатуре.СтавкаАкциза;
	СтрокаТабличнойЧасти.СтавкаНДС	   	   = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза), СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ТипЦен) Тогда
		ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтавкаНДС	   	   = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОСОсновноеСредствоПриИзмененииНаСервере()
	
	Возврат ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьАкциз", 		Объект.УчитыватьАкциз);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетАкциз", 	Объект.СуммаВключаетАкциз);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаНаСервере(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения)

	СтруктураПараметровДляПолученияДоговора = Новый Структура;	
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", ПолучитьМассивВидовДоговоров());	
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект,СтруктураПараметровДляПолученияДоговора);	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, , , СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы)
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'ОС'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");		
		СписокСвойств.Добавить("СтавкаАкциза"); 	
			
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");			
	КонецЕсли;
	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта()
	
	СведенияОбУчетнойПолитикеОрганизации = УправлениеЦенообразованиемВызовСервера.ПолучитьСведенияОбУчетнойПолитикеОрганизации(Объект.Организация, Объект.Дата);
	ЯвляетсяПлательщикомНДС    = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомНДС;
	ЯвляетсяПлательщикомАкциза = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомАкциза;
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	                                                                                                     
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда                    
		ВалютаВзаиморасчетов = УправлениеЦенообразованиемВызовСервера.ПолучитьВалютуВзаиморасчетов(Объект.ДоговорКонтрагента);
	Иначе
		ВалютаВзаиморасчетов = ЭтотОбъект.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если Не ЯвляетсяПлательщикомАкциза И Не ИспользоватьТипыЦен И (Не ИспользоватьВалютныйУчет 
		ИЛИ (ИспользоватьВалютныйУчет И ВалютаВзаиморасчетов = ЭтотОбъект.ВалютаРегламентированногоУчета)) Тогда
		Объект.СуммаВключаетАкциз = Ложь;
		Объект.УчитыватьАкциз = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСоШтрихкодами

&НаКлиенте
Процедура ПоискПоШтрихкоду() Экспорт
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода", , ЭтотОбъект,,,,ОписаниеОповещенияПоискПоШтрихкоду , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("Номенклатура") Тогда
		ДобавитьНоменклатуруНаСервере(Результат, УникальныйИдентификатор);
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("НомерСтроки") Тогда
			Элементы.Товары.ТекущаяСтрока = Неопределено;
			Элементы.Товары.ТекущаяСтрока = Результат.НомерСтроки - 1;
		Конецесли;
	КонецЕсли;
	 
КонецПроцедуры 

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(Результат, УникальныйИдентификатор) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Номенклатура") Тогда
		Номенклатура = Результат.Номенклатура;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекОбъект = ЭтотОбъект.Объект;
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	ТаблицаТовары.Колонки.Добавить("Цена");
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");	
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,
	|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");   
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекОбъект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество = 1;
	СтрокаТаблицаТовары.Цена = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТаблицаТовары.ЕдиницаИзмерения = ?(СведенияОНоменклатуре = Неопределено, Неопределено, СведенияОНоменклатуре.БазоваяЕдиницаИзмерения);
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, УникальныйИдентификатор));
	
	Если Результат.Свойство("Штрихкод") Тогда
		Значение.Вставить("Штрихкод", Результат.Штрихкод);	
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(Значение, "Товары");

	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") И Значение.Свойство("НомерСтроки") Тогда
		Результат.Вставить("НомерСтроки", Значение.НомерСтроки);
	Конецесли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры   

#КонецОбласти    


#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или НЕ ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;                                                                                     
	
	ИмяТЧ = "Товары";
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных,ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных, ИмяТЧ)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НоменклатураБезЦены = ЗагруженныеДанные.Скопировать(Новый Структура("Цена", 0), "Номенклатура");
	Если НоменклатураБезЦены.Количество() > 0 Тогда 
		
		СписокНоменклатуры = НоменклатураБезЦены.ВыгрузитьКолонку("Номенклатура");
		Если ЭтаФорма.ИспользоватьТипыЦен И ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, Объект.ТипЦен, Объект.Дата, Объект.Организация);
		Иначе
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатурыДокументов(
				СписокНоменклатуры, Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ИсключаемыеДанные = Новый Массив;
	
	Для Каждого ЗагруженнаяСтрока Из ЗагруженныеДанные Цикл 
		
		НоменклатураСсылка = ЗагруженнаяСтрока.Номенклатура;
		
		Если ИмяТЧ="Товары" И НоменклатураСсылка.Услуга ИЛИ ИмяТЧ="Услуги" И НЕ НоменклатураСсылка.Услуга Тогда	
			ИсключаемыеДанные.Добавить(НоменклатураСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ЗагруженнаяСтрока.Цена = 0 Тогда 
			СведенияОЦенеНоменклатуры = ЦеныНоменклатуры.Найти(ЗагруженнаяСтрока.Номенклатура, "Номенклатура");
			Если СведенияОЦенеНоменклатуры <> Неопределено Тогда
				ЗагруженнаяСтрока.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
					СведенияОЦенеНоменклатуры.Цена,
					СведенияОЦенеНоменклатуры.Валюта, Объект.ВалютаДокумента,
					СведенияОЦенеНоменклатуры.Курс, Объект.КурсВзаиморасчетов,
					СведенияОЦенеНоменклатуры.Кратность, Объект.КратностьВзаиморасчетов);
				
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ЗагруженнаяСтрока);
			
	КонецЦикла;
	
	ТекстИсключаемыеЭлементы = "";
	
	Для Каждого ИсключаемыйЭлемент Из ИсключаемыеДанные Цикл 	
		
		ИсключаемаяСтрокаТаблицы = ЗагруженныеДанные.Найти(ИсключаемыйЭлемент, "Номенклатура");
		
		Если ИсключаемаяСтрокаТаблицы <> Неопределено Тогда
			ЗагруженныеДанные.Удалить(ИсключаемаяСтрокаТаблицы); 
			ТекстИсключаемыеЭлементы = ТекстИсключаемыеЭлементы + Символы.ПС + ИсключаемыйЭлемент.Наименование;
		Иначе
			ИсключаемыйИндекс = ИсключаемыеДанные.Найти(ИсключаемыйЭлемент);
			ИсключаемыеДанные.Удалить(ИсключаемыйИндекс);
		КонецЕсли; 
				
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
		ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(СтруктураЗагруженныхДанных, ИмяТЧ);
	
	Сообщение = Новый СообщениеПользователю; 
	Если ИмяТЧ="Товары" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""ТМЗ"" добавлено товаров: %1, исключено услуг: %2'"), 
								ЗагруженныеДанные.Количество(),  
								ИсключаемыеДанные.Количество());	
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""Услуги"" добавлено услуг: %1, исключено товаров: %2'"), 
						ЗагруженныеДанные.Количество(),  
						ИсключаемыеДанные.Количество());
	КонецЕсли;
	
	
	Если ИсключаемыеДанные.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ":";
		ТекстСообщения = ТекстСообщения + ТекстИсключаемыеЭлементы; 
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
 	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетНаОплатуПокупателю.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка товаров из файла'");
	
	ДополнительныеПараметры = Новый Структура();  
	ДополнительныеПараметры.Вставить("ИмяТЧ", "Товары");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаУслуги(Команда)
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетНаОплатуПокупателю.Услуги";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка услуг из файла'");
	
	ДополнительныеПараметры = Новый Структура();     
	ДополнительныеПараметры.Вставить("ИмяТЧ", "Услуги");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);
КонецПроцедуры

#КонецОбласти 

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюОбОплатеСчета()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И СтатусДокумента = Перечисления.СтатусОплатыСчета.ОплаченЧастично Тогда
		
		ОплаченнаяСуммаСчета = Документы.СчетНаОплатуПокупателю.ОплаченнаяСуммаСчета(Объект.Организация, Объект.Ссылка);
		ОжидаетсяОплата = Макс(0, Объект.СуммаДокумента - ОплаченнаяСуммаСчета);
		
		Если ОплаченнаяСуммаСчета <> 0 Тогда
									
			ТекстОплачено = НСтр("ru = 'Оплачено: '");
			
			ШаблонСтроки = НСтр("ru = '%1 %2'");

			ТекстОплаченоСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				Формат(ОплаченнаяСуммаСчета, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				Объект.ВалютаДокумента);
			
		КонецЕсли;
		
		Если ОжидаетсяОплата <> 0 Тогда 
			
			ТекстОжидаетсяОплата = НСтр("ru = 'Ожидается к оплате: '");
			
			ШаблонСтроки = НСтр("ru = '%1 %2'");
			
			ТекстОжидаетсяОплатаСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				Формат(ОжидаетсяОплата, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				Объект.ВалютаДокумента);

		КонецЕсли;
		
	Иначе
		ТекстОплачено = ""; 
		ТекстОплаченоСумма = "";
		ТекстОжидаетсяОплата = "";   
		ТекстОжидаетсяОплатаСумма = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииСтатусДокумента()
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	ЗаполнитьИнформациюОбОплатеСчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСтатусДокумента(ТекущийОбъект.Ссылка);
	
КонецПроцедуры  

&НаСервере
Процедура УстановитьСтатусДокумента(Ссылка)
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = СтатусДокумента;
		
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Ссылка, СтатусыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусаОплаты()
	
	ОтображатьДополнительныеКолонки = ПолучитьФункциональнуюОпцию("ОтображатьСтатусыВСчетахНаОплату");

	Если Элементы.Найти("ГруппаСостояниеОплаты") <> Неопределено Тогда 
		
		Элементы.ГруппаСостояниеОплаты.Видимость = ОтображатьДополнительныеКолонки;
		
	КонецЕсли; 
	
	Если Элементы.Найти("СтатусДокумента") <> Неопределено И ОтображатьДополнительныеКолонки Тогда 
		
		ПозицияТочки = СтрНайти(ЭтотОбъект.ИмяФормы, ".", НаправлениеПоиска.СНачала, 1, 2);
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(ЭтотОбъект.ИмяФормы, ПозицияТочки - 1));
		ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);  
		
		Элементы.СтатусДокумента.Доступность = ЕстьПравоИзмененияСтатусовДокументов;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели() Экспорт
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	СписокТабличныхЧастей.Добавить("ОС", "ОС");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 
