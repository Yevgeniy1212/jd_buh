////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	Иначе 
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьИнвентарныеНомераОС();
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект,,ПрименятьПараметрыАмортизацииВТекМесяце);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ПереоценкаВнеоборотныхАктивов", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""переоценка внеоборотных активов"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовБУПриИзменении(Элемент)
	
	Объект.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДоходовБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовНУ1", "ЗаголовокСубконтоДоходовНУ2", "ЗаголовокСубконтоДоходовНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовНУ, Объект, ПоляФормы);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовБУ1", "ЗаголовокСубконтоДоходовБУ2", "ЗаголовокСубконтоДоходовБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетДоходовБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетДоходовНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
									|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетДоходовБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДоходовБУ, Объект.СчетДоходовНУ, 1, Объект.СубконтоДоходовБУ1, "СубконтоДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", , Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ2ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДоходовБУ, Объект.СчетДоходовНУ, 2, Объект.СубконтоДоходовБУ2, "СубконтоДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДоходовБУ, Объект.СчетДоходовНУ, 3, Объект.СубконтоДоходовБУ3, "СубконтоДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 1, "СчетДоходовБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 2, "СчетДоходовБУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 3, "СчетДоходовБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовБУПриИзменении(Элемент)
	
	Объект.СчетРасходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетРасходовБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовНУ1", "ЗаголовокСубконтоРасходовНУ2", "ЗаголовокСубконтоРасходовНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовНУ, Объект, ПоляФормы);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовБУ1", "ЗаголовокСубконтоРасходовБУ2", "ЗаголовокСубконтоРасходовБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетРасходовБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетРасходовНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоРасходовБУ1, СубконтоРасходовБУ2, СубконтоРасходовБУ3,
									|СубконтоРасходовНУ1, СубконтоРасходовНУ2, СубконтоРасходовНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетРасходовБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ1ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетРасходовБУ, Объект.СчетРасходовНУ, 1, Объект.СубконтоРасходовБУ1, "СубконтоРасходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ2ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетРасходовБУ, Объект.СчетРасходовНУ, 2, Объект.СубконтоРасходовБУ2, "СубконтоРасходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ3ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетРасходовБУ, Объект.СчетРасходовНУ, 3, Объект.СубконтоРасходовБУ3, "СубконтоРасходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовБУ", 1, "СчетРасходовБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовБУ", 2, "СчетРасходовБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовБУ", 3, "СчетРасходовБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовНУ1", "ЗаголовокСубконтоДоходовНУ2", "ЗаголовокСубконтоДоходовНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетДоходовНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетДоходовНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ1ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 1, "СчетДоходовНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 2, "СчетДоходовНУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 3, "СчетДоходовНУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовНУ1", "ЗаголовокСубконтоРасходовНУ2", "ЗаголовокСубконтоРасходовНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетРасходовНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоРасходовНУ1, СубконтоРасходовНУ2, СубконтоРасходовНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетРасходовНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ1ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовНУ", 1, "СчетРасходовНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовНУ", 2, "СчетРасходовНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "СубконтоРасходовНУ", 3, "СчетРасходовНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 И НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ 		 = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	
	РассчитатьОстСтоимостьБУ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияБУПриИзменении(Элемент)
	
	РассчитатьОстСтоимостьБУ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияЗаМесяцБУПриИзменении(Элемент)
	
	РассчитатьОстСтоимостьБУ(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьДляСписка(Команда)
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтруктурноеПодразделениеОрганизация", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.Проведен Тогда 
		ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе! Отменить проведение?'");
		Режим 		 = РежимДиалогаВопрос.ДаНет;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Процедура", "ЗаполнитьДляСпискаНаСервере"); 
		Оповещение 	 = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоОтменеПроведения", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе 
		
		ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		ЗаполнитьДляСпискаНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru='ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();
					
	ТаблицаНомеров = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьТаблицуИнвентарныхНомеровОС(
		ТаблицаОС,
		Объект.Организация,
		Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)
	
	Возврат УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ОсновноеСредство, Организация, Дата);

КонецФункции

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
		
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект,,ПрименятьПараметрыАмортизацииВТекМесяце);

	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
		
	ПоказыватьВДокументахСчетаУчета				 = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.СобытиеОС) Тогда
				Объект.СобытиеОС = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Переоценка);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.МетодПереоценки) Тогда
				Объект.МетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.ПропорциональнаяПереоценкаНакопленнойАмортизации;
			КонецЕсли;
			
			//Заполняем по умолчанию счета дходов и расходов от переоценки ОС
			//счета доходов
			Если НЕ ЗначениеЗаполнено(Объект.СчетДоходовБУ) Тогда
				
				Объект.СчетДоходовБУ 	  = ПланыСчетов.Типовой.ДоходыОтВосстановленияУбыткаОтОбесценения;
				Объект.СубконтоДоходовБУ1 = Справочники.Доходы.ДоходыОтПереоценкиВнеоборотныхАктивов;
				
					
				ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
					"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовБУ, Объект, ПоляФормы);

				Если НЕ ЗначениеЗаполнено(Объект.СчетДоходовНУ) Тогда
			    	Объект.СчетДоходовНУ	  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДоходовБУ));
					Объект.СубконтоДоходовНУ1 = Справочники.Доходы.ДоходыОтПереоценкиВнеоборотныхАктивов;
					
					ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
						"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
					ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовНУ, Объект, ПоляФормы);

				КонецЕсли;
				
			КонецЕсли;
			
			//счета расходов
			Если НЕ ЗначениеЗаполнено(Объект.СчетРасходовБУ) Тогда
				
				Объект.СчетРасходовБУ 	   = ПланыСчетов.Типовой.РасходыОтОбесцененияАктивов;
				Объект.СубконтоРасходовБУ1 = Справочники.СтатьиЗатрат.РасходыПоПереоценкеВнеоборотныхАктивов;						 
				
				ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
					"СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
				
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовБУ, Объект, ПоляФормы);

				Если НЕ ЗначениеЗаполнено(Объект.СчетРасходовНУ) Тогда
			    	Объект.СчетРасходовНУ 	   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетРасходовБУ));
					Объект.СубконтоРасходовНУ1 = Справочники.СтатьиЗатрат.РасходыПоПереоценкеВнеоборотныхАктивов;						 
					
					ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
						"СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
					
					ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовНУ, Объект, ПоляФормы);

				КонецЕсли;
				
			КонецЕсли;
			
			//по умолчанию, переоценка не отражается в налоговом учете
			Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
						
		КонецЕсли;
	
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовБУ1", "ЗаголовокСубконтоДоходовБУ2", "ЗаголовокСубконтоДоходовБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетДоходовБУ, ПоляФормы, ЗаголовкиПолей);
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовБУ1", "ЗаголовокСубконтоРасходовБУ2", "ЗаголовокСубконтоРасходовБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетРасходовБУ, ПоляФормы, ЗаголовкиПолей);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовНУ1", "ЗаголовокСубконтоДоходовНУ2", "ЗаголовокСубконтоДоходовНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетДоходовНУ, ПоляФормы, ЗаголовкиПолей);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовНУ1", "ЗаголовокСубконтоРасходовНУ2", "ЗаголовокСубконтоРасходовНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетРасходовНУ, ПоляФормы, ЗаголовкиПолей);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость 		 = Объект.УчитыватьКПН;
	Элементы.ГруппаОтражениеНУ.Видимость = Объект.УчитыватьКПН;
    
    Элементы.ГруппаСчетаДоходовРасходов.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетДоходовБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        ДанныеОбъекта.СубконтоДоходовБУ1, ДанныеОбъекта.СубконтоДоходовБУ2, ДанныеОбъекта.СубконтоДоходовБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        ДанныеОбъекта.СубконтоДоходовНУ1, ДанныеОбъекта.СубконтоДоходовНУ2, ДанныеОбъекта.СубконтоДоходовНУ3));
															
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "", ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  		  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  		  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", 		  ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаСервереБезКонтекста
Процедура СчетРасходовБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3", 
	                                                        ДанныеОбъекта.СубконтоРасходовБУ1, ДанныеОбъекта.СубконтоРасходовБУ2, ДанныеОбъекта.СубконтоРасходовБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3", 
	                                                        ДанныеОбъекта.СубконтоРасходовНУ1, ДанныеОбъекта.СубконтоРасходовНУ2, ДанныеОбъекта.СубконтоРасходовНУ3));
															
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетДоходовНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        ДанныеОбъекта.СубконтоДоходовНУ1, ДанныеОбъекта.СубконтоДоходовНУ2, ДанныеОбъекта.СубконтоДоходовНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетРасходовНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3", 
	                                                        ДанныеОбъекта.СубконтоРасходовНУ1, ДанныеОбъекта.СубконтоРасходовНУ2, ДанныеОбъекта.СубконтоРасходовНУ3));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, СписокТабличныхЧастей = "ОС", ПрименятьПараметрыАмортизацииВТекМесяце)

	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "Всего"
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			
			АмортизацияЗаМесяц 					= ?(ПрименятьПараметрыАмортизацииВТекМесяце, 0, СтрокаТаблицы.АмортизацияЗаМесяцБУ);
			СтрокаТаблицы.ОстаточнаяСтоимостьБУ = СтрокаТаблицы.СтоимостьБУ - СтрокаТаблицы.АмортизацияБУ - АмортизацияЗаМесяц;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОстСтоимостьБУ(Элемент)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;

	АмортизацияЗаМесяц 					= ?(ПрименятьПараметрыАмортизацииВТекМесяце, 0, СтрокаТаблицы.АмортизацияЗаМесяцБУ);
	СтрокаТаблицы.ОстаточнаяСтоимостьБУ = СтрокаТаблицы.СтоимостьБУ - СтрокаТаблицы.АмортизацияБУ - АмортизацияЗаМесяц;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УправлениеВнеоборотнымиАктивамиСервер.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма" , Форма);
	Результат.Вставить("Объект", Форма.Объект);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоОтменеПроведения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда

		Запись = Новый Структура;
		Запись.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	
		ЭтотОбъект.Записать(Запись);
		
		Если Параметры.Процедура = "ЗаполнитьДляСпискаНаСервере" Тогда 
			
			ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

			ЗаполнитьДляСпискаНаСервере();
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаНаСервере()
	
	Документы.ПереоценкаВнеоборотныхАктивов.ЗаполнитьТабличнуюЧастьДляСпискаОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями, ПрименятьПараметрыАмортизацииВТекМесяце);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект,,ПрименятьПараметрыАмортизацииВТекМесяце);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	ЗаполнитьИнвентарныеНомераОС();

	УстановитьФункциональныеОпцииФормы();
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовБУ", "СчетРасходовБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "РасходовНУ", "СчетРасходовНУ");
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ДоходовБУ"); 
	СписокАналитикиСчетовШапки.Добавить("РасходовБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ДоходовНУ"); 
	СписокАналитикиСчетовШапки.Добавить("РасходовНУ"); 
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , , СтруктураРеквизитовШапки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы="")
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство - %1 уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "ОС[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПереоцененнаяСтоимостьБУ");
	СтруктураРеквизитов.Вставить("ЛиквидационнаяСтоимостьБУ");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ИмяТабличнойЧасти, ПрименятьПараметрыАмортизацииВТекМесяце);
		
	Модифицированность = Истина;
	
КонецПроцедуры

