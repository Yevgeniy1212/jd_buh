// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	
	ТЧСправка = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	////
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Запрос.Текст =		"ВЫБРАТЬ
	//              		|	ДанныеДляСопоставления.СоответствиеАгрегатов КАК СоответствиеАгрегатов,
	//              		|	ДанныеДляСопоставления.Участок КАК Участок,
	//              		|	ДанныеДляСопоставления.Агрегат КАК Агрегат,
	//              		|	ДанныеДляСопоставления.ВидСкважины КАК ВидСкважины,
	//              		|	ДанныеДляСопоставления.НомерСкважины КАК НомерСкважины,
	//              		|	ДанныеДляСопоставления.ПробуреноСкв КАК ПробуреноСкв,
	//              		|	ДанныеДляСопоставления.ПробуреноПМ КАК ПробуреноПМ,
	//              		|	ДанныеДляСопоставления.АктированоСкв КАК АктированоСкв,
	//              		|	ДанныеДляСопоставления.АктированоПМ КАК АктированоПМ,
	//              		|	ДанныеДляСопоставления.Заказчик КАК Заказчик,
	//              		|	ДанныеДляСопоставления.УчастокПодразделение КАК УчастокПодразделение
	//              		|ПОМЕСТИТЬ ДанныеДляСопоставления
	//              		|ИЗ
	//              		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	//              		|;
	//              		|
	//              		|////////////////////////////////////////////////////////////////////////////////
	//              		|ВЫБРАТЬ
	//              		|	ДанныеДляСопоставления.СоответствиеАгрегатов КАК СоответствиеАгрегатов,
	//              		|	ДанныеДляСопоставления.Участок КАК Участок,
	//              		|	ДанныеДляСопоставления.Агрегат КАК Агрегат,
	//              		|	ДанныеДляСопоставления.ВидСкважины КАК ВидСкважины,
	//              		|	ДанныеДляСопоставления.НомерСкважины КАК НомерСкважины,
	//              		|	ДанныеДляСопоставления.ПробуреноСкв КАК ПробуреноСкв,
	//              		|	ДанныеДляСопоставления.ПробуреноПМ КАК ПробуреноПМ,
	//              		|	ДанныеДляСопоставления.АктированоСкв КАК АктированоСкв,
	//              		|	ДанныеДляСопоставления.АктированоПМ КАК АктированоПМ,
	//              		|	ДанныеДляСопоставления.Заказчик КАК Заказчик,
	//              		|	ДанныеДляСопоставления.УчастокПодразделение КАК УчастокПодразделение
	//              		|ИЗ
	//              		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления";
	
	//Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	//РезультатыЗапросов = Запрос.Выполнить(); // Массив из РезультатЗапроса
	//                                   
	
	
	//ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить();
	//ФункциональнаяОпцияХарактеристика = ?(ЗагружаемыеДанные.Колонки.Найти("Характеристика") <> Неопределено, Истина, Ложь);
	Для каждого СтрокаТЗ Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТЧСправка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.СоответствиеАгрегатов = Справочники.КТ_СоответствиеАгрегатов.НайтиПоНаименованию(СтрокаТЗ.СоответствиеАгрегатов);    
		НоваяСтрока.Агрегат = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(СтрокаТЗ.Агрегат,,, ДополнительныеПараметры.Организация);
		//++Кибернетика Беляев Е.И. 16.07.2024 Добавили вид бурения для загрузчика
		НоваяСтрока.ВидБурения = ПолучитьЗначениеКиб_ВидыБуренияыПоСинониму(СтрокаТЗ.ВидБурения);
		//--Кибернетика Беляев Е.И. 16.07.2024 Добавили вид бурения для загрузчика
		НоваяСтрока.УчастокПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(СтрокаТЗ.УчастокПодразделение,,,ДополнительныеПараметры.Организация);
		НоваяСтрока.Участок = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(СтрокаТЗ.Участок,,, ДополнительныеПараметры.Организация);    
		НоваяСтрока.Заказчик = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЗ.Заказчик);
        НоваяСтрока.ВидСкважины = ПолучитьЗначениеВидаСкважиныПоСинониму(СтрокаТЗ.ВидСкважины);
		
		
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЧСправка, АдресТаблицыСопоставления);
	
КонецПроцедуры


Функция ПолучитьЗначениеВидаСкважиныПоСинониму(Значение)
    ЭлементПеречисления = Неопределено;
    Для каждого ТекЭлемент Из Метаданные.Перечисления.ВидыПродукции.ЗначенияПеречисления Цикл
        Если ТекЭлемент.Синоним = Значение Тогда
            ЭлементПеречисления = Перечисления.ВидыПродукции[ТекЭлемент.Имя];
            Прервать;
        КонецЕсли;
    КонецЦикла; 
    
    Возврат ЭлементПеречисления; // возвращаем значение перечисления или Неопределено
 КонецФункции 

//++Кибернетика Беляев Е.И. 16.07.2024 Добавили вид бурения для загрузчика
Функция ПолучитьЗначениеКиб_ВидыБуренияыПоСинониму(Значение)
    ЭлементПеречисления = Неопределено;
    Для каждого ТекЭлемент Из Метаданные.Перечисления.киб_ВидыБурения.ЗначенияПеречисления Цикл
        Если ТекЭлемент.Синоним = Значение Тогда
            ЭлементПеречисления = Перечисления.киб_ВидыБурения[ТекЭлемент.Имя];
            Прервать;
        КонецЕсли;
    КонецЦикла; 
    
    Возврат ЭлементПеречисления; // возвращаем значение перечисления или Неопределено
 КонецФункции 
//--Кибернетика Беляев Е.И. 16.07.2024 Добавили вид бурения для загрузчика
  
// Устанавливает параметры загрузки.
//
// Параметры:
//  Параметры - Структура - Параметры загрузки данных из файла.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка._ДемоНоменклатура - массив для заполнения с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		//Запрос = Новый Запрос;
		//
		//ТекстГде = "";
		//Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Номенклатура) Тогда
		//	ТекстГде = "ГДЕ _ДемоНоменклатура.Наименование = &Наименование";
		//	Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		//КонецЕсли;
		//	
		//Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Штрихкод) Тогда
		//	Если ЗначениеЗаполнено(ТекстГде) Тогда
		//		ТекстГде = ТекстГде + " ИЛИ _ДемоНоменклатура.Штрихкод = &Штрихкод";
		//	Иначе
		//		ТекстГде = "ГДЕ _ДемоНоменклатура.Штрихкод = &Штрихкод";
		//	КонецЕсли;
		//	Запрос.УстановитьПараметр("Штрихкод", ЗагружаемыеЗначенияСтрока.Штрихкод);
		//КонецЕсли;
		//
		//Запрос.Текст = "ВЫБРАТЬ
		//	|	_ДемоНоменклатура.Ссылка
		//	|ИЗ
		//	|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура " + ТекстГде;
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		//КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


