
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		УстановитьКомментарий();
	КонецЕсли;
				      
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КТ_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, , , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);	
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		Объект.Организация = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(Объект.Организация, Объект.Организация,);
		Если Результат.ИзмененаОрганизация Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
 Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
    
    Если СтруктураПараметров = Неопределено
        ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта")
                И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда
        РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(Объект.Организация, Объект.Организация,, СтруктураПараметров);
        УстановитьФункциональныеОпцииФормы();
    КонецЕсли;
  
КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарий()

	Объект.Комментарий = "Закрытие группы счетов 8000 за " + Формат( Объект.Дата, "ДФ='ММММ гггг'");

КонецПроцедуры // УстановитьКомментарий()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗакрытиеМесяца");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаКонецМесяца = КонецМесяца(Объект.Дата);
	
	Если День(Объект.Дата) <> День(ДатаКонецМесяца) Тогда
		Объект.Дата = НачалоДня(ДатаКонецМесяца);
	//	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;

	// Изменение времени не влияет на поведение документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
		// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	УстановитьКомментарий();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаСервере
Процедура ЗаполнитьДанныеНаСервере()
	
	Объект.Данные.Очистить();
	
	ЗапросОстаткиНаСчетах = новый Запрос;
	ЗапросОстаткиНаСчетах.Текст = "ВЫБРАТЬ
	|	ТиповойОстаткиИОбороты.Счет,
	|	ТиповойОстаткиИОбороты.Субконто1,
	|	ТиповойОстаткиИОбороты.Субконто2,
	|	ТиповойОстаткиИОбороты.Субконто3,
	|	ВЫБОР
	|		КОГДА &КредитовыйОборот
	|			ТОГДА ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0)
	|	КОНЕЦ КАК СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Период, , Счет = &ТекСчетЗакрытия, , ) КАК ТиповойОстаткиИОбороты
	|
	|   УПОРЯДОЧИТЬ ПО
	|	  Субконто1";
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНач));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	
	Для каждого Стр Из Объект.ПорядокСчетов Цикл
		Если Стр.ТолькоРасчет Тогда
			продолжить;
		КонецЕсли;
		
		ТекСчетДт       = Стр.СчетЗакрытияДт;
		ТекСчетЗакрытия = Стр.СчетЗакрытияКт;
		ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия"  , ТекСчетЗакрытия);
		ЗапросОстаткиНаСчетах.УстановитьПараметр("КредитовыйОборот" , Стр.КредитовыйОборот);   
		
		Если Стр.ВедущийСчетДт Тогда   
			ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия", ТекСчетДт);
		КонецЕсли;
		
		ВыборкаОстаткиНаСчетах = ЗапросОстаткиНаСчетах.Выполнить().Выбрать();
		Пока ВыборкаОстаткиНаСчетах.Следующий() Цикл
			Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 Тогда
				новСтр             = Объект.Данные.Добавить();
				новСтр.СчетДт      = ТекСчетДт;
				новСтр.СубконтоДт1 = Стр.СубконтоЗакрытияДт1;                      
				новСтр.СубконтоДт2 = Стр.СубконтоЗакрытияДт2;
				новСтр.СубконтоДт3 = Стр.СубконтоЗакрытияДт3;
				
				Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
					найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
					Если найдСтрСубДт <> Неопределено Тогда
						НС = найдСтрСубДт.НомерСтроки;
						новСтр["СубконтоДт" + НС] = ВыборкаОстаткиНаСчетах["Субконто" + субКт.НомерСтроки];
					КонецЕсли;
				КонецЦикла;
				
				новСтр.СчетКт      = ТекСчетЗакрытия;
				новСтр.СубконтоКт1 = ВыборкаОстаткиНаСчетах.Субконто1;
				новСтр.СубконтоКт2 = ВыборкаОстаткиНаСчетах.Субконто2;
				новСтр.СубконтоКт3 = ВыборкаОстаткиНаСчетах.Субконто3;
				новСтр.Сумма       = ВыборкаОстаткиНаСчетах.СуммаОборот;
				
				новСтр.ЕстьПроводки = ?(Стр.ВедущийСчетДт, ложь, Стр.КредитовыйОборот);
			КонецЕсли;
		КонецЦикла;                                             
	КонецЦикла;
	
	ТЗ = Объект.Данные.Выгрузить();
	ТЗ.Свернуть("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3", "Сумма");
	
	//**********************7010,7710
	Для каждого Стр_ПС Из Объект.ПорядокСчетов Цикл
		Если НЕ Стр_ПС.ИзТаблицы Тогда
			продолжить;
		КонецЕсли;
		
		ТекСчетДт       = Стр_ПС.СчетЗакрытияДт;
		ТекСчетЗакрытия = Стр_ПС.СчетЗакрытияКт;
		
		///собираем Дт в тбДанные и дополняем проводки
		Отбор = новый Структура("СчетДт", ТекСчетЗакрытия);
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
		Для каждого СтрНайденная Из НайденныеСтроки Цикл
			Если СтрНайденная.Сумма <> 0 Тогда
				новСтр             = Объект.Данные.Добавить();
				новСтр.СчетДт      = ТекСчетДт;
				новСтр.СубконтоДт1 = Стр_ПС.СубконтоЗакрытияДт1;
				новСтр.СубконтоДт2 = Стр_ПС.СубконтоЗакрытияДт2;
				новСтр.СубконтоДт3 = Стр_ПС.СубконтоЗакрытияДт3;
				
				Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
					найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
					Если найдСтрСубДт <> Неопределено Тогда
						НС = найдСтрСубДт.НомерСтроки;
						новСтр["СубконтоДт" + НС] = СтрНайденная["СубконтоДт" + субКт.НомерСтроки];
					КонецЕсли;
				КонецЦикла;
				
				новСтр.СчетКт      = ТекСчетЗакрытия;
				новСтр.СубконтоКт1 = СтрНайденная.СубконтоДт1;
				новСтр.СубконтоКт2 = СтрНайденная.СубконтоДт2;
				новСтр.СубконтоКт3 = СтрНайденная.СубконтоДт3;
				новСтр.Сумма       = СтрНайденная.Сумма;
				новСтр.Содержание  = "Расчет по таблице";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределениеКосвенныхЗатрат()
	
	Объект.Данные.Очистить();
	
	ЗапросПоУчасткам = Новый Запрос;
	ЗапросПоУчасткам.Текст =  "ВЫБРАТЬ
	                          |	КТ_РаспределениеРаспределение.Участок КАК УБР,
	                       //   |	КТ_РаспределениеРаспределение.СоответствиеАгрегатов КАК СоответствиеАгрегатов,
	                          |	КТ_РаспределениеРаспределение.Агрегат КАК Агрегат,
	                          |	СУММА(КТ_РаспределениеРаспределение.Количество) КАК Количество
	                          |ИЗ
	                          |	Документ.КТ_Распределение.Распределение КАК КТ_РаспределениеРаспределение
	                          |ГДЕ
	                          |	КТ_РаспределениеРаспределение.Ссылка.Организация = &Организация
	                          |	И КТ_РаспределениеРаспределение.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	                          |	И КТ_РаспределениеРаспределение.Ссылка.Проведен
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	КТ_РаспределениеРаспределение.Участок,
	                      //    |	КТ_РаспределениеРаспределение.СоответствиеАгрегатов,
	                          |	КТ_РаспределениеРаспределение.Агрегат";
	ЗапросПоУчасткам.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросПоУчасткам.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.ДатаНач));
	ЗапросПоУчасткам.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.ДатаНач));
	ТЗПоУчасткам = ЗапросПоУчасткам.Выполнить().Выгрузить();
	
	СписокУчастков = Новый СписокЗначений;
	ТЗ_УБР = ТЗПоУчасткам.Скопировать();
	ТЗ_УБР.Свернуть("УБР");
	Для Каждого Стр Из ТЗ_УБР Цикл
		СписокУчастков.Добавить(Стр.УБР);
	КонецЦикла;

	ТЗ_УБР_Итог = ТЗПоУчасткам.Скопировать();
	ТЗ_УБР_Итог.Свернуть("УБР", "Количество");
	
	ЗапросОстаткиНаСчетах = новый Запрос;
	ЗапросОстаткиНаСчетах.Текст = "ВЫБРАТЬ
	                              |	Затраты.Счет КАК Счет,
	                              |	Затраты.Субконто1 КАК Субконто1,
	                              |	Затраты.Субконто2 КАК Субконто2,
	                              |	Затраты.Субконто3 КАК Субконто3,
	                              |	Затраты.СуммаОборот КАК СуммаОборот,
	                              |	Затраты.Группировка КАК Группировка,
	                              |	Затраты.ГруппировкаРаспределятьПоБурению КАК РаспределятьПоБурению,
	                              |	Затраты.ГруппировкаУчавствуетВРаспределении КАК УчавствуетВРаспределении,
	                              |	Распределение.Участок КАК УБР
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ТиповойОстаткиИОбороты.Счет КАК Счет,
	                              |		ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1,
	                              |		ТиповойОстаткиИОбороты.Субконто2 КАК Субконто2,
	                              |		ТиповойОстаткиИОбороты.Субконто3 КАК Субконто3,
	                              |		ВЫБОР
	                              |			КОГДА &КредитовыйОборот
	                              |				ТОГДА ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0)
	                              |			ИНАЧЕ ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0)
	                              |		КОНЕЦ КАК СуммаОборот,
	                              |		ОтчетПФА_СоставГруппировокПодразделений.Группировка КАК Группировка,
	                              |		ОтчетПФА_СоставГруппировокПодразделений.Группировка.РаспределятьПоБурению КАК ГруппировкаРаспределятьПоБурению,
	                              |		ОтчетПФА_СоставГруппировокПодразделений.Группировка.УчавствуетВРаспределении КАК ГруппировкаУчавствуетВРаспределении
	                              |	ИЗ
	                              |		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Период, , Счет = &ТекСчетЗакрытия, , ) КАК ТиповойОстаткиИОбороты
	                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчетПФА_СоставГруппировокПодразделений КАК ОтчетПФА_СоставГруппировокПодразделений
	                              |			ПО ТиповойОстаткиИОбороты.Субконто1 = ОтчетПФА_СоставГруппировокПодразделений.Подразделение) КАК Затраты
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			КТ_РаспределениеРаспределение.Участок КАК Участок,
	                              |			ОтчетПФА_СоставГруппировокПодразделений.Группировка КАК Группировка
	                              |		ИЗ
	                              |			Документ.КТ_Распределение.Распределение КАК КТ_РаспределениеРаспределение
	                              |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчетПФА_СоставГруппировокПодразделений КАК ОтчетПФА_СоставГруппировокПодразделений
	                              |				ПО КТ_РаспределениеРаспределение.Участок = ОтчетПФА_СоставГруппировокПодразделений.Подразделение
	                              |		ГДЕ
	                              |			КТ_РаспределениеРаспределение.Ссылка.Организация = &Организация
	                              |			И КТ_РаспределениеРаспределение.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И КТ_РаспределениеРаспределение.Ссылка.Проведен
	                              |		
	                              |		СГРУППИРОВАТЬ ПО
	                              |			КТ_РаспределениеРаспределение.Участок,
	                              |			ОтчетПФА_СоставГруппировокПодразделений.Группировка) КАК Распределение
	                              |		ПО Затраты.Группировка = Распределение.Группировка";
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаНач"    , НачалоДня(Объект.ДатаНач));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаКон"    , КонецДня(Объект.Дата));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("Организация", Объект.Организация);
	
	Для каждого Стр Из Объект.ПорядокСчетов Цикл
		Если Стр.СчетЗакрытияКт <> ПланыСчетов.Типовой.ОсновноеПроизводство Тогда
			ТекСчетДт       = Стр.СчетЗакрытияДт;
			ТекСчетЗакрытия = Стр.СчетЗакрытияКт;
			ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия" , ТекСчетЗакрытия);
			ЗапросОстаткиНаСчетах.УстановитьПараметр("КредитовыйОборот", Стр.КредитовыйОборот);   
			
			ВыборкаОстаткиНаСчетах = ЗапросОстаткиНаСчетах.Выполнить().Выбрать();
			Пока ВыборкаОстаткиНаСчетах.Следующий() Цикл
				Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 Тогда
				/////Распределять по всем УБР				
					Если ВыборкаОстаткиНаСчетах.РаспределятьПоБурению Тогда
						ОстатокСуммыКРаспределению = ВыборкаОстаткиНаСчетах.СуммаОборот;
						//СуммаКРаспределениюПоКолУБР = Окр(ВыборкаОстаткиНаСчетах.СуммаОборот/СписокУчастков.Количество(), 2);
						СуммаКРаспределениюПоКолУБР = ВыборкаОстаткиНаСчетах.СуммаОборот/СписокУчастков.Количество();
						Для Каждого СтрУБР Из ТЗ_УБР_Итог Цикл
							НайденУчасток = ТЗПоУчасткам.НайтиСтроки(Новый Структура("УБР", СтрУБР.УБР));
							Если НайденУчасток.Количество()>0 Тогда
								//СуммаКРаспределению = Окр(СуммаКРаспределениюПоКолУБР/СтрУБР.Количество, 2);
								СуммаКРаспределению = СуммаКРаспределениюПоКолУБР/СтрУБР.Количество;

								ДобавитьСтроки(Объект, ТекСчетДт, НайденУчасток, ТекСчетЗакрытия, ВыборкаОстаткиНаСчетах, ОстатокСуммыКРаспределению, Стр, СуммаКРаспределению);
							КонецЕсли;
						КонецЦикла;
					/////Распределять по конкретному УБР					
					ИначеЕсли ВыборкаОстаткиНаСчетах.УчавствуетВРаспределении Тогда
						НайденУчасток = ТЗПоУчасткам.НайтиСтроки(Новый Структура("УБР", ВыборкаОстаткиНаСчетах.УБР));
						НайденУчасток_Итог = ТЗ_УБР_Итог.Найти(ВыборкаОстаткиНаСчетах.УБР, "УБР");
						Если НайденУчасток_Итог<>Неопределено И НайденУчасток.Количество()>0 Тогда
							ОстатокСуммыКРаспределению = ВыборкаОстаткиНаСчетах.СуммаОборот;
							//СуммаКРаспределению = Окр(ВыборкаОстаткиНаСчетах.СуммаОборот/НайденУчасток_Итог.Количество, 2);
							СуммаКРаспределению = ВыборкаОстаткиНаСчетах.СуммаОборот/НайденУчасток_Итог.Количество;
							
							ДобавитьСтроки(Объект, ТекСчетДт, НайденУчасток, ТекСчетЗакрытия, ВыборкаОстаткиНаСчетах, ОстатокСуммыКРаспределению, Стр, СуммаКРаспределению);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтроки(Объект, ТекСчетДт, НайденУчасток, ТекСчетЗакрытия, ВыборкаОстаткиНаСчетах, ОстатокСуммыКРаспределению, Стр, СуммаКРаспределению)
	
	Для Каждого СтрР Из НайденУчасток Цикл
		новСтр             = Объект.Данные.Добавить();
		новСтр.СчетДт      = ТекСчетДт;
		
		новСтр.СубконтоДт1 = СтрР.Агрегат;                      
		новСтр.СубконтоДт2 = Стр.СубконтоЗакрытияДт2;
		новСтр.СубконтоДт3 = Стр.СубконтоЗакрытияДт3;
		
		Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
			найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
			Если найдСтрСубДт <> Неопределено И Строка(ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто").ВидСубконто) = "Статьи затрат" Тогда
				НС = найдСтрСубДт.НомерСтроки;
				новСтр["СубконтоДт" + НС] = ВыборкаОстаткиНаСчетах["Субконто" + субКт.НомерСтроки];
			КонецЕсли;
		КонецЦикла;
		
		новСтр.СчетКт      = ТекСчетЗакрытия;
		новСтр.СубконтоКт1 = ВыборкаОстаткиНаСчетах.Субконто1;
		новСтр.СубконтоКт2 = ВыборкаОстаткиНаСчетах.Субконто2;
		новСтр.СубконтоКт3 = ВыборкаОстаткиНаСчетах.Субконто3;
		
		Если ОстатокСуммыКРаспределению > 0 Тогда
			новСтр.Сумма       = ?((ОстатокСуммыКРаспределению - Окр(СуммаКРаспределению*СтрР.Количество, 2))<0.2, ОстатокСуммыКРаспределению, Окр(СуммаКРаспределению*СтрР.Количество, 2));
			ОстатокСуммыКРаспределению = ОстатокСуммыКРаспределению - новСтр.Сумма; //Окр(СуммаКРаспределению*СтрР.Количество, 2);
		Иначе
			новСтр.Сумма       = ?((ОстатокСуммыКРаспределению - Окр(СуммаКРаспределению*СтрР.Количество, 2))>(-0.2), ОстатокСуммыКРаспределению, Окр(СуммаКРаспределению*СтрР.Количество, 2));
			ОстатокСуммыКРаспределению = ОстатокСуммыКРаспределению - новСтр.Сумма; //Окр(СуммаКРаспределению*СтрР.Количество, 2);
		КонецЕсли;
		
		новСтр.ЕстьПроводки = ?(Стр.ВедущийСчетДт, ложь, Стр.КредитовыйОборот);
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ЗаполнитьОстаткиНаСервере()
	
	Объект.Данные.Очистить();
	
	ЗапросОстаткиНаСчетах = новый Запрос;
	ЗапросОстаткиНаСчетах.Текст = "ВЫБРАТЬ
	                              |	ТиповойОстаткиИОбороты.Счет,
	                              |	ТиповойОстаткиИОбороты.Субконто1,
	                              |	ТиповойОстаткиИОбороты.Субконто2,
	                              |	ТиповойОстаткиИОбороты.Субконто3,
	                              |	ВЫБОР
	                              |		КОГДА &КредитовыйОборот
	                              |			ТОГДА ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт, 0)
	                              |		ИНАЧЕ ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт, 0)
	                              |	КОНЕЦ КАК СуммаОборот
	                              |ИЗ
	                              |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаКон, &ДатаКон, , , Счет = &ТекСчетЗакрытия, , ) КАК ТиповойОстаткиИОбороты
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ТиповойОстаткиИОбороты.Субконто1";
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНач));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	
	Для каждого Стр Из Объект.ПорядокСчетов Цикл
		Если Стр.ТолькоРасчет Тогда
			продолжить;
		КонецЕсли;
		
		ТекСчетДт       = Стр.СчетЗакрытияДт;
		ТекСчетЗакрытия = Стр.СчетЗакрытияКт;
		ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия"  , ТекСчетЗакрытия);
		ЗапросОстаткиНаСчетах.УстановитьПараметр("КредитовыйОборот" , Стр.КредитовыйОборот);   
		
		Если Стр.ВедущийСчетДт Тогда   
			ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия", ТекСчетДт);
		КонецЕсли;
		
		ВыборкаОстаткиНаСчетах = ЗапросОстаткиНаСчетах.Выполнить().Выбрать();
		Пока ВыборкаОстаткиНаСчетах.Следующий() Цикл
			Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 Тогда
				новСтр             = Объект.Данные.Добавить();
				новСтр.СчетДт      = ТекСчетДт;
				новСтр.СубконтоДт1 = Стр.СубконтоЗакрытияДт1;                      
				новСтр.СубконтоДт2 = Стр.СубконтоЗакрытияДт2;
				новСтр.СубконтоДт3 = Стр.СубконтоЗакрытияДт3;
				
				Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
					найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
					Если найдСтрСубДт <> Неопределено Тогда
						НС = найдСтрСубДт.НомерСтроки;
						новСтр["СубконтоДт" + НС] = ВыборкаОстаткиНаСчетах["Субконто" + субКт.НомерСтроки];
					КонецЕсли;
				КонецЦикла;
				
				новСтр.СчетКт      = ТекСчетЗакрытия;
				новСтр.СубконтоКт1 = ВыборкаОстаткиНаСчетах.Субконто1;
				новСтр.СубконтоКт2 = ВыборкаОстаткиНаСчетах.Субконто2;
				новСтр.СубконтоКт3 = ВыборкаОстаткиНаСчетах.Субконто3;
				новСтр.Сумма       = ВыборкаОстаткиНаСчетах.СуммаОборот;
				
				новСтр.ЕстьПроводки = ?(Стр.ВедущийСчетДт, ложь, Стр.КредитовыйОборот);
			КонецЕсли;
		КонецЦикла;                                             
	КонецЦикла;
	
	ТЗ = Объект.Данные.Выгрузить();
	ТЗ.Свернуть("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3", "Сумма");
	
	//**********************7010,7710
	Для каждого Стр_ПС Из Объект.ПорядокСчетов Цикл
		Если НЕ Стр_ПС.ИзТаблицы Тогда
			продолжить;
		КонецЕсли;
		
		ТекСчетДт       = Стр_ПС.СчетЗакрытияДт;
		ТекСчетЗакрытия = Стр_ПС.СчетЗакрытияКт;
		
		///собираем Дт в тбДанные и дополняем проводки
		Отбор = новый Структура("СчетДт", ТекСчетЗакрытия);
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
		Для каждого СтрНайденная Из НайденныеСтроки Цикл
			Если СтрНайденная.Сумма <> 0 Тогда
				новСтр             = Объект.Данные.Добавить();
				новСтр.СчетДт      = ТекСчетДт;
				новСтр.СубконтоДт1 = Стр_ПС.СубконтоЗакрытияДт1;
				новСтр.СубконтоДт2 = Стр_ПС.СубконтоЗакрытияДт2;
				новСтр.СубконтоДт3 = Стр_ПС.СубконтоЗакрытияДт3;
				
				Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
					найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
					Если найдСтрСубДт <> Неопределено Тогда
						НС = найдСтрСубДт.НомерСтроки;
						новСтр["СубконтоДт" + НС] = СтрНайденная["СубконтоДт" + субКт.НомерСтроки];
					КонецЕсли;
				КонецЦикла;
				
				новСтр.СчетКт      = ТекСчетЗакрытия;
				новСтр.СубконтоКт1 = СтрНайденная.СубконтоДт1;
				новСтр.СубконтоКт2 = СтрНайденная.СубконтоДт2;
				новСтр.СубконтоКт3 = СтрНайденная.СубконтоДт3;
				новСтр.Сумма       = СтрНайденная.Сумма;
				новСтр.Содержание  = "Расчет по таблице";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФинальноеЗакрытие5610_5510(Стр)
	//ищем 6510 в Дт и в Кт
	// находим Кт-Дт и отаток закрываем на 5510
	счДт5610 = Стр.СчетЗакрытияДт; 
	счКт5510 = Стр.СчетЗакрытияКт;
	
	сумДт = 0;
	сумКт = 0;
	
	тбФин  = новый ТаблицаЗначений;
	тбФин.Колонки.Добавить("Субконто1");
	тбФин.Колонки.Добавить("Субконто2");
	тбФин.Колонки.Добавить("Субконто3");
	тбФин.Колонки.Добавить("Сумма");
	
	Для каждого Стр_Д Из Объект.Данные Цикл
		
		Если Стр_Д.СчетДт = счДт5610 Тогда
			сумДт = сумДт+ Стр_Д.Сумма;
			
			новСтр = тбФин.Добавить();
			новСтр.Субконто1 = ?(СокрЛП(Стр_Д.СубконтоДт1)="", Неопределено, Стр_Д.СубконтоДт1);
			новСтр.Субконто2 = ?(СокрЛП(Стр_Д.СубконтоДт2)="", Неопределено, Стр_Д.СубконтоДт2);
			новСтр.Субконто3 = ?(СокрЛП(Стр_Д.СубконтоДт3)="", Неопределено, Стр_Д.СубконтоДт3);
			
			новСтр.Сумма = - Стр_Д.Сумма;
		КонецЕсли;
		
		Если Стр_Д.СчетКт = счДт5610 Тогда
			новСтр = тбФин.Добавить();
			новСтр.Субконто1 = ?(СокрЛП(Стр_Д.СубконтоКт1)="", Неопределено, Стр_Д.СубконтоКт1);
			новСтр.Субконто2 = ?(СокрЛП(Стр_Д.СубконтоКт2)="", Неопределено, Стр_Д.СубконтоКт2);
			новСтр.Субконто3 = ?(СокрЛП(Стр_Д.СубконтоКт3)="", Неопределено, Стр_Д.СубконтоКт3);
			
			новСтр.Сумма = Стр_Д.Сумма;
		КонецЕсли;
	КонецЦикла;	
	
	тбФин.Свернуть("Субконто1, Субконто2, Субконто3", "Сумма");
	Для каждого стрТбФин Из тбФин Цикл
		новСтр = Объект.Данные.Добавить();
		новСтр.СчетДт = счДт5610;
		новСтр.СубконтоДт1 = стрТбФин.Субконто1;
		новСтр.СубконтоДт2 = стрТбФин.Субконто2;
		новСтр.СубконтоДт3 = стрТбФин.Субконто3;
		
		новСтр.СчетКт = счКт5510;
		//Для каждого субСчета Из счКт5510.ВидыСубконто Цикл
		//	найдСтрСубДт = счДт5610.ВидыСубконто.Найти(субСчета.ВидСубконто, "ВидСубконто");
		//	Если найдСтрСубДт <> Неопределено Тогда
		//		ф = найдСтрСубДт.НомерСтроки;
		//		новСтр["СубконтоДт"+ф] = стрТбФин["Субконто" + субСчета.НомерСтроки];
		//	КонецЕсли;
		//КонецЦикла;
		
		новСтр.Сумма = стрТбФин.Сумма;
		
		новСтр.Содержание = "Финальный расчет по таблице";
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	
	Отказ = Ложь;
	
	Если Объект.Проведен Тогда
		Сообщить("Отмените проведение!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.ДатаНач = '00010101' Тогда
		Сообщить("не выбрана не выбрана начальная дата закрытия периода!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.ПорядокСчетов.Количество() = 0 Тогда
		Сообщить("В таблице порядок закрытия счетов не выбран ни один счет!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.Данные.Количество() <> 0 Тогда
		Если Вопрос("Очистить таблицу и заполнить заново?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Объект.РаспределениеКосвенныхЗатрат Тогда
			ОтказС = Ложь;
			ОтказП = Ложь;
			Если Не ПроверитьСправкуНаСервере(Объект.ДатаНач) Тогда
				ОтказС = Истина;
				Сообщить("Не заполнена Справка о наличии буровых агрегатов за "+Формат(Объект.ДатаНач, "ДФ=""ММММ гггг 'г.'"""));
			КонецЕсли;
			//Если Не ПроверитьПСНаСервере(Объект.ДатаНач) Тогда
			//	ОтказП = Истина;
			//	Сообщить("Не заполнены Производственные справки за "+Формат(Объект.ДатаНач, "ДФ=""ММММ гггг 'г.'"""));
			//КонецЕсли;
			
			Если Не (ОтказС ИЛИ ОтказП) Тогда
				ЗаполнитьРаспределениеКосвенныхЗатрат();
			КонецЕсли;
		ИначеЕсли Объект.ЗакрытьОстатки Тогда
			ЗаполнитьОстаткиНаСервере();
		Иначе
			ЗаполнитьДанныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///ПроизводственныеПроверки

&НаСервере
Функция ПроверитьСправкуНаСервере(ДатаН) 
	
	ЕстьСправка = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КТ_СправкаОНаличииБуровыхАгрегатовАгрегаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.КТ_СправкаОНаличииБуровыхАгрегатов.Агрегаты КАК КТ_СправкаОНаличииБуровыхАгрегатовАгрегаты
	               |ГДЕ
	               |	КТ_СправкаОНаличииБуровыхАгрегатовАгрегаты.Ссылка.Проведен
	               |	И КТ_СправкаОНаличииБуровыхАгрегатовАгрегаты.Ссылка.ПериодРегистрации = &ПериодРегистрации";
	Запрос.УстановитьПараметр("ПериодРегистрации", ДатаН);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()>0 Тогда
		ЕстьСправка = Истина;
	КонецЕсли;
	
	Возврат ЕстьСправка;		
	
КонецФункции

&НаСервере
Функция ПроверитьПСНаСервере(ДатаН) 
	
	ЕстьСправка = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.Участок КАК Участок,
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.ВидСкважины КАК ВидСкважины,
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.Подразделение КАК Агрегат,
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.ПризнакЗавершонности КАК ПризнакЗавершонности,
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.ГлубинаЗавершоннойСкважены КАК ПробуреноПМ,
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.Принята КАК Принята,
	               |	1 КАК ПробуреноСкв,
	               |	ВЫБОР
	               |		КОГДА ПроизводственнаяСправкаИнформацияПоПродукции.Принята
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК АктированоСкв,
	               |	ВЫБОР
	               |		КОГДА ПроизводственнаяСправкаИнформацияПоПродукции.Принята
	               |			ТОГДА ПроизводственнаяСправкаИнформацияПоПродукции.ГлубинаЗавершоннойСкважены
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК АктированоПМ
	               |ИЗ
	               |	Документ.ПроизводственнаяСправка.ИнформацияПоПродукции КАК ПроизводственнаяСправкаИнформацияПоПродукции
	               |ГДЕ
	               |	ПроизводственнаяСправкаИнформацияПоПродукции.Ссылка.Проведен
	               |	И ПроизводственнаяСправкаИнформацияПоПродукции.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ДатаН));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ДатаН));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()>0 Тогда
		ЕстьСправка = Истина;
	КонецЕсли;
	
	Возврат ЕстьСправка;		
	
КонецФункции


&НаСервере
Процедура КТ_ЗаполнитьСчетаПоУмолчаниюРБМ()
	
	сч8410 = ПланыСчетов.Типовой.НайтиПоКоду("8410");
	сч8310 = ПланыСчетов.Типовой.НайтиПоКоду("8310");
	сч8110 = ПланыСчетов.Типовой.НайтиПоКоду("8110");
	сч7010 = ПланыСчетов.Типовой.НайтиПоКоду("7010");

	ПорядокСчетов = Объект.ПорядокСчетов;
	ПорядокСчетов.Очистить();
	
	новСтр                = ПорядокСчетов.Добавить();
	новСтр.СчетЗакрытияДт = сч8110;     
	новСтр.СчетЗакрытияКт = сч8410;  
	
	новСтр                = ПорядокСчетов.Добавить();
	новСтр.СчетЗакрытияДт = сч8110; 
	новСтр.СчетЗакрытияКт = сч8310; 

	новСтр                   = ПорядокСчетов.Добавить();
	новСтр.СчетЗакрытияДт    = сч7010; 
	новСтр.СчетЗакрытияКт    = сч8110; 
	новСтр.ИзТаблицы         = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПорядокСчетов(Команда)
	КТ_ЗаполнитьСчетаПоУмолчаниюРБМ();
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСчетовСчетЗакрытияДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПорядокСчетов.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗакрытияДт1", "СубконтоЗакрытияДт2", "СубконтоЗакрытияДт3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗакрытияДт, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗакрытияДт", "СчетЗакрытияДт");
	                                                            
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетЗакрытияДт,  
		|СубконтоЗакрытияДт1, СубконтоЗакрытияДт2, СубконтоЗакрытияДт3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

	ПорядокСчетовСчетЗакрытияДтПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	
	ТекущаяСтрока = Форма.Элементы.ПорядокСчетов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Форма.Объект.ПорядокСчетов.НайтиПоИдентификатору(ТекущаяСтрока);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ПорядокСчетовСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Процедура ПорядокСчетовСчетЗакрытияДтПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗакрытияДт1", "СубконтоЗакрытияДт2", "СубконтоЗакрытияДт3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗакрытияДт1, СтрокаТабличнойЧасти.СубконтоЗакрытияДт2, СтрокаТабличнойЧасти.СубконтоЗакрытияДт3));
															
	СчетаУчета = Новый Структура("СчетЗакрытияДт, СубконтоЗакрытияДт1,
								 |СубконтоЗакрытияДт2, СубконтоЗакрытияДт3", СтрокаТабличнойЧасти.СчетЗакрытияДт,
								 СтрокаТабличнойЧасти.СубконтоЗакрытияДт1, СтрокаТабличнойЧасти.СубконтоЗакрытияДт2,
								 СтрокаТабличнойЧасти.СубконтоЗакрытияДт3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗакрытияДт", "СчетЗакрытияДт", "СубконтоЗакрытияДт");
															
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры



