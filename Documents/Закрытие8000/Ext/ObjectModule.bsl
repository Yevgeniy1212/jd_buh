#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначенияБК.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ,);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	//////////////////////////////////////////////////////////////////////////////
	// Проверка ручной корректировки документа.
	
	Если ЭтотОбъект.РучнаяКорректировка Тогда
		ТекстСообщения = НСтр("ru = 'Движения документа ""%1"" отредактированы вручную и не могут быть автоматически актуализированы.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект.Ссылка);		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Типовой.Записывать = Истина;
	
	//-------основные проводки --------------
	Для Каждого ТекСтрокатбДанные Из Данные Цикл
		
		Если ТекСтрокатбДанные.ЕстьПроводки Тогда
			// уже есть проводки
			продолжить;
		КонецЕсли;
		
		СчетДт = ТекСтрокатбДанные.СчетДт;
		СчетКт = ТекСтрокатбДанные.СчетКт;		
		
		массивСубДт = новый Массив;
		массивСубДт.Добавить(ТекСтрокатбДанные.СубконтоДт1);
		массивСубДт.Добавить(ТекСтрокатбДанные.СубконтоДт2);
		массивСубДт.Добавить(ТекСтрокатбДанные.СубконтоДт3);
		
		массивСубКт = новый Массив;
		массивСубКт.Добавить(ТекСтрокатбДанные.СубконтоКт1);
		массивСубКт.Добавить(ТекСтрокатбДанные.СубконтоКт2);
		массивСубКт.Добавить(ТекСтрокатбДанные.СубконтоКт3);
		
		Движение = Движения.Типовой.Добавить();
		
		Движение.Период = Дата;
		Движение.СчетДт = СчетДт;
		Для каждого видС Из СчетДт.ВидыСубконто Цикл
			Движение.СубконтоДт[видС.ВидСубконто] = массивСубДт[видС.НомерСтроки - 1];
		КонецЦикла;
		
		Движение.СчетКт = СчетКт;
		Для каждого видС Из СчетКт.ВидыСубконто Цикл
			Движение.СубконтоКт[видС.ВидСубконто] = массивСубКт[видС.НомерСтроки - 1];
		КонецЦикла;
		
		Движение.Организация = Организация;
		Движение.Сумма       = ТекСтрокатбДанные.Сумма;
		Движение.Содержание  = ТекСтрокатбДанные.Содержание;
		
	КонецЦикла;
	
	Движения.Типовой.Записать();	

КонецПроцедуры

#КонецЕсли
