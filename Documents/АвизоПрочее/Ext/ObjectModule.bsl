#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата)
		ИЛИ НЕ УчитыватьКПН Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеБух.СчетОтправительНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеБух.СчетПолучательНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеБух.ВидУчетаНУОтправитель");
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеБух.ВидУчетаНУПолучатель");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ДанныеБух.Количество() > 0 Тогда
		ПроверитьЗаполнениеТабличнойЧастиПострочно(ДанныеБух, НСтр("ru = 'Данные бух. учета'"), Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") 
		ИЛИ (ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") И НЕ ДополнительныеСвойства.ВыполненаПроверкаЗаполнения) Тогда 
		
		Отказ = НЕ ПроверитьЗаполнение();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеБух Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) 
					ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) 
					ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма)) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчетаОтправителя = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетОтправительБУ);
		СвойстваСчетаПолучателя = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетПолучательБУ);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество)
			И НЕ (СвойстваСчетаОтправителя.Количественный ИЛИ СвойстваСчетаПолучателя.Количественный) Тогда 
			СтрокаТабличнойЧасти.Количество = 0;
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма))
			И НЕ (СвойстваСчетаОтправителя.Валютный ИЛИ СвойстваСчетаПолучателя.Валютный) Тогда 
			СтрокаТабличнойЧасти.Валюта        = Неопределено;
			СтрокаТабличнойЧасти.ВалютнаяСумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПараметрыПроведения = Документы.АвизоПрочее.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	Документы.АвизоПрочее.ВыполнитьДвиженияПоРегистрам(ПараметрыПроведения.ТаблицаДокумента, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаяЧасть, ИмяТабличнойЧасти, Отказ)
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ПроверяемаяТабличнаяЧасть Цикл
		
		СвойстваСчетОтправительБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетОтправительБУ);
		СвойстваСчетОтправительНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетОтправительНУ);
		СвойстваСчетПолучательБУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетПолучательБУ);
		СвойстваСчетПолучательНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетПолучательНУ);
		
		Если (СвойстваСчетОтправительБУ.Количественный
			ИЛИ СвойстваСчетОтправительНУ.Количественный
			ИЛИ СвойстваСчетПолучательБУ.Количественный
			ИЛИ СвойстваСчетПолучательНУ.Количественный) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда 
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Количество'"),
				СтрокаТабличнойЧасти.НомерСтроки, ИмяТабличнойЧасти);
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеБух", СтрокаТабличнойЧасти.НомерСтроки, "Количество");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если (СвойстваСчетОтправительБУ.Валютный ИЛИ СвойстваСчетПолучательБУ.Валютный) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Валюта'"),
					СтрокаТабличнойЧасти.НомерСтроки, ИмяТабличнойЧасти);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеБух", СтрокаТабличнойЧасти.НомерСтроки, "Валюта");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма) Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Вал. сумма'"),
					СтрокаТабличнойЧасти.НомерСтроки, ИмяТабличнойЧасти);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеБух", СтрокаТабличнойЧасти.НомерСтроки, "Валюта");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли