#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьПоОстаткамСчетовБУНаСервере(Объект, МассивСчетов) Экспорт
	
	Объект.ДанныеБух.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) КАК КоличествоостатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокКт, 0) КАК КоличествоОстатокКт,
	|	ТиповойОстатки.Счет.СчетНУ КАК СчетНУ,
	|	ТиповойОстатки.Счет КАК Счет,
	|	ТиповойОстатки.Счет.Вид КАК СчетВид,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстатокДт, 0) КАК ВалютнаяСуммаОстатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстатокКт, 0) КАК ВалютнаяСуммаОстатокКт,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстаток, 0) КАК ВалютнаяСуммаОстаток,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ТиповойОстатки.Субконто1 КАК Субконто1,
	|	ТиповойОстатки.Субконто2 КАК Субконто2,
	|	ТиповойОстатки.Субконто3 КАК Субконто3,
	|	ТиповойОстатки.Валюта,
	|	ТиповойОстатки.Счет.Валютный,
	|	ТиповойОстатки.Счет.Количественный
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&МассивСчетов),
	|			,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстаток <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);		   	   
	Запрос.УстановитьПараметр("ДатаОстатков", Объект.Дата);	               	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрефиксПоказателя = "";
		
		Если Выборка.СчетВид = ВидСчета.Активный Тогда
			ПрефиксПоказателя = "Дт";
		ИначеЕсли Выборка.СчетВид = ВидСчета.Пассивный Тогда
			ПрефиксПоказателя = "Кт";					
		КонецЕсли;   			
		
		НоваяСтрока = Объект.ДанныеБух.Добавить();
		НоваяСтрока.СчетОтправительБУ  = Выборка.Счет;
		НоваяСтрока.СубконтоОтправительБУ1 = Выборка.Субконто1;
		НоваяСтрока.СубконтоОтправительБУ2 = Выборка.Субконто2;
		НоваяСтрока.СубконтоОтправительБУ3 = Выборка.Субконто3;
		
		НоваяСтрока.СчетОтправительНУ  = Выборка.СчетНУ;
		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетОтправительБУ, НоваяСтрока.СчетОтправительНУ, 1, НоваяСтрока.СубконтоОтправительБУ1, "СубконтоОтправительНУ");
		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетОтправительБУ, НоваяСтрока.СчетОтправительНУ, 2, НоваяСтрока.СубконтоОтправительБУ2, "СубконтоОтправительНУ");
		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетОтправительБУ, НоваяСтрока.СчетОтправительНУ, 3, НоваяСтрока.СубконтоОтправительБУ3, "СубконтоОтправительНУ");
		
		Если ТипЗнч(НоваяСтрока.СубконтоОтправительБУ2) = ТипЗнч(НоваяСтрока.СубконтоОтправительНУ2) Тогда
			НоваяСтрока.СубконтоОтправительНУ2 = Выборка.Субконто2;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.СубконтоОтправительБУ3) = ТипЗнч(НоваяСтрока.СубконтоОтправительНУ3) Тогда
			НоваяСтрока.СубконтоОтправительНУ3 = Выборка.Субконто3;
		КонецЕсли;
		
		//счета получателя БУ, НУ - заполним по счетам отправителя БУ и НУ			
		НоваяСтрока.СчетПолучательБУ  = Выборка.Счет;
		НоваяСтрока.СубконтоПолучательБУ1 = Выборка.Субконто1;
		НоваяСтрока.СубконтоПолучательБУ2 = Выборка.Субконто2;
		НоваяСтрока.СубконтоПолучательБУ3 = Выборка.Субконто3;
		
		НоваяСтрока.СчетПолучательНУ  = Выборка.СчетНУ;
		НоваяСтрока.СубконтоПолучательНУ1 = НоваяСтрока.СубконтоОтправительНУ1;
		НоваяСтрока.СубконтоПолучательНУ2 = НоваяСтрока.СубконтоОтправительНУ2;
		НоваяСтрока.СубконтоПолучательНУ3 = НоваяСтрока.СубконтоОтправительНУ3;
		
		НоваяСтрока.Сумма         = Выборка["СуммаОстаток" + ПрефиксПоказателя];
		НоваяСтрока.Количество    = Выборка["КоличествоОстаток" + ПрефиксПоказателя];
		НоваяСтрока.ВалютнаяСумма = Выборка["ВалютнаяСуммаОстаток" + ПрефиксПоказателя];
		НоваяСтрока.Валюта        = Выборка.Валюта; 
		
		ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОтражатьДокументыВНалоговомУчете");
		
		//заполним вид учета НУ, даже если не показываем
		НоваяСтрока.ВидУчетаНУОтправитель = ?(ОтражатьДокументыВНалоговомУчете, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);			
		НоваяСтрока.ВидУчетаНУПолучатель  = НоваяСтрока.ВидУчетаНУОтправитель;
		
		НоваяСтрока.СчетОтправительБУКоличественный = Выборка.СчетКоличественный;
		НоваяСтрока.СчетОтправительБУВалютный       = Выборка.СчетВалютный;
		
		НоваяСтрока.СчетПолучательБУКоличественный  = Выборка.СчетКоличественный;
		НоваяСтрока.СчетПолучательБУВалютный        = Выборка.СчетВалютный;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	НеобходимостьОтраженияВНУ 						= Реквизиты.УчитыватьКПН;
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаТаблицаДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.УчитыватьКПН,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.АвизоПрочее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	
	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.СчетОтправительБУ КАК СчетОтправительБУ,
	|	ТаблицаДокумента.СубконтоОтправительБУ1 КАК СубконтоОтправительБУ1,
	|	ТаблицаДокумента.СубконтоОтправительБУ2 КАК СубконтоОтправительБУ2,
	|	ТаблицаДокумента.СубконтоОтправительБУ3 КАК СубконтоОтправительБУ3,
	|	ТаблицаДокумента.СчетОтправительНУ КАК СчетОтправительНУ,
	|	ТаблицаДокумента.СубконтоОтправительНУ1 КАК СубконтоОтправительНУ1,
	|	ТаблицаДокумента.СубконтоОтправительНУ2 КАК СубконтоОтправительНУ2,
	|	ТаблицаДокумента.СубконтоОтправительНУ3 КАК СубконтоОтправительНУ3,
	|	ТаблицаДокумента.СчетПолучательБУ КАК СчетПолучательБУ,
	|	ТаблицаДокумента.СубконтоПолучательБУ1 КАК СубконтоПолучательБУ1,
	|	ТаблицаДокумента.СубконтоПолучательБУ2 КАК СубконтоПолучательБУ2,
	|	ТаблицаДокумента.СубконтоПолучательБУ3 КАК СубконтоПолучательБУ3,
	|	ТаблицаДокумента.СчетПолучательНУ КАК СчетПолучательНУ,
	|	ТаблицаДокумента.СубконтоПолучательНУ1 КАК СубконтоПолучательНУ1,
	|	ТаблицаДокумента.СубконтоПолучательНУ2 КАК СубконтоПолучательНУ2,
	|	ТаблицаДокумента.СубконтоПолучательНУ3 КАК СубконтоПолучательНУ3,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Валюта КАК Валюта,
	|	ТаблицаДокумента.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Содержание КАК Содержание,
	|	ТаблицаДокумента.ВидУчетаНУОтправитель КАК ВидУчетаНУОтправитель,
	|	ТаблицаДокумента.ВидУчетаНУПолучатель КАК ВидУчетаНУПолучатель
	|ИЗ
	|	Документ.АвизоПрочее.ДанныеБух КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Формирование движений

Процедура ВыполнитьДвиженияПоРегистрам(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаДокумента = Неопределено ИЛИ ТаблицаДокумента.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		ОтражатьПоДебетуБУ = Истина;
		СформироватьПроводку(Движения.Типовой, Истина, Ложь, СтрокаТаблицы, Реквизиты, ОтражатьПоДебетуБУ);
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			СформироватьПроводку(Движения.Налоговый, Ложь, Истина, СтрокаТаблицы, Реквизиты,ОтражатьПоДебетуБУ);
		КонецЕсли;    	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводку(НаборДвижений, ОтражатьВБУ, ОтражатьВНУ, СтрокаТаблицы, Реквизиты, ОтражатьПоДебетуБУ = Истина)
	
	Если ОтражатьВБУ Тогда
		СчетОтправитель = СтрокаТаблицы.СчетОтправительБУ;
		СчетПолучатель  = СтрокаТаблицы.СчетПолучательБУ;
		ИмяСубконтоОтправитель = "СубконтоОтправительБУ";
		ИмяСубконтоПолучатель  = "СубконтоПолучательБУ";
	Иначе
		СчетОтправитель = СтрокаТаблицы.СчетОтправительНУ;
		СчетПолучатель  = СтрокаТаблицы.СчетПолучательНУ;
		ИмяСубконтоОтправитель = "СубконтоОтправительНУ";
		ИмяСубконтоПолучатель  = "СубконтоПолучательНУ";
	КонецЕсли;
	
	СвойстваСчетаОтправителя = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтправитель);
	СвойстваСчетаПолучателя  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПолучатель);
	
	ВидСчетаУчета = СвойстваСчетаОтправителя.Вид;
	
	Если ВидСчетаУчета = ВидСчета.Активный
		ИЛИ (ВидСчетаУчета = ВидСчета.АктивноПассивный И ОтражатьВНУ И НЕ ОтражатьПоДебетуБУ) Тогда
		Если ОтражатьВБУ Тогда
			ОтражатьПоДебетуБУ  = Ложь;
		КонецЕсли;
		ПрефиксСчетаОтправителя = "Кт";
		ПрефиксСчетаПолучателя  = "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный 
		ИЛИ (ВидСчетаУчета = ВидСчета.АктивноПассивный И ОтражатьВНУ И  ОтражатьПоДебетуБУ) Тогда
		Если ОтражатьВБУ Тогда
			ОтражатьПоДебетуБУ  = Истина;
		КонецЕсли; 		
		ПрефиксСчетаОтправителя = "Дт";
		ПрефиксСчетаПолучателя  = "Кт";			
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаТаблицы.Сумма > 0 Тогда	
			ПрефиксСчетаОтправителя = "Дт";
			ПрефиксСчетаПолучателя  = "Кт";         
		Иначе  		
			ПрефиксСчетаОтправителя = "Кт";
			ПрефиксСчетаПолучателя  = "Дт";
		КонецЕсли;			
	КонецЕсли;
	
	Проводка = НаборДвижений.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = СтрокаТаблицы.Содержание;
	Проводка.Сумма       = СтрокаТаблицы.Сумма;  	
	
	Проводка["Счет" + ПрефиксСчетаОтправителя] = СчетОтправитель;
	Для Ном = 1 По 3 Цикл
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчетаОтправителя], Проводка["Субконто" + ПрефиксСчетаОтправителя], Ном, СтрокаТаблицы[ИмяСубконтоОтправитель + Ном]);
	КонецЦикла;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, ПрефиксСчетаОтправителя);
	
	Если ОтражатьВБУ И СвойстваСчетаОтправителя.Валютный Тогда
		Проводка["Валюта" + ПрефиксСчетаОтправителя] = СтрокаТаблицы.Валюта;
		Проводка["ВалютнаяСумма" + ПрефиксСчетаОтправителя] = СтрокаТаблицы.ВалютнаяСумма;
	КонецЕсли;
	
	Если СвойстваСчетаОтправителя.Количественный Тогда
		Проводка["Количество" + ПрефиксСчетаОтправителя] = СтрокаТаблицы.Количество;
	КонецЕсли; 	
	
	Проводка["Счет" + ПрефиксСчетаПолучателя] = СчетПолучатель;
	Для Ном = 1 По 3 Цикл
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчетаПолучателя], Проводка["Субконто" + ПрефиксСчетаПолучателя], Ном, СтрокаТаблицы[ИмяСубконтоПолучатель + Ном]);
	КонецЦикла;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, Реквизиты.КорСтруктурноеПодразделение, ПрефиксСчетаПолучателя);
	
	Если ОтражатьВБУ И СвойстваСчетаПолучателя.Валютный Тогда
		Проводка["Валюта" + ПрефиксСчетаПолучателя]        = СтрокаТаблицы.Валюта;
		Проводка["ВалютнаяСумма" + ПрефиксСчетаПолучателя] = СтрокаТаблицы.ВалютнаяСумма;
	КонецЕсли;
	
	Если СвойстваСчетаПолучателя.Количественный Тогда
		Проводка["Количество" + ПрефиксСчетаПолучателя] = СтрокаТаблицы.Количество;
	КонецЕсли;	
	
	Если ОтражатьВНУ Тогда
		Проводка["ВидУчета" +ПрефиксСчетаОтправителя] = СтрокаТаблицы.ВидУчетаНУОтправитель;
		Проводка["ВидУчета" +ПрефиксСчетаПолучателя]  = СтрокаТаблицы.ВидУчетаНУПолучатель;
	КонецЕсли;  	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Авизо
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьАвизо";
	КомандаПечати.Представление = НСтр("ru = 'Авизо'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьАвизо";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьАвизо") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьАвизо",
			НСтр("ru = 'Авизо'"),
			ПечатьАвизо(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.АвизоПрочее.ПФ_MXL_Авизо");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПечатьАвизо"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьАвизо(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	|	АвизоПрочее.Ссылка,
	|	АвизоПрочее.Номер,
	|	АвизоПрочее.Дата,
	|	АвизоПрочее.Организация,
	|	АвизоПрочее.СтруктурноеПодразделениеОтправитель КАК Отправитель,
	|	АвизоПрочее.СтруктурноеПодразделениеПолучатель КАК Получатель,
	|	АвизоПрочее.Ответственный,
	|	АвизоПрочее.Ответственный.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвизоПрочее.Организация.НаименованиеПолное, 1, 1000) = """"
	|			ТОГДА АвизоПрочее.Организация.Наименование
	|		ИНАЧЕ АвизоПрочее.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвизоПрочее.СтруктурноеПодразделениеОтправитель.НаименованиеПолное, 1, 1000) = """"
	|			ТОГДА АвизоПрочее.СтруктурноеПодразделениеОтправитель.Наименование
	|		ИНАЧЕ АвизоПрочее.СтруктурноеПодразделениеОтправитель.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеОтправителя,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвизоПрочее.СтруктурноеПодразделениеПолучатель.НаименованиеПолное, 1, 1000) = """"
	|			ТОГДА АвизоПрочее.СтруктурноеПодразделениеПолучатель.Наименование
	|		ИНАЧЕ АвизоПрочее.СтруктурноеПодразделениеПолучатель.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПолучателя
	|ИЗ
	|	Документ.АвизоПрочее КАК АвизоПрочее
	|ГДЕ
	|	АвизоПрочее.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойДвиженияССубконто.Регистратор КАК Ссылка,
	|	ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.СубконтоДт1,
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоДт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт1) КАК ПРЕДСТАВЛЕНИЕСубконтоДт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт2) КАК ПРЕДСТАВЛЕНИЕСубконтоДт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт3) КАК ПРЕДСТАВЛЕНИЕСубконтоДт3,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СубконтоКт2,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт1) КАК ПРЕДСТАВЛЕНИЕСубконтоКт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт2) КАК ПРЕДСТАВЛЕНИЕСубконтоКт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт3) КАК ПРЕДСТАВЛЕНИЕСубконтоКт3,
	|	ТиповойДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК ВалСумма,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.КоличествоДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.КоличествоКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.КоличествоДт
	|	КОНЕЦ КАК Количество,
	|	ТиповойДвиженияССубконто.Сумма,
	|	ТиповойДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДокумента = МассивРезультатов[0].Выбрать();
	ВыборкаДвиженийИтоги = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "АвизоПрочее_Авизо";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвизоПрочее.ПФ_MXL_Авизо", КодЯзыка);
	
	ДанныеЗаполнения = Новый Структура;
	
	Пока ДанныеДокумента.Следующий() Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим основную шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеЗаполнения.Очистить();
		
		ДанныеЗаполнения.Вставить("ТекстЗаголовка", РаботаСДиалогами.СформироватьЗаголовокДокумента(ДанныеДокумента.Ссылка, НСтр("ru = 'Авизо'", КодЯзыка)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеДокумента);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыборкаДвиженийИтоги.Сбросить();
		Если НЕ ВыборкаДвиженийИтоги.НайтиСледующий(ДанныеДокумента.Ссылка) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ВыборкаДвижений = ВыборкаДвиженийИтоги.Выбрать();
		
		НомерСтроки = 1;
		// Выводим строки таблицы БУ
		Пока ВыборкаДвижений.Следующий() Цикл
			
			АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоДт3);
			
			АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоКт3);
			
			ДанныеЗаполнения.Очистить();
			ДанныеЗаполнения.Вставить("НомерСтроки", НомерСтроки);
			ДанныеЗаполнения.Вставить("АналитикаДт", АналитикаДт);
			ДанныеЗаполнения.Вставить("АналитикаКт", АналитикаКт);
						
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаДвижений);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеЗаполнения);
			
			ТабДокумент.Вывести(ОбластьМакета);
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// Выводим подвал таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим общий подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ДанныеЗаполнения.Очистить();
		ДанныеЗаполнения.Вставить("РасшифровкаПодписиИсполнителя", ?(НЕ ЗначениеЗаполнено(ДанныеДокумента.Ответственный), "", ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ДанныеДокумента.ФизЛицо)));
		ДанныеЗаполнения.Вставить("ФизЛицо", ДанныеДокумента.ФизЛицо);
		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеЗаполнения);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли