
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПланСчетовТиповой" Тогда
		УстановитьПараметрыВыбораСчетов(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""авизо прочее"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ИсходнаяОрганизация = Объект.Организация Тогда
		Возврат
	КонецЕсли;

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияОтправитель, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);
		Если Результат.ИзмененоСтруктурноеПодразделение Тогда
			Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
			Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда 
				ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Отправитель");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь,"ПослеВыбораСтруктурногоПодразделенияОтправителя");

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияПолучатель, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель);
		Если Результат.ИзмененоСтруктурноеПодразделение Тогда
			Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
			Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда 
				ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Получатель");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучателя");

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДанныеБух

&НаКлиенте
Процедура ДанныеБухПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("ВидУчетаНУОтправитель, ВидУчетаНУПолучатель");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ЭтотОбъект, ДанныеСтрокиТаблицы);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительБУ", "СчетОтправительБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательБУ", "СчетПолучательБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСчетОтправительБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоОтправительБУ1", "СубконтоОтправительБУ2", "СубконтоОтправительБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетОтправительБУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	
	СтрокаТаблицы.СчетОтправительНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетОтправительБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоОтправительНУ1", "СубконтоОтправительНУ2", "СубконтоОтправительНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетОтправительНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительБУ", "СчетОтправительБУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетОтправительБУ, СчетОтправительНУ, 
		|СубконтоОтправительБУ1, СубконтоОтправительБУ2, СубконтоОтправительБУ3,
		|СубконтоОтправительНУ1, СубконтоОтправительНУ2, СубконтоОтправительНУ3,
		|СчетОтправительБУКоличественный, СчетОтправительБУВалютный");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеБухСчетОтправительБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетПолучательБУ) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		СтрокаТаблицы.СчетПолучательБУ = СтрокаТаблицы.СчетОтправительБУ;
		ДанныеБухСчетПолучательБУПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительБУ", 1, "СчетОтправительБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительБУ", 2, "СчетОтправительБУ",СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительБУ", 3, "СчетОтправительБУ",СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетОтправительБУ, ТекущиеДанные.СчетОтправительНУ, 1, ТекущиеДанные.СубконтоОтправительБУ1, "СубконтоОтправительНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительБУ", "СчетОтправительБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоОтправительБУ1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоОтправительБУ1) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоОтправительБУ1, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ1) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		ТекущиеДанные.СубконтоПолучательБУ1 = ТекущиеДанные.СубконтоОтправительБУ1;
		ДанныеБухСубконтоПолучательБУ1ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетОтправительБУ, ТекущиеДанные.СчетОтправительНУ, 2, ТекущиеДанные.СубконтоОтправительБУ2, "СубконтоОтправительНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительБУ", "СчетОтправительБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоОтправительБУ2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоОтправительБУ2) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоОтправительБУ2, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ2) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		ТекущиеДанные.СубконтоПолучательБУ2 = ТекущиеДанные.СубконтоОтправительБУ2;
		ДанныеБухСубконтоПолучательБУ2ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетОтправительБУ, ТекущиеДанные.СчетОтправительНУ, 3, ТекущиеДанные.СубконтоОтправительБУ3, "СубконтоОтправительНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительБУ", "СчетОтправительБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоОтправительБУ3) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоОтправительБУ3) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоОтправительБУ3, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ3) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		ТекущиеДанные.СубконтоПолучательБУ3 = ТекущиеДанные.СубконтоОтправительБУ3;
		ДанныеБухСубконтоПолучательБУ3ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСчетПолучательБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоПолучательБУ1", "СубконтоПолучательБУ2", "СубконтоПолучательБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетПолучательБУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	СтрокаТаблицы.СчетПолучательНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетПолучательБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоПолучательНУ1", "СубконтоПолучательНУ2", "СубконтоПолучательНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетПолучательНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательБУ", "СчетПолучательБУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетПолучательБУ, СчетПолучательНУ, 
		|СубконтоПолучательБУ1, СубконтоПолучательБУ2, СубконтоПолучательБУ3,
		|СубконтоПолучательНУ1, СубконтоПолучательНУ2, СубконтоПолучательНУ3,
		|СчетПолучательБУКоличественный, СчетПолучательБУВалютный");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеБухСчетПолучательБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетПолучательБУ, ТекущиеДанные.СчетПолучательНУ, 1, ТекущиеДанные.СубконтоПолучательБУ1, "СубконтоПолучательНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательБУ", "СчетПолучательБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоПолучательБУ1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ1) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоПолучательБУ1, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетПолучательБУ, ТекущиеДанные.СчетПолучательНУ, 2, ТекущиеДанные.СубконтоПолучательБУ2, "СубконтоПолучательНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательБУ", "СчетПолучательБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоПолучательБУ2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ2) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоПолучательБУ2, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеБух.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетПолучательБУ, ТекущиеДанные.СчетПолучательНУ, 3, ТекущиеДанные.СубконтоПолучательБУ3, "СубконтоПолучательНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательБУ", "СчетПолучательБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ", Истина);

	Если ТипЗнч(ТекущиеДанные.СубконтоПолучательБУ3) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ТекущиеДанные.СубконтоПолучательБУ3) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Субконто, Валюта, ВалютнаяСумма, Сумма, Дата", 
			ТекущиеДанные.СубконтоПолучательБУ3, ТекущиеДанные.Валюта, ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Сумма, Объект.Дата);
		
		ДанныеБухСубконтоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы, "Валюта, ВалютнаяСумма, Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательБУ", 1, "СчетПолучательБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательБУ", 2, "СчетПолучательБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательБУ", 3, "СчетПолучательБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСчетОтправительНУПриИзменении(Элемент)
		
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоОтправительНУ1", "СубконтоОтправительНУ2", "СубконтоОтправительНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетОтправительНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетОтправительБУ, СчетОтправительНУ, 
		|СубконтоОтправительНУ1, СубконтоОтправительНУ2, СубконтоОтправительНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеБухСчетОтправительНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетПолучательНУ) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		СтрокаТаблицы.СчетПолучательНУ = СтрокаТаблицы.СчетОтправительНУ;
		ДанныеБухСчетПолучательНУПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСчетПолучательНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоПолучательНУ1", "СубконтоПолучательНУ2", "СубконтоПолучательНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетОтправительНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетПолучательБУ, СчетПолучательНУ, 
		|СубконтоПолучательНУ1, СубконтоПолучательНУ2, СубконтоПолучательНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеБухСчетПолучательНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухВидУчетаНУОтправительПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидУчетаНУПолучатель) Тогда
		СтрокаТаблицы.ВидУчетаНУПолучатель = СтрокаТаблицы.ВидУчетаНУОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ1ПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ");

	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоПолучательНУ1) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		СтрокаТаблицы.СубконтоПолучательНУ1 = СтрокаТаблицы.СубконтоОтправительНУ1;
		ДанныеБухСубконтоПолучательНУ1ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ2ПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ");

	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоПолучательНУ2) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		СтрокаТаблицы.СубконтоПолучательНУ2 = СтрокаТаблицы.СубконтоОтправительНУ2;
		ДанныеБухСубконтоПолучательНУ2ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ3ПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОтправительНУ", "СчетОтправительНУ");

	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоПолучательНУ3) ИЛИ НЕ Объект.ОтображатьРеквизитыПолучателя Тогда
		СтрокаТаблицы.СубконтоПолучательНУ3 = СтрокаТаблицы.СубконтоОтправительНУ3;
		ДанныеБухСубконтоПолучательНУ3ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ПолучательНУ", "СчетПолучательНУ");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительНУ",  1, "СчетОтправительНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительНУ",  2, "СчетОтправительНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоОтправительНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоОтправительНУ",  3, "СчетОтправительНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательНУ",  1, "СчетПолучательНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательНУ",  2, "СчетПолучательНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухСубконтоПолучательНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДанныеБух.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоПолучательНУ",  3, "СчетПолучательНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеБух.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчетСуммыПоКурсу(СтрокаТабличнойЧасти.ВалютнаяСумма, СтрокаТабличнойЧасти.Валюта, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеБухВалютнаяСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеБух.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчетСуммыПоКурсу(СтрокаТабличнойЧасти.ВалютнаяСумма, СтрокаТабличнойЧасти.Валюта, Объект.Дата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтображатьРеквизитыПолучателя(Команда)
	
	Объект.ОтображатьРеквизитыПолучателя = НЕ Объект.ОтображатьРеквизитыПолучателя;

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамСчетовБУ(Команда)
	
	Если Объект.ДанныеБух.Количество() <> 0 Тогда
		
		ОписаниеОповещенияПриЗакрытии = Новый ОписаниеОповещения("ВопросОбОчисткеТабличнойЧастиПриЗаполненииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияПриЗакрытии, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	КлючеваяОперация = "Документ ""авизо прочее"" (заполнение)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ОткрытьФормуНастройкиСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеБух(Команда)
	
	ИзменитьТабличнуюЧасть("ДанныеБух", НСтр("ru = 'Данные бух. учета'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗначенияНастроекПользователя     = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,ОтражатьДокументыВНалоговомУчете");
	ПоказыватьВДокументахСчетаУчета  = Истина;
	ОтражатьДокументыВНалоговомУчете = ЗначенияНастроекПользователя.ОтражатьДокументыВНалоговомУчете; 
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
	КонецЕсли;
	
	ИсходнаяОрганизация = Объект.Организация;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УстановитьПараметрыВыбораСчетов(ЭтаФорма);
	
	УстановитьДоступностьСубконто();
	
	УправлениеФормой(ЭтаФорма);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ
		 (ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь И (ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)));
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь 
		 И НЕ(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)) Тогда
		
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Ложь;
	Иначе
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Истина;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
    Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.УчитыватьКПН.Видимость 	 	 = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.КнопкаОтображатьРеквизитыПолучателя.Пометка = Объект.ОтображатьРеквизитыПолучателя;
	
	Если НЕ Объект.ОтображатьРеквизитыПолучателя Тогда    		
		Элементы.ДанныеБухСчетОтправительБУ.Заголовок      = НСтр("ru = 'Счет (БУ)'");
		Элементы.ДанныеБухСубконтоОтправительБУ1.Заголовок = НСтр("ru = 'Субконто (БУ) 1'");
		Элементы.ДанныеБухСубконтоОтправительБУ2.Заголовок = НСтр("ru = 'Субконто (БУ) 2'");
		Элементы.ДанныеБухСубконтоОтправительБУ3.Заголовок = НСтр("ru = 'Субконто (БУ) 3'");
		
		Элементы.ДанныеБухСчетОтправительНУ.Заголовок      = НСтр("ru = 'Счет (НУ)'");
		Элементы.ДанныеБухСубконтоОтправительНУ1.Заголовок = НСтр("ru = 'Субконто (НУ) 1'");
		Элементы.ДанныеБухСубконтоОтправительНУ2.Заголовок = НСтр("ru = 'Субконто (НУ) 2'");
		Элементы.ДанныеБухСубконтоОтправительНУ3.Заголовок = НСтр("ru = 'Субконто (НУ) 3'");		
		Элементы.ДанныеБухВидУчетаНУОтправитель.Заголовок  = НСтр("ru = 'Вид учета НУ'");
	Иначе    		
		Элементы.ДанныеБухСчетОтправительБУ.Заголовок      = НСтр("ru = 'Счет отправитель (БУ)'");
		Элементы.ДанныеБухСубконтоОтправительБУ1.Заголовок = НСтр("ru = 'Субконто отправитель (БУ) 1'");
		Элементы.ДанныеБухСубконтоОтправительБУ2.Заголовок = НСтр("ru = 'Субконто отправитель (БУ) 2'");
		Элементы.ДанныеБухСубконтоОтправительБУ3.Заголовок = НСтр("ru = 'Субконто отправитель (БУ) 3'");
		
		Элементы.ДанныеБухСчетОтправительНУ.Заголовок      = НСтр("ru = 'Счет отправитель (НУ)'");
		Элементы.ДанныеБухСубконтоОтправительНУ1.Заголовок = НСтр("ru = 'Субконто отправитель (НУ) 1'");
		Элементы.ДанныеБухСубконтоОтправительНУ2.Заголовок = НСтр("ru = 'Субконто отправитель (НУ) 2'");
		Элементы.ДанныеБухСубконтоОтправительНУ3.Заголовок = НСтр("ru = 'Субконто отправитель (НУ) 3'");
		Элементы.ДанныеБухВидУчетаНУОтправитель.Заголовок  = НСтр("ru = 'Вид учета НУ (отправитель)'");
	КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	Если Объект.УчитыватьКПН Тогда
		Для Каждого СтрокаТабличнойЧасти ИЗ Объект.ДанныеБух Цикл
			
			ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОтражатьДокументыВНалоговомУчете"); 
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидУчетаНУОтправитель) Тогда
				Если ОтражатьДокументыВНалоговомУчете Тогда
					СтрокаТабличнойЧасти.ВидУчетаНУОтправитель = Справочники.ВидыУчетаНУ.НУ;
				Иначе				
					СтрокаТабличнойЧасти.ВидУчетаНУОтправитель = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
				КонецЕсли;				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидУчетаНУПолучатель) Тогда
				Если ОтражатьДокументыВНалоговомУчете Тогда
					СтрокаТабличнойЧасти.ВидУчетаНУПолучатель = Справочники.ВидыУчетаНУ.НУ;
				Иначе				
					СтрокаТабличнойЧасти.ВидУчетаНУПолучатель = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
	Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СтруктурноеПодразделениеОрганизацияПолучатель  = Объект.Организация;
	Объект.СтруктурноеПодразделениеПолучатель      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Отправитель");
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Получатель");

	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);

	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УправлениеФормой(ЭтаФорма);
	
	ИсходнаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(Направление = "Отправитель")
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.ДанныеБух.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетов = Новый СписокЗначений;
	
	// ТЧ ДанныеБух
	СписокАналитикиСчетов.Добавить(Направление + "БУ");
	СписокАналитикиСчетов.Добавить(Направление + "НУ");
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.ДанныеБух, СписокАналитикиСчетов);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект["СтруктурноеПодразделение" + Направление], , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеБухСчетОтправительБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоОтправительБУ1", "СубконтоОтправительБУ2", "СубконтоОтправительБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоОтправительБУ1, СтрокаТабличнойЧасти.СубконтоОтправительБУ2, СтрокаТабличнойЧасти.СубконтоОтправительБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоОтправительНУ1", "СубконтоОтправительНУ2", "СубконтоОтправительНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоОтправительНУ1, СтрокаТабличнойЧасти.СубконтоОтправительНУ2, СтрокаТабличнойЧасти.СубконтоОтправительНУ3));
															
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетОтправительБУ);
	СтрокаТабличнойЧасти.СчетОтправительБУКоличественный = СвойстваСчета.Количественный;
	СтрокаТабличнойЧасти.СчетОтправительБУВалютный       = СвойстваСчета.Валютный;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеБухСчетПолучательБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоПолучательБУ1", "СубконтоПолучательБУ2", "СубконтоПолучательБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоПолучательБУ1, СтрокаТабличнойЧасти.СубконтоПолучательБУ2, СтрокаТабличнойЧасти.СубконтоПолучательБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоПолучательНУ1", "СубконтоПолучательНУ2", "СубконтоПолучательНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоПолучательНУ1, СтрокаТабличнойЧасти.СубконтоПолучательНУ2, СтрокаТабличнойЧасти.СубконтоПолучательНУ3));
															
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетПолучательБУ);
	СтрокаТабличнойЧасти.СчетПолучательБУКоличественный = СвойстваСчета.Количественный;
	СтрокаТабличнойЧасти.СчетПолучательБУВалютный       = СвойстваСчета.Валютный;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеБухСубконтоПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Субконто, "ВалютаВзаиморасчетов");
	СтрокаТабличнойЧасти.Валюта = ВалютаДоговора;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма) Тогда
		СтрокаТабличнойЧасти.Сумма = ПересчетСуммыПоКурсу(СтрокаТабличнойЧасти.ВалютнаяСумма, СтрокаТабличнойЧасти.Валюта, СтрокаТабличнойЧасти.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеБухСчетОтправительНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоОтправительНУ1", "СубконтоОтправительНУ2", "СубконтоОтправительНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоОтправительНУ1, СтрокаТабличнойЧасти.СубконтоОтправительНУ2, СтрокаТабличнойЧасти.СубконтоОтправительНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеБухСчетПолучательНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоПолучательНУ1", "СубконтоПолучательНУ2", "СубконтоПолучательНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоПолучательНУ1, СтрокаТабличнойЧасти.СубконтоПолучательНУ2, СтрокаТабличнойЧасти.СубконтоПолучательНУ3));
															
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправителя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;	
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда 
			ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Отправитель");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда 
			ПриИзмененииЗначенияСтруктурногоПодразделенияСервер("Получатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеТабличнойЧастиПриЗаполненииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСчетов()
	
	ПараметрыФормы = Новый Структура("МассивВыбранныхСчетов, МассивДоступныхСчетов", 
									  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.ПредставлениеСпискаСчетовБУ,,Истина,Истина),
									  СписокДоступныхСчетов.ВыгрузитьЗначения());
									  
	ОписаниеОповещенияПриЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамСчетовБУПослеВыбораСчетов", ЭтотОбъект);
	ОткрытьФорму("Документ.АвизоПрочее.Форма.ФормаНастройкиСчетов", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамСчетовБУПослеВыбораСчетов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ПредставлениеСпискаСчетовБУ = СтрСоединить(Результат.МассивВыбранныхСчетов, ",");
	
	ЗаполнитьПоОстаткамСчетовБУНаСервере(Результат.МассивСсылокВыбранныхСчетов);
	
КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоОстаткамСчетовБУНаСервере(МассивСчетов)
	
	Документы.АвизоПрочее.ЗаполнитьПоОстаткамСчетовБУНаСервере(Объект, МассивСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Сумма");
	СтруктураРеквизитов.Вставить("Валюта");
	СтруктураРеквизитов.Вставить("ВалютнаяСумма");
	СтруктураРеквизитов.Вставить("Содержание");
	
	СтруктураРеквизитов.Вставить("СчетОтправительБУ");
	СтруктураРеквизитов.Вставить("СубконтоОтправительБУ1");
	СтруктураРеквизитов.Вставить("СубконтоОтправительБУ2");
	СтруктураРеквизитов.Вставить("СубконтоОтправительБУ3");
	
	СтруктураРеквизитов.Вставить("СчетПолучательБУ");
	СтруктураРеквизитов.Вставить("СубконтоПолучательБУ1");
	СтруктураРеквизитов.Вставить("СубконтоПолучательБУ2");
	СтруктураРеквизитов.Вставить("СубконтоПолучательБУ3");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	СтруктураСвязанныхРеквизитов.Вставить("СчетОтправительБУ", "СубконтоОтправительБУ1, СубконтоОтправительБУ2, СубконтоОтправительБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетПолучательБУ", "СубконтоПолучательБУ1, СубконтоПолучательБУ2, СубконтоПолучательБУ3");
	
	Если Объект.УчитыватьКПН Тогда
		СтруктураРеквизитов.Вставить("СчетОтправительНУ");
		СтруктураРеквизитов.Вставить("СубконтоОтправительНУ1");
		СтруктураРеквизитов.Вставить("СубконтоОтправительНУ2");
		СтруктураРеквизитов.Вставить("СубконтоОтправительНУ3");
		СтруктураРеквизитов.Вставить("ВидУчетаНУОтправитель");
		
		СтруктураРеквизитов.Вставить("СчетПолучательНУ");
		СтруктураРеквизитов.Вставить("СубконтоПолучательНУ1");
		СтруктураРеквизитов.Вставить("СубконтоПолучательНУ2");
		СтруктураРеквизитов.Вставить("СубконтоПолучательНУ3");		
		СтруктураРеквизитов.Вставить("ВидУчетаНУПолучатель");
		
		СтруктураСвязанныхРеквизитов.Вставить("СчетОтправительНУ", "СубконтоОтправительНУ1, СубконтоОтправительНУ2, СубконтоОтправительНУ3");
		СтруктураСвязанныхРеквизитов.Вставить("СчетПолучательНУ", "СубконтоПолучательНУ1, СубконтоПолучательНУ2, СубконтоПолучательНУ3");
	КонецЕсли; 		
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры


// Процедуры работы с субконто

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетов(Форма)
	
	МассивДоступныхСчетов = ЗаполнитьСписокИспользуемыхСчетовБУ();
	Форма.СписокДоступныхСчетов.ЗагрузитьЗначения(МассивДоступныхСчетов);
	
	ПараметрыВыбора = Новый Массив; 
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивДоступныхСчетов));

	Форма.Элементы.ДанныеБухСчетОтправительБУ.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Форма.Элементы.ДанныеБухСчетПолучательБУ.ПараметрыВыбора  = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ТекущаяСтрока = Форма.Элементы.ДанныеБух.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Форма.Объект.ДанныеБух.НайтиПоИдентификатору(ТекущаяСтрока);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ДанныеБухСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для Каждого СтрокаТЧ Из Объект.ДанныеБух Цикл
		
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, "ДанныеБух");
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаЗатрат = "СубконтоОтправитель";
	ИмяСчетаЗатрат    = "СчетОтправитель";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоОтправительБУ1", "СубконтоОтправительБУ2", "СубконтоОтправительБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетОтправительБУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоОтправительНУ1", "СубконтоОтправительНУ2", "СубконтоОтправительНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетОтправительНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);	
	
	
	ИмяЭлементаЗатрат = "СубконтоПолучатель";
	ИмяСчетаЗатрат    = "СчетПолучатель";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоПолучательБУ1", "СубконтоПолучательБУ2", "СубконтоПолучательБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетПолучательБУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоПолучательНУ1", "СубконтоПолучательНУ2", "СубконтоПолучательНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетПолучательНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);	
	

КонецПроцедуры

// Служебные процедуры и функции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДанныеБух Цикл
		
		ЗаполнитьДобавленныеКолонкиВСтрокеТаблицы(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиВСтрокеТаблицы(СтрокаТабличнойЧасти)
	
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетОтправительБУ);
	СтрокаТабличнойЧасти.СчетОтправительБУКоличественный = СвойстваСчета.Количественный;
	СтрокаТабличнойЧасти.СчетОтправительБУВалютный       = СвойстваСчета.Валютный;
	
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетПолучательБУ);
	СтрокаТабличнойЧасти.СчетПолучательБУКоличественный  = СвойстваСчета.Количественный;
	СтрокаТабличнойЧасти.СчетПолучательБУВалютный        = СвойстваСчета.Валютный;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокИспользуемыхСчетовБУ()
	
	МассивИспользуемыхСчетов = Новый Массив;
	
	МассивИсключенияСчетов = Новый Массив;
	
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.Товары);
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку);
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.РезервПоСписаниюЗапасов);
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.МонтажОборудования); 
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_); 
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); 
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам); 
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_); 
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство); //1341
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства); //1342
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство_ВспомогательныеПроизводства); //1343
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство); //1341
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_); //81000
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_); //8200
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства_); //8300
	МассивИсключенияСчетов.Добавить(ПланыСчетов.Типовой.НакладныеРасходы_); //8400
	
	СчетТары = ПланыСчетов.Типовой.НайтиПоКоду("1352");
	Если СчетТары <> Неопределено И ПланыСчетов.Типовой.ПолучитьИмяПредопределенного(СчетТары) = "ТараПереданная" Тогда
		МассивИсключенияСчетов.Добавить(СчетТары);
	КонецЕсли;
	
	СчетТоварыПереданные = ПланыСчетов.Типовой.НайтиПоКоду("1353");
	Если СчетТоварыПереданные <> Неопределено И ПланыСчетов.Типовой.ПолучитьИмяПредопределенного(СчетТоварыПереданные) = "ТоварыПереданныеНаКомиссию" Тогда
		МассивИсключенияСчетов.Добавить(СчетТоварыПереданные);
	КонецЕсли;     	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Типовой.Ссылка Как Счет,
	               |	Типовой.Код
	               |ИЗ
	               |	ПланСчетов.Типовой КАК Типовой
	               |ГДЕ
	               |	(НЕ Типовой.Забалансовый)
	               |	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)
	               |	И НЕ Типовой.Ссылка В ИЕРАРХИИ(&МассивИсключенияСчетов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Типовой.Код" ;
				   
	Запрос.УстановитьПараметр("МассивИсключенияСчетов", МассивИсключенияСчетов);			   
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	МассивИспользуемыхСчетов = ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
	Возврат МассивИспользуемыхСчетов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) 

	Запись = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Валюта, Дата);
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(Форма, ДанныеСтрокиТаблицы)
	
	ДанныеСтрокиТаблицы.ВидУчетаНУОтправитель  = ?(Форма.ОтражатьДокументыВНалоговомУчете, ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"), ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ"));			
	ДанныеСтрокиТаблицы.ВидУчетаНУПолучатель   = ДанныеСтрокиТаблицы.ВидУчетаНУОтправитель;
	
КонецПроцедуры
