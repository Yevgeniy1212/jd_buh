
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура Автозаполнение(Объект, ЭтотОбъект, ПоддержкаРаботыСоСтруктурнымиПодразделениями, МассивСотрудников = Неопределено) Экспорт
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "Начисления" и "ДополнительныеНачисления"
	// 
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Объект.ПодразделениеОрганизации = ПустоеПодразделение Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";		
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;	                                 	
	
	Если ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		УсловиеНаВидРасчета = "СписокНачислений.ВидРасчета = &парамВидРасчета";
	Иначе
		УсловиеНаВидРасчета = "";
	КонецЕсли;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Объект.Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПользователь" , Объект.Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение" , Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("парамРегистратор" ,Объект.Ссылка);
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетовФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());
	Запрос.УстановитьПараметр("парамВидРасчета", Объект.ВидРасчета);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = УчетнаяПолитикаСервер.ПолучитьТекстЗапросаУчетнойПолитикиПоПерсоналу();
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = СтрЗаменить(УчетнаяПолитикаПоПерсоналуОрганизацииТекст,"РАЗРЕШЕННЫЕ","");
	
	ТаблицаДвиженийРаботниковТекст = "
	|		// срез работников на начало месяца
	|		ВЫБРАТЬ
	|			&парамНачало КАК Период,
	|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			ИСТИНА КАК Подходит,
	|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
	|		
	|		ГДЕ 
	|			РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) И
	|			РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация 
	|			И СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|			" + ?(МассивСотрудников = Неопределено, "", "И Сотрудник В (&МассивСотрудников)") + "
	|			" + ?(ПоВсемПодразделениямОрганизации, "", "И " + УсловиеНаПодразделение) + "
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		// движения работников за месяц
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Период,
	|			РаботникиОрганизации.Сотрудник,
	|			ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|				И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|				" + ?(МассивСотрудников = Неопределено, "", "И РаботникиОрганизации.Сотрудник В (&МассивСотрудников)") + "
	|				И " + УсловиеНаПодразделение +" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|			РаботникиОрганизации.ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		
	|		ГДЕ
	|			РаботникиОрганизации.Период > &парамНачало И
	|			РаботникиОрганизации.Период <= &парамКонец И
	|			РаботникиОрганизации.Организация = &парамГоловнаяОрганизация И
	|			РаботникиОрганизации.Активность
	|";
	
	Если МассивСотрудников = Неопределено Тогда
	
		Объект.Начисления.Очистить();
		
	КонецЕсли;
	
	//Основной текст запроса
	ОсновнойТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНачислений.Сотрудник.Физлицо КАК Физлицо,
	|	СписокНачислений.Сотрудник,
	|	СписокНачислений.Подходит,
	|	СписокНачислений.Период,
	|	СписокНачислений.ПериодРаботники,
	|	СписокНачислений.ПериодНачисления,
	|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
	|	СписокНачислений.ВидРасчета КАК ВидРасчета,
	|	ЕСТЬNULL(СписокНачислений.Размер, 0) КАК Размер,
	|	СписокНачислений.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СписокНачислений.ПодразделениеОрганизации,
	|	ВЫБОР КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL Тогда ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК УжеПроведен,
	|	СписокНачислений.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.Сотрудник КАК Сотрудник,
	|		ВЫБОР КОГДА Работники.Период >= НачисленияРаботниковОрганизации.Период или НачисленияРаботниковОрганизации.Период есть NULL ТОГДА Работники.Период ИНАЧЕ НачисленияРаботниковОрганизации.Период КОНЕЦ КАК Период,
	|		Работники.Подходит КАК Подходит,
	|		Работники.Период КАК ПериодРаботники,
	|		НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
	|		НачисленияРаботниковОрганизации.ОсновноеНачисление КАК ОсновноеНачисление,
	|		НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|		НачисленияРаботниковОрганизации.Размер КАК Размер,
	|		Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ  // Выборка данных о движениии работников
	|		(" + ТаблицаДвиженийРаботниковТекст + ") КАК Работники  
	|
	|		// Присоединим действующие плановые начисления к строкам движений работников с признаком ПОДХОДИТ.
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				&парамНачало КАК Период,
	|				ВЫБОР 
	|					КОГДА (НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL)
	|						ТОГДА ИСТИНА 
	|					ИНАЧЕ ЛОЖЬ 
	|				КОНЕЦ КАК ОсновноеНачисление,
	|				НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|				НачисленияРаботниковОрганизации.Размер КАК Размер,
	|				НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК НачисленияРаботниковОрганизации
	|			
	|			ГДЕ
	|				(НачисленияРаботниковОрганизации.Размер <> 0)
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НачисленияРаботниковОрганизации.Период,
	|				ВЫБОР 
	|					КОГДА (НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL)
	|						ТОГДА ИСТИНА 
	|					ИНАЧЕ ЛОЖЬ 
	|				КОНЕЦ КАК ОсновноеНачисление,
	|				НачисленияРаботниковОрганизации.ВидРасчета,
	|				НачисленияРаботниковОрганизации.Размер,
	|				НачисленияРаботниковОрганизации.Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|			
	|			ГДЕ
	|				НачисленияРаботниковОрганизации.Период > &парамНачало И
	|				НачисленияРаботниковОрганизации.Период <= &парамКонец И
	|				НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация) КАК НачисленияРаботниковОрганизации
	|		ПО Работники.Подходит = ИСТИНА 
	|	       И НачисленияРаботниковОрганизации.Сотрудник = Работники.Сотрудник) КАК СписокНачислений
	|
	|	// Выборка сведений о уже выполненных начислениях за отработанное время и фиксированной суммой
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|			ОсновныеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|			ОсновныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|			НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + УчетнаяПолитикаПоПерсоналуОрганизацииТекст + ") КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|				ПО ОсновныеНачисления.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация	
	|		
	|		ГДЕ
	|			ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамНачало И
	|			ВЫБОР 
	|				КОГДА ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации = ИСТИНА ТОГДА 
	|					ВЫБОР 
	|						КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|							ТОГДА ОсновныеНачисления.Ссылка.Организация
	|						ИНАЧЕ 
	|							ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация 
	|					КОНЕЦ
	|				ИНАЧЕ ОсновныеНачисления.Ссылка.Организация
	|			КОНЕЦ = &парамГоловнаяОрганизация И 
	|			(ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени ИЛИ
	|			ОсновныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетовФиксированнойСуммой)) И
	|			ОсновныеНачисления.Ссылка <> &парамРегистратор И
	|			ОсновныеНачисления.Ссылка.Проведен) Как ОсновныеНачисления
	|	ПО ОсновныеНачисления.Сотрудник = СписокНачислений.Сотрудник 
	|	   И ВЫБОР 
	|			КОГДА ОсновныеНачисления.СпособРасчета В (&парамСписокСпособовРасчетовФиксированнойСуммой) 
	|				ТОГДА ОсновныеНачисления.ВидРасчета = СписокНачислений.ВидРасчета 
	|			ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации = СписокНачислений.ПодразделениеОрганизации 
	|		 КОНЕЦ 
	|	   И ОсновныеНачисления.ПериодДействия = &парамНачало
	|
	|ГДЕ
	|	// исключим из выборки строки начислений соответствующие началу назначений (подходит = истина) и не имеющие видов начислений
	|	(ВЫБОР 
	|		КОГДА СписокНачислений.Подходит ТОГДА НЕ((СписокНачислений.ВидРасчета) ЕСТЬ NULL ) 
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ)
	|	" + ?(УсловиеНаВидРасчета <> "", " И " + УсловиеНаВидРасчета, "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	СписокНачислений.Сотрудник,
	|	СписокНачислений.ПериодРаботники,
	|	СписокНачислений.ПериодНачисления,
	|	СписокНачислений.ОсновноеНачисление УБЫВ, // основное начисление должно встретиться в выборке первым
	|	СписокНачислений.ВидРасчета";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	НачисленияВыборка = Запрос.Выполнить().Выбрать();
	
	ТЗНачисления = СформироватьТаблицуНачислений(НачисленияВыборка, Объект);
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета, ДатаНачала ");
	
	Для	Каждого	НачислениеИзТаблицыЗначений	из	ТЗНачисления Цикл
		
		Если МассивСотрудников <> Неопределено Тогда
			СтруктураПоиска.Сотрудник 	= НачислениеИзТаблицыЗначений.Сотрудник;
			СтруктураПоиска.ВидРасчета 	= НачислениеИзТаблицыЗначений.ВидРасчета;
			СтруктураПоиска.ДатаНачала  = НачислениеИзТаблицыЗначений.ДатаНачала;

			МассивНачислений 			= Объект.Начисления.НайтиСтроки(СтруктураПоиска);
			Если МассивНачислений.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		НоваяСтрока	=	Объект.Начисления.Добавить();
		НоваяСтрока.Сотрудник				=	НачислениеИзТаблицыЗначений.Сотрудник;
		НоваяСтрока.ФизЛицо					=	НачислениеИзТаблицыЗначений.ФизЛицо;
		НоваяСтрока.ВидРасчета				=	НачислениеИзТаблицыЗначений.ВидРасчета;
		НоваяСтрока.Размер					=	НачислениеИзТаблицыЗначений.Размер;
		НоваяСтрока.ДатаНачала				=	НачислениеИзТаблицыЗначений.ДатаНачала;
		НоваяСтрока.ДатаОкончания			=	НачислениеИзТаблицыЗначений.ДатаОкончания;
		НоваяСтрока.ПодразделениеОрганизации=	НачислениеИзТаблицыЗначений.ПодразделениеОрганизации;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Рассчитать(Объект, Сотрудник = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	
	Отказ = НЕ ПроцедурыУправленияПерсоналомСервер.РегламентированныйКалендарьЗаполнен(НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	Отказ = НЕ ДокументОбъект.ПроверитьЗаполнение() ИЛИ Отказ; 
	
	ПроверитьНаличиеКадровыхИзмененийПоСотрудникам(Объект, Отказ);
	
	Если Не Отказ Тогда
		ПроверитьНаНаличиеНесколькихРассчетовОтОбратногоПоОдномуСотруднику(Объект, Отказ);	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетовСервер.РассчитатьДокумент("ОсновныеНачисленияОрганизаций", 
												"НачислениеЗарплатыРаботникамОрганизаций",
												"Начисления", 
												Объект, 
												Сотрудник,
												КомментироватьРасчет);
												
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Начисления
// Параметры:
// 	выборка результатат запроса
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуНачислений(Начисления, Объект)
	
	ТЗНачисления = Новый ТаблицаЗначений();
	ТЗНачисления.Колонки.Добавить("Сотрудник");
	ТЗНачисления.Колонки.Добавить("ФизЛицо");
	ТЗНачисления.Колонки.Добавить("ВидРасчета");
	ТЗНачисления.Колонки.Добавить("Основное");// Признак основного начисления
	ТЗНачисления.Колонки.Добавить("Размер");
	ТЗНачисления.Колонки.Добавить("ДатаНачала", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаОкончания", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ПодразделениеОрганизации");
	ТЗНачисления.Колонки.Добавить("СпособРасчета");

    КонецМесяца = КонецМесяца(Объект.ПериодРегистрации);
	
	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	// Текущие значения полей выборки для отслеживания изменения работника и даты назначения
    ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ТекущаяДатаНазначения = Дата('00010101');
	СтрокиНачисленийТекущегоНазначения = Новый Массив;
	
	Пока Начисления.Следующий() Цикл
		
		Если Начисления.Сотрудник <> ТекущийСотрудник Тогда
			
			// закрываем незакрытые строки начислений предыдущего работника концом месяца
			ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
			
			// меняется текущий работник и дата его движения
			ТекущийСотрудник = Начисления.Сотрудник;
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			СтрокиНачисленийТекущегоНазначения.Очистить();
			
		ИначеЕсли Начисления.Подходит И Начисления.ПериодРаботники <> ТекущаяДатаНазначения Тогда
		
			// закрываем все строки предыдущего назначения датой предшествующей новому назначению
			ЗакрытьСтроки(ТЗНачисления, СтрокиНачисленийТекущегоНазначения, Начисления.ПериодРаботники - 1);
			НезакрытыеСтроки.Очистить();

			// меняется текущая дата движения работника
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
		
		КонецЕсли;	
			
		Если НЕ Начисления.Подходит ИЛИ Начисления.УжеПроведен Тогда
			// пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			// поэтому закрываем все строки предыдущего периода предшествующей датой движению
			Если Начисления.ПериодРаботники <> ТекущаяДатаНазначения Тогда
				ЗакрытьСтроки(ТЗНачисления, СтрокиНачисленийТекущегоНазначения, Начисления.ПериодРаботники - 1);
				НезакрытыеСтроки.Очистить();			
			КонецЕсли;
			
			// меняется текущая дата движения работника
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			
			Продолжить;
		КонецЕсли;
		
		// Расчет размера начисления
		РазмерНачисления = Начисления.Размер;	
		
		// Найдем такой же вид расчета среди незакрытых строк с целью завершения его действия
		Строка = Неопределено;
		ИндексСтроки = Неопределено;
		НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ОсновноеНачисление, Начисления.ВидРасчета, Строка, ИндексСтроки);
		Если Строка <> Неопределено Тогда
			// нашли
			Если Строка.ДатаНачала = Начисления.Период Тогда
				// если дата та же - новую строку в формируемую таблицу значений не вводит,
				// а меняем данные и оставляем строку "незакрытой"
				Строка.ВидРасчета = Начисления.ВидРасчета;// вид расчета необходимо переопределять для основного начисления
				Строка.Размер = РазмерНачисления;	
				Строка.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
				Строка.СпособРасчета = Начисления.СпособРасчета;
				Продолжить;
			Иначе
				// иначе - "закрываем" строку и удаляем из массива незакрытых
				Строка.ДатаОкончания = Начисления.Период-1;
				НезакрытыеСтроки.Удалить(ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
		
		// Добавим новую строку начислений
		Если Начисления.ВидРасчета <> Неопределено Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.ФизЛицо = Начисления.ФизЛицо;
			НоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
			НоваяСтрока.Основное = Начисления.ОсновноеНачисление;
			НоваяСтрока.Размер = РазмерНачисления;	
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	// закрываем незакрытые строки по последнему работнику концом месяца
	ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
	
    СписокНачисленныеВидыРасчетаФиксСуммой 	= Новый СписокЗначений;
    СписокСтрокРасчетаОтОбратного			= Новый СписокЗначений;

	ТекущийСотрудник = Неопределено;
	
	// Дополнительно обработаем таблицу начислений:
	// 1. Удалим строки, в которых поле Размер нулевое. Такие могут образоваться при прекращении начислений в течение месяца.
	// 2. Удалим двойные строки расчета фиксированной суммой, которые могут появиться при кадровых перемещениях в течение месяца.
	//    И также процентные надбавки, чтобы не было двух строк процентных надбавок в одном документе из-за перемещение в течение месяца,
	//	  поскольку % считается со всей табличной части документа, то уже в одной строке учтутся все базовые суммы и не надо двух %-ных строк.
	// 3. Разделившиеся строки расчета "от обратного"  свернем в одну, т.к. расчет идет в целом по физлицу за месяц.
	//
	КоличествоСтрок = ТЗНачисления.Количество();
	Для Н = 0 По КоличествоСтрок - 1 Цикл 
		Строка = ТЗНачисления[КоличествоСтрок - 1 - Н]; // идем в обратном хронологическом порядке чтобы учитывать значения на конец месяца
		РазмерНачисления = ?(Строка.Размер = NULL, 0, Окр(Строка.Размер, 3));
		
		Если (ТекущийСотрудник <> Строка.Сотрудник) Тогда
		
			Если СписокСтрокРасчетаОтОбратного.Количество() > 0 Тогда
				СвернутьСтрокиРасчетаОтОбратного(ТЗНачисления,
												 СписокСтрокРасчетаОтОбратного);
												 
			КонецЕсли;
			
			// Сменился работник, очищаем переменные состояния
			СписокНачисленныеВидыРасчетаФиксСуммой.Очистить();
			СписокСтрокРасчетаОтОбратного.Очистить();
			
			ТекущийСотрудник = Строка.Сотрудник;
			
		КонецЕсли;
		
		Если РазмерНачисления = 0 Тогда
			ТЗНачисления.Удалить(Строка);
		ИначеЕсли ПроведениеРасчетовСервер.ЭтоРасчетФиксированнойСуммой(Строка.СпособРасчета)
					ИЛИ Строка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			Если ТекущийСотрудник <> Строка.Сотрудник Тогда
				СписокНачисленныеВидыРасчетаФиксСуммой.Очистить();
				ТекущийСотрудник = Строка.Сотрудник;
			КонецЕсли;
			
			Если СписокНачисленныеВидыРасчетаФиксСуммой.НайтиПоЗначению(Строка.ВидРасчета) <> Неопределено Тогда
				// такой вид уже начисляли предыдущими строками документа, поэтому сейчас его уже не берем
				ТЗНачисления.Удалить(Строка);
			Иначе
				СписокНачисленныеВидыРасчетаФиксСуммой.Добавить(Строка.ВидРасчета);
			КонецЕсли;
		КонецЕсли;

		Если ТЗНачисления.Индекс(Строка) <> -1 Тогда // строка существует в таблице (не удалили на предыдущих шагах)
			Если ПроведениеРасчетовСервер.ЭтоРасчетОтОбратного(Строка.СпособРасчета) Тогда
				СписокСтрокРасчетаОтОбратного.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Свернем строки расчета "от обратного" для последнего человека из цикла
	Если СписокСтрокРасчетаОтОбратного.Количество() > 0 Тогда
		СвернутьСтрокиРасчетаОтОбратного(ТЗНачисления,
										 СписокСтрокРасчетаОтОбратного);
	КонецЕсли;
	
	Возврат ТЗНачисления;
	
КонецФункции // СформироватьТаблицуНачислений()

// Закрытие строк - ввод значения ДатаОкончания для тех строк у которых не нулевое 
// значение Размер и удаление тех, у кого ВидРасчета - неопределено или ДатаНачала > даты закрытия
// Параметры:
//  ТЗ           - таблица значений
//  НезакрытыеСтроки - массив незакрытых строк таблицы значений ТЗ
//  ДатаОкончания - дата, которую нужно проставить в качестве "закрывающей"
//
// Возвращаемое значение:
//  нет
//
Процедура ЗакрытьСтроки(ТЗ, НезакрытыеСтроки, ДатаОкончания)
	
	Для Каждого Строка Из НезакрытыеСтроки Цикл
		Если Строка.ВидРасчета = Неопределено ИЛИ Строка.ДатаНачала > ДатаОкончания Тогда
			ТЗ.Удалить(Строка);
		ИначеЕсли Строка.ДатаОкончания = Дата('00010101') или Строка.ДатаОкончания > ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	НезакрытыеСтроки.Очистить();
	
КонецПроцедуры // ЗакрытьСтроки()

// Найти строку в массиве строк по переданному виду расчета или по признаку "Основное"
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//	ПоискОсновного - признак поиска основного начисления
//  ВидРасчета   - вид расчета ссылка
//  Строка       - в этот параметр будет возвращена строка, начальное значение - НеОпределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - НеОпределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытых(НезакрытыеСтроки, ПоискОсновного, ВидРасчета, Строка, ИндексСтроки)
	
	Для Индекс  = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если (ПоискОсновного И НезакрытыеСтроки[Индекс].Основное) 
			ИЛИ (НЕ ПоискОсновного И НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета) Тогда
			ИндексСтроки = Индекс;
			Строка = НезакрытыеСтроки[Индекс];
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры  // НайтиСредиНезакрытых()

// Переформировывает строки расчетов "от обратного", чтобы по одному работнику была только одна строка расчета
// "от обратного" в документе.
// 
Процедура СвернутьСтрокиРасчетаОтОбратного(ТЗНачисления,
										   СписокСтрокРасчетаОтОбратного)

	Если СписокСтрокРасчетаОтОбратного.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;

	// Проконтролируем, чтобы не было двух разных видов расчета "от обратного",
	// т.к. в одном документе корректно посчитать можно только один вид "от обратного"
	//также чтобы не было одного вида расчета "от обратного" по сотруднику, но в разных периодах (в случае кдрового перемещения)
	ПредыдущийВидРасчета = Неопределено;
	ПредыдущаяДатаНачала    = Неопределено;
	ПредыдущаяДатаОкончания = Неопределено;
	
	Н = СписокСтрокРасчетаОтОбратного.Количество()-1;
	Пока Н >= 0 Цикл
		Строка = СписокСтрокРасчетаОтОбратного[Н].Значение;
		
		Если ПредыдущийВидРасчета = Неопределено ИЛИ ПредыдущаяДатаНачала = Неопределено ИЛИ ПредыдущаяДатаОкончания = Неопределено Тогда
			// запоминаем вид расчета, сроки расчета
			ПредыдущийВидРасчета = Строка.ВидРасчета;
			ПредыдущаяДатаНачала = Строка.ДатаНачала;
			ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		ИначеЕсли ПредыдущийВидРасчета <> Строка.ВидРасчета ИЛИ ПредыдущаяДатаНачала <> Строка.ДатаНачала ИЛИ ПредыдущаяДатаОкончания <> Строка.ДатаОкончания Тогда
			// повторяется вид расчета или сроки расчета
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: в одном документе нельзя рассчитывать более одного расчета ""от обратного"" для каждого отдельного сотрудника документа!'"), Строка.Сотрудник));
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;

	ДатаНачалаРасчетаОтОбратного 			= '99991231';
	ДатаОкончанияРасчетаОтОбратного 		= '00010101';
	ТекущийРазмер							= 0;
		
	Для Н = 0 По СписокСтрокРасчетаОтОбратного.Количество() -1 Цикл
		Строка = СписокСтрокРасчетаОтОбратного[Н].Значение;
		ДатаНачалаРасчетаОтОбратного	= Мин(ДатаНачалаРасчетаОтОбратного, Строка.ДатаНачала);
		ДатаОкончанияРасчетаОтОбратного = Макс(ДатаОкончанияРасчетаОтОбратного, Строка.ДатаОкончания);
				
		Если ТекущийРазмер <> 0 И Строка.Размер <> ТекущийРазмер Тогда
			// т.к. список содержит записи строк таблиц в обратном хронологическом порядке, то
			// ТекущийРазмер представляет собой более поздний, а Строка.Размер - более ранний
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: недопустимо изменять размер на руки для расчета ""от обратного"" в течение месяца (с %2 на %3)'"), Строка.Сотрудник, Строка(Строка.Размер), Строка(ТекущийРазмер)));
		КонецЕсли;
		ТекущийРазмер = Строка.Размер;
	КонецЦикла;
		
	Строка 					= СписокСтрокРасчетаОтОбратного[0].Значение;
	Строка.ДатаНачала 		= НачалоДня(ДатаНачалаРасчетаОтОбратного);
	Строка.ДатаОкончания 	= КонецДня(ДатаОкончанияРасчетаОтОбратного);
		
	Для Н = 1 По СписокСтрокРасчетаОтОбратного.Количество() - 1 Цикл
		// остальные строки начислений "от обратного" удалим
		Строка = СписокСтрокРасчетаОтОбратного[Н].Значение;
		ТЗНачисления.Удалить(Строка);
	КонецЦикла;
												  
КонецПроцедуры // СвернутьСтрокиРасчетаОтОбратного()

Процедура ПроверитьНаНаличиеНесколькихРассчетовОтОбратногоПоОдномуСотруднику(Объект, Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета) КАК ВидРасчета
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &СсылкаНачисление
	|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.СпособРасчета В(&СпособРасчетаОтОбратного)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета) > 1";
	
	Запрос.УстановитьПараметр("СсылкаНачисление", Объект.Ссылка);
	Запрос.УстановитьПараметр("СпособРасчетаОтОбратного", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовОтОбратного());
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекстСообщения = НСтр("ru = '%1: в одном документе нельзя рассчитывать более одного вида расчета ""от обратного""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаЗапроса.Сотрудник);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЦикла;	
КонецПроцедуры

Процедура ПроверитьНаличиеКадровыхИзмененийПоСотрудникам(Объект, Отказ)
	// Проверка на то, чтобы в табличной части у работников, дата приема на работу у которых приходится на месяц начисления и отлична от начала периода,
	// не проставилась дата начала начисления как дата начала периода
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Объект.ПодразделениеОрганизации = ПустоеПодразделение Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "РаботникиОрганизаций.ПодразделениеОрганизации.Владелец = &парамОрганизация";		
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;	      
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧНачисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Объект.Организация);
	Запрос.УстановитьПараметр("парамПодразделение" , Объект.ПодразделениеОрганизации);
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_СотрудникиДокумента
	|ИЗ
	|	&ТЧНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Период КАК Период,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА РаботникиОрганизаций.Период > ВТ_СотрудникиДокумента.ДатаНачала
	|				И РаботникиОрганизаций.Период <= ВТ_СотрудникиДокумента.ДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ошибка,
	|	ВТ_СотрудникиДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ПринятыеСотрудники
	|ИЗ
	|	ВТ_СотрудникиДокумента КАК ВТ_СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТ_СотрудникиДокумента.Сотрудник = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	РаботникиОрганизаций.Период >= &ДатаНачала
	|	И РаботникиОрганизаций.Период < &ДатаОкончания
	|	И РаботникиОрганизаций.Организация = &парамОрганизация
	|	" + " И " + УсловиеНаПодразделение + "
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПринятыеСотрудники.Сотрудник КАК Сотрудник,
	|	ВТ_ПринятыеСотрудники.Период КАК Период,
	|	ВТ_ПринятыеСотрудники.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	ВТ_ПринятыеСотрудники.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_ПринятыеСотрудники КАК ВТ_ПринятыеСотрудники
	|ГДЕ
	|	ВТ_ПринятыеСотрудники.Ошибка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//Отказ = Истина;
		Поле = "Начисления" + "[" + Формат(Выборка.НомерСтроки-1, "ЧН=0; ЧГ=") + "].ДатаНачала";
		Если Выборка.ПричинаИзмененияСостояния = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу") Тогда
			ТекстОшибки = НСтр("ru = 'Сотрудник ""%1"" был принят на работу позже даты начисления, %2'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Сотрудник ""%1"" был перемещен позже даты начисления, %2 '");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.Сотрудник, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, "Объект");
		
	КонецЦикла;
	
КонецПроцедуры

// Правило проверки ведения учета

Процедура ПроверкаРегистрацияОблагаемыхДоходовЗаИП(Проверка, ПараметрыПроверки) Экспорт

	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Результат = РезультатПроверкаРегистрацияОблагаемыхДоходовЗаИП(ПараметрыПроверки.ДатаНачалаПроверки);
	
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'За период %1 для %2 не зарегистрирован доход ИП документом ""Регистрация прочих доходов в целях налогообложения"".'", КодЯзыка),Формат(Выборка.Период, "Л=" + КодЯзыка + "; ДФ='ММММ гггг'"),Выборка.Организация.ИндивидуальныйПредприниматель);
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Организация, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;  
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(Новый Структура("ПериодРегистрации", Выборка.Период));
				МодульКонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция РезультатПроверкаРегистрацияОблагаемыхДоходовЗаИП(ДатаНачала = Неопределено) 
		
	Если ДатаНачала = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1);
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	
	ДатаОкончания = ОбщегоНазначения.ТекущаяДатаПользователя();

	ТекстЗапросаПоМесяцам = "";
	МесяцНачала = Месяц(ДатаНачала);
	МесяцКонца  = Месяц(ДатаОкончания); 
	КоличествоЛетМеждуДатами = Год(ДатаОкончания) - Год(ДатаНачала);
	МесяцКонца = КоличествоЛетМеждуДатами * 12 + МесяцКонца;
	Для Счетчик = МесяцНачала по МесяцКонца Цикл
		Если Не ТекстЗапросаПоМесяцам = "" Тогда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| 
			|	ВЫБРАТЬ
			|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
			| ";
		Иначе
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
			|	ВЫБРАТЬ
			|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
			| Поместить ВТ_ТаблицаПоМесяцам
			| ";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(ДатаНачала,Счетчик - Месяц(ДатаНачала))));	
	КонецЦикла;	
		
	ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + " 
	|ИНДЕКСИРОВАТЬ ПО
	|	Период";
	
	Запрос.Текст = ТекстЗапросаПоМесяцам + "; 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаПоМесяцам.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодУчетнаяПолитика,
	|	УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация
	|ПОМЕСТИТЬ ПериодыУчетнаяПолитика
	|ИЗ
	|	ВТ_ТаблицаПоМесяцам КАК ВТ_ТаблицаПоМесяцам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ВТ_ТаблицаПоМесяцам.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПоМесяцам.Период, 
	|	УчетнаяПолитикаНалоговыйУчет.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПериодыУчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП КАК ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	|   ПериодыУчетнаяПолитика.Организация
	|ПОМЕСТИТЬ УчетнаяПолитика
	|ИЗ
	|	ПериодыУчетнаяПолитика КАК ПериодыУчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ПериодыУчетнаяПолитика.ПериодУчетнаяПолитика = УчетнаяПолитикаНалоговыйУчет.Период
	|			И (ПериодыУчетнаяПолитика.Организация = УчетнаяПолитикаНалоговыйУчет.Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодыУчетнаяПолитика.Период,
	|   ПериодыУчетнаяПолитика.Организация,
	|	УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	|	ДокРегистрация.Ссылка,
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	|	УчетнаяПолитика.Организация КАК Организация  
	|ИЗ
	|	УчетнаяПолитика КАК УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения КАК ДокРегистрация
	|		ПО УчетнаяПолитика.Период = НАЧАЛОПЕРИОДА(ДокРегистрация.ПериодРегистрации, МЕСЯЦ)
	|			И (УчетнаяПолитика.Организация = ДокРегистрация.Организация)
	|			И (ДокРегистрация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП))
	|			И (ДокРегистрация.Проведен = ИСТИНА)
	|ГДЕ
	|	УчетнаяПолитика.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ИСТИНА
	|	И ДокРегистрация.Ссылка ЕСТЬ NULL 
	|";
			
	Результат = Запрос.Выполнить();	
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(Ссылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период",	Ссылка.ПериодРегистрации);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	Реквизиты.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаРаботыСоСтруктурнымиПодразделениями	 , "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Запрос.УстановитьПараметр("Организация", 			   					  Реквизиты.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", 					  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",  					  Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПодготовитьТаблицыДокумента(Запрос, Реквизиты);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачисления(НомераТаблиц, Реквизиты);

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
			
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц) 
	
	НомераТаблиц.Вставить("ВременнаяТаблица_ДанныеДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблица_Реквизиты", 	  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", 						  НомераТаблиц.Количество());
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеЗарплаты.Дата,
		|	НачислениеЗарплаты.ПериодРегистрации,
		|	НачислениеЗарплаты.Организация,
		|	НачислениеЗарплаты.СтруктурноеПодразделение,
		|	НачислениеЗарплаты.Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеЗарплаты.Дата,
		|	НачислениеЗарплаты.ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации, ИСТИНА)
		|			ТОГДА ВЫБОР
		|					КОГДА НачислениеЗарплаты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|						ТОГДА НачислениеЗарплаты.Организация
		|					ИНАЧЕ НачислениеЗарплаты.Организация.ГоловнаяОрганизация
		|				КОНЕЦ
		|		ИНАЧЕ НачислениеЗарплаты.Организация
		|	КОНЕЦ КАК ГоловнаяОрганизация,
		|	НачислениеЗарплаты.Организация,
		|	НачислениеЗарплаты.СтруктурноеПодразделение,
		|	НачислениеЗарплаты.Ссылка,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников, ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.Общеустановленный)) КАК ПорядокОбложенияДоходовРаботников,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.РежимНалогообложения, ЗНАЧЕНИЕ(Перечисление.РежимНалогообложения.Общеустановленный)) КАК РежимНалогообложения,
		|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
		|				И НачислениеЗарплаты.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА НачислениеЗарплаты.Организация.ИндивидуальныйПредприниматель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ИндивидуальныйПредприниматель
		|ПОМЕСТИТЬ ВТ_Реквизиты
		|ИЗ
		|	ВТ_ДанныеДокумента КАК НачислениеЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО НачислениеЗарплаты.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&Период, ) КАК УчетнаяПолитикаНУ
		|		ПО НачислениеЗарплаты.Организация = УчетнаяПолитикаНУ.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реквизиты.Дата,
		|	Реквизиты.ПериодРегистрации,
		|	Реквизиты.ГоловнаяОрганизация,
		|	Реквизиты.Организация,
		|	Реквизиты.СтруктурноеПодразделение,
		|	Реквизиты.Ссылка,
		|	Реквизиты.ОтражениеПоПериодуРегистрации,
		|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций,
		|	Реквизиты.ОрганизацияЯвляетсяВкладчикомОППВ,
		|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями,
		|	Реквизиты.РежимНалогообложения,
		|	Реквизиты.ПорядокОбложенияДоходовРаботников,
		|	Реквизиты.ИндивидуальныйПредприниматель
		|ИЗ
		|	ВТ_Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНаличияСтавокОСМС(Реквизиты)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|			ТОГДА &Период
	|		ИНАЧЕ Данные.ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Сотрудник.Физлицо = Реквизиты.ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	ВТ_Начисления КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыНачислений.Период КАК ПериодНачисления,
	|	ВТ_ПериодыНачислений.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода
	|ПОМЕСТИТЬ вт_СведенияОСтавкаПоПериодам
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_ПериодыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_ПериодыНачислений.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_ПериодыНачислений.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОСтавкахОСМС.ВидДохода,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	ВТ_ПериодыНачислений.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПериодыНачислений.Период,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	МАКСИМУМ(УчетнаяПолитика.Период),
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2))
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_ПериодыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(ВТ_ПериодыНачислений.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыНачислений.Период,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачисления,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СведенияОСтавкаПоПериодам.ПериодНачисления КАК ПериодНачисления,
	|	вт_СведенияОСтавкаПоПериодам.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ СведенияОСтавкахОСМС.СтавкаВзносы ЕСТЬ NULL
	|			ТОГДА СведенияОСтавкахОСМС.СтавкаВзносы
	|		КОГДА НЕ УчетнаяПолитикаПоНалоговомуУчету.СтавкаВОСМСДляИП ЕСТЬ NULL
	|			ТОГДА УчетнаяПолитикаПоНалоговомуУчету.СтавкаВОСМСДляИП
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0) КАК ЕстьСтавкаВзноса,
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОСтавкахОСМС.СтавкаОтчисления, 0) <> 0) КАК ЕстьСтавкаОтчисления
	|
	|ПОМЕСТИТЬ вт_УчитыватьОСМС
	|ИЗ
	|	вт_СведенияОСтавкаПоПериодам КАК вт_СведенияОСтавкаПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО вт_СведенияОСтавкаПоПериодам.Период = СведенияОСтавкахОСМС.Период
	|			И вт_СведенияОСтавкаПоПериодам.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаПоНалоговомуУчету
	|		ПО вт_СведенияОСтавкаПоПериодам.Период = УчетнаяПолитикаПоНалоговомуУчету.Период
	|			И вт_СведенияОСтавкаПоПериодам.ВидДохода = ""ИП""
	|
	|ГДЕ
	|	((ВЫБОР
	|		КОГДА НЕ СведенияОСтавкахОСМС.СтавкаВзносы ЕСТЬ NULL
	|			ТОГДА СведенияОСтавкахОСМС.СтавкаВзносы
	|		КОГДА НЕ УчетнаяПолитикаПоНалоговомуУчету.СтавкаВОСМСДляИП ЕСТЬ NULL
	|			ТОГДА УчетнаяПолитикаПоНалоговомуУчету.СтавкаВОСМСДляИП
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> 0) 
	|	ИЛИ ЕСТЬNULL(СведенияОСтавкахОСМС.СтавкаОтчисления, 0) <> 0	
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СведенияОСтавкаПоПериодам.ПериодНачисления,
	|	вт_СведенияОСтавкаПоПериодам.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачисления,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыПоДокументу	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_СведенияОСтавкаПоПериодам	
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНаличияСтавокОПВР(Реквизиты)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Сотрудник,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|			ТОГДА &Период
	|		ИНАЧЕ Данные.ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Сотрудник.Физлицо = Реквизиты.ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	ВТ_Начисления КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыНачислений.Период КАК ПериодНачисления,
	|	ВТ_ПериодыНачислений.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода КАК ВидДохода
	|ПОМЕСТИТЬ вт_СведенияОСтавкаПоПериодам
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_ПериодыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ВТ_ПериодыНачислений.Период >= СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВТ_ПериодыНачислений.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|			И СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	ВТ_ПериодыНачислений.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПериодыНачислений.Период,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	МАКСИМУМ(УчетнаяПолитика.Период),
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2))
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_ПериодыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(ВТ_ПериодыНачислений.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыНачислений.Период,
	|	ВТ_ПериодыНачислений.Сотрудник,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачисления,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СведенияОСтавкаПоПериодам.ПериодНачисления КАК ПериодНачисления,
	|	вт_СведенияОСтавкаПоПериодам.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ СведенияОСтавкахНалоговСборовОтчислений.Ставка ЕСТЬ NULL
	|			ТОГДА СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|		КОГДА НЕ УчетнаяПолитикаПоНалоговомуУчету.СтавкаОПВРДляИП ЕСТЬ NULL
	|			ТОГДА УчетнаяПолитикаПоНалоговомуУчету.СтавкаОПВРДляИП
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0) КАК ЕстьСтавкаВзноса
	|
	|ПОМЕСТИТЬ вт_УчитыватьОПВР
	|ИЗ
	|	вт_СведенияОСтавкаПоПериодам КАК вт_СведенияОСтавкаПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО вт_СведенияОСтавкаПоПериодам.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И вт_СведенияОСтавкаПоПериодам.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаПоНалоговомуУчету
	|		ПО вт_СведенияОСтавкаПоПериодам.Период = УчетнаяПолитикаПоНалоговомуУчету.Период
	|			И вт_СведенияОСтавкаПоПериодам.ВидДохода = ""ИП""
	|
	|ГДЕ
	|	((ВЫБОР
	|		КОГДА НЕ СведенияОСтавкахНалоговСборовОтчислений.Ставка ЕСТЬ NULL
	|			ТОГДА СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|		КОГДА НЕ УчетнаяПолитикаПоНалоговомуУчету.СтавкаОПВРДляИП ЕСТЬ NULL
	|			ТОГДА УчетнаяПолитикаПоНалоговомуУчету.СтавкаОПВРДляИП
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> 0) 
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СведенияОСтавкаПоПериодам.ПериодНачисления,
	|	вт_СведенияОСтавкаПоПериодам.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачисления,
	|	Сотрудник";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьТаблицыДокумента(Запрос, Реквизиты)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Ссылка,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ВидРасчета,
		|	Начисления.Размер,
		|	Начисления.Результат,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.СпособОтраженияВБухучете,
		|	Начисления.ДополнительныеДанные
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	ВЫБОР
		|		КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
		|			ТОГДА &Период
		|		ИНАЧЕ ДатаНачала
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ 
		|	ВТ_Начисления КАК Начисления
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
		|		ПО ИСТИНА
		|";
		
	// Данные по местам работы сотрудников
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
				 + РасчетЗарплатыСервер.СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников",, Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями И Не Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам)
				 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	                                                 
	Запрос.Текст = Запрос.Текст +  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ДатаОкончания КАК ПериодНачисления
		|ПОМЕСТИТЬ ВТ_ПериодыНачислений
		|ИЗ
		|	ВТ_Начисления КАК Начисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисления.Сотрудник,
		|	ПериодНачисления";
			
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + РасчетЗарплатыСервер.СформироватьТекстЗапросаПериодыИсчисленияОППВ("ВТ_ПериодыНачислений", Реквизиты.ОрганизацияЯвляетсяВкладчикомОППВ);
	
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + ТекстЗапросаНаличияСтавокОСМС(Реквизиты) 
									 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + ТекстЗапросаНаличияСтавокОПВР(Реквизиты);
	Результат = Запрос.Выполнить();

КонецПроцедуры

Функция ТекстЗапросаНачисления(НомераТаблиц, Реквизиты) 
	                                                             
	НомераТаблиц.Вставить("Начисления", НомераТаблиц.Количество());
	ТекстЗапроса =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.Сотрудник КАК Сотрудник,
	|	СтрокиНачисления.ВидРасчета КАК ВидРасчета,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяИПН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяИПН,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОПВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВ,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяСН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСН,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяСО, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСО,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОППВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОППВ,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяВОСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяВОСМС,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяООСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяООСМС,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОПВР, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВР,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяЕП, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяЕП,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			И НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчислятьЕП,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			И НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА &Период >= ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(вт_УчитыватьОСМС.ЕстьСтавкаВзноса, ЛОЖЬ)
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			И НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СтрокиНачисления.Сотрудник.Физлицо = Реквизиты.ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|      КОГДА &Период >= ДАТАВРЕМЯ(2020, 1, 1) 
	|           ТОГДА Истина 
	|		ИНАЧЕ ЕСТЬNULL(вт_УчитыватьОСМС.ЕстьСтавкаОтчисления, ЛОЖЬ)
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|			ТОГДА &Период
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА &Период >= ДАТАВРЕМЯ(2024, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|							И НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(вт_УчитыватьОПВР.ЕстьСтавкаВзноса, ЛОЖЬ)
	|	КОНЕЦ КАК УчитыватьОПВР,
	|	СтрокиНачисления.Результат КАК СуммаДохода,
	|	СтрокиНачисления.Результат КАК СуммаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) КАК ВидСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам
	|				И &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|						ТОГДА СтрокиНачисления.ПодразделениеОрганизации
	|					КОГДА НЕ &СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА &СтруктурноеПодразделение
	|					ИНАЧЕ &ОбособленноеПодразделение
	|				КОНЕЦ
	|		КОГДА &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL
	|						ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|					КОГДА НЕ &СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА &СтруктурноеПодразделение
	|					ИНАЧЕ &ОбособленноеПодразделение
	|				КОНЕЦ
	|		ИНАЧЕ &ОбособленноеПодразделение
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОрганизацияЯвляетсяВкладчикомОППВ
	|			ТОГДА ЕСТЬNULL(ПериодыИсчисленияОППВ.ИсчислятьОППВ, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчислятьОППВ,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|				И Реквизиты.РежимНалогообложения = ЗНАЧЕНИЕ(Перечисление.РежимНалогообложения.УпрощеннаяДекларация)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИсчислятьСН, 
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,	
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск, ЛОЖЬ) КАК ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск
	|	
	|ИЗ
	|	ВТ_Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
	|		ПО СтрокиНачисления.Сотрудник = МестоРаботы.Сотрудник
	|			И (ВЫБОР
	|				КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|					ТОГДА &Период
	|				ИНАЧЕ СтрокиНачисления.ДатаНачала
	|			КОНЕЦ = МестоРаботы.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыИсчисленияОППВ КАК ПериодыИсчисленияОППВ
	|		ПО СтрокиНачисления.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
	|			И СтрокиНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УчитыватьОСМС КАК вт_УчитыватьОСМС
	|		ПО СтрокиНачисления.Сотрудник = вт_УчитыватьОСМС.Сотрудник
	|			И (ВЫБОР
	|				КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|					ТОГДА Реквизиты.ПериодРегистрации = вт_УчитыватьОСМС.ПериодНачисления
	|				ИНАЧЕ СтрокиНачисления.ДатаНачала = вт_УчитыватьОСМС.ПериодНачисления
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УчитыватьОПВР КАК вт_УчитыватьОПВР
	|		ПО СтрокиНачисления.Сотрудник = вт_УчитыватьОПВР.Сотрудник
	|			И (ВЫБОР
	|				КОГДА Реквизиты.ОтражениеПоПериодуРегистрации
	|					ТОГДА Реквизиты.ПериодРегистрации = вт_УчитыватьОПВР.ПериодНачисления
	|				ИНАЧЕ СтрокиНачисления.ДатаНачала = вт_УчитыватьОПВР.ПериодНачисления
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ) КАК ГражданствоФизЛиц
	|		ПО СтрокиНачисления.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();            
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецЕсли