#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = Начисления.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);  

КонецПроцедуры 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) 
	
	ДанныеПоПересечениюПериодов = ДанныеПоПересечениюПериодов();
	
	Пока ДанныеПоПересечениюПериодов.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Для сотрудника %1 в строке %2 найдено пересечение отпуска по периодам со строкой %3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеПоПересечениюПериодов.Сотрудник,ДанныеПоПересечениюПериодов.СтрокаНомерПересечения, ДанныеПоПересечениюПериодов.НомерСтроки);
		Поле = "Начисления[" + Формат(ДанныеПоПересечениюПериодов.СтрокаНомерПересечения - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);

	КраткийСоставДокумента 			   = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");
	КраткийСоставВидовРасчетаДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставВидовРасчетаДокумента(Начисления);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(ЭтотОбъект.Организация, ЭтотОбъект.Дата);

	ПараметрыПроведения = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	ВыполнитьКонтрольНачисленияОтпусков(ПараметрыПроведения.Реквизиты[0], ПараметрыПроведения.Начисления, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	ТаблицаНачисления = ПараметрыПроведения.Начисления;
	
	ТаблицаВзаиморасчетыСРаботниками = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(Реквизиты,
																				ТаблицаНачисления,
																				Движения.ВзаиморасчетыСРаботникамиОрганизаций.ВыгрузитьКолонки(),
																				ВидДвиженияНакопления.Приход,
																				Отказ);
	
	ТаблицаИПНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ИПН", 
																				Движения.ИПНСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьЕП", Ложь));
																				
	ТаблицаОПВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ОПВ", 
																				Движения.ОПВСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьЕП", Ложь));
	
	Если ОрганизацияЯвляетсяПлательщикомСН Тогда
		ТаблицаСНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"СН", 
																				Движения.СНСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьСН", Истина));
	КонецЕсли;
																			
	ТаблицаСОСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"СО", 
																				Движения.СОСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьЕП", Ложь));
																				
	ТаблицаОППВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ОППВ", 
																				Движения.ОППВСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьОППВ", Истина));
																				
	ТаблицаООСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ООСМС", 
																				Движения.ООСМССведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("УчитыватьООСМС", Истина));
																				
	ТаблицаВОСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ВОСМС", 
																				Движения.ВОСМССведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("УчитыватьВОСМС", Истина));
																				
	ТаблицаЕПСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ЕП", 
																				Движения.ЕПСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("ИсчислятьЕП", Истина));  
																				
	ТаблицаОПВРСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ТаблицаНачисления, 
																				"ОПВР", 
																				Движения.ОПВРСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ,
																				Новый Структура("УчитыватьОПВР", Истина)); 
																				
	ТаблицаПериодыОплатыДляМедицинскогоСтрахования = РасчетЗарплатыСервер.ПодготовитьТаблицуПериодыОплатыДляМедицинскогоСтрахования(Реквизиты, 
																				ТаблицаНачисления, 
																				Движения.ПериодыОплатыДляМедицинскогоСтрахования.ВыгрузитьКолонки(),
																				Отказ);																				

																				
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОППВСведенияОДоходах, 		"ОППВСведенияОДоходах", 				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСРаботниками, "ВзаиморасчетыСРаботникамиОрганизаций", Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИПНСведенияОДоходах,  		"ИПНСведенияОДоходах",  				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВСведенияОДоходах,  		"ОПВСведенияОДоходах",  				Движения, Отказ);
	Если ОрганизацияЯвляетсяПлательщикомСН Тогда
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСНСведенияОДоходах,   		"СНСведенияОДоходах",   				Движения, Отказ);
	КонецЕсли;	
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСОСведенияОДоходах,   		"СОСведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаООСМССведенияОДоходах, 	"ООСМССведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВОСМССведенияОДоходах, 	"ВОСМССведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаЕПСведенияОДоходах, 	    "ЕПСведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВРСведенияОДоходах, 		"ОПВРСведенияОДоходах",   				Движения, Отказ);
    РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаПериодыОплатыДляМедицинскогоСтрахования, "ПериодыОплатыДляМедицинскогоСтрахования", Движения, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , , , ОбъектКопирования.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	

Процедура ВыполнитьКонтрольНачисленияОтпусков(Реквизиты, ТаблицаНачисления, Отказ)
	
	ИспользуетсяПериодДействия = НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Организация, ПериодРегистрации);
	
	РаспределениеПоПериодамОплаты = (ПериодРегистрации >= РасчетЗарплатыСервер.ДатаИзмененияПорядкаПеречисленияОСМС2024() 
										И НЕ ИспользуетсяПериодДействия); 
	
	Если РаспределениеПоПериодамОплаты Тогда						
			
			ВыборкаНачисленияОтпуска = ДанныеПоНачислениямОтпуска(Реквизиты, ТаблицаНачисления);

			Пока ВыборкаНачисленияОтпуска.Следующий() Цикл
				
				ТекстСообщения = НСтр("ru = 'На период начисления отпуска %1 по периоду регистрации %2 по сотруднику %3 уже зарегистрирован отпуск документом %4'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаНачисленияОтпуска.МесяцСобытия, ВыборкаНачисленияОтпуска.ПериодРегистрации, ВыборкаНачисленияОтпуска.Сотрудник, ВыборкаНачисленияОтпуска.Регистратор);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);  
				
			КонецЦикла;

	КонецЕсли;
	

КонецПроцедуры	

Функция ДанныеПоНачислениямОтпуска(Реквизиты, ТаблицаНачисления)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);  
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация); 
	Запрос.УстановитьПараметр("ПериодРегистрации", Реквизиты.ПериодРегистрации); 
	Запрос.УстановитьПараметр("ТаблицаНачисления", ТаблицаНачисления);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо КАК Физлицо,
				   |	ВЫРАЗИТЬ(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК ПланВидовРасчета.ОсновныеНачисленияОрганизаций) КАК ВидРасчета,
	               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала, МЕСЯЦ) КАК ДатаНачала
	               |ПОМЕСТИТЬ ВТ_ТаблицаНачисления
	               |ИЗ
	               |	&ТаблицаНачисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОплатыДляМедицинскогоСтрахования.Регистратор КАК Регистратор,
	               |	ПериодыОплатыДляМедицинскогоСтрахования.ПериодРегистрации КАК ПериодРегистрации,
	               |	ПериодыОплатыДляМедицинскогоСтрахования.МесяцСобытия КАК МесяцСобытия,
	               |	ПериодыОплатыДляМедицинскогоСтрахования.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	ВТ_ТаблицаНачисления КАК ВТ_ТаблицаНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОплатыДляМедицинскогоСтрахования КАК ПериодыОплатыДляМедицинскогоСтрахования
	               |		ПО &Организация = ПериодыОплатыДляМедицинскогоСтрахования.Организация
				   |			И ВТ_ТаблицаНачисления.СтруктурнаяЕдиница = ПериодыОплатыДляМедицинскогоСтрахования.СтруктурнаяЕдиница
	               |			И ВТ_ТаблицаНачисления.Физлицо = ПериодыОплатыДляМедицинскогоСтрахования.ФизическоеЛицо
	               |			И ВТ_ТаблицаНачисления.Сотрудник = ПериодыОплатыДляМедицинскогоСтрахования.Сотрудник
	               |			И &ПериодРегистрации = ПериодыОплатыДляМедицинскогоСтрахования.ПериодРегистрации
	               |			И ВТ_ТаблицаНачисления.ДатаНачала = ПериодыОплатыДляМедицинскогоСтрахования.МесяцСобытия
	               |ГДЕ 
				   |	ВТ_ТаблицаНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска)
	               |	И ПериодыОплатыДляМедицинскогоСтрахования.Активность
	               |	И ПериодыОплатыДляМедицинскогоСтрахования.Регистратор <> &Ссылка";			
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат РезультатЗапроса;
	
КонецФункции  

Функция ДанныеПоПересечениюПериодов()  
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНачисления", Начисления.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ &ТаблицаНачисления КАК ТаблицаНачисления
		|
		|;  
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.НомерСтроки КАК НомерСтроки,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала КАК ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания КАК ДатаОкончания	
		|ПОМЕСТИТЬ ВтТаблицаДокумента
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	ВЫРАЗИТЬ(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК ПланВидовРасчета.ОсновныеНачисленияОрганизаций).СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска)
		|	И ВЫРАЗИТЬ(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК ПланВидовРасчета.ОсновныеНачисленияОрганизаций).ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ТаблицаНачислений2.НомерСтроки) КАК СтрокаНомерПересечения
		|ИЗ
		|	ВтТаблицаДокумента КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокумента КАК ТаблицаНачислений2
		|		ПО (ТаблицаНачислений2.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И ТаблицаНачислений.НомерСтроки <> ТаблицаНачислений2.НомерСтроки
		|			И ТаблицаНачислений.ДатаНачала <= ТаблицаНачислений2.ДатаНачала
		|			И ТаблицаНачислений.ДатаОкончания >= ТаблицаНачислений2.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник";
		
   	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат РезультатЗапроса;

КонецФункции

#КонецЕсли


