&НаКлиенте
Перем СинхронизируемыеТабличныеЧасти;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""прием на работу в организацию"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	Если ТекущийСотрудник <> ТекущиеДанные.Сотрудник Тогда
		
		СтруктураПоиска = Новый Структура("Сотрудник", ТекущийСотрудник);
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ПереформироватьНачисленияПоРаботнику(Объект, ТекущиеДанные.Сотрудник, ТекущийСотрудник);
		Иначе
			ДобавитьНачисленияПоСтроке(Объект,ТекущиеДанные.Сотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.РаботникиОрганизации, СинхронизируемыеТабличныеЧасти, "Сотрудник");

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока И Копирование Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В данном документе по одному сотруднику можно вводить только одну строку!'"));
		Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник = Неопределено; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = ПредопределенноеЗначение("Справочник.СотрудникиОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиРаботников = Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник <> ВыбранноеЗначение Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В данном документе по одному сотруднику можно вводить только одну строку!'"));
		Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник = Неопределено; 
		Возврат;
	КонецЕсли;
	
	Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Объект, ТекущийСотрудник, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииДатаПриемаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, РаботникиОрганизации");

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Сотрудник, ФизЛицо, ДатаПриема, ПодразделениеОрганизации, ИсчислятьОППВ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РаботникиОрганизацииДатаПриемаПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОсновныеНачисления

&НаКлиенте
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.ОсновныеНачисления, СинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковНачисленияСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	Если Параметры.Ключ.Пустая() Тогда
		
	  	ИсходнаяОрганизация = Объект.Организация;
		
	КонецЕсли;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверки и очищения некорректного значения Подразделения
	Если  Объект.РаботникиОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокРеквизитовПодразделения = Новый СписокЗначений;
	// ТЧ Работники
	СписокРеквизитовПодразделения.Добавить("ПодразделениеОрганизации"); 
	СтруктураРеквизтов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения",  Объект.РаботникиОрганизации, СписокРеквизитовПодразделения); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизтов);
	
	// Очистим некорректные значения подразделений не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, ,СписокТабличныхЧастей); 

	ИсходнаяОрганизация = Объект.Организация;

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;

	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	УстановитьФункциональныеОпцииФормы();
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			МассивСтрок = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		Исключение
			МассивСтрок = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		КонецПопытки;

		Если МассивСтрок.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПереформироватьНачисленияПоРаботнику(Объект, ВыбранныйСотрудник, ТекущийСотрудник)
	
	УдалитьНачисленияПоРаботнику(Объект, ТекущийСотрудник, Ложь);
	ИзмненитьНачисленияПоСотруднику(Объект, ТекущийСотрудник, ВыбранныйСотрудник);
	ДобавитьНачисленияПоСтроке(Объект, ВыбранныйСотрудник);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьНачисленияПоРаботнику(Объект, Сотрудник, УдалятьВсе)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с физлицом - последняя
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	Строки = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Если УдалятьВсе Тогда
		
		Для Каждого Строка из Строки Цикл
			Объект.ОсновныеНачисления.Удалить(Строка);
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка из Строки Цикл
			
			// удалим "основное" начисление
			Если НЕ ЗначениеЗаполнено(Строка.ВидРасчета) Тогда
				Объект.ОсновныеНачисления.Удалить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ИзмненитьНачисленияПоСотруднику(Объект, Сотрудник, ВыбранныйСотрудник);
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	Строки = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти Из Строки Цикл
		СтрокаТабличнойЧасти.Сотрудник = ВыбранныйСотрудник;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьНачисленияПоСтроке(Объект, ВыбранныйСотрудник)
	
	СтруктураПоискаСтрок = Новый Структура();
	СтруктураПоискаСтрок.Вставить("Сотрудник",	ВыбранныйСотрудник);
	СтруктураПоискаСтрок.Вставить("ВидРасчета",	ПредопределенноеЗначение("ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням"));

	// основное начисление
	Если Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоискаСтрок).Количество()=0 Тогда
		Строка = Объект.ОсновныеНачисления.Добавить();
		Строка.Сотрудник  = ВыбранныйСотрудник;
		Строка.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РаботникиОрганизацииДатаПриемаПриИзмененииНаСервере (Знач ДанныеОбъекта, СтрокаТабличнойЧасти)
	
	РабочаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если СтрокаТабличнойЧасти.ДатаПриема > РабочаяДата Тогда
		
		ТекстСообщения = НСтр("ru='Дата приема на работу превышает рабочую дату!!!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковНачисленияСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ОсновныеНачисления.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

СинхронизируемыеТабличныеЧасти = Новый Соответствие;
СинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]  	= Ложь;
СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]  = Ложь;
