
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = РаботникиОрганизации.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(РаботникиОрганизации, Отказ);
	ПроверитьВидыЗанятостиРаботникаВОрганизации(РаботникиОрганизации, Отказ);
	ПроверитьЗаполнениеНачисленияПострочно(ОсновныеНачисления, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПриемНаРаботуВОрганизацию.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	КадровыйУчетСервер.СформироватьДвиженияРаботникиОрганизации(ПараметрыПроведения.ТаблицаРаботники, Движения, Отказ);
	
	РасчетЗарплатыСервер.СформироватьДвиженияПлановыеНачисленияРаботниковОрганизаций(ПараметрыПроведения.ТаблицаОсновныеНачисления, Движения, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Организация = Основание.СтруктурнаяЕдиница;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
			НоваяСтрока.ПодразделениеОрганизации = СтруктурноеПодразделение;	
		КонецЕсли;
		
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	РезультатЗапросаПоРаботники   = СформироватьЗапросПоРаботникиОрганизаций(ПроверяемаяТабличнаячасть);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл		
		СтрокаНачалаСообщенияОбОшибке = НСтр("ru = 'В строке номер '")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + НСтр("ru = ' табл. части ""Сотрудники"": '");
		
		//Евгений+
		
		//// Сотрудник раньше работал в организации  
		//Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
		//	ТекстСообщения = НСтр("ru='Сотрудник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!'");
		//	Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
		//	ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		//КонецЕсли;
		//Евгений-  
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ТекстСообщения = НСтр("ru='организация документа не соответствует организации, указанной в карточке сотрудника!'");
			Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ПроверяемаяТабличнаячасть, Отказ)
	
	ВидЗанятости = Неопределено;
	НетОсновногоМестаРаботы = Истина;
	
	РезультатЗапросаПоРаботники   = СформироватьЗапросПоПрежнимМестам(ПроверяемаяТабличнаячасть);
	ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Сотрудники"": '"),СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки));
		
		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
			
			// Для основного места работы недопустимо наличие другого основного места работы и внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='нельзя принять работника дважды на основное место работы!(См. приказ: ""%1"")'"),ВыборкаСтрокЗапроса.КонфликтныйДокумент);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нельзя принять сотрудника на основное место работы до тех пор, пока он оформлен внешним совместителем!(См. приказ: ""%1"")'"),ВыборкаСтрокЗапроса.КонфликтныйДокумент);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
			// Ситуация, когда работает в другой организации по основному месту работы
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДругаяОрганизацияПоОсновномуМестуРаботы) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='нельзя оформить работника на основное место работы, так как он уже работает в организации ""%1"" по основному месту работы!'"),ВыборкаСтрокЗапроса.ДругаяОрганизацияПоОсновномуМестуРаботы);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
			
			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нельзя оформить сотрудника на внешнее совместительство, так как он уже оформлен в организации по основному месту работы!(См. приказ: ""%1"")'"),ВыборкаСтрокЗапроса.КонфликтныйДокумент);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нельзя принять работника дважды на внешнее совместительство!(См. приказ: ""%1"")'"),ВыборкаСтрокЗапроса.КонфликтныйДокумент);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда
			
			// Для внутреннего совместительства отслеживаем наличие основного места работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
				ИЛИ ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				НетОсновногоМестаРаботы = Ложь;
			КонецЕсли;
			
		КонецЕсли;   
		
		ВидЗанятости = ВыборкаСтрокЗапроса.ВидЗанятости;
		
		// При оформлении на внутренне совместительство должно быть основное место работы
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство 
			И НетОсновногоМестаРаботы Тогда
			ТекстСообщения = НСтр("ru='Нельзя оформить сотрудника на внутреннее совместительство, так как он не оформлен в организации или по основному месту работы или по внешнему совместительству!'");
			Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаСтрокЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНачисленияПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	РезультатЗапросаПоРаботники   = СформироватьЗапросПоНачисления(ПроверяемаяТабличнаячасть);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Сотрудники"": '"),СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
		// проверка на существование работника в табличной части "РаботникиОрганизации"
		Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
			ТекстСообщения = НСтр("ru='данный сотрудник не введен в приказ - по нему не могут быть введены начисления!'");
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// проверка на то, чтобы в плановых начисления был только один вид расчета за отработанное время
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОшибкаПервыйВидРасчетаЗаОтработанноеВремя) Тогда
			ТекстСообщения = НСтр("ru='по данному сотруднику уже указан один вид расчета за отработанное время - '");
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения + ВыборкаПоСтрокамДокумента.ОшибкаПервыйВидРасчетаЗаОтработанноеВремя + "!", ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
Функция СформироватьЗапросПоРаботникиОрганизаций(ПроверяемаяТабличнаячасть)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ТаблицаДокумента", 	 ПроверяемаяТабличнаячасть);

	// Описание текста запроса:
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизаций.Сотрудник,
	|	&Организация  КАК Организация
	|ПОМЕСТИТЬ ВТ_ТЧРаботникиОрганизаций
	|ИЗ
	|	&ТаблицаДокумента КАК ТЧРаботникиОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизаций.Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизаций.Сотрудник.Организация = &ГоловнаяОрганизация
	|				ИЛИ ТЧРаботникиОрганизаций.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	ВТ_ТЧРаботникиОрганизаций КАК ТЧРаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТЧРаботникиОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			И (РаботникиОрганизаций.Активность)
	|			И (РаботникиОрганизаций.Регистратор <> &ДокументСсылка)
	|			И ТЧРаботникиОрганизаций.Организация = РаботникиОрганизаций.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			ВТ_ТЧРаботникиОрганизаций КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧРаботникиОрганизаций КАК ТЧРаботникиОрганизаций2
	|				ПО ТЧРаботникиОрганизаций.Сотрудник = ТЧРаботникиОрганизаций2.Сотрудник
	|					И ТЧРаботникиОрганизаций.НомерСтроки > ТЧРаботникиОрганизаций2.НомерСтроки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|";
                     	
 	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Формирует запрос по таблице "РаботникиОрганизации" документа для проверки совместительства
//
Функция СформироватьЗапросПоПрежнимМестам(ПроверяемаяТабличнаячасть)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТаблицаДокумента", 	    ПроверяемаяТабличнаячасть);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТЧРаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаПриема,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТИспытуемыеСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Физлицо В
	|			(ВЫБРАТЬ
	|				Док.Сотрудник.Физлицо
	|			ИЗ
	|				ВТДанныеДокумента КАК Док)
	|	И ТЧРаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|	ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы
	|ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Сотрудник.Физлицо КАК Физлицо,
	|		СостояниеВнутри.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|			ПО СостояниеВнутри.Сотрудник.Физлицо = Док.Сотрудник.Физлицо
	|				И СостояниеВнутри.Период <= Док.ДатаПриема
	|	ГДЕ
	|		СостояниеВнутри.Сотрудник В
	|				(ВЫБРАТЬ
	|					Спр.Ссылка
	|				ИЗ
	|					ВТИспытуемыеСотрудники КАК Спр)
	|		И СостояниеВнутри.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Сотрудник.Физлицо,
	|		СостояниеВнутри.Сотрудник) КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокДат.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И (ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения)
	|			И (ДанныеПоРаботникуДоНазначения.Активность)
	|			И (ДанныеПоРаботникуДоНазначения.Регистратор <> &ДокументСсылка)
	|ГДЕ
	|	ДанныеПоРаботникуДоНазначения.Регистратор ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПоследниеНазначения
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ТЧРаботникиОрганизации.Сотрудник.Физлицо = РаботникиОрганизации.Сотрудник.Физлицо
	|			И (РаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаПриема)
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|			И (РаботникиОрганизации.Организация <> &ГоловнаяОрганизация)
	|			И (РаботникиОрганизации.Активность)
	|			И (РаботникиОрганизации.Регистратор <> &ДокументСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизации.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоследниеНазначенияВДругихОрганизациях.НомерСтроки,
	|	ПоследниеНазначенияВДругихОрганизациях.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации.Сотрудник
	|ПОМЕСТИТЬ ВТ_ПоследниеНазначенияВДругихОрганизациях
	|ИЗ
	|	ВТ_ПоследниеНазначения КАК ПоследниеНазначенияВДругихОрганизациях
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеНазначенияВДругихОрганизациях.Сотрудник = РаботникиОрганизации.Сотрудник
	|			И ПоследниеНазначенияВДругихОрганизациях.Организация = РаботникиОрганизации.Организация
	|			И ПоследниеНазначенияВДругихОрганизациях.Период = РаботникиОрганизации.Период
	|			И РаботникиОрганизации.Активность
	|			И РаботникиОрганизации.Регистратор <> &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоследниеНазначенияВДругихОрганизациях.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|   ВЫБОР КОГДА
	|   	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) 
	|   ТОГДА 1
	|   ИНАЧЕ 2
	|   КОНЕЦ КАК Приоритет,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	NULL КАК ДругаяОрганизацияПоОсновномуМестуРаботы
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.Сотрудник.Физлицо = ВложенныйЗапрос.Физлицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	NULL,
	|	2,
	|	NULL,
	|	ВЫБОР
	|		КОГДА ПоследниеНазначенияВДругихОрганизациях.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ПоследниеНазначенияВДругихОрганизациях.Организация.Наименование
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеНазначенияВДругихОрганизациях КАК ПоследниеНазначенияВДругихОрганизациях
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПоследниеНазначенияВДругихОрганизациях.НомерСтроки
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ПоследниеНазначенияВДругихОрганизациях.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ТОГДА ПоследниеНазначенияВДругихОрганизациях.Организация.Наименование
	|				ИНАЧЕ NULL
	|			КОНЕЦ ЕСТЬ NULL 
	| УПОРЯДОЧИТЬ ПО Приоритет";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
Функция СформироватьЗапросПоНачисления(ПроверяемаяТабличнаячасть)

	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ВидРасчета
	|ПОМЕСТИТЬ ВТ_ТЧНачисления
	|ИЗ
	|	&ТаблицаОсновныеНачисления КАК ТЧНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.Сотрудник
	|ПОМЕСТИТЬ ВТ_ТЧРаботникикОрганизации
	|ИЗ
	|	&ТаблицаРаботникиОрганизации КАК ТЧРаботникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|				И ТЧНачисления.НомерСтроки <> ПервыеСтрокиВидовЗаОтработанноеВремя.НомерСтроки
	|			ТОГДА НачисленияЗаОтработанноеВремя.ВидРасчета.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОшибкаПервыйВидРасчетаЗаОтработанноеВремя,
	|	ТЧРаботникиОрганизации.ДатаПриема
	|ИЗ
	|	ВТ_ТЧНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЧРаботникикОрганизации КАК ТЧРаботникиОрганизации
	|		ПО (ТЧРаботникиОрганизации.Сотрудник = ТЧНачисления.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(ТЧНачисления.НомерСтроки) КАК НомерСтроки
	|		ИЗ
	|			ВТ_ТЧНачисления КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.Сотрудник) КАК ПервыеСтрокиВидовЗаОтработанноеВремя
	|		ПО ТЧНачисления.Сотрудник = ПервыеСтрокиВидовЗаОтработанноеВремя.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЧНачисления КАК НачисленияЗаОтработанноеВремя
	|		ПО (ПервыеСтрокиВидовЗаОтработанноеВремя.НомерСтроки = НачисленияЗаОтработанноеВремя.НомерСтроки)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаОсновныеНачисления", 	 ПроверяемаяТабличнаячасть);  
	Запрос.УстановитьПараметр("ТаблицаРаботникиОрганизации", РаботникиОрганизации);  
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

#КонецЕсли

