
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
 	ТекущаяДатаДокумента = Объект.Дата;
 	Объект.Дата = ТекущаяДатаДокумента;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Элементы.Сделка.Доступность   = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПоступлениеТоваровУслуг" 
			ИЛИ ИмяСобытия = "Запись_ПоступлениеНМА"
			ИЛИ ИмяСобытия = "Запись_ПоступлениеИзПереработки"
			ИЛИ ИмяСобытия = "Запись_ПриходныйКассовыйОрдер" Тогда
			
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументОснование")
			И Параметр.ДокументОснование = Объект.Ссылка Тогда 
			НадписьДокументИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ исполнения: %1'"), Источник);
			ДокументИсполнения = Источник;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда		
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НематериальныеАктивы.Форма.ФормаВыбора" Тогда		
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Нематериальный актив < %1 > уже подобран!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
				
			Иначе
				НоваяСтрока = Объект.Товары.Добавить();	
				НоваяСтрока.НаименованиеТовара = СтрокаМассива;
				
				ДанныеОбъекта = Новый Структура;

				ДанныеСтрокиТаблицы = Новый Структура("НаименованиеТовара, ЕдиницаПоКлассификатору, Количество");
				ДанныеСтрокиТаблицы.Вставить("НаименованиеТовара", СтрокаМассива);
				ДанныеСтрокиТаблицы.Вставить("ЕдиницаПоКлассификатору", ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
				ДанныеСтрокиТаблицы.Вставить("Количество", 0);
					
				ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);

				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.Доверенность.Форма.ФормаПечать" Тогда		
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма.Объект, ВыбранноеЗначение);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КлючеваяОперация = "Документ ""доверенность"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
			
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполнения = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
	Объект.ДатаДействия = Объект.Дата + 10 * (24 * 60 * 60);

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат,СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)

   ИнфУдЛичностиФизЛица = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.ФизЛицо);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.Доверенность.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;

КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПоДокументу) Тогда
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			ТекстВопроса = НСтр("ru = 'Изменить дополнительный реквизит ""По документу""?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Очистить дополнительный реквизит ""По документу""?'");
		КонецЕсли;
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьПоДокументу", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Отказ = Истина;
		
	Иначе
		
		СделкаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ДокументИсполнения) Тогда
		ПараметрыСписания = Новый Структура("Ключ", ДокументИсполнения);
	Иначе
		ПараметрыСписания = Новый Структура("Основание", ЭтаФорма.Параметры.Ключ);
	КонецЕсли;
	
	Док = "";
	Если ТипЗнч(ДокументИсполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Док = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(ДокументИсполнения) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		Док = "ПоступлениеНМА";
	ИначеЕсли ТипЗнч(ДокументИсполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Док = "ПриходныйКассовыйОрдер";
	КонецЕсли;
	
	ОткрытьФорму("Документ."+ Док + ".ФормаОбъекта", ПараметрыСписания, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНаименованиеТовараПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Ссылка");

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"НаименованиеТовара, ЕдиницаПоКлассификатору, Количество");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)
	
	Если Команда.Имя = "ПодборТМЗ" Тогда
		ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
		Если ПараметрыПодбора <> Неопределено Тогда
			ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "ПодборОС" Тогда
		ПараметрыПодбора = ПолучитьПараметрыПодбора("ОС", НСтр("ru = 'ОС'"));
		Если ПараметрыПодбора <> Неопределено Тогда
			ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "ПодборНМА" Тогда
		ПараметрыПодбора = ПолучитьПараметрыПодбора("НМА", НСтр("ru = 'НМА'"));
		Если ПараметрыПодбора <> Неопределено Тогда
			ОткрытьФорму("Справочник.НематериальныеАктивы.Форма.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	УстановитьФункциональныеОпцииФормы();
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	Объект.НаПолучениеОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ИсходнаяОрганизация = Объект.Организация;
		
		Объект.НаПолучениеОт = Объект.Контрагент.НаименованиеПолное;
		Объект.ДатаДействия = ОбщегоНазначения.ТекущаяДатаПользователя() + 10 * (24 * 60 * 60);
		
	КонецЕсли;
	
	ИнфУдЛичностиФизЛица = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.ФизЛицо);
	
	ДокументИсполнения = Документы.Доверенность.НайтиДокументИсполнения(Объект.Ссылка, ДокументИсполнения);
	ТекущаяСделка = Объект.Сделка;
	
	Если ЗначениеЗаполнено(ДокументИсполнения) Тогда
		НадписьДокументИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ исполнения: %1'"), ДокументИсполнения);
	Иначе
		НадписьДокументИсполнения = "";
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		
		// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	Объект.Сделка = Неопределено;
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);

	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);

	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		ИЛИ ТипЗнч(Объект.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда 
				
		ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
		Объект.СтруктурнаяЕдиница = ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	СтруктураРезультатаВыполнения = Неопределено;
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.НаименованиеТовара) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
											СтрокаТабличнойЧасти.НаименованиеТовара, ДанныеОбъекта);
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Возврат;
			Иначе
				СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
			КонецЕсли;
			
		ИначеЕсли (ТипЗнч(СтрокаТабличнойЧасти.НаименованиеТовара) = Тип("СправочникСсылка.ОсновныеСредства")
				 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.НаименованиеТовара) = Тип("СправочникСсылка.НематериальныеАктивы")) Тогда 
			
			СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения;
			
			// попытаемся найти по коду единицу измерения "штука"
			ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
			Если НЕ ЗначениеЗаполнено(ЕдИзмСсылка) Тогда 
				// если не нашли по коду, то попытаемся найти по наименованию
				ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = ЕдИзмСсылка;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяТаблицы = "Товары" Тогда
		
		ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
		
		ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
		
		ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРасчетов"                 , ДатаРасчетов);
		ПараметрыФормы.Вставить("Организация"                  , Объект.Организация);
		ПараметрыФормы.Вставить("СтруктурноеПодразделение"     , Объект.СтруктурноеПодразделение);
		ПараметрыФормы.Вставить("Заголовок"                    , ЗаголовокПодбора);
		ПараметрыФормы.Вставить("ИмяТаблицы"                   , ИмяТаблицы);
		ПараметрыФормы.Вставить("Товар"                        , ИмяТаблицы = "Товары");
		ПараметрыФормы.Вставить("Услуги"                       , Истина);
		ПараметрыФормы.Вставить("ВыбиратьВсе"                  , Истина);
			
		СписокЗапросов = Новый СписокЗначений();
		СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
		
		ПараметрыФормы.Вставить("СписокВидовПодбора"           , СписокЗапросов);
		ПараметрыФормы.Вставить("ОбъектСсылка"                 , Объект.Ссылка);
		
	ИначеЕсли ИмяТаблицы = "ОС" Тогда
		
		ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
		
		ЗаголовокПодбора = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
		
		ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
		
		ПараметрыФормы.Вставить("ДатаРасчетов"                 , ДатаРасчетов);
		ПараметрыФормы.Вставить("Организация"                  , Объект.Организация);
		ПараметрыФормы.Вставить("СтруктурноеПодразделение"     , Объект.СтруктурноеПодразделение);
		ПараметрыФормы.Вставить("Заголовок"                    , ЗаголовокПодбора);
		ПараметрыФормы.Вставить("ВыбиратьВсе"                  , Истина);	
		ПараметрыФормы.Вставить("ОбъектСсылка"                 , Объект.Ссылка);
		ПараметрыФормы.Вставить("ИмяТаблицы"                   , ИмяТаблицы);
		
	ИначеЕсли ИмяТаблицы = "НМА" Тогда
			
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"           , Ложь);
		ПараметрыФормы.Вставить("РежимВыбора"                  , Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор"           , Истина);
		ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов" , ИспользованиеГруппИЭлементов.Элементы);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	КолонкаНоменклатура = ТаблицаТоваров.Колонки.Найти("Номенклатура");
	Если КолонкаНоменклатура <> Неопределено Тогда
		КолонкаНоменклатура.Имя = "НаименованиеТовара";
	КонецЕсли;
	
	КолонкаЕдиницаИзмерения = ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмерения");
	Если КолонкаЕдиницаИзмерения <> Неопределено Тогда
		КолонкаЕдиницаИзмерения.Имя = "ЕдиницаПоКлассификатору";
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("НаименованиеТовара", 		СтрокаТовара.НаименованиеТовара);
		СтруктураОтбора.Вставить("ЕдиницаПоКлассификатору", СтрокаТовара.ЕдиницаПоКлассификатору);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение)
	
	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице Товары.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("НаименованиеТовара", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			НоваяСтрока = Объект.Товары.Добавить();	
			НоваяСтрока.НаименованиеТовара = СтрокаОС.ОсновноеСредство;
			
			ДанныеОбъекта = Новый Структура;

			ДанныеСтрокиТаблицы = Новый Структура("НаименованиеТовара, ЕдиницаПоКлассификатору, Количество");
			ДанныеСтрокиТаблицы.Вставить("НаименованиеТовара", СтрокаОС.ОсновноеСредство);
			ДанныеСтрокиТаблицы.Вставить("ЕдиницаПоКлассификатору", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
			ДанныеСтрокиТаблицы.Вставить("Количество", 0);
				
			ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
				
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство < %1 > уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НаименованиеТовара";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура СделкаПриИзмененииНаСервере()
	
	Если НЕ ТекущаяСделка = Объект.Сделка Тогда
		
		// формирование представления документа
		ПредставлениеДокумента = ?(НЕ ЗначениеЗаполнено(Объект.Сделка), "", РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект.Сделка, СокрЛП(Объект.Сделка.Метаданные().Представление())));
		Объект.ПоДокументу = ПредставлениеДокумента;
		ТекущаяСделка = Объект.Сделка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьПоДокументу(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да ИЛИ НЕ ЗначениеЗаполнено(Объект.ПоДокументу) Тогда
		
		СделкаПриИзмененииНаСервере();
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Печать(Команда)
	
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("НаПолучениеОт",      Объект.НаПолучениеОт);
	СтруктураПараметров.Вставить("ПоДокументу",        Объект.ПоДокументу);
			     
	ОткрытьФорму("Документ.Доверенность.Форма.ФормаПечать", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
		
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	КонтрагентПриИзмененииНаСервере(Неопределено);
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере() Экспорт

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Документы.Доверенность.ЗаполнитьДокументПоСчетуНаОплатуПоставщика(Объект, ДокументОснование);		
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, , , , ДокументОснование);
		
КонецПроцедуры 

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры




