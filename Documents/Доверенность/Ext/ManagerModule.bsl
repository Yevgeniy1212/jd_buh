#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Журнал доверенностей
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Доверенность_Д2";
	КомандаПечати.Представление = НСтр("ru = 'Журнал доверенностей (форма Д-2)'");
	КомандаПечати.Обработчик = "Форма.ПечатьЖурналДоверенностей";
	КомандаПечати.СписокФорм = "ФормаСписка,ФормаВыбора";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Доверенность
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Доверенность_Д1";
	КомандаПечати.Представление = НСтр("ru = 'Доверенность (форма Д-1)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Доверенность_Д1";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать журнала доверенностей
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доверенность_Д2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доверенность_Д2",
			НСтр("ru = 'Журнал доверенностей (форма Д-2)'"),
			ПечатьЖурналДоверенностей(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.Доверенность.ПФ_MXL_Д2");
	КонецЕсли;

	// Печать доверенности
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доверенность_Д1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доверенность_Д1",
			НСтр("ru = 'Доверенность (форма Д-1)'"),
			ПечатьДоверенность(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.Доверенность.ПФ_MXL_Д1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьДоверенность(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доверенность.Номер КАК НомерДокумента,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация,
	|	Доверенность.СтруктурноеПодразделение,
	|	Доверенность.ФизЛицо,
	|	Доверенность.ФизЛицо.Наименование КАК ФамилияИмяОтчествоДоверенного,
	|	Доверенность.Контрагент КАК Поставщик,
	|	ВЫРАЗИТЬ(Доверенность.НаПолучениеОт КАК СТРОКА(1000)) КАК ПоставщикПредставление,
	|	Доверенность.ДатаДействия КАК СрокДействия,
	|	ВЫРАЗИТЬ(Доверенность.ПоДокументу КАК СТРОКА(1000)) КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.Ссылка,
	|	Доверенность.СтруктурнаяЕдиница.НомерСчета КАК БанковскийСчетНомерСчета,
	|	Доверенность.СтруктурнаяЕдиница.Банк.Наименование КАК БанковскийСчетНаименованиеБанка
	|ИЗ
	|	Документ.Доверенность КАК Доверенность
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)";
	Шапка = Запрос.Выполнить().Выбрать();
	
	//запрос по товарам
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	|	Доверенность.НомерСтроки КАК Номер,
	|	Доверенность.НаименованиеТовара КАК Ценности,
	|	Доверенность.НаименованиеТовара КАК ЦенностиПредставление,
	|	Доверенность.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	Доверенность.ЕдиницаПоКлассификатору.Представление КАК ЕдиницаИзмеренияПредставление,
	|	Доверенность.Количество,
	|	Доверенность.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Доверенность.Товары КАК Доверенность
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "Доверенность_Д1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Доверенность.ПФ_MXL_Д1");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		ПредставлениеОрганизации	  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		
		ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ФизЛицо, Шапка.ДатаДокумента);
		
		ФамилияИмяОтчествоДоверенного = ""+ДанныеОФизЛице.Фамилия +" "+ ДанныеОФизЛице.Имя +" "+ ДанныеОФизЛице.Отчество;
		Должность                    = СокрЛП(ДанныеОФизЛице.Должность);
		СтруктураФИО = Новый Структура();
		СтруктураФИО.Вставить("Фамилия", ДанныеОФизЛице.Фамилия);
		СтруктураФИО.Вставить("Имя", ДанныеОФизЛице.Имя);
		СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		
		ОбластьМакета.Параметры.СрокДействия             = Формат(Шапка.СрокДействия,"Л=" + КодЯзыка + "; ДЛФ=DD");  
		ОбластьМакета.Параметры.ДатаВыдачи               = Формат(Шапка.ДатаДокумента,"Л=" + КодЯзыка + "; ДЛФ=DD");
		
		ОбластьМакета.Параметры.НомерСчета = Шапка.БанковскийСчетНомерСчета;
		ОбластьМакета.Параметры.НаименованиеБанка = Шапка.БанковскийСчетНаименованиеБанка;
		
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН		 	  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.РеквизитыПотребителя     	  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,БИН_ИИН,ЮридическийАдрес,", , Шапка.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.РеквизитыПлательщика     	  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,БИН_ИИН,ЮридическийАдрес,", , Шапка.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.ПаспортСерия             	  = ДанныеОФизЛице.ДокументСерия;
		ОбластьМакета.Параметры.ПаспортНомер             	  = ДанныеОФизЛице.ДокументНомер;
		ОбластьМакета.Параметры.ПаспортВыдан             	  = ДанныеОФизЛице.ДокументКемВыдан;
		ОбластьМакета.Параметры.ПаспортДатаВыдачи             = Формат(ДанныеОФизЛице.ДокументДатаВыдачи, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.РеквизитыДокументаНаПолучение = СокрЛП(Шапка.РеквизитыДокументаНаПолучение);
		ОбластьМакета.Параметры.ПоставщикПредставление   	  = СокрЛП(Шапка.ПоставщикПредставление);
		
		Если  Не Шапка.ФИзЛицо.Пустая() Тогда
			ОбластьМакета.Параметры.ФамилияИмяОтчествоДоверенного = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчествоДоверенного, 3);
			ОбластьМакета.Параметры.ДолжностьДоверенного =
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(Должность, 3);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ШапкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ШапкаТаблицы);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ИтогоКоличество=0;
		
		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем переносимую часть заголовка таблицы	
					ТабДокумент.Вывести(ШапкаТаблицы);
					
				КонецЕсли;
				
				Количество = ВыборкаСтрокТовары.Количество; 		
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				Если ТипЗнч(ВыборкаСтрокТовары.ЦенностиПредставление) = Тип("Строка") Тогда
					ЦенностиПредставление = ВыборкаСтрокТовары.ЦенностиПредставление;
				Иначе
					ЦенностиНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСтрокТовары.ЦенностиПредставление, "НаименованиеПолное");
					Если ЗначениеЗаполнено(ЦенностиНаименованиеПолное) Тогда 
						ЦенностиПредставление = ЦенностиНаименованиеПолное;
					Иначе
						ЦенностиПредставление = ВыборкаСтрокТовары.ЦенностиПредставление;
					КонецЕсли;
				КонецЕсли;
				
				ОбластьМакета.Параметры.ЦенностиПредставление 		  = ЦенностиПредставление;
				ОбластьМакета.Параметры.Номер 						  = ВыборкаСтрокТовары.Номер;
				ОбластьМакета.Параметры.ЕдиницаИзмеренияПредставление = ВыборкаСтрокТовары.ЕдиницаИзмеренияПредставление;
				ОбластьМакета.Параметры.КоличествоПрописью 			  = "";
				
				Если ВыборкаСтрокТовары.Количество <> 0 Тогда
					ОбластьМакета.Параметры.КоличествоПрописью = Строка(ВыборкаСтрокТовары.Количество) + " (" + 
					СокрЛП(ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ВыборкаСтрокТовары.Количество, КодЯзыка)) + ")";
					
				КонецЕсли;											 
				
				ТабДокумент.Вывести(ОбластьМакета);
				ИтогоКоличество = ИтогоКоличество + Количество;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы");
		
		ОбластьМакета.Параметры.ИтогоКоличество = "";
		
		Если ИтогоКоличество <> 0 Тогда
			ОбластьМакета.Параметры.ИтогоКоличество = Строка(ИтогоКоличество) +  " (" + 
			СокрЛП(ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ИтогоКоличество)) + ")";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Руководители	 = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		Руководитель	 = Руководители.Руководитель;
		ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(Руководитель) Или Руководитель <> Неопределено Тогда
			ОбластьМакета.Параметры.Руководитель = СокрЛП(Руководитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГлавныйБухгалтер) Или ГлавныйБухгалтер <> Неопределено Тогда
			ОбластьМакета.Параметры.ГлавныйБухгалтер = СокрЛП(ГлавныйБухгалтер);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

Функция ПечатьЖурналДоверенностей(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "Доверенность_Д2";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Доверенность.ПФ_MXL_Д2");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	
	Запрос = Новый Запрос;
	
	УсловиеТекст = "";
	ОтборПоОрганизации = Неопределено;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("УсловиеОтбораПоОрганизации") Тогда 
		УсловиеТекст = ПараметрыПечати.УсловиеОтбораПоОрганизации.ТекстУсловия;
		ОтборПоОрганизации = ПараметрыПечати.УсловиеОтбораПоОрганизации.ЗначениеПараметра;
		Запрос.УстановитьПараметр("Организация", ОтборПоОрганизации);
	КонецЕсли;
	
	Если МассивОбъектов.Количество() > 1 Тогда
		Если НЕ ПустаяСтрока(УсловиеТекст) Тогда
			УсловиеТекст = УсловиеТекст + " И ";
		КонецЕсли;
		УсловиеТекст = УсловиеТекст + " Доверенность.Ссылка В(&МассивОбъектов)";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	ПериодПечати = Неопределено;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("Период", ПериодПечати) Тогда
		Если НЕ ПустаяСтрока(УсловиеТекст) Тогда
			УсловиеТекст = УсловиеТекст + " И ";
		КонецЕсли;
		УсловиеТекст  = УсловиеТекст + " Доверенность.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		ДатаОкончания = ПериодПечати.ДатаОкончания;
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = КонецДня(Дата(3999, 12, 31));
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачала"   , ПериодПечати.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер,
	|	Доверенность.Дата,
	|	Доверенность.ДатаДействия,
	|	Доверенность.ФизЛицо,
	|	Доверенность.Организация,
	|	Доверенность.ПоДокументу,
	|	Доверенность.Контрагент
	|ПОМЕСТИТЬ ВТ_Доверенности
	|ИЗ
	|	Документ.Доверенность КАК Доверенность
	//|ГДЕ
	//|	Доверенность.Ссылка В(&МассивОбъектов)
	|" + ?(НЕ ПустаяСтрока(УсловиеТекст), "ГДЕ " + УсловиеТекст, "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ДокументИсполнения) КАК ДокументИсполнения,
	|	ВложенныйЗапрос.Доверенность КАК Доверенность
	|ПОМЕСТИТЬ ВТ_ДокументыИсполнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Ссылка КАК ДокументИсполнения,
	|		ПоступлениеТоваровУслуг.ДокументОснование КАК Доверенность
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.ДокументОснование В
	|				(ВЫБРАТЬ
	|					ВТ_Доверенности.Ссылка
	|				ИЗ
	|					ВТ_Доверенности КАК ВТ_Доверенности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеНМА.Ссылка,
	|		ПоступлениеНМА.ДокументОснование
	|	ИЗ
	|		Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|	ГДЕ
	|		ПоступлениеНМА.ДокументОснование В
	|				(ВЫБРАТЬ
	|					ВТ_Доверенности.Ссылка
	|				ИЗ
	|					ВТ_Доверенности КАК ВТ_Доверенности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.Ссылка,
	|		ПриходныйКассовыйОрдер.ДокументОснование
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.ДокументОснование В
	|				(ВЫБРАТЬ
	|					ВТ_Доверенности.Ссылка
	|				ИЗ
	|					ВТ_Доверенности КАК ВТ_Доверенности)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Доверенность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Доверенность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доверенности.Ссылка,
	|	ВТ_Доверенности.Номер КАК Номер,
	|	ВТ_Доверенности.Дата КАК Дата,
	|	ВТ_Доверенности.ДатаДействия,
	|	ВТ_Доверенности.ФизЛицо,
	|	ВТ_Доверенности.Организация,
	|	ВТ_Доверенности.ПоДокументу,
	|	ВТ_Доверенности.Контрагент,
	|	ВТ_ДокументыИсполнения.ДокументИсполнения,
	|	ВТ_Доверенности.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное
	|ИЗ
	|	ВТ_Доверенности КАК ВТ_Доверенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыИсполнения КАК ВТ_ДокументыИсполнения
	|		ПО ВТ_Доверенности.Ссылка = ВТ_ДокументыИсполнения.Доверенность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	ДанныеДляЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОтборПоОрганизации, ОбщегоНазначения.ТекущаяДатаПользователя());
		
		ДанныеДляЗаполнения.Вставить("Организация",              ОтборПоОрганизации);
		ДанныеДляЗаполнения.Вставить("ПредставлениеОрганизации", ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"));
		ДанныеДляЗаполнения.Вставить("ОрганизацияРНН_БИН",       ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ОбщегоНазначения.ТекущаяДатаПользователя(), "ru"));
		ДанныеДляЗаполнения.Вставить("ТекстРНН_БИН",             НСтр("ru = 'ИИН/БИН'; kz = 'ЖСН/БСН'", КодЯзыка));
		
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ДанныеДляЗаполнения);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	СоответствиеСведенийОФизЛицах = Новый Соответствие;
	Пока ВыборкаДокументов.Следующий() Цикл
		ДанныеДляЗаполнения.Очистить();
		
		СведенияоФизЛице = СоответствиеСведенийОФизЛицах.Получить(ВыборкаДокументов.ФизЛицо);
		Если СведенияоФизЛице = Неопределено Тогда 
			СведенияоФизЛице  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаДокументов.Организация, ВыборкаДокументов.ФизЛицо, ВыборкаДокументов.Дата);
			СоответствиеСведенийОФизЛицах.Вставить(ВыборкаДокументов.ФизЛицо, СведенияоФизЛице);
		КонецЕсли;
		Сотрудник        = ?(НЕ ЗначениеЗаполнено(СведенияоФизЛице.Должность), "", Строка(СведенияоФизЛице.Должность) + ": ") + ?(НЕ ЗначениеЗаполнено(СведенияоФизЛице.Представление), Строка(ВыборкаДокументов.ФизЛицо), СведенияоФизЛице.Представление);
		
		Если НЕ ВыборкаДокументов.ДокументИсполнения = NULL И НЕ ВыборкаДокументов.ДокументИсполнения = Неопределено Тогда	
			РеквизитыДокументаИсполнения = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыборкаДокументов.ДокументИсполнения, "Номер, Дата");
		КонецЕсли;	
			
		Если ТипЗнч(ВыборкаДокументов.ДокументИсполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ПредставлениеДокументаИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Поступление ТМЗ и услуг %1 от %2'", КодЯзыка), РеквизитыДокументаИсполнения.Номер, РеквизитыДокументаИсполнения.Дата);
			ДанныеДляЗаполнения.Вставить("ДокументИсполненияПредставление", ПредставлениеДокументаИсполнения);	
		ИначеЕсли ТипЗнч(ВыборкаДокументов.ДокументИсполнения) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
			ПредставлениеДокументаИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Поступление НМА %1 от %2'", КодЯзыка), РеквизитыДокументаИсполнения.Номер, РеквизитыДокументаИсполнения.Дата);
			ДанныеДляЗаполнения.Вставить("ДокументИсполненияПредставление", ПредставлениеДокументаИсполнения);	
		ИначеЕсли ТипЗнч(ВыборкаДокументов.ДокументИсполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ПредставлениеДокументаИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Приходный кассовый ордер %1 от %2'", КодЯзыка), РеквизитыДокументаИсполнения.Номер, РеквизитыДокументаИсполнения.Дата);
			ДанныеДляЗаполнения.Вставить("ДокументИсполненияПредставление", ПредставлениеДокументаИсполнения);	
		Иначе
			ДанныеДляЗаполнения.Вставить("ДокументИсполненияПредставление", ВыборкаДокументов.ДокументИсполнения);	
		КонецЕсли;		
		
		ДанныеДляЗаполнения.Вставить("ДокументИсполнения", ВыборкаДокументов.ДокументИсполнения);
		ДанныеДляЗаполнения.Вставить("НомерДокумента",     ВыборкаДокументов.Номер);
		ДанныеДляЗаполнения.Вставить("ДатаДокумента",      Формат(ВыборкаДокументов.Дата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy")); 
		ДанныеДляЗаполнения.Вставить("СрокДействия",       Формат(ВыборкаДокументов.ДатаДействия, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
		ДанныеДляЗаполнения.Вставить("Сотрудник",          Сотрудник);
		ДанныеДляЗаполнения.Вставить("ФизЛицо",            ВыборкаДокументов.ФизЛицо);
		ДанныеДляЗаполнения.Вставить("Контрагент",         ВыборкаДокументов.КонтрагентНаименованиеПолное);
		ДанныеДляЗаполнения.Вставить("Поставщик",          ВыборкаДокументов.Контрагент);
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ДанныеДляЗаполнения);
		
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НайтиДокументИсполнения(Доверенность, ДокументИсполнения) Экспорт

	Если ЗначениеЗаполнено(Доверенность) Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Доверенность);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокСписания.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокСписания
		|ГДЕ
		|	ДокСписания.ДокументОснование = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПоступлениеНМА.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
		|ГДЕ
		|	ПоступлениеНМА.ДокументОснование = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументСсылка";

		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

		Если ВыборкаИзЗапроса.Следующий() Тогда
			ДокументИсполнения = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;

	КонецЕсли;
	
	Возврат ДокументИсполнения;

КонецФункции
 
Процедура ЗаполнитьДокументПоСчетуНаОплатуПоставщика(Объект, Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);		
					
	Объект.Товары.Очистить(); 
	
	СкопироватьТоварыОС(Объект, Основание);
		
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Ссылка, СтруктурнаяЕдиница, Номер, Дата, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	Если РеквизитыОснования = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.СтруктурнаяЕдиница  = РеквизитыОснования.СтруктурнаяЕдиница;
	Объект.ДокументОснование   = РеквизитыОснования.Ссылка;  	
	
	ТекстПоДокументу = НСтр("ru = 'Счет на оплату от поставщика №%1 от %2 г.'", ОбщегоНазначения.КодОсновногоЯзыка());	 
	
	Если ЗначениеЗаполнено(РеквизитыОснования.НомерВходящегоДокумента) И ЗначениеЗаполнено(РеквизитыОснования.ДатаВходящегоДокумента) Тогда
		Объект.ПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоДокументу, 
									СокрЛП(РеквизитыОснования.НомерВходящегоДокумента), 
									Формат(РеквизитыОснования.ДатаВходящегоДокумента, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + ";ДФ='дд ММММ гггг'")); 
	Иначе
		Объект.ПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоДокументу,  
									СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", 15), 
									СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", 20)); 
	КонецЕсли; 				
	
КонецПроцедуры 
	
Процедура СкопироватьТоварыОС(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетНаОплатуПоставщикаТовары.НомерСтроки КАК НомерСтроки,
	               |	СчетНаОплатуПоставщикаТовары.Номенклатура КАК НаименованиеТовара,
	               |	СчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения КАК ЕдиницаПоКлассификатору,
	               |	СчетНаОплатуПоставщикаТовары.Количество КАК Количество
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	               |ГДЕ
	               |	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СчетНаОплатуПоставщикаОС.НомерСтроки,
	               |	СчетНаОплатуПоставщикаОС.ОсновноеСредство,
	               |	&ЕдиницаИзмеренияОС,
	               |	1	
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика.ОС КАК СчетНаОплатуПоставщикаОС
	               |ГДЕ
	               |	СчетНаОплатуПоставщикаОС.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";  
	
	// попытаемся найти по коду единицу измерения "штука"
	ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	Если НЕ ЗначениеЗаполнено(ЕдИзмСсылка) Тогда 
		// если не нашли по коду, то попытаемся найти по наименованию
		ЕдИзмСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияОС", ЕдИзмСсылка); 
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры 



#КонецЕсли

