#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриСозданииНаСервере(ЭтотОбъект);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	си_УчетСпецодеждыСервер.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	//КонецЕсли;	

	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма") Тогда
		ЗаполнениеТЧНаСервере("ЗаполнениеПоСотруднику",ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы="Справочник.Номенклатура.Форма.ФормаВыбора" ИЛИ ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.си_ПередачаМатериаловВЭксплуатацию.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.си_ПеремещениеМатериаловВЭксплуатации.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
	ИначеЕсли (ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" ИЛИ Найти(ИсточникВыбора.ИмяФормы,"Справочник.Сотрудники")>0) Тогда
		ЗаполнениеТЧНаСервере("ЗаполнениеПоСотруднику",ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ПереопределениеПроцедурБСПКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	
	Если ИмяСобытия = "ПолучитьВыбранныеЭлементы" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда 
			ПолучитьВыбранныеЭлементы(Параметр.Адрес,Ложь)
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "СрокЭксплуатации" Тогда
		ТипЗаполнения = "ЗаполнениеПоСрокуЭксплуатации";
		ПараметрЗаполнения = Параметр;
		Если Объект.Материалы.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыСрокЭксплуатации", ЭтотОбъект,Новый Структура("ТипЗаполнения,ПараметрЗаполнения",ТипЗаполнения,ПараметрЗаполнения));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Иначе 
			ЗаполнениеТЧНаСервере(ТипЗаполнения,ПараметрЗаполнения);
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	
	си_ОбщегоНазначенияСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПослеЗаписиНаСервере(ЭтотОбъект,ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_си_СписаниеМатериаловИзЭксплуатации", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = общ_ПереопределениеПроцедурБККлиентСервер.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_ПереопределяемыеПроцедурыБККлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСписанияРасходовПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура(
	"Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетУчетаБУ, СчетУчетаНУ"
	);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
	"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
	|УчитыватьКПН, Склад");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.МатериалыНоменклатура;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана номенклатура!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	си_ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	мКоэффициент =  СтрокаТабличнойЧасти.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетДтБУПриИзменении()
	
	Объект.СчетДтНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДтБУ));
	
	ПоляФормы		= Новый Структура("СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3",
	"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДтНУ, Объект, ПоляФормы);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДтБУ,,, Объект.СчетДтНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "СчетДтБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
	|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПриИзменении(Элемент)
	
	общ_ПереопределениеПроцедурБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДтБУ, Объект.СчетДтНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "СчетДтБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетДтБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПриИзменении(Элемент)
	
	общ_ПереопределениеПроцедурБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДтБУ, Объект.СчетДтНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "СчетДтБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетДтБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПриИзменении(Элемент)
	
	общ_ПереопределениеПроцедурБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДтБУ, Объект.СчетДтНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "СчетДтБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетДтБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтНУПриИзменении()
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДтБУ,,, Объект.СчетДтНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Для Каждого СтрокаТЧ Из Объект.ИнвентаризационнаяКомиссия Цикл
		Если СтрокаТЧ.ПолучитьИдентификатор() = Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ.Председатель = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПередачиВЭксплуатацию(Команда)
	
	ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПеремещения(Команда)
	
	ОткрытьФормуВыбораПеремещение("Материалы", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеМатериаламиСИстекшимСроком(Команда)
	ЗаполнениеТЧ("ЗаполнениеМатериаламиСИстекшимСроком")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоДокументуПередачи(Команда)
	ЗаполнениеТЧ("ЗаполнениеПоДокументуПередачи");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоОстаткам(Команда)
	ЗаполнениеТЧ("ЗаполнениеПоОстаткам");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоСкладу(Команда)
	ЗаполнениеТЧ("ЗаполнениеПоСкладу");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоСотруднику(Команда)
	ЗаполнениеТЧ("ЗаполнениеПоСотруднику");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоСрокуЭксплуатации(Команда)
	ЗаполнениеТЧ("ЗаполнениеПоСрокуЭксплуатации");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПередачеВЭксплуатацию(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПеремещению(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыПеремещение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПеремещение("Материалы", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	си_УчетСпецодеждыКлиент.ПодборНоменклатуры(Элементы.Материалы,УникальныйИдентификатор,ПараметрыПодбора,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзОстатков(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СостояниеМатериалов", Объект.СостояниеМатериалов);
	Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе")
		ИЛИ Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		СостояниеМатериаловНаСкладе = Новый СписокЗначений;
		Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
			СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении"));
		КонецЕсли;
		Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
			СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая"));
		КонецЕсли;
		ПараметрыФормы.Вставить("СостояниеМатериаловНаСкладе", СостояниеМатериаловНаСкладе);
	Иначе
		ПараметрыФормы.Вставить("ПодразделениеОрганизации"	, Объект.ПодразделениеОрганизации);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаПодбораМатериаловИзОстатков",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчистка", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Продолжить выполнение операции?';"
	+ " en = 'Do you want to continue?'"), Режим, 0);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		Если Не ЗначениеЗаполнено(Объект.ВидУчетаНУ) Тогда
			си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СпособСписанияРасходов = Перечисления.си_СпособыСписанияРасходов.ПоПараметрамДокумента Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДтБУ,,, Объект.СчетДтНУ);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "СчетДтБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ");
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	общ_ПереопределяемыеПроцедурыБКСервер.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.МатериалыСотрудник);
	
	ВедетсяУчетПоХарактеристикам = си_УчетСпецодеждыСерверПовтИсп.ВедетсяУчетПоХарактеристикам();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость          = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость        = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяВЭксплуатации") Тогда
		Объект.Склад 								= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		Элементы.МатериалыДокументПередачи.Видимость = Истина;
		Элементы.МатериалыНазначениеИспользования.Видимость = Истина;
		
		Элементы.ПодразделениеОрганизации.Видимость	= Истина;
		Элементы.Склад.Видимость 					= Ложь;
		
		Элементы.МатериалыСотрудник.Видимость 				= Истина;
		Элементы.МатериалыЗаполнениеПоСкладу.Видимость 		= Ложь;
		Элементы.МатериалыЗаполнениеПоСотруднику.Видимость 	= Истина;
		Элементы.МатериалыДокументВозврата.Видимость 		= Ложь;
		
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
		Объект.ПодразделениеОрганизации 			= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.Сотрудник = ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
		КонецЦикла;
		Элементы.МатериалыДокументПередачи.Видимость = Истина;
		Элементы.МатериалыНазначениеИспользования.Видимость = Истина;
		
		Элементы.ПодразделениеОрганизации.Видимость	= Ложь;
		Элементы.Склад.Видимость 					= Истина;
		
		Элементы.МатериалыСотрудник.Видимость 				= Ложь;
		Элементы.МатериалыЗаполнениеПоСкладу.Видимость 		= Истина;
		Элементы.МатериалыЗаполнениеПоСотруднику.Видимость 	= Ложь;
		Элементы.МатериалыДокументВозврата.Видимость 		= Истина;
		
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
		Объект.ПодразделениеОрганизации 			= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.Сотрудник = ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
			СтрокаТЧ.НазначениеИспользования = ПредопределенноеЗначение("Справочник.си_НазначенияИспользования.ПустаяСсылка");
			СтрокаТЧ.ДокументПередачи = ПредопределенноеЗначение("Документ.си_ПередачаМатериаловВЭксплуатацию.ПустаяСсылка");
		КонецЦикла;
		Элементы.МатериалыДокументПередачи.Видимость = Ложь;
		Элементы.МатериалыНазначениеИспользования.Видимость = Ложь;
		
		Элементы.ПодразделениеОрганизации.Видимость	= Ложь;
		Элементы.Склад.Видимость 					= Истина;
		
		Элементы.МатериалыСотрудник.Видимость 				= Ложь;
		Элементы.МатериалыЗаполнениеПоСкладу.Видимость 		= Истина;
		Элементы.МатериалыЗаполнениеПоСотруднику.Видимость 	= Ложь;
		Элементы.МатериалыДокументВозврата.Видимость 		= Ложь;
		
		Объект.СпособСписанияРасходов = ПредопределенноеЗначение("Перечисление.си_СпособыСписанияРасходов.ПоПараметрамДокумента")
		
	КонецЕсли;
	
	Если Объект.СпособСписанияРасходов = ПредопределенноеЗначение("Перечисление.си_СпособыСписанияРасходов.ПоПараметрамДокумента") Тогда
		Элементы.ГруппаСчетаУчета.Видимость 				= Истина;
		Элементы.МатериалыНазначениеИспользования.ОтметкаНезаполненного = Ложь;
	Иначе 
		Элементы.ГруппаСчетаУчета.Видимость 				= Ложь;
		
		Элементы.МатериалыНазначениеИспользования.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Элементы.СостояниеМатериалов.СписокВыбора.ЗагрузитьЗначения(си_УчетСпецодеждыСервер.ПолучитьЗначенияСпискаСостояний());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура("СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3",
	Префикс + "СубконтоДтБУ1" + Постфикс,
	Префикс + "СубконтоДтБУ2" + Постфикс,
	Префикс + "СубконтоДтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3",
	"ЗаголовокСубконтоДтБУ1", "ЗаголовокСубконтоДтБУ2", "ЗаголовокСубконтоДтБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , , СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	Если СтрокаТабличнойЧасти.Свойство("НазначениеИспользования") Тогда
		СтрокаТабличнойЧасти.НазначениеИспользования = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования),СтрокаТабличнойЧасти.НазначениеИспользования,СтрокаТабличнойЧасти.Номенклатура.си_ОсновноеНазначениеИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ТипЦен"                  , Неопределено);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Неопределено);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Материалы" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(
	общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		
		СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		ИначеЕсли СтрокаТовара.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТовара.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтрокиКУдалению = Новый Массив;	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТабличнойЧасти.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
			Продолжить;	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
		ТаблицаОбработки.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Объект.Материалы.Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыСрокЭксплуатации(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ЗаполнениеТЧНаСервере(Параметры.ТипЗаполнения,Параметры.ПараметрЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыПеремещение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ОткрытьФормуВыбораПеремещение("Материалы", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчистка(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию(ТабличнаяЧасть, СпособЗаполнения)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.си_ПередачаМатериаловВЭксплуатацию.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПеремещение(ТабличнаяЧасть, СпособЗаполнения)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.си_ПеремещениеМатериаловВЭксплуатации.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("ДокументСсылка.си_ПередачаМатериаловВЭксплуатацию") Тогда
		Документы.си_СписаниеМатериаловИзЭксплуатации.ЗаполнитьПоПередачеВЭксплуатацию(Объект, "Добавить", ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("ДокументСсылка.си_ПеремещениеМатериаловВЭксплуатации") Тогда
		Документы.си_СписаниеМатериаловИзЭксплуатации.ЗаполнитьПоПеремещению(Объект, "Добавить", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеЭлементы(Адрес,ЗаполнятьНазначение = Истина)
	ВыбранныеЭлементы = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ВыбранныеЭлементы) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ЭлементТаблицы Из ВыбранныеЭлементы Цикл
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементТаблицы);
			
			ДанныеСтрокиТаблицы = Новый Структура(
			"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,СчетУчетаБУ, СчетУчетаНУ"+?(ЗаполнятьНазначение,",НазначениеИспользования","")
			);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
			
			ДанныеОбъекта = Новый Структура(
			"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
			|УчитыватьКПН, Склад");
			
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
			ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТЧ(ТипЗаполнения)
	ОбработчикКомандыЗаполненияТЧПоОбъекту = Новый ОписаниеОповещения("ОбработчкиВыбораОбъектаЗаполненияТЧ",ЭтаФорма,Новый Структура("ТипЗаполнения",ТипЗаполнения));
	Если ТипЗаполнения = "ЗаполнениеПоСотруднику" Тогда
		си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(ЭтаФорма, Новый Структура("ТекущиеДанные",Новый Структура("Сотрудник")),Ложь);
		Возврат;
	ИначеЕсли ТипЗаполнения = "ЗаполнениеПоСкладу" Тогда
		ПараметрЗаполнения = Объект.Склад;
	ИначеЕсли ТипЗаполнения = "ЗаполнениеПоДокументуПередачи" Тогда
		ПараметрыФормы = Новый Структура("Отбор",Новый Структура("Организация",Объект.Организация));
		ОткрытьФорму("Документ.си_ПередачаМатериаловВЭксплуатацию.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,);
		Возврат;
	ИначеЕсли ТипЗаполнения = "ЗаполнениеПоОстаткам" Тогда
		ПараметрЗаполнения = "ПоОстаткам";
	ИначеЕсли ТипЗаполнения = "ЗаполнениеМатериаламиСИстекшимСроком" Тогда
		ПараметрЗаполнения = "ПоМатериаламСИстекшимСроком";
	ИначеЕсли ТипЗаполнения = "ЗаполнениеПоСрокуЭксплуатации" Тогда
		ФормаВыбораПериода = ПолучитьФорму("Документ.си_СписаниеМатериаловИзЭксплуатации.Форма.ФормаВыбораПериода",,ЭтаФорма);
		ФормаВыбораПериода.Открыть();
		Возврат;
	КонецЕсли;
	ЗаполнениеТЧНаСервере(ТипЗаполнения,ПараметрЗаполнения)
КонецПроцедуры

&НаКлиенте
Процедура ОбработчкиВыбораОбъектаЗаполненияТЧ(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ЗаполнениеТЧНаСервере(ДополнительныеПараметры.ТипЗаполнения,РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТЧНаСервере(ТипЗаполнения,ПараметрЗаполнения)
	Если ПараметрЗаполнения = Неопределено Тогда
		Возврат
	КонецЕсли;
	Результат = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",Объект.СтруктурноеПодразделение);
	
	ТребуемыйРегистр = ?(Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации,"си_МатериалыВЭксплуатации","си_МатериалыНаСкладе");
	ТребуемоеИзмерение = ?(Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации,"Сотрудник","Склад");
	ИзмерениеДокументВозврата = ?(Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации,"",", си_МатериалыВЭксплуатацииОстатки.ДокументВозврата");
	УчетПоПодразделениям = ?(Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации,Истина,Ложь);
	Если Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе Тогда
		СостояниеСпецодежды = Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении;
		Склад = Объект.Склад;
	ИначеЕсли Объект.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
		СостояниеСпецодежды = Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая;
		Склад = Объект.Склад;
	Иначе
		СостояниеСпецодежды = "";
		Склад = "";
	КонецЕсли;
	Если Не СостояниеСпецодежды = "" Тогда
		Запрос.УстановитьПараметр("СостояниеСпецодежды"	,СостояниеСпецодежды);
	КонецЕсли;
	Если Не Склад = "" Тогда
		Запрос.УстановитьПараметр("Склад"	,Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("Период",Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",Объект.ПодразделениеОрганизации);
	
	Если ТипЗаполнения = "ЗаполнениеПоСотруднику" Тогда
		Запрос.УстановитьПараметр("Сотрудник",ПараметрЗаполнения);
		
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки.Сотрудник,
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования
		|ИЗ
		|	РегистрНакопления.си_МатериалыВЭксплуатации.Остатки(
		|			&Период,
		|			Сотрудник = &Сотрудник
		|				И Организация = &Организация
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки";
		Результат = Запрос.Выполнить().Выгрузить();				  
		
	ИначеЕсли
		ТипЗаполнения = "ЗаполнениеПоДокументуПередачи" Тогда
		Запрос.УстановитьПараметр("ДокументПередачи",ПараметрЗаполнения);
		
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки."+ТребуемоеИзмерение+",
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования,
		|	" + ИзмерениеДокументВозврата + "
		|ИЗ
		|	РегистрНакопления."+ТребуемыйРегистр+".Остатки(
		|				&Период,
		|				ДокументПередачи = &ДокументПередачи
		|				И Организация = &Организация
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки";
		Результат = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли
		ТипЗаполнения = "ЗаполнениеПоОстаткам" Тогда
		Запрос.УстановитьПараметр("Организация"				,Объект.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",Объект.СтруктурноеПодразделение);
		
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки."+ТребуемоеИзмерение+",
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования
		|	" + ИзмерениеДокументВозврата + "
		|ИЗ
		|	РегистрНакопления."+ТребуемыйРегистр+".Остатки(
		|				&Период, 
		|				Организация = &Организация 
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки";
		Результат = Запрос.Выполнить().Выгрузить();
	ИначеЕсли
		ТипЗаполнения = "ЗаполнениеМатериаламиСИстекшимСроком" Тогда
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования,
		|	си_МатериалыВЭксплуатацииОстатки."+ТребуемоеИзмерение+"
		|	" + ИзмерениеДокументВозврата + "
		|ИЗ
		|	РегистрНакопления."+ТребуемыйРегистр+".Остатки(
		|				&Период, Организация = &Организация 
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки
		|ГДЕ
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования <= 0
		|	И си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток > 0";
		Результат = Запрос.Выполнить().Выгрузить();
	ИначеЕсли
		ТипЗаполнения = "ЗаполнениеПоСрокуЭксплуатации" Тогда
		Запрос.УстановитьПараметр("СрокЭксплуатации",ПараметрЗаполнения);
		
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования,
		|	си_МатериалыВЭксплуатацииОстатки."+ТребуемоеИзмерение+"
		|	" + ИзмерениеДокументВозврата + "
		|ИЗ
		|	РегистрНакопления."+ТребуемыйРегистр+".Остатки(
		|				&Период, 
		|				Организация = &Организация
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки
		|ГДЕ
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования <= &СрокЭксплуатации";
		Результат = Запрос.Выполнить().Выгрузить();
	ИначеЕсли ТипЗаполнения = "ЗаполнениеПоСкладу" Тогда
		Запрос.УстановитьПараметр("Склад",ПараметрЗаполнения);
		Запрос.Текст= "ВЫБРАТЬ
		|	си_МатериалыВЭксплуатацииОстатки.Номенклатура,
		|	си_МатериалыВЭксплуатацииОстатки.Характеристика,
		|	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования,
		|	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи,
		|	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		|	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования
		|	" + ИзмерениеДокументВозврата + "
		|ИЗ
		|	РегистрНакопления.си_МатериалыНаСкладе.Остатки(
		|				&Период, 
		|				Склад = &Склад 
		|				И Организация = &Организация 
		|"+?(УчетПоПодразделениям,"И ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
		|"+?(НЕ СостояниеСпецодежды = "","И СостояниеСпецодежды = &СостояниеСпецодежды","")+"
		|"+?(НЕ Склад = "","И Склад = &Склад","")+"
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки";
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Объект.Материалы.Загрузить(Результат);
	Для Каждого НоваяСтрока Из Объект.Материалы Цикл
		ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Характеристика, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетУчетаБУ, СчетУчетаНУ"
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
		
		ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
		|УчитыватьКПН, Склад");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта)
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта)
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	ДанныеОбъекта.Организация, 
	Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	"СубконтоДтБУ1", "СубконтоДтБУ2", "СубконтоДтБУ3", 
	ДанныеОбъекта.СубконтоДтБУ1, ДанныеОбъекта.СубконтоДтБУ2, ДанныеОбъекта.СубконтоДтБУ3));
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	ДанныеОбъекта.Организация, 
	Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоНУ3, 
	|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	ДанныеОбъекта.Организация, 
	Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	общ_ПереопределяемыеПроцедурыБККлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);
	
	Возврат СписокПараметров; 
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	общ_ПереопределениеПроцедурБСПКлиент.ФормаОбъекта_ПриОткрытии(ЭтотОбъект,Отказ);
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		си_УчетСпецодеждыКлиент.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_ПереопределяемыеПроцедурыБКСервер.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//СтандартныеОбработчикиФормыБСП.Начало


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	//Элементы.Товары.ТолькоПросмотр       = Ложь;
	//Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	//Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	

	//Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

//СтандартныеОбработчикиФормыБСП.Конец

// СтараяБСП

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	общ_ПереопределениеПроцедурБСПСервер.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		общ_ПереопределениеПроцедурБСПКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;	

КонецПроцедуры

// Конец СтараяБСП

#КонецОбласти
