
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриСозданииНаСервере(ЭтотОбъект);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	си_УчетСпецодеждыСервер.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	//КонецЕсли;	

	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы="Справочник.Номенклатура.Форма.ФормаВыбора" ИЛИ ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.си_ПередачаМатериаловВЭксплуатацию.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.си_ПеремещениеМатериаловВЭксплуатации.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ПереопределениеПроцедурБСПКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	
	Если ИмяСобытия = "ПолучитьВыбранныеЭлементы" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда 
			ПолучитьВыбранныеЭлементы(Параметр.Адрес)
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ПолучитьСписокСотрудников" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда
			ПолучитьСписокСотрудников(Параметр.Адрес);
		КонецЕсли;	
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	
	си_ОбщегоНазначенияСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПослеЗаписиНаСервере(ЭтотОбъект,ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_си_ПеремещениеМатериаловВЭксплуатации", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = общ_ПереопределениеПроцедурБККлиентСервер.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ИсходнаяОрганизация = Объект.Организация Тогда
		Возврат
	КонецЕсли;
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловПриИзменении(Элемент)
	
	Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяВЭксплуатации") Тогда
		Объект.Склад 											= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		Объект.СкладПолучатель 									= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
		Объект.ПодразделениеОрганизацииПолучатель 				= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Объект.ПодразделениеОрганизации 						= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Для каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.Сотрудник 									= ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
			СтрокаТЧ.СотрудникПолучатель 						= ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
		КонецЦикла;
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
		Объект.ПодразделениеОрганизацииПолучатель 				= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Объект.ПодразделениеОрганизации 						= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Для каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.Сотрудник 									= ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
			СтрокаТЧ.СотрудникПолучатель 						= ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделение = Неопределено;
		СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Результат = общ_ПереопределяемыеПроцедурыБККлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияОтправитель, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат,"Отправитель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Ложь,"ПослеВыбораСтруктурногоПодразделенияОтправителя");
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятиеСУчетаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация
	Иначе 
		Результат = общ_ПереопределяемыеПроцедурыБККлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияПолучатель, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат,"Получатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь,"ПослеВыбораСтруктурногоПодразделенияПолучателя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура(
	"Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования,НазначениеИспользованияПолучатель, Количество,СчетУчетаБУ, СчетУчетаНУ"
	);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
	"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
	|УчитыватьКПН, Склад");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.МатериалыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Элементы.Материалы.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.МатериалыНоменклатура;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана номенклатура!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	си_ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	мКоэффициент =  СтрокаТабличнойЧасти.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПолучательПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МатериалыСчетУчетаПолучательОбработкаВыбораНаСервере(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПередачиВЭксплуатацию(Команда)
	
	ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПеремещения(Команда)
	
	ОткрытьФормуВыбораПеремещение("Материалы", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПередачеВЭксплуатацию(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПеремещению(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыПеремещение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПеремещение("Материалы", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискомРаботников(Команда)
	Если Объект.Проведен Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменаПроведенияПриЗаполнении", ЭтаФорма);
		ТекстВопроса = "Для заполнения табличной части требуется отмена проведения документа. Продолжить?";
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"'"), Режим, 0);
	Иначе
		ЗаполнитьСпискомРаботниковВызовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
		ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчистка", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Продолжить выполнение операции?';"
	+ " en = 'Do you want to continue?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	си_УчетСпецодеждыКлиент.ПодборНоменклатуры(Элементы.Материалы,УникальныйИдентификатор,ПараметрыПодбора,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзОстатков(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СостояниеМатериалов", Объект.СостояниеМатериалов);
	Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		СостояниеМатериаловНаСкладе = Новый СписокЗначений;
		СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении"));
		ПараметрыФормы.Вставить("СостояниеМатериаловНаСкладе", СостояниеМатериаловНаСкладе);
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		СостояниеМатериаловНаСкладе = Новый СписокЗначений;
		СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая"));
		ПараметрыФормы.Вставить("СостояниеМатериаловНаСкладе", СостояниеМатериаловНаСкладе);
	Иначе
		ПараметрыФормы.Вставить("ПодразделениеОрганизации"	, Объект.ПодразделениеОрганизации);
	КонецЕсли;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Дата"						, Объект.Дата);
	ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаПодбораМатериаловИзОстатков",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	ФормаПодбора.Открыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управление формой
&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		Если Не ЗначениеЗаполнено(Объект.ВидУчетаНУ) Тогда
			си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ
	(ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь И (ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) 
	ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)));
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизацияОтправитель);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь 
		И НЕ(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) 
		ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)) Тогда
		
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Ложь;
	Иначе
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Истина;
	КонецЕсли;	
	общ_ПереопределяемыеПроцедурыБКСервер.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.МатериалыСотрудник);
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.МатериалыСотрудникПолучатель);
	
	Элементы.МатериалыСотрудник.Заголовок = Элементы.МатериалыСотрудник.Заголовок + " отправитель";
	Элементы.МатериалыСотрудникПолучатель.Заголовок = Элементы.МатериалыСотрудникПолучатель.Заголовок + " получатель";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость          = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость        = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Если Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяВЭксплуатации") Тогда
		Элементы.ПодразделениеОрганизации.Видимость 			= Истина;
		Элементы.ПодразделениеОрганизацииПолучатель.Видимость 	= Истина;
		Элементы.Склад.Видимость 								= Ложь;
		Элементы.СкладПолучатель.Видимость 						= Ложь;
		Элементы.МатериалыСотрудник.Видимость 					= Истина;
		Элементы.МатериалыДокументПередачи.Видимость			= Истина;
		Элементы.МатериалыНазначениеИспользования.Видимость		= Истина;
		Элементы.МатериалыДокументВозврата.Видимость 			= Ложь;
		
		Если Объект.СнятиеСУчета Тогда
			Элементы.МатериалыСотрудникПолучатель.Видимость = Ложь;
			Элементы.МатериалыНазначениеИспользованияПолучатель.Видимость = Ложь;
			Элементы.СкладПолучатель.Видимость = Истина;
		Иначе
			Элементы.МатериалыСотрудникПолучатель.Видимость = Истина;
			Элементы.МатериалыНазначениеИспользованияПолучатель.Видимость = Истина;
			Элементы.СкладПолучатель.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
		Элементы.ПодразделениеОрганизации.Видимость 			= Ложь;
		Элементы.ПодразделениеОрганизацииПолучатель.Видимость 	= Ложь;
		Элементы.Склад.Видимость 								= Истина;
		Элементы.СкладПолучатель.Видимость 						= Истина;
		Элементы.МатериалыСотрудник.Видимость 					= Ложь;
		Элементы.МатериалыДокументВозврата.Видимость 			= Истина;
		Элементы.МатериалыДокументПередачи.Видимость			= Истина;
		Элементы.МатериалыНазначениеИспользования.Видимость		= Истина;
		
		Если Объект.СнятиеСУчета Тогда
			Элементы.МатериалыСотрудникПолучатель.Видимость = Ложь;
			Элементы.МатериалыНазначениеИспользованияПолучатель.Видимость = Ложь;
		Иначе
			Элементы.МатериалыСотрудникПолучатель.Видимость = Ложь;
			Элементы.МатериалыНазначениеИспользованияПолучатель.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
		Элементы.ПодразделениеОрганизации.Видимость 			= Ложь;
		Элементы.ПодразделениеОрганизацииПолучатель.Видимость 	= Ложь;
		Элементы.Склад.Видимость 								= Истина;
		Элементы.СкладПолучатель.Видимость 						= Истина;
		Элементы.МатериалыСотрудник.Видимость 					= Ложь;
		Элементы.МатериалыДокументВозврата.Видимость 			= Ложь;
		Элементы.МатериалыДокументПередачи.Видимость			= Ложь;
		Элементы.МатериалыНазначениеИспользования.Видимость		= Ложь;
		
		Элементы.МатериалыСотрудникПолучатель.Видимость 		= Ложь;
		Элементы.МатериалыНазначениеИспользованияПолучатель.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.МатериалыСчетУчетаПолучатель.Видимость = Объект.СнятиеСУчета;
	Элементы.Партия.Видимость = Объект.СнятиеСУчета;
	
	Элементы.СостояниеМатериалов.СписокВыбора.ЗагрузитьЗначения(си_УчетСпецодеждыСервер.ПолучитьЗначенияСпискаСостояний());
	
	Элементы.МатериалыИзменитьТовары.Видимость = си_ОбщегоНазначенияВызовСервераПовтИсп.ДоступноИзменениеТабличныхЧастей();
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

// При изменении реквизитов (на сервере)
&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , , СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправителя(Результат, Параметры) Экспорт
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат,"Отправитель");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат,"Получатель");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта,ИзменятьНазначение = Истина)
	
	СведенияОНоменклатуре = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  					= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   					= СведенияОНоменклатуре.Коэффициент;
	Если ИзменятьНазначение Тогда
		СтрокаТабличнойЧасти.НазначениеИспользования 			= СтрокаТабличнойЧасти.Номенклатура.си_ОсновноеНазначениеИспользования;
		СтрокаТабличнойЧасти.НазначениеИспользованияПолучатель	= СтрокаТабличнойЧасти.Номенклатура.си_ОсновноеНазначениеИспользования;
	Иначе
		СтрокаТабличнойЧасти.НазначениеИспользованияПолучатель	= СтрокаТабличнойЧасти.НазначениеИспользования;
	КонецЕсли;
КонецПроцедуры

// Подбор товаров
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ТипЦен"                  , Неопределено);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Неопределено);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Материалы" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация,  УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(
	общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		
		СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		ИначеЕсли СтрокаТовара.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТовара.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтрокиКУдалению = Новый Массив;	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТабличнойЧасти.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
		ТаблицаОбработки.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Объект.Материалы.Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеПодразделения(Организация, СтруктурноеПодразделение, Подразделение = Неопределено) Экспорт 
	
	Если (Не ЗначениеЗаполнено(СтруктурноеПодразделение) И Не ЗначениеЗаполнено(Организация)) 
		Или (Подразделение <> Неопределено И Не ЗначениеЗаполнено(Подразделение)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
	
	СписокПодразделений = Новый СписокЗначений;
	СписокПодразделений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));			   
	
	ПустаяСсылкаПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Подразделение <> Неопределено Тогда
		Если СписокПодразделений.НайтиПоЗначению(Подразделение) = Неопределено Тогда
			Подразделение = ПустаяСсылкаПодразделения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ОрганизацияПриИзмененииНаСервере();
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизацияОтправитель);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию("Материалы", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТоварыПеремещение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ОткрытьФормуВыбораПеремещение("Материалы", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчистка(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	Документы.си_ПеремещениеМатериаловВЭксплуатации.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПередачаМатериаловВЭксплуатацию(ТабличнаяЧасть, СпособЗаполнения)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.си_ПередачаМатериаловВЭксплуатацию.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПеремещение(ТабличнаяЧасть, СпособЗаполнения)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.си_ПеремещениеМатериаловВЭксплуатации.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("ДокументСсылка.си_ПередачаМатериаловВЭксплуатацию") Тогда
		Документы.си_ПеремещениеМатериаловВЭксплуатации.ЗаполнитьПоПередачеВЭксплуатацию(Объект, "Добавить", ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("ДокументСсылка.си_ПеремещениеМатериаловВЭксплуатации") Тогда
		Документы.си_ПеремещениеМатериаловВЭксплуатации.ЗаполнитьПоПеремещению(Объект, "Добавить", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеЭлементы(Адрес)
	ВыбранныеЭлементы = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ВыбранныеЭлементы) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ЭлементТаблицы Из ВыбранныеЭлементы Цикл
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементТаблицы);
			
			ДанныеСтрокиТаблицы = Новый Структура(
			"Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования,НазначениеИспользованияПолучатель, Количество,СчетУчетаБУ, СчетУчетаНУ"
			);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
			
			ДанныеОбъекта = Новый Структура(
			"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
			|УчитыватьКПН, Склад");
			
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
			ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта,Ложь);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискомРаботниковВызовФормы()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда 
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
	ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаФормированияСпискаСотрудников",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСотрудников(Адрес)
	Документы.си_ПеремещениеМатериаловВЭксплуатации.АвтозаполнениеСпискомСотрудников(ЭтаФорма,Адрес);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтменаПроведенияПриЗаполнении(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения));
	ЗаполнитьСпискомРаботниковВызовФормы();
КонецПроцедуры

&НаСервере
Процедура МатериалыСчетУчетаПолучательОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	СчетаУчетаМатериалов = си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	МассивСчетов = Новый Массив;
	
	Для Каждого Счет Из СчетаУчетаМатериалов Цикл
		МассивСчетов.Добавить(Счет.Значение);
	КонецЦикла;
	
	НайденныйСчет = МассивСчетов.Найти(ВыбранноеЗначение);
	Если Не НайденныйСчет = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.СообщитьПользователю("Выбранный счет " + ВыбранноеЗначение + " не может быть использован в качестве счета получателя при снятии с учета спецодежды и инвентаря");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	общ_ПереопределениеПроцедурБСПКлиент.ФормаОбъекта_ПриОткрытии(ЭтотОбъект,Отказ);

	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		си_УчетСпецодеждыКлиент.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
	Объект.СтруктурноеПодразделение 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СтруктурноеПодразделениеОрганизацияПолучатель  = Объект.Организация;
	Объект.СтруктурноеПодразделениеПолучатель      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	общ_ПереопределяемыеПроцедурыБКСервер.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УправлениеФормой(ЭтаФорма);
	
	ИсходнаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры,Поле)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения,Поле);
	
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения,Поле)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_ПереопределяемыеПроцедурыБКСервер.СтруктурноеПодразделениеПриИзменении(ЭтотОбъект["СтруктурноеПодразделениеОрганизация"+Поле], Объект.Организация, Объект["СтруктурноеПодразделение"+?(Поле="Отправитель","",Поле)], СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//СтандартныеОбработчикиФормыБСП.Начало


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	//Элементы.Товары.ТолькоПросмотр       = Ложь;
	//Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	//Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	

	//Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

//СтандартныеОбработчикиФормыБСП.Конец

// СтараяБСП

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	общ_ПереопределениеПроцедурБСПСервер.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		общ_ПереопределениеПроцедурБСПКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;	

КонецПроцедуры

// Конец СтараяБСП

#КонецОбласти
