////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ   

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписокСчетов()

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Номер,
//	|	Дата    КАК ДатаДокумента,
////	|   Ответственный,
//	|	Организация.Ссылка    КАК Организация,
//	|	ВалютаДокумента,
//	|	УчитыватьНДС,
//	|	СуммаВключаетНДС,
//	|	ВалютаДокумента.Представление КАК ПредставлениеВалютыДокумента,
//	|	СуммаДокумента	
//	|ИЗ
//	|	Документ.ПоступлениеЦенныхБумаг КАК ПоступлениеЦенныхБумаг
//	|
//	|ГДЕ
//	|	ПоступлениеЦенныхБумаг.Ссылка = &ТекущийДокумент";
//	Шапка = Запрос.Выполнить().Выбрать();
//	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеЗарплатыСтраховыеАгенты_НачислениеЗарплатыСтраховыеАгенты";

//	Макет = ПолучитьМакет("ПоступлениеЦБ");
//	
//	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
//	
//	ОбластьМакета.Параметры.НомерДокумента = Шапка.Номер;
//	ОбластьМакета.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");

//	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
//	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
//	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
//	
//	//Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента);
//	//Руководитель = Руководители.Руководитель;
//	//
//	//ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
//	//ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера = ГлавныйБухгалтер;
//	//
//	//ДанныеОФизЛицеОтветственный = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный.ФизЛицо, Шапка.ДатаДокумента);
//	//ОбластьМакета.Параметры.ДолжностьИсполнителя     = ?(НЕ ЗначениеЗаполнено(ДанныеОФизЛицеОтветственный.Должность), "Бухгалтер (исполнитель)", ДанныеОФизЛицеОтветственный.Должность);
//	//ОбластьМакета.Параметры.ПредставлениеИсполнителя = ?(НЕ ЗначениеЗаполнено(ДанныеОФизЛицеОтветственный.Представление), Шапка.Ответственный, ДанныеОФизЛицеОтветственный.Представление);

//	//ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
//	//ОбластьМакета.Параметры.Год					= Формат(Шапка.ДатаДокумента,"ДФ=yyyy" )+ " г.";
//	//ОбластьМакета.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ДляРасчета, мВалютаРегламентированногоУчета);

//	ТабДокумент.Вывести(ОбластьМакета);
//	
//	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
//	
//	// получим данные о строках
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ПоступлениеЦенныхБумагАкции.КатегорияФинансовыхАктивов,
//				   |	NULL КАК МетодАмортизации,
//				   |	NULL КАК ЭффективнаяСтавкаПроцента,
//				   |	ПоступлениеЦенныхБумагАкции.Цена,
//				   |	NULL КАК Краткосрочная,
//				   |	ПоступлениеЦенныхБумагАкции.ВидДеятельности КАК ВидДеятельности,
//				   |	ПоступлениеЦенныхБумагАкции.Сумма,
//				   |	ПоступлениеЦенныхБумагАкции.ЦеннаяБумага,
//				   |	ПоступлениеЦенныхБумагАкции.ЦеннаяБумага.НИН КАК НИН,
//				   |	ПоступлениеЦенныхБумагАкции.ЦеннаяБумага.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
//				   |	ПоступлениеЦенныхБумагАкции.ЦеннаяБумага.Валюта КАК Валюта,
//				   |	ПоступлениеЦенныхБумагАкции.Количество КАК Количество,
//				   |	NULL КАК ВознаграждениеПредыдущихДержателей
//				   |ИЗ
//				   |	Документ.ПоступлениеЦенныхБумаг.Акции КАК ПоступлениеЦенныхБумагАкции
//				   |ГДЕ
//				   |	ПоступлениеЦенныхБумагАкции.Ссылка = &ТекущийДокумент
//				   |
//				   |ОБЪЕДИНИТЬ ВСЕ
//				   |
//				   |ВЫБРАТЬ
//				   |	ПоступлениеЦенныхБумагОблигации.КатегорияФинансовыхАктивов,
//				   |	ПоступлениеЦенныхБумагОблигации.МетодАмортизации,
//				   |	ПоступлениеЦенныхБумагОблигации.ЭффективнаяСтавкаПроцента,
//				   |	ПоступлениеЦенныхБумагОблигации.Цена,
//				   |	ПоступлениеЦенныхБумагОблигации.Краткосрочная,
//				   |	ПоступлениеЦенныхБумагОблигации.ВидДеятельности,
//				   |	ПоступлениеЦенныхБумагОблигации.Сумма,
//				   |	ПоступлениеЦенныхБумагОблигации.ЦеннаяБумага,
//				   |	ПоступлениеЦенныхБумагОблигации.ЦеннаяБумага.НИН,
//				   |	ПоступлениеЦенныхБумагОблигации.ЦеннаяБумага.НоминальнаяСтоимость,
//				   |	ПоступлениеЦенныхБумагОблигации.ЦеннаяБумага.Валюта,
//				   |	ПоступлениеЦенныхБумагОблигации.Количество,
//				   |	ПоступлениеЦенныхБумагОблигации.ВознаграждениеПредыдущихДержателей
//				   |ИЗ
//				   |	Документ.ПоступлениеЦенныхБумаг.Облигации КАК ПоступлениеЦенныхБумагОблигации
//				   |ГДЕ
//				   |	ПоступлениеЦенныхБумагОблигации.Ссылка = &ТекущийДокумент";
//	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ОбластьМакета.Параметры.Заполнить(Выборка);
//		ОбластьМакета.Параметры.Ставка = Формат(ЦенныеБумаги.ПолучитьКупоннуюСтавку(Выборка.ЦеннаяБумага, ЭтотОбъект.Дата), "ЧДЦ=4");
//		ТабДокумент.Вывести(ОбластьМакета);
//	КонецЦикла;	

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеЦБ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "СписокСчетов" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьСписокСчетов();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Список счетов"));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("СписокСчетов","Список счетов");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ВидБазовогоПОказателя = Перечисления.ВидБазовогоПоказателя.ПустаяСсылка() Тогда
		Сообщить("Укажите вид базового показателя!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Сообщить("Укажите организацию!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаСчетаПорогаСущественности Из СчетаПорогаСущественности Цикл
		// регистр СчетаПорогаСущественности 
		Движение = Движения.СчетаПорогаСущественности.Добавить();
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.ВидБазовогоПоказателя = ВидБазовогоПоказателя;
		Движение.Счет = ТекСтрокаСчетаПорогаСущественности.Счет;
	КонецЦикла;
	Для Каждого ТекСтрокаИсключенияСчетовПорогаСущественности Из ИсключенияСчетовПорогаСущественности Цикл
		// регистр ИсключениеСчетовПорогаСущественности 
		Движение = Движения.ИсключенияСчетовПорогаСущественности.Добавить();
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.ВидБазовогоПоказателя = ВидБазовогоПоказателя;
		Движение.Счет = ТекСтрокаИсключенияСчетовПорогаСущественности.Счет;
	КонецЦикла;
КонецПроцедуры



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();