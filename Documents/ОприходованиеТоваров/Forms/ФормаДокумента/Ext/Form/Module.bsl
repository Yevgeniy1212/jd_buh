///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
  
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		СтекСообщенийПользователю.ЗагрузитьЗначения(Новый Массив(ПолучитьСообщенияПользователю(Истина)));
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	НайтиЭДВСИЗаполнитьСсылкуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();

	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_УведомлениеОВводеВОборот" Тогда
		//ИСМПТ
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОВводеВОборотИСЦЭДМ" Тогда
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого Сообщение Из СтекСообщенийПользователю Цикл
		Сообщение.Значение.Сообщить();
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ОприходованиеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""оприходование тмз"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

  &НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
		
КонецПроцедуры
 
&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Товары.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить текущий документ данными документа-основания?'"), Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "Основание");
	Оповещение = Новый ОписаниеОповещения("ОснованиеЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.Основание,
		НСтр("ru='Основание оприходования'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		//"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		//|Количество, Цена, Сумма,
		//|СчетУчетаБУ, СчетУчетаНУ");
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СчетУчетаБУ, СчетУчетаНУ, НомерГТД,
		|КорСчетОприходованияБУ, КорСубконтоОприходованияБУ1, КорСубконтоОприходованияБУ2, КорСубконтоОприходованияБУ3,
		|КорСчетОприходованияНУ, КорСубконтоОприходованияНУ1, КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3, 
		|ВидКорСубконтоОприходованияБУ1, ВидКорСубконтоОприходованияБУ2, ВидКорСубконтоОприходованияБУ3,
		|ВидКорСубконтоОприходованияНУ1, ВидКорСубконтоОприходованияНУ2, ВидКорСубконтоОприходованияНУ3,
		|КорСубконтоОприходованияБУ1Доступность, КорСубконтоОприходованияБУ2Доступность, КорСубконтоОприходованияБУ3Доступность,
		|КорСубконтоОприходованияНУ1Доступность, КорСубконтоОприходованияНУ2Доступность, КорСубконтоОприходованияНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура(
		"Дата, Организация, ТипЦен");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСчетОприходованияБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.КорСчетОприходованияБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	
	СтрокаТаблицы.КорСчетОприходованияНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.КорСчетОприходованияБУ));
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
								 
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.КорСчетОприходованияНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
		
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, КорСчетОприходованияБУ, КорСчетОприходованияНУ, 
		|КорСубконтоОприходованияБУ1, КорСубконтоОприходованияБУ2, КорСубконтоОприходованияБУ3,
		|КорСубконтоОприходованияНУ1, КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыКорСчетОприходованияБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.КорСчетОприходованияБУ, ТекущиеДанные.КорСчетОприходованияНУ, 1, ТекущиеДанные.КорСубконтоОприходованияБУ1, "КорСубконтоОприходованияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.КорСчетОприходованияБУ, ТекущиеДанные.КорСчетОприходованияНУ, 2, ТекущиеДанные.КорСубконтоОприходованияБУ2, "КорСубконтоОприходованияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.КорСчетОприходованияБУ, ТекущиеДанные.КорСчетОприходованияНУ, 3, ТекущиеДанные.КорСубконтоОприходованияБУ3, "КорСубконтоОприходованияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСчетОприходованияНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.КорСчетОприходованияНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, КорСчетОприходованияБУ, КорСчетОприходованияНУ, 
		|КорСубконтоОприходованияНУ1, КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыКорСчетОприходованияНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 1, "КорСчетОприходованияБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 2, "КорСчетОприходованияБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 3, "КорСчетОприходованияБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 1, "КорСчетОприходованияНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 2, "КорСчетОприходованияНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКорСубконтоОприходованияНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 3, "КорСчетОприходованияНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры");
		ЗаполнитьЗначенияСвойств(Объект, Результат.ЗначенияПриЗакрытии);
		ЭтаФорма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
		ЭтаФорма.Модифицированность = Истина;
		
		Если Результат <> Неопределено Тогда
			Результат.ЗначенияПриЗакрытии.ВалютаДокумента = ВалютаРегламентированногоУчета;
			Результат.ЗначенияПриЗакрытии.КурсДокумента   = 1;
			Результат.ЗначенияПриЗакрытии.КратностьДокумента = 1;
			УправлениеВзаиморасчетамиКлиент.ИзменитьЦеныВалюту(Объект, СпособЗаполненияЦен, Результат);
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ИмяПоля = НСтр("ru = 'Документ-основание'");
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения(,, ИмяПоля);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ДокументОснование");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена.
		                    |Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьПоДокументуОснованиюНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ЗаполнитьПоДокументуОснованиюНаСервере();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", НСтр("ru = 'Товары'"));
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УправлениеФормой(ЭтаФорма);

	УстановитьДоступностьСубконто();
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "Товары";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлемента = "КорСубконтоОприходования";
	ИмяСчета 	= "КорСчетОприходования";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.КорСчетОприходованияБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.КорСчетОприходованияНУ, СтрокаТабличнойЧасти, ПоляОбъекта);		
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", "Товары" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", "Товары" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПерезаполнитьЦены = Истина)

	ТаблицаЦенНоменклатуры	= УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина),
		Объект.ТипЦен,
		Объект.Дата,
		Объект.Организация);
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, 0);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета, НайденнаяСтрока.Курс,
				1, НайденнаяСтрока.Кратность, 1);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		Строка.Цена  = Цена;
		
	КонецЕсли;
	
	Строка.Сумма = Окр(Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество), 2);

КонецПроцедуры   

//&НаСервере
//Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере()

//	Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
//	УстановитьДоступностьСубконто();
//	
//КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена             = СведенияОНоменклатуре.Цена;
	
	//Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
	//	ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ОприходованиеТоваров,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Документы.ОприходованиеТоваров.ЗаполнитьПоДокументуОснования(Объект, Объект.ДокументОснование);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоДокументуОснованиюНаСервере()
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		Документы.ОприходованиеТоваров.ЗаполнитьТоварыПоИнвентаризацииТоваров(ЭтотОбъект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеструктуризацияОС") Тогда
		Документы.ОприходованиеТоваров.ЗаполнитьТоварыПоРеструктуризацииОС(ЭтотОбъект, Объект.ДокументОснование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма) ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВидУчетаНУ.Видимость = Объект.УчитыватьКПН;
	
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Элементы.ТоварыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
    
    //Видимость счетов
    Элементы.ТоварыАналитикаКорСчетБУ.Видимость     = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ТоварыАналитикаКоррСчетНУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику"           , НСтр("ru = 'По справочнику'")); 
	СписокЗапросов.Добавить("ОстаткиНоменклатуры"     , НСтр("ru = 'По остаткам номенклатуры'"));
	
	ПараметрыФормы.Вставить("СписокВидовПодбора"      , СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"            , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
		
	СтрокиДляЗаполненияСчетов = Новый Массив;

	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если НЕ ЭтоВставкаИзБуфера Тогда
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
	
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		Иначе   			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;        

			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ЭтоВставкаИзБуфера Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
			
			//Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			//	ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре,НЕ ЭтоВставкаИзБуфера);
			//	
			//УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТабличнойЧасти, ИмяТаблицы);
				
		КонецЕсли;
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ОприходованиеТоваров);
	
	УстановитьДоступностьСубконто(ИмяТаблицы);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;     

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);			
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеЗавершениеВвода(Строка, Параметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		Объект.Основание = Строка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыКорСчетОприходованияБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3", 
	                                                        СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ2, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ3));
															
	СчетаУчета = Новый Структура("КорСчетОприходованияБУ, КорСубконтоОприходованияБУ1,
								 |КорСубконтоОприходованияБУ2, КорСубконтоОприходованияБУ3", СтрокаТабличнойЧасти.КорСчетОприходованияБУ,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ2,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "КорСубконтоОприходованияБУ", "КорСчетОприходованияБУ", "КорСубконтоОприходованияБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3", 
	                                                        СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ2, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ3));
															
	СчетаУчета = Новый Структура("КорСчетОприходованияНУ, КорСубконтоОприходованияНУ1,
								 |КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3", СтрокаТабличнойЧасти.КорСчетОприходованияНУ,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ2,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "КорСубконтоОприходованияНУ", "КорСчетОприходованияНУ", "КорСубконтоОприходованияНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыКорСчетОприходованияНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3", 
	                                                        СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ2, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ3));
															
	СчетаУчета = Новый Структура("КорСчетОприходованияНУ, КорСубконтоОприходованияНУ1,
								 |КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3", СтрокаТабличнойЧасти.КорСчетОприходованияНУ,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ2,
								 СтрокаТабличнойЧасти.КорСубконтоОприходованияНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "КорСубконтоОприходованияНУ", "КорСчетОприходованияНУ", "КорСубконтоОприходованияНУ");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	// после удаления вопроса об очистке подразделений при изменении СП, данное условие можно будет удалить
	Если СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
			                                        Объект.Организация, 
			                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
			                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3", 
			                                                        "КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3", 
				                                                     СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ2, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ3));
											
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
			                                        Объект.Организация, 
			                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
			                                                        |СубконтоНУ1, СубконтоНУ2, СубконтоНУ3", 
			                                                        "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3", 
				                                                     СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ1, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ2, СтрокаТабличнойЧасти.КорСубконтоОприходованияБУ3));
			    																	
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	Конецесли;
        
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ОприходованияБУ");
	СписокАналитикиСчетов.Добавить("ОприходованияНУ");

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов, ПриставкаИмениСчета", Объект.Товары, СписокАналитикиСчетов, "Кор"); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей);
		
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Товары.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Товары.Количество() > 0; 
	
	//ПерезаполнитьСчетаУчета = Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		//СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	//ИначеЕсли ПерезаполнитьСчетаУчета Тогда
	//	Если ПоказыватьВДокументахСчетаУчета Тогда
	//		Если ЕстьЗаполненныетабЧасти Тогда
	//			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета");
	//		КонецЕсли;
	//	Иначе
	//		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да);
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
//	
//	Если ДопПараметры = Неопределено Тогда 
//		ДопПараметры = Новый Структура;
//	КонецЕсли;
//	
//	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
//	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
//	Режим = РежимДиалогаВопрос.ДаНет;
//	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
//	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, Параметры = Неопределено) Экспорт
//	
//	Если Результат <> КодВозвратаДиалога.Да Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	//Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
	//	И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда
	//	
	//	Если ПоказыватьВДокументахСчетаУчета Тогда
	//		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета");
	//	Иначе
	//		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	Если Не Форма.ПоказыватьВДокументахСчетаУчета Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "КорСубконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "КорСубконто" + Суффикс + "%Индекс%", "ТоварыКорСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	Объект.Товары.Очистить();
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетовУчетаТабличнойЧасти()
	
	Для Каждого СтрокаТабличнойЧасти из Объект.Товары  Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.КорСчетОприходованияБУ, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.КорСчетОприходованияНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("Сумма");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНУ");
	
	СтруктураРеквизитов.Вставить("КорСчетОприходованияБУ");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияБУ1");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияБУ2");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияБУ3");
	
	СтруктураРеквизитов.Вставить("КорСчетОприходованияНУ");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияНУ1");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияНУ2");
	СтруктураРеквизитов.Вставить("КорСубконтоОприходованияНУ3");
	
	СтруктураСвязанныхРеквизитов.Вставить("КорСчетОприходованияБУ", "КорСубконтоОприходованияБУ1,КорСубконтоОприходованияБУ2,КорСубконтоОприходованияБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("КорСчетОприходованияНУ", "КорСубконтоОприходованияНУ1,КорСубконтоОприходованияНУ2,КорСубконтоОприходованияНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);

	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	//ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	//
	//Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	//ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	//ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	//
	//ДанныеОбъекта = Новый Структура("Дата, Организация");
	//ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	//
	//СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	//	ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	//
	//Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
	//		
	//	СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
	//	
	//	Если СчетаУчета = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
	//		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
	//		
	//	УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТабличнойЧасти, "Товары");
	//		
	//КонецЦикла;
	//	
	//Объект.Товары.Загрузить(ТаблицаОбработки);

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ОприходованиеТоваров, Истина);

КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("Цена");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчетаБУ");		
		СписокСвойств.Добавить("СчетУчетаНУ");		
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("КорСчетОприходованияБУ");
			СписокСвойств.Добавить("КорСчетОприходованияНУ");
			СписокСвойств.Добавить("КорСубконтоОприходованияБУ1"); 
			СписокСвойств.Добавить("КорСубконтоОприходованияБУ2");
			СписокСвойств.Добавить("КорСубконтоОприходованияБУ3");			
			СписокСвойств.Добавить("КорСубконтоОприходованияНУ1"); 
			СписокСвойств.Добавить("КорСубконтоОприходованияНУ2");
			СписокСвойств.Добавить("КорСубконтоОприходованияНУ3");	
		КонецЕсли;
		
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыКорСчетОприходованияБУ");
	ЭлементыСчетов.Добавить("ТоварыАналитикаКорСчетБУ");
	ЭлементыСчетов.Добавить("ТоварыКорСчетОприходованияНУ");
	ЭлементыСчетов.Добавить("ТоварыАналитикаКоррСчетНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ОприходованиеТоваров",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// Товары.СчетУчетаБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ3");
	КонецЕсли;

	// Товары.КорСчетОприходованияБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСчетОприходованияБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияБУ3");
	КонецЕсли;

	// Товары.СчетУчетаНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСчетОприходованияНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// Товары.КорСчетОприходованияНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСчетОприходованияНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// Товары.КорСубконтоОприходованияБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ1");
	КонецЕсли;

	// Товары.КорСубконтоОприходованияБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ2");
	КонецЕсли;

	// Товары.КорСубконтоОприходованияБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.КорСубконтоОприходованияНУ3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
		КонецЕсли;

		// Товары.СчетУчетаБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
		КонецЕсли;

		// Товары.КорСчетОприходованияБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСчетОприходованияБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
		КонецЕсли;

		// Товары.СчетУчетаНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
		КонецЕсли;

		// Товары.КорСчетОприходованияНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСчетОприходованияНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
		КонецЕсли;

		// Товары.КорСубконтоОприходованияБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.КорСубконтоОприходованияБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.КорСубконтоОприходованияБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.КорСубконтоОприходованияБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСубконтоОприходованияНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "КорСчетОприходованияНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	СтруктураДопПараметров = Новый Структура;
	
	СтруктураДопПараметров.Вставить("Комментарий",				Объект.Комментарий);
	СтруктураДопПараметров.Вставить("Основание",				Объект.Основание);
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(ЭтаФорма, "ОприходованиеТоваров",СтруктураДопПараметров)
	
КонецПроцедуры


//Евгений+
&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Объект.Склад;
	СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Объект.Дата, Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Объект.МОЛ = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Объект.МОЛ = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры
//Евгений-

#КонецОбласти

//ИнтеграцияИСМПТК
#Область ИСМПТ

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК
