#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");

	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСчетОприходованияБУ", "ПрочиеДоходы");   // "Выручка"
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСчетОприходованияНУ", "ПрочиеДоходыНУ");   // "ВыручкаНУ"
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "КорСубконтоОприходованияБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "КорСубконтоОприходованияБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "КорСубконтоОприходованияНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "КорСубконтоОприходованияБУ3");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "", СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыГруппаЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары,
		|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснования(Объект, Основание)Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	Объект.ДокументОснование = Основание;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеструктуризацияОС") Тогда
		ЗаполнитьТоварыПоРеструктуризацииОС(Объект, Основание);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект, ДокументОснование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	
	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Номенклатура,
		|	Док.СчетУчетаБУ,
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент КАК КоэффициентЕдиницыИнвентаризации,
		|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
		|	МАКСИМУМ(Док.Сумма - Док.СуммаУчет) КАК СуммаОтклонениеИнвентаризации,
		|	СУММА(ВЫБОР
		|			КОГДА ДокОприходование.Количество ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ ДокОприходование.Количество
		|		КОНЕЦ) КАК КоличествоОприходованное,
		|	СУММА(ВЫБОР
		|			КОГДА ДокОприходование.Сумма ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ ДокОприходование.Сумма
		|		КОНЕЦ) КАК СуммаОприходованная,
		|	Док.Цена
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
		|		ПО Док.Номенклатура = ДокОприходование.Номенклатура
		|			И Док.Ссылка.Склад = ДокОприходование.Ссылка.Склад
		|			И (ДокОприходование.Ссылка.ДокументОснование = &ДокументОснованиеСсылка)
		|			И (ДокОприходование.Ссылка.Проведен)
		|			И (ДокОприходование.Ссылка <> &ДокументСсылка)
		|ГДЕ
		|	Док.Ссылка = &ДокументОснованиеСсылка
		|	И Док.Количество - Док.КоличествоУчет > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Номенклатура,
		|	Док.СчетУчетаБУ,
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент,
		|	Док.Цена";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		КоличествоОприходовать = СтрокаТовара.КоличествоОтклонениеИнвентаризации - СтрокаТовара.КоличествоОприходованное;
		
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ  = СтрокаТовара.СчетУчетаБУ;
		СтрокаТабличнойЧасти.Количество   = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена         = СтрокаТовара.Цена;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
		//	Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		//		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
		//	СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));
		//КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%1 № %2"" отсутствуют товары, учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
			ТекстСообщения, ДокументОснование.Метаданные().Представление(), ДокументОснование.Номер);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование", "Объект");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоРеструктуризацииОС(Объект, ДокументОснование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	//Признак Учитыать КПН нужно, снимать, если реструктуризация отражалась в НУ.
	Если ДокументОснование.УчитыватьКПН Тогда
		Объект.УчитыватьКПН = Ложь;
	Иначе
		ПлательщикаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);		
		Объект.УчитыватьКПН = ПлательщикаНаПрибыль;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеструктуризацияОС.ИсходноеОсновноеСредство,
	               |	РеструктуризацияОС.Дата КАК ДатаОснования
	               |ИЗ
	               |	Документ.РеструктуризацияОС КАК РеструктуризацияОС
	               |ГДЕ
	               |	РеструктуризацияОС.Ссылка = &Основание";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	ОС = Неопределено;
	ДатаОснования = Неопределено;
	Если ВыборкаОС.Следующий() Тогда
		ОС = ВыборкаОС.ИсходноеОсновноеСредство;
		ДатаОснования = ВыборкаОС.ДатаОснования;
	КонецЕсли;	
	
	Если ОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим счет учета ОС на дату документа основания, и заполним им поле "Корр. счет пориходования"
	Запрос.УстановитьПараметр("Период", 	 ДатаОснования);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОС", 		 ОС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаНУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&Период,
	|			ОсновноеСредство = &ОС
	|				И Организация = &Организация) КАК СчетаУчетаОССрезПоследних";
	
	ВыборкаСчетаОС = Запрос.Выполнить().Выбрать();
	
	СчетаУчетаОСБУ = Неопределено;
	СчетаУчетаОСНУ = Неопределено;
	Если ВыборкаСчетаОС.Следующий() Тогда
		СчетаУчетаОСБУ = ВыборкаСчетаОС.СчетУчетаБУ;
		СчетаУчетаОСНУ = ВыборкаСчетаОС.СчетУчетаНУ;
	КонецЕсли;	
	
	// найдем тек. местонахождение исходного ОС, если ведется аналит. учет ОС
	ВедетсяАналитУчетОсПоПодразделениям  = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(ДатаОснования);
	ВедетсяАналитУчетОсПоМОЛ			 = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(ДатаОснования);
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		ТабТекМестонахождениеОС = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьТекущееМестонахождениеДляСпискаОС(ДатаОснования, Объект.Организация, ОС);
		СтрокаМестонахождениеОС = ТабТекМестонахождениеОС.Найти(ОС, "ОсновноеСредство");
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеструктуризацияОСТовары.НомерСтроки,
	               |	РеструктуризацияОСТовары.Номенклатура,
	               |	РеструктуризацияОСТовары.Количество,
	               |	РеструктуризацияОСТовары.Сумма,
	               |	РеструктуризацияОСТовары.ЕдиницаИзмерения,
	               |	РеструктуризацияОСТовары.Цена,
	               |	РеструктуризацияОСТовары.СчетУчетаБУ,
	               |	РеструктуризацияОСТовары.СчетУчетаНУ,
	               |	РеструктуризацияОСТовары.Коэффициент
	               |ИЗ
	               |	Документ.РеструктуризацияОС.Товары КАК РеструктуризацияОСТовары
	               |ГДЕ
	               |	РеструктуризацияОСТовары.Ссылка = &Основание";
	
	ВыборкаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ВыборкаТовары, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаВыборки ИЗ ВыборкаТовары Цикл
			
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура = СтрокаВыборки.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = СтрокаВыборки.Количество;
		СтрокаТабличнойЧасти.Цена         = СтрокаВыборки.Цена;
		СтрокаТабличнойЧасти.Сумма		  = СтрокаВыборки.Сумма;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаВыборки.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент	  = СведенияОНоменклатуре.Коэффициент;
		
		СтрокаТабличнойЧасти.СчетУчетаБУ	  = СтрокаВыборки.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ	  = СтрокаВыборки.СчетУчетаНУ;
		
		СтрокаТабличнойЧасти.КорСчетОприходованияБУ = СчетаУчетаОСБУ;
		
		СтрокаТабличнойЧасти.КорСчетОприходованияНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетаУчетаОСБУ), , , ОбщегоНазначения.ТекущаяДатаПользователя());
		
		Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
			Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства
				Или СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
				СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = ОС;
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияНУ.ВидыСубконто Цикл
			Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства
				Или СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
				
				СтрокаТабличнойЧасти["КорСубконтоОприходованияНУ" + СтрокаВидСубконто.НомерСтроки] = ОС;
			ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыДвиженияСтоимостиФА Тогда
				СтрокаТабличнойЧасти["КорСубконтоОприходованияНУ" + СтрокаВидСубконто.НомерСтроки] = Перечисления.ВидыДвиженияСтоимостиФА.Выбытие;
			КонецЕсли;	
		КонецЦикла;
		
		// установим данные по местонахождению
		Если ВедетсяАналитУчетОсПоПодразделениям Тогда
			Если СтрокаМестонахождениеОС <> Неопределено Тогда
				Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = СтрокаМестонахождениеОС.ПодразделениеОрганизации;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВедетсяАналитУчетОсПоМОЛ Тогда
			Если СтрокаМестонахождениеОС <> Неопределено Тогда
				Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда
						СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = СтрокаМестонахождениеОС.МОЛОрганизации;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаОприходованиеТоваров(НомераТаблиц)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц);
					
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);

	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Склад,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Склад,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.КорСчетОприходованияБУ,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ1,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ2,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ3,
	|	ТаблицаТовары.КорСчетОприходованияНУ,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ1,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ2,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ3,
	|	ТаблицаТовары.НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОприходованиеТоваров(НомераТаблиц)

	НомераТаблиц.Вставить("ОприходованиеТоваровРеквизиты",		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОприходованиеТоваровТаблицаТовары",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка) КАК ОсновноеСредство,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ТаблицаТовары.КорСчетОприходованияБУ КАК КорСчетОприходованияБУ,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ1 КАК КорСубконтоОприходованияБУ1,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ2 КАК КорСубконтоОприходованияБУ2,
	|	ТаблицаТовары.КорСубконтоОприходованияБУ3 КАК КорСубконтоОприходованияБУ3,
	|	ТаблицаТовары.КорСчетОприходованияНУ КАК КорСчетОприходованияНУ,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ1 КАК КорСубконтоОприходованияНУ1,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ2 КАК КорСубконтоОприходованияНУ2,
	|	ТаблицаТовары.КорСубконтоОприходованияНУ3 КАК КорСубконтоОприходованияНУ3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт

	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Содержание = НСтр("ru='Оприходование ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаТаблицы.Содержание = Содержание;
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц)
	
	ТекстЗапроса = "";
	
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.НомерГТД,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
	|ГДЕ
	|	НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОприходованиеТоваров_Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на оприходование товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОприходованиеТоваров_Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Накладная на оприходование товаров
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОприходованиеТоваров_Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОприходованиеТоваров_Накладная",
			НСтр("ru = 'Накладная на оприходование товаров'"),
			ПечатьОприходованияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ОприходованиеТоваров.ПФ_MXL_Накладная"); 
						
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ОприходованиеТоваров_Накладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьОприходованияТоваров(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросКТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОприходованиеТоваров.Ссылка КАК Ссылка,
	|	ОприходованиеТоваров.Номер,
	|	ОприходованиеТоваров.Дата,
	|	ОприходованиеТоваров.Организация,
	|	ОприходованиеТоваров.СтруктурноеПодразделение,
	|	ОприходованиеТоваров.Склад,
	|	ОприходованиеТоваров.СуммаДокумента,
	|	ОприходованиеТоваров.УчитыватьКПН
	|ПОМЕСТИТЬ ВТ_ДокументыОприходованиеТоваров
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыОприходованиеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаПоДокументам.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыОприходованиеТоваров КАК ВТ_ДокументыОприходованиеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыОприходованиеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыОприходованиеТоваров КАК ВТ_ДокументыОприходованиеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыОприходованиеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыОприходованиеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыОприходованиеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыОприходованиеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыОприходованиеТоваров.Ссылка,
	|	ВТ_ДокументыОприходованиеТоваров.Номер КАК НомерДокумента,
	|	ВТ_ДокументыОприходованиеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыОприходованиеТоваров.Организация,
	|	ВТ_ДокументыОприходованиеТоваров.СтруктурноеПодразделение,
	|	ВТ_ДокументыОприходованиеТоваров.Склад.Представление КАК ПредставлениеСклада,
	|	ВТ_ДокументыОприходованиеТоваров.СуммаДокумента,
	|	ВТ_ДокументыОприходованиеТоваров.УчитыватьКПН,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК Ответственный,
	|	ОтветственныеЛица.ПредставлениеОтветственный,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента
	|ИЗ
	|	ВТ_ДокументыОприходованиеТоваров КАК ВТ_ДокументыОприходованиеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыОприходованиеТоваров.Ссылка = ОтветственныеЛица.Ссылка,
	|	Константы КАК Константы
	|ГДЕ
	|	ВТ_ДокументыОприходованиеТоваров.Ссылка В(&МассивОбъектов)";
	
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОприходованиеТоваров.Ссылка,
	|	ОприходованиеТоваров.Номенклатура,
	|	ОприходованиеТоваров.НомерСтроки КАК НомерСтроки,
	|	ОприходованиеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ОприходованиеТоваров.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ОприходованиеТоваров.Количество КАК Количество,
	|	ОприходованиеТоваров.Цена КАК Цена,
	|	ЕСТЬNULL(ОприходованиеТоваров.Сумма,0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОприходованиеТоваровТовары.Ссылка,
	|		ОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
	|		СУММА(ОприходованиеТоваровТовары.Количество) КАК Количество,
	|		МИНИМУМ(ОприходованиеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|		МИНИМУМ(ОприходованиеТоваровТовары.Цена) КАК Цена,
	|		ОприходованиеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ОприходованиеТоваровТовары.Ссылка КАК Ссылка,
	|		ОприходованиеТоваровТовары.Номенклатура.Код КАК НоменклатураКод,
	|		ОприходованиеТоваровТовары.Номенклатура.Представление КАК НоменклатураПредставление,
	|		ОприходованиеТоваровТовары.Коэффициент КАК Коэффициент,
	|		Сумма(ОприходованиеТоваровТовары.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОприходованиеТоваровТовары.Ссылка,
	|		ОприходованиеТоваровТовары.Номенклатура,
	|		ОприходованиеТоваровТовары.ЕдиницаИзмерения,
	|		ОприходованиеТоваровТовары.Ссылка,
	|		ОприходованиеТоваровТовары.Номенклатура.Код,
	|		ОприходованиеТоваровТовары.Номенклатура.Представление,
	|		ОприходованиеТоваровТовары.Коэффициент ) КАК ОприходованиеТоваров
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	
	ВыборкаПоРегистратору = ЗапросКТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ОприходованиеТоваров_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОприходованиеТоваров.ПФ_MXL_Накладная", КодЯзыка);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Ссылка, НСтр("ru='Оприходование товаров'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					ТекстСообщения  = НСтр("ru = 'В строке %1 не заполнено значение номенклатуры - строка при печати пропущена.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаСтрокТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаПоДокументам.Ссылка, , );
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ВыборкаПоДокументам.СуммаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			// Вывести Сумму прописью
			ОбластьМакета  = Макет.ПолучитьОбласть("СуммаПрописью");
			ИтоговаяСтрока = НСтр("ru = 'Всего наименований %1, на сумму %2'", КодЯзыка);
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ИтоговаяСтрока, ВыборкаСтрокТовары.Количество(), ОбщегоНазначенияБКВызовСервера.ФорматСумм(ВыборкаПоДокументам.СуммаДокумента, ВыборкаПоДокументам.ВалютаДокумента));
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ВыборкаПоДокументам.СуммаДокумента, ВыборкаПоДокументам.ВалютаДокумента,КодЯзыка);
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоДокументам);
		
		// заполняем МОЛ
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.ДатаДокумента);
		ОбластьМакета.Параметры.Получил = ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 

#КонецЕсли
