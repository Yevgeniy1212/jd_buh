#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ОприходованиеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ОприходованиеТоваров.ДобавитьКолонкуСодержание(ПараметрыПроведения.ОприходованиеТоваровТаблицаТовары);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	УчетТоваров.СформироватьДвиженияОприходованиеТоваров(ПараметрыПроведения.ОприходованиеТоваровТаблицаТовары,
		ПараметрыПроведения.ОприходованиеТоваровРеквизиты, Движения, Отказ);
		
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНУ, ПользовательУправляетСчетамиУчета", Товары.Количество() > 0, ПользовательУправляетСчетамиУчета);

	//ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	НеобходимостьОтраженияВНУ 					   = ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхРазницБалансовымМетодом   = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Организация, Дата);
	
	ПараметрыПострочнойПроверки.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Проверка заполнения табличной части "Товары"
	Если НЕ НеобходимостьОтраженияВНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ = Ложь;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(Товары, Отказ, ПараметрыПострочнойПроверки);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.ОприходованиеТоваров.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ПроверяемаяТабличнаячасть, Отказ, ПараметрыПострочнойПроверки) 

	СтруктураОбязательныхПолей = Новый Структура;
	
	Если ПараметрыПострочнойПроверки.ПользовательУправляетСчетамиУчета Тогда
		СтруктураОбязательныхПолей.Вставить("КорСчетОприходованияБУ", НСтр("ru = 'Корр. счет оприходования (БУ)'"));
		Если ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ", НСтр("ru = 'Счет учета (НУ)'"));
			Если ПараметрыПострочнойПроверки.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				СтруктураОбязательныхПолей.Вставить("КорСчетОприходованияНУ", НСтр("ru = 'Корр. счет оприходования (НУ)'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Цикл по строкам табличной части.
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Префикс = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'"); 
		
		// Проверка на наличие услуг в таблице.
		Если  ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "Услуга") Тогда
			ТекстСообщения = НСтр("ru = 'Указана номенклатура, являющаяся услугой.'");
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность",
				НСтр("ru = 'Номенклатура'"), СтрокаТабличнойЧасти.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			Продолжить; // по этой строке будет выдано сообщение о незаполненности СчетУчетаБУ
		КонецЕсли;
		
		СчетУчетаБУЗабалансовый =
			ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый;

		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Если СчетУчетаБУЗабалансовый Тогда
				Продолжить; // в оприходовании товаров если выбран забалансовый счет БУ, то не нужен кор.счет и счета НУ
			КонецЕсли; 
			
			Значение = СтрокаТабличнойЧасти[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, КлючЗначение.Значение,
					СтрокаТабличнойЧасти.НомерСтроки, НСтр("ru = 'ТМЗ'"));
				Поле = Префикс + КлючЗначение.Ключ;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;		

	КонецЦикла;

КонецПроцедуры

#КонецЕсли


