////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УстановитьДоступностьСубконто();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ОтражениеНалоговойОтчетностиВРеглУчете", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""отражение налоговой отчетности в регл. учете"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		ДатаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьРасшифровкуРегламентированногоОтчета();
	Иначе 
		Элементы.РасшифровкаРегламентированногоОтчета.Заголовок = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОтражениеВУчете

&НаКлиенте
Процедура ОтражениеВУчетеПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеВидНалогаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	СтрокаТабличнойЧасти = Новый Структура("Период, ФизЛицо, ВидНалога, КодБК, СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СчетНалогаБУ, ВидПлатежаВБюджет, СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, СчетНалогаНУ, Содержание,
		|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность, 
		|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТекущиеДанные);
	
	ОтражениеВУчетеВидНалогаПриИзмененииНаСервере(СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеКодБКПриИзменении(Элемент)
	
	ЗаполнитьСодержаниеВСтрокеТабличнойЧасти(Элементы.ОтражениеВУчете.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ОтражениеВУчете");	
	
	// НУ
	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ОтражениеВУчетеСчетЗатратБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете", Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ2, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете", Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ3, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете", Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  1, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  2, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  3, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетНалогаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	// НУ
	СтрокаТаблицы.СчетНалогаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетНалогаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация, Дата");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ОтражениеВУчетеСчетЗатратНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете");	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  1, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  2, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  3, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьПоДаннымРеглОтчета(Команда)
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Автоматически заполнить документ можно только после отмены его проведения'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтражениеВУчете.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьПоДаннымРеглОтчетаПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьПоДаннымРеглОтчетаПродолжение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтражениеВУчете(Команда)
	
	ИзменитьТабличнуюЧасть("ОтражениеВУчете", НСтр("ru = 'Отражение в учете'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ДанныеОтчета = Объект.ДокументОснование.ДанныеОтчета.Получить();
		мДополнительныеПараметрыОтражения = Неопределено;
		ДанныеОтчета.Свойство("ДополнительныеПараметрыОтражения", мДополнительныеПараметрыОтражения);
		
		мДополнительныеПараметрыОтражения = ?(мДополнительныеПараметрыОтражения = Неопределено, Новый Структура, мДополнительныеПараметрыОтражения);
		мДополнительныеПараметрыОтражения.Свойство("ОтражениеДанныхИП", ОтражениеДанныхИП);
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
    
    ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ЗаполнитьРасшифровкуРегламентированногоОтчета();
	
	УправлениеФормой(ЭтотОбъект);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       	 = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ОтражениеВУчетеГруппаСубконтоЗатратНУ.Видимость  = Форма.ВидимостьНалоговогоУчета И Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ОтражениеВУчетеГруппаСубконтоЗатратБУ.Видимость  = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ФормаПерезаполнитьПоДаннымРеглОтчета.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);

	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;		
	
	Форма.ИтогиВсего = Объект.ОтражениеВУчете.Итог("Сумма");
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , Истина);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	ПроверитьСоответствиеСтруктурнойЕдиницы();

	УстановитьФункциональныеОпцииФормы();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ОтражениеВУчете");	
	
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если Объект.ОтражениеВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетов = Новый СписокЗначений;
	
	// ТЧ Товары
	СписокАналитикиСчетов.Добавить("ЗатратБУ"); // СчетБУ
	СписокАналитикиСчетов.Добавить("ЗатратНУ"); // СчетНУ
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.ОтражениеВУчете, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОтражениеВУчетеВидНалогаПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНалога) Тогда
		СтрокаТабличнойЧасти.КодБК = СтрокаТабличнойЧасти.ВидНалога.КодБК;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидПлатежаВБюджет) Тогда
			СтрокаТабличнойЧасти.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТабличнойЧасти, , Истина);
	
	ЗаполнитьСодержаниеВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти, "ОтражениеВУчете");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСодержаниеВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)
	
	ШаблонСодержания = НСтр("ru = '%1 (КБК: %2)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаТабличнойЧасти.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСодержания,
		СтрокаТабличнойЧасти.ВидНалога,
		СтрокаТабличнойЧасти.КодБК);
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДаннымРеглОтчетаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОтражениеВУчете.Очистить();
	
	ПерезаполнитьПоДаннымРеглОтчетаНаСервере();
	
КонецПроцедуры

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "ОтражениеВУчете";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлемента = "СубконтоЗатрат";
	ИмяСчета 	= "СчетЗатрат";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти, ЗаменаСубконтоНУ = Ложь)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтражениеВУчетеСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, ВыводитьСообщения = Истина)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
		
	Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПроверитьУстановитьПроизвольноеСубконто(СтрокаТабличнойЧасти, Новый Структура("НазваниеСубконто1, НазваниеСубконто2, 
												|НазваниеСубконто3, Субконто1, Субконто2, Субконто3, ЗначениеСубконто", 
												"СубконтоЗатратБУ1",  "СубконтоЗатратБУ2",  "СубконтоЗатратБУ3", 
												СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, 
												СтрокаТабличнойЧасти.СубконтоЗатратБУ3, ПодразделениеДляРеглОпераций));			
	ИначеЕсли ВыводитьСообщения Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В параметрах учетной политики по бухгалтерскому учету не указано подразделение для регламентных операций'"),
			,
			,
			"Объект",
			);
	КонецЕсли;
	
	ОтражениеВУчетеСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтражениеВУчетеСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, ВыводитьСообщения = Истина)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
		
	Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПроверитьУстановитьПроизвольноеСубконто(СтрокаТабличнойЧасти, Новый Структура("НазваниеСубконто1, НазваниеСубконто2, 
												|НазваниеСубконто3, Субконто1, Субконто2, Субконто3, ЗначениеСубконто", 
												"СубконтоЗатратНУ1",  "СубконтоЗатратНУ2",  "СубконтоЗатратНУ3", 
												СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, 
												СтрокаТабличнойЧасти.СубконтоЗатратНУ3, ПодразделениеДляРеглОпераций));			
	ИначеЕсли ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В параметрах учетной политики по бухгалтерскому учету не указано подразделение для регламентных операций'"),
			,
			,
			"Объект",
			);
	КонецЕсли;
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервере
Процедура ЗаполнитьРасшифровкуРегламентированногоОтчета()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗначенияРеквизитовДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "НаименованиеОтчета,ДатаНачала,ДатаОкончания,Организация,НалоговыйКомитет");
		
		СтрокаНадписиРегОтчета = НСтр("ru = '""%1"" за период %2. Налогоплательщик: ""%3"". Налоговый комитет: ""%4"".'");
		СтрокаНадписиРегОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СтрокаНадписиРегОтчета,
			ЗначенияРеквизитовДокумента.НаименованиеОтчета,
			ПредставлениеПериода(ЗначенияРеквизитовДокумента.ДатаНачала, КонецДня(ЗначенияРеквизитовДокумента.ДатаОкончания), "ФП=Истина"),
			ЗначенияРеквизитовДокумента.Организация,
			ЗначенияРеквизитовДокумента.НалоговыйКомитет);
			
		Элементы.РасшифровкаРегламентированногоОтчета.Заголовок = СтрокаНадписиРегОтчета;
	Иначе
		Элементы.РасшифровкаРегламентированногоОтчета.Заголовок = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоДаннымРеглОтчетаНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""отражение налоговой отчетности в регл. учете"" (перезаполнение по данным регл.отчета)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ДополнительныеПараметрыОтражения = Неопределено;
	
	Если Объект.ДокументОснование.ИсточникОтчета = "РегламентированныйОтчет910Форма"
		ИЛИ Объект.ДокументОснование.ИсточникОтчета = "РегламентированныйОтчет701Форма"
		ИЛИ Объект.ДокументОснование.ИсточникОтчета = "РегламентированныйОтчет70101Форма" 
		ИЛИ Объект.ДокументОснование.ИсточникОтчета = "РегламентированныйОтчет700Форма" Тогда
		ДанныеОтчета = Объект.ДокументОснование.ДанныеОтчета.Получить();
		Если ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда // Используется старая версия отчета
			ДанныеОтчета.Свойство("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
		ИначеЕсли ДанныеОтчета.Свойство("СтруктураДополнительныхРеквизитовФормы") Тогда
			СтруктураРеквизитовФормы = Неопределено;
			СтруктураДополнительныхРеквизитовФормы = ДанныеОтчета.СтруктураДополнительныхРеквизитовФормы;
			СтруктураДополнительныхРеквизитовФормы.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
			Если СтруктураРеквизитовФормы <> Неопределено И ТипЗнч(СтруктураРеквизитовФормы) = Тип("Структура") Тогда
				СтруктураРеквизитовФормы.Свойство("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
			КонецЕсли;
		Иначе
			ДополнительныеПараметрыОтражения = Неопределено;
		КонецЕсли;
	Иначе
		ДополнительныеПараметрыОтражения = Неопределено;
	КонецЕсли;
	
	ДанныеФормы = Объект;
	ПроцедураВыполнена = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьДокументОтражениеНалоговойОтчетностиВРеглУчете(Объект.ДокументОснование, ДанныеФормы, ДополнительныеПараметрыОтражения);
	
	Если ТипЗнч(ПроцедураВыполнена) = Тип("Булево") И ПроцедураВыполнена Тогда
		КопироватьДанныеФормы(ДанныеФормы, Объект);
		УстановитьДоступностьСубконто();
	КонецЕсли;

	Если Объект.ОтражениеВУчете.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не обнаружены данные для записи в табличные части документа'"));
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	
	СтруктураРеквизитов.Вставить("Период");
	СтруктураРеквизитов.Вставить("ВидНалога");
	СтруктураРеквизитов.Вставить("КодБК");
	СтруктураРеквизитов.Вставить("ВидПлатежаВБюджет");
		
	СтруктураРеквизитов.Вставить("СчетЗатратБУ");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ3");
	
	СтруктураРеквизитов.Вставить("СчетНалогаБУ");
	
	СтруктураРеквизитов.Вставить("СчетЗатратНУ");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ3");
	
	СтруктураРеквизитов.Вставить("СчетНалогаНУ");
	
	СтруктураРеквизитов.Вставить("Содержание");
	СтруктураРеквизитов.Вставить("СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("НалоговыйКомитет");
	
	СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратБУ", "СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	
	УправлениеФормой(ЭтаФорма);         
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеСтруктурнойЕдиницы()
	
	Если Объект.ОтражениеВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Владелец = &Организация
	               |	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
				   
	СписокПодразделений = Новый СписокЗначений;
	СписокПодразделений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));			   

	Для Каждого СтрокаТЧ Из Объект.ОтражениеВУчете Цикл
		
		Если (СтрокаТЧ.СтруктурнаяЕдиница <> Объект.Организация
			  И СписокПодразделений.НайтиПоЗначению(СтрокаТЧ.СтруктурнаяЕдиница) = Неопределено) Тогда
			СтрокаТЧ.СтруктурнаяЕдиница = Неопределено;
		КонецЕсли;
		
	КонецЦикла;        
	
КонецПроцедуры
