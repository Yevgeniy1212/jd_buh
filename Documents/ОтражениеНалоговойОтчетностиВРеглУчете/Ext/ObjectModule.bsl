
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
		ДокументОснование = Неопределено;
		ДанныеЗаполнения.Свойство("ДокументОснование", ДокументОснование);
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегламентированныйОтчет") И ЗначениеЗаполнено(ДокументОснование) Тогда
			ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , ОбъектКопирования.Ссылка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();

	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата)
		ИЛИ НЕ УчитыватьКПН Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОтражениеВУчете.СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОтражениеВУчете.СчетНалогаНУ");

	КонецЕсли;

	ОтражениеДанныхИП = Неопределено;
		
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДанныеОтчета = ДокументОснование.ДанныеОтчета.Получить();
		мДополнительныеПараметрыОтражения = Неопределено;
		ДанныеОтчета.Свойство("ДополнительныеПараметрыОтражения", мДополнительныеПараметрыОтражения);
		
		мДополнительныеПараметрыОтражения = ?(мДополнительныеПараметрыОтражения = Неопределено, Новый Структура, мДополнительныеПараметрыОтражения);
		мДополнительныеПараметрыОтражения.Свойство("ОтражениеДанныхИП", ОтражениеДанныхИП);
		
	КонецЕсли;
	
	Если ОтражениеДанныхИП <> Истина Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОтражениеВУчете.ФизЛицо");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ОтражениеВУчете.Итог("Сумма");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// сохраняем ссылку на этот документ в документе "Регламентированный отчет"
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		СохраненныйДок = ДокументОснование.ПолучитьОбъект();
		ДокументОтражения = СохраненныйДок.ДокументОтраженияВУчете;
		Если ЗначениеЗаполнено(ДокументОтражения) И ДокументОтражения <> Ссылка Тогда
			// отменим запись документа, т.к. для регл.отчета уже создан документ отражения
			ШаблонСообщения = НСтр("ru='Для документа-основания ""%1"" уже введен документ отражения в учете ""%2"".
									   |Запись еще одного документа ""Отражение налоговой отчетности в регл.учете"" не допускается'");
										
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДокументОснование, ДокументОтражения),
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ);
		Иначе // запишем
			СохраненныйДок.ДокументОтраженияВУчете = Ссылка;		
			Попытка 
				СохраненныйДок.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не удалось сохранить регламентированный отчет!'"),
					ЭтотОбъект,
					"ДокументОснование",
					,
					Отказ);
			КонецПопытки;			
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	Документы.ОтражениеНалоговойОтчетностиВРеглУчете.СформироватьДвиженияОтражениеНалоговойОтчетностиВРеглУчете(ПараметрыПроведения.ТаблицаОтражениеВУчете,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаИПНСведенияОДоходах,   		"ИПНСведенияОДоходах",  				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаИПНРасчетыСБюджетом,   		"ИПНРасчетыСБюджетом",  				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаОПВСведенияОДоходах,   		"ОПВСведенияОДоходах",  				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаОПВРасчетыСФондами,  		    "ОПВРасчетыСФондами",  				    Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаОПВПодлежитПеречислениюВФонды, "ОПВПодлежитПеречислениюВФонды",  		Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаСНСведенияОДоходах,        	"СНСведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаСНИсчисленный,   	     	    "СНИсчисленный",   				        Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаСОСведенияОДоходах,   		    "СОСведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаСОРасчетыСФондами, 		    "СОРасчетыСФондами", 				    Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаВОСМССведенияОДоходах,   		"ВОСМССведенияОДоходах",   				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаВОСМСРасчетыСФондами, 		    "ВОСМСРасчетыСФондами", 				Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаВОСМСПодлежитПеречислениюВФонды, "ВОСМСПодлежитПеречислениюВФонды",  		Движения, Отказ);
		
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ЗаполнитьДокументПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

#КонецЕсли
