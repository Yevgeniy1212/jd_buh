#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетаУчета(ДанныеОбъекта, ТабличнаяЧасть) Экспорт
	
	СоответствиеВидовНалоговСчетам = СоответствиеВидовНалоговСчетам();
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СоответствиеВидовНалоговСчетам);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части по умолчанию
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СоответствиеВидовНалоговСчетам = Неопределено, ВыводитьСообщения = Ложь) Экспорт
	
	СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы; //7210
	
	СвойстваСчетЗатратБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетЗатратБУ);
	
	// Назначение типа
	Для Индекс = 1 По СвойстваСчетЗатратБУ.КоличествоСубконто Цикл
		Если СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Индекс] = Неопределено Тогда
			СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Индекс] = Новый(СвойстваСчетЗатратБУ["ВидСубконто" + Индекс + "ТипЗначения"].Типы()[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если СоответствиеВидовНалоговСчетам = Неопределено Тогда
		СоответствиеВидовНалоговСчетам = СоответствиеВидовНалоговСчетам();
	КонецЕсли;
	
	ПолучСчетНалога = СоответствиеВидовНалоговСчетам.Получить(СтрокаТабличнойЧасти.ВидНалога);
	Если ПолучСчетНалога = Неопределено Тогда
		ПолучСчетНалога = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеПоНалогу = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьДанныеПоВидуНалога(Новый Структура("ТекущийВидНалога", ПолучСчетНалога), "ТекущийВидНалога", СтрокаТабличнойЧасти.ВидНалога);
	
	СтрокаТабличнойЧасти.СубконтоЗатратБУ1 = ДанныеПоНалогу.СтатьяЗатрат; // статья затрат
	
	// получим подразделение для регламентных операций
	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
		СтрокаТабличнойЧасти.СубконтоЗатратБУ2 = ПодразделениеДляРеглОпераций;
	ИначеЕсли ВыводитьСообщения Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В параметрах учетной политики по бухгалтерскому учету не указано подразделение для регламентных операций'"),
		);
	КонецЕсли;
	
	СчетНалога = ДанныеПоНалогу.СчетНалога;
	СтрокаТабличнойЧасти.СчетНалогаБУ = СчетНалога;
	
	// НУ
	СтрокаТабличнойЧасти.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетЗатратБУ), , , КонецМесяца(СтрокаТабличнойЧасти.Период));
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти.СчетЗатратНУ, 1, СтрокаТабличнойЧасти.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти.СчетЗатратНУ, 2, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти.СчетЗатратНУ, 3, СтрокаТабличнойЧасти.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
	
	СтрокаТабличнойЧасти.СчетНалогаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетНалогаБУ), , , КонецМесяца(СтрокаТабличнойЧасти.Период));
		
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоответствиеВидовНалоговСчетам()
	
	// ключ структуры должен полностью соответствовать значениям в колонке "Вид налога"
	// ключ - может принимать значение одного из предопред.элементов справочника "Налоги, сборы и отчисления"
	// значение - соответствующий счет налога
	// макета "Отражение в учете"
	СоответствиеВидовНалоговСчетам = Новый Соответствие;
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаИмущество,									ПланыСчетов.Типовой.НалогНаИмущество);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог,					ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане,	ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость,						ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты,ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.Акциз,											ПланыСчетов.Типовой.Акцизы);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаПрибыль,									ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаТранспорт,									ПланыСчетов.Типовой.НалогНаТранспортныеСредства);	
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления,					ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы,						ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалог,									ПланыСчетов.Типовой.СоциальныйНалог);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалогИнвалиды,							ПланыСчетов.Типовой.СоциальныйНалог);
	СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалогИностранныеСпециалисты,			ПланыСчетов.Типовой.СоциальныйНалог);
	
	Возврат СоответствиеВидовНалоговСчетам;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"));
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц) + ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ПараметрыПроведения.Вставить("Реквизиты", Результат[НомераТаблиц["Реквизиты"]].Выгрузить());
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ПараметрыПроведения.Реквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	мОтражениеДанныхИП = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда
		
		ДанныеОтчета = Реквизиты.ДокументОснование.ДанныеОтчета.Получить();
		мДополнительныеПараметрыОтражения = Неопределено;

		Если ДанныеОтчета.Свойство("СтруктураДополнительныхРеквизитовФормы") Тогда
			СтруктураРеквизитовФормы = Неопределено;
			СтруктураДополнительныхРеквизитовФормы = ДанныеОтчета.СтруктураДополнительныхРеквизитовФормы;
			СтруктураДополнительныхРеквизитовФормы.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
			Если СтруктураРеквизитовФормы <> Неопределено И ТипЗнч(СтруктураРеквизитовФормы) = Тип("Структура") Тогда
				СтруктураРеквизитовФормы.Свойство("ДополнительныеПараметрыОтражения", мДополнительныеПараметрыОтражения);
			КонецЕсли;
		КонецЕсли;

		мДополнительныеПараметрыОтражения = ?(мДополнительныеПараметрыОтражения = Неопределено, Новый Структура, мДополнительныеПараметрыОтражения);
		мДополнительныеПараметрыОтражения.Свойство("ОтражениеДанныхИП", мОтражениеДанныхИП);
		
	КонецЕсли;
	
	Если мОтражениеДанныхИП <> Неопределено Тогда
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(мОтражениеДанныхИП                        , "ОтражениеДанныхИП");
		Реквизиты.Вставить("ОтражениеДанныхИП", мОтражениеДанныхИП);
	КонецЕсли;
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ                     , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаОтражениеВУчете(НомераТаблиц)
					+ ТекстЗапросаТаблицаОтражениеВУчетеИндивидуальныйПодоходныйНалог(НомераТаблиц, Реквизиты, ПараметрыПроведения)
					+ ТекстЗапросаТаблицаОтражениеВУчетеОбязательныеПенсионныеВзносы(НомераТаблиц, Реквизиты, ПараметрыПроведения)
					+ ТекстЗапросаТаблицаОтражениеВУчетеСоциальныйНалог(НомераТаблиц, Реквизиты, ПараметрыПроведения)
					+ ТекстЗапросаТаблицаОтражениеВУчетеОбязательныеСоциальныеОтчисления(НомераТаблиц, Реквизиты, ПараметрыПроведения)
					+ ТекстЗапросаТаблицаОтражениеВУчетеВзносыОСМС(НомераТаблиц, Реквизиты, ПараметрыПроведения);
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	ВЫБОР
	|		КОГДА &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СтруктурноеПодразделение <> &ПустоеПодразделение
	|						ТОГДА Реквизиты.СтруктурноеПодразделение
	|					ИНАЧЕ Реквизиты.Организация
	|				КОНЕЦ
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ОтражениеДанныхИП
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтражениеНалоговойОтчетностиВРеглУчете КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Период,
	|	Реквизиты.Регистратор,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ОтражениеДанныхИП
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() 
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаОтражениеВУчете", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	ТаблицаОтражениеВУчете.Период,
	|	ТаблицаОтражениеВУчете.ВидНалога,
	|	ТаблицаОтражениеВУчете.КодБК,
	|	ТаблицаОтражениеВУчете.СчетЗатратБУ,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ1,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ2,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ3,
	|	ТаблицаОтражениеВУчете.СчетНалогаБУ,
	|	ТаблицаОтражениеВУчете.ВидПлатежаВБюджет,
	|	ТаблицаОтражениеВУчете.СчетЗатратНУ,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ1,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ2,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ3,
	|	ТаблицаОтражениеВУчете.СчетНалогаНУ,
	|	ТаблицаОтражениеВУчете.Сумма,
	|	ТаблицаОтражениеВУчете.Содержание,
	|	ТаблицаОтражениеВУчете.СтруктурнаяЕдиница,
	|	ТаблицаОтражениеВУчете.НалоговыйКомитет,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	ТаблицаОтражениеВУчете.СуммаДохода
	|ПОМЕСТИТЬ ТаблицаОтражениеВУчете
	|ИЗ
	|	Документ.ОтражениеНалоговойОтчетностиВРеглУчете.ОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|ГДЕ
	|	ТаблицаОтражениеВУчете.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчете(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаОтражениеВУчете", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	ТаблицаОтражениеВУчете.Период,
	|	ТаблицаОтражениеВУчете.ВидНалога,
	|	ТаблицаОтражениеВУчете.КодБК,
	|	ТаблицаОтражениеВУчете.СчетЗатратБУ,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ1,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ2,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратБУ3,
	|	ТаблицаОтражениеВУчете.СчетНалогаБУ,
	|	ТаблицаОтражениеВУчете.ВидПлатежаВБюджет,
	|	ТаблицаОтражениеВУчете.СчетЗатратНУ,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ1,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ2,
	|	ТаблицаОтражениеВУчете.СубконтоЗатратНУ3,
	|	ТаблицаОтражениеВУчете.СчетНалогаНУ,
	|	ТаблицаОтражениеВУчете.Сумма,
	|	ТаблицаОтражениеВУчете.Содержание,
	|	ТаблицаОтражениеВУчете.СтруктурнаяЕдиница,
	|	ТаблицаОтражениеВУчете.НалоговыйКомитет,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	ТаблицаОтражениеВУчете.СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|ГДЕ
	|	ТаблицаОтражениеВУчете.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчетеИндивидуальныйПодоходныйНалог(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Если НЕ Реквизиты.ОтражениеДанныхИП Тогда
		ПараметрыПроведения.Вставить("ТаблицаИПНСведенияОДоходах", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаИПНРасчетыСБюджетом", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаИПНСведенияОДоходах",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаИПНРасчетыСБюджетом", НомераТаблиц.Количество());

	ТекстЗапроса =
	// ИПН СВЕДЕНИЯ О ДОХОДАХ
	"ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	ТаблицаОтражениеВУчете.Период КАК ПериодРегистрации,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	ТаблицаОтражениеВУчете.СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ИПН РАСЧЕТЫ С БЮДЖЕТОМ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|   ИСТИНА КАК НеОтражатьВРеглУчете,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Налог
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|   ИСТИНА КАК НеОтражатьВРеглУчете,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Налог
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчетеОбязательныеПенсионныеВзносы(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Если НЕ Реквизиты.ОтражениеДанныхИП Тогда
		ПараметрыПроведения.Вставить("ТаблицаОПВСведенияОДоходах", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаОПВРасчетыСФондами", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаОПВПодлежитПеречислениюВФонды", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаОПВСведенияОДоходах",           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОПВРасчетыСФондами",            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОПВПодлежитПеречислениюВФонды", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	// ОПВ СВЕДЕНИЯ О ДОХОДАХ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	ТаблицаОтражениеВУчете.Период КАК ПериодРегистрации,
	|	ТаблицаОтражениеВУчете.СуммаДохода КАК СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ОПВ РАСЧЕТЫ С ФОНДАМИ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|   ИСТИНА КАК НеОтражатьВРеглУчете,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК ВидПлатежа,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Взнос
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ОПВ ПОДЛЕЖИТ ПЕРЕЧИСЛЕНИЮ В ФОНДЫ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцВыплатыДоходов,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Взнос
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчетеСоциальныйНалог(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Если НЕ Реквизиты.ОтражениеДанныхИП Тогда
		ПараметрыПроведения.Вставить("ТаблицаСНСведенияОДоходах", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаСНИсчисленный", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаСНСведенияОДоходах", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСНИсчисленный", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	// СН СВЕДЕНИЯ О ДОХОДАХ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	ТаблицаОтражениеВУчете.Период КАК ПериодРегистрации,
	|	ТаблицаОтражениеВУчете.СуммаДохода КАК СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.СоциальныйНалог)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// СН ИСЧИСЛЕННЫЙ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|   ИСТИНА КАК НеОтражатьВРеглУчете,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ТаблицаОтражениеВУчете.Сумма КАК Налог
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.СоциальныйНалог)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчетеОбязательныеСоциальныеОтчисления(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Если НЕ Реквизиты.ОтражениеДанныхИП Тогда
		ПараметрыПроведения.Вставить("ТаблицаСОСведенияОДоходах", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаСОРасчетыСФондами", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаСОСведенияОДоходах", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСОРасчетыСФондами", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	// СО СВЕДЕНИЯ О ДОХОДАХ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	ТаблицаОтражениеВУчете.Период КАК ПериодРегистрации,
	|	ТаблицаОтражениеВУчете.СуммаДохода КАК СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// СО РАСЧЕТЫ С ФОНДАМИ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК ВидПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Отчисление
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаОтражениеВУчетеВзносыОСМС(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Если НЕ Реквизиты.ОтражениеДанныхИП Тогда
		ПараметрыПроведения.Вставить("ТаблицаВОСМССведенияОДоходах", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаВОСМСРасчетыСФондами", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаВОСМСПодлежитПеречислениюВФонды", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаВОСМССведенияОДоходах",           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаВОСМСРасчетыСФондами",            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаВОСМСПодлежитПеречислениюВФонды", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	// ВОСМС СВЕДЕНИЯ О ДОХОДАХ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом) КАК СпособНалогообложения,
	|	ТаблицаОтражениеВУчете.Период КАК ПериодРегистрации,
	|	ТаблицаОтражениеВУчете.СуммаДохода КАК СуммаДохода
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ВОСМС РАСЧЕТЫ С ФОНДАМИ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|   ИСТИНА КАК НеОтражатьВРеглУчете,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК ВидПлатежа,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Взнос
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ВОСМС ПОДЛЕЖИТ ПЕРЕЧИСЛЕНИЮ В ФОНДЫ
	|ВЫБРАТЬ
	|	ТаблицаОтражениеВУчете.Ссылка,
	|	ТаблицаОтражениеВУчете.НомерСтроки,
	|	КОНЕЦПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК Период,
	|	Реквизиты.Организация,
	|	ТаблицаОтражениеВУчете.ФизЛицо,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.Налогоплательщик,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(ТаблицаОтражениеВУчете.Период, МЕСЯЦ) КАК МесяцВыплатыДоходов,
	|	ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание) КАК ВидСтроки,
	|	ТаблицаОтражениеВУчете.Сумма КАК Взнос
	|ИЗ
	|	ТаблицаОтражениеВУчете КАК ТаблицаОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОтражениеВУчете.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
	|	И ТаблицаОтражениеВУчете.Сумма <> 0
	|	И ТаблицаОтражениеВУчете.СуммаДохода <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтражениеВУчете.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции
////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования движений

Процедура СформироватьДвиженияОтражениеНалоговойОтчетностиВРеглУчете(Таблица, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		
		ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтрокаТаблицы, Реквизиты, Движения, Отказ);
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтрокаТаблицы, Реквизиты, Движения, Отказ)	
	
	// проводка по бухгалтерскому регистру
	Проводка = Движения.Типовой.Добавить();	
	
	// Свойства
	Проводка.Период 	  = СтрокаТаблицы.Период;
	
	// Измерения
	Проводка.Организация  = Реквизиты.Организация;	
	
	// бухучет
	Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратБУ;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);
				
				
	Проводка.СчетКт       = СтрокаТаблицы.СчетНалогаБУ;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления, 		СтрокаТаблицы.ВидНалога);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды, 	СтрокаТаблицы.ВидПлатежаВБюджет);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, 				СтрокаТаблицы.НалоговыйКомитет);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, 		СтрокаТаблицы.ФизЛицо);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

	// ресурсы
	Проводка.Сумма = СтрокаТаблицы.Сумма;
	
	Если Проводка.СчетДт.Валютный Тогда
		Проводка.ВалютаДт = Реквизиты.ВалютаРегламентированногоУчета;
		Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
	КонецЕсли;
	
	Если Проводка.СчетКт.Валютный Тогда
		Проводка.ВалютаКт = Реквизиты.ВалютаРегламентированногоУчета;
		Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
	КонецЕсли;
	
	// реквизиты
	Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);	
	
	// Налоговый учет
	// проводка по налоговому регистру
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда		
		
		ПроводкаНУ = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период 	    = СтрокаТаблицы.Период;
		ПроводкаНУ.Организация  = Реквизиты.Организация;
		
		ПроводкаНУ.СчетДт  = СтрокаТаблицы.СчетЗатратНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратНУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратНУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратНУ3);
		
		ПроводкаНУ.СчетКт  = СтрокаТаблицы.СчетНалогаНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления, 		СтрокаТаблицы.ВидНалога);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды, 	СтрокаТаблицы.ВидПлатежаВБюджет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, 				СтрокаТаблицы.НалоговыйКомитет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, 		СтрокаТаблицы.ФизЛицо);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		ПроводкаНУ.Сумма       = СтрокаТаблицы.Сумма;		
		ПроводкаНУ.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Бухгалтерская справка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БухгалтерскаяСправка";
	КомандаПечати.Представление = НСтр("ru = 'С-1 (Бухгалтерская справка)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БухгалтерскаяСправка";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать бух. справки
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БухгалтерскаяСправка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"БухгалтерскаяСправка",
			НСтр("ru = 'Бухгалтерская справка'"),
			ПечатьБухгалтерскаяСправка(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_БухгалтерскаяСправка");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьБухгалтерскаяСправка(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб				= Истина;
	ТабДокумент.ПолеСверху				= 10;
	ТабДокумент.ПолеСлева				= 0;
	ТабДокумент.ПолеСнизу				= 0;
	ТабДокумент.ПолеСправа				= 0;
	ТабДокумент.РазмерКолонтитулаСверху	= 10;
	ТабДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати		= "ПАРАМЕТРЫ_ПЕЧАТИ_ОтражениеНалоговойОтчетностиВРеглУчете_БухгалтерскаяСправка";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Ссылка КАК Ссылка,
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Организация КАК Организация,
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Номер КАК Номер,
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Ответственный,
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Дата КАК Дата,
				   |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОтражениеНалоговойОтчетностиВРеглУчете.Ссылка) КАК СодержаниеОперации,
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.СтруктурноеПодразделение
	               |ИЗ
	               |	Документ.ОтражениеНалоговойОтчетностиВРеглУчете КАК ОтражениеНалоговойОтчетностиВРеглУчете
	               |ГДЕ
	               |	ОтражениеНалоговойОтчетностиВРеглУчете.Ссылка В(&МассивОбъектов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	Номер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	               |	ТиповойДвиженияССубконто.СчетДт,
	               |	ТиповойДвиженияССубконто.СтруктурноеПодразделениеДт,
	               |	ТиповойДвиженияССубконто.СубконтоДт1,
	               |	ТиповойДвиженияССубконто.СубконтоДт2,
	               |	ТиповойДвиженияССубконто.СубконтоДт3,
	               |	ТиповойДвиженияССубконто.СчетКт,
	               |	ТиповойДвиженияССубконто.СтруктурноеПодразделениеКт,
	               |	ТиповойДвиженияССубконто.СубконтоКт1,
	               |	ТиповойДвиженияССубконто.СубконтоКт2,
	               |	ТиповойДвиженияССубконто.СубконтоКт3,
	               |	ТиповойДвиженияССубконто.Организация,
	               |	ЕСТЬNULL(ТиповойДвиженияССубконто.Сумма, 0) КАК Сумма,
	               |	ТиповойДвиженияССубконто.КоличествоДт,
	               |	ТиповойДвиженияССубконто.КоличествоКт,
	               |	ТиповойДвиженияССубконто.Содержание,
	               |	ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоДт1) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.БазоваяЕдиницаИзмерения
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоДт2) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |					ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.БазоваяЕдиницаИзмерения
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоДт3) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |							ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.БазоваяЕдиницаИзмерения
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК БазоваяЕдиницаИзмеренияДт,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоКт1) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.БазоваяЕдиницаИзмерения
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоКт2) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |					ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.БазоваяЕдиницаИзмерения
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(ТиповойДвиженияССубконто.СубконтоКт3) = ЗНАЧЕНИЕ(Справочник.Номенклатура)
	               |							ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.БазоваяЕдиницаИзмерения
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК БазоваяЕдиницаИзмеренияКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
	               |			,
	               |			,
	               |			Активность
	               |				И Регистратор В (&МассивОбъектов),
	               |			,
	               |			) КАК ТиповойДвиженияССубконто
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(НомерСтроки)
	               |ПО
	               |	Регистратор";
				
	Выборка = Запрос.ВыполнитьПакет();
	ВыборкаШапка = Выборка[0].Выбрать();
	
	Пока ВыборкаШапка.Следующий() Цикл 

		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Зададим параметры макета по умолчанию
		ТабДокумент.РазмерКолонтитулаСверху = 0;
		ТабДокумент.РазмерКолонтитулаСнизу  = 0;
		ТабДокумент.АвтоМасштаб             = Истина;
		ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_С1");
		
		КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		Макет.КодЯзыка =  КодЯзыка;
		
		// Получаем области макета для вывода в табличный документ.
		ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
		
		// Выведем шапку документа.
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаШапка.Организация, ВыборкаШапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаШапка.Дата);
		
		ШапкаДокумента.Параметры.ПредставлениеОрганизации  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование,");
		ШапкаДокумента.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапка.Номер, ВыборкаШапка.Ссылка);
		ШапкаДокумента.Параметры.ДатаСоставления  = Формат(ВыборкаШапка.Дата, "Л=" + КодЯзыка + "; ДЛФ=D");
		ШапкаДокумента.Параметры.СодержаниеОперации       = ВыборкаШапка.СодержаниеОперации;
		ШапкаДокумента.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаШапка.Дата, "ru");
		
		ТабДокумент.Вывести(ШапкаДокумента);
		
		// Выведем заголовок таблицы.
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		СуммаПоДокументу  = 0;
		КоличествоСтрокВОперации = 0;
		
		ВыборкаДвиженийПоРегистраторам = Выборка[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Если ВыборкаДвиженийПоРегистраторам.НайтиСледующий(ВыборкаШапка.Ссылка) Тогда
			ВыборкаДвижений = ВыборкаДвиженийПоРегистраторам.Выбрать();
		Иначе
			ВыборкаДвижений = Неопределено;
		КонецЕсли;
		
		Если  ВыборкаДвижений <> Неопределено Тогда
			// Выведем строки документа.
			Пока ВыборкаДвижений.Следующий() Цикл
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
				
				СтрокаТаблицы.Параметры.Сумма = Формат(ВыборкаДвижений.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД='.'");
				
				АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
				+ Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
				+ Строка(ВыборкаДвижений.СубконтоДт3);
				
				АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
				+ Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
				+ Строка(ВыборкаДвижений.СубконтоКт3);
				
				СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
				СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
				
				СуммаПоДокументу = СуммаПоДокументу + ВыборкаДвижений.Сумма;
				КоличествоСтрокВОперации = КоличествоСтрокВОперации + 1;			
				
				// Проверим, помещается ли строка с подвалом.
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ПодвалДокумента);
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;	
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоСтрокВОперации <> 0 Тогда
			ПодвалДокумента.Параметры.ВсегоКорреспонденцийПрописью = ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(КоличествоСтрокВОперации);
		КонецЕсли;
		
		ПодвалДокумента.Параметры.СуммаПрописью = ?(СуммаПоДокументу <> 0, ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаПоДокументу, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),"");		
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация,ВыборкаШапка.Дата);
		
		ПодвалДокумента.Параметры.РасшифровкаПодписиРуководитель	= Руководители.Руководитель;
		ПодвалДокумента.Параметры.РасшифровкаПодписиГлавБух			= Руководители.ГлавныйБухгалтер;
		
		// Выведем подвал таблицы.			
		ТабДокумент.Вывести(ПодвалДокумента);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение

// Процедура выполняет заполниение документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ РегламентированныйОтчет.
//
Процедура ЗаполнитьДокументПоОснованию(Объект, Основание) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, Основание);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НалоговыйКомитетОрганизации = Объект.Организация.НалоговыйКомитет;
	Иначе
		НалоговыйКомитетОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураСоответствияВидовНалоговСчетам = Основание.СтруктураСоответствияВидовНалоговСчетам;
	ТаблицаОтраженияВУчете  = Основание.ТаблицаОтраженияВУчете;
	ТабЧастьОтражениеВУчете = Объект.ОтражениеВУчете;
	ТабЧастьОтражениеВУчете.Очистить();
	ПредыдущийВидНалога = Неопределено;
	ПредыдущийКБК = Неопределено;
	ТекущийВидНалога = Справочники.НалогиСборыОтчисления.ПустаяСсылка();
	// получим подразделение для регламентных операций		
	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Объект.Организация, Объект.Дата);
	Для Каждого СтрокаДанных Из ТаблицаОтраженияВУчете Цикл
		
		Если СтрокаДанных.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТабЧастьОтражениеВУчете.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаУплаты;
		Если ПредыдущийВидНалога <> СтрокаДанных.ВидНалога ИЛИ ПредыдущийКБК <> СтрокаДанных.КБК Тогда
			ТекущийВидНалога = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьВидНалогаПоКБК(СтрокаДанных.ВидНалога, СтрокаДанных.КБК);
		КонецЕсли;
		НоваяСтрока.ВидНалога = ТекущийВидНалога;
		НоваяСтрока.КодБК = СтрокаДанных.КБК;
		
		Если ТекущийВидНалога = Справочники.НалогиСборыОтчисления.НалогНаПрибыль Тогда
			СчетЗатратБУ = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу; //7710
		Иначе	
			СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы; //7210
		КонецЕсли;
		
		НоваяСтрока.СчетЗатратБУ = СчетЗатратБУ;
		
		// Назначение типа			
		Для Индекс = 1 По СчетЗатратБУ.ВидыСубконто.Количество() Цикл
			Если НоваяСтрока["СубконтоЗатратБУ" + Индекс] = Неопределено Тогда
				НоваяСтрока["СубконтоЗатратБУ" + Индекс] = Новый(СчетЗатратБУ.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЦикла;
		
		Если ПредыдущийВидНалога <> СтрокаДанных.ВидНалога ИЛИ ПредыдущийКБК <> СтрокаДанных.КБК Тогда
			СтруктураДанныхПоНалогу = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьДанныеПоВидуНалога(СтруктураСоответствияВидовНалоговСчетам, СтрокаДанных.ВидНалога, ТекущийВидНалога);			
		КонецЕсли;
		
		НоваяСтрока.СубконтоЗатратБУ1 = СтруктураДанныхПоНалогу.СтатьяЗатрат;			
		
		Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
			НоваяСтрока.СубконтоЗатратБУ2 = ПодразделениеДляРеглОпераций;
		КонецЕсли;
					
		СчетНалога = СтруктураДанныхПоНалогу.СчетНалога;
		НоваяСтрока.СчетНалогаБУ = СчетНалога;
										 
		НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		
		// заполним данные по налоговому учету
		НоваяСтрока.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетЗатратБУ),,, КонецМесяца(НоваяСтрока.Период));

		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 1, НоваяСтрока.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 2, НоваяСтрока.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 3, НоваяСтрока.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
		
		НоваяСтрока.СчетНалогаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетНалогаБУ),,, КонецМесяца(НоваяСтрока.Период));
		
		Если ТаблицаОтраженияВУчете.Колонки.Найти("НалоговыйКомитет") = Неопределено Тогда
			НоваяСтрока.НалоговыйКомитет   = ?(ЗначениеЗаполнено(Основание.НалоговыйКомитет), Основание.НалоговыйКомитет, НалоговыйКомитетОрганизации);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.НалоговыйКомитет) Тогда
			НоваяСтрока.НалоговыйКомитет   = СтрокаДанных.НалоговыйКомитет;
		Иначе	
			НоваяСтрока.НалоговыйКомитет   = ?(ЗначениеЗаполнено(Основание.НалоговыйКомитет), Основание.НалоговыйКомитет, НалоговыйКомитетОрганизации);
		КонецЕсли;	
		НоваяСтрока.СтруктурнаяЕдиница = СтрокаДанных.СтруктурнаяЕдиница;

		НоваяСтрока.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2 (КБК: %3)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СтрокаДанных.Комментарий,
			ПредставлениеПериода(СтрокаДанных.ДатаНачалаОтчета, КонецДня(СтрокаДанных.ДатаОкончанияОтчета),"Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + "; ФП = Истина"),
			СтрокаДанных.КБК);
		НоваяСтрока.Сумма = СтрокаДанных.Значение;
		
		ПредыдущийВидНалога = СтрокаДанных.ВидНалога;
		ПредыдущийКБК = СтрокаДанных.КБК;
		
		ДополнительныеПараметрыОтражения = Основание.ДополнительныеПараметрыОтражения;
		Если ДополнительныеПараметрыОтражения <> Неопределено Тогда
			
			ПоказателиОтчета = Новый Структура;
			ПараметрыОтчета  = Новый Структура;
			
			ДополнительныеПараметрыОтражения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
			ДополнительныеПараметрыОтражения.Свойство("ПараметрыОтчета",  ПараметрыОтчета);
				
			Для Каждого Показатель Из ПоказателиОтчета Цикл
				НоваяСтрока[Показатель.Ключ] = СтрокаДанных[Показатель.Ключ];
			КонецЦикла;
			
			Для Каждого Параметр Из ПараметрыОтчета Цикл
				НоваяСтрока[Параметр.Ключ] = СтрокаДанных[Параметр.Ключ];
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецЕсли
