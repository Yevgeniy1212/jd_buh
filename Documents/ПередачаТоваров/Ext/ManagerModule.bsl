#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетУчетаБУ",    "ЗапасыКромеПринятыхВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",   "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетУчетаНУ",    "ЗапасыКромеПринятыхВПереработкуНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",   "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетПередачиБУ", "МатериалыПереданныеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",   "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетПередачиНУ", "МатериалыПереданныеВПереработкуНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",   "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "МатериалыПереработчика", "ВидОперации");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МатериалыПереработчика") Тогда
		
		ДанныеЗаполнения.МатериалыПереработчика = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "", СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;  	
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;    	
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;		
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;  		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетПередачиНУ = ?(
		ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку, СчетаУчета.СчетПередачиНУ);
	
	СтрокаТабличнойЧасти.СчетПередачиБУ = ?(
		ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, ПланыСчетов.Типовой.МатериалыПереданныеВПереработку, СчетаУчета.СчетПередачиБУ);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание",НСтр("ru = 'Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));

	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);

	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
 		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
 		Отказ = Истина;
 	КонецЕсли;

	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	
	НеобходимостьОтраженияВНУ 					   = ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	
	Запрос.УстановитьПараметр("СинонимТовары"				  ,	НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст	=  ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)
				      + ТекстЗапросаСписаниеТоваров(НомераТаблиц)
					  + ТекстЗапросаТоварыОрганизаций(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =   
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПередачаТоваров.НомераГТД КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	""Списаны ТМЗ"" КАК Содержание,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.Склад,
	|	СоставДокумента.ЕстьТовары,
	|	СоставДокумента.ЕстьНомераГТД
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.ТипСписания,
	|	Реквизиты.ДокументРеализации,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.КорСтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Содержание,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.Склад,
	|	Реквизиты.ЕстьТовары,
	|	Реквизиты.ЕстьНомераГТД
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.КлючСвязи,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетПередачиБУ,
		|	ТаблицаТовары.СчетПередачиНУ,
		|	1 КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПередачаТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());		
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки,
	|	ТаблицаНомераГТД.Количество Количество,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаНомераГТД
	|ИЗ
	|	Документ.ПередачаТоваров.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса ;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ТаблицаТовары.СчетПередачиБУ КАК КорСчетСписанияБУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	ТаблицаТовары.СчетПередачиНУ КАК КорСчетСписанияНУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Регистратор = ТаблицаТовары.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц)
	    	
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
	ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();
		      	
	Возврат ТекстЗапроса;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// З-2 (накладная на отпуск запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПередачаТоваров_НакладнаяЗ2";
	КомандаПечати.Представление = НСтр("ru = 'З-2 (накладная на отпуск запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПередачаТоваров_НакладнаяЗ2";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать формы З-2
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПередачаТоваров_НакладнаяЗ2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПередачаТоваров_НакладнаяЗ2",
			НСтр("ru = 'З-2 (накладная на отпуск запасов)'"),
			ПечатьЗ2(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_З2");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ унифицированной формы З-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-2.
//
Функция ПечатьЗ2(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//сформируем запрос по шапке документа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПередачаТоваров.Номер КАК Номер,
	               |	ПередачаТоваров.Ссылка КАК Ссылка,
	               |	ПередачаТоваров.Дата,
	               |	ПередачаТоваров.Организация КАК Организация,
	               |	ПередачаТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ПередачаТоваров.Организация КАК Руководители,
	               |	ПередачаТоваров.Склад КАК Склад,
	               |	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	               |	ПередачаТоваров.ВалютаДокумента,
	               |	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	               |	ПередачаТоваров.Контрагент КАК Контрагент,
	               |	ВЫБОР
	               |		КОГДА ПередачаТоваров.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |			ТОГДА ПередачаТоваров.Ответственный.ФизЛицо
	               |		ИНАЧЕ ПередачаТоваров.Ответственный
	               |	КОНЕЦ КАК ОтветственныйЗаДокумент,
	               |	ПередачаТоваров.ВидОперации,
	               |	ПередачаТоваров.УдалитьДоверенность,
	               |	ПередачаТоваров.ДоверенностьЛицо,
	               |	ПередачаТоваров.ДоверенностьНомер,
	               |	ПередачаТоваров.ДоверенностьДата,
	               |	ПередачаТоваров.ДоверенностьВыдана
	               |ПОМЕСТИТЬ ВТ_ДокументыПередачаТоваров
	               |ИЗ
	               |	Документ.ПередачаТоваров КАК ПередачаТоваров
	               |ГДЕ
	               |	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДокументыПередачаТоваров.Ссылка,
	               |	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	               |ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	               |ИЗ
	               |	ВТ_ДокументыПередачаТоваров КАК ВТ_ДокументыПередачаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |				ВТ_ДокументыПередачаТоваров.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ДокументыПередачаТоваров КАК ВТ_ДокументыПередачаТоваров
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |					ПО ВТ_ДокументыПередачаТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |						И ВТ_ДокументыПередачаТоваров.Дата >= ОтветственныеЛица.Период
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОтветственныеЛица.СтруктурнаяЕдиница,
	               |				ВТ_ДокументыПередачаТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	               |					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПериодыОтвественныеЛица.Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	               |		ПО ВТ_ДокументыПередачаТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыПередачаТоваров.Ссылка,
	               |	ВТ_ДокументыПередачаТоваров.Номер,
	               |	ВТ_ДокументыПередачаТоваров.Дата КАК ДатаДокумента,
	               |	ВТ_ДокументыПередачаТоваров.Организация КАК Организация,
	               |	ВТ_ДокументыПередачаТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДокументыПередачаТоваров.Организация КАК Руководители,
	               |	ВТ_ДокументыПередачаТоваров.Склад.Представление КАК СкладПредставление,
	               |	ВТ_ДокументыПередачаТоваров.ВалютаДокумента,
	               |	ВТ_ДокументыПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	               |	ВТ_ДокументыПередачаТоваров.Контрагент КАК Контрагент,
	               |	ОтветственныеЛица.ОтветственноеЛицо,
	               |	ВТ_ДокументыПередачаТоваров.Склад,
	               |	ВТ_ДокументыПередачаТоваров.ОтветственныйЗаДокумент,
	               |	ВТ_ДокументыПередачаТоваров.ВидОперации,
	               |	ВТ_ДокументыПередачаТоваров.ДоверенностьЛицо,
	               |	ВТ_ДокументыПередачаТоваров.УдалитьДоверенность,
	               |	ВТ_ДокументыПередачаТоваров.ДоверенностьНомер,
	               |	ВТ_ДокументыПередачаТоваров.ДоверенностьДата,
	               |	ВТ_ДокументыПередачаТоваров.ДоверенностьВыдана
	               |ИЗ
	               |	ВТ_ДокументыПередачаТоваров КАК ВТ_ДокументыПередачаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	               |		ПО ВТ_ДокументыПередачаТоваров.Ссылка = ОтветственныеЛица.Ссылка
	               |ГДЕ
	               |	ВТ_ДокументыПередачаТоваров.Ссылка В(&МассивОбъектов)";

	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	ПередачаТоваров.Номенклатура,
	                        |	ВЫРАЗИТЬ(ПередачаТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ПередачаТоваров.Номенклатура.Код КАК ТоварКод,
	                        |	ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	                        |	СУММА(ПередачаТоваров.Количество) КАК КоличествоПринято,
	                        |	МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
	                        |	ПередачаТоваров.Ссылка КАК Ссылка
	                        |ИЗ
	                        |	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	                        |ГДЕ
	                        |	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ПередачаТоваров.Номенклатура,
	                        |	ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения,
	                        |	ПередачаТоваров.Номенклатура.Код,
	                        |	ВЫРАЗИТЬ(ПередачаТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),	                        
	                        |	ПередачаТоваров.Ссылка
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки
	                        |ИТОГИ ПО
	                        |	Ссылка";
							
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТабДокумент 					 = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	 = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПередачаТоваров_З2";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З2");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;

	// получим области макета
	Шапка 					= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 		= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 			= Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 					= Макет.ПолучитьОбласть("Итого");
	ИтогоПрописью 			= Макет.ПолучитьОбласть("ИтогоПрописью");
	Подвал 					= Макет.ПолучитьОбласть("Подвал");
	ЗаголовокТаблицыАкциз 	= Макет.ПолучитьОбласть("ЗаголовокТаблицыАкциз");
	СтрокаТаблицыАкциз 		= Макет.ПолучитьОбласть("СтрокаТаблицыАкциз");
	ИтогоАкциз 				= Макет.ПолучитьОбласть("ИтогоАкциз");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		
		// Выводим общие реквизиты шапки
		Шапка.Параметры.Заполнить(Шапка);
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОтправителя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");
		Шапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		Шапка.Параметры.ДатаДокумента			 = ВыборкаПоДокументам.ДатаДокумента;
	
		ОтветственныйДляПечати  = "";
		ДолжностьОтветственного = "";
	
		Если ТипЗнч(ВыборкаПоДокументам.ОтветственноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеОтветственного 	= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтветственныйЗаДокумент, ВыборкаПоДокументам.ДатаДокумента);
			ОтветственныйДляПечати 	= ДанныеОтветственного.Представление;
			ДолжностьОтветственного = ДанныеОтветственного.Должность;
		Иначе
			ОтветственныйДляПечати = ВыборкаПоДокументам.ОтветственныйЗаДокумент;
		КонецЕсли;	
	
		Шапка.Параметры.ОтветственныйЗаПоставку = ОтветственныйДляПечати;
	
		ПредставлениеПолучателя 				= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Контрагент,ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
		ТабДокумент.Вывести(Шапка);

		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		// Выводим заголовок таблицы
		ЗаголовокТаблицы.Параметры.Валюта = Валюта;
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");

		// Выводим многострочную часть документа
		ВыборкаСтрокТовары.Сбросить();

		Если ВыборкаСтрокТовары.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаТовары = ВыборкаСтрокТовары.Выбрать();
		Иначе
			ВыборкаТовары = Неопределено;
		КонецЕсли;
		
		Если НЕ ВыборкаТовары = Неопределено Тогда

			ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ВыборкаПоДокументам.Ссылка);
			КоличествоСтрок = ВыборкаТовары.Количество();
			
			НомерСтроки = 1;
			
			Пока ВыборкаТовары.Следующий() Цикл
							
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьСтрокаТаблицы) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;	  
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаТовары);

				Кратность = 1;
				СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаТовары.Номенклатура, "Номенклатура");
				Если СтрокаСуммСписания = Неопределено Тогда
					 ВсегоСНДС = 0;
					 Цена 	   = 0;
				Иначе
					 Цена 	   = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					 ВсегоСНДС = Цена * ВыборкаТовары.КоличествоПринято;
		 		КонецЕсли;

				Количество = ВыборкаТовары.КоличествоПринято;

				СтрокаТаблицы.Параметры.НомерПП           = НомерСтроки;
				СтрокаТаблицы.Параметры.Количество 		  = Формат(Количество,"ЧДЦ=3");
				СтрокаТаблицы.Параметры.СуммаНДС          = 0;
				СтрокаТаблицы.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаТовары.ТоварНаименование),СокрЛП(ВыборкаТовары.ТоварНаименование),ВыборкаТовары.Номенклатура);
				
				Если ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
					СтрокаТаблицы.Параметры.Цена = Формат(Цена, "ЧДЦ=2");				
					СтрокаТаблицы.Параметры.СуммаСНДС = Формат(ВсегоСНДС, "ЧДЦ=2");
				КонецЕсли;
				
				ТабДокумент.Вывести(СтрокаТаблицы);

				ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
				ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
				ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;

			// Выводим итоги по документу
			Если ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
				Итого.Параметры.ИтогоСуммаСНДС = ИтогоВсегоСНДС;
			КонецЕсли;
			Итого.Параметры.ИтогоКоличество	= ИтогоКоличествоПринято;
			//Выводим итоги прописью
			
			ИтогоПрописью.Параметры.Валюта 								= Валюта;
			ИтогоПрописью.Параметры.КоличествоОтпущенныхЗапасовПрописью = ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ИтогоКоличествоПринято);
			ИтогоПрописью.Параметры.СуммаПрописью 						= ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Валюта);
			
			ТабДокумент.Вывести(Итого);
			ТабДокумент.Вывести(ИтогоПрописью);
		КонецЕсли;
	
		// вывод подписей
		Подвал.Параметры.Заполнить(Шапка);
		
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ВыборкаПоДокументам);
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, Подвал);
	
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
		Подвал.Параметры.ГлБухгалтер 			= Бухгалтер;
		Подвал.Параметры.ОтпускРазрешил 		= ОтветственныйДляПечати;
		Подвал.Параметры.ОтпускРазрешилДолжность= ДолжностьОтветственного;
		
		// заполняем МОЛ
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Склад) Тогда
			ДанныеМОЛ 							= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтветственноеЛицо, ВыборкаПоДокументам.ДатаДокумента);
			Подвал.Параметры.МОЛОтпустил 		= ДанныеМОЛ.Представление;
		КонецЕсли;	
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			Окр(ИтогоВсегоСНДС, 2),
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг надписей
						Для НомерСтрокиТабличногоДокумента = 1 По 4 Цикл
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40, НомерСтрокиТабличногоДокумента, 49).Разъединить();
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 34).Текст = ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40).Текст;
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 34, НомерСтрокиТабличногоДокумента, 44).Объединить();
						КонецЦикла;
						ТабДокумент.Область(6, 44).Текст = ТабДокумент.Область(6, 49).Текст;
						ТабДокумент.Область(1, 45, 7, 49).Очистить(Истина, Истина, Истина);
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли