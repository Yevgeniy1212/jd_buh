////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_УстановкаСоответствияСчетовБУиНУ", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СоответствиеСчетовБУиНУ

&НаКлиенте
Процедура СоответствиеСчетовБУиНУПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элемент.ТекущиеДанные.Учитывается = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСчетБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетБУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "СоответствиеСчетовБУиНУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетБУ, СчетНУ, 
		|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СоответствиеСчетовБУиНУСчетБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоБУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "СоответствиеСчетовБУиНУ");	

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  1, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  2, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  3, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСчетНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "СоответствиеСчетовБУиНУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетБУ, СчетНУ, 
		|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СоответствиеСчетовБУиНУСчетНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "СоответствиеСчетовБУиНУ");	

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  1, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  2, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСчетовБУиНУСубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.СоответствиеСчетовБУиНУ.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  3, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаСоответствиеСчетовБУиНУ Из Объект.СоответствиеСчетовБУиНУ Цикл
		СтрокаСоответствиеСчетовБУиНУ.Учитывается = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаСоответствиеСчетовБУиНУ Из Объект.СоответствиеСчетовБУиНУ Цикл
		СтрокаСоответствиеСчетовБУиНУ.Учитывается = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущемуСоответствию(Команда)
	
	Если Объект.СоответствиеСчетовБУиНУ.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Таблица будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоТекущемуСоответствиюПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоТекущемуСоответствиюПродолжение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	Если Объект.СоответствиеСчетовБУиНУ.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Таблица будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

	ЗаполнитьПоУмолчаниюПродолжение(КодВозвратаДиалога.Да, Неопределено);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьДоступностьСубконто();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	УправлениеФормой(ЭтотОбъект);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	//Объект   = Форма.Объект;
	//Элементы = Форма.Элементы;
	//
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	УстановитьФункциональныеОпцииФормы();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "СоответствиеСчетовБУиНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "СоответствиеСчетовБУиНУ");	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение ИЛИ Объект.СоответствиеСчетовБУиНУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетов = Новый СписокЗначений;
	
	// ТЧ Товары
	СписокАналитикиСчетов.Добавить("БУ"); // СчетБУ
	СписокАналитикиСчетов.Добавить("НУ"); // СчетНУ
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.СоответствиеСчетовБУиНУ, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 

	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТекущемуСоответствиюНаСервере()
	
	Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоТекущемуСоответствию(Объект);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере()
	
	Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(Объект);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ЗаполнитьПоТекущемуСоответствиюПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоТекущемуСоответствиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоУмолчаниюНаСервере();
	
КонецПроцедуры

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "СоответствиеСчетовБУиНУ";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлемента = "Субконто";
	ИмяСчета 	= "Счет";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетБУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Ложь);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", "СоответствиеСчетовБУиНУ" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", "СоответствиеСчетовБУиНУ" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоответствиеСчетовБУиНУСчетБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоБУ1", "СубконтоБУ2", "СубконтовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоБУ1, СтрокаТабличнойЧасти.СубконтоБУ2, СтрокаТабличнойЧасти.СубконтоБУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоответствиеСчетовБУиНУСчетНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоНУ1, СтрокаТабличнойЧасти.СубконтоНУ2, СтрокаТабличнойЧасти.СубконтоНУ3));
															
КонецПроцедуры
