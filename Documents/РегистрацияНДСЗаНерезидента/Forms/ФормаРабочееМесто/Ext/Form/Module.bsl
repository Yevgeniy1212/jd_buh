#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЗаполнитьШапку()
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновноеСтруктурноеПодразделениеОрганизации");
	Если СтруктурноеПодразделение = Неопределено Тогда
		СтруктурноеПодразделение = Организация;
	ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктурноеПодразделение = СтруктурноеПодразделение;
	Иначе
		СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьШапку();
	
	ПодготовитьФормуНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.СписокРегистрацийНДСЗаНерезидента);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.СписокРегистрацийНДСЗаНерезидента);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокРегистрацийНДСЗаНерезидента);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	
	//Устнавливаем отбор по периоду
		
	ГруппаОтбораПериода = 
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(СписокРегистрацийНДСЗаНерезидента).Элементы,
			"ГруппаОтбораПериода", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПериода,
		"Дата", 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
		НачалоПериода,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПериода,
		"Дата",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
		КонецДня(КонецПериода),
		,
		Истина);
		
	//Устнавливаем отбор по Организация	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРегистрацийНДСЗаНерезидента,	
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));			
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРегистрацийНДСЗаНерезидента,	
		"СтруктурноеПодразделение",
		СтруктурноеПодразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СтруктурноеПодразделение));			
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРегистрацийНДСЗаНерезидента,	
		"Контрагент",
		Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Контрагент));			
		
	вт_ДокументыПостпления = Получить_вт_ДокументДокументыПоступления();	
	ЗаполнитьДокументыПоступленияНачислениеНДСНаСервере(вт_ДокументыПостпления);
	
	ЗаполнитьДокументыПоступленияПринятиеНДСкЗачетуНаСервере(вт_ДокументыПостпления);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	ЗаголовокОтчета = НСтр("ru='Регистрации НДС налогового агента'")
	+ БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Форма.НачалоПериода, Форма.КонецПериода);
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегистрацийНДСПриИзменении(Элемент)
	
	Если ОтборРегистрацийНДС = "НачислениеНДС" Тогда
		ВидОперацииОтбора 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС");
		ОтборПоВидуОперации = Истина;
	ИначеЕсли ОтборРегистрацийНДС = "ПринятиеНДСКЗачету" Тогда	
		ВидОперацииОтбора 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.ПринятиеНДСКЗачету");
		ОтборПоВидуОперации = Истина;
	Иначе
		ВидОперацииОтбора 	= ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.ПустаяСсылка");
		ОтборПоВидуОперации = Ложь;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокРегистрацийНДСЗаНерезидента, 
	"ВидОперации", 
	ВидОперацииОтбора,
	, 
	, 
	ОтборПоВидуОперации);
	
КонецПроцедуры

&НаСервере
Функция Получить_вт_ДокументДокументыПоступления()
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаПоступления,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.СуммаДокумента * ПоступлениеТоваровУслуг.КурсВзаиморасчетов / ПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК СуммаДокументаРегл
	|ПОМЕСТИТЬ вт_ДокументыПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеТоваровУслуг.Организация = &Организация
	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	|	И ПоступлениеТоваровУслуг.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	|	И ПоступлениеТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.СтруктурноеПодразделение,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.СуммаДокумента,
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	ПоступлениеДопРасходов.СуммаДокумента * ПоступлениеДопРасходов.КурсВзаиморасчетов / ПоступлениеДопРасходов.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеДопРасходов.Организация = &Организация
	|	И ПоступлениеДопРасходов.Проведен = ИСТИНА
	|	И ПоступлениеДопРасходов.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И ПоступлениеДопРасходов.Контрагент = &Контрагент
	|	И ПоступлениеДопРасходов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНМА.Дата,
	|	ПоступлениеНМА.Организация,
	|	ПоступлениеНМА.СтруктурноеПодразделение,
	|	ПоступлениеНМА.Контрагент,
	|	ПоступлениеНМА.ДоговорКонтрагента,
	|	ПоступлениеНМА.Ссылка,
	|	ПоступлениеНМА.СуммаДокумента,
	|	ПоступлениеНМА.ВалютаДокумента,
	|	ПоступлениеНМА.СуммаДокумента * ПоступлениеНМА.КурсВзаиморасчетов / ПоступлениеНМА.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|ГДЕ
	|	ПоступлениеНМА.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеНМА.Организация = &Организация
	|	И ПоступлениеНМА.Проведен = ИСТИНА
	|	И ПоступлениеНМА.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И ПоступлениеНМА.Контрагент = &Контрагент
	|	И ПоступлениеНМА.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента)";
	
	Если Не ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеНМА.СтруктурноеПодразделение = &СтруктурноеПодразделение", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеДопРасходов.СтруктурноеПодразделение = &СтруктурноеПодразделение", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеТоваровУслуг.СтруктурноеПодразделение = &СтруктурноеПодразделение", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НДСЗаНерезидентаОбороты.ДокументПоступления.СтруктурноеПодразделение = &СтруктурноеПодразделение", "" );
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеНМА.Организация = &Организация", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеДопРасходов.Организация = &Организация", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеТоваровУслуг.Организация = &Организация", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НДСЗаНерезидентаОбороты.ДокументПоступления.Организация = &Организация", "" );
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеНМА.Контрагент = &Контрагент", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеДопРасходов.Контрагент = &Контрагент", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ПоступлениеТоваровУслуг.Контрагент = &Контрагент", "" );
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НДСЗаНерезидентаОбороты.ДокументПоступления.Контрагент = &Контрагент", "" );
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация"				, Организация);
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ДатаНачала"				, НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаОкончания"			, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода"			, Новый Граница(НачалоДня(НачалоПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода"			, Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	
	Возврат  МенеджерВременныхТаблиц;
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыПоступленияНачислениеНДСНаСервере(вт_ДокументыПостпления)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	НДСЗаНерезидентаОбороты.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(НДСЗаНерезидентаОбороты.СуммаБезНДСПриход) КАК Начисленно,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления
	|ПОМЕСТИТЬ вт_НачислениеНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаНерезидента.Обороты(
	|			,
	|			,
	|			,
	|			ДокументПоступления В
	|				(ВЫБРАТЬ
	|					вт_ДокументыПоступления.ДокументПоступления
	|				ИЗ
	|					вт_ДокументыПоступления КАК вт_ДокументыПоступления)) КАК НДСЗаНерезидентаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаНерезидентаОбороты.ДокументПоступления,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДокументыПоступления.ДатаПоступления КАК ДатаПоступления,
	|	вт_ДокументыПоступления.ДокументПоступления,
	|	вт_ДокументыПоступления.СуммаДокумента,
	|	вт_ДокументыПоступления.Контрагент,
	|	вт_ДокументыПоступления.СтруктурноеПодразделение,
	|	вт_ДокументыПоступления.Организация,
	|	вт_НачислениеНДС.Начисленно,
	|	вт_ДокументыПоступления.ВалютаДокумента,
	|	вт_ДокументыПоступления.СуммаДокументаРегл,
	|	вт_ДокументыПоступления.СуммаДокументаРегл - ЕСТЬNULL(вт_НачислениеНДС.Начисленно, 0) КАК СуммаКНачислению,
	|	вт_НачислениеНДС.ВидОперацииПоступления КАК НДСВидПоступления
	|ИЗ
	|	вт_ДокументыПоступления КАК вт_ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_НачислениеНДС КАК вт_НачислениеНДС
	|		ПО вт_ДокументыПоступления.ДокументПоступления.Ссылка = вт_НачислениеНДС.ДокументПоступления.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДокументыПоступления.ДатаПоступления,
	|	вт_ДокументыПоступления.ДокументПоступления,
	|	вт_ДокументыПоступления.СуммаДокумента,
	|	вт_ДокументыПоступления.Контрагент,
	|	вт_ДокументыПоступления.СтруктурноеПодразделение,
	|	вт_ДокументыПоступления.Организация,
	|	вт_НачислениеНДС.Начисленно,
	|	вт_ДокументыПоступления.ВалютаДокумента,
	|	вт_ДокументыПоступления.СуммаДокументаРегл,
	|	вт_НачислениеНДС.ВидОперацииПоступления
	|
	|ИМЕЮЩИЕ
	|	СУММА(вт_ДокументыПоступления.СуммаДокументаРегл - ЕСТЬNULL(вт_НачислениеНДС.Начисленно, 0)) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления";
	
	Запрос.МенеджерВременныхТаблиц = вт_ДокументыПостпления;
	ДокументыПоступленияНачислениеНДС.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//ДокументыПоступленияНачислениеНДС.Сортировать("ДатаПоступления");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДокументыПоступленияПринятиеНДСкЗачетуНаСервере(вт_ДокументыПостпления)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления КАК ДокументПоступления,
	             	  |	СУММА(НДСЗаНерезидентаОстаткиИОбороты.СуммаБезНДСКонечныйОстаток) КАК СуммаКПринятию,
	             	  |	СУММА(НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСРасход) КАК СуммаПринятоНДСвЗачет,
	             	  |	СУММА(НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСКонечныйОстаток) КАК СуммаКПринятиюНДСвЗачет,
	             	  |	НДСЗаНерезидентаОстаткиИОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления
	             	  |ПОМЕСТИТЬ вт_ПринятиеКЗачету
	             	  |ИЗ
	             	  |	РегистрНакопления.НДСЗаНерезидента.ОстаткиИОбороты(
	             	  |			,
	             	  |			,
	             	  |			,
	             	  |			,
	             	  |			ДокументПоступления В
	             	  |				(ВЫБРАТЬ
	             	  |					вт_ДокументыПоступления.ДокументПоступления
	             	  |				ИЗ
	             	  |					вт_ДокументыПоступления КАК вт_ДокументыПоступления)) КАК НДСЗаНерезидентаОстаткиИОбороты
	             	  |ГДЕ
	             	  |	НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСКонечныйОстаток <> 0
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления,
	             	  |	НДСЗаНерезидентаОстаткиИОбороты.ВидОперацииПоступления
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	вт_ДокументыПоступления.ДатаПоступления КАК ДатаПоступления,
	             	  |	вт_ДокументыПоступления.ДокументПоступления КАК ДокументПоступления,
	             	  |	вт_ДокументыПоступления.СуммаДокумента КАК СуммаДокумента,
	             	  |	вт_ДокументыПоступления.Контрагент КАК Контрагент,
	             	  |	вт_ДокументыПоступления.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	             	  |	вт_ДокументыПоступления.Организация КАК Организация,
	             	  |	вт_ДокументыПоступления.ВалютаДокумента КАК ВалютаДокумента,
	             	  |	вт_ДокументыПоступления.СуммаДокументаРегл КАК СуммаДокументаРегл,
	             	  |	вт_ПринятиеКЗачету.СуммаКПринятию КАК СуммаКПринятию,
	             	  |	вт_ПринятиеКЗачету.СуммаПринятоНДСвЗачет КАК СуммаПринятоНДСвЗачет,
	             	  |	вт_ПринятиеКЗачету.СуммаКПринятиюНДСвЗачет КАК СуммаКПринятиюНДСвЗачет,
	             	  |	вт_ПринятиеКЗачету.ВидОперацииПоступления КАК НДСВидПоступления
	             	  |ИЗ
	             	  |	вт_ПринятиеКЗачету КАК вт_ПринятиеКЗачету
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДокументыПоступления КАК вт_ДокументыПоступления
	             	  |		ПО (вт_ДокументыПоступления.ДокументПоступления.Ссылка = вт_ПринятиеКЗачету.ДокументПоступления.Ссылка)
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	вт_ДокументыПоступления.ДатаПоступления,
	             	  |	вт_ДокументыПоступления.ДокументПоступления,
	             	  |	вт_ДокументыПоступления.СуммаДокумента,
	             	  |	вт_ДокументыПоступления.Контрагент,
	             	  |	вт_ДокументыПоступления.СтруктурноеПодразделение,
	             	  |	вт_ДокументыПоступления.Организация,
	             	  |	вт_ДокументыПоступления.ВалютаДокумента,
	             	  |	вт_ДокументыПоступления.СуммаДокументаРегл,
	             	  |	вт_ПринятиеКЗачету.СуммаКПринятию,
	             	  |	вт_ПринятиеКЗачету.СуммаПринятоНДСвЗачет,
	             	  |	вт_ПринятиеКЗачету.СуммаКПринятиюНДСвЗачет,
	             	  |	вт_ПринятиеКЗачету.ВидОперацииПоступления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	ДатаПоступления";
	
	Запрос.МенеджерВременныхТаблиц = вт_ДокументыПостпления;
	
	ДокументыПоступленияПринятиеНДСкЗачету.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКомандФормы  

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", 
	ПараметрыВыбора, 
	Элементы.ВыбратьПериод, 
	, 
	, 
	, 
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	НачалоПериода 	= НачалоКвартала(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецПериода 	= КонецКвартала(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	СтавкаНДС 		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация,ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Элементы.ДокументыПоступленияНачислениеНДССуммаДокументаРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сумма документа (%1)",
	                                                                           ВалютаРегламентированногоУчета);
																			   
	ОбновитьДанныеФормыНаСервере();																		   
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		ОбновитьДанныеФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Организация = Неопределено;
		СтруктурноеПодразделение = Неопределено;
		ОбновитьДанныеФормыНаСервере();
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Организация, СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			ОбновитьДанныеФормыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрацийНДСЗаНерезидентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "СписокРегистрацийНДСЗаНерезидентаДокументОплаты" Тогда
		СтандартнаяОбработка = Ложь;
		ДокументОплаты = Элементы.СписокРегистрацийНДСЗаНерезидента.ТекущиеДанные.ДокументОплаты;
		Если ЗначениеЗаполнено(ДокументОплаты) ТОгда
			ОткрытьЗначение(ДокументОплаты);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрацийНДСЗаНерезидентаПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияНачислениеНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыПоступленияНачислениеНДС.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыПоступленияНачислениеНДСДокумент" Тогда 
		Документ = ТекущиеДанные.ДокументПоступления;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДокументыПоступленияНачислениеНДСДокументНачисленияНДСвЗачет" Тогда 	
		Документ = ТекущиеДанные.ДокументНачисленияНДСвЗачет;
	Иначе 
		Документ = Неопределено;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Документ) Тогда 
		ПоказатьЗначение(Неопределено, Документ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияСпискаРегистрацийНДС(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если ЗначениеЗаполнено(РезультатЗакрытия) и ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда 
		ТекущиеДанные 					= ДополнительныеПараметры.ТекущиеДанные;
		ТекущиеДанные.ДокументНачисленияНДС.ЗагрузитьЗначения(РезультатЗакрытия.ДокументыНачисленияНДС);
		ТекущиеДанные.СуммаНачислено 	= РезультатЗакрытия.СуммаНачислено;
		ТекущиеДанные.СуммаКНачислению 	= ТекущиеДанные.СуммаДокументаРегл - ТекущиеДанные.СуммаНачислено;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПодготовитьТаблицуДокументовПоступленияНаСервере(ПараметрыСозданияДокумента)
	РазрешеноВводитьДокумент = Истина;
	
	ТаблицаДокументов = РеквизитФормыВЗначение(ПараметрыСозданияДокумента.ИмяТаблицы,Тип("ТаблицаЗначений"));
	
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= "ВЫБРАТЬ
	|	ТаблицаДокументов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.НДСВидПоступления КАК НДСВидПоступления,
	|	ТаблицаДокументов.ДатаПоступления КАК ДатаПоступления,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ТаблицаДокументов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокументов.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаДокументов.СуммаКПринятиюНДСвЗачет КАК СуммаНДС,
	|	ТаблицаДокументов.СуммаКНачислению КАК СуммаКНачислению,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.СуммаНачислено = 0
	|			ТОГДА ТаблицаДокументов.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ вт_Документов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.ДокументПоступления В(&МассивДокументов)
	|	И ТаблицаДокументов.НДСВидПоступления В(&МассивНДСВидПоступления)
	|	И ТаблицаДокументов.СуммаКНачислению <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Документов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	вт_Документов.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(вт_Документов.ДатаПоступления, ДЕНЬ) КАК ДатаПоступления,
	|	вт_Документов.Контрагент КАК Контрагент,
	|	вт_Документов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	вт_Документов.ДокументПоступления,
	|	вт_Документов.НДСВидПоступления,
	|	вт_Документов.СуммаНДС КАК СуммаНДС,
	|	вт_Документов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	вт_Документов.СуммаКНачислению КАК СуммаДокумента
	|ИЗ
	|	вт_Документов КАК вт_Документов
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт_Документов.ДатаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_Документов.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_Документов.СтруктурноеПодразделение) КАК КоличествоСП,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_Документов.ДоговорКонтрагента) КАК КоличествоДоговоров
	|ИЗ
	|	вт_Документов КАК вт_Документов";
	
	Если ПараметрыСозданияДокумента.ИмяТаблицы = "ДокументыПоступленияПринятиеНДСкЗачету" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаКНачислению", "СуммаКПринятию");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"	ВЫБОР
							|		КОГДА ТаблицаДокументов.СуммаНачислено = 0
							|			ТОГДА ТаблицаДокументов.СуммаДокумента
							|		ИНАЧЕ 0
							|	КОНЕЦ КАК СуммаВзаиморасчетов" , " 0 как СуммаВзаиморасчетов");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокументов.СуммаКПринятиюНДСвЗачет КАК СуммаНДС,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "вт_Документов.СуммаНДС КАК СуммаНДС,", "");
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("МассивДокументов" , ПараметрыСозданияДокумента.МассивДокументов);
	Запрос.УстановитьПараметр("МассивНДСВидПоступления" , ПараметрыСозданияДокумента.МассивНДСВидПоступления);

	
	РезультатаЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатПакета2 = РезультатаЗапроса[2].Выгрузить()[0];
	Если РезультатПакета2.КоличествоОрганизаций > 1 Тогда
		ТекстСообщения = НСтр("ru='Выделены документы: %1 разных организаций формирование документа не возможно!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатПакета2.КоличествоОрганизаций); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	Если РезультатПакета2.КоличествоСП > 1 Тогда
		ТекстСообщения = НСтр("ru='Выделены документы: %1 разных структурных подразделений формирование документа не возможно!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатПакета2.КоличествоСП); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	Если РезультатПакета2.КоличествоДоговоров > 1 Тогда
		ТекстСообщения = НСтр("ru='Выделены документы: %1 разных договоров контрагента формирование документа не возможно!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатПакета2.КоличествоДоговоров); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	ТаблицаДокументовПоступления = РезультатаЗапроса[1].Выгрузить();
	СуммаДокумента = ТаблицаДокументовПоступления.Итог("СуммаДокумента");
	
	Если СуммаДокумента = 0 Тогда
		Если ПараметрыСозданияДокумента.ИмяТаблицы = "ДокументыПоступленияПринятиеНДСкЗачету" Тогда
			ТекстСообщения = НСтр("ru='Сумма к принятию выделенных документов равна 0, формирование документа не возможно!!!'");
		Иначе
			ТекстСообщения = НСтр("ru='Сумма к начислению выделенных документов равна 0, формирование документа не возможно!!!'");
		КонецЕсли;	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	Если ТаблицаДокументовПоступления.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В выделенном диапазоне строк нет ни одного подходящего документа, формирование документа не возможно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;	
	
	Если Не РазрешеноВводитьДокумент Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДокументовПоступления, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СоздатьНачисление(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.ДокументыПоступленияНачислениеНДС.ВыделенныеСтроки);

	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВВодаНачисленияНДС",ЭтаФорма,ДополнительныеПараметры);
	
	Если Элементы.ДокументыПоступленияНачислениеНДС.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекущиеДанные = Элементы.ДокументыПоступленияНачислениеНДС.ТекущиеДанные;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ДокументПоступления"	, ТекущиеДанные.ДокументПоступления);
		ПараметрыЗаполнения.Вставить("СуммаКНачислению"		, ?(ТекущиеДанные.СуммаНачислено = 0, 0, ТекущиеДанные.СуммаКНачислению));
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
	Иначе
		МассивДокументов = Новый Массив;
		МассивНДСВидПоступления = Новый Массив;
		
		Для Каждого ИдентификаторСтроки Из Элементы.ДокументыПоступленияНачислениеНДС.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДокументыПоступленияНачислениеНДС.ДанныеСтроки(ИдентификаторСтроки);	
			МассивДокументов.Добавить(ДанныеСтроки.ДокументПоступления);
			МассивНДСВидПоступления.Добавить(ДанныеСтроки.НДСВидПоступления);
		КонецЦикла;
		
		ПараметрыСозданияДокумента = Новый Структура;
		ПараметрыСозданияДокумента.Вставить("МассивДокументов"	, МассивДокументов);
		ПараметрыСозданияДокумента.Вставить("ИмяТаблицы"		, "ДокументыПоступленияНачислениеНДС");
		ПараметрыСозданияДокумента.Вставить("МассивНДСВидПоступления", МассивНДСВидПоступления);
		
		АдресВременногоХранилища = ПодготовитьТаблицуДокументовПоступленияНаСервере(ПараметрыСозданияДокумента);
		
		Если АдресВременногоХранилища = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("АдресВременногоХранилища"	, АдресВременногоХранилища);
		ПараметрыЗаполнения.Вставить("ВидОперации"				, ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС"));
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
	КонецЕсли;	
	
	ОткрытьФорму("Документ.РегистрацияНДСЗаНерезидента.Форма.ФормаДокумента"
		, ПараметрыФормы
		, ЭтаФорма
		,
		,
		,
		, ОписаниеОповещенияОЗакрытии
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВВодаНачисленияНДС(РезультатЗакрытия, ДополнительныеПараметры) Экспорт  
	
	ПослеВВодаНачисленияНДСНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВВодаНачисленияНДСНаСервере(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если  РезультатЗакрытия <> Неопределено Тогда
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ДокументыПоступленияНачислениеНДС.НайтиПоИдентификатору(ИдентификаторСтроки);	
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Документ", ДанныеСтроки.ДокументПоступления);
			ПараметрыОтбора.Вставить("НДСВидПоступления", ДанныеСтроки.НДСВидПоступления);
			
			МассивСтрок = РезультатЗакрытия.ДокументыПоступления.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого Строка Из МассивСтрок Цикл			
				ДанныеСтроки.СуммаНачислено 	= ДанныеСтроки.СуммаНачислено + Строка.Сумма;
				ДанныеСтроки.СуммаКНачислению 	= ДанныеСтроки.СуммаДокументаРегл - ДанныеСтроки.СуммаНачислено;			
			КонецЦикла;
		
			ДанныеСтроки.ДокументНачисленияНДСвЗачет = РезультатЗакрытия.Ссылка;
			
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияПринятиеНДСкЗачетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДокументыПоступленияПринятиеНДСкЗачету.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыПоступленияПринятиеНДСкЗачетуДокументПоступления" Тогда 
		Документ = ТекущиеДанные.ДокументПоступления;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДокументыПоступленияПринятиеНДСкЗачетуДокументПринятияНДСвЗачет" Тогда  	
		Документ = ТекущиеДанные.ДокументПринятияНДСвЗачет;
	Иначе 
		Документ = Неопределено;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Документ) Тогда 
		ПоказатьЗначение(Неопределено, Документ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятиеНДСкЗачету(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.ДокументыПоступленияПринятиеНДСкЗачету.ВыделенныеСтроки);

	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВВодаПринятиНДСкЗачету",ЭтаФорма,ДополнительныеПараметры);
	
	МассивДокументов = Новый Массив;
	МассивНДСВидПоступления = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из Элементы.ДокументыПоступленияПринятиеНДСкЗачету.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДокументыПоступленияПринятиеНДСкЗачету.ДанныеСтроки(ИдентификаторСтроки);	
		МассивДокументов.Добавить(ДанныеСтроки.ДокументПоступления);
		МассивНДСВидПоступления.Добавить(ДанныеСтроки.НДСВидПоступления);
	КонецЦикла;
	
	ПараметрыСозданияДокумента = Новый Структура;
	ПараметрыСозданияДокумента.Вставить("МассивДокументов"	, МассивДокументов);
	ПараметрыСозданияДокумента.Вставить("ИмяТаблицы"		, "ДокументыПоступленияПринятиеНДСкЗачету");
	ПараметрыСозданияДокумента.Вставить("МассивНДСВидПоступления", МассивНДСВидПоступления);
	
	АдресВременногоХранилища = ПодготовитьТаблицуДокументовПоступленияНаСервере(ПараметрыСозданияДокумента);
	
	Если АдресВременногоХранилища = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("АдресВременногоХранилища"	, АдресВременногоХранилища);
	ПараметрыЗаполнения.Вставить("ВидОперации"				, ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.ПринятиеНДСКЗачету"));
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Документ.РегистрацияНДСЗаНерезидента.Форма.ФормаДокумента"
		, ПараметрыФормы
		, ЭтаФорма
		,
		,
		,
		, ОписаниеОповещенияОЗакрытии
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВВодаПринятиНДСкЗачету(РезультатЗакрытия, ДополнительныеПараметры) Экспорт  
	
	ПослеВВодаПринятиНДСкЗачетуСервере(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВВодаПринятиНДСкЗачетуСервере(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если  РезультатЗакрытия <> Неопределено Тогда
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ДокументыПоступленияПринятиеНДСкЗачету.НайтиПоИдентификатору(ИдентификаторСтроки);	
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Документ", ДанныеСтроки.ДокументПоступления);
			ПараметрыОтбора.Вставить("НДСВидПоступления", ДанныеСтроки.НДСВидПоступления);
			
			МассивСтрок = РезультатЗакрытия.ДокументыПоступления.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				//ДанныеСтроки.СуммаПринятоКЗачету = ДанныеСтроки.СуммаПринятоКЗачету + МассивСтрок[0].Сумма;
				ДанныеСтроки.СуммаПринятоНДСвЗачет		= ДанныеСтроки.СуммаПринятоНДСвЗачет + МассивСтрок[0].СуммаНДС;
				ДанныеСтроки.СуммаКПринятиюНДСвЗачет 	= ДанныеСтроки.СуммаКПринятиюНДСвЗачет - МассивСтрок[0].СуммаНДС;
				ДанныеСтроки.СуммаКПринятию 	 		= ДанныеСтроки.СуммаКПринятию - МассивСтрок[0].Сумма;
			КонецЕсли;	
			
			ДанныеСтроки.ДокументПринятияНДСвЗачет = РезультатЗакрытия.Ссылка;

		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьПеречислениеНалога(Команда)
	
	МассивСтрок = Элементы.СписокРегистрацийНДСЗаНерезидента.ВыделенныеСтроки; 
	
	СтруктураПараметровЗаполнения = ПолучитьСтруктураПараметровЗаполнения(МассивСтрок);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВводаПеречисленияНалога",ЭтаФорма,Неопределено);
	
	Если СтруктураПараметровЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.Форма.ФормаДокумента"
		, Новый Структура("ЗначенияЗаполнения", СтруктураПараметровЗаполнения)
		, ЭтаФорма
		,
		,
		,
		, ОписаниеОповещенияОЗакрытии
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПеречисленияНалога(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Элементы.СписокРегистрацийНДСЗаНерезидента.Обновить();		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСтруктураПараметровЗаполнения(МассивСсылок)
	
	РазрешеноВводитьДокумент = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрацияНДСЗаНерезидента.Ссылка,
	|	РегистрацияНДСЗаНерезидента.СуммаНДС,
	|	РегистрацияНДСЗаНерезидента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	РегистрацияНДСЗаНерезидента.Организация,
	|	РегистрацияНДСЗаНерезидента.ДоговорКонтрагента
	|ПОМЕСТИТЬ вт_РегистрацияНДС
	|ИЗ
	|	Документ.РегистрацияНДСЗаНерезидента КАК РегистрацияНДСЗаНерезидента
	|ГДЕ
	|	РегистрацияНДСЗаНерезидента.Ссылка В(&МассивСсылок)
	|	И РегистрацияНДСЗаНерезидента.Проведен = ИСТИНА
	|	И РегистрацияНДСЗаНерезидента.ПометкаУдаления = ЛОЖЬ
	|	И РегистрацияНДСЗаНерезидента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_РегистрацияНДС.СтруктурноеПодразделение) КАК КоличествоСП,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_РегистрацияНДС.Организация) КАК КоличествоОрганизаций
	|ИЗ
	|	вт_РегистрацияНДС КАК вт_РегистрацияНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_РегистрацияНДС.Ссылка,
	|	вт_РегистрацияНДС.СуммаНДС
	|ИЗ
	|	вт_РегистрацияНДС КАК вт_РегистрацияНДС";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапросаПакеты 	= Запрос.ВыполнитьПакет();
	
	РезультатПакета1 = РезультатЗапросаПакеты[1].Выгрузить()[0];
	Если РезультатПакета1.КоличествоОрганизаций > 1 Тогда
		ТекстСообщения = НСтр("ru='Выделены документы: %1 разных организаций ввод документа не возможен!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатПакета1.КоличествоОрганизаций); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	Если РезультатПакета1.КоличествоСП > 1 Тогда
		ТекстСообщения = НСтр("ru='Выделены документы: %1 разных структурных подразделений ввод документа не возможен!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатПакета1.КоличествоСП); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РазрешеноВводитьДокумент = Ложь;	
	КонецЕсли;
	
	Если Не РазрешеноВводитьДокумент Тогда
		Возврат Новый Структура;	
	КонецЕсли;	
		
		
	РезультатЗапроса = РезультатЗапросаПакеты[2].Выгрузить();
	
	МассивСсылокЗапроса = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");	
	
	Если МассивСсылок.Количество() <> МассивСсылокЗапроса.Количество() Тогда
		Для Каждого СтрокаМассива Из МассивСсылок Цикл
			Если МассивСсылокЗапроса.Найти(СтрокаМассива) = Неопределено Тогда
				ПричинаПропуска = "";
				
				Если Не СтрокаМассива.Проведен Тогда
					ПричинаПропуска = Символы.ПС + НСтр("ru=' - не проведен'");
					
				КонецЕсли;
				
				Если Не СтрокаМассива.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС Тогда
					ПричинаПропуска = ПричинаПропуска + ?(ПричинаПропуска="","",", ") + Символы.ПС + НСтр("ru=' - видоперации = ""Принятие НДС к зачету""'");
				КонецЕсли;
				
				ТекстСообщения = НСтр("ru='При формировании платежного поручения был пропущен документ %1. По причине того, что документ: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива, ПричинаПропуска); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если МассивСсылокЗапроса.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В выделенном диапазоне строк нет ни одного подходящего документа, формирование платежного поручения не возможно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Новый Структура;
	КонецЕсли;
	
	СуммаПлатежа = РезультатЗапроса.Итог("СуммаНДС");
	Если СуммаПлатежа = 0 Тогда
		ТекстСообщения = НСтр("ru='В выделенном диапазоне документов сумма НДС равна 0, формирование платежного поручения не возможно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Новый Структура;
	КонецЕсли;
	
	
	СтруктураПараметровЗаполнения = Новый Структура;
	//СтруктураПараметровЗаполнения.Вставить("ДокументОснования"	, МассивСсылокЗапроса[0]);
	//СтруктураПараметровЗаполнения.Вставить("МассивДокументов"	, МассивСсылокЗапроса);
	СтруктураПараметровЗаполнения.Вставить("ВводИзРабочегоМеста", Истина);
	СтруктураПараметровЗаполнения.Вставить("ДокументОснования"	, МассивСсылокЗапроса[0]);
	СтруктураПараметровЗаполнения.Вставить("СуммаПлатежа"		, СуммаПлатежа);
	Возврат СтруктураПараметровЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры

#КонецОбласти