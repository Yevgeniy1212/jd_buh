
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""регистрация ндс за нерезидента"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда
		ВыбранноеЗначение.ПерезаполнитьДокументПоОснованию = Ложь;
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповеститьОВыборе(?(Объект.Проведен, Объект.Ссылка, Неопределено));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	//Если СтруктураРезультатаВыполнения <> Неопределено
	//		И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
	//		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
	//	ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	УчетАгентскогоНДС = УправлениеВзаиморасчетамиСервер.ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(Объект.ВидОперации);
	Если УчетАгентскогоНДС <> Неопределено
	Тогда	
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, Новый Структура("УчетАгентскогоНДС", УчетАгентскогоНДС), СтруктураРезультатаВыполнения);
	Иначе
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаВалютаВзаиморасчетов = ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если ДоговорКонтрагентаВалютаВзаиморасчетов = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда 
		ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	ПараметрыОткрытия.Вставить("КурсДокумента"			, КурсДокумента);
	ПараметрыОткрытия.Вставить("КратностьДокумента"		, КратностьДокумента);
	
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов"	, ДоговорКонтрагентаВалютаВзаиморасчетов);
	ПараметрыОткрытия.Вставить("КурсВзаиморасчетов"		, Объект.КурсВзаиморасчетов);
	ПараметрыОткрытия.Вставить("КратностьВзаиморасчетов", Объект.КратностьВзаиморасчетов);
	
	ПараметрыОткрытия.Вставить("ЕстьЗаполненныеТабличныеЧасти", Ложь);
	
	НедоступныеРеквизиты = Новый Структура;
	НедоступныеРеквизиты.Вставить("ВалютаДокумента"			, Истина);
	НедоступныеРеквизиты.Вставить("КурсДокумента"			, Ложь);
	НедоступныеРеквизиты.Вставить("КратностьДокумента"		, Истина);
	НедоступныеРеквизиты.Вставить("УстановитьКурсДокумента"	, Истина);
	
	
	ПараметрыОткрытия.Вставить("НедоступныеРеквизиты", НедоступныеРеквизиты);
	
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма,,,,ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.ЗначенияПриЗакрытии.Свойство("КурсВзаиморасчетов") Тогда
			Объект.КурсВзаиморасчетов		= Результат.ЗначенияПриЗакрытии.КурсВзаиморасчетов;
		КонецЕсли;
		Если Результат.ЗначенияПриЗакрытии.Свойство("КратностьВзаиморасчетов") Тогда
			Объект.КратностьВзаиморасчетов 	= Результат.ЗначенияПриЗакрытии.КратностьВзаиморасчетов;
		КонецЕсли;	
		ПерерасчитатьСуммы();
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныкПроцедурыФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.ДокументыПоступления.ТолькоПросмотр       = Ложь;
	Элементы.ДокументыПоступления.ИзменятьСоставСтрок  = Ложь;
	Элементы.ДокументыПоступления.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;

КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	ПерерасчитатьСуммы();
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция  ПолучитьЗначениеРеквизита(ОобъектСсылка, Реквизит) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОобъектСсылка, Реквизит);
КонецФункции	

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
    ПоказыватьВДокументахСчетаУчета = Истина;
    
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ОпредилитьСписокДоступныхСчетов();
	
	КурсДокумента 		= 1;
	КратностьДокумента	= 1;
	ДоговорКонтрагентаВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагентаВалютаВзаиморасчетов) Тогда
		ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;	
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
		
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.СчетУчетаНДС.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    
	Элементы.ДокументыПоступленияСуммаВзаиморасчетов.Видимость	= Не Форма.ДоговорКонтрагентаВалютаВзаиморасчетов = Объект.ВалютаДокумента;
	
	Форма.ЦеныИВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%4; %1 %2 = %3 %4 '"),
		Объект.КратностьВзаиморасчетов,
		Форма.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Объект.КурсВзаиморасчетов,
		Объект.ВалютаДокумента);
		
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
													
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект,);
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент			, Неопределено);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекущийДоговорКонтрагента				= Объект.ДоговорКонтрагента;
		ДоговорКонтрагентаВалютаВзаиморасчетов 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	Иначе 
		ТекущийДоговорКонтрагента				= Неопределено;
		ДоговорКонтрагентаВалютаВзаиморасчетов 	= ВалютаРегламентированногоУчета;
	КонецЕсли;	
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , , СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаИзменениеВидаОперацииОчиститьТабЧасти(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.РасшифровкаСуммы.Очистить();
		Объект.ДокументыПоступления.Очистить();
		ВидОперацииПриИзмененииНаСервере();
	ИначеЕсли  Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ТекущийВидОперации   = Объект.ВидОперации;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС 
	Тогда
		Объект.СчетУчетаНДС = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента.СчетУчетаРасчетовСКонтрагентомБУ;
		
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДС) Тогда
			Объект.СчетУчетаНДС	 = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость; 
		КонецЕсли;	
	Иначе
		Объект.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению; 
	КонецЕсли;	
	
	ОпредилитьСписокДоступныхСчетов();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпредилитьСписокДоступныхСчетов()
	
	УсловияОтбора = Новый Структура;
	УсловияОтбора.Вставить("ИспользоватьВПроводках"	, Истина);
	УсловияОтбора.Вставить("Валютный"				, Неопределено);
	УсловияОтбора.Вставить("Забалансовый"			, Неопределено);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС Тогда
		СчетУчета 		= ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		УсловияОтбора.Вставить("СчетаИсключения", Неопределено);
	Иначе
		СчетУчета		= ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению_;
		УсловияОтбора.Вставить("СчетаИсключения", ПланыСчетов.Типовой.НДСУплачиваемыйНалоговымАгентом);
	КонецЕсли;	
	
	МассивСчетов = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(СчетУчета, УсловияОтбора);
	
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетов));
	
	Элементы.СчетУчетаНДС.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры	

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	Объект.КурсВзаиморасчетов = СтруктураКурса.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
 
	Если Результат <> Неопределено Тогда

		Объект.КурсВзаиморасчетов      = Результат.КурсВалюты;
		Объект.КратностьВзаиморасчетов = Результат.КратностьВалюты;

		ПерерасчитатьСуммы();
		
	КонецЕсли; 
                                                                
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьСуммы()
	Для Каждого СтрокаПоступления из Объект.ДокументыПоступления цикл
		РассчитатьСуммыПоступлений(СтрокаПоступления);
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыПоступлений(СтрокаПоступления)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(Объект);

	СтрокаПоступления.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПоступления.СуммаВзаиморасчетов, 
			ДоговорКонтрагентаВалютаВзаиморасчетов	, Объект.ВалютаДокумента, 
           	Объект.КурсВзаиморасчетов				, КурсДокумента, 
           	Объект.КратностьВзаиморасчетов			, КратностьДокумента); 
	
	РасчитатьСуммуНДСНаКлиенте(СтрокаПоступления)
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьСуммуВзаиморасчетов(СтрокаПоступления)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(Объект);

	СтрокаПоступления.СуммаВзаиморасчетов= ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПоступления.Сумма , 
			Объект.ВалютаДокумента	, ДоговорКонтрагентаВалютаВзаиморасчетов, 
           	КурсДокумента			, Объект.КурсВзаиморасчетов,  
           	КратностьДокумента		, Объект.КратностьВзаиморасчетов); 
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ДокументыПоступленияДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДокументыПоступления.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ДатаПоступления, Документ, СтавкаНДС, Сумма, СуммаВзаиморасчетов, НДСВидОборота, НДСВидПоступления"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	ДанныеСтрокиТаблицы.Вставить("ВалютаДокумента"	, ВалютаРегламентированногоУчета);
	ДанныеСтрокиТаблицы.Вставить("ДатаДокумента"	, Объект.Дата);
	ДанныеСтрокиТаблицы.Вставить("Курс"				, Объект.КурсВзаиморасчетов);
	ДанныеСтрокиТаблицы.Вставить("Кратность"		, Объект.КратностьВзаиморасчетов);

	ДокументыПоступленияДокументПриИзмененииНаСервере(ДанныеСтрокиТаблицы);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
	РассчитатьСуммыПоступлений(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДокументыПоступленияДокументПриИзмененииНаСервере(ДанныеСтрокиТаблицы)
	ДокументПоступления = ДанныеСтрокиТаблицы.Документ;
	
	ДанныеСтрокиТаблицы.ДатаПоступления = ДокументПоступления.Дата;
	
	Если Не ЗначениеЗаполнено(ДокументПоступления) или ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		СуммаВзаиморасчетов = 0;
	Иначе
		СуммаВзаиморасчетов 	= ДокументПоступления.СуммаДокумента;	
	КонецЕсли;
	
	ДанныеСтрокиТаблицы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
	ДанныеСтрокиТаблицы.СтавкаНДС 			= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");	
	ДанныеСтрокиТаблицы.НДСВидОборота		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойВидОборота");	
	ДанныеСтрокиТаблицы.НДСВидПоступления 	= Справочники.ВидыПоступления.НДСЗаНерезидента;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДокументыПоступления.ТекущиеДанные;
	
	ПересчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	
	РасчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("УчитыватьНДС"		, Истина);
	СтруктураЗаполненияЦены.Вставить("ВалютаДокумента"	, Объект.ВалютаДокумента);
	СтруктураЗаполненияЦены.Вставить("Дата"				, Объект.Дата);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции

&НаКлиенте
Процедура ДокументыПоступленияСтавкаНДСПриИзменении(Элемент)
	РасчитатьСуммуНДСНаКлиенте(Элементы.ДокументыПоступления.ТекущиеДанные)
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти)
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);		
	СтрокаТабличнойЧасти.СуммаСНДС = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияСуммаНДСПриИзменении(Элемент)
	ТекущиеДанные 		 	= Элементы.ДокументыПоступления.ТекущиеДанные;
	СтавкаНДС 			 	= УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Сумма  	= ?(СтавкаНДС = 0, 0, ТекущиеДанные.СуммаНДС / СтавкаНДС * 100);
	ТекущиеДанные.СуммаСНДС = ТекущиеДанные.Сумма + ТекущиеДанные.СуммаНДС;
	ПересчитатьСуммуВзаиморасчетов(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ДокументыПоступления.ТекущиеДанные;
	РассчитатьСуммыПоступлений(СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти
