#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("ВидОперации");		
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Сумма");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("СуммаСНДС");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть ДокументыПоступления
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.ДатаПоступления; ДокументыПоступленияДатаПоступления");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.Документ; ДокументыПоступленияДокумент");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.Сумма; ДокументыПоступленияСумма");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.СуммаНДС; ДокументыПоступленияСуммаНДС");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.СтавкаНДС; ДокументыПоступленияСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.СуммаСНДС; ДокументыПоступленияСуммаСНДС");
		БлокируемыеРеквизиты.Добавить("ДокументыПоступления.СуммаВзаиморасчетов; ДокументыПоступленияСуммаВзаиморасчетов");
					
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДокумента

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт

	Объект.ВалютаДокумента 			= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СуммаКНачислению = Неопределено;
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
		Если ДокументОснование.Свойство("ДокументПоступления") Тогда
			СуммаКНачислению = ДокументОснование.СуммаКНачислению;
			ДокументОснование = ДокументОснование.ДокументПоступления;
		Иначе 
			Возврат
		КонецЕсли;
	КонецЕсли;	
	
	ВидОперацииДокумента = ДокументОснование.ВидОперации;
	Если ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента
		И  ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента
		И  ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента
		И  ВидОперацииДокумента <> Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС Тогда
			Возврат;
	КонецЕсли;		
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	Объект.ДокументОснование 		= ДокументОснование;
	Объект.ВалютаДокумента 			= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Объект.КурсВзаиморасчетов 		= 1;
	Объект.КратностьВзаиморасчетов 	= 1;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияНДСЗаНерезидента") Тогда
		ЗаполнитьПринятиеНДСКЗачету(Объект, ДокументОснование);
	Иначе	
		ЗаполнитьНачислениеНДС(Объект, ДокументОснование, СуммаКНачислению);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьНачислениеНДС(Объект, ДокументОснование, СуммаКНачислению)
	
	Объект.ВидОперации			= Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС;
	Объект.Дата					= КонецДня(ТекущаяДата());
	
	СтруктураКурсаОбъекта = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	Если ДокументОснование.ВалютаДокумента <> Объект.ВалютаДокумента Тогда
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		
		Объект.КурсВзаиморасчетов 		= СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов 	= СтруктураКурсаДокумента.Кратность;
		
	КонецЕсли;
	
	НоваяСтрокаДП					= Объект.ДокументыПоступления.Добавить();
	НоваяСтрокаДП.Документ			= ДокументОснование;
	НоваяСтрокаДП.ДатаПоступления	= ДокументОснование.Дата;
	
	Если Не ЗначениеЗаполнено(СуммаКНачислению) Тогда 
		
		СуммаДокумента 				= ДокументОснование.СуммаДокумента;
	
		Если ДокументОснование.ВалютаДокумента = Объект.ВалютаДокумента Тогда
			НоваяСтрокаДП.Сумма 				= СуммаДокумента;
			НоваяСтрокаДП.СуммаВзаиморасчетов 	= СуммаДокумента;
		Иначе
			
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(Объект);
			
			НоваяСтрокаДП.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента
					,ДокументОснование.ВалютаДокумента	, Объект.ВалютаДокумента 
		           	,Объект.КурсВзаиморасчетов			, СтруктураКурсаОбъекта.Курс
		           	,Объект.КратностьВзаиморасчетов		, СтруктураКурсаОбъекта.Кратность); 
			
			НоваяСтрокаДП.СуммаВзаиморасчетов   = СуммаДокумента;
		КонецЕсли;	
		
	Иначе
		
		НоваяСтрокаДП.Сумма = СуммаКНачислению;
		
		НоваяСтрокаДП.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКНачислению, 
				Объект.ВалютаДокумента			, ДокументОснование.ВалютаДокумента,
	           	СтруктураКурсаОбъекта.Курс		, Объект.КурсВзаиморасчетов,
	           	СтруктураКурсаОбъекта.Кратность	, Объект.КратностьВзаиморасчетов); 
		
	КонецЕсли;	
	
	НоваяСтрокаДП.СтавкаНДС 		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	НоваяСтрокаДП.НДСВидОборота		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойВидОборота");	
	НоваяСтрокаДП.НДСВидПоступления = Справочники.ВидыПоступления.НДСЗаНерезидента;
	
	НоваяСтрокаДП.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(НоваяСтрокаДП.Сумма,
														   Истина, 
														   Ложь,
														   УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрокаДП.СтавкаНДС));
														   
	НоваяСтрокаДП.СуммаСНДС = НоваяСтрокаДП.Сумма + НоваяСтрокаДП.СуммаНДС;													   
	
	Объект.СчетУчетаНДС = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента.СчетУчетаРасчетовСКонтрагентомБУ;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДС) Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНДСПоТаблицеДокументов(Объект, ПараметрыЗаполнения) Экспорт
	
	ТаблицаДокументовОснования = ПолучитьИзВременногоХранилища(ПараметрыЗаполнения.АдресВременногоХранилища);
	
	ДокументОснование = ТаблицаДокументовОснования[0].ДокументПоступления;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ВидОперации				= ПараметрыЗаполнения.ВидОперации;
	Объект.ДокументОснование 		= ДокументОснование;
	Объект.Дата						= КонецДня(ТекущаяДата());
	Объект.ВалютаДокумента 			= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураКурсаОбъекта = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.КурсВзаиморасчетов 		= СтруктураКурсаОбъекта.Курс;
	Объект.КратностьВзаиморасчетов 	= СтруктураКурсаОбъекта.Кратность;
	
	Если ДокументОснование.ВалютаДокумента <> Объект.ВалютаДокумента Тогда
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		
		Объект.КурсВзаиморасчетов 		= СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов 	= СтруктураКурсаДокумента.Кратность;
		
	КонецЕсли;
	
	ЕстьВидПоступления = ТаблицаДокументовОснования.Колонки.Найти("НДСВидПоступления") <> Неопределено;
	Для Каждого СтрокаТЧ из ТаблицаДокументовОснования Цикл
		НоваяСтрокаДП					= Объект.ДокументыПоступления.Добавить();
		НоваяСтрокаДП.Документ			= СтрокаТЧ.ДокументПоступления;
		НоваяСтрокаДП.ДатаПоступления	= СтрокаТЧ.ДатаПоступления;
		
		Если СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			НоваяСтрокаДП.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов; 
			НоваяСтрокаДП.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаДП.СуммаВзаиморасчетов
					,ДокументОснование.ВалютаДокумента	, Объект.ВалютаДокумента 
		           	,Объект.КурсВзаиморасчетов			, СтруктураКурсаОбъекта.Курс
		           	,Объект.КратностьВзаиморасчетов		, СтруктураКурсаОбъекта.Кратность); 
		Иначе 	
			НоваяСтрокаДП.Сумма = СтрокаТЧ.СуммаДокумента;
			НоваяСтрокаДП.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаДП.Сумма, 
					Объект.ВалютаДокумента			, ДокументОснование.ВалютаДокумента,
		           	СтруктураКурсаОбъекта.Курс		, Объект.КурсВзаиморасчетов,
		           	СтруктураКурсаОбъекта.Кратность	, Объект.КратностьВзаиморасчетов); 
			  
		КонецЕсли;
		  
		НоваяСтрокаДП.СтавкаНДС 		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		НоваяСтрокаДП.НДСВидОборота		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойВидОборота");	
		Если ЕстьВидПоступления И ЗначениеЗаполнено(СтрокаТЧ.НДСВидПоступления) Тогда
			НоваяСтрокаДП.НДСВидПоступления = СтрокаТЧ.НДСВидПоступления;
		Иначе
			НоваяСтрокаДП.НДСВидПоступления = Справочники.ВидыПоступления.НДСЗаНерезидента;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС 
		Тогда
			НоваяСтрокаДП.СуммаНДС 	= УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(НоваяСтрокаДП.Сумма,
															   Истина, 
															   Ложь,
														   	   УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрокаДП.СтавкаНДС));
		Иначе
			НоваяСтрокаДП.СуммаНДС = СтрокаТЧ.СуммаНДС;													   
		КонецЕсли;													   
		
		НоваяСтрокаДП.СуммаСНДС = НоваяСтрокаДП.Сумма + НоваяСтрокаДП.СуммаНДС;
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС Тогда
		
		Объект.СчетУчетаНДС = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента.СчетУчетаРасчетовСКонтрагентомБУ;
		
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДС) Тогда
			Объект.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		КонецЕсли;	
	Иначе
		Объект.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьПринятиеНДСКЗачету(Объект, ДокументОснование)
	
	Объект.ВидОперации				= Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.ПринятиеНДСКЗачету;
	
	ТаблицаДокументовПоступления	= ПодготовитьТаблицуДокументовПоступления(ДокументОснование);
	
	Объект.ДокументыПоступления.Загрузить(ТаблицаДокументовПоступления);
	
	Объект.СчетУчетаНДС 			= ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Объект.КурсВзаиморасчетов 		= ДокументОснование.КурсВзаиморасчетов;
	Объект.КратностьВзаиморасчетов 	= ДокументОснование.КратностьВзаиморасчетов;

КонецПроцедуры	

Функция ПодготовитьТаблицуДокументовПоступления(ДокументОснование)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.Документ КАК Документ,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.СтавкаНДС КАК СтавкаНДС,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.ДатаПоступления КАК ДатаПоступления,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.НДСВидОборота КАК НДСВидОборота,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.НДСВидПоступления КАК НДСВидПоступления
	             	  |ПОМЕСТИТЬ вт_ДокументыПоступления
	             	  |ИЗ
	             	  |	Документ.РегистрацияНДСЗаНерезидента.ДокументыПоступления КАК РегистрацияНДСЗаНерезидентаДокументыПоступления
	             	  |ГДЕ
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.Ссылка = &ДокументРегистрацияНДС
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.ДатаПоступления,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.Документ,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.СтавкаНДС,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.НДСВидОборота,
	             	  |	РегистрацияНДСЗаНерезидентаДокументыПоступления.НДСВидПоступления
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	НДСЗаНерезидентаОстатки.ДокументПоступления КАК ДокументПоступления,
	             	  |	СУММА(НДСЗаНерезидентаОстатки.СуммаНДСОстаток) КАК СуммаНДС,
	             	  |	СУММА(НДСЗаНерезидентаОстатки.СуммаБезНДСОстаток) КАК Сумма,
	             	  |	СУММА(ВЫРАЗИТЬ(НДСЗаНерезидентаОстатки.СуммаБезНДСОстаток * &КоэфициентКурса КАК ЧИСЛО(15, 2))) КАК СуммаВзаиморасчетов,
	             	  |	НДСЗаНерезидентаОстатки.ВидОперацииПоступления КАК ВидОперацииПоступления
	             	  |ПОМЕСТИТЬ вт_Остатки
	             	  |ИЗ
	             	  |	РегистрНакопления.НДСЗаНерезидента.Остатки(
	             	  |			,
	             	  |			ДокументПоступления В
	             	  |				(ВЫБРАТЬ
	             	  |					вт_ДокументыПоступления.Документ
	             	  |				ИЗ
	             	  |					вт_ДокументыПоступления КАК вт_ДокументыПоступления)) КАК НДСЗаНерезидентаОстатки
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	НДСЗаНерезидентаОстатки.ДокументПоступления,
	             	  |	НДСЗаНерезидентаОстатки.ВидОперацииПоступления
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	вт_ДокументыПоступления.ДатаПоступления КАК ДатаПоступления,
	             	  |	вт_ДокументыПоступления.Документ КАК Документ,
	             	  |	вт_ДокументыПоступления.СтавкаНДС КАК СтавкаНДС,
	             	  |	ЕСТЬNULL(вт_Остатки.СуммаНДС, 0) КАК СуммаНДС,
	             	  |	ЕСТЬNULL(вт_Остатки.Сумма, 0) КАК Сумма,
	             	  |	ЕСТЬNULL(вт_Остатки.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	             	  |	ЕСТЬNULL(вт_Остатки.Сумма, 0) + ЕСТЬNULL(вт_Остатки.СуммаНДС, 0) КАК СуммаСНДС,
	             	  |	вт_ДокументыПоступления.НДСВидОборота КАК НДСВидОборота,
	             	  |	вт_ДокументыПоступления.НДСВидПоступления КАК НДСВидПоступления
	             	  |ИЗ
	             	  |	вт_ДокументыПоступления КАК вт_ДокументыПоступления
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Остатки КАК вт_Остатки
	             	  |		ПО вт_ДокументыПоступления.Документ = вт_Остатки.ДокументПоступления
	             	  |			И вт_ДокументыПоступления.НДСВидПоступления = вт_Остатки.ВидОперацииПоступления";	
	
	Запрос.УстановитьПараметр("ДокументРегистрацияНДС"	, ДокументОснование);
	Запрос.УстановитьПараметр("КоэфициентКурса"			, ДокументОснование.КратностьВзаиморасчетов / ДокументОснование.КурсВзаиморасчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

#КонецОбласти

#Область ПроведениеДокумента	

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СчетУчетаНДС,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК ВидНалога,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСЗаНерезидента) КАК ВидНалогаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДСПринятие,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК ВидПлатежа
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РегистрацияНДСЗаНерезидента КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Комментарий,
	|	Реквизиты.ВидНалога,
	|	Реквизиты.ВидПлатежа
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаДокументыПоступления", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыПоступления.Ссылка,
	|	ДокументыПоступления.НомерСтроки,
	|	ДокументыПоступления.Сумма КАК СуммаБезНДС,
	|	ДокументыПоступления.Документ КАК ДокументПоступления,
	|	ДокументыПоступления.СтавкаНДС,
	|	ДокументыПоступления.СуммаНДС,
	|	ДокументыПоступления.НДСВидПоступления,
	|	ДокументыПоступления.НДСВидОборота
	|ПОМЕСТИТЬ ТаблицаДокументыПоступления
	|ИЗ
	|	Документ.РегистрацияНДСЗаНерезидента.ДокументыПоступления КАК ДокументыПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ДокументыПоступления.Ссылка = Реквизиты.Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыПоступления.НомерСтроки КАК НомерСтроки,
	|	ДокументыПоступления.СуммаНДС,
	|	ДокументыПоступления.СуммаНДС Как УплаченныйНДС,
	|	ДокументыПоступления.СтавкаНДС,
	|	ДокументыПоступления.СуммаБезНДС,
	|	ДокументыПоступления.ДокументПоступления,
	|	ДокументыПоступления.НДСВидПоступления как ВидОперацииПоступления,
	|	ДокументыПоступления.НДСВидОборота как ВидОборота,
	|	&Содержание КАК Содержание,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВидНалога,
	|	Реквизиты.ВидНалогаНДС,
	|	Реквизиты.ВидНалогаНДСПринятие,
	|	Реквизиты.ВидПлатежа,
	|	Реквизиты.ВидОперации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Типовой.НДСУплачиваемыйНалоговымАгентом)
	|		ИНАЧЕ Реквизиты.СчетУчетаНДС
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ Реквизиты.ВидНалога
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА ДокументыПоступления.ДокументПоступления
	|		ИНАЧЕ Реквизиты.ВидПлатежа
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА Реквизиты.СчетУчетаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Типовой.НДСУплачиваемыйНалоговымАгентом)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента)
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС)
	|			ТОГДА Реквизиты.ВидПлатежа
	|		ИНАЧЕ ДокументыПоступления.ДокументПоступления
	|	КОНЕЦ КАК КорСубконто2
	|ИЗ
	|	ТаблицаДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(ДокументыПоступления.СуммаНДС <> 0
	|			ИЛИ ДокументыПоступления.СуммаБезНДС <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт	
	ПараметрыПроведения = Новый Структура;
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"							, ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета"	, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст 		= ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		Налогоплательщик = Реквизиты.Организация;															
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик"		  , Налогоплательщик);	
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Содержание = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());
	Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Содержание,Реквизиты.ВидОперации);
	Запрос.УстановитьПараметр("Содержание", Содержание);					      
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Процедура ВыполнитьКонтрольНДСкЗачету(Отказ, ТаблицаНДС) Экспорт 
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументПоступления КАК Документ,
	|	ТаблицаДокументов.СуммаБезНДС КАК Сумма,
	|	ТаблицаДокументов.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ вт_ДокументыПоступления
	|ИЗ
	|	&ТаблицаНДС КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаНерезидентаОстатки.ДокументПоступления,
	|	НДСЗаНерезидентаОстатки.СуммаНДСОстаток КАК СуммаНДС,
	|	НДСЗаНерезидентаОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС
	|ПОМЕСТИТЬ вт_Остатки
	|ИЗ
	|	РегистрНакопления.НДСЗаНерезидента.Остатки(
	|			,
	|			ДокументПоступления В
	|				(ВЫБРАТЬ
	|					вт_ДокументыПоступления.Документ
	|				ИЗ
	|					вт_ДокументыПоступления КАК вт_ДокументыПоступления)) КАК НДСЗаНерезидентаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДокументыПоступления.Документ,
	|	вт_ДокументыПоступления.СуммаНДС - ЕСТЬNULL(вт_Остатки.СуммаНДС, 0) КАК ПривышениеСуммыНДС,
	|	вт_ДокументыПоступления.Сумма - ЕСТЬNULL(вт_Остатки.СуммаБезНДС, 0) КАК ПривышениеСуммыОборота
	|ПОМЕСТИТЬ вт_ТаблицаСумм
	|ИЗ
	|	вт_ДокументыПоступления КАК вт_ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Остатки КАК вт_Остатки
	|		ПО вт_ДокументыПоступления.Документ = вт_Остатки.ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ТаблицаСумм.Документ,
	|	ЕСТЬNULL(вт_ТаблицаСумм.ПривышениеСуммыНДС, 0) КАК ПривышениеСуммыНДС,
	|	ЕСТЬNULL(вт_ТаблицаСумм.ПривышениеСуммыОборота, 0) КАК ПривышениеСуммыОборота
	|ИЗ
	|	вт_ТаблицаСумм КАК вт_ТаблицаСумм
	|ГДЕ
	|	(вт_ТаблицаСумм.ПривышениеСуммыНДС > 0
	|			ИЛИ вт_ТаблицаСумм.ПривышениеСуммыОборота > 0)";	
	
	ТаблицаДляКонтроля = ТаблицаНДС.Скопировать();
	ТаблицаДляКонтроля.Свернуть("ДокументПоступления","СуммаБезНДС, СуммаНДС");
	Запрос.УстановитьПараметр("ТаблицаНДС"	, ТаблицаДляКонтроля);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаРезультата = Результат.Выбрать();
	
	ВалютаРеглУчета			= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		ТекстОшибки 		= НСтр("ru='%1 %2' ");
		ТекстПараметра1 	= "";
		ТекстПараметра2 	= "";
		
		Если ВыборкаРезультата.ПривышениеСуммыОборота > 0 Тогда
			ТекстПараметра1 = НСтр("ru='Сумма по документу %1  превышает ранее начисленную сумму на %2 %3;'" );
			ТекстПараметра1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПараметра1
			                        , ВыборкаРезультата.Документ
									, ВыборкаРезультата.ПривышениеСуммыОборота
									, ВалютаРеглУчета);
		КонецЕсли;
		
		Если ВыборкаРезультата.ПривышениеСуммыНДС > 0 Тогда
			ТекстПараметра2 = ?(ТекстПараметра1 <> "", Символы.ПС,"") + НСтр("ru='Сумма НДС к принятию в зачет по документу %1 превышает ранее начисленную сумму налога на %2 %3;' ");
			ТекстПараметра2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПараметра2
			                        , ВыборкаРезультата.Документ
									, ВыборкаРезультата.ПривышениеСуммыНДС
									, ВалютаРеглУчета);
		КонецЕсли;
	
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			ТекстПараметра1,
			ТекстПараметра2);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
		Отказ = Ложь;
			
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	
КонецПроцедуры

#КонецЕсли	
