&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


&НаКлиенте
Перем УИДЗамераЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	Иначе 
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
    ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьИнвентарныеНомераОС();
	УстановитьДоступностьСубконто();
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_МодернизацияОС", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		ОбработкаВыбораПодборЧленовКомиссииНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""модернизация ос"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, , );

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 И НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.ОС.Количество() > 0 Тогда 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаОбъектаМодернизацииНУПриИзменении(Элемент)

	СчетУчетаОбъектаМодернизацииНУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаОбъектаМодернизацииНУПриИзмененииНаСервере()
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоОбъектаМодернизацииНУ1", "СубконтоОбъектаМодернизацииНУ2", "СубконтоОбъектаМодернизацииНУ3");	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоОбъектаМодернизацииНУ1", "ЗаголовокСубконтоОбъектаМодернизацииНУ2", "ЗаголовокСубконтоОбъектаМодернизацииНУ3"); 		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетУчетаОбъектаМодернизацииНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОбъектаМодернизацииНУ", "СчетУчетаОбъектаМодернизацииНУ");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НазваниеСубконтоБУ1", "СубконтоОбъектаМодернизацииНУ1");
	СтруктураРеквизитов.Вставить("НазваниеСубконтоБУ2", "СубконтоОбъектаМодернизацииНУ2");
	СтруктураРеквизитов.Вставить("НазваниеСубконтоБУ3", "СубконтоОбъектаМодернизацииНУ3");
	СтруктураРеквизитов.Вставить("СубконтоБУ1", Объект.СубконтоОбъектаМодернизацииНУ1);
	СтруктураРеквизитов.Вставить("СубконтоБУ2", Объект.СубконтоОбъектаМодернизацииНУ2);
	СтруктураРеквизитов.Вставить("СубконтоБУ3", Объект.СубконтоОбъектаМодернизацииНУ3);	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, Объект.Организация, СтруктураРеквизитов);
	                                     
	ЗаполнитьСубконтоСчетаУчетаОбъектаМодернизацииЗначениямиПоУмолчанию();		
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМодернизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектМодернизации)Тогда
		ОбъектМодернизацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаОбъектаМодернизацииБУПриИзменении(Элемент)
	
	СчетУчетаОбъектаМодернизацииБУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоОбъектаМодернизацииНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СубконтоНачалоВыбора(Элемент, "СубконтоОбъектаМодернизацииНУ", 1, "СчетУчетаОбъектаМодернизацииНУ", Объект, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоОбъектаМодернизацииНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоОбъектаМодернизацииНУ", 2, "СчетУчетаОбъектаМодернизацииНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоОбъектаМодернизацииНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоОбъектаМодернизацииНУ", 3, "СчетУчетаОбъектаМодернизацииНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	ОСОсновноеСредствоПриИзмененииНаСервере(Элементы.ОС.ТекущаяСтрока);	
КонецПроцедуры

&НаСервере
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.ОС.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		ТекущаяСтрока.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ТекущаяСтрока.ОсновноеСредство, Объект.Организация, Объект.Дата);
		ТекущаяСтрока.ИнвентарныйНомер = СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС = Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;
	
	Документы.МодернизацияОС.ЗаполнитьРеквизитыНалоговогоУчетаВСтрокеТабличнойЧасти(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССчетНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "ОС");	
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ОССчетНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССубконтоНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОССубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  1, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  2, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  3, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ОС.ТекущиеДанные;
	Если (ДанныеСтроки.СрокПолезногоИспользованияБУ - ДанныеСтроки.ФактСрокИспользованияБУ)<> 0 Тогда
		ДанныеСтроки.КоэффициентАмортизацииБУ = Окр((12/(ДанныеСтроки.СрокПолезногоИспользованияБУ - ДанныеСтроки.ФактСрокИспользованияБУ)) * 100, 2);	
	Иначе
		ДанныеСтроки.КоэффициентАмортизацииБУ = 0;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОСФактСрокИспользованияБУПриИзменении(Элемент)
	
	ОССрокПолезногоИспользованияБУПриИзменении(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	                   
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;
	
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимость(Команда)
	
	Отказ = Ложь;
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтруктурноеПодразделениеОрганизация", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Объект.ОбъектМодернизации)) Тогда
		ТекстСообщения = НСтр("ru='Не выбран объект модернизации'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОбъектМодернизации", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Объект.СчетУчетаОбъектаМодернизацииБУ)) Тогда
		ТекстСообщения = НСтр("ru='Не выбран счет бухгалтерского учета объекта модернизации'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СчетУчетаОбъектаМодернизацииБУ", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда 
		ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе! Отменить проведение?'");
		Режим 		 = РежимДиалогаВопрос.ДаНет;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Процедура", "РассчитатьСтоимостьНаСервере"); 
		Оповещение 	 = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоОтменеПроведения", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе 
		
		РассчитатьСтоимостьНаСервере();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиКомплекта(Команда)
	
	ЗаполнитьДаннымиКомплектаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСписка(Команда)
	
	Отказ = Ложь;
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтруктурноеПодразделениеОрганизация", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Отсутствуют данные в табличной части для заполнения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОС", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда 
		ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе! Отменить проведение?'");
		Режим 		 = РежимДиалогаВопрос.ДаНет;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Процедура", "ЗаполнитьДляСпискаНаСервере"); 
		Оповещение 	 = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоОтменеПроведения", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе 
		
		ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		ЗаполнитьДляСпискаНаКлиенте();

	КонецЕсли;

	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru = 'ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям");
	
    ПоказыватьВДокументахСчетаУчета = Истина;                            
    Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = НЕ НастройкиПользователя.УчетПоВсемОрганизациям;
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
			
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоОбъектаМодернизацииНУ1", "СубконтоОбъектаМодернизацииНУ2", "СубконтоОбъектаМодернизацииНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоОбъектаМодернизацииНУ1", "ЗаголовокСубконтоОбъектаМодернизацииНУ2", "ЗаголовокСубконтоОбъектаМодернизацииНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетУчетаОбъектаМодернизацииНУ, ПоляФормы, ЗаголовкиПолей);

	УстановитьДоступностьСубконто();

	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
			
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ГруппаОбъектМодернизацииПравая.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	Элементы.ОССчетНУ.Видимость						  = Форма.ВидимостьНалоговогоУчета;
	Элементы.ОСГруппаСубконтоСчетаНУ.Видимость		  = Форма.ВидимостьНалоговогоУчета;
    
    Элементы.СчетУчетаОбъектаМодернизацииБУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
																			
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	УстановитьФункциональныеОпцииФормы();
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных с ТЧ, то не необходимости проверять и очищать некорректные значения субконто
	Если Объект.ОС.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетов = Новый СписокЗначений;
	
	// ТЧ ОС
	СписокАналитикиСчетов.Добавить("НУ"); // СчетНУ
	СтруктураРеквизтов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.ОС, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизтов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей);
	
	ТекстСообщения = НСтр("ru='Значения в полях ""Субконто"" не соответствующие выбранной организации были очищены.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	
КонецПроцедуры

// Заполняет вычисляемые колонки в табличной части ОС:
// - ОстСрокИспользованияБУ, 
// - ОстОбъемПродукцииРаботБУ, 
// - ОстСтоимостьБУ,
// - СтоимостьДляВычисленияАмортизацииБУ.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(Форма)
	
	Для Каждого ТекущаяСтрока Из Форма.Объект.ОС Цикл
		
		АмортизацияЗаМесяц = ?(Форма.ПрименятьПараметрыАмортизацииВТекМесяце, 0, ТекущаяСтрока.АмортизацияЗаМесяцБУ);
		
		ТекущаяСтрока.ОстСтоимостьБУ = ТекущаяСтрока.СтоимостьБУ + ТекущаяСтрока.СуммаМодернизацииБУ - ТекущаяСтрока.АмортизацияБУ - АмортизацияЗаМесяц;
		ТекущаяСтрока.СтоимостьДляВычисленияАмортизацииБУ = ТекущаяСтрока.ОстСтоимостьБУ - ТекущаяСтрока.ЛиквидационнаяСтоимостьБУ;		
		ТекущаяСтрока.ОстСрокИспользованияБУ = ТекущаяСтрока.СрокПолезногоИспользованияБУ - ТекущаяСтрока.ФактСрокИспользованияБУ;		
		ТекущаяСтрока.ОстОбъемПродукцииРаботБУ = ТекущаяСтрока.ОбъемПродукцииРаботБУ - ТекущаяСтрока.ФактОбъемПродукцииРаботБУ;
		
	КонецЦикла;
	
КонецПроцедуры

// Прочие служебные процедуры и функции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПрименятьПараметрыАмортизацииВТекМесяце 	 = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 Тогда 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();
					
	ТаблицаНомеров = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьТаблицуИнвентарныхНомеровОС(
		ТаблицаОС,
		Объект.Организация,
		Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчетаНУ, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица = Ложь)
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	Если ИмяТабличнойЧасти = "" Тогда
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
	Иначе
		
		ТекущаяСтрока = Форма.Элементы.ОС.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Объект.ОС.НайтиПоИдентификатору(ТекущаяСтрока);
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ОССубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОССчетНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоНУ1, СтрокаТабличнойЧасти.СубконтоНУ2, СтрокаТабличнойЧасти.СубконтоНУ3));
															
	СчетаУчета = Новый Структура("СчетНУ, СубконтоНУ1,
								 |СубконтоНУ2, СубконтоНУ3", СтрокаТабличнойЧасти.СчетНУ,
								 СтрокаТабличнойЧасти.СубконтоНУ1, СтрокаТабличнойЧасти.СубконтоНУ2,
								 СтрокаТабличнойЧасти.СубконтоНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоНУ", "СчетНУ", "СубконтоНУ");

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, "ОС");
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлемента = "Субконто";
	ИмяСчета    = "Счет";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлемента + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура ОбъектМодернизацииПриИзмененииНаСервере()
	
	СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(Объект.Организация, 
																			Объект.ОбъектМодернизации, Объект.Дата);
																			
																			
	Объект.СчетУчетаОбъектаМодернизацииБУ = СчетаУчета.СчетУчетаЗатратПоМодернизацииБУ;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаОбъектаМодернизацииБУ) Тогда
		Объект.СчетУчетаОбъектаМодернизацииБУ = ПланыСчетов.Типовой.КапитальныйРемонтОС;
	КонецЕсли;
	
	//если ОС не было выбранно в таб.части, то добавляем его как модернизируемое по-умолчанию
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОсновноеСредство", Объект.ОбъектМодернизации);
	НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);

	Если НайденныеСтроки.Количество() = 0 Тогда	
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = Объект.ОбъектМодернизации;
		ОСОсновноеСредствоПриИзмененииНаСервере(НоваяСтрока.ПолучитьИдентификатор());
		ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Объект.СчетУчетаОбъектаМодернизацииБУ) Тогда
		Объект.СчетУчетаОбъектаМодернизацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаОбъектаМодернизацииБУ));
		
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоОбъектаМодернизацииНУ1", "СубконтоОбъектаМодернизацииНУ2", "СубконтоОбъектаМодернизацииНУ3");
	
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ЗаголовокСубконтоОбъектаМодернизацииНУ1", "ЗаголовокСубконтоОбъектаМодернизацииНУ2", "ЗаголовокСубконтоОбъектаМодернизацииНУ3"); 
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетУчетаОбъектаМодернизацииНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаОбъектаМодернизацииБУПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаОбъектаМодернизацииБУ) Тогда
		Объект.СчетУчетаОбъектаМодернизацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаОбъектаМодернизацииБУ));
		
		ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоОбъектаМодернизацииНУ1", "СубконтоОбъектаМодернизацииНУ2", "СубконтоОбъектаМодернизацииНУ3");
	
		ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
			"ЗаголовокСубконтоОбъектаМодернизацииНУ1", "ЗаголовокСубконтоОбъектаМодернизацииНУ2", "ЗаголовокСубконтоОбъектаМодернизацииНУ3"); 
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетУчетаОбъектаМодернизацииНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоОтменеПроведения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда

		Запись = Новый Структура;
		Запись.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	
		ЭтотОбъект.Записать(Запись);
		
		Если Параметры.Процедура = "РассчитатьСтоимостьНаСервере" Тогда 
			
			РассчитатьСтоимостьНаСервере();
			
		ИначеЕсли Параметры.Процедура = "ЗаполнитьДляСпискаНаСервере" Тогда 
			
			ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

			ЗаполнитьДляСпискаНаКлиенте();
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьНаСервере()
	
	СтруктураСтоимости = УправлениеВнеоборотнымиАктивамиСервер.РасчитатьСтоимостьОбъектаМодернизации(Истина, ,
															   Объект.СчетУчетаОбъектаМодернизацииБУ, , 
															   Объект.ОбъектМодернизации,Объект.Организация,КонецДня(Объект.Дата));

	Объект.СтоимостьМодернизацииБУ = СтруктураСтоимости.СтоимостьБУ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УправлениеВнеоборотнымиАктивамиСервер.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиКомплектаНаСервере()
	
	Документы.МодернизацияОС.ЗаполнитьТабличнуюЧастьДаннымиКомплекта(Объект);	
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаНаКлиенте()
	
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""модернизация ос"" (заполнение)");
		
	РезультатВыполнения = ЗаполнитьДляСпискаНаСервере();
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		и НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДляСпискаНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дата",                     Объект.Дата);
	СтруктураПараметров.Вставить("Организация",              Объект.Организация);
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("СтоимостьМодернизацииБУ",  Объект.СтоимостьМодернизацииБУ);
	СтруктураПараметров.Вставить("ОС",                       Объект.ОС.Выгрузить());
	СтруктураПараметров.Вставить("СписокОС",                 Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	СтруктураПараметров.Вставить("ПрименятьПараметрыАмортизацииВТекМесяце",      ПрименятьПараметрыАмортизацииВТекМесяце);
	СтруктураПараметров.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	НаименованиеЗадания = "ЗаполнитьДляСпискаОС";
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.МодернизацияОС.ЗаполнитьТабличнуюЧастьДляСпискаОС", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьИнвентарныеНомераОС();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство - %1 уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "ОС[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли;
		
		ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор());		
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборЧленовКомиссииНаСервере(МассивЧленовКомиссии)
	
	Для Каждого ЧленКомиссии Из МассивЧленовКомиссии Цикл
		
		ПараметрыОтбора = Новый Структура("ФизЛицо", ЧленКомиссии);
		МассивНайденыхЧленовКомиссии = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденыхЧленовКомиссии.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
			НоваяСтрока.ФизЛицо = ЧленКомиссии;
			
			Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
				НоваяСтрока.Председатель = Истина;
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьСубконтоСчетаУчетаОбъектаМодернизацииЗначениямиПоУмолчанию()
	
	Для Счетчик = 1 по 3 Цикл			
		Если Объект.СчетУчетаОбъектаМодернизацииНУ.ВидыСубконто.Количество() >= Счетчик Тогда
			Если Объект.СчетУчетаОбъектаМодернизацииНУ.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда						
				Объект["СубконтоОбъектаМодернизацииНУ" + Счетчик] = Объект.ОбъектМодернизации;						
			КонецЕсли;
			Если Объект.СчетУчетаОбъектаМодернизацииНУ.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ВидыРемонтаВА")) Тогда						
				Объект["СубконтоОбъектаМодернизацииНУ" + Счетчик] = Перечисления.ВидыРемонтаВА.Капитальный;						
			КонецЕсли;			
			Если Объект.СчетУчетаОбъектаМодернизацииНУ.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ВидыДвиженияСтоимостиФА")) Тогда						
				Объект["СубконтоОбъектаМодернизацииНУ" + Счетчик] = Перечисления.ВидыДвиженияСтоимостиФА.Выбытие;						
			КонецЕсли;					
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС.Загрузить(СтруктураДанных.ОС);
	
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("АмортизацияБУ");
	СтруктураРеквизитов.Вставить("АмортизацияЗаМесяцБУ");
	СтруктураРеквизитов.Вставить("КоэффициентАмортизацииБУ");
	СтруктураРеквизитов.Вставить("КоэффициентУскоренияБУ");
	СтруктураРеквизитов.Вставить("ОбъемПродукцииРаботБУ");
	СтруктураРеквизитов.Вставить("СрокПолезногоИспользованияБУ");
	СтруктураРеквизитов.Вставить("СтоимостьБУ");
	СтруктураРеквизитов.Вставить("СуммаМодернизацииБУ");
	СтруктураРеквизитов.Вставить("ФактОбъемПродукцииРаботБУ");
	СтруктураРеквизитов.Вставить("ФактСрокИспользованияБУ");
	СтруктураРеквизитов.Вставить("СчетНУ");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьВычисляемыеКолонкиТабличнойЧастиОС(ЭтаФорма);		
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры