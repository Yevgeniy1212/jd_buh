#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьРеквизитыНалоговогоУчетаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетНУ) Тогда
		Возврат;
	КонецЕсли;	
																			
	СтрокаТабличнойЧасти.СчетНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаТабличнойЧасти.ОсновноеСредство, ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
	Если НЕ СтрокаТабличнойЧасти.СчетНУ.Пустая() Тогда
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетНУ, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		
		Для Счетчик = 1 По СтрокаТабличнойЧасти.СчетНУ.ВидыСубконто.Количество() Цикл
			
			// Проставим значения по умолчанию
			ТипВидСубконто = СтрокаТабличнойЧасти.СчетНУ.ВидыСубконто[Счетчик-1].ВидСубконто.ТипЗначения;
			
			Если ТипВидСубконто.СодержитТип(Типзнч(СтрокаТабличнойЧасти.ОсновноеСредство)) Тогда
				СтрокаТабличнойЧасти["СубконтоНУ" + Счетчик] = СтрокаТабличнойЧасти.ОсновноеСредство;
			КонецЕсли;	
			
			Если ТипВидСубконто.СодержитТип(Тип("ПеречислениеСсылка.ВидыДвиженияСтоимостиФА")) Тогда
				СтрокаТабличнойЧасти["СубконтоНУ" + Счетчик] = Перечисления.ВидыДвиженияСтоимостиФА.Поступление;
			КонецЕсли;	
			
			Если ТипВидСубконто.СодержитТип(Тип("ПеречислениеСсылка.ВидыРемонтаВА")) Тогда
				СтрокаТабличнойЧасти["СубконтоНУ" + Счетчик] = Перечисления.ВидыРемонтаВА.Капитальный;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧастьДляСпискаОС(СтруктураПараметров, АдресХранилища) Экспорт 
		
	ОС = СтруктураПараметров.ОС;
	СписокОС = СтруктураПараметров.СписокОС;
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();
	
	Дата = СтруктураПараметров.Дата;
	Организация = СтруктураПараметров.Организация;
	СтруктурноеПодразделение = СтруктураПараметров.СтруктурноеПодразделение;
	СтоимостьМодернизацииБУ  = СтруктураПараметров.СтоимостьМодернизацииБУ;
	ПрименятьПараметрыАмортизацииВТекМесяце = СтруктураПараметров.ПрименятьПараметрыАмортизацииВТекМесяце;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = СтруктураПараметров.ПоддержкаРаботыСоСтруктурнымиПодразделениями;

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("СписокОС"    , СписокОС);
	Запрос.УстановитьПараметр("Период"	    , Дата);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("СубконтоОС"	, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение  = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
		УсловиеСтруктурноеПодразделение1 = " И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение"
	Иначе
		УсловиеСтруктурноеПодразделение  = "";		
	КонецЕсли;
	
	ПериодОпределенияФактВыработки = ?(ПрименятьПараметрыАмортизацииВТекМесяце, ДобавитьМесяц(КонецМесяца(Дата), -1), КонецМесяца(Дата)); 
	Запрос.УстановитьПараметр("ПериодОпределенияФактВыработки", ПериодОпределенияФактВыработки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ((ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ) ТОГДА ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство 
	|   ИНАЧЕ NULL 
	|	КОНЕЦ КАК ОсновноеСредство,
	|	
	|   СтоимостьОС_БУ.СуммаОстатокДт КАК СтоимостьБУ,
	|	АмортизацияОС_БУ.СуммаОстатокКт КАК АмортизацияБУ,
	|	ВыработкаОСОбороты.КоличествоОборот КАК Количество,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимостьБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &ПериодОпределенияФактВыработки , , ОсновноеСредство В (&СписокОС)) КАК ВыработкаОСОбороты
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация " + УсловиеСтруктурноеПодразделение + " И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&Период, Организация = &Организация " + УсловиеСтруктурноеПодразделение + " И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&Период, , &СубконтоОС, Организация = &Организация " + УсловиеСтруктурноеПодразделение + " И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
	|				ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонецПериода, , &СубконтоОС, Организация = &Организация " + УсловиеСтруктурноеПодразделение + " И Субконто1 В (&СписокОС)) КАК АмортизацияОС_БУ
	|				ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ПО ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|
	|ГДЕ
	|	(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация "+ УсловиеСтруктурноеПодразделение1 +")";
	

	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СостояниеОС", Перечисления.ВидыСостоянийОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС_БУ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство В(&СписокОС) И
	|	СостоянияОСОрганизаций.Организация = &Организация " + УсловиеСтруктурноеПодразделение + " И
	|	СостоянияОСОрганизаций.Состояние = &СостояниеОС";

	ТЗСрокБУ = Запрос.Выполнить().Выгрузить();

	Если Не ПрименятьПараметрыАмортизацииВТекМесяце Тогда
		ТаблицаАмортизацииБух = УчетОС.ПодготовитьТаблицуАмортизацияОС(Дата, Организация, СтруктурноеПодразделение, СписокОС);
	КонецЕсли;	

	Для каждого Строка Из ОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");

		Если СтрокаТЗБУ = Неопределено Тогда

			Строка.СрокПолезногоИспользованияБУ = 0;
			Строка.ФактСрокИспользованияБУ 		= 0;
			Строка.ОбъемПродукцииРаботБУ 		= 0;
			Строка.ФактОбъемПродукцииРаботБУ 	= 0;
			Строка.СтоимостьБУ 					= 0;
			Строка.СуммаМодернизацииБУ 			= 0;
			Строка.АмортизацияБУ 				= 0;
			Строка.АмортизацияЗаМесяцБУ 		= 0;
			Строка.КоэффициентАмортизацииБУ 	= 0;
			Строка.КоэффициентУскоренияБУ 		= 0;
			Строка.ЛиквидационнаяСтоимостьБУ	= 0;
		Иначе

			Строка.СрокПолезногоИспользованияБУ = СтрокаТЗБУ.СрокПолезногоИспользованияБУ;
			СтрокаСрокБУ = ТЗСрокБУ.Найти(Строка.ОсновноеСредство, "ОС_БУ");
			
			Если СтрокаСрокБУ = Неопределено Тогда
				Строка.ФактСрокИспользованияБУ = 0;
			Иначе
				Строка.ФактСрокИспользованияБУ = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьФактическийСрокИспользования(СтрокаСрокБУ.ДатаБУ, Дата);
    		КонецЕсли;

			Строка.ОбъемПродукцииРаботБУ     = СтрокаТЗБУ.ОбъемПродукцииРаботБУ;
			Строка.ФактОбъемПродукцииРаботБУ = СтрокаТЗБУ.Количество;
			Строка.СтоимостьБУ               = СтрокаТЗБУ.СтоимостьБУ;
			Строка.СуммаМодернизацииБУ       = ?(ОС.Количество() <> 0, СтоимостьМодернизацииБУ / ОС.Количество(), 0);
			Строка.АмортизацияБУ             = СтрокаТЗБУ.АмортизацияБУ;
			Строка.ЛиквидационнаяСтоимостьБУ = СтрокаТЗБУ.ЛиквидационнаяСтоимостьБУ;
						
			Если Не ПрименятьПараметрыАмортизацииВТекМесяце Тогда
				СтрокаТаблицаАмортизацииБух  = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство, "ОС");
				Строка.АмортизацияЗаМесяцБУ  = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.Бух);
			КонецЕсли;
			
			Строка.КоэффициентУскоренияБУ    = СтрокаТЗБУ.КоэффициентУскоренияБУ;
			
			Если (Строка.СрокПолезногоИспользованияБУ  - Строка.ФактСрокИспользованияБУ) <> 0 Тогда
				Строка.КоэффициентАмортизацииБУ = Окр((12/(Строка.СрокПолезногоИспользованияБУ - Строка.ФактСрокИспользованияБУ)) * 100, 2);	
			Иначе
				Строка.КоэффициентАмортизацииБУ = 0;	
			КонецЕсли;	
			
		КонецЕсли;		
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"ОсновноеСредство,
			|СчетНУ,
			|СубконтоНУ1,
			|СубконтоНУ2,
			|СубконтоНУ3,
			|ВидСубконтоНУ1,
			|ВидСубконтоНУ2,
			|ВидСубконтоНУ3,
			|СубконтоНУ1Доступность,
			|СубконтоНУ2Доступность,
			|СубконтоНУ3Доступность");

		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Строка);

		ЗаполнитьРеквизитыНалоговогоУчетаВСтрокеТабличнойЧасти(ДанныеСтрокиТаблицы, СтруктураПараметров);
	
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтрокиТаблицы);
			
	КонецЦикла;

	НераспределеннаяСтоимость = Окр(СтоимостьМодернизацииБУ - ОС.Итог("СуммаМодернизацииБУ"), 2);
	Если (НераспределеннаяСтоимость <> 0) Тогда
		Строка.СуммаМодернизацииБУ = Строка.СуммаМодернизацииБУ + НераспределеннаяСтоимость;
	КонецЕсли;
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ОС", ОС);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДаннымиКомплекта(Объект) Экспорт 
		
	//заполняем табличную часть документа "текущим" состоянием комплекта Родительского ОС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РодительскоеОС", Объект.ОбъектМодернизации);
	Запрос.УстановитьПараметр("ДатаДок",        Объект.Дата);
	
	Запрос.Текст ="ВЫБРАТЬ
	              |	СоставОССрезПоследних.ОсновноеСредство,
	              |	СоставОССрезПоследних.СостояниеВСоставеОС
	              |ИЗ
	              |	РегистрСведений.СоставОС.СрезПоследних(&ДатаДок, ВСоставеОС = &РодительскоеОС) КАК СоставОССрезПоследних";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 0  Тогда 
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			
			СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.ОсновноеСредство;
			
			ДанныеСтрокиТаблицы = Новый Структура(
				"ОсновноеСредство,
				|СчетНУ,
				|СубконтоНУ1,
				|СубконтоНУ2,
				|СубконтоНУ3,
				|СубконтоНУ1Доступность,
				|СубконтоНУ2Доступность,
				|СубконтоНУ3Доступность,
				|ВидСубконтоНУ1,
				|ВидСубконтоНУ2,
				|ВидСубконтоНУ3");
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
			ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
	
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
			ЗаполнитьРеквизитыНалоговогоУчетаВСтрокеТабличнойЧасти(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);

		КонецЦикла;
	Иначе
		ТекстСообщения = НСтр("ru = 'Данные по комплектации указанного родительского ОС отсутствуют'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// А-5 (Акт приемки-передачи отремонтированных активов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьА5";
	КомандаПечати.Представление = НСтр("ru = 'А-5 (Акт приемки-передачи отремонтированных активов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьА5";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// А-5 (Акт приемки-передачи отремонтированных активов)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьА5") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьА5",
			НСтр("ru = 'А-5 (Акт приемки-передачи отремонтированных активов)'"),
			ПечатьА5(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ8");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьА5(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запрос для реквизитов шапки
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("Ссылка", МассивОбъектов);
	ЗапросШапка.Текст = 
	"ВЫБРАТЬ
	|	МодернизацияОС.Дата КАК ДатаДок,
	|	МодернизацияОС.Номер КАК НомерДок,
	|	МодернизацияОС.Организация КАК Организация,
	|	МодернизацияОС.СтруктурноеПодразделение,
	|	МодернизацияОС.Ссылка КАК Ссылка,
	|	МодернизацияОС.ИнвентаризационнаяКомиссия.(
	|		Ссылка,
	|		НомерСтроки,
	|		ФизЛицо,
	|		Председатель
	|	)
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|ГДЕ
	|	МодернизацияОС.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ШапкаДокумента = ЗапросШапка.Выполнить().Выбрать();
	
	//Запрос для заполнения таблицы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПОДСТРОКА(МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер, 1, 250) КАК ЗаводскойНомер,
	|	МодернизацияОСОС.СтоимостьБУ - МодернизацияОСОС.АмортизацияБУ - МодернизацияОСОС.АмортизацияЗаМесяцБУ КАК БалансоваяСтоимость,
	|	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаМодернизации,
	|	МодернизацияОСОС.СтоимостьБУ + МодернизацияОСОС.СуммаМодернизацииБУ КАК СтоимостьПослеМодернизации,
	|	ВЫРАЗИТЬ(МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеОС,
	|	МодернизацияОСОС.Ссылка КАК Ссылка,
	|	МодернизацияОСОС.НомерСтроки КАК НомерСтроки,
	|	МодернизацияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент 				   	= Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб		   	= Истина;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху		    = 0;
	ТабДокумент.ПолеСнизу 			= 0;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "МодернизацияОС_А5";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МодернизацияОС.ПФ_MXL_А5");
	
	Пока ШапкаДокумента.Следующий() Цикл
		
		// получим области макета
		Шапка 				= Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
		Комиссия 			= Макет.ПолучитьОбласть("СоставКомиссии");	
		ЗаголовокКомиссии	= Макет.ПолучитьОбласть("ЗаголовокКомиссии");	
		ОССдал 				= Макет.ПолучитьОбласть("ОССдал");	
		МОЛ 				= Макет.ПолучитьОбласть("МОЛ");	
		ПодписьГлБухгалтера = Макет.ПолучитьОбласть("ПодписьГлБухгалтера");	
		
		ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокОС = Неопределено;
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
		
		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.ДатаДок);
		Руководители		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.ДатаДок);
		
		// заполняем и выводим шапку
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.ДатаДок, "ru");
		Шапка.Параметры.НомерДок 				 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.НомерДок, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"); 
		
		
		
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда	
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.ДатаДок);
			Шапка.Параметры.Должность                = ДанныеПредседателя.Должность;
			Шапка.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		Иначе
			Шапка.Параметры.Должность                = "";
			Шапка.Параметры.РасшифровкаПодписи       = "";
		КонецЕсли;
		
		Стр 				 = """_____"""+"________________________ 20_____"+НСтр("ru = 'года'");
		Шапка.Параметры.Дата = ?(ЗначениеЗаполнено(ШапкаДокумента.ДатаДок), Формат(ШапкаДокумента.ДатаДок, "ДФ=""дд ММММ гггг 'года'"""), Стр);
		
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии:'"));
		
		ТабДокумент.Вывести(Шапка);
		
		// заполнение и вывод заголовка
		ЗаголовокТаблицы.Параметры.Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		СписокОСДокумента = Новый ТаблицаЗначений;         	
		СписокОСДокумента.Колонки.Добавить("ОсновноеСредство",,"ОсновноеСредство");
		
		// табличная часть
		НомерПоПорядку = 0;
		Если ВыборкаСтрокОС <> Неопределено Тогда
			Пока ВыборкаСтрокОС.Следующий() Цикл
				НомерПоПорядку = НомерПоПорядку + 1;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;	
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокОС);  
				СтрокаТаблицы.Параметры.ЗаводскойНомер 	 = СокрЛП(ВыборкаСтрокОС.ЗаводскойНомер);
				СтрокаТаблицы.Параметры.НаименованиеОС 	 = СокрЛП(ВыборкаСтрокОС.НаименованиеОС);
				СтрокаТаблицы.Параметры.Номер 		   	 = НомерПоПорядку;
				СтрокаТаблицы.Параметры.ИнвентарныйНомер = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, ШапкаДокумента.ДатаДок).ИнвентарныйНомер;
				
				Стр = СписокОСДокумента.Добавить();
				Стр.ОсновноеСредство = ВыборкаСтрокОС.ОсновноеСредство;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
			КонецЦикла;	
		КонецЕсли;
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ЗаголовокКомиссии);
		
		
		// Выведем подпись председателя инвентаризационной комиссии
		//ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		//
		//Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		//	
		//	ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.ДатаДок);
		//		
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		//	Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		//	
		//Иначе
		//	
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = "";
		//	Комиссия.Параметры.РасшифровкаПодписи       = "";
		//	
		//КонецЕсли;
		//
		//ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокЧленовКомиссии, ШапкаДокумента.ДатаДок);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		
		КонецЕсли;
 		ОССдал.Параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.ДатаДок,"ДЛФ=DD"),"г.","года"); 
		ТабДокумент.Вывести(ОССдал);
		
		// Получим список МОЛ на основании списка ОС
		СписокОС = СписокОСДокумента.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
		Запрос.УстановитьПараметр("Организация",      ШапкаДокумента.Организация);
		Запрос.УстановитьПараметр("Дата",             ШапкаДокумента.ДатаДок);
		
		Запрос.Текст =
		"ВЫБРАТЬ   РАЗЛИЧНЫЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
		
		Результат = Запрос.Выполнить().Выгрузить();
		СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
		
		ДанныеМОЛ 		  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.ДатаДок);
		ВыводитьЗаголовок = Истина;
		
		Для Каждого СтрокаМОЛ ИЗ ДанныеМОЛ Цикл
			МОЛ.Параметры.Принял	 = ?(ВыводитьЗаголовок, НСтр("ru = 'Принял:'"), "");
			МОЛ.Параметры.МП 		 = ?(ВыводитьЗаголовок, НСтр("ru = 'М.П.'"), "");
			МОЛ.Параметры.ДатаПринял = ?(ВыводитьЗаголовок, СтрЗаменить(Формат(ШапкаДокумента.ДатаДок,"ДЛФ=DD"),"г.","года"),"");
			ВыводитьЗаголовок		 = Ложь;
			
			Мол.Параметры.Должность			 = СтрокаМОЛ.Должность;
			МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
			
			ТабДокумент.Вывести(МОЛ);
		КонецЦикла;	
		
		ПодписьГлБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
		ПодписьГлБухгалтера.Параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.ДатаДок,"ДЛФ=DD"),"г.","года");
		ТабДокумент.Вывести(ПодписьГлБухгалтера);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции 		

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
	ВедетсяАналитУчетОсПоМОЛ 			= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедетсяАналитУчетОсПоПодразделениям", 			 ВедетсяАналитУчетОсПоПодразделениям);
	Реквизиты.Вставить("ВедетсяАналитУчетОсПоМОЛ", 					 	 ВедетсяАналитУчетОсПоМОЛ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоПодразделениям			  , "ВедетсяАналитУчетОсПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоМОЛ					  , "ВедетсяАналитУчетОсПоМОЛ");
	
	Запрос.УстановитьПараметр("СинонимОС"	 , НСтр("ru = 'ОС'"));
	Запрос.УстановитьПараметр("Организация"	 , Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Реквизиты.Период);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаМодернизацияОС(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	""МодернизацияОС"" КАК ВидДокумента,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.ОбъектМодернизации КАК ОбъектМодернизации,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.СтоимостьМодернизацииБУ КАК СтоимостьМодернизацииБУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ1 КАК СубконтоОбъектаМодернизацииНУ1,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ2 КАК СубконтоОбъектаМодернизацииНУ2,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ3 КАК СубконтоОбъектаМодернизацииНУ3,
	|	Реквизиты.СчетУчетаОбъектаМодернизацииБУ КАК СчетУчетаОбъектаМодернизацииБУ,
	|	Реквизиты.СчетУчетаОбъектаМодернизацииНУ КАК СчетУчетаОбъектаМодернизацииНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоМОЛ
	|
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.МодернизацияОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.ОбъектМодернизации КАК ОбъектМодернизации,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.СтоимостьМодернизацииБУ КАК СтоимостьМодернизацииБУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ1 КАК СубконтоОбъектаМодернизацииНУ1,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ2 КАК СубконтоОбъектаМодернизацииНУ2,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ3 КАК СубконтоОбъектаМодернизацииНУ3,
	|	Реквизиты.СчетУчетаОбъектаМодернизацииБУ КАК СчетУчетаОбъектаМодернизацииБУ,
	|	Реквизиты.СчетУчетаОбъектаМодернизацииНУ КАК СчетУчетаОбъектаМодернизацииНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедетсяАналитУчетОсПоПодразделениям КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	Реквизиты.ВедетсяАналитУчетОсПоМОЛ КАК ВедетсяАналитУчетОсПоМОЛ
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.АмортизацияБУ,
	|	ТаблицаОС.АмортизацияЗаМесяцБУ,
	|	ТаблицаОС.КоэффициентАмортизацииБУ,
	|	ТаблицаОС.КоэффициентУскоренияБУ,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьБУ,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	ТаблицаОС.СубконтоНУ1,
	|	ТаблицаОС.СубконтоНУ2,
	|	ТаблицаОС.СубконтоНУ3,
	|	ТаблицаОС.СуммаМодернизацииБУ,
	|	ТаблицаОС.СчетНУ,
	|	ТаблицаОС.ФактОбъемПродукцииРаботБУ,
	|	ТаблицаОС.ФактСрокИспользованияБУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаМодернизацияОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("СобытияОСОрганизацийТаблицаОС"					, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПараметрыАмортизацииОСБухгалтерскийУчетТаблицаОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПроводкиБУТаблицаОС"								, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПроводкиНУТаблицаОС"								, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СобытияОСОрганизацийТаблицаОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВидДокумента КАК НазваниеДокумента,
	|	Реквизиты.СобытиеОС,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.СуммаМодернизацииБУ КАК СуммаЗатратБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПараметрыАмортизацииОСБухгалтерскийУчетТаблицаОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ - ТаблицаОС.ФактСрокИспользованияБУ КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.СтоимостьБУ + ТаблицаОС.СуммаМодернизацииБУ - ТаблицаОС.АмортизацияБУ - ТаблицаОС.АмортизацияЗаМесяцБУ - ТаблицаОС.ЛиквидационнаяСтоимостьБУ КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ - ТаблицаОС.ФактОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	|	ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРабот,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьБУ КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПроводкиБУТаблицаОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ОбъектМодернизации КАК ОбъектМодернизации,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ТаблицаОС.СуммаМодернизацииБУ КАК СуммаПроводки,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛОрганизации,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (Выбрать ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК СчетаУчетаОССрезПоследних
	|		ПО ТаблицаОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (Выбрать ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПроводкиНУТаблицаОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ОбъектМодернизации КАК ОбъектМодернизации,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СуммаМодернизацииБУ КАК СуммаПроводки,
	|	ТаблицаОС.СчетНУ КАК СчетНУ,
	|	ТаблицаОС.СубконтоНУ1 КАК СубконтоНУ1,
	|	ТаблицаОС.СубконтоНУ2 КАК СубконтоНУ2,
	|	ТаблицаОС.СубконтоНУ3 КАК СубконтоНУ3,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ1 КАК СубконтоОбъектаМодернизацииНУ1,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ2 КАК СубконтоОбъектаМодернизацииНУ2,
	|	Реквизиты.СубконтоОбъектаМодернизацииНУ3 КАК СубконтоОбъектаМодернизацииНУ3,
	|	Реквизиты.СчетУчетаОбъектаМодернизацииБУ КАК СчетУчетаОбъектаМодернизацииБУ,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

#КонецЕсли
