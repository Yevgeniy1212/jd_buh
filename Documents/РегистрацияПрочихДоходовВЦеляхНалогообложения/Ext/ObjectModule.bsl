#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = СведенияОДоходах.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов 
		И ПериодРегистрации >= '20250101' 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекстСообщения =
			НСтр("ru = 'До получения официальных разъяснений по обязательствам уплаты СО от уполномоченных органов, начиная с января 2025 года регистрацию доходов по договорам ГПХ необходимо выполнять в документе ""Расчет налогов при поступлении активов и услуг"", 
							|в котором доступны способы расчета как за счет налогового агента, так и за счет физического лица.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Ложь);	
		ДополнительныеСвойства.Вставить("ЗакрыватьФорму", Ложь);
	КонецЕсли;

	//МассивТЧ = Новый Массив();
	//МассивТЧ.Добавить(СведенияОДоходах);

	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
	КраткийСоставДокумента = "";
	
	ТипФизическиеЛица = Тип("СправочникСсылка.ФизическиеЛица");
	ТипКонтрагенты = Тип("СправочникСсылка.Контрагенты");
	
	Для каждого СтрокаТЧ Из СведенияОДоходах Цикл
			
		Если ТипЗнч(СтрокаТЧ.ФизЛицо) = ТипФизическиеЛица Тогда
			ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СтрокаТЧ.ФизЛицо);
		Иначе
			ФИОФизЛица = СокрЛП(СтрокаТЧ.ФизЛицо);
		КонецЕсли;
		
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			Иначе
				Если Лев(КраткийСоставДокумента, 2) = ", " Тогда
					КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 95) + "...";
				Иначе
					КраткийСоставДокумента = Лев(КраткийСоставДокумента, 97) + "...";
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
		
	Если Лев(КраткийСоставДокумента, 2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
		
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП  Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СведенияОДоходах.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СведенияОДоходах.ВидРасчета");
        
    ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СведенияОДоходах.ДоговорКонтрагента");     
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СведенияОДоходах, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	ТаблицаИПНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах, 
																					"ИПН", 
																					Движения.ИПНСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьИПН", Истина));
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИПНСведенияОДоходах,  			"ИПНСведенияОДоходах",  					Движения, Отказ);

		
	ТаблицаОПВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ОПВ", 
																					Движения.ОПВСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьОПВ", Истина));
	ТаблицаСНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"СН", 
																					Движения.СНСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьСН", Истина));
	ТаблицаСОСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"СО", 
																					Движения.СОСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьСО", Истина));
																					
	ТаблицаВыплаченныеДоходы = РасчетЗарплатыСервер.ПодготовитьТаблицуВыплаченныеДоходыНУ(Реквизиты,
																					ПараметрыПроведения.ВыплаченныеДоходыРаботникамОрганизацийНУ,
																					Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	ТаблицаООСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ООСМС", 
																					Движения.ООСМССведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьООСМС", Истина));
	ТаблицаВОСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ВОСМС", 
																					Движения.ВОСМССведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьВОСМС", Истина));
																					
	ТаблицаЕПСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ЕП", 
																					Движения.ВОСМССведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьЕП", Истина));

																					
	
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВСведенияОДоходах,  			"ОПВСведенияОДоходах",  					Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСНСведенияОДоходах,   			"СНСведенияОДоходах",   					Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСОСведенияОДоходах,   			"СОСведенияОДоходах",   					Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаООСМССведенияОДоходах, 		"ООСМССведенияОДоходах", 					Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВОСМССведенияОДоходах, 		"ВОСМССведенияОДоходах", 					Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаЕПСведенияОДоходах, 			"ЕПСведенияОДоходах", 						Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВыплаченныеДоходы,   			"ВыплаченныеДоходыРаботникамОрганизацийНУ",	Движения, Отказ);
    РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами, 
																					"ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами", Движения, Отказ);
																					
	Если Реквизиты.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		ТаблицаОППВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ОППВ", 
																					Движения.ОППВСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьОППВ", Истина));
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОППВСведенияОДоходах, 		"ОППВСведенияОДоходах", 					Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов") Тогда
		ТаблицаОПВРСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																					ПараметрыПроведения.СведенияОДоходах,
																					"ОПВР", 
																					Движения.ОПВРСведенияОДоходах.ВыгрузитьКолонки(),
																					Отказ,
																					Новый Структура("УчитыватьОПВР", Истина));  
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВРСведенияОДоходах, 		"ОПВРСведенияОДоходах", 					Движения, Отказ);
    КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоАвансовыйОтчет(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеТоваровУслуг(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеНМА(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеДопРасходов(ЭтотОбъект, Основание);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Сведения о доходах"": '"),СокрЛП(СтрокаТабличнойЧасти.НомерСтроки));
		
		Если СтрокаТабличнойЧасти.СуммаДохода + СтрокаТабличнойЧасти.СуммаВычета = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана ни одна из сумм (сумма дохода, сумма вычета)! Для проведения документа одна из сумм должна быть заполнена'"),,,, Отказ);
		КонецЕсли;

		Если СтрокаТабличнойЧасти.УчитыватьИПН Тогда
			
			// СпособНалогообложенияИПН
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияИПН) Тогда
				ТекстСообщения = НСтр("ru='не указан способ обложения ИПН!'");
				Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияИПН";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.УчитыватьОПВ Тогда
			// СпособНалогообложенияОПВ
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияОПВ) Тогда
				ТекстСообщения = НСтр("ru='не указан способ обложения ОПВ!'");
				Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияОПВ";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;

		
		Если ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме 
			ИЛИ	ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП	 Тогда
									
			Если СтрокаТабличнойЧасти.УчитыватьСН Тогда
				// СпособНалогообложенияСН
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияСН) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения СН!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияСН";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.УчитыватьСО Тогда
				// СпособНалогообложенияСО
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияСО) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения СО!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияСО";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			ОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Организация, Дата);
			
			Если СтрокаТабличнойЧасти.УчитыватьОППВ И ОрганизацияЯвляетсяВкладчикомОППВ Тогда
				// СпособНалогообложенияОППВ
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияОППВ) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения ОППВ!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияОППВ";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.УчитыватьВОСМС Тогда
				// СпособНалогообложенияСО
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияВОСМС) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения взносов ОСМС!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияВОСМС";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.УчитыватьООСМС Тогда
				// СпособНалогообложенияСО
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияООСМС) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения отчислений ОСМС!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияООСМС";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.УчитыватьОПВР Тогда
				// СпособНалогообложенияСО
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособНалогообложенияОПВР) Тогда
					ТекстСообщения = НСтр("ru='не указан способ обложения отчислений ОПВР!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНалогообложенияОПВР";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТабличнойЧасти.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда 
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ФизЛицо.ФизЛицо) Тогда
					ТекстСообщения = НСтр("ru='У контрагента не заполнен реквизит ""Физическое лицо""!'");
					Поле = "СведенияОДоходах" + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ФизЛицо";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
