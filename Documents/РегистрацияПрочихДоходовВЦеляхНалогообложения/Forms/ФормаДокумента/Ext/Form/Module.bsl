
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ЗаполнитьПризнакРезидентстваВТабличнойЧасти();

	Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
		
		СтрокаТЧ.ОтображатьДоговор = ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			Если Объект.СведенияОДоходах.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				
				НоваяСтрока 					= Объект.СведенияОДоходах.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				
				Нерезидент = ПолучитьПризнакРезидентства(Объект.ПериодРегистрации, НоваяСтрока.ФизЛицо);
				НоваяСтрока.Нерезидент = Нерезидент;

			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.СведенияОДоходах.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					
					НоваяСтрока 		= Объект.СведенияОДоходах.Добавить();	
					НоваяСтрока.ФизЛицо	= СтрокаМассива;
				
					Нерезидент = ПолучитьПризнакРезидентства(Объект.ПериодРегистрации, НоваяСтрока.ФизЛицо);
					НоваяСтрока.Нерезидент = Нерезидент;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененПериод" Тогда
		ПроверитьНаличиеСтавок(ЭтаФорма);
		УправлениеВидимостью(ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""регистрация прочих доходов в целях налогообложения"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;

    Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
        
        Если ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
            
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
            
            Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
                
                Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
                    СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
                    СтрокаТЧ.ДоговорКонтрагента = Неопределено;
                КонецЕсли;
                
            КонецЦикла;
            
        Иначе
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов();
        КонецЕсли;
    КонецЕсли;
    
	ПредыдущийПорядокОбложенияДоходовРаботников = ПорядокОбложенияДоходовРаботников;
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьФизЛицоОрганизацииИП();
	УправлениеФормой(ЭтаФорма);

	ОрганизацияСтруктурноеПодразделениеПриИзмененииПорядка(ПредыдущийПорядокОбложенияДоходовРаботников);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);

	ПроверитьНаличиеСтавок(ЭтаФорма); 
	ЗаполнитьПризнакРезидентстваВТабличнойЧасти();
	УстановитьФункциональныеОпцииФормы();
	УправлениеВидимостью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьНаличиеСтавок(ЭтаФорма);
	УправлениеВидимостью(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
	ПроверитьНаличиеСтавок(ЭтаФорма);
	ЗаполнитьПризнакРезидентстваВТабличнойЧасти();
	УстановитьФункциональныеОпцииФормы();
	УправлениеВидимостью(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	ПроверитьНаличиеСтавок(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	УправлениеВидимостью(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПроверитьНаличиеСтавок(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	УправлениеВидимостью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	ПредыдущийВидОперации = ТекущийВидОперации;
	ТекущийВидОперации = Объект.ВидОперации;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
		
		ПустойСпособОтражения = ПредопределенноеЗначение("Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка");
		
		Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.СпособОтраженияВБухучете) Тогда
				СтрокаТЧ.СпособОтраженияВБухучете = ПустойСпособОтражения;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.СпособОтраженияВБухучете) Тогда
			СпособОтраженияВБухучете = ПустойСпособОтражения;
		КонецЕсли;
		
		Если ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
			
			Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			
			Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
				
				Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
					СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
					СтрокаТЧ.ДоговорКонтрагента = Неопределено;
				КонецЕсли;
				
			КонецЦикла;

		Иначе
			Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов();
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов") Тогда
		
		Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		
		// Необходимо вычистить все значения с физическими лицами и настройки по прочим налогам и взносам
		Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
			Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьОПВ Тогда
				СтрокаТЧ.УчитыватьОПВ = Ложь;
				СтрокаТЧ.СпособНалогообложенияОПВ = ПустойСпособНалогообложения;
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьСН Тогда
				СтрокаТЧ.УчитыватьСН = Ложь;
				СтрокаТЧ.СпособНалогообложенияСН = ПустойСпособНалогообложения;
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьСО Тогда
				СтрокаТЧ.УчитыватьСО = Ложь;
				СтрокаТЧ.СпособНалогообложенияСО = ПустойСпособНалогообложения;
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьОППВ Тогда
				СтрокаТЧ.УчитыватьОППВ = Ложь;
				СтрокаТЧ.СпособНалогообложенияОППВ = ПустойСпособНалогообложения;
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьОПВР Тогда
				СтрокаТЧ.УчитыватьОПВР = Ложь;
				СтрокаТЧ.СпособНалогообложенияОПВР = ПустойСпособНалогообложения;
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьООСМС Тогда
				СтрокаТЧ.УчитыватьООСМС = Ложь;
				СтрокаТЧ.СпособНалогообложенияООСМС = ПустойСпособНалогообложения;
			КонецЕсли; 
			Если СтрокаТЧ.УчитыватьЕП Тогда
				СтрокаТЧ.УчитыватьЕП = Ложь;
				СтрокаТЧ.СпособНалогообложенияЕП = ПустойСпособНалогообложения;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
		
		Если Объект.СведенияОДоходах.Количество() > 0 Тогда
			ПарметрыВопроса = Новый Структура;
			ПарметрыВопроса.Вставить("ПредыдущийВидОперации",ПредыдущийВидОперации);
			ТекстВопроса = НСтр("ru='При изменении вида операции табличная часть будет очищена. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииВидаОперации", ЭтотОбъект, ПарметрыВопроса);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;	
				
		Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
		
		СтрокаТЧ.ОтображатьДоговор = ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты");
		
	КонецЦикла;

	ВидОперацииПриИзмененииНаСевере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СведенияОДоходах

&НаКлиенте
Процедура СведенияОДоходахФизЛицоПриИзменении(Элемент)
	
	ФизЛицоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.СведенияОДоходах.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.СведенияОДоходах.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
			
			ПараметрыФормы	= Новый Структура;
			ПараметрыФормы.Вставить("Отбор",	Новый Структура("Ссылка", ФизЛицоОрганизации));
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		Иначе
			ПараметрыФормы	= Новый Структура;
			ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
			ПараметрыФормы.Вставить("РежимВыбора",						Истина);
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Элементы.СведенияОДоходах.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.СведенияОДоходах.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		
	ИначеЕсли Не ЗначениеЗаполнено(Элементы.СведенияОДоходах.ТекущиеДанные.ФизЛицо) и Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
		СтандартнаяОбработка = Ложь;

		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("Ссылка", ФизЛицоОрганизации));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
			
			ПараметрыФормы	= Новый Структура;
			ПараметрыФормы.Вставить("Отбор",	Новый Структура("Ссылка", ФизЛицоОрганизации));
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		Иначе
			ПараметрыФормы	= Новый Структура;
			ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
			ПараметрыФормы.Вставить("РежимВыбора",						Истина);
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
			
		КонецЕсли;
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахДатаДоходаПриИзменении(Элемент)

	ТекущиеСведенияОДоходах = Элементы.СведенияОДоходах.ТекущиеДанные;
	ТекущиеСведенияОДоходах.МесяцНалоговогоПериода = НачалоМесяца(ТекущиеСведенияОДоходах.ДатаДохода);

КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахВидРасчетаПриИзменении(Элемент)

	ДанныеСтрокиТаблицы = Новый Структура("ФизЛицо, ДоговорКонтрагента, МесяцНалоговогоПериода, СпособНалогообложенияИПН, СпособНалогообложенияОПВ, 
											|СпособНалогообложенияСН, СпособНалогообложенияСО, СпособНалогообложенияОППВ, СпособНалогообложенияОПВР, СпособНалогообложенияВОСМС, СпособНалогообложенияООСМС, СпособНалогообложенияЕП, ДатаДохода, УчитыватьИПН, 
											|УчитыватьОПВ, УчитыватьСН, УчитыватьСО, УчитыватьОППВ, УчитыватьОПВР, УчитыватьВОСМС, УчитыватьООСМС, УчитыватьЕП, Нерезидент, ВидРасчета, СуммаДохода, СуммаВычета, СпособОтраженияВБухучете");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.СведенияОДоходах.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ДокументОснование, ПериодРегистрации, ПодразделениеОрганизации, ВидОперации, СпособОтраженияВБухучете");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СведенияОДоходахВидРасчетаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.СведенияОДоходах.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура СведенияОДоходахВидРасчетаПриИзмененииНаСервере (ДанныеСтрокиТаблицы, ПараметрыОбъекта)
	
	СведенияОНалогообложенииНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтрокиТаблицы.ВидРасчета, "ОблагаетсяИПН, ОблагаетсяОПВ, 
																						|ОблагаетсяСН, ОблагаетсяСО, ОблагаетсяОППВ, ОблагаетсяОПВР, ОблагаетсяВОСМС, ОблагаетсяООСМС, ОблагаетсяЕП");
	
	Если НЕ ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж")
		ИЛИ НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме Тогда

		ДанныеСтрокиТаблицы.СпособНалогообложенияИПН 	= СведенияОНалогообложенииНачисления.ОблагаетсяИПН;
		ДанныеСтрокиТаблицы.УчитыватьИПН 				= Истина;
		
		Если ТипЗнч(ДанныеСтрокиТаблицы.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеСтрокиТаблицы.СпособНалогообложенияОПВ 	= СведенияОНалогообложенииНачисления.ОблагаетсяОПВ;
			ДанныеСтрокиТаблицы.СпособНалогообложенияСН 	= СведенияОНалогообложенииНачисления.ОблагаетсяСН;
			ДанныеСтрокиТаблицы.СпособНалогообложенияСО 	= СведенияОНалогообложенииНачисления.ОблагаетсяСО;
			ДанныеСтрокиТаблицы.СпособНалогообложенияОППВ 	= СведенияОНалогообложенииНачисления.ОблагаетсяОППВ;
			ДанныеСтрокиТаблицы.УчитыватьОПВ 				= Истина;
			ДанныеСтрокиТаблицы.УчитыватьСН 				= Истина;
			ДанныеСтрокиТаблицы.УчитыватьСО 				= Истина;
			ДанныеСтрокиТаблицы.УчитыватьОППВ 				= Истина;
			
			Если ЕстьСтавкаВОСМСФизЛица Тогда
				ДанныеСтрокиТаблицы.УчитыватьВОСМС 				= Истина;
				ДанныеСтрокиТаблицы.СпособНалогообложенияВОСМС 	= СведенияОНалогообложенииНачисления.ОблагаетсяВОСМС;
			Иначе
				ДанныеСтрокиТаблицы.УчитыватьВОСМС 				= Ложь;
				ДанныеСтрокиТаблицы.СпособНалогообложенияВОСМС 	= ПустойСпособНалогообложения;
			КонецЕсли;
			
			Если ЕстьСтавкаООСМСФизЛица Тогда
				ДанныеСтрокиТаблицы.УчитыватьООСМС 				= Истина;
				ДанныеСтрокиТаблицы.СпособНалогообложенияООСМС 	= СведенияОНалогообложенииНачисления.ОблагаетсяООСМС;
			Иначе
				ДанныеСтрокиТаблицы.УчитыватьООСМС 				= Ложь;
				ДанныеСтрокиТаблицы.СпособНалогообложенияООСМС 	= ПустойСпособНалогообложения;
			КонецЕсли;
			
			Если ЕстьСтавкаОПВРФизЛица Тогда
				ДанныеСтрокиТаблицы.УчитыватьОПВР 				= Истина;
				ДанныеСтрокиТаблицы.СпособНалогообложенияОПВР 	= СведенияОНалогообложенииНачисления.ОблагаетсяОПВР;
			Иначе
				ДанныеСтрокиТаблицы.УчитыватьОПВР 				= Ложь;
				ДанныеСтрокиТаблицы.СпособНалогообложенияОПВР 	= ПустойСпособНалогообложения;
			КонецЕсли;
		
		Иначе 
			ДанныеСтрокиТаблицы.СпособНалогообложенияОПВ 	= СведенияОНалогообложенииНачисления.ОблагаетсяОПВ;
			ДанныеСтрокиТаблицы.СпособНалогообложенияСН 	= ПустойСпособНалогообложения;
			ДанныеСтрокиТаблицы.СпособНалогообложенияСО 	= ПустойСпособНалогообложения;
			ДанныеСтрокиТаблицы.СпособНалогообложенияОППВ 	= ПустойСпособНалогообложения;
			ДанныеСтрокиТаблицы.УчитыватьОПВ 				= Истина;
			ДанныеСтрокиТаблицы.УчитыватьСН 				= Ложь;
			ДанныеСтрокиТаблицы.УчитыватьСО 				= Ложь;
			ДанныеСтрокиТаблицы.УчитыватьОППВ 				= Ложь;
			
			Если ЕстьСтавкиОСМСЮрЛица Тогда
				ДанныеСтрокиТаблицы.УчитыватьВОСМС 			   = Истина;
				ДанныеСтрокиТаблицы.СпособНалогообложенияВОСМС = СведенияОНалогообложенииНачисления.ОблагаетсяВОСМС;
			Иначе
				ДанныеСтрокиТаблицы.УчитыватьВОСМС 			   	= Ложь;
				ДанныеСтрокиТаблицы.СпособНалогообложенияВОСМС 	= ПустойСпособНалогообложения;
			КонецЕсли;
			
			Если ЕстьСтавкаОПВРЮрЛица Тогда
				ДанныеСтрокиТаблицы.УчитыватьОПВР 			   = Истина;
				ДанныеСтрокиТаблицы.СпособНалогообложенияОПВР = СведенияОНалогообложенииНачисления.ОблагаетсяОПВР;
			Иначе
				ДанныеСтрокиТаблицы.УчитыватьОПВР 				= Ложь;
				ДанныеСтрокиТаблицы.СпособНалогообложенияОПВР 	= ПустойСпособНалогообложения;
			КонецЕсли;
			ДанныеСтрокиТаблицы.УчитыватьООСМС 			   	= Ложь;   
			ДанныеСтрокиТаблицы.СпособНалогообложенияООСМС 	= ПустойСпособНалогообложения;
		КонецЕсли;

	Иначе
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить("ИПН");	
		МассивДанных.Добавить("ОПВ");	
		МассивДанных.Добавить("ВОСМС");	
		МассивДанных.Добавить("СО");	
		МассивДанных.Добавить("СН");	
		МассивДанных.Добавить("ООСМС");	
		МассивДанных.Добавить("ОППВ");	
		МассивДанных.Добавить("ОПВР");	
		
		Для Каждого СтрокаМассива Из МассивДанных Цикл
			
			Если ДанныеСтрокиТаблицы.Нерезидент Тогда
				
				ДанныеСтрокиТаблицы["Учитывать" + СтрокаМассива] = Истина;
				ДанныеСтрокиТаблицы["СпособНалогообложения" + СтрокаМассива] = СведенияОНалогообложенииНачисления["Облагается" + СтрокаМассива];
				
			Иначе
				
				ДанныеСтрокиТаблицы["Учитывать" + СтрокаМассива] = Ложь;
				ДанныеСтрокиТаблицы["СпособНалогообложения" + СтрокаМассива] = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеСтрокиТаблицы.Нерезидент Тогда 
			
			ДанныеСтрокиТаблицы.УчитыватьЕП = Ложь;
			ДанныеСтрокиТаблицы.СпособНалогообложенияЕП = ПустойСпособНалогообложения;
			
		Иначе
			
			ДанныеСтрокиТаблицы.УчитыватьЕП = Истина;
			ДанныеСтрокиТаблицы.СпособНалогообложенияЕП = СведенияОНалогообложенииНачисления.ОблагаетсяЕП;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахУчитыватьВОСМСПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахУчитыватьООСМСПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахСпособОтраженияВБухучетеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ТекущиеДанные = Элементы.СведенияОДоходах.ТекущиеДанные;
		Если ТекущиеДанные.УчитыватьОПВ Тогда
			ПараметрыФормы.Вставить("ОтборСчетКт", ПредопределенноеЗначение("ПланСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям"));
		ИначеЕсли ТекущиеДанные.УчитыватьСО Тогда
			ПараметрыФормы.Вставить("ОтборСчетКт", ПредопределенноеЗначение("ПланСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию_"));
		Иначе 
			ПараметрыФормы.Вставить("ОтборСчетКт", ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка"));
		КонецЕсли;
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Справочник.СпособыОтраженияЗарплатыВРеглУчете.ФормаВыбора", ПараметрыФормы, Элемент,,,,, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоСпискуСотрудников(Команда)
	
	Если Объект.СведенияОДоходах.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСОиОПВиВОСМС(Команда)
	ЗаполнитьСОиОПВНиВОСМСаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияЯвляетсяВкладчикомОППВ 		= ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Объект.Организация, Объект.ПериодРегистрации);

	ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Объект.Организация, Объект.ПериодРегистрации);

	ПорядокОбложенияДоходовРаботников = УчетнаяПолитикаСервер.ПорядокОбложенияДоходовРаботников(Объект.Организация, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() 
	
	// Если вызов формы был осуществлен по гиперссылке "Исправить" в документе НачислениеЗарплатыРаботникамОрганизаций
	Если Параметры.Свойство("СсылкаНаОбъект") Тогда
		Объект.Организация = Параметры.СсылкаНаОбъект.Организация;
		Объект.ПодразделениеОрганизации = Параметры.СсылкаНаОбъект.ПодразделениеОрганизации;
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП");
		Объект.ПериодРегистрации = Параметры.СсылкаНаОбъект.ПериодРегистрации; 
	КонецЕсли;	
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьФизЛицоОрганизацииИП();
	
	ТекущийВидОперации   = Объект.ВидОперации;
	

	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
		
        Если ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
            
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
            
            Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
                
                Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
                    СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
                    СтрокаТЧ.ДоговорКонтрагента = Неопределено;
                КонецЕсли;
                
            КонецЦикла;
            
        Иначе
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов();
        КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов") Тогда
		
		Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
		
		Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
		
		СтрокаТЧ.ОтображатьДоговор = ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты");
		
	КонецЦикла;
	
	ЗаполнитьПризнакРезидентстваВТабличнойЧасти();
	
	ПроверитьНаличиеСтавок(ЭтаФорма);
	УправлениеВидимостью(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьНаличиеСтавок(Форма)
	
	Объект = Форма.Объект;
	ДатаСреза = Объект.ПериодРегистрации;
	Организация = Объект.Организация;
	ВидОперации = Объект.ВидОперации;
	
	Если ДатаСреза >= Дата('20200101') Тогда
		// ОПВР
		Если ДатаСреза >= Дата('20240101') Тогда
			Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов") Тогда            
				Форма.ЕстьСтавкаОПВРФизЛица    = Истина;
				Форма.ЕстьСтавкаОПВРЮрЛица     = Ложь;
			Иначе
				Форма.ЕстьСтавкаОПВРФизЛица    = Ложь;
				Форма.ЕстьСтавкаОПВРЮрЛица     = Истина;
			КонецЕсли;
		Иначе
			Форма.ЕстьСтавкаОПВРФизЛица    = Ложь;
			Форма.ЕстьСтавкаОПВРЮрЛица     = Ложь;		
		КонецЕсли;
		// ОСМС
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда            
			Форма.ЕстьСтавкаВОСМСФизЛица    = Истина;
			Форма.ЕстьСтавкаООСМСФизЛица    = Истина;
			Форма.ЕстьСтавкиОСМСЮрЛица      = Истина;		
		Иначе
			Форма.ЕстьСтавкиОСМСЮрЛица      = Истина;
			Форма.ЕстьСтавкаВОСМСФизЛица    = Ложь;
			Форма.ЕстьСтавкаООСМСФизЛица    = Ложь;
		КонецЕсли;
		Возврат;
	Иначе
		Форма.ЕстьСтавкаОПВРФизЛица = Ложь;
		Форма.ЕстьСтавкаОПВРЮрЛица  = Ложь;		
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Форма, ПолучитьДанныеСтавок(ДатаСреза));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтавок(ДатаСреза) 
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	СведенияОСтавкахОСМС.ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС.СрезПоследних(&ДатаСреза, ) КАК СведенияОСтавкахОСМС
	|";	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	ЕстьСтавкиОСМСЮрЛица  	= Ложь;
	ЕстьСтавкаВОСМСФизЛица 	= Ложь;
	ЕстьСтавкаООСМСФизЛица	= Ложь;
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ВидДохода = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			ЕстьСтавкаВОСМСФизЛица = ВыборкаЗапроса.СтавкаВзносы <> 0;
			ЕстьСтавкаООСМСФизЛица = ВыборкаЗапроса.СтавкаОтчисления <> 0;
		ИначеЕсли ВыборкаЗапроса.ВидДохода = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
			ЕстьСтавкиОСМСЮрЛица = ВыборкаЗапроса.СтавкаВзносы <> 0;
		КонецЕсли;		
	КонецЦикла;

	Возврат Новый Структура("ЕстьСтавкаВОСМСФизЛица, ЕстьСтавкаООСМСФизЛица, ЕстьСтавкиОСМСЮрЛица", ЕстьСтавкиОСМСЮрЛица, ЕстьСтавкаООСМСФизЛица, ЕстьСтавкиОСМСЮрЛица);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("УчитыватьООСМС", Истина);
	МассивСтрок = Объект.СведенияОДоходах.НайтиСтроки(ПараметрыОтбора);
	ЕстьООСМС = МассивСтрок.Количество() <> 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("УчитыватьВОСМС", Истина);
	МассивСтрок = Объект.СведенияОДоходах.НайтиСтроки(ПараметрыОтбора);
	ЕстьВОСМС = МассивСтрок.Количество() <> 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("УчитыватьОПВР", Истина);
	МассивСтрок = Объект.СведенияОДоходах.НайтиСтроки(ПараметрыОтбора);
	ЕстьОПВР = МассивСтрок.Количество() <> 0;
	
	Форма.ЕстьООСМС = ЕстьООСМС;
	Форма.ЕстьВОСМС = ЕстьВОСМС;
	Форма.ЕстьОПВР = ЕстьОПВР;
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
		Элементы.СпособОтраженияВБухучете.Видимость 						  = Ложь;
        Если Форма.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
            Элементы.СведенияОДоходахФизЛицо.Заголовок 							  = НСтр("ru='Сотрудник'");
            Элементы.СведенияОДоходахДоговорКонтрагента.Видимость                 = Ложь;    
        Иначе
            Элементы.СведенияОДоходахФизЛицо.Заголовок 							  = НСтр("ru='Сотрудник / Контрагент'");
            Элементы.СведенияОДоходахДоговорКонтрагента.Видимость                 = Истина;    
        КонецЕсли;
		Элементы.СведенияОДоходахДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СведенияОДоходахВидРасчета.АвтоОтметкаНезаполненного 		  = Ложь;
		Элементы.СведенияОДоходахПодбор.Доступность 						  = Истина;
		Элементы.СведенияОДоходахЗаполнитьПоСпискуСотрудников.Доступность 	  = Истина;
		Элементы.СведенияОДоходахДобавитьИзСпискаСотрудников.Доступность 	  = Истина;	
		Элементы.СведенияОДоходахГруппаИПН.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаСН.Видимость   						  = Истина;
		Элементы.СведенияОДоходахГруппаОППВ.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаОПВР.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаВОСМС.Видимость						  = Истина;
		Элементы.СведенияОДоходахГруппаООСМС.Видимость						  = Истина;
		Элементы.СведенияОДоходахВидРасчета.Видимость						  = Истина;
		Элементы.СведенияОДоходахСуммаВычета.Видимость 						  = Истина;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Видимость 		  = Истина;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Заголовок			  = "";
		Элементы.СведенияОДоходахПодбор.Видимость	 						  = Истина;
		Элементы.СведенияОДоходахЗаполнитьСОиОПВ.Видимость 					  = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов") Тогда
		Элементы.СпособОтраженияВБухучете.Видимость 						  = Истина;
		Элементы.СведенияОДоходахФизЛицо.Заголовок 							  = НСтр("ru='Контрагент'");
		Элементы.СведенияОДоходахДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Элементы.СведенияОДоходахВидРасчета.АвтоОтметкаНезаполненного 		  = Истина;
		Элементы.СведенияОДоходахПодбор.Доступность 						  = Ложь;
		Элементы.СведенияОДоходахЗаполнитьПоСпискуСотрудников.Доступность 	  = Ложь;
		Элементы.СведенияОДоходахДобавитьИзСпискаСотрудников.Доступность 	  = Ложь;
		Элементы.СведенияОДоходахГруппаИПН.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаСН.Видимость   						  = Истина;
		Элементы.СведенияОДоходахГруппаОППВ.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаОПВР.Видимость  						  = Ложь;
		Элементы.СведенияОДоходахГруппаВОСМС.Видимость						  = Истина;
		Элементы.СведенияОДоходахГруппаООСМС.Видимость						  = Истина;
		Элементы.СведенияОДоходахВидРасчета.Видимость						  = Истина;
		Элементы.СведенияОДоходахСуммаВычета.Видимость 						  = Истина;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Видимость 		  = Истина;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Заголовок			  = "";
		Элементы.СведенияОДоходахПодбор.Видимость	 						  = Истина;
		Элементы.СведенияОДоходахЗаполнитьСОиОПВ.Видимость 					  = Ложь;  	
		Элементы.СведенияОДоходахДоговорКонтрагента.Видимость 				  = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП") Тогда
		Элементы.СпособОтраженияВБухучете.Видимость 						  = Ложь;
		Элементы.СведенияОДоходахФизЛицо.Заголовок 							  = НСтр("ru='Индивидуальный предприниматель'");
		Элементы.СведенияОДоходахДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СведенияОДоходахВидРасчета.АвтоОтметкаНезаполненного 		  = Ложь;
		Элементы.СведенияОДоходахПодбор.Доступность	 						  = Ложь;
		Элементы.СведенияОДоходахЗаполнитьПоСпискуСотрудников.Доступность     = Ложь;
		Элементы.СведенияОДоходахДобавитьИзСпискаСотрудников.Доступность 	  = Ложь;
		Элементы.СведенияОДоходахГруппаИПН.Видимость  						  = Ложь;
		Элементы.СведенияОДоходахГруппаСН.Видимость   						  = Ложь;
		Элементы.СведенияОДоходахГруппаОППВ.Видимость  						  = Ложь;
		Элементы.СведенияОДоходахГруппаОПВР.Видимость  						  = Истина;
		Элементы.СведенияОДоходахГруппаВОСМС.Видимость						  = Истина;
		Элементы.СведенияОДоходахГруппаООСМС.Видимость						  = Ложь;
		Элементы.СведенияОДоходахВидРасчета.Видимость						  = Ложь;
		Элементы.СведенияОДоходахСуммаВычета.Видимость 						  = Ложь;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Видимость 		  = Истина;
		Элементы.СведенияОДоходахСпособОтраженияВБухучете.Заголовок 		  = НСтр("ru='Отражение взносов/отчислений в учете'");
		Элементы.СведенияОДоходахПодбор.Видимость	 						  = Ложь;
		Элементы.СведенияОДоходахЗаполнитьСОиОПВ.Видимость 					  = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
		
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененоСтруктурноеПодразделение И ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	ИначеЕсли Результат.ИзмененаОрганизация И ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = Неопределено;
	КонецЕсли;
    
    Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
        
        Если ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
            
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
            
            Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
                
                Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
                    СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
                    СтрокаТЧ.ДоговорКонтрагента = Неопределено;
                КонецЕсли;
                
            КонецЦикла;
            
        Иначе
            Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов();
        КонецЕсли;
    КонецЕсли;
	
	ПредыдущийПорядокОбложенияДоходовРаботников = ПорядокОбложенияДоходовРаботников;
	
	УстановитьФизЛицоОрганизацииИП();
    УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	ОрганизацияСтруктурноеПодразделениеПриИзмененииПорядка(ПредыдущийПорядокОбложенияДоходовРаботников);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	Если Результат =КодВозвратаДиалога.Да  Тогда
		ПриИзмененииЗначенияОрганизацииСервер(Параметры, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможноИспользованиеКонтрагента(Контрагент, Сообщать = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК КонтрагентЯвляетсяЮрЛицом
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если Сообщать Тогда 
			ТекстСообщения = НСтр("ru = ' не является физическим лицом, регистрация доходов в целях налогообложения для него не предусмотрена!'");
			ОбщегоНазначения.СообщитьПользователю("""" + СокрЛП(Контрагент) + """" + ТекстСообщения, Объект.Ссылка, , "Объект");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Объект.СведенияОДоходах.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.СведенияОДоходах.Очистить();
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииВидаОперации(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = Параметры.ПредыдущийВидОперации;
		Возврат;	
	КонецЕсли;

	Объект.СведенияОДоходах.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоАвансовыйОтчет(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеТоваровУслуг(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеНМА(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьПоПоступлениеДопРасходов(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьДоступныйДоговорНаСервере(Контрагент)
	
	ДоступныйДоговор = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, Контрагент);

	Возврат  ДоступныйДоговор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакРезидентстваВТабличнойЧасти()

	Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл

		Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтрокаТЧ.Нерезидент = ПолучитьПризнакРезидентства(Объект.ПериодРегистрации, СтрокаТЧ.ФизЛицо);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПризнакРезидентства(ПериодРегистрации, ФизЛицо)
	
	Гражданство = РегистрыСведений.ГражданствоФизЛиц.СрезПоследних(ПериодРегистрации, Новый Структура("ФизЛицо", ФизЛицо));
	Нерезидент = Ложь;
	Если Гражданство.Количество() > 0 Тогда
		Нерезидент = Гражданство[0].НеЯвляетсяНалоговымРезидентомРК;
	КонецЕсли;

	Возврат Нерезидент;
	
КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииНаСевере()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	ПроверитьНаличиеСтавок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.СведенияОДоходах.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
	ФизЛицоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении()
	
	ТекущиеСведенияОДоходах = Элементы.СведенияОДоходах.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеСведенияОДоходах.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущиеСведенияОДоходах.ОтображатьДоговор = Истина;
		
		Если НЕ ВозможноИспользованиеКонтрагента(ТекущиеСведенияОДоходах.ФизЛицо, Истина) Тогда 
			ТекущиеСведенияОДоходах.ФизЛицо = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		
		// Если регистрируем доходы контрагентов, то разрешаем учитывать только ИПН
		ТекущиеСведенияОДоходах.СпособНалогообложенияОПВ 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.СпособНалогообложенияСН 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.СпособНалогообложенияСО 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.СпособНалогообложенияОППВ 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.СпособНалогообложенияООСМС 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.СпособНалогообложенияОПВР 	= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.УчитыватьОПВ 				= ПустойСпособНалогообложения;
		ТекущиеСведенияОДоходах.УчитыватьСН 				= Ложь;
		ТекущиеСведенияОДоходах.УчитыватьСО 				= Ложь;
		ТекущиеСведенияОДоходах.УчитыватьОППВ 				= Ложь;
		ТекущиеСведенияОДоходах.УчитыватьОПВР 				= Ложь;
		ТекущиеСведенияОДоходах.УчитыватьООСМС 				= Ложь;
		
		Если ЗначениеЗаполнено(ТекущиеСведенияОДоходах.ФизЛицо) Тогда 
			ТекущиеСведенияОДоходах.ДоговорКонтрагента = ПолучитьДоступныйДоговорНаСервере(ТекущиеСведенияОДоходах.ФизЛицо);
		КонецЕсли;
		
		Если Не ЕстьСтавкиОСМСЮрЛица Тогда
			ТекущиеСведенияОДоходах.СпособНалогообложенияВОСМС 	= ПустойСпособНалогообложения;
			ТекущиеСведенияОДоходах.УчитыватьВОСМС 				= Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущиеСведенияОДоходах.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ТекущиеСведенияОДоходах.ОтображатьДоговор = Ложь;
		
		Если ЗначениеЗаполнено(ТекущиеСведенияОДоходах.ДоговорКонтрагента) Тогда
			ТекущиеСведенияОДоходах.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		Если Не ЕстьСтавкаВОСМСФизЛица Тогда
			ТекущиеСведенияОДоходах.СпособНалогообложенияВОСМС 	= ПустойСпособНалогообложения;
			ТекущиеСведенияОДоходах.УчитыватьВОСМС 				= Ложь;
		КонецЕсли;
		
		Если Не ЕстьСтавкаООСМСФизЛица Тогда
			ТекущиеСведенияОДоходах.СпособНалогообложенияООСМС 	= ПустойСпособНалогообложения;
			ТекущиеСведенияОДоходах.УчитыватьООСМС 				= Ложь;
		КонецЕсли;
		
		Нерезидент = ПолучитьПризнакРезидентства(Объект.ПериодРегистрации, ТекущиеСведенияОДоходах.ФизЛицо);
		
		Если НЕ ТекущиеСведенияОДоходах.Нерезидент = Нерезидент Тогда
			
			Если Нерезидент Тогда  
				
				ТекущиеСведенияОДоходах.СпособНалогообложенияЕП 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.УчитыватьЕП 				= Ложь;
				ТекущиеСведенияОДоходах.Нерезидент = Истина;
				
			Иначе
				
				ТекущиеСведенияОДоходах.СпособНалогообложенияИПН 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияВОСМС 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияОПВ 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияСН 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияСО 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияОППВ 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияОПВР 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.СпособНалогообложенияООСМС 	= ПустойСпособНалогообложения;
				ТекущиеСведенияОДоходах.УчитыватьИПН 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьВОСМС 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьОПВ 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьСН 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьСО 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьОППВ 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьОПВР 				= Ложь;
				ТекущиеСведенияОДоходах.УчитыватьООСМС 				= Ложь;
				ТекущиеСведенияОДоходах.Нерезидент = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСОиОПВНиВОСМСаСервере()
	Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьСведенияОдоходахСОиОПВиВОСМС(Объект);
КонецПроцедуры

&НаСервере
Процедура  УстановитьФизЛицоОрганизацииИП()
	ФизЛицоОрганизации = Объект.Организация.ИндивидуальныйПредприниматель;	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСтруктурноеПодразделениеПриИзмененииПорядка(ПредыдущийПорядокОбложенияДоходовРаботников)
	
	Если ПорядокОбложенияДоходовРаботников <> ПредыдущийПорядокОбложенияДоходовРаботников Тогда
		
		МассивДанных = Новый Массив;
		
		Если ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда
			
			МассивДанных.Добавить("ИПН");	
			МассивДанных.Добавить("ОПВ");	
			МассивДанных.Добавить("ВОСМС");	
			МассивДанных.Добавить("СО");	
			МассивДанных.Добавить("СН");	
			МассивДанных.Добавить("ООСМС");	
			МассивДанных.Добавить("ОППВ");	
			МассивДанных.Добавить("ОПВР");	
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
				Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			КонецЕсли;
			
		Иначе
			
			МассивДанных.Добавить("ЕП");	
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме") Тогда
				
				Элементы.СведенияОДоходахФизЛицо.ОграничениеТипа = Новый ОписаниеТипов();
				
				Для Каждого СтрокаТЧ Из Объект.СведенияОДоходах Цикл
					
					Если ТипЗнч(СтрокаТЧ.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
						
						СтрокаТЧ.ФизЛицо = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
						СтрокаТЧ.ДоговорКонтрагента = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;

		КонецЕсли;
			
		Для Каждого СтрокаДохода Из Объект.СведенияОДоходах Цикл
			
			Для Каждого СтрокаМассива Из МассивДанных Цикл
				
				СтрокаДохода["Учитывать" + СтрокаМассива] = Ложь;
				СтрокаДохода["СпособНалогообложения" + СтрокаМассива] = Неопределено;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры



