#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетАвансов");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаАкцизаПоРеализации", "Акциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "АкцизВидОперацииРеализации", "АкцизВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовБУ", "Выручка_ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиБУ", "СебестоимостьРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиБУ", "СебестоимостьРеализации_ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиНУ", "СебестоимостьРеализацииНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиНУ", "СебестоимостьРеализации_ПередачаСтруктурномуПодразделениюНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовНУ", "ВыручкаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовНУ", "Выручка_ПередачаСтруктурномуПодразделениюНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПередачаСтруктурномуПодразделению");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");

	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовНУ", "ВыручкаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьАкциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов", "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетАвансов",  "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ПередачаСтруктурномуПодразделению", "ВидОперации");

	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Или ДанныеЗаполнения.Свойство("ТребуетсяУчетАвансов") Тогда
		
		ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ПередачаСтруктурномуПодразделению") Тогда
		
		ДанныеЗаполнения.ПередачаСтруктурномуПодразделению = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению;
		
	КонецЕсли;

	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета расчетов с контрагентом в шапке документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам 	  = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	ВидОперации  = ДанныеОбъекта.ВидОперации;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли; 			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаАкцизаПоРеализации) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаАкцизаПоРеализации = СчетаУчета.СчетУчетаАкцизаПоРеализации;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетОтрицательныхОтклоненийБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетОтрицательныхОтклоненийБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетОтрицательныхОтклоненийБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоОтрицательныхОтклоненийБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
			КонецЕсли;			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
						
			Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетОтрицательныхОтклоненийНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ <> СчетаУчета.СчетОтрицательныхОтклоненийНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетОтрицательныхОтклоненийНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоОтрицательныхОтклоненийНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетПоложительныхОтклоненийБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетПоложительныхОтклоненийБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетПоложительныхОтклоненийБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоПоложительныхОтклоненийБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовОтРеализацииНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовОтРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетПоложительныхОтклоненийНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетПоложительныхОтклоненийНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетПоложительныхОтклоненийНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоПоложительныхОтклоненийНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
			КонецЕсли;
		КонецЕсли;		
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		            	
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
					
		КонецЕсли;                  		
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетПоложительныхОтклоненийБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетПоложительныхОтклоненийБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетПоложительныхОтклоненийБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоПоложительныхОтклоненийБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда

			Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовОтРеализацииНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовОтРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда 
			Если ЗначениеЗаполнено(СчетаУчета.СчетПоложительныхОтклоненийНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетПоложительныхОтклоненийНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетПоложительныхОтклоненийНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоПоложительныхОтклоненийНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		
	ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Процедура заполняет цены в табличной части по данным себестоимости выбранной номенклатуры
//
// Параметры:
//	СтруктураПараметров - Структура - Структура, содержащая в себе следующие параметры:
//		ДокументСсылка - ДокументСсылка.РеализацияТоваровУслуг - Ссылка на документ, для которого выполняется заполнение цен
//		ТабличнаяЧасть - табличная часть документа, для которой выполняется заполнение цен
//		ИмяТабличнойЧасти - Строка - имя табличной части документа, для которой выполняется заполнение цен
Процедура ЗаполнитьЦеныПоСебестоимости(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	ТабличнаяЧасть = СтруктураПараметров.ТабличнаяЧасть;

	Если СтруктураПараметров.Свойство("НезаполненныеСтроки") = Ложь Тогда 
		НезаполненныеСтроки = ТабличнаяЧасть.СкопироватьКолонки();
	Иначе
		НезаполненныеСтроки = СтруктураПараметров.НезаполненныеСтроки;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	// Ниже вызывается процедура РассчитатьСуммуНДСТабЧасти(),
	// она требует, чтобы поле с датой документа обязательно называлось Дата,
	// сейчас поле с датой документа называется Период, поэтому добавим поле Дата. 
	Реквизиты.Вставить("Дата", Реквизиты.Период);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Ложь, "НеобходимостьОтраженияВНУ");
		
	Реквизиты.ЕстьУслуги = Ложь;
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	Ложь);
	Запрос.УстановитьПараметр("ЭтоПередачаСП", Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	// Таблица списанных товаров
	Если ПараметрыПроведения.ТаблицаТовары <> Неопределено Тогда 
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТаблицаТовары,
			ПараметрыПроведения.Реквизиты, Отказ, Ложь);
	Иначе 
		ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	КонецЕсли;
	ЕстьНомерСтроки = ТабличнаяЧасть.Колонки.Найти("НомерСтроки") <> Неопределено; 
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		Если ЕстьНомерСтроки Тогда
			СтруктураПоиска.Вставить("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки); 
		КонецЕсли;
					
		НайденныеСтроки = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураПоиска);
		СуммаСписано = 0;
		КоличествоСписано = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.СуммаСписания = 0 Тогда 
				Продолжить;
			КонецЕсли;
			СуммаСписано = СуммаСписано + НайденнаяСтрока.СуммаСписания;
			КоличествоСписано = КоличествоСписано + НайденнаяСтрока.Количество;
		КонецЦикла;
		
		Если СуммаСписано <> 0 Тогда

			КоэффициентПересчетаКоличества = ?(КоличествоСписано = 0 ИЛИ СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество / КоличествоСписано);
			СтрокаТабличнойЧасти.Сумма = СуммаСписано / КоэффициентПересчетаКоличества;
			
			Если Реквизиты.СуммаВключаетАкциз И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза) Тогда
				Если СтрокаТабличнойЧасти.СуммаАкциза <> 0 Тогда 
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаАкциза;
				КонецЕсли;
			КонецЕсли;
			
			Если Реквизиты.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.СтавкаНДС.Ставка/100;
			КонецЕсли;
			
			Если Реквизиты.КурсВзаиморасчетов <> 1 ИЛИ Реквизиты.КратностьВзаиморасчетов <> 1 Тогда
				КурсВзаиморасчетов = 1;
				КратностьВзаиморасчетов = 1;
				Если ЗначениеЗаполнено(Реквизиты.КурсВзаиморасчетов) Тогда 
					КурсВзаиморасчетов = Реквизиты.КурсВзаиморасчетов;
				КонецЕсли;
				Если ЗначениеЗаполнено(Реквизиты.КратностьВзаиморасчетов) Тогда 
					КратностьВзаиморасчетов = Реквизиты.КратностьВзаиморасчетов;
				КонецЕсли;
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма / КурсВзаиморасчетов * КратностьВзаиморасчетов;
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
			СтрокаТЧ = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Реквизиты);			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ, "СуммаНДС");
		Иначе
			НезаполненнаяСтрока = НезаполненныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НезаполненнаяСтрока, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ТабличнаяЧасть",      ТабличнаяЧасть);
	СтруктураДанныхЗаполнения.Вставить("НезаполненныеСтроки", НезаполненныеСтроки);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
			ВидОперации = Неопределено;
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыПоступлениеТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыПоступлениеТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыРеализацияТоваровУслуг = Новый Соответствие;
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Товары, 							"ФормаДокументаТовары");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги, 							"ФормаДокументаУслуги");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, 					"ФормаДокументаОбщая");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению,  "ФормаДокументаОбщая");
	
	Возврат ФормыРеализацияТоваровУслуг;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению;
		Иначе
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли; 
	ИначеЕсли
		ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если Основание.Товары.Количество() > 0 И Основание.Услуги.Количество() = 0 Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ИначеЕсли Основание.Товары.Количество()= 0 И Основание.Услуги.Количество() > 0 Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		Иначе
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли; 
	Иначе
		Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Сделка");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары, ТоварыСкопироватьСтроки, ТоварыВставитьСтроки,
			|ТоварыДобавитьПоШтрихкоду, ТоварыКонтекстноеМенюВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаАкциза; ТоварыСтавкаАкциза");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаАкциза; ТоварыСуммаАкциза");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; УслугиЗаполнить, ТоварыПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьДокументПоПоступлениюТоваровИУслуг(Объект, Основание) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары); 

	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Объект.ДоговорКонтрагента = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 
			СписокВидовДоговоров = Новый СписокЗначений;
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
			СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
			
			Объект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, Объект.Контрагент, СтруктураПараметровДляПолученияДоговора);
		КонецЕсли;
		
		Объект.СпособВыпискиАктовВыполненныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот");
		Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда 
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
				Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа");	
			Иначе
				Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");		
			КонецЕсли; 			
		КонецЕсли;  	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		     Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		     Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
		     Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению;
		Иначе
		     Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли; 
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Объект.ТипЦен  = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойТипЦенПродажи");
	КонецЕсли;
	
	// Флаги включения налогов.
	Объект.УчитыватьНДС   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
	Объект.УчитыватьАкциз = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаАкциза(Объект.Организация, Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		РеквизитыТипаЦен   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС, ЦенаВключаетАкциз");
		Объект.СуммаВключаетНДС   = РеквизитыТипаЦен.ЦенаВключаетНДС;
		Объект.СуммаВключаетАкциз = РеквизитыТипаЦен.ЦенаВключаетАкциз;
	Иначе
		Объект.СуммаВключаетНДС   = Истина;
		Объект.СуммаВключаетАкциз = Объект.УчитыватьАкциз;
	КонецЕсли;
	
	Если ЗаполнятьТовары Тогда
		ЗаполнитьПоПоступлению(Объект, "Товары" , "Заполнить", Основание);
	КонецЕсли; 
	Если ЗаполнятьУслуги Тогда
		ЗаполнитьПоПоступлению(Объект, "Услуги" , "Заполнить", Основание);
	КонецЕсли; 
	
	Объект.ДокументОснование = Основание;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры

Процедура ЗаполнитьДокументПоРеализацииТоваровИУслуг(Объект, Основание) Экспорт
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		ЗаполнитьЗначенияСвойств(Объект, Основание,
			"АдресДоставки,
			|БанковскийСчетОрганизации,
			|ВидОперации,
			|Грузополучатель,
			|Сделка,
			|СуммаДокумента,
			|СчетУчетаРасчетовПоАвансам,
			|СчетУчетаРасчетовСКонтрагентом,
			|ДатаНачалаОтчетногоПериода,
			|ДатаОкончанияОтчетногоПериода,
			|ПереченьДокументации,
			|НомерДокументаГЗ,
			|ДатаДокументаГЗ,
			//|ДатаПодписанияГЗ,
			|СпособВыпискиАктовВыполненныхРабот");
		
		Объект.ДокументОснование = Основание;
		
		Для Каждого ТабличнаяЧасть Из Основание.Метаданные().ТабличныеЧасти Цикл
			Объект[ТабличнаяЧасть.Имя].Очистить();
			Для Каждого СтрокаТабличнойЧасти Из Основание[ТабличнаяЧасть.Имя] Цикл
				ЗаполнитьЗначенияСвойств(Объект[ТабличнаяЧасть.Имя].Добавить(), СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСчетуНаОплатуПокупателю(Объект, Основание) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары); 
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Ссылка, АдресДоставки, СтруктурнаяЕдиница");
	Если РеквизитыОснования = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	КонецЕсли; 
	Объект.АдресДоставки 			  = РеквизитыОснования.АдресДоставки;
	Объект.БанковскийСчетОрганизации  = РеквизитыОснования.СтруктурнаяЕдиница;
	Объект.ДокументОснование 		  = РеквизитыОснования.Ссылка;
		
	Объект.СпособВыпискиАктовВыполненныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот");
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда 
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
			Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа");	
		Иначе
			Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");		
		КонецЕсли; 			
	КонецЕсли;
	
	Если ЗаполнятьТовары Тогда
		СкопироватьТовары(Объект, Основание);
	КонецЕсли; 
	Если ЗаполнятьУслуги Тогда
		СкопироватьУслуги(Объект, Основание);
	КонецЕсли; 
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСчетФактураВыданный(Объект, Основание) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары); 
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Контрагент, Организация, СчетОрганизации, ПунктНазначения, ДоверенностьНомер, ДоверенностьДата, ДоверенностьЛицо, ДоверенностьВыдана, ПодтвержденДокументамиОтгрузки");
	Если РеквизитыОснования = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РеквизитыОснования.ПодтвержденДокументамиОтгрузки Тогда
		ВызватьИсключение(НСтр("ru='Данные счет-фактуры уже подтверждены документами отгрузки. Ввод на основании не возможен.'"));
	КонецЕсли;  	
	
	Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ДокументОснование = Основание;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	КонецЕсли; 
	Объект.Грузополучатель           = РеквизитыОснования.Контрагент;
	Объект.БанковскийСчетОрганизации = РеквизитыОснования.СчетОрганизации;
	Объект.АдресДоставки			 = РеквизитыОснования.ПунктНазначения;
	Объект.ДоверенностьНомер		 = РеквизитыОснования.ДоверенностьНомер;
	Объект.ДоверенностьДата  		 = РеквизитыОснования.ДоверенностьДата;
	Объект.ДоверенностьЛицо  		 = РеквизитыОснования.ДоверенностьЛицо;
	Объект.ДоверенностьВыдана  		 = РеквизитыОснования.ДоверенностьВыдана;
	
	Объект.СпособВыпискиАктовВыполненныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот");
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда 
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
			Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа");	
		Иначе
			Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");		
		КонецЕсли; 			
	КонецЕсли;
	
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание,,ЗаполнятьТовары,ЗаполнятьУслуги);
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(Объект, ИмяТабЧасти, Режим, Поступление) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" + ?(ИмяТабЧасти = "Товары",",
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС", "") + ?(ИмяТабЧасти = "Услуги", ",
	|	ПоступлениеТоваровУслугТовары.Содержание", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТабЧасти + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура"); 		
	СтруктураПоиска.Вставить("ЕдиницаИзмерения");
	СтруктураПоиска.Вставить("СтавкаНДС");

	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		Если ИмяТабЧасти = "Товары" Тогда
			
			СтруктураПоиска.Вставить("Номенклатура",СтрокаТоваров.Номенклатура); 		
			СтруктураПоиска.Вставить("ЕдиницаИзмерения",СтрокаТоваров.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("СтавкаНДС",СтрокаТоваров.СтавкаНДС);

			СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаТоваров, ТабличнаяЧасть, Объект.НомераГТД);
			
		Иначе   			
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" Тогда
			
			Если НЕ Объект.УчитыватьАкциз Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(СтрокаТабличнойЧасти, ИмяТабЧасти, Объект.Ссылка.Метаданные());
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьПоСчету(Объект, ИмяТабЧасти, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		СкопироватьТовары(Объект, Счет);
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СкопироватьУслуги(Объект, Счет);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура СкопироватьТовары(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателюТовары.Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.СтавкаАкциза,
	|	СчетНаОплатуПокупателюТовары.СуммаАкциза,
	|	СчетНаОплатуПокупателюТовары.Коэффициент,
	|	СчетНаОплатуПокупателюТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,
									|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ФлагиНалоговОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "УчитыватьНДС, СуммаВключаетНДС, УчитыватьАкциз, СуммаВключаетАкциз");

	ПересчитыватьНДС   = ФлагиНалоговОснования.УчитыватьНДС <> ДанныеОбъекта.УчитыватьНДС
						ИЛИ ФлагиНалоговОснования.СуммаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС;
	ПересчитыватьАкциз = ФлагиНалоговОснования.УчитыватьАкциз <> ДанныеОбъекта.УчитыватьАкциз
						ИЛИ ФлагиНалоговОснования.СуммаВключаетАкциз <> ДанныеОбъекта.СуммаВключаетАкциз;
						
	ПересчитыватьЦенуПоФлагамНалогов = ПересчитыватьНДС ИЛИ ПересчитыватьАкциз;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СтрокаТЧ.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
		
		СтрокаТЧ.Коэффициент = ?(СтрокаТЧ.Коэффициент = 0, 1, СтрокаТЧ.Коэффициент);
		
		//Получим Сумму акциза на единицу товаров, т.к. акциз может быть рассчитан по коэффициенту
		СуммаАкциза  = СтрокаТЧ.СуммаАкциза/?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество);
		
		Если ПересчитыватьАкциз Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
		
		Если ПересчитыватьЦенуПоФлагамНалогов Тогда
			СтрокаТЧ.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена, 
																	Неопределено,
																	ФлагиНалоговОснования.СуммаВключаетНДС,
																	ДанныеОбъекта.УчитыватьНДС,
																	ДанныеОбъекта.СуммаВключаетНДС, 
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС),
																	ФлагиНалоговОснования.СуммаВключаетАкциз,
																	ДанныеОбъекта.УчитыватьАкциз,
																	ДанныеОбъекта.СуммаВключаетАкциз,
																	СуммаАкциза);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ПересчитыватьНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьУслуги(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюУслуги.Содержание,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Цена,
	|	СчетНаОплатуПокупателюУслуги.Сумма,
	|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС,
									|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ФлагиНалоговОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "УчитыватьНДС, СуммаВключаетНДС");

	ПересчитыватьНДС = ФлагиНалоговОснования.УчитыватьНДС <> ДанныеОбъекта.УчитыватьНДС
						ИЛИ ФлагиНалоговОснования.СуммаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС;
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если ПересчитыватьНДС Тогда
			СтрокаТЧ.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена, 
																	Неопределено,
																	ФлагиНалоговОснования.СуммаВключаетНДС,
																	ДанныеОбъекта.УчитыватьНДС,
																	ДанныеОбъекта.СуммаВключаетНДС, 
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
																	
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик       = Реквизиты.Организация;
	НалогоплательщикАкциза = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		НалогоплательщикАкциза = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.Акциз);
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	Реквизиты.Вставить("НалогоплательщикАкциза", НалогоплательщикАкциза);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НалогоплательщикАкциза	 , "НалогоплательщикАкциза");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОтгрузкаПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",	           НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги",	           НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеОтложенНДС",      НСтр("ru = 'НДС (отложен)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенАкциз",    НСтр("ru = 'Акциз'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ЭтоПередачаСП",	           Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	Запрос.УстановитьПараметр("СчетУчетаНДСОтложенный",    ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.НомераГТД КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	ВЫБОР
    |		КОГДА Реквизиты.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде) 
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаПодписанияГЗ
	|	КОНЕЦ КАК Дата,
	|	Реквизиты.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС,
	|	ВЫРАЗИТЬ(Реквизиты.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплатуПокупателю
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС,
	|	ЕСТЬNULL(Реквизиты.СчетНаОплатуПокупателю, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)) КАК СчетНаОплатуПокупателю,
	|	НЕ Реквизиты.СчетНаОплатуПокупателю ЕСТЬ NULL КАК ЕстьСчетНаОплатуПокупателю	
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаАкциза,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкцизаПоРеализации КАК СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ3 КАК СубконтоЗатратНУ3,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3,
		|	ТаблицаУслуги.Содержание
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьНомераГТД Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +

		"ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаНомераГТД.КлючСвязи,
		|	ТаблицаНомераГТД.Количество КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.НомераГТД КАК ТаблицаНомераГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаНомераГТД.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;


	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаАкциза,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаАкциза
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаАкцизаВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	СуммыТаблицыТовары.СуммаАкциза
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаАкцизаВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	СуммыТаблицыТовары.СуммаАкциза,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СтавкаАкциза,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаАкциза,
	|	ВременнаяТаблицаТовары.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаТовары.АкцизВидОперацииРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходовБУ,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаТовары.СчетДоходовНУ,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаТовары.СчетЗатратБУ,
	|	ВременнаяТаблицаТовары.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаТовары.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаТовары.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаТовары.СчетЗатратНУ,
	|	ВременнаяТаблицаТовары.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаТовары.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаТовары.СубконтоЗатратНУ3,
	|	ВременнаяТаблицаТовары.КлючСвязи,
	|	ВременнаяТаблицаТовары.Коэффициент
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаУслуги.СчетДоходовБУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаУслуги.СчетДоходовНУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаУслуги.Содержание
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Себестоимость,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВал,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|		ИНАЧЕ ТаблицаТовары.СчетЗатратБУ
		|	КОНЕЦ КАК КорСчетСписанияБУ,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.Контрагент
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратБУ1
		|	КОНЕЦ КАК КорСубконтоБУ1,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.ДоговорКонтрагента
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратБУ2
		|	КОНЕЦ КАК КорСубконтоБУ2,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.Ссылка
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратБУ3
		|	КОНЕЦ КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА &СчетУчетаРасчетовСКонтрагентомНУ
		|		ИНАЧЕ ТаблицаТовары.СчетЗатратНУ
		|	КОНЕЦ КАК КорСчетСписанияНУ,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.Контрагент
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратНУ1
		|	КОНЕЦ КАК КорСубконтоНУ1,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.ДоговорКонтрагента
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратНУ2
		|	КОНЕЦ КАК КорСубконтоНУ2,
		|	ВЫБОР
		|		КОГДА &ЭтоПередачаСП
		|			ТОГДА Реквизиты.Ссылка
		|		ИНАЧЕ ТаблицаТовары.СубконтоЗатратНУ3
		|	КОНЕЦ КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	&СодержаниеСписаныТМЗ КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги Тогда 
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкцизаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетЗатратБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ЛОЖЬ КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	0 КАК СуммаАкцизаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
		|	ТаблицаУслуги.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ИСТИНА КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаРеализация.Сумма КАК Сумма,
	|	ВременнаяТаблицаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаРеализация.СуммаАкциза КАК СуммаАкциза,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.Партия КАК Партия,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаРеализация.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов + ТаблицаТовары.СуммаНДСВзаиморасчетов + ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС + ТаблицаТовары.СуммаАкциза КАК Сумма
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаУслуги.СуммаВзаиморасчетов + ТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|		ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	ИЗ
		|		ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС И НЕ (Реквизиты.ЕстьТовары И Реквизиты.УчитыватьАкциз) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Результаты запросов ниже будут использоваться для формирования движений по регистру НДС.
	// В регистре НДС предполагается, что ресурсы СуммаБезНДС и ОборотПоРеализации заполняются
	// суммами, включающими акциз. Поле ТаблицаТовары.Сумма не содержит акциза и НДС,
	// поэтому при определении СуммаБезНДС и ОборотПоРеализации к сумме прибавляется акциз. 
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК СуммаБезНДС,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК ОборотПоРеализации,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС, 					   
		|	0 КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ТаблицаТовары.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ТоварыАкциз"",
		|	&СинонимТовары,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	0,
		|	0,
		|	ТаблицаТовары.СуммаАкциза,
		|	0,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|	0,
		|	ТаблицаТовары.СтавкаАкциза,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Ссылка,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.Акциз),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог),
		|	НЕОПРЕДЕЛЕНО,
		|	&СодержаниеВыделенАкциз,
		|	ИСТИНА,
		|	ТаблицаТовары.Количество,
		|	СправочникНоменклатура.КоэффициентРасчетаОблагаемойБазыАкциза,
		|    НЕОПРЕДЕЛЕНО,
		|	1
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Реквизиты.УчитыватьАкциз 
		|   И НЕ ТаблицаТовары.СтавкаАкциза = ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяССылка)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма КАК СуммаБезНДС,
		|	ТаблицаУслуги.Сумма КАК ОборотПоРеализации,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС";
		
		Если Реквизиты.ОтложитьНачислениеНДС И НЕ Реквизиты.ЕстьТовары Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,", "&СчетУчетаНДСОтложенный КАК КорСчет,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,", "Реквизиты.Контрагент КАК КорСубконто1,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,", "Реквизиты.Ссылка КАК КорСубконто2,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СодержаниеВыделенНДС КАК Содержание,", "&СодержаниеОтложенНДС КАК Содержание,");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ЕстьНомераГТД  Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();
				 
	 Иначе     		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
		
	КонецЕсли;
	                     			
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтгрузкаПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Не Реквизиты.ЕстьСчетНаОплатуПокупателю Тогда
		ПараметрыПроведения.Вставить("ТаблицаСчетовНаОплату",               Неопределено);
		ПараметрыПроведения.Вставить("ОтгрузкаТоваровОказаниеУслугПоСчету", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	ЧастиЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ИЗ
	|	Реквизиты КАК ТаблицаРеквизиты
	|ГДЕ
	|	ТаблицаРеквизиты.СчетНаОплатуПокупателю <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)");
			
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, Символы.ПС+"ОБЪЕДИНИТЬ"+Символы.ПС) + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();;
	НомераТаблиц.Вставить("ТаблицаСчетовНаОплату", НомераТаблиц.Количество());
	
	Если Реквизиты.ЕстьТовары Или Реквизиты.ЕстьУслуги Тогда
			НомераТаблиц.Вставить("ОтгрузкаТоваровОказаниеУслугПоСчету", НомераТаблиц.Количество());
			ТекстЗапроса = ТекстЗапроса +
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ЭтоУслуга,
				|	ВложенныйЗапрос.Номенклатура,
				|	ВложенныйЗапрос.Содержание,
				|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
				|ИЗ
				|	(";
			Если Реквизиты.ЕстьТовары Тогда
				ТекстЗапроса = ТекстЗапроса +
				"ВЫБРАТЬ
				|		ЛОЖЬ КАК ЭтоУслуга,
				|		ТаблицаТовары.Номенклатура КАК Номенклатура,
				|		"""" КАК Содержание,
				|		ТаблицаТовары.Количество КАК Количество
				|	ИЗ
				|		ТаблицаТовары КАК ТаблицаТовары";
			КонецЕсли;
			Если Реквизиты.ЕстьУслуги Тогда
				Если Реквизиты.ЕстьТовары Тогда
					ТекстЗапроса = ТекстЗапроса +" ОБЪЕДИНИТЬ ВСЕ ";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса +
				"ВЫБРАТЬ
				|	ИСТИНА КАК ЭтоУслуга,
				|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
				|	ТаблицаУслуги.Содержание КАК Содержание,
				|	ВЫБОР
				|		КОГДА ТаблицаУслуги.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ ТаблицаУслуги.Количество
				|	КОНЕЦ КАК Количество
				|ИЗ
				|	ТаблицаУслуги КАК ТаблицаУслуги";
			КонецЕсли;
						
			ТекстЗапроса = ТекстЗапроса + ") КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ЭтоУслуга,
				|	ВложенныйЗапрос.Номенклатура,
				|	ВложенныйЗапрос.Содержание" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("ОтгрузкаТоваровОказаниеУслугПоСчету", Неопределено);
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция РеализацииПоСчетам(СчетаНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаНаОплату", СчетаНаОплату);

	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ВЫРАЗИТЬ(Шапка.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплату,
	|	Шапка.Ссылка КАК Реализация
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Шапка
	|ГДЕ
	|	ВЫРАЗИТЬ(Шапка.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) В (&СчетаНаОплату)
	|	И Шапка.Проведен";
	
	// Считаем, что если у пользователя есть доступ к счетам на оплату, то к реализациям тоже должен быть.
	// Поэтому для оптимизации вкючаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции  

Функция ТоварыУслугиКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчету, Регистратор=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("РеализацииПоСчету", РеализацииПоСчету);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
		+ ТекстЗапросаРеализованнаяНоменклатура(НомераТаблиц)
		+ ТекстЗапросаТоварыУслугиКРеализацииПоСчету(НомераТаблиц);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Результат.Вставить(НомерТаблицы.Ключ, РезультатЗапроса[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	РеализованнаяНоменклатура = Результат.РеализованнаяНоменклатура;
	
	ПоляОтбора = "ЭтоУслуга, Номенклатура, Цена, Содержание"; 
	РеализованнаяНоменклатура.Индексы.Добавить(ПоляОтбора);
	Отбор = Новый Структура(ПоляОтбора);
	
	РеквизитыСчета = Новый Структура("СуммаВключаетНДС", Истина);
	Если Результат.РеквизитыСчета.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчета, Результат.РеквизитыСчета[0]);
	КонецЕсли;
	
	ТоварыУслугиКРеализацииПоСчету = Результат.ТоварыУслуги;
	
	// первый проход по цене, второй - без цены
	Для Проход = 0 По 1 Цикл
		КоличествоСтрок = ТоварыУслугиКРеализацииПоСчету.Количество();
		Для Поз = 1 По КоличествоСтрок Цикл
			СтрокаКРеализации = ТоварыУслугиКРеализацииПоСчету[КоличествоСтрок-Поз];
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаКРеализации); 
						
			СтрокиРеализовано = РеализованнаяНоменклатура.НайтиСтроки(Отбор);
			
			Для каждого СтрокаРеализовано Из СтрокиРеализовано Цикл
				Если СтрокаРеализовано.Количество < СтрокаКРеализации.КоличествоКРеализации Тогда
					// Частичная отгрузка - уменьшим количество в итоговой таблице
					СтрокаКРеализации.КоличествоКРеализации = СтрокаКРеализации.КоличествоКРеализации - СтрокаРеализовано.Количество;
					// Количесто услуг в счете может быть равно 0. В этом случае в итоговый доумент также надо передавать "0"
					СтрокаКРеализации.Количество = Мин(СтрокаКРеализации.Количество, СтрокаКРеализации.КоличествоКРеализации);
					СтрокаРеализовано.Количество = 0;
					
					ДанныеСтрокиКРеализации = Новый Структура(
					"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, 
					|СтавкаНДС, СуммаНДС, ЭтоУслуга, КодТНВЭД, КоличествоКРеализации");
					
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиКРеализации, СтрокаКРеализации); 
					
					ДанныеОбъекта = Новый Структура(
					"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
					|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
					|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
					
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Регистратор); 
										
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиКРеализации);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиКРеализации, ДанныеОбъекта);  
					
					ЗаполнитьЗначенияСвойств(СтрокаКРеализации, ДанныеСтрокиКРеализации);
				Иначе
					// Строка реализована полностью - удалим ее из итоговой таблицы
					СтрокаРеализовано.Количество = СтрокаРеализовано.Количество - СтрокаКРеализации.Количество;
					ТоварыУслугиКРеализацииПоСчету.Удалить(СтрокаКРеализации);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Отбор.Удалить("Цена");
		РеализованнаяНоменклатура.Свернуть("ЭтоУслуга, Номенклатура, Содержание", "Количество");
	КонецЦикла;
	
	// Удалим служебную колонку
	ТоварыУслугиКРеализацииПоСчету.Колонки.Удалить("КоличествоКРеализации");
	
	Возврат ТоварыУслугиКРеализацииПоСчету;
	
КонецФункции  

Функция ПолучитьДанныеПоОтгрузкам(СчетНаОплату, РеализацииПоСчету) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("РеализацииПоСчету", РеализацииПоСчету);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
		+ ТекстЗапросаРеализованнаяНоменклатура(НомераТаблиц)
		+ ТекстЗапросаТоварыУслугиКРеализацииПоСчету(НомераТаблиц);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Результат.Вставить(НомерТаблицы.Ключ, РезультатЗапроса[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеквизитыСчета(НомераТаблиц) Экспорт
	НомераТаблиц.Вставить("ВТ_РеализацииПоСчету", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыСчета", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТоварыУслуги", НомераТаблиц.Количество());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&РеализацииПоСчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСчета.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК РеквизитыСчета
	|ГДЕ
	|	РеквизитыСчета.Ссылка = &СчетНаОплату
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЕСТЬNULL(СправочникНоменклатура.БазоваяЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СправочникНоменклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО) КАК КодТНВЭД,
	|	1 КАК Коэффициент,
	|	Товары.Количество КАК КоличествоКРеализации,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	"""" КАК Содержание
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &СчетНаОплату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(СправочникНоменклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО),
	|	1,
	|	ВЫБОР
	|		КОГДА Услуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ Услуги.Количество
	|	КОНЕЦ,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС,
	|	Услуги.НомерСтроки,
	|	Услуги.Содержание
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Услуги.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Услуги.Ссылка = &СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции  

Функция ТекстЗапросаРеализованнаяНоменклатура(НомераТаблиц) Экспорт
	НомераТаблиц.Вставить("ВТ_РеализованнаяНоменклатура", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЭтоУслуга КАК ЭтоУслуга,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_РеализованнаяНоменклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ЭтоУслуга,
	|		РеализованныеТовары.Номенклатура КАК Номенклатура,
	|		"""" КАК Содержание,
	|		РеализованныеТовары.Цена КАК Цена,
	|		РеализованныеТовары.Количество КАК Количество
	|	ИЗ
	|		ВТ_РеализацииПоСчету КАК ВТ_РеализацииПоСчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализованныеТовары
	|			ПО ВТ_РеализацииПоСчету.РеализацияТоваров = РеализованныеТовары.Ссылка
	|	ГДЕ
	|		(ВТ_РеализацииПоСчету.СчетНаОплату = &СчетНаОплату)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИСТИНА,
	|		РеализованныеУслуги.Номенклатура,
	|		РеализованныеУслуги.Содержание,
	|		РеализованныеУслуги.Цена,
	|		ВЫБОР
	|			КОГДА РеализованныеУслуги.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ РеализованныеУслуги.Количество
	|		КОНЕЦ
	|	ИЗ
	|		ВТ_РеализацииПоСчету КАК ВТ_РеализацииПоСчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализованныеУслуги
	|			ПО ВТ_РеализацииПоСчету.РеализацияТоваров = РеализованныеУслуги.Ссылка
	|	ГДЕ
	|		(ВТ_РеализацииПоСчету.СчетНаОплату = &СчетНаОплату)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ЭтоУслуга,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Содержание";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаТоварыУслугиКРеализацииПоСчету(НомераТаблиц) Экспорт
	НомераТаблиц.Вставить("РеализованнаяНоменклатура", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_РеализованнаяНоменклатура.ЭтоУслуга КАК ЭтоУслуга,
	|	ВТ_РеализованнаяНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТ_РеализованнаяНоменклатура.Содержание КАК Содержание,
	|	ВТ_РеализованнаяНоменклатура.Цена КАК Цена,
	|	СУММА(ВТ_РеализованнаяНоменклатура.Количество) КАК Количество
	|ИЗ
	|	ВТ_РеализованнаяНоменклатура КАК ВТ_РеализованнаяНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализованнаяНоменклатура.ЭтоУслуга,
	|	ВТ_РеализованнаяНоменклатура.Содержание,
	|	ВТ_РеализованнаяНоменклатура.Цена,
	|	ВТ_РеализованнаяНоменклатура.Номенклатура";
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// З-2 (накладная на отпуск запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ2";
	КомандаПечати.Представление = НСтр("ru = 'З-2 (накладная на отпуск запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Р-1 (акт выполненных работ)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВыполненныхРаботР1";
	КомандаПечати.Представление = НСтр("ru = 'Р-1 (акт выполненных работ)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 53;
	
	// Р1 с колонками НДС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВыполненныхРаботР1_НДС";
	КомандаПечати.Представление = НСтр("ru = 'Р-1 (акт выполненных работ, с НДС)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 54;
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечатиСчетаФактуры";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 55;
	
	// Счет-фактура в валюте регл. учета
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (в валюте регл. учета)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечатиСчетаФактуры";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 56;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 57;
	КонецЕсли;
	
	// Комплект документов (реализация товаров)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная,НакладнаяЗ2,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (реализация товаров)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная,НакладнаяЗ2,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер, реализация товаров)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Комплект документов (оказание услуг)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг,АктВыполненныхРаботР1,АктВыполненныхРаботР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (оказание услуг)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 77;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг,АктВыполненныхРаботР1,АктВыполненныхРаботР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер, оказание услуг)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 78;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная,НакладнаяЗ2,АктОбОказанииУслуг,АктВыполненныхРаботР1,АктВыполненныхРаботР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасходнаяНакладная",
			НСтр("ru = 'Расходная накладная'"),
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("РасходнаяНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
	КонецЕсли;

	// Печать акта об оказании услуг
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктОбОказанииУслуг",
			НСтр("ru = 'Акт об оказании услуг'"),
			ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("АктОбОказанииУслуг"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	

	КонецЕсли;
	
	// Печать формы З-2
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяЗ2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяЗ2",
			НСтр("ru = 'З-2 (накладная на отпуск запасов)'"),
			ПечатьЗ2(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_З2");
	КонецЕсли;
	
	// Печать формы Р-1
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВыполненныхРаботР1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктВыполненныхРаботР1",
			НСтр("ru = 'Р-1 (акт выполненных работ)'"),
			ПечатьР1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_Р1");
	КонецЕсли;
		
	// Печать формы Р-1 с колонками НДС
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВыполненныхРаботР1_НДС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктВыполненныхРаботР1_НДС",
			НСтр("ru = 'Р-1 (акт выполненных работ, с НДС)'"),
			ПечатьР1(МассивОбъектов, ОбъектыПечати, Истина),
			,
			"ОбщийМакет.ПФ_MXL_Р1");
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданный") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданный",
			НСтр("ru = 'Счет-фактура'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Ложь, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданный"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданныйВВалютеРеглУчета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданныйВВалютеРеглУчета",
			НСтр("ru = 'Счет-фактура (в валюте регл. учета)'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Истина, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданныйВВалютеРеглУчета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.УчитыватьАкциз,
	|	РеализацияТоваровУслуг.СуммаВключаетАкциз,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.МоментВремени,
	|	РеализацияТоваровУслуг.УдалитьДоверенность,
	|	РеализацияТоваровУслуг.ДоверенностьЛицо,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьНомер
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_ДанныеДокумента.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛиц
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_ДанныеДокумента.Склад
	|			И ОтветственныеЛица.Период <= ВТ_ДанныеДокумента.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_ДанныеДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛиц.Ссылка,
	|	ВТ_ПериодыОтвЛиц.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛиц КАК ВТ_ПериодыОтвЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛиц.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛиц.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.Номер,
	|	ВТ_ДанныеДокумента.Дата,
	|	ВТ_ДанныеДокумента.ДоговорКонтрагента КАК Основание,
	|	ВТ_ДанныеДокумента.Контрагент,
	|	ВТ_ДанныеДокумента.Организация,
	|	ВТ_ДанныеДокумента.СтруктурноеПодразделение,
	|	ВТ_ДанныеДокумента.Склад,
	|	ВТ_ДанныеДокумента.СуммаДокумента,
	|	ВТ_ДанныеДокумента.ВалютаДокумента,
	|	ВТ_ДанныеДокумента.УчитыватьНДС,
	|	ВТ_ДанныеДокумента.СуммаВключаетНДС,
	|	ВТ_ДанныеДокумента.УчитыватьАкциз,
	|	ВТ_ДанныеДокумента.СуммаВключаетАкциз,
	|	ВТ_ДанныеДокумента.Грузополучатель,
	|	ВТ_ДанныеДокумента.Ссылка,
	|	ВТ_МОЛ.ФизическоеЛицо КАК ОтпустилМОЛ,
	|	ВТ_ДанныеДокумента.ДоверенностьНомер,
	|	ВТ_ДанныеДокумента.ДоверенностьДата,
	|	ВТ_ДанныеДокумента.ДоверенностьВыдана,
	|	ВТ_ДанныеДокумента.ДоверенностьЛицо,
	|	ВТ_ДанныеДокумента.УдалитьДоверенность
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_ДанныеДокумента.Ссылка = ВТ_МОЛ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеДокумента.МоментВремени";
	
	ДанныеДокументов = Запрос.Выполнить().Выбрать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Ссылка,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СуммаАкциза,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Ссылка         		 КАК Ссылка,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		СУММА(СуммаАкциза)   КАК СуммаАкциза,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	СГРУППИРОВАТЬ ПО
	|		Ссылка,
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка,
	|	Номенклатура,
	|	РеализацияТоваровУслуг.Содержание,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   0,
	|	НомерСтроки,
	|	2
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|
	|ИТОГИ 
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаТоварыИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная", КодЯзыка);
	
	// Области макета
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик 		= Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель 		= Макет.ПолучитьОбласть("Покупатель");
	ОбластьГрузополучатель 	= Макет.ПолучитьОбласть("Грузополучатель");
	ОбластьДоверенность 	= Макет.ПолучитьОбласть("Доверенность");
	ОбластьОснование		= Макет.ПолучитьОбласть("Основание");
	ОбластьСклад 			= Макет.ПолучитьОбласть("Склад");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть(ОбластьШапки);
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть(ОбластьСтроки);
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС 		= Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьИтогоСНДС 		= Макет.ПолучитьОбласть("ИтогоСНДС");
	ОбластьСуммаПрописью 	= Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	
	Пока ДанныеДокументов.Следующий() Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);

		ОбластьЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДанныеДокументов.Ссылка, НСтр("ru = 'Расходная накладная'",КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьЗаголовок);

		СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
		ТабДокумент.Вывести(ОбластьПоставщик);

		СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Контрагент, ДанныеДокументов.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьПокупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
		ТабДокумент.Вывести(ОбластьПокупатель);
		
		Если (ДанныеДокументов.Контрагент <> ДанныеДокументов.Грузополучатель) И ЗначениеЗаполнено(ДанныеДокументов.Грузополучатель) Тогда
			ПредставлениеГрузополучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Грузополучатель, ДанныеДокументов.Дата), "ПолноеНаименование,");
			ОбластьГрузополучатель.Параметры.ПредставлениеГрузополучателя = СокрЛП(ПредставлениеГрузополучателя);
			ТабДокумент.Вывести(ОбластьГрузополучатель);
		КонецЕсли;
		
	
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ДанныеДокументов);
		
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности,ОбластьДоверенность,,,,,Истина);
		Если ЗначениеЗаполнено(ОбластьДоверенность.Параметры.Доверенность) Тогда
			ТабДокумент.Вывести(ОбластьДоверенность); 
		КонецЕсли;
		        		
		Если ЗначениеЗаполнено(ДанныеДокументов.Основание) Тогда 
			ОбластьОснование.Параметры.Заполнить(ДанныеДокументов);
			ТабДокумент.Вывести(ОбластьОснование);
		КонецЕсли;

		ВыборкаТоварыИтоги.Сбросить();
		
		Если ВыборкаТоварыИтоги.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаТоварыИтоги.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары <> Неопределено И ВыборкаСтрокТовары.НайтиСледующий(1, "ID") Тогда
			ОбластьСклад.Параметры.Склад = ДанныеДокументов.Склад;
			ТабДокумент.Вывести(ОбластьСклад); 
		КонецЕсли;	
		
		Если ВыводитьКоды Тогда
			ОбластьШапкаТаблицы.Параметры.Колонка = Колонка;
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);

		Сумма    = 0;
		СуммаНДС = 0;
		НомерСтроки = 0;
		Если ВыборкаСтрокТовары <> Неопределено Тогда 
			ВыборкаСтрокТовары.Сбросить();
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаТаблицы.Параметры.Товар = ?(ЗначениеЗаполнено(СокрЛП(ВыборкаСтрокТовары.Товар)), СокрЛП(ВыборкаСтрокТовары.Товар), ВыборкаСтрокТовары.Номенклатура);
				
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицы.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;				
				КонецЕсли;   	
				
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма + ?((ДанныеДокументов.УчитыватьАкциз И НЕ ДанныеДокументов.СуммаВключаетАкциз), ВыборкаСтрокТовары.СуммаАкциза, 0);
				СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
				
			КонецЦикла;
		КонецЕсли;
			
		// Вывести Итого
		ОбластьИтого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьИтого);

		// Вывести ИтогоНДС
		Если ДанныеДокументов.УчитыватьНДС Тогда
			ОбластьИтогоНДС.Параметры.НДС 	   = ?(ДанныеДокументов.СуммаВключаетНДС, НСтр("ru='В том числе НДС:'",КодЯзыка), НСтр("ru='Сумма НДС:'",КодЯзыка));
			ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ТабДокумент.Вывести(ОбластьИтогоНДС); 
			
			Если НЕ ДанныеДокументов.СуммаВключаетНДС ТОгда
				ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ТабДокумент.Вывести(ОбластьИтогоСНДС);
			КонецЕсли;
			
		КонецЕсли;

		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ДанныеДокументов.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %1, на сумму %2'",КодЯзыка);
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока,
															НомерСтроки,
											   		  		ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента));
		
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьСуммаПрописью);

		// Вывести подписи
		ОбластьПодписи.Параметры.ОтпустилМОЛПредставление = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ДанныеДокументов.ОтпустилМОЛ);
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОПоставщике.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			СуммаКПрописи,
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг текста заголовка
						ТабДокумент.Область(2, 2, 2, 30).Разъединить();
						ТабДокумент.Область(2, 2, 2, 25).Объединить();
						ТабДокумент.Область(2,27, 2, 30).Обвести();
						// сдвиг представления поставщика
						ТабДокумент.Область(4, 9, 4, 30).Разъединить();
						ТабДокумент.Область(4, 9, 4, 25).Объединить();
						// сдвиг представления получателя
						ТабДокумент.Область(6, 9, 6, 30).Разъединить();
						ТабДокумент.Область(6, 9, 6, 25).Объединить();
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо КАК ФИООтветственного,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период,
	|	РаботникиОрганизации.Организация КАК Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ПериодыРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО РаботникиОрганизации.Организация = ДанныеДокумента.Организация
	|			И РаботникиОрганизации.Период <= ДанныеДокумента.Дата
	|			И (ДанныеДокумента.ФИООтветственного = РаботникиОрганизации.Сотрудник.Физлицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРаботников.Ссылка КАК Ссылка,
	|	ПериодыРаботников.Организация КАК Организация,
	|	ПериодыРаботников.ФизЛицо,
	|	РаботникиОрганизации.Должность КАК ДолжностьОтветственного
	|ПОМЕСТИТЬ ВТ_ПериодыДолжности
	|ИЗ
	|	ВТ_ПериодыРаботников КАК ПериодыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПериодыРаботников.Период = РаботникиОрганизации.Период
	|			И ПериодыРаботников.Организация = РаботникиОрганизации.Организация
	|			И ПериодыРаботников.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо 
	|           И  РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Основание КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ФИООтветственного,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации,
	|	ВТ_ПериодыДолжности.ДолжностьОтветственного КАК ДолжностьОтветственного
	|ИЗ
	|	ДанныеДокумента КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыДолжности КАК ВТ_ПериодыДолжности
	|		ПО РеализацияТоваровУслуг.Ссылка = ВТ_ПериодыДолжности.Ссылка";	
	
	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслуг.Содержание КАК СТРОКА(400))
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ КАК Товар,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма КАК Сумма,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаУслугиИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Акт";
	
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт", КодЯзыка);
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик 		= Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель 		= Макет.ПолучитьОбласть("Покупатель");
	ОбластьОснование		= Макет.ПолучитьОбласть("Основание");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("Строка");
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС 		= Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьСуммаПрописью 	= Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	
	Пока ДанныеДокументов.Следующий() Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДанныеДокументов.Ссылка, НСтр("ru='Акт'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		Если НЕ ЗначениеЗаполнено(ДанныеДокументов.БанковскийСчетОрганизации) Тогда
			СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		Иначе
			СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата, , ДанныеДокументов.БанковскийСчетОрганизации);
		КонецЕсли;	
		
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
		ОбластьПоставщик.Параметры.Поставщик = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьПоставщик);

		СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Контрагент, ДанныеДокументов.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьПокупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
		ОбластьПокупатель.Параметры.Получатель = ДанныеДокументов.Контрагент;
		ТабДокумент.Вывести(ОбластьПокупатель);
		
		Если ЗначениеЗаполнено(ДанныеДокументов.Основание) Тогда 
			ОбластьОснование.Параметры.Заполнить(ДанныеДокументов);
			ТабДокумент.Вывести(ОбластьОснование);
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		НомерСтроки = 0;

		ВыборкаУслугиИтоги.Сбросить();
		
		Если ВыборкаУслугиИтоги.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокУслуги = ВыборкаУслугиИтоги.Выбрать();
		Иначе
			ВыборкаСтрокУслуги = Неопределено;
		КонецЕсли;
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		Если ВыборкаСтрокУслуги <> Неопределено Тогда 
			
			Пока ВыборкаСтрокУслуги.Следующий() Цикл

				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
				ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
		        ОбластьСтрокаТаблицы.Параметры.Товар = СокрЛП(ВыборкаСтрокУслуги.Товар);
				
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);

			КонецЦикла;
			
			Сумма    = ВыборкаУслугиИтоги.Сумма;
			СуммаНДС = ВыборкаУслугиИтоги.СуммаНДС;
			
		КонецЕсли;

		ОбластьИтого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьИтого);

		Если ДанныеДокументов.УчитыватьНДС Тогда

			ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьИтогоНДС.Параметры.НДС      = ?(ДанныеДокументов.СуммаВключаетНДС, НСтр("ru='В том числе НДС'", КодЯзыка), НСтр("ru='Сумма НДС'", КодЯзыка));
			ТабДокумент.Вывести(ОбластьИтогоНДС);

		КонецЕсли;

		СуммаКПрописи = Сумма + ?(ДанныеДокументов.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока= НСтр("ru='Всего оказано услуг %1, на сумму %2'", КодЯзыка);
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока,
																НомерСтроки,
		                                       					ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента));
		
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьСуммаПрописью);

		ОбластьПодписи.Параметры.Организация              = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьПодписи.Параметры.РНН_БИНОрганизации       = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ДанныеДокументов.Дата);
		ОбластьПодписи.Параметры.АдресОрганизации         = СведенияОбОрганизации.ЮридическийАдрес;
		ОбластьПодписи.Параметры.РасчетныйСчетОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 в %2, %3'", КодЯзыка),
																	СведенияОбОрганизации.НомерСчета, 
																	СведенияОбОрганизации.Банк, 
																	СведенияОбОрганизации.АдресБанка);
														 

	   	ОбластьПодписи.Параметры.БИКОрганизации           = СведенияОбОрганизации.БИК;													 
		Если ТипЗнч(ДанныеДокументов.ФИООтветственного) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеОтветственного	= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ДанныеДокументов.Организация, ДанныеДокументов.ФИООтветственного, ДанныеДокументов.Дата); 
			ОтветственныйДляПечати  = ДанныеОтветственного.Представление;
			ДолжностьОтветственного = ДанныеОтветственного.Должность;
		Иначе
			ОтветственныйДляПечати = ДанныеДокументов.ФИООтветственного;
		КонецЕсли;
		ОбластьПодписи.Параметры.ДолжностьОтветственного  = ДолжностьОтветственного;
		ОбластьПодписи.Параметры.ФИООтветственного        = ОтветственныйДляПечати;
		
		ОбластьПодписи.Параметры.Контрагент               = СведенияОПокупателе.ПолноеНаименование;
		ОбластьПодписи.Параметры.РНН_БИНКонтрагента       = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, ДанныеДокументов.Дата);
		ОбластьПодписи.Параметры.АдресКонтрагента         = СведенияОПокупателе.ЮридическийАдрес;
		ОбластьПодписи.Параметры.РасчетныйСчетКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 в %2, %3'", КодЯзыка),
																	СведенияОПокупателе.НомерСчета, 
																	СведенияОПокупателе.Банк, 
																	СведенияОПокупателе.АдресБанка);
														 
	   	ОбластьПодписи.Параметры.БИККонтрагента           = СведенияОПокупателе.БИК;	
		
		ТабДокумент.Вывести(ОбластьПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			СуммаКПрописи,
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг текста заголовка
						ТабДокумент.Область(2, 2, 2, 34).Разъединить();
						ТабДокумент.Область(2, 2, 2, 29).Объединить();
						ТабДокумент.Область(2,31, 2, 34).Обвести();
						// сдвиг предлставления поставщика
						ТабДокумент.Область(4, 6, 4, 34).Разъединить();
						ТабДокумент.Область(4, 6, 4, 29).Объединить();
						// сдвиг представления получателя
						ТабДокумент.Область(6, 6, 6, 34).Разъединить();
						ТабДокумент.Область(6, 6, 6, 29).Объединить();
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьЗ2(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.УчитыватьАкциз,
	|	РеализацияТоваровУслуг.СуммаВключаетАкциз,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.УдалитьДоверенность,
	|	РеализацияТоваровУслуг.ДоверенностьЛицо,
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.МоментВремени,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Ответственный.ФизЛицо
	|		ИНАЧЕ РеализацияТоваровУслуг.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьНомер
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_ДанныеДокумента.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛиц
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_ДанныеДокумента.Склад
	|			И ОтветственныеЛица.Период <= ВТ_ДанныеДокумента.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_ДанныеДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛиц.Ссылка,
	|	ВТ_ПериодыОтвЛиц.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛиц КАК ВТ_ПериодыОтвЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛиц.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛиц.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.Номер,
	|	ВТ_ДанныеДокумента.Дата,
	|	ВТ_ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ВТ_ДанныеДокумента.ДоговорКонтрагента КАК Основание,
	|	ВТ_ДанныеДокумента.Контрагент,
	|	ВТ_ДанныеДокумента.Организация,
	|	ВТ_ДанныеДокумента.СтруктурноеПодразделение,
	|	ВТ_ДанныеДокумента.Склад,
	|	ВТ_ДанныеДокумента.СуммаДокумента,
	|	ВТ_ДанныеДокумента.ВалютаДокумента,
	|	ВТ_ДанныеДокумента.УчитыватьНДС,
	|	ВТ_ДанныеДокумента.СуммаВключаетНДС,
	|	ВТ_ДанныеДокумента.УчитыватьАкциз,
	|	ВТ_ДанныеДокумента.СуммаВключаетАкциз,
	|	ВТ_ДанныеДокумента.Грузополучатель,
	|	ВТ_ДанныеДокумента.УдалитьДоверенность,
	|	ВТ_ДанныеДокумента.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ВТ_ДанныеДокумента.Ссылка,
	|	ВТ_МОЛ.ФизическоеЛицо КАК ОтпустилМОЛ,
	|	ВТ_ДанныеДокумента.Ответственный,
	|	ВТ_ДанныеДокумента.ДоверенностьВыдана,
	|	ВТ_ДанныеДокумента.ДоверенностьДата,
	|	ВТ_ДанныеДокумента.ДоверенностьНомер
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_ДанныеДокумента.Ссылка = ВТ_МОЛ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеДокумента.МоментВремени";
		
	ДанныеДокументов = Запрос.Выполнить().Выбрать();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	МИНИМУМ(РеализацияТоваровУслугТовары.НомерСтроки) КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Наименование
	|	КОНЕЦ КАК ТоварПредставление,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаАкциза) КАК СуммаАкциза
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Наименование
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаАкциза)
	|ПО
	|	Ссылка";
	
	ВыборкаСтрокТоварыИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_З2";
		
	Пока ДанныеДокументов.Следующий() Цикл 
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З2");
		
		КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		Макет.КодЯзыка =  КодЯзыка;
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаИтогоПрописью  = Макет.ПолучитьОбласть("ИтогоПрописью");
		ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);

		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДокументов);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакетаШапка.Параметры.ПредставлениеОтправителя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакетаШапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ДанныеДокументов.Дата, "ru");
		ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
		
		ОтветственныйДляПечати  = "";
		ДолжностьОтветственного = "";
		
		Если ТипЗнч(ДанныеДокументов.Ответственный) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеОтветственного	= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ДанныеДокументов.Организация, ДанныеДокументов.Ответственный, ДанныеДокументов.Дата); 
			ОтветственныйДляПечати  = ДанныеОтветственного.Представление;
			ДолжностьОтветственного = ДанныеОтветственного.Должность;
		Иначе
			ОтветственныйДляПечати = ДанныеДокументов.Ответственный;
		КонецЕсли;	
			
		ОбластьМакетаШапка.Параметры.ОтветственныйЗаПоставку = ОтветственныйДляПечати;
			
		ПредставлениеПолучателя							= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Контрагент, ДанныеДокументов.Дата), "ПолноеНаименование,");
		ОбластьМакетаШапка.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		УчитыватьНДС_       = ДанныеДокументов.УчитыватьНДС;
		УчитыватьАкциз_     = ДанныеДокументов.УчитыватьАкциз;
		СуммаВключаетНДС_   = ДанныеДокументов.СуммаВключаетНДС;
		СуммаВключаетАкциз_ = ДанныеДокументов.СуммаВключаетАкциз;
		
		ПрибавлятьНДС   = УчитыватьНДС_ И (НЕ СуммаВключаетНДС_);
		ПрибавлятьАкциз = УчитыватьАкциз_ И (НЕ СуммаВключаетАкциз_);

		// Выводим заголовок таблицы
		Если УчитыватьАкциз_ Тогда
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыАкциз");
		Иначе
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		КонецЕсли;
		ЗаголовокТаблицы.Параметры.Валюта = ДанныеДокументов.ВалютаДокумента;
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		ИтогоКоличество = 0;
		// Выводим многострочную часть документа
		Если УчитыватьАкциз_ Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыАкциз");
		Иначе
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		КонецЕсли;
		
		НомерСтроки = 1;
		
		ВыборкаСтрокТоварыИтоги.Сбросить();
		
		Если ВыборкаСтрокТоварыИтоги.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрокТоварыИтоги.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда 
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Количество = ВыборкаСтрокТовары.Количество;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьСтрокаТаблицы) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		            ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;	

				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьСтрокаТаблицы.Параметры.НомерПП			  = НомерСтроки;
				ОбластьСтрокаТаблицы.Параметры.ТоварНаименование  = СокрЛП(ВыборкаСтрокТовары.ТоварПредставление);
				
				СуммаСНДС = ?(ПрибавлятьНДС, ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма);
				Если УчитыватьАкциз_ И ПрибавлятьАкциз Тогда
					СуммаСНДС = СуммаСНДС + ВыборкаСтрокТовары.СуммаАкциза;
				КонецЕсли;
				ОбластьСтрокаТаблицы.Параметры.СуммаСНДС = СуммаСНДС;
				
				ИтогоКоличество = ИтогоКоличество + Количество;
				
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);

				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
		КонецЕсли;
		
		// Выводим итоги по документу
		Если УчитыватьАкциз_ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоАкциз");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		КонецЕсли;
		
		ИтогоСумма = ВыборкаСтрокТоварыИтоги.Сумма;
		
		Если ИтогоСумма <> Неопределено Тогда 
			ИтогоСумма = ?(ПрибавлятьНДС, ИтогоСумма + ВыборкаСтрокТоварыИтоги.СуммаНДС, ИтогоСумма);
			ИтогоСумма = ?(ПрибавлятьАкциз, ИтогоСумма + ВыборкаСтрокТоварыИтоги.СуммаАкциза, ИтогоСумма);
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСумма;
		ОбластьМакета.Параметры.ИтогоСуммаНДС   = ВыборкаСтрокТоварыИтоги.СуммаНДС;
		ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
		
		Если УчитыватьАкциз_ Тогда
			ОбластьМакета.Параметры.ИтогоСуммаАкциза = ВыборкаСтрокТоварыИтоги.СуммаАкциза;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета 				   = Макет.ПолучитьОбласть("ИтогоПрописью");
		ОбластьМакета.Параметры.Валюта = ДанныеДокументов.ВалютаДокумента;
		                                                              
		ОбластьМакета.Параметры.КоличествоОтпущенныхЗапасовПрописью = ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ИтогоКоличество, КодЯзыка);
		ОбластьМакета.Параметры.СуммаПрописью						= ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ИтогоСумма),ИтогоСумма,0), ДанныеДокументов.ВалютаДокумента, КодЯзыка);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// вывод подписей
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокументов);
			
		Руководители						= ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата,);
		Бухгалтер   						= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru='Не предусмотрен'", КодЯзыка), Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ГлБухгалтер = Бухгалтер;
		
		ОбластьМакета.Параметры.ОтпускРазрешил			= ОтветственныйДляПечати;
		ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтветственного;
		
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ДанныеДокументов);
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ОбластьМакета);
							
		// заполняем МОЛ
		Если ЗначениеЗаполнено(ДанныеДокументов.Склад) Тогда
			ДанныеМОЛ							= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ДанныеДокументов.Организация, ДанныеДокументов.ОтпустилМОЛ, ДанныеДокументов.Дата);
			ОбластьМакета.Параметры.МОЛОтпустил = ДанныеМОЛ.Представление;
		КонецЕсли;	
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			?(ЗначениеЗаполнено(ИтогоСумма),Окр(ИтогоСумма, 2),0),
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг надписей
						Для НомерСтрокиТабличногоДокумента = 1 По 4 Цикл
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40, НомерСтрокиТабличногоДокумента, 49).Разъединить();
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 34).Текст = ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40).Текст;
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 34, НомерСтрокиТабличногоДокумента, 44).Объединить();
						КонецЦикла;
						ТабДокумент.Область(6, 44).Текст = ТабДокумент.Область(6, 49).Текст;
						ТабДокумент.Область(1, 45, 7, 49).Очистить(Истина, Истина, Истина);
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьР1(МассивОбъектов, ОбъектыПечати, КолонкиНДС = Ложь) Экспорт
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиР1(МассивОбъектов);
	
	ДанныеДокументов = ДанныеДляПечати.ДанныеДокументов;
	ВыборкаСтрокУслугиИтоги = ДанныеДляПечати.ВыборкаСтрокУслугиИтоги;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Р1");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	// Получаем области макета для вывода в табличный документ
	Шапка  = Макет.ПолучитьОбласть("Шапка");
	Запасы = Макет.ПолучитьОбласть("Запасы");
	Подвал = Макет.ПолучитьОбласть("Подвал");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Р1";
	
	Пока ДанныеДокументов.Следующий() Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		УчитыватьНДС_     = ДанныеДокументов.УчитыватьНДС;
		СуммаВключаетНДС_ = ДанныеДокументов.СуммаВключаетНДС;
		
		Если КолонкиНДС И УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыСНДС");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС");
			Итого 			 = Макет.ПолучитьОбласть("ИтогоСНДС");
		ИначеЕсли КолонкиНДС И УчитыватьНДС_ И СуммаВключаетНДС_ Тогда 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыВклНДС");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицыВклНДС");
			Итого 			 = Макет.ПолучитьОбласть("ИтогоВклНДС");
		Иначе 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
			Итого 			 = Макет.ПолучитьОбласть("Итого");
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);

		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		Шапка.Параметры.Заполнить(ДанныеДокументов);
		
		// Организация-исполнитель
		ПредставлениеИсполнителя 				 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , ДанныеДокументов.Дата, "ru");
		Шапка.Параметры.ПредставлениеИсполнителя = ПредставлениеИсполнителя;
		Шапка.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ДанныеДокументов.Дата, "ru");
		
		// Организация-сдатчик
		СведенияОбОрганизацииЗаказчике 		     = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Контрагент, ДанныеДокументов.Дата);
		ПредставлениеЗаказчика				     = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , ДанныеДокументов.Дата, "ru");
		Шапка.Параметры.ПредставлениеЗаказчика   = ПредставлениеЗаказчика;
		Шапка.Параметры.КонтрагентРНН_БИН	     = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "БИН_ИИН,", Ложь, ДанныеДокументов.Дата, "ru");
		
		//Номер, Дата
		Шапка.Параметры.ДатаДокумента  = Формат(ДанныеДокументов.Дата,"ДЛФ=Д");
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
		
		//   Договор 
		Шапка.Параметры.ДокументОснование = ДанныеДокументов.Основание;
		
		ТабДокумент.Вывести(Шапка);
		
		//Заголовок таблицы
		Если КолонкиНДС И УчитыватьНДС_ Тогда 
			ЗаголовокТаблицы.Параметры.Валюта = ДанныеДокументов.ВалютаДокумента;
		КонецЕсли;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ИтогоКоличество = 0;
		ИтогоСумма	    = 0;
		ИтогоСуммаНДС   = 0;
		ИтогоСуммаСНДС	= 0;
		
		ПрибавлятьНДС = УчитыватьНДС_ И (НЕ СуммаВключаетНДС_);
		
		НомерСтроки = 1;
		
		ВыборкаСтрокУслугиИтоги.Сбросить();
		
		Если ВыборкаСтрокУслугиИтоги.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокУслуги = ВыборкаСтрокУслугиИтоги.Выбрать();
		Иначе
			ВыборкаСтрокУслуги = Неопределено;
		КонецЕсли;
		
		Если ВыборкаСтрокУслуги <> Неопределено Тогда 
			Пока ВыборкаСтрокУслуги.Следующий() Цикл

				Количество = ВыборкаСтрокУслуги.Количество;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
				
				Если КолонкиНДС Тогда
					
					Если УчитыватьНДС_ Тогда 
						СтрокаТаблицы.Параметры.СуммаНДС = ВыборкаСтрокУслуги.СуммаНДС;
						ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаСтрокУслуги.СуммаНДС;
					КонецЕсли;
					
					Если УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
						СуммаСНДС = ?(ПрибавлятьНДС, ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС, ВыборкаСтрокУслуги.Сумма);
						СтрокаТаблицы.Параметры.СуммаСНДС = СуммаСНДС;
						ИтогоСуммаСНДС = ИтогоСуммаСНДС + СуммаСНДС;
					КонецЕсли;	
					
					ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
					
				Иначе
					
					Если УчитыватьНДС_ И НЕ СуммаВключаетНДС_ Тогда
						СтрокаТаблицы.Параметры.Цена = ?(НЕ ВыборкаСтрокУслуги.Количество = 0, Окр((ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС) / ВыборкаСтрокУслуги.Количество, 2), 0);
						СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
						ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
					Иначе 
						СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;
						ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
					КонецЕсли;
					
				КонецЕсли;
					
				СтрокаТаблицы.Параметры.НомерПП 					 = НомерСтроки;
				СтрокаТаблицы.Параметры.Наименование				 = СокрЛП(ВыборкаСтрокУслуги.Содержание);
				СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаСтрокУслуги.ЕдиницаИзмерения;
				
				ИтогоКоличество = ИтогоКоличество + Количество;
				
				ТабДокумент.Вывести(СтрокаТаблицы);

				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если КолонкиНДС И УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
			Итого.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
		КонецЕсли;	
			
		Если КолонкиНДС И УчитыватьНДС_ Тогда 
			Итого.Параметры.ИтогоСуммаНДС   = ИтогоСуммаНДС;
		КонецЕсли;
		
		Итого.Параметры.ИтогоСумма 		= ИтогоСумма;
		Итого.Параметры.ИтогоКоличество = ИтогоКоличество;
		
	    ТабДокумент.Вывести(Итого);
		
		// Запасы
		Запасы.Параметры.Заполнить(ДанныеДокументов);
		ТабДокумент.Вывести(Запасы);
		
		//Подвал
		Если ТипЗнч(ДанныеДокументов.ФИООтветственного) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеОтветственного	= ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ДанныеДокументов.Организация, ДанныеДокументов.ФИООтветственного, ДанныеДокументов.Дата); 
			ОтветственныйДляПечати  = ДанныеОтветственного.Представление;
			ДолжностьОтветственного = ДанныеОтветственного.Должность;
		Иначе
			ОтветственныйДляПечати = ДанныеДокументов.ФИООтветственного;
		КонецЕсли;
		Подвал.Параметры.ДолжностьОтветственного = ДолжностьОтветственного;
		Подвал.Параметры.ФИООтветственного       = ОтветственныйДляПечати;
		Подвал.Параметры.ДатаПринятия            = Формат(ДанныеДокументов.ДатаПодписанияГЗ, "Л=" + КодЯзыка + "; ДЛФ=Д");
			
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			?(ПрибавлятьНДС, ИтогоСумма + ИтогоСуммаНДС, ИтогоСумма),
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг текста заголовка
						Для НомерСтрокиТабличногоДокумента = 1 По 4 Цикл
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40, НомерСтрокиТабличногоДокумента, 49).Разъединить();
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 35).Текст = ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40).Текст;
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 35, НомерСтрокиТабличногоДокумента, 44).Объединить();
						КонецЦикла;
						ТабДокумент.Область(6, 44).Текст = ТабДокумент.Область(6, 49).Текст;
						ТабДокумент.Область(1, 45, 7, 49).Очистить(Истина, Истина, Истина);
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиР1(МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	//|	РеализацияТоваровУслуг.ДатаПодписанияГЗ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ОтложитьНачислениеНДС
	|			ТОГДА ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата)
	|		ИНАЧЕ РеализацияТоваровУслуг.ДатаПодписанияГЗ
	|	КОНЕЦ КАК ДатаПодписанияГЗ,
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо КАК ФИООтветственного,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	РеализацияТоваровУслуг.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода,
	|	РеализацияТоваровУслуг.ДатаОкончанияОтчетногоПериода КАК ДатаОкончанияОтчетногоПериода,
	|	РеализацияТоваровУслуг.ПереченьДокументации КАК ПереченьДокументации
	|ПОМЕСТИТЬ Данныедокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
	|		ПО РеализацияТоваровУслуг.Организация = СведенияПоАктамВыполненныхРабот.Организация
	|		И РеализацияТоваровУслуг.Ссылка = СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период,
	|	РаботникиОрганизации.Организация КАК Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ,
	|	ДанныеДокумента.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот
	|ПОМЕСТИТЬ ВТ_ПериодыРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данныедокумента КАК ДанныеДокумента
	|		ПО РаботникиОрганизации.Организация = ДанныеДокумента.Организация
	|			И РаботникиОрганизации.Период <= ДанныеДокумента.Дата
	|			И (ДанныеДокумента.ФИООтветственного = РаботникиОрганизации.Сотрудник.Физлицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ДатаПодписанияГЗ,
	|	ДанныеДокумента.СпособВыпискиАктовВыполненныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРаботников.Ссылка КАК Ссылка,
	|	ПериодыРаботников.Организация КАК Организация,
	|	ПериодыРаботников.ФизЛицо,
	|	РаботникиОрганизации.Должность КАК ДолжностьОтветственного
	|ПОМЕСТИТЬ ВТ_ПериодыДолжности
	|ИЗ
	|	ВТ_ПериодыРаботников КАК ПериодыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПериодыРаботников.Период = РаботникиОрганизации.Период
	|			И ПериодыРаботников.Организация = РаботникиОрганизации.Организация
	|			И ПериодыРаботников.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
	|           И  РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДатаПодписанияГЗ,
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияТоваровУслуг.Основание,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ФИООтветственного,
	|	РеализацияТоваровУслуг.НомерДоговора,
	|	РеализацияТоваровУслуг.ДатаДоговора,
	|	РеализацияТоваровУслуг.ДатаНачалаОтчетногоПериода,
	|	РеализацияТоваровУслуг.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода1,
	|	РеализацияТоваровУслуг.ПереченьДокументации,
	|	ВТ_ПериодыДолжности.ДолжностьОтветственного КАК ДолжностьОтветственного
	|ИЗ
	|	Данныедокумента КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыДолжности КАК ВТ_ПериодыДолжности
	|		ПО РеализацияТоваровУслуг.Ссылка = ВТ_ПериодыДолжности.Ссылка";
	
	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка,
	|	МИНИМУМ(РеализацияТоваровУслугУслуги.НомерСтроки) КАК НомерСтроки,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугУслуги.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(400))
	|		КОГДА НЕ РеализацияТоваровУслугУслуги.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.Наименование
	|	КОНЕЦ КАК Содержание,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК УслугаКод,
	|	СУММА(РеализацияТоваровУслугУслуги.Количество) КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугУслуги.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(400))
	|		КОГДА НЕ РеализацияТоваровУслугУслуги.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.Наименование
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаСтрокУслугиИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	РезультатыЗапросов = Новый Структура;
	РезультатыЗапросов.Вставить("ДанныеДокументов", ДанныеДокументов);
	РезультатыЗапросов.Вставить("ВыборкаСтрокУслугиИтоги", ВыборкаСтрокУслугиИтоги);
	
	Возврат РезультатыЗапросов;
	
КонецФункции

Функция ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, ВВалютеРеглУчета = Ложь, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ТЧ_Документов.Ссылка) КАК СчетФактура,
	|	ТЧ_Документов.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_Документов
	|ГДЕ
	|	ТЧ_Документов.ДокументОснование В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ_Документов.ДокументОснование";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	Возврат ?(ВВалютеРеглУчета, 
				Документы.СчетФактураВыданный.ПечатьСчетФактураВВалютеРеглУчета(МассивСчетовФактур, ОбъектыПечати, КодЯзыка), 
				Документы.СчетФактураВыданный.ПечатьСчетФактура(МассивСчетовФактур, ОбъектыПечати, Ложь, КодЯзыка));
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьАкциз КАК УчитыватьАкциз,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьАкциз И НЕ ДанныеОбрабатываемогоДокумента.СуммаВключаетАкциз
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчАкциз,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьАкциз КАК УчитыватьАкциз,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	2 КАК ПорядокТабличныхЧастей,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура КАК Товар,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	1,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование,
	|	ОбрабатываемаяТаблица.Сумма,
	|	ОбрабатываемаяТаблица.СуммаНДС,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма+(ОбрабатываемаяТаблица.СуммаАкциза*ВТ_ТаблицаПоШапкеДокумента.УчАкциз)-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокТабличныхЧастей,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.СтруктурноеПодразделение КАК Контакт
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ответственный КАК Контакт
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьДатуПодписанияГЗПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьАВР,
	|	РеализацияТоваровУслуг.Представление КАК ДокументРТУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьТовары,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУслуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО РеализацияТоваровУслуг.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот = &парамПустойСпособ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДатаПодписанияГЗ,
	|	РеализацияТоваровУслуг.Представление";
	
	Запрос.УстановитьПараметр("парамПустойСпособ", 	Перечисления.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияТоваровУслуг");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			Если ДокументОбъект.ДатаПодписанияГЗ = Дата (1,1,1) Тогда
				ДокументОбъект.ДатаПодписанияГЗ = Выборка.Дата;
				
				ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
				
				Если Выборка.ЕстьАВР Тогда
					
					Если Выборка.ЕстьУслуги И НЕ Выборка.ЕстьТовары Тогда
						ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ");
						ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги");
						
					Иначе
						
						ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для документа ""%1"" существует ЭАВР, но так как в документе присутствуют Товары и Услуги
						| признак ""Способ выставления актов выполненных работ"" установлен в значение ""В бумажном виде"".'"),
						Выборка.ДокументРТУ);
						ЗаписьЖурналаРегистрации(НСтр("ru='Обновление ИБ. Документ ""Реализация ТМЗ и услуг"". Заполнение даты подписания ГЗ'",ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НачалоДня(Выборка.Дата) = НачалоДня(Выборка.ДатаПодписанияГЗ) Тогда
				Если Выборка.ЕстьУслуги И НЕ Выборка.ЕстьТовары Тогда
					
					ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа");
					ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги");
				Иначе 
					ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе ""%1"" заполнена дата подписания ГЗ, но так как заполнена табличная часть ""Товары""
					| признак ""Способ выставления актов выполненных работ"" установлен в значение ""В бумажном виде"".'"),
					Выборка.ДокументРТУ);
					ЗаписьЖурналаРегистрации(НСтр("ru='Обновление ИБ. Документ ""Реализация ТМЗ и услуг"". Заполнение даты подписания ГЗ'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
				КонецЕсли;	
			Иначе
				
				ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе ""%1"" заполнена дата подписания ГЗ, но так как она отличается от даты документа
				| признак ""Способ выставления актов выполненных работ"" установлен в значение ""В бумажном виде"".'"),
				Выборка.ДокументРТУ);
				ЗаписьЖурналаРегистрации(НСтр("ru='Обновление ИБ. Документ ""Реализация ТМЗ и услуг"". Заполнение даты подписания ГЗ'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
				
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ДанныеСопоставление	= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МассивНаименование	  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Наименование");
	МассивАртикул 		  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Артикул"); 
		
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Наименование");
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Артикул"); 
   	
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Наименование",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Артикул", 		    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивНаименование, 	  "Номенклатура_Наименование");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивАртикул, 		  "Номенклатура_Артикул");
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Номенклатура_Наименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Номенклатура_Артикул КАК ВнешнийАртикул, 
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Товары.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Товары.Ссылка КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Наименование = ЗагружаемыеДанные.ВнешнееНаименование)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнееНаименование <> """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор,
	|		Товары.Ссылка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Артикул = ЗагружаемыеДанные.ВнешнийАртикул)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийАртикул <> """") КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ЗагружаемыеДанные.ВнешнийАртикул КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(Товары.Номенклатура.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения 
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНоменклатуры КАК Товары
	|		ПО (Товары.Идентификатор = ЗагружаемыеДанные.Идентификатор)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСопоставление, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(&ВнешнийАртикул <> """"
		|		И СпрНоменклатура.Артикул = &ВнешнийАртикул)
		|	ИЛИ (&ВнешнееНаименование <> """"
		|		И СпрНоменклатура.Наименование = &ВнешнееНаименование)
		|";
		
		Запрос.УстановитьПараметр("ВнешнийАртикул",		 ЗагружаемыеЗначенияСтрока.Номенклатура_Артикул);
		Запрос.УстановитьПараметр("ВнешнееНаименование", ЗагружаемыеЗначенияСтрока.Номенклатура_Наименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
