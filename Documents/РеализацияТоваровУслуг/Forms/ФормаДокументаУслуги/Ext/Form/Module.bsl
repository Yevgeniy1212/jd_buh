
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ЗакрыватьФорму;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
	ДобавитьКомандуВводаКорректировки();
	ОбновитьДанныеОВведенныхКорректировках();  
	
	//ИнтеграцияИСМПТК
    //Скроем меню ввода Акта приёмки маркированной продукции
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСМПТК", "Видимость", Ложь);
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСЦЭДМ", "Видимость", Ложь);
    //Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РеализацияТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма,ТекущийОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ОтложитьНачислениеНДС Тогда
		Если ТекущийОбъект.ЭтоНовый() И НачалоДня(ТекущийОбъект.Дата) = НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ДатаПодписанияПоДаннымРегистра = ТекущийОбъект.Дата;
		КонецЕсли;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаПодписания", ДатаПодписанияПоДаннымРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РеализацияТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтаФорма,ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДатаПодписания") Тогда
		ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ТекущийОбъект.ДополнительныеСвойства.ЗакрыватьФорму);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено ИЛИ Источник = СчетФактура) Тогда
			
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка");
		КонецЕсли;
		
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	//АВР
	ИначеЕсли ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР() Тогда
		ОбработкаОповщенияАВРНаСервере();
	//Конец АВР
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_Операция" Или ИмяСобытия = "Запись_Сторнирование" Тогда
		ОбновитьДанныеОВведенныхКорректировках();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС" Тогда
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере(); 
		ДатаПодписанияПоДаннымРегистра = УчетНДСИАкцизаВызовСервера.ПолучитьДатуПодписанияПоАктамВыполненныхРабот(Объект.Ссылка);
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора" И НЕ ЭтаФорма.ТекущийЭлемент.Имя = "СчетНаОплатуПокупателю" Тогда
		
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда		
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение); 	
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_РеализацияТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЗакрыватьФорму") Тогда
		ЗакрыватьФорму = ПараметрыЗаписи.ЗакрыватьФорму;
	КонецЕсли;   
	
	СчетаНаОплатуПокупателю = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
		
		СчетаНаОплатуПокупателю.Добавить(Объект.ДокументОснование);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СписокСчетовНаОплату = СчетаНаОплатуПокупателю;
		Для каждого СчетНаОплатуПокупателю Из СписокСчетовНаОплату Цикл
			ОповеститьОбИзменении(СчетНаОплатуПокупателю);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	РеализацияТоваровУслугФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ТипыНачислений = Объект.ВидОперацииМН;
	МетодНачисленияОбновитьЭлементы(ТипыНачислений);
	
	ЗакрыватьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	РеализацияТоваровУслугФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	РеализацияТоваровУслугФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Отказ = Истина;
		ЗакрыватьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты", ЭтотОбъект, СтруктураРезультатаВыполненияПриИзмененииДаты);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписанияГЗПриИзменении(Элемент)
	
	Если НачалоДня(Объект.ДатаПодписанияГЗ) = НачалоДня(ТекущаяДатаПодписанияДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.ДатаПодписанияГЗ, 
		ТекущаяДатаПодписанияДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПодписанияГЗПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты", ЭтотОбъект, СтруктураРезультатаВыполненияПриИзмененииДаты);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
	
	ЗаполнитьСпособВыписки();
	УправлениеФормой(ЭтотОбъект);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма,Элемент,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	РеализацияТоваровУслугФормы.ПриИзмененииЦеныИВалютыНаСервере(ЭтаФорма,ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	РеализацияТоваровУслугФормыКлиент.СтруктурноеПодразделениеОрганизацияНачалоВыбора(ЭтаФорма,Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Услуги.Количество() > 0 Тогда 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.СделкаНачалоВыбора(ЭтаФорма,Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;

	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	ЗаполнитьСпособВыписки(); 
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.НадписьСчетФактураНажатие(ЭтаФорма,Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидОперацииДокументаОснования = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидОперации");
			Если ВидОперацииДокументаОснования <> Объект.ВидОперации Или ВидОперацииДокументаОснования <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
				Объект.ДокументОснование = ТекущийДокументОснование;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет данных для заполнения. Ввод на основании реализации ТМЗ и услуг доступен только для документов с видом операции ""%1""'"), 
										ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
				Сообщение.Сообщить();
				Возврат
			КонецЕсли;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Элементы.ГруппаСчетНаОплату.Видимость = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ Объект.ДокументОснование = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборСчетаНаОплатуЗавершение", ЭтотОбъект);

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, "Услуги", ОповещениеОЗавершении);	                                                         
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОперацииРеализации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			Элементы.Услуги.ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	КонецЕсли;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, 
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, 
		|СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, Всего,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		Элементы.Услуги.ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РеализацияТоваровУслугФормыКлиентСервер.РассчитатьПриИзменении(ЭтаФорма,СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	
	РеализацияТоваровУслугФормыКлиентСервер.РассчитатьПриИзменении(ЭтаФорма,СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	РеализацияТоваровУслугФормыКлиентСервер.РассчитатьПриИзменении(ЭтаФорма,СтрокаТабличнойЧасти, Ложь,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	
	РеализацияТоваровУслугФормыКлиентСервер.РассчитатьПриИзменении(ЭтаФорма,СтрокаТабличнойЧасти,Ложь,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РеализацияТоваровУслугФормыКлиентСервер.РассчитатьПриИзменении(ЭтаФорма,СтрокаТабличнойЧасти, Ложь,Ложь,Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	
	// НУ
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1ПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.СубконтоДоходовБУПриИзменении(ЭтаФорма, 1, "Услуги" );

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2ПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.СубконтоДоходовБУПриИзменении(ЭтаФорма, 2, "Услуги" );
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3ПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.СубконтоДоходовБУПриИзменении(ЭтаФорма, 3, "Услуги" );
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовНУ",  1, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовНУ",  2, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	РеализацияТоваровУслугФормыКлиент.СубконтоНачалоВыбора(ЭтаФорма,Элемент, "СубконтоДоходовНУ",  3, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	РеализацияТоваровУслугФормыКлиент.Подбор(ЭтаФорма, "Услуги", УникальныйИдентификатор, НСтр("ru = 'Услуги'"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ПараметрыФормы = ПодготовитьПараметрыФормы("Услуги");
	
	РеализацияТоваровУслугФормыКлиент.ИзменитьТабличнуюЧасть(ЭтаФорма,"Услуги", НСтр("ru='Услуги'"),ПараметрыФормы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормы(ИмяТабличнойЧасти)  	
	
	АдресХранилищаТабличнойЧасти = ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти);
	
	ПараметрыФормы = РеализацияТоваровУслугФормы.ПолучитьПараметрыОбработкиТабличнойЧасти(ЭтаФорма,ИмяТабличнойЧасти,ИмяТабличнойЧасти,АдресХранилищаТабличнойЧасти);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период.ДатаНачала	= Объект.ДатаНачалаОтчетногоПериода;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияОтчетногоПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
    	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	РеализацияТоваровУслугФормыКлиент.ВвестиНовыйСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ДополнитьСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюУслуги(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ЗаполнитьПоПоступлениюУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияУслуги(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма,"Услуги", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаполнитьПоСчету(Команда)

	Если ЭтаФорма.ТекущийЭлемент.Имя = "СчетНаОплатуПокупателю" Тогда
		УслугиЭлементФормы = ЭтаФорма.Элементы.Найти("Услуги");
	    ЭтаФорма.ТекущийЭлемент = УслугиЭлементФормы; 
	КонецЕсли;
	
	РеализацияТоваровУслугФормыКлиент.ЗаполнитьТабличнуюЧастьПоСчету(ЭтаФорма,"Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	ОткрытьРеквизитыПечатиРеализации();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьНомераГТД(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат РеализацияТоваровУслугФормы.ПараметрыФормыРедактированияНомеровГТД(ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ПоискПоШтрихкоду(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	РеализацияТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ТекущийСклад 			  = Объект.Склад;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз);


	Если НЕ Параметры.Ключ.Пустая() Тогда
		// Счет-фактура
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
	
		ДатаПодписанияПоДаннымРегистра = УчетНДСИАкциза.ПолучитьДатуПодписанияПоАктамВыполненныхРабот(Объект.Ссылка);
		ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
		
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);

	НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
		
	ПоказыватьВДокументахСчетаУчета = НастройкиПользователя.ПоказыватьВДокументахСчетаУчета;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ИспользоватьЭлектронныеАВР = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР");
	
	Если ИспользоватьЭлектронныеАВР Тогда  		
	 	Элементы.СпособВыпискиАктовВыполненныхРабот.СписокВыбора.Вставить(1, Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ);
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		ПричиныИзмененияСчетовУчета = Новый Массив;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета.Добавить("КопированиеДокумента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			РеализацияТоваровУслугФормы.ПроверитьСоответствиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, ПричиныИзмененияСчетовУчета);
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				Объект.Сделка = Неопределено;
				Объект.УчастникиСовместнойДеятельности.Очистить();
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеализацияТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма,Неопределено, ПричиныИзмененияСчетовУчета);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПричиныИзмененияСчетовУчета.Количество() = 0 Тогда
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
		КонецЕсли;
		
		Если ПричиныИзмененияСчетовУчета.Количество() <> 0 Тогда
			РеализацияТоваровУслугФормы.ЗаполнитьСчетаУчета(ЭтаФорма, ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			Объект.УчитыватьНДС     = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
			Объект.УчитыватьАкциз = Ложь;
			Объект.СуммаВключаетАкциз = Ложь;
		КонецЕсли;
		
		Если Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
			Объект.ДатаПодписанияГЗ = Объект.Дата;
			ДатаПодписанияПоДаннымРегистра = Объект.Дата;
		КонецЕсли;  
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	Иначе 
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ЗаполнятьКоэффициентАкциза = Истина, СписокТабличныхЧастей = "Услуги")

	Если ЗаполнятьКоэффициентАкциза Тогда
		СоответствиеТоваровИКоэффициентов = ПолучитьКоэффициентыРасчетаОблагаемойБазыАкцизаНоменклатуры(Объект.Товары);
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "Всего", "КоэффициентАкциза" в табличных частях
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			
			СуммаАкциза = 0;
			Если КлючЗначение.Ключ = "Товары" И ЗаполнятьКоэффициентАкциза Тогда 
				ЗначениеКоэффициента = СоответствиеТоваровИКоэффициентов.Получить(СтрокаТаблицы.Номенклатура);
				СтрокаТаблицы.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаАкциза) И ЗначениеКоэффициента <> Неопределено, ЗначениеКоэффициента, 0);
				СуммаАкциза = ?(Объект.СуммаВключаетАкциз, 0, СтрокаТаблицы.СуммаАкциза);
			КонецЕсли;
			
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) + СуммаАкциза;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект, СписокТабличныхЧастей = "Услуги" ) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз, СписокТабличныхЧастей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость          = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость        = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ГруппаИтогиНДС.Видимость   			= Объект.УчитыватьНДС;
	Элементы.ГруппаИтогиАкциз.Видимость 			= Объект.УчитыватьАкциз;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСчетУчетаНДСПоРеализации.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиНДСВидОперацииРеализации.Видимость = Объект.УчитыватьНДС;
	
	Элементы.УслугиСчетДоходовНУ.Видимость         = Форма.ВидимостьНалоговогоУчета;
	Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	Элементы.ДатаПодписанияГЗ.ТолькоПросмотр = Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
	Элементы.ДатаПодписанияГЗ.Видимость = НЕ Объект.ОтложитьНачислениеНДС;
	Элементы.ДатаПодписанияПоДаннымРегистра.Видимость = Объект.ОтложитьНачислениеНДС;
	Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Доступность = ЗначениеЗаполнено(Форма.ДатаПодписанияПоДаннымРегистра) ИЛИ Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	Если НЕ Объект.ОтложитьНачислениеНДС Тогда
		Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	Иначе
		Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьИтоги(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	ИзменитьКоманднуюПанельДокумента(Форма);

	РеализацияТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма);
	
	Элементы.ГруппаСчетНаОплату.Видимость = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ Объект.ДокументОснование = Неопределено;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере(Форма)Экспорт
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()Экспорт
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;		
	
	Форма.ИтогиВсегоНДС   = Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсегоАкциз = Объект.Товары.Итог("СуммаАкциза");
	Форма.ИтогиВсего      = Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
	Если Объект.УчитыватьАкциз
		   И НЕ Объект.СуммаВключаетАкциз Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоАкциз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РеализацияТоваровУслугФормы.ДатаПриИзмененииНаСервере(ЭтаФорма,СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписанияГЗПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РеализацияТоваровУслугФормы.ДатаПодписанияГЗПриИзмененииНаСервере(ЭтаФорма,СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.УчитыватьКПНПриИзмененииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	РеализацияТоваровУслугФормы.КонтрагентПриИзмененииНаСервере(ЭтаФорма,СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)

	РеализацияТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма,СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	РеализацияТоваровУслугФормы.СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(ЭтаФорма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Услуги.Количество() > 0 Тогда 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныеТабЧасти = Объект.Услуги.Количество() > 0;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныеТабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
		И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	РеализацияТоваровУслугФормы.УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
КонецПроцедуры 

// Подбор товаров

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	РеализацияТоваровУслугФормы.ОбработкаВыбораПодборНаСервере(ЭтаФорма, ВыбранноеЗначение,ИмяТаблицы);
	
	УстановитьДоступностьСубконто(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	РеализацияТоваровУслугФормы.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчетаКЗаполнению);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()

	РеализацияТоваровУслугФормы.ОбработкаОповещенияЗаписиСчетаФактурыНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентыРасчетаОблагаемойБазыАкцизаНоменклатуры(Знач ТабличнаяЧасть)
	
	СоответствиеТоваровИКоэффициентов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.СтавкаАкциза <> ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Ключ,
	|	Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК Значение
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Номенклатура
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТоваровИКоэффициентов[Выборка.Ключ] = Выборка.Значение;
	КонецЦикла;
	
	Возврат СоответствиеТоваровИКоэффициентов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	РеализацияТоваровУслугФормы.ЗаполнитьТабличнуюЧастьНомераГТД(ЭтаФорма, АдресНомераГТД);
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, Параметры) Экспорт

   Если Период <> Неопределено Тогда
      
      Объект.ДатаНачалаОтчетногоПериода = Период.ДатаНачала;
      Объект.ДатаОкончанияОтчетногоПериода = Период.ДатаОкончания;
   
   КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнятьКоэффициентАкциза = Ложь;
	Если Результат <> Неопределено Тогда
		ИзмененПризнакУчетаАкциза = Результат.ЗначенияПриЗакрытии.УчитыватьАкциз <> Результат.ЗначенияПриОткрытии.УчитыватьАкциз;
		ЗаполнятьКоэффициентАкциза = ИзмененПризнакУчетаАкциза И Объект.УчитыватьАкциз;
		
		Если НЕ Объект.ОтложитьНачислениеНДС
			И Объект.ОтложитьНачислениеНДС <> Результат.ЗначенияПриОткрытии.ОтложитьНачислениеНДС Тогда
			
			Если Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде") Тогда
				Объект.ДатаПодписанияГЗ = Объект.Дата;
			Иначе
				Объект.ДатаПодписанияГЗ = ДатаПодписанияПоДаннымРегистра;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ЗаполнятьКоэффициентАкциза);
	ОбновитьИтоги(ЭтаФорма);	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	РеализацияТоваровУслугФормы.ПриИзмененииЗначенияОрганизацииСервер(ЭтаФорма,ПараметрыОбработки, Неопределено);
	РеализацияТоваровУслугФормы.КонтрагентПриИзмененииНаСервере(ЭтаФорма,Неопределено);
	ТекущийВидОперации = Объект.ВидОперации;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	РеализацияТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	Иначе 		
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеОрганизации(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиПриЗаполненииПоСчету(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ТабличнаяЧасть].Очистить();
	
	Если ДопПараметры.ТабличнаяЧасть = "Товары" Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиУслуги(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Услуги", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
		
	КонецЕсли;

	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Объект.АдресДоставки = ВыбранноеЗначение;
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	Объект.НомераГТД.Очистить();
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоПоступлениюТоваровИУслуг(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоРеализацииТоваровИУслуг(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоСчетуНаОплатуПокупателю(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоСчетФактураВыданный(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз);
	ОбновитьИтоги(ЭтаФорма);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть, СпособЗаполнения)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма,ТабличнаяЧасть, СпособЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.РеализацияТоваровУслуг.ЗаполнитьПоПоступлению(Объект, ТабличнаяЧасть, "Добавить", ВыбранноеЗначение);

	УстановитьДоступностьСубконто(ТабличнаяЧасть);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.РеализацияТоваровУслуг.ЗаполнитьПоСчету(Объект, ТабличнаяЧасть, ВыбранноеЗначение);

	УстановитьДоступностьСубконто(ТабличнаяЧасть);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)Экспорт
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "Услуги";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаДоходов = "СубконтоДоходов";
	ИмяСчетаДоходов    = "СчетДоходов";
	
	ИмяЭлементаСебестоимости = "СубконтоСписанияСебестоимости";
	ИмяСчетаСебестоимости 	 = "СчетСписанияСебестоимости";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = РеализацияТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = РеализацияТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти)
	
	РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	РеализацияТоваровУслугФормы.СчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	РеализацияТоваровУслугФормы.СчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РеализацияТоваровУслугФормы.ЗагрузитьПодготовленныеДанные(ЭтаФорма, АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьРеквизитыПечатиРеализации(ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	РеализацияТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(ЭтаФорма,Параметры);
	
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = Объект.Склад;
	
	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьКоманднуюПанельДокумента(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ") Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботСоздатьЭлектронныйАВР", "Видимость", Истина);
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботВыписатьИсправленныйАВР", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботСоздатьЭлектронныйАВР", "Видимость", Ложь);
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботВыписатьИсправленныйАВР", "Видимость", Ложь);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению") Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйДокументВССоздатьЭлектронныйДокументВС", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйДокументВССоздатьЭлектронныйДокументВС", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	РеализацияТоваровУслугФормы.СкопироватьСтрокиНаСервере(ЭтаФорма, ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	РеализацияТоваровУслугФормы.ВставитьСтрокиНаСервере(ЭтаФорма,ИмяТаблицы);
	
	УстановитьДоступностьСубконто(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);

КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	РеализацияТоваровУслугФормыКлиент.СчетаУчетаРасчетов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета() Экспорт
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("УслугиСчетДоходовБУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаБУ");
	ЭлементыСчетов.Добавить("УслугиСчетДоходовНУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаНУ");
	ЭлементыСчетов.Добавить("ГруппаРасчеты");
		
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьУчастникиСД(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта()
	
	РеализацияТоваровУслугФормы.ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	РеализацияТоваровУслугФормы.РазблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОперацияКорректировки

&НаСервере
Процедура ДобавитьКомандуВводаКорректировки()
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ОперацияБух) Тогда
		Возврат
	КонецЕсли;
	
	ИмяКнопкиСоздатьОперацию = "ФормаДокументОперацияКорректировкаСоздатьНаОсновании";
	КнопкаСоздатьОперацию = Элементы.Найти(ИмяКнопкиСоздатьОперацию);
	
	Если КнопкаСоздатьОперацию = Неопределено Тогда
		ГруппаФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
		Если ГруппаФормаСоздатьНаОсновании <> Неопределено Тогда
			ВставитьПередКнопкой = Неопределено;
			ИндексПоследнейКнопки = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Количество() - 1;
			Для ИндексВГруппе = 0 По ИндексПоследнейКнопки Цикл
				ТекущаяКнопка = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Получить(ИндексВГруппе);
				Если ТекущаяКнопка.Имя > ИмяКнопкиСоздатьОперацию Тогда
					ВставитьПередКнопкой = ТекущаяКнопка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			КнопкаСоздатьОперацию = Элементы.Вставить(ИмяКнопкиСоздатьОперацию, Тип("КнопкаФормы"), ГруппаФормаСоздатьНаОсновании, ВставитьПередКнопкой);
			КнопкаСоздатьОперацию.ИмяКоманды = "ВвестиНовуюКорректировку";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовуюКорректировку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФормуОперации();
	Иначе
		ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения("ПослеВопросаОЗаписиПередКорректировкой", ЭтотОбъект);
		ТекстВопроса =
		НСтр("ru='Данные еще не записаны.
		|Выполнение действия ""Операция (Корректировка документа): создать на основании"" возможно только после записи данных
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаписиПередКорректировкой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации()
	
	ПараметрыОперации = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКорректировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокКорректировок.Получить(0).Значение);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Выберите документ корректировки'");
		ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокКорректировок, ЗаголовокФормы);
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокКорректировок(Документ)
	
	МассивКорректировок = Новый Массив;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОперацияБух.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.СторнируемыйДокумент = &Документ
		|	И НЕ ОперацияБух.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &Документ
		|	И НЕ Сторнирование.ПометкаУдаления";
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОперацияБух) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОперацияБух.Ссылка", "ПРЕДСТАВЛЕНИЕ(ОперацияБух.Ссылка)");
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.Сторнирование) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сторнирование.Ссылка", "ПРЕДСТАВЛЕНИЕ(Сторнирование.Ссылка)");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивКорректировок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат МассивКорректировок
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОВведенныхКорректировках()
	
	СписокКорректировок.ЗагрузитьЗначения(ВернутьСписокКорректировок(Объект.Ссылка));
	
	Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость = (СписокКорректировок.Количество() > 0);
	
	Если Не Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость Тогда
		ТекстКорректировки = "";
	ИначеЕсли СписокКорректировок.Количество() = 1 Тогда
		ТекстКорректировки = СписокКорректировок.Получить(0).Значение;
	Иначе
		ТекстКорректировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть список введенных корректировок (%1)'"), СписокКорректировок.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

#Область АВР

&НаКлиенте
Процедура СсылкаНаЭлектронныеАВРНажатие(Элемент)
	
	Если СписокЭлектронныхАВР.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Документ.ЭлектронныйАктВыполненныхРабот.Форма.ПросмотрСпискаДокументовЭАВР",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭлектронныхАВР,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПоказатьЗначение( ,СписокЭлектронныхАВР[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповщенияАВРНаСервере()
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура НайтиАВРИЗаполнитьСсылкуНаСервере() Экспорт
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпискиАктовВыполненныхРаботПриИзменении(Элемент)
			
	СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере()
	
	Если  Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
		Объект.ДатаПодписанияГЗ = Объект.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
			ДатаПодписанияПоДаннымРегистра = Объект.Дата;
		КонецЕсли;
	Иначе
		Объект.ДатаПодписанияГЗ = Дата(1,1,1);;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособВыписки()
	
	СпособВыпискиАктовВыполненныхРаботИзДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот");
	Если ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРаботИзДоговора) И  Объект.СпособВыпискиАктовВыполненныхРабот <> СпособВыпискиАктовВыполненныхРаботИзДоговора Тогда
		Объект.СпособВыпискиАктовВыполненныхРабот  = СпособВыпискиАктовВыполненныхРаботИзДоговора;
	Иначе
		Если Не ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРаботИзДоговора) Тогда			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
				Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа;
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
			
	СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции

&НаКлиенте
Процедура СсылкаНаРегистрацияПрочихОперацийПоНДСНажатие(Элемент)
	
	Если СписокРегистрацийПоНДС.Количество() = 0 Тогда
	
		Если НЕ ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена Дата подписания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'НДС нельзя зарегистрировать на основании документа, помеченного на удаление.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если Объект.Услуги.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена таб. часть Услуги.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "";
		Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'НДС нельзя зарегистрировать на основании не записанного документа. Записать документ?'");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли СписокРегистрацийПоНДС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокРегистрацийПоНДС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокРегистрацийПоНДС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать и провести документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере();
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиДокументРегистрацииНДСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС, СписокРегистрацийПоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписанияПоДаннымРегистраПриИзменении(Элемент)
	
	Если СписокРегистрацийПоНДС.Количество() = 1
		И ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
		
		ДатаРегистрацииНДС = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(СписокРегистрацийПоНДС[0].Значение, "Дата");
		
		Если НачалоДня(ДатаРегистрацииНДС) <> НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстВопроса = НСтр("ru = 'НДС зарегистрирован <%ДатаРегистрацииНДС%>. Изменена дата подписания, скорректировать дату в документе регистрации НДС?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДатаРегистрацииНДС%", Формат(ДатаРегистрацииНДС, "ДЛФ=ДВ"));
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			Модифицированность = Истина;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере()
	
	Отказ = Ложь;
	ОбновитьРегистрациюНДС(Отказ);
	Если Отказ Тогда
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРегистрациюНДС(Отказ)
	
	ДокументРегистрацииНДСОбъект = СписокРегистрацийПоНДС[0].Значение.ПолучитьОбъект();
	ДокументРегистрацииНДСОбъект.Дата = ДатаПодписанияПоДаннымРегистра;
	
	Попытка
		ДокументРегистрацииНДСОбъект.Записать(РежимЗаписиДокумента.Запись);
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
	Исключение
		Отказ = Истина;
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ регистрации НДС по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;
	
КонецПроцедуры

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или НЕ ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;                                                                                     
	
	ИмяТЧ = "Товары";
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных,ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных, ИмяТЧ)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	НоменклатураБезЦены = ЗагруженныеДанные.Скопировать(Новый Структура("Цена", 0), "Номенклатура");
	Если НоменклатураБезЦены.Количество() > 0 Тогда 
		
		СписокНоменклатуры = НоменклатураБезЦены.ВыгрузитьКолонку("Номенклатура");
		Если ИспользоватьТипыЦен И ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, Объект.ТипЦен, Объект.Дата, Объект.Организация);
		Иначе
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатурыДокументов(
				СписокНоменклатуры, Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ИсключаемыеДанные = Новый Массив;
	
	Для Каждого ЗагруженнаяСтрока Из ЗагруженныеДанные Цикл
		
		НоменклатураСсылка = ЗагруженнаяСтрока.Номенклатура;
		
		Если ИмяТЧ="Услуги" И НЕ НоменклатураСсылка.Услуга Тогда	
			ИсключаемыеДанные.Добавить(НоменклатураСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ЗагруженнаяСтрока.Цена = 0 Тогда 
			СведенияОЦенеНоменклатуры = ЦеныНоменклатуры.Найти(ЗагруженнаяСтрока.Номенклатура, "Номенклатура");
			Если СведенияОЦенеНоменклатуры <> Неопределено Тогда
				ЗагруженнаяСтрока.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
					СведенияОЦенеНоменклатуры.Цена,
					СведенияОЦенеНоменклатуры.Валюта, Объект.ВалютаДокумента,
					СведенияОЦенеНоменклатуры.Курс, Объект.КурсВзаиморасчетов,
					СведенияОЦенеНоменклатуры.Кратность, Объект.КратностьВзаиморасчетов);
				
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ЗагруженнаяСтрока);
			
	КонецЦикла; 
	
	ТекстИсключаемыеЭлементы = "";
	
	Для Каждого ИсключаемыйЭлемент Из ИсключаемыеДанные Цикл 	
		
		ИсключаемаяСтрокаТаблицы = ЗагруженныеДанные.Найти(ИсключаемыйЭлемент, "Номенклатура");
		
		Если ИсключаемаяСтрокаТаблицы <> Неопределено Тогда
			ЗагруженныеДанные.Удалить(ИсключаемаяСтрокаТаблицы); 
			ТекстИсключаемыеЭлементы = ТекстИсключаемыеЭлементы + Символы.ПС + ИсключаемыйЭлемент.Наименование;
		Иначе
			ИсключаемыйИндекс = ИсключаемыеДанные.Найти(ИсключаемыйЭлемент);
			ИсключаемыеДанные.Удалить(ИсключаемыйИндекс);
		КонецЕсли; 
				
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
		ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(СтруктураЗагруженныхДанных, ИмяТЧ);
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ИмяТЧ="Товары" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""ТМЗ"" добавлено товаров: %1, исключено услуг: %2'"), 
								ЗагруженныеДанные.Количество(),
								ИсключаемыеДанные.Количество());
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""Услуги"" добавлено услуг: %1, исключено товаров: %2'"), 
								ЗагруженныеДанные.Количество(),
								ИсключаемыеДанные.Количество());							
	КонецЕсли;
	
	Если ИсключаемыеДанные.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ":";
		ТекстСообщения = ТекстСообщения + ТекстИсключаемыеЭлементы; 
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаУслуги(Команда)
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "РеализацияТоваровУслуг.Услуги";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка услуг из файла'");
	
	ДополнительныеПараметры = Новый Структура();     
	ДополнительныеПараметры.Вставить("ИмяТЧ", "Услуги");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);
КонецПроцедуры

#КонецОбласти  

#Область ЗаполнениеПоСчету

&НаКлиенте
Процедура ВыборСчетаНаОплатуЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТекущийДокументОснование = ВыбранноеЗначение ИЛИ НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 	
		
	Объект.ДокументОснование = ВыбранноеЗначение;
	
	ТекстВопроса = НСтр("ru='Заполнить текущий документ данными из счета на оплату?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры 

#КонецОбласти


//Евгений+

&НаКлиенте
Процедура ТипыНачисленийПриИзменении(Элемент)
	МетодНачисленияОбновитьЭлементы(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНУПриИзменении(Элемент)
	Если НачалоДня(Объект.ДатаНУ) > НачалоДня(Объект.Дата) Тогда
		Объект.ДатаНУ = Дата(1,1,1);
		Сообщить("Дата НУ не может быть больше даты документа!!!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияОбновитьЭлементы(Элемент, плТипыНачислений = Ложь)
	Если ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.Оценочные") Тогда
		Объект.ДатаНУ = Дата("00010101000000");
		Элементы.ДатаНУ.Доступность = Ложь;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
 		Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Ложь;
		КонецЕсли;
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеПослеТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
       	Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Истина;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеДоТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	Иначе
		Элементы.ДатаНУ.Доступность = Ложь;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если плТипыНачислений Тогда
		Объект.ВидОперацииМН = ТипыНачислений; 
	КонецЕсли;
КонецПроцедуры
