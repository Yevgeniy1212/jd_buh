#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//Запрос статей расходов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗапросНачислений";
	КомандаПечати.Представление = НСтр("ru = 'Запрос статей расходов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать заявки на конкурс
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗапросНачислений") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗапросНачислений",
			НСтр("ru = 'Запрос статей расходов'"),
			ПечатьЗапроса(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЗапросДляРасчетаНачислений.ЗапросНачислений");                          
	КонецЕсли;                                                                   
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьРасчетПС(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПорогаСущественности.ДатаСозданияДокумента,
	|	РасчетПорогаСущественности.ПроцентОПСДляОпераций,
	|	РасчетПорогаСущественности.ПроцентОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ПроцентИПСДляОперацийИСверокВГО,
	|	РасчетПорогаСущественности.ВидБазовогоПоказателя КАК ИсходныеДанные,
	|	РасчетПорогаСущественности.СуммаИсходныхДанных,
	|	РасчетПорогаСущественности.СреднемесячныйПоказатель,
	|	РасчетПорогаСущественности.ОПСДляОпераций,
	|	РасчетПорогаСущественности.ОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ИПСДляОпераций,
	|	РасчетПорогаСущественности.ИПСДляСверокВГО,
	|	РасчетПорогаСущественности.ДатаНачалаРасчета,
	|	РасчетПорогаСущественности.ДатаОкончанияРасчета,
	|	РасчетПорогаСущественности.ДополнительнаяСумма,
	|	РасчетПорогаСущественности.ДополнительнаяИнформация
	|ИЗ
	|	Документ.РасчетПорогаСущественности КАК РасчетПорогаСущественности
	|ГДЕ
	|	РасчетПорогаСущественности.Ссылка В(&МассивОбъектов)";
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
 	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасчетПорогаСущественности.РасчетПС");

	// Получаем области макета для вывода в табличный документ.
	ОбастьМакета   = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетПС";

	// Выведем шапку документа.
	ОбастьМакета.Параметры.Валюта    			  = Константы.ВалютаРегламентированногоУчета.Получить();
	Если МассивОбъектов[0].ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.ВеличинаТекущихАктивов Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Величина всех активов Общества на "+Лев(Строка(МассивОбъектов[0].ДатаОкончанияРасчета),10);
	ИначеЕсли МассивОбъектов[0].ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.СобственныйКапитал Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Собственный капитал Общества на "+Лев(Строка(МассивОбъектов[0].ДатаОкончанияРасчета),10);
	ИначеЕсли МассивОбъектов[0].ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.ВыручкаОтРеализации Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Выручка от реализации Общества на "+Лев(Строка(МассивОбъектов[0].ДатаОкончанияРасчета),10);
	КонецЕсли;	
	
	ОбастьМакета.Параметры.ТекстРасчетаСреднемесячногоПоказателя    = "Среднемесячное значение базового показателя на "+Лев(Строка(МассивОбъектов[0].ДатаОкончанияРасчета),10);;

	ОбастьМакета.Параметры.СуммаИсходныхДанных    = МассивОбъектов[0].СуммаИсходныхДанных;
	ОбастьМакета.Параметры.ТекстДопИнформации     = МассивОбъектов[0].ДополнительнаяИнформация;
	ОбастьМакета.Параметры.СуммаДополнительная    = МассивОбъектов[0].ДополнительнаяСумма;
	ОбастьМакета.Параметры.СреднемесячноеЗначение = МассивОбъектов[0].СреднемесячныйПоказатель;
	ОбастьМакета.Параметры.БазовыйПоказатель      = МассивОбъектов[0].СреднемесячныйПоказатель;
	ОбастьМакета.Параметры.ПроцентОПСОпераций     = Строка(МассивОбъектов[0].ПроцентОПСДляОпераций)+" %";
	ОбастьМакета.Параметры.ПроцентОПССвверокВГОО  = Строка(МассивОбъектов[0].ПроцентОПСДляСверокВГО)+" %";
	ОбастьМакета.Параметры.ПроцентИПСиОПС         = Строка(МассивОбъектов[0].ПроцентИПСДляОперацийИСверокВГО)+" %";
	ОбастьМакета.Параметры.ОПСОпераций    		  = МассивОбъектов[0].ОПСДляОпераций;
	ОбастьМакета.Параметры.ОПССверокВГОО    	  = МассивОбъектов[0].ОПСДляСверокВГО;
	ОбастьМакета.Параметры.ИПСОпераций    		  = МассивОбъектов[0].ИПСДляОпераций;
	ОбастьМакета.Параметры.ИПССверокВГОО    	  = МассивОбъектов[0].ИПСДляСверокВГО;
	
	ТабДокумент.Вывести(ОбастьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()

Функция ПечатьЗапроса(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	ПериодРегистрации
	|ИЗ
	|	Документ.ЗапросДляРасчетаНачислений КАК РасчетНачислений
	|
	|ГДЕ
	|	РасчетНачислений.Ссылка В(&МассивОбъектов)";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗапросДляРасчетаНачислений_ЗапросНачислений";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросДляРасчетаНачисленийЗапросРасходов.СтатьяРасхода,
	               |	ЗапросДляРасчетаНачисленийЗапросРасходов.ВключатьВЗапрос
	               |ИЗ
	               |	Документ.ЗапросДляРасчетаНачислений.ЗапросРасходов КАК ЗапросДляРасчетаНачисленийЗапросРасходов
	               |ГДЕ
	               |	ЗапросДляРасчетаНачисленийЗапросРасходов.Ссылка В(&МассивОбъектов)";

	ЗапросНачисления = Запрос.Выполнить().Выгрузить();

 	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗапросДляРасчетаНачислений.ЗапросНачислений");

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПериодРегистрации = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Шапка.ПериодРегистрации);
    ТабДокумент.Вывести(ОбластьМакета);			
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
    НомерСтроки = 1;
	Для Каждого ВыборкаСтрокНачисления Из ЗапросНачисления Цикл 
	    Если ВыборкаСтрокНачисления.ВключатьВЗапрос Тогда
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

			ОбластьСтроки.Параметры.СтатьяРасхода = ВыборкаСтрокНачисления.СтатьяРасхода;
			
			ТабДокумент.Вывести(ОбластьСтроки);
	        НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросДляРасчетаНачисленийЗапросДоходов.СтатьяДохода,
	               |	ЗапросДляРасчетаНачисленийЗапросДоходов.ВключатьВЗапрос
	               |ИЗ
	               |	Документ.ЗапросДляРасчетаНачислений.ЗапросДоходов КАК ЗапросДляРасчетаНачисленийЗапросДоходов
	               |ГДЕ
	               |	ЗапросДляРасчетаНачисленийЗапросДоходов.Ссылка В(&МассивОбъектов)";
	ЗапросНачисления = Запрос.Выполнить().Выгрузить();

 	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗапросДляРасчетаНачислений.ЗапросНачислений");

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаД");
    ТабДокумент.Вывести(ОбластьМакета);			
	
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаД");
    НомерСтроки = 1;
	Для Каждого ВыборкаСтрокНачисления Из ЗапросНачисления Цикл 
	    Если ВыборкаСтрокНачисления.ВключатьВЗапрос Тогда
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

			ОбластьСтроки.Параметры.СтатьяРасхода = ВыборкаСтрокНачисления.СтатьяДохода;
			
			ТабДокумент.Вывести(ОбластьСтроки);
	        НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;	

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
    ТабДокумент.Вывести(ОбластьМакета);	
	
	Возврат ТабДокумент;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
