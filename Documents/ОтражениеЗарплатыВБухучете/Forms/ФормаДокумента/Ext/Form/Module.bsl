
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление(ЭтаФорма);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
	УдержанияСКонтрагентом = Новый ФиксированныйМассив(Перечисления.ВидыОперацийПоЗарплате.ВидыОперацийУдержанийТребующиеВВодаКонтрагента());
	
	УстановитьФункциональныеОпцииФормы();

//Сухомлинов Кибернетика ++
	киб_УстановитьНадписьСписаниеРезерва();
 
    НоваяКолонка = Элементы.Добавить("Начисление", Тип("ПолеФормы"), Элементы.НачисленнаяЗарплатаИВзносы); 
    НоваяКолонка.Заголовок = "Начисление"; 
    НоваяКолонка.ПутьКДанным = "Объект.НачисленнаяЗарплатаИВзносы.киб_Начисление"; 
    НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	
	НоваяКолонка = Элементы.Добавить("Участок", Тип("ПолеФормы"), Элементы.НачисленнаяЗарплатаИВзносы); 
    НоваяКолонка.Заголовок = "Участок"; 
    НоваяКолонка.ПутьКДанным = "Объект.НачисленнаяЗарплатаИВзносы.киб_Участок"; 
    НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеРезервовОплатыТруда Тогда
		Если Элементы.Найти("киб_КонвертироватьСуммы") = Неопределено Тогда
			// Создание команды
			НоваяКоманда = Команды.Добавить("киб_КонвертироватьСуммы");
			НоваяКоманда.Действие = "киб_КонвертироватьСуммы";
			НоваяКоманда.Заголовок = "Конвертировать суммы";
			
			// Создание кнопки
			НоваяКнопка = Элементы.Добавить("киб_КонвертироватьСуммы", Тип("КнопкаФормы"), Элементы.Служебное);
			НоваяКнопка.ИмяКоманды = "киб_КонвертироватьСуммы";
			НоваяКнопка.Заголовок = "Конвертировать суммы";
			НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КонецЕсли;	
	КонецЕсли;
//Сухомлинов Кибернетика --
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	

	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПриПолученииДанныхНаСервере();
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""отражение зарплаты в бух. учете"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    
    Если ИмяСобытия = "ИзмененПериод" Тогда
        УстановитьФункциональныеОпцииФормы();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаОтраженаВБухучетеПриИзменении(Элемент)
	
	Если Объект.ЗарплатаОтраженаВБухучете Тогда
		Объект.Бухгалтер = ПользователиКлиентСервер.ТекущийПользователь();
	Иначе
		Объект.Бухгалтер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
    УстановитьВидимость(ЭтаФорма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеОценочныхОбязательств")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеРезервовОплатыТруда") Тогда
		
		Объект.НачисленнаяЗарплатаИВзносы.Очистить();
		Объект.РегламентированныеУдержания.Очистить();
		Объект.УдержаннаяЗарплата.Очистить();
		Объект.ПеняПоВзносамИОтчислениям.Очистить();

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеРезервовОплатыТруда") Тогда
			Объект.ВидОперацииРезервовПоОплатеТруда = ПредопределенноеЗначение("Перечисление.ВидыОперацийРезервовПоОплатеТруда.Начисление");	
		КонецЕсли;
	Иначе
		Объект.ОценочныеОбязательства.Очистить();
    	Объект.ВидОперацииРезервовПоОплатеТруда = Неопределено;
	КонецЕсли; 

КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)

	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
   	УстановитьФункциональныеОпцииФормы();   

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
   	УстановитьФункциональныеОпцииФормы();   
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	УстановитьФункциональныеОпцииФормы();   
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
   	УстановитьФункциональныеОпцииФормы();   

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	УстановитьФункциональныеОпцииФормы();   
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		НоваяСтрока 						= Объект.НачисленнаяЗарплатаИВзносы.Добавить();	
		НоваяСтрока.ФизическоеЛицо 			= ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентированныеУдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		НоваяСтрока 						= Объект.РегламентированныеУдержания.Добавить();	
		НоваяСтрока.ФизическоеЛицо			= ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		НоваяСтрока 						= Объект.УдержаннаяЗарплата.Добавить();	
		НоваяСтрока.ФизическоеЛицо			= ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УдержаннаяЗарплатаПредставлениеОтраженияВУчете" Тогда
		
        ТекущиеДанные = Элементы.УдержаннаяЗарплата.ТекущиеДанные;
        
        СтруктураПараметров = Новый Структура();
        
        СтруктураПараметров.Вставить("СчетУчета");
        СтруктураПараметров.Вставить("Субконто1");
        СтруктураПараметров.Вставить("Субконто2");
        СтруктураПараметров.Вставить("Субконто3");
        
        ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
        
        СтруктураПараметров.Вставить("Организация", 	 Объект.Организация);
        
        ДопПараметры = Новый Структура;
        ДопПараметры.Вставить("ИмяТЧ",               "УдержаннаяЗарплата");
        ДопПараметры.Вставить("ИдентификаторСтроки", ВыбраннаяСтрока);
        
        ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтраженияВУчетеАктиваПассиваСтрокиТЧЗавершение", ЭтотОбъект, ДопПараметры);
        
        ОткрытьФорму("Документ.ОтражениеЗарплатыВБухучете.Форма.НастройкаОтраженияВУчетеПрочегоАктиваПассива", 
            СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения); 
        
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаВидОперацииПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.УдержаннаяЗарплата.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УдержанияСКонтрагентом.Найти(ДанныеСтроки.ВидОперации) = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
		ДанныеСтроки.Контрагент = "";
	КонецЕсли;
	
	Если УдержанияСКонтрагентом.Найти(ДанныеСтроки.ВидОперации) = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.КонтрагентОтправитель) Тогда
		ДанныеСтроки.КонтрагентОтправитель = "";
	КонецЕсли;
	
	Если УдержанияСКонтрагентом.Найти(ДанныеСтроки.ВидОперации) = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.РаботникОрганизации) Тогда
		ДанныеСтроки.РаботникОрганизации = "";
	КонецЕсли;
    
    ЗаполнитьАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
    
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаСотрудникПриИзменении(Элемент)
   	ЗаполнитьАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаПодразделениеПриИзменении(Элемент)
   	ЗаполнитьАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаКонтрагентПриИзменении(Элемент)
   	ЗаполнитьАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаРаботникОрганизацииПриИзменении(Элемент)
   	ЗаполнитьАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПеняПоВзносамИОтчислениямОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		НоваяСтрока 						= Объект.ПеняПоВзносамИОтчислениям.Добавить();	
		НоваяСтрока.ФизическоеЛицо			= ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		НоваяСтрока 						= Объект.ОценочныеОбязательства.Добавить();	
		НоваяСтрока.ФизическоеЛицо			= ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов") 
			И ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.Дивиденды") 
			И (ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента)) Тогда
			
			ТекущиеДанные.Контрагент = Неопределено;
			ТекущиеДанные.ДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентированныеУдержанияВидОперацииНалогиВзносыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РегламентированныеУдержания.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если (ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ИПНДоходыКонтрагентов")
			ИЛИ ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ОПВДоходыКонтрагентов")
			ИЛИ ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ОПВРасчетыСБывшимиСотрудниками")
			ИЛИ ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ВОСМСДоходыКонтрагентов")
			ИЛИ ТекущиеДанные.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ВОСМСРасчетыСБывшимиСотрудниками"))
			И (ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента)) Тогда
			
			ТекущиеДанные.Контрагент = Неопределено;
			ТекущиеДанные.ДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСотрудниковЗарплатаИВзносы(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.НачисленнаяЗарплатаИВзносы, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудниковУдержанияРегл(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.РегламентированныеУдержания, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудниковУдержаннаяЗарплата(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.УдержаннаяЗарплата, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудниковПеняПоВзносамОтчислениям(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.ПеняПоВзносамИОтчислениям, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудниковОценочныеОбязательства(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.ОценочныеОбязательства, , , ,,Режим)

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(Форма) 
	
	// Таблица Удержания, поле Контрагент, КонтрагентОтправитель.
	СписокУдержаний = Новый СписокЗначений;
	СписокУдержаний.ЗагрузитьЗначения(Перечисления.ВидыОперацийПоЗарплате.ВидыОперацийУдержанийТребующиеВВодаКонтрагента());
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид УдержаннаяЗарплата
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокУдержаний;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаКонтрагент");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаКонтрагентОтправитель");
	
	// Таблица Удержания, поле Работник организации
	СписокУдержанийТребующихВВодаРаботникаОрганизации = Новый СписокЗначений;
	СписокУдержанийТребующихВВодаРаботникаОрганизации.ЗагрузитьЗначения(Перечисления.ВидыОперацийПоЗарплате.ВидыОперацийУдержанийТребующиеВВодаРаботникаОрганизации());
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид УдержаннаяЗарплата
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокУдержанийТребующихВВодаРаботникаОрганизации;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаРаботникОрганизации");
    
    // Таблица Удержания, поле Документ-основание
	СписокУдержанийТребующихВВодаДокументаОснования = Новый СписокЗначений;
	СписокУдержанийТребующихВВодаДокументаОснования.ЗагрузитьЗначения(Перечисления.ВидыОперацийПоЗарплате.ВидыОперацийУдержанийТребующиеВВодаДокументаОснования());
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид УдержаннаяЗарплата
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокУдержанийТребующихВВодаДокументаОснования;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаДокументОснование");
	
	// Таблица НачисленнаяЗарплатаИВзносы, поле НачисленнаяЗарплатаИВзносыСпособОтраженияЗарплатыВБухучете.
	СписокНачислений = Новый СписокЗначений;
	СписокНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты);
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НачисленнаяЗарплатаИВзносы.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокНачислений;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыСпособОтраженияЗарплатыВБухучете");
	
	СписокВидовДохода = Новый СписокЗначений;
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.Дивиденды);
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НачисленнаяЗарплатаИВзносы.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокВидовДохода;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыКонтрагент");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыДоговорКонтрагента");
	
	СписокВидовДохода = Новый СписокЗначений;
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ИПНДоходыКонтрагентов);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ИПНДивиденды);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ИПНРасчетыСБывшимиСотрудниками);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ОПВДоходыКонтрагентов);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ОПВРасчетыСБывшимиСотрудниками);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВОСМСДоходыКонтрагентов);
	СписокВидовДохода.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВОСМСРасчетыСБывшимиСотрудниками);

	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РегламентированныеУдержания.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокВидовДохода;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РегламентированныеУдержанияКонтрагент");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РегламентированныеУдержанияДоговорКонтрагента");
    
    Элемент = УсловноеОформление.Элементы.Добавить();
    
    ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержаннаяЗарплатаПредставлениеОтраженияВУчете.Имя);
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
    
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	УстановитьФункциональныеОпцииФормы();
    УстановитьВидимость(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
    
   	Документы.ОтражениеЗарплатыВБухучете.ЗаполнитьПредставлениеСчетаУчетаВТЧ(Объект.УдержаннаяЗарплата);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"НачисленнаяЗарплатаИВзносыОППВ",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ВкладчикОППВ", Новый Структура("Организация", Объект.Организация)));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ОценочныеОбязательстваСуммаРезерваОППВ",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ВкладчикОППВ", Новый Структура("Организация", Объект.Организация)));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаОценочныеОбязательства",
		"Видимость",
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаНачисленнаяЗарплатаИВзносы",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаРегламентированныеУдержания",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаУдержаннаяЗарплата",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаПеняПоВзносамИОтчислениям",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ГруппаОборотПоПриобретеннымУслугамГПХВЦеляхНДС",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний")
		 И ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.ПериодРегистрации));

   	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ВидОперацииРезервовПоОплатеТруда",
		"Видимость",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеРезервовОплатыТруда"));
       
    РезервыИспользуются = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ФормируютсяРезервыВОрганизации(Объект.Организация, Объект.ПериодРегистрации);
   	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"НачисленнаяЗарплатаИВзносыГруппаРезервПоказатели",
		"Видимость",
		РезервыИспользуются);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
 	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний") Тогда
		
		Элементы.Резерв.Видимость = НЕ Форма.РезервыИспользуются;
		
	Иначе
		
		Элементы.Резерв.Видимость = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотПоГПХ(Команда)
	
	Если Объект.ОборотПоПриобретеннымУслугамГПХВЦеляхНДС.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСПродолжение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ВопросЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСПродолжение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаКлиенте();
		
	Иначе
		
		ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ОборотПоПриобретеннымУслугамГПХВЦеляхНДС.Очистить();
		
	КонецЕсли;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Документ не записан. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаКлиенте()

	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""отражение зарплаты в бух. учете (интеграция с ЗУП 3)"" (заполнение)");
	
	Результат = ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаСервере();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		и НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДСНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Организация",              Объект.Организация);
	СтруктураПараметров.Вставить("ПериодРегистрации", 		 Объект.ПериодРегистрации);
	СтруктураПараметров.Вставить("Ссылка", 		             Объект.Ссылка);
	СтруктураПараметров.Вставить("Загрузка", 		         Ложь);

	НаименованиеЗадания = "ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДС";
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.ОтражениеЗарплатыВБухучете.ЗаполнитьОборотПоПриобретеннымУслугамГПХВЦеляхНДС", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОборотПоПриобретеннымУслугамГПХВЦеляхНДС.Загрузить(СтруктураДанных.ТаблицаОборотПоПриобретеннымУслугамГПХВЦеляхНДС);
	
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура НастройкаОтраженияВУчетеАктиваПассиваСтрокиТЧЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ИмяТЧ = ДопПараметры.ИмяТЧ;
    ИдентификаторСтроки = ДопПараметры.ИдентификаторСтроки;
    
    Строка = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
    ЗаполнитьЗначенияСвойств(Строка, Результат);
    
    Строка.ПредставлениеОтраженияВУчете = Документы.ОтражениеЗарплатыВБухучете.ПредставлениеОтраженияВУчете(Результат);
    	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАналитикуРасходовСтроки(ДанныеСтроки)
	
	АналитикаРасходов = АналитикаРасходовПоУмолчанию(
								?(ЗначениеЗаполнено(ДанныеСтроки.РаботникОрганизации),ДанныеСтроки.РаботникОрганизации,ДанныеСтроки.ФизическоеЛицо),
								ДанныеСтроки.Подразделение, 
								ДанныеСтроки.ВидОперации, 
								ДанныеСтроки.Контрагент, 
								Объект.Ссылка, 
								Объект.Дата);
								
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, АналитикаРасходов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АналитикаРасходовПоУмолчанию(ФизическоеЛицо, Подразделение, ВидОперации, Контрагент, ТекущийДокумент, ДатаАктуальности)
	
	Возврат Документы.ОтражениеЗарплатыВБухучете.АналитикаРасходовПоУмолчанию(ФизическоеЛицо, Подразделение, ВидОперации, Контрагент, ТекущийДокумент, ДатаАктуальности);
	
КонецФункции

//Сухомлинов Кибернетика ++
&НаКлиенте
Процедура киб_ПерезаполнитьПоОснованию(Команда)
	киб_ПерезаполнитьПоОснованиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура киб_ПерезаполнитьПоОснованиюНаСервере()
	Док = РеквизитФормыВЗначение("Объект");
	Док.Заполнить(Объект.киб_ДокументОснование);
	ЗначениеВДанныеФормы(Док,Объект);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура киб_СписатьРезервы(Команда)
	киб_СписатьРезервыНаСервере();
КонецПроцедуры

&НаСервере
Процедура киб_СписатьРезервыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.киб_ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда  
		Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе
		Док = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
	КонецЕсли;
	Док.Заполнить(Объект.Ссылка);
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Процедура киб_УстановитьНадписьСписаниеРезерва()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.киб_ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Элементы.киб_СписаниеРезерва.Видимость = Истина;
		киб_СписаниеРезерва = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Элементы.киб_СписаниеРезерва.Видимость = Ложь;
		киб_СписаниеРезерва = Документы.ОтражениеЗарплатыВБухучете.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.киб_ДокументОснование) Тогда
		Элементы.киб_ДокументОснование.Видимость = Истина;
		Элементы.киб_ПерезаполнитьПоОснованию.Видимость = Истина;    
		Элементы.Формакиб_СписатьРезервы.Видимость = Ложь;
	Иначе
		Элементы.киб_ДокументОснование.Видимость = Ложь;
		Элементы.киб_ПерезаполнитьПоОснованию.Видимость = Ложь;  
		Элементы.Формакиб_СписатьРезервы.Видимость = Истина;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура киб_КонвертироватьСуммы(Команда)
	
	Для Каждого СтрОценочныеОбязательства Из Объект.ОценочныеОбязательства Цикл
		СтрОценочныеОбязательства.СуммаРезерва = -1*СтрОценочныеОбязательства.СуммаРезерва;
		СтрОценочныеОбязательства.СуммаРезерваСН = -1*СтрОценочныеОбязательства.СуммаРезерваСН;
		СтрОценочныеОбязательства.СуммаРезерваСО = -1*СтрОценочныеОбязательства.СуммаРезерваСО;
		СтрОценочныеОбязательства.СуммаРезерваОППВ = -1*СтрОценочныеОбязательства.СуммаРезерваОППВ;
		СтрОценочныеОбязательства.СуммаРезерваОтчисленияОСМС = -1*СтрОценочныеОбязательства.СуммаРезерваОтчисленияОСМС;
		СтрОценочныеОбязательства.СуммаРезерваОПВР = -1*СтрОценочныеОбязательства.СуммаРезерваОПВР;
	КонецЦикла;
	
КонецПроцедуры
//Сухомлинов Кибернетика ++

#КонецОбласти

#КонецОбласти
