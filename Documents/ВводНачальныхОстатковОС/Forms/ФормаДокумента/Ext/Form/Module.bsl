
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
    // СтандартныеПодсистемы.ВерсионированиеОбъектов
    ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
    // Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
    Если Параметры.Ключ.Пустая() Тогда
    	ПодготовитьФормуНаСервере();
    	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
    КонецЕсли;
    
  // Включим предопределенные счета и их субсчета
    УправлениеВнеоборотнымиАктивамиСервер.ОграничитьВыборСчетамиУчетаОС(Элементы.ОССчетУчетаБУ);
    УправлениеВнеоборотнымиАктивамиСервер.ОграничитьВыборСчетамиУчетаНачисленияАмортизацииОС(Элементы.ОССчетНачисленияАмортизацииБУ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ВводНачальныхОстатковОС", ПараметрыЗаписи, Объект.Ссылка);
	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатковОС");
	ЗаполнитьДобавленныеКолонки(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Элементы.ОСРедактированиеВДиалоге.Пометка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.ОС.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницыИтоги И МодифицированаТабличнаяЧасть Тогда
		ПересчитатьТаблицуИтогов(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры        

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Для Каждого ТекСтрока Из Объект.ОС Цикл
		Если ТекСтрока.ОсновноеСредство = ТекущиеДанные.ОсновноеСредство И ТекущиеДанные.НомерСтроки <> ТекСтрока.НомерСтроки Тогда
			ТекстСообщения = НСтр("ru='Это основное средство уже выбрано в строке № %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекСтрока.НомерСтроки);
			Поле = "ОС[" + Формат(ТекСтрока.НомерСтроки, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнвентарныйНомерРегл) Тогда
		ТекущиеДанные.ИнвентарныйНомерРегл = ОсновноеСредствоПриИзмененииНаСервере(ТекущиеДанные.ОсновноеСредство);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если (ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = 0) и (ТекущиеДанные.СрокПолезногоИспользованияБУ <> 0) Тогда
		ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = ТекущиеДанные.СрокПолезногоИспользованияБУ;
	КонецЕсли;	
	
	ОССрокИспользованияДляВычисленияАмортизацииБУПриИзмененииНаКлиенте(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокИспользованияДляВычисленияАмортизацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ОССрокИспользованияДляВычисленияАмортизацииБУПриИзмененииНаКлиенте(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССпособОтраженияРасходовПоАмортизацииБУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.Организация <> Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(Объект.Организация);
		МассивОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", МассивОрганизаций);
		МассивПараметровВыбора.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ОСКоэффициентАмортизацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		
	Если ТекущиеДанные.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом") Тогда
		Если ТекущиеДанные.КоэффициентАмортизацииБУ <> 0 Тогда
			ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = Окр((12/ТекущиеДанные.КоэффициентАмортизацииБУ ) * 100, 2);
		Иначе
			ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ОСРедактированиеВДиалоге.Пометка Тогда
		
		Отказ = Истина;
		
		ДанныеСтроки = СформироватьСтруктуруРедактированияСтроки();
		
		Если Копирование Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элемент.ТекущиеДанные);
		Иначе
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураРеквизитовЗаполняемыхПоУмолчанию); 
		КонецЕсли;
				
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументОбъект", Объект.Ссылка);
		СтруктураПараметров.Вставить("ВидимостьНУ",    Объект.УчитыватьКПН);
		СтруктураПараметров.Вставить("ВидимостьБУ",    Объект.ОтражатьВБухгалтерскомУчете);
		СтруктураПараметров.Вставить("ТекущиеДанные",  ДанныеСтроки);
		СтруктураПараметров.Вставить("ЭтоНовый",       Истина);  
		СтруктураПараметров.Вставить("НомерСтроки",    Объект.ОС.Количество());
				
		ОткрытьФорму("Документ.ВводНачальныхОстатковОС.Форма.ФормаРедактированияСтроки", Новый Структура("СтруктураПараметров", СтруктураПараметров), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ОСРедактированиеВДиалоге.Пометка Тогда
		
		Отказ = Истина;
		
		ДанныеСтроки = СформироватьСтруктуруРедактированияСтроки();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элемент.ТекущиеДанные);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументОбъект", Объект.Ссылка);
		СтруктураПараметров.Вставить("ВидимостьНУ",    Объект.УчитыватьКПН);
		СтруктураПараметров.Вставить("ВидимостьБУ",    Объект.ОтражатьВБухгалтерскомУчете);
		СтруктураПараметров.Вставить("ТекущиеДанные",  ДанныеСтроки);
		СтруктураПараметров.Вставить("ЭтоНовый",       Ложь); 
		СтруктураПараметров.Вставить("НомерСтроки",    Элемент.ТекущиеДанные.НомерСтроки - 1);
				
		ОткрытьФорму("Документ.ВводНачальныхОстатковОС.Форма.ФормаРедактированияСтроки", Новый Структура("СтруктураПараметров", СтруктураПараметров), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СтруктураРеквизитовЗаполняемыхПоУмолчанию);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьДляВычисленияАмортизацииБУПриИзменении(Элемент)
	 ЗаполнитьДобавленныеКолонкиТаблиц(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСТекущаяСтоимостьБУПриИзменении(Элемент)
	ЗаполнитьДобавленныеКолонкиТаблиц(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры                                                   

&НаКлиенте
Процедура ОСПризнакФиксированногоАктиваПриИзменении(Элемент)
	
	ТекщиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекщиеДанные.ПризнакФиксированногоАктива Тогда
		ТекщиеДанные.ТекущаяСтоимостьНУ = ТекщиеДанные.ТекущаяСтоимостьБУ - ТекщиеДанные.НакопленнаяАмортизацияБУ;	
		ТекщиеДанные.ПорядокПогашенияСтоимостиНУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизации");
	Иначе
		ТекщиеДанные.ГруппаНУ = ПредопределенноеЗначение("Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка");
		ТекщиеДанные.ТекущаяСтоимостьНУ = 0;				
		ТекщиеДанные.ТекущаяСтоимостьПР = ?(Объект.ВидУчетаНУ <> ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"), ТекщиеДанные.ТекущаяСтоимостьБУ - ТекщиеДанные.НакопленнаяАмортизацияБУ,0); // Постоянная разница в стоимости фиксированного актива				
	КонецЕсли;			                        	
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)
	МодифицированаТабличнаяЧасть = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	МодифицированаТабличнаяЧасть = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РедактированиеВДиалоге(Команда)
	Элементы.ОСРедактированиеВДиалоге.Пометка = НЕ Элементы.ОСРедактированиеВДиалоге.Пометка;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеОС(Команда)
	
	Если Объект.ОС.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть уже содержит строки. Удалить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткиТЧ", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0); 		
	Иначе
		ПослеЗакрытияВопросаОчисткиТЧ(КодВозвратаДиалога.Да, Параметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюНаСервере(ОсновноеСредство);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru = 'ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Элементы.ОСРедактированиеВДиалоге.Пометка = Истина;
	
	УстановитьФункциональныеОпцииФормы();
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета, УчетПоВсемОрганизациям");

	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН); 	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заполним значения по умолчанию
	СтруктураРеквизитовЗаполняемыхПоУмолчанию = Новый Структура;
	//счета учета ОС по умолчанию
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаБУ", ПланыСчетов.Типовой.ОсновныеСредства);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетНачисленияАмортизацииБУ", 	   ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаНДСПоПриобретению", 	   ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаНДСПоРеализации",		   ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетДоходовОтРеализацииБУ", 	   ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетСебестоимостиПриРеализацииБУ",ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаЗатратПоМодернизацииБУ", ПланыСчетов.Типовой.КапитальныйРемонтОС);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ", ПланыСчетов.Типовой.ПрочиеДоходы);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ", ПланыСчетов.Типовой.ПрочиеРасходы);
	//реквизиты начисления амортизации
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпособПоступленияРегл", 		 Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("НачислятьАмортизациюБУ", 		 Истина);
	СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпособНачисленияАмортизацииБУ", Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
		
	Если ОрганизацияПлательщикНалогаНаПрибыль Тогда
		СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ПризнакФиксированногоАктива", Истина);
		СтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ПорядокПогашенияСтоимостиНУ", Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизации);
	КонецЕсли;
		
	УправлениеФормой(ЭтаФорма);
	ЗаполнитьДобавленныеКолонки(Объект);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ПолучитьФункциональнуюОпцию("ШтрихкодУстанавливаетсяВГлавномУзлеРИБ") Тогда // В подчиненных узлах РИБ не выполняется
			Элементы.ОССформироватьШтрихкода.Доступность 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ОС.ПодчиненныеЭлементы.ОСГруппаРеквизитыНалУчета.Видимость = Объект.УчитыватьКПН;
	
	ОтражатьВБухгалтерскомУчете = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаНДС.Видимость                  = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаДоходыСебестоимость.Видимость  = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаОтклонения.Видимость           = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаАмортизация.Видимость          = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаСтоимостьАмортизации.Видимость = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаПараметрыАмортизации.Видимость = ОтражатьВБухгалтерскомУчете;
	Элементы.ОСГруппаВыработка.Видимость            = ОтражатьВБухгалтерскомУчете;   
		
	Элементы.ОСГруппаРеквизитыНалУчета.Видимость = Объект.УчитыватьКПН;
	
	Элементы.Дата.ТолькоПросмотр = Форма.ОткрытиеИзОбработкиВводаНачальныхОстатков;
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = Форма.ОткрытиеИзОбработкиВводаНачальныхОстатков;

	ЗаполнитьТабИтогов(Форма);
	ПересчитатьТаблицуИтогов(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТабИтогов(Форма)
	
	Форма.ТабИтогов.Очистить();
		
	ДобавитьСтрокуВТабИтогов(Форма, Истина, "ОСПервоначальнаяСтоимостьБУ", НСтр("ru = 'Первоначальная стоимость (БУ)'"));
	ДобавитьСтрокуВТабИтогов(Форма, Истина, "ОСТекущаяСтоимостьБУ"       , НСтр("ru = 'Текущая стоимость (БУ)'"));
	ДобавитьСтрокуВТабИтогов(Форма, Истина, "ОСНакопленнаяАмортизацияБУ" , НСтр("ru = 'Накопленная амортизация (износ) БУ'"));
	ДобавитьСтрокуВТабИтогов(Форма, Форма.Объект.ОтражатьВБухгалтерскомУчете, "ОССтоимостьДляВычисленияАмортизацииБУ", НСтр("ru = 'Стоимость для вычисления амортизации (БУ)'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВТабИтогов(Форма, ПризнакВидимости, ИмяПараметра, ПредставлениеКолонки)
		
	Если ПризнакВидимости Тогда
		НоваяСтрока = Форма.ТабИтогов.Добавить();
		НоваяСтрока.Имя           = ИмяПараметра;
		НоваяСтрока.Представление = ПредставлениеКолонки;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьТаблицуИтогов(Форма)
	
	Для Каждого Строка из Форма.ТабИтогов Цикл
		Строка.Итог = Форма.Объект.ОС.Итог(Прав(Строка.Имя, СтрДлина(Строка.Имя) - 2));
	КонецЦикла;
	
	Форма.МодифицированаТабличнаяЧасть = Ложь;
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
			
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
			
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	УстановитьФункциональныеОпцииФормы();
		
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокИспользованияДляВычисленияАмортизацииБУПриИзмененииНаКлиенте(ТекущиеДанные)
	
	Если ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ <> 0 Тогда
		
		Если (ТекущиеДанные.СпособНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом")
			Или (ТекущиеДанные.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом")
			И ТекущиеДанные.КоэффициентАмортизацииБУ = 0)) Тогда
			ТекущиеДанные.КоэффициентАмортизацииБУ = Окр((12/ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ) * 100, 2);
		КонецЕсли;
			
	Иначе
		ТекущиеДанные.КоэффициентАмортизацииБУ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруРедактированияСтроки()
		
	ДанныеСтроки = Новый Структура("ОсновноеСредство, ВыработкаКоличествоБУ, ГрафикАмортизацииБУ, ГруппаНУ, ДатаПринятияКУчетуРегл,
		| ИнвентарныйНомерРегл, КоэффициентАмортизацииБУ, КоэффициентУскоренияБУ, ЛиквидационнаяСтоимостьБУ, 
		| МОЛ, НазваниеДокументаПринятияКУчетуРегл, НакопленнаяАмортизацияБУ, НачислятьАмортизациюБУ, НомерДокументаПринятияКУчетуРегл,
		| ОбъектЗемельногоНалога, ОбъектИмущественногоНалога, ОбъектТранспортногоНалога, ОбъемПродукцииРаботБУ,
		| ОбъемПродукцииРаботДляВычисленияАмортизацииБУ, ПараметрВыработкиБУ, ПервоначальнаяСтоимостьБУ, ПорядокПогашенияСтоимостиНУ,
		| ПризнакФиксированногоАктива, РодительскоеОС, СостояниеПринятияКУчетуРегл, СпособНачисленияАмортизацииБУ,
		| СпособОтраженияРасходовПоАмортизацииБУ, СпособПоступленияРегл, СрокИспользованияДляВычисленияАмортизацииБУ, 
		| СрокПолезногоИспользованияБУ, СтоимостьДляВычисленияАмортизацииБУ, СчетДоходовОтРеализацииБУ, СчетНачисленияАмортизацииБУ,
		| СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ, СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
		| СчетСебестоимостиПриРеализацииБУ, СчетУчетаБУ, СчетУчетаЗатратПоМодернизацииБУ, СчетУчетаНДСПоПриобретению,
		| СчетУчетаНДСПоРеализации, ТекущаяСтоимостьБУ, ТекущаяСтоимостьНУ, ТекущаяСтоимостьПР");
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(СтрокаТабЧасти)
	
	СтрокаТабЧасти.ЛиквидационнаяСтоимостьБУ = ОбщегоНазначенияБКВызовСервера.ФорматСумм(?(СтрокаТабЧасти.СтоимостьДляВычисленияАмортизацииБУ > 0, СтрокаТабЧасти.ТекущаяСтоимостьБУ - СтрокаТабЧасти.СтоимостьДляВычисленияАмортизацииБУ, 0));	
	СтрокаТабЧасти.ЛиквидационнаяСтоимостьБУ = ?(СтрокаТабЧасти.ЛиквидационнаяСтоимостьБУ < 0, 0, СтрокаТабЧасти.ЛиквидационнаяСтоимостьБУ);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновноеСредствоПриИзмененииНаСервере(ОсновноеСредство)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновноеСредство, "Код").Код;		
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткиТЧ(Ответ, ДополнительныеПараметры) Экспорт
	
	ОповещениеВыбораГруппы = Новый ОписаниеОповещения("ПослеВводаЗначенияГруппы", ЭтотОбъект, Ответ);
	ПоказатьВводЗначения(ОповещениеВыбораГруппы, , НСтр("ru = 'Выберите группу ОС...'"), Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыОС")); 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПоГруппеОСНаСервере(Группа)
	Документы.ВводНачальныхОстатковОС.ЗаполнитьПоГруппеОСНаСервере(Объект, Группа, СтруктураРеквизитовЗаполняемыхПоУмолчанию);	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеВводаЗначенияГруппы(Группа, Ответ) Экспорт
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ОС.Очистить();
	КонецЕсли;
	                        	
	ЗаполнитьПоГруппеОСНаСервере(Группа);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюНаСервере(Знач ОсновноеСредство)
	
	УправлениеВнеоборотнымиАктивамиСервер.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
    Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);

	Возврат Результат;

КонецФункции

Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы)
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);

КонецПроцедуры

&НаКлиенте
Функция ПечатьОпись(ПараметрыПечати) Экспорт
	
	СтрукутраПолей = Неопределено;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("Форма") Тогда
			СтрукутраПолей = ПолучитьСоставКолонокДляПечати();
		КонецЕсли; 
	КонецЕсли;	
	
	ПараметрыПечати.ДополнительныеПараметры.Вставить("СтрукутраПолей", СтрукутраПолей);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПараметрыПечати.МенеджерПечати, ПараметрыПечати.Идентификатор, 
		ПараметрыПечати.ОбъектыПечати, ПараметрыПечати.Форма, ПараметрыПечати.ДополнительныеПараметры);
		
КонецФункции

&НаКлиенте
Функция ПолучитьСоставКолонокДляПечати()
	
	СтруктРекв = Новый Структура;
		
	Для Каждого ТекСтрока Из Элементы Цикл
		
		Если Лев(ТекСтрока.Имя, 2) <> "ОС" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(ТекСтрока) <> Тип("ПолеФормы") Тогда
		    Продолжить;		
		КонецЕсли;
		
		Если Не ТекСтрока.Видимость Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяКолонки = Прав(ТекСтрока.Имя, СтрДлина(ТекСтрока.Имя) - 2);
		
		Если Не (ИмяКолонки = "НомерСтроки" ИЛИ ИмяКолонки = "ОсновноеСредствоКод" ИЛИ ИмяКолонки = "ЛиквидационнаяСтоимостьБУ" ИЛИ ИмяКолонки = "Штрихкод") Тогда
			СтруктРекв.Вставить(ИмяКолонки, ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктРекв;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонки(Объект)
	
	Для Каждого ТекСтрока Из Объект.ОС Цикл
		ЗаполнитьДобавленныеКолонкиТаблиц(ТекСтрока);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("МОЛ");
	СтруктураРеквизитов.Вставить("СчетНачисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураРеквизитов.Вставить("ГрафикАмортизацииБУ");
		СтруктураРеквизитов.Вставить("ДатаПринятияКУчетуРегл");
		СтруктураРеквизитов.Вставить("КоэффициентУскоренияБУ");	
		СтруктураРеквизитов.Вставить("НазваниеДокументаПринятияКУчетуРегл");
		СтруктураРеквизитов.Вставить("НомерДокументаПринятияКУчетуРегл");
		СтруктураРеквизитов.Вставить("НачислятьАмортизациюБУ");
		СтруктураРеквизитов.Вставить("ОбъемПродукцииРаботБУ");
		СтруктураРеквизитов.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
		СтруктураРеквизитов.Вставить("РодительскоеОС");
		СтруктураРеквизитов.Вставить("ПараметрВыработкиБУ");
		СтруктураРеквизитов.Вставить("СостояниеПринятияКУчетуРегл");
		СтруктураРеквизитов.Вставить("СпособНачисленияАмортизацииБУ");
		СтруктураРеквизитов.Вставить("СпособОтраженияРасходовПоАмортизацииБУ");
		СтруктураРеквизитов.Вставить("СпособПоступленияРегл");
		СтруктураРеквизитов.Вставить("СчетУчетаНДСПоПриобретению");
		СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
		СтруктураРеквизитов.Вставить("СчетУчетаЗатратПоМодернизацииБУ");
		СтруктураРеквизитов.Вставить("СчетДоходовОтРеализацииБУ");
		СтруктураРеквизитов.Вставить("СчетСебестоимостиПриРеализацииБУ");
		СтруктураРеквизитов.Вставить("ОбъектИмущественногоНалога");
		СтруктураРеквизитов.Вставить("ОбъектТранспортногоНалога");
		СтруктураРеквизитов.Вставить("ОбъектЗемельногоНалога");

	КонецЕсли;
	
	Если Объект.УчитыватьКПН Тогда
		СтруктураРеквизитов.Вставить("ПризнакФиксированногоАктива");
		СтруктураРеквизитов.Вставить("ГруппаНУ");
		СтруктураРеквизитов.Вставить("ПорядокПогашенияСтоимостиНУ");		
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонки(Объект);
		
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьШтрихкода(Команда)
	СформироватьШтрихкодаНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьШтрихкодаНаСервере()
	
	МассивОС = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	Если МассивОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""ОС""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ПодключаемоеОборудованиеБКВызовСервера.СформироватьШтрихкодаМассиваОС(МассивОС)
	
КонецПроцедуры	