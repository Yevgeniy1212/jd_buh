////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);	
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
    ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения(); 
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если  СтрНайти(ЭтотОбъект.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0 Тогда
			// Это дополнительная форма редактирования табличной части.
			// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
			РасшифровкаПлатежа = ЭтотОбъект["РасшифровкаПлатежа"];
		Иначе
			// Это основная форма документа, у нее есть реквизит Объект.
			РасшифровкаПлатежа = ЭтотОбъект.Объект["РасшифровкаПлатежа"];
		КонецЕсли;
						
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет)
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""платежный ордер (поступление денежных средств)"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаДополнительно") Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды   
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;  

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		Возврат;
	КонецЕсли;
	
	СчетБанкПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделениеОтправитель = Неопределено;
		Объект.СтруктурноеПодразделениеПолучатель  = Неопределено;
		
		СтруктурноеПодразделениеОрганизацияОтправитель = Неопределено;
        СтруктурноеПодразделениеОрганизацияПолучатель = Неопределено;
		
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств") Тогда
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииКлиент();
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентОбработатьИзменениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если Объект.СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочееПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств") Тогда
		УстановитьСтатьюДДСВАналитикеСчета();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомБУПрочиеПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Прочие", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");	
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтБУ1, СубконтоКтБУ2, СубконтоКтБУ3,
									|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ПрочиеПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоКтБУ1, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", "Прочие", Объект, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ПрочиеПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоКтБУ2, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", "Прочие", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ПрочиеПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоКтБУ3, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", "Прочие", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомНУПрочиеПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Прочие", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");	
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", "Прочие", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", "Прочие", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", "Прочие", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ПрочиеПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ПрочиеПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ПрочиеПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствИнкассацияПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомБУИнкассацияПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, ,"Инкассация", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");	
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтБУ1, СубконтоКтБУ2, СубконтоКтБУ3,
									|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ИнкассацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоКтБУ1, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", "Инкассация", Объект, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ИнкассацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоКтБУ2, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", "Инкассация", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ИнкассацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоКтБУ3, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", "Инкассация", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомНУИнкассацияПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Инкассация", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");	
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", "Инкассация", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", "Инкассация", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ИнкассацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", "Инкассация", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ИнкассацияПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ИнкассацияПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ИнкассацияПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КурсНаДатуПриобретенияРеализацииВалютыПокупкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, "", "КурсНаДатуПриобретенияРеализацииВалюты");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Не ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ВидОперации") = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств") Тогда
					
			ТекстСообщения  = НСтр("ru = 'Платежный ордер вводится только на основании расходного кассового ордера с видом операции
			|""Инкассация денежных средств""'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Объект.ДокументОснование = Неопределено;
			
			Возврат; 			
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;

	ТекущийДокументОснование = Объект.ДокументОснование
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ИмяРеквизита", ЭтаФорма, "НазначениеПлатежа");
	Оповещение = Новый ОписаниеОповещения("НазначениеПлатежаЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.НазначениеПлатежа,
		НСтр("ru='Назначение платежа'"));
	
КонецПроцедуры
	
&НаКлиенте
Процедура НазначениеПлатежаЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.НазначениеПлатежа = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель 	   = Неопределено;
		СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель 	   = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель 	   = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель  = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель 	   = СтруктурноеПодразделениеОрганизацияПолучатель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
										
	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаРасчетовПоАвансам) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
		
	КонецЕсли;

	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиИОбороты", "Дт");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
			
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, "");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СуммаВзаиморасчетовПриИзменении(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СчетУчетаРасчетовБУ = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаРасчетовБУ));
	Иначе
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
	КонецЕсли;
	                
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежаПокупкаВалюты

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);
	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СуммаВзаиморасчетовПриИзменении(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, "РасшифровкаПлатежаПокупкаВалюты", "КурсВзаиморасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежаПродажаВалюты

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);
	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, "РасшифровкаПлатежаПродажаВалюты", "КурсВзаиморасчетов");

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СуммаВзаиморасчетовПриИзменении(СтрокаПлатеж);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриИзменении(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсНаДатуПриобретенияРеализацииВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, "РасшифровкаПлатежаПродажаВалюты", "КурсНаДатуПриобретенияРеализацииВалюты");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;	
	
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежаПокупкаВалюты.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.РасшифровкаПлатежаПродажаВалюты.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежаПродажаВалюты.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежаПродажаВалюты.ИзменятьПорядокСтрок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));	
	КонецЕсли;	
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Элементы.СчетБанк);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма); // параметры, зависящие вида операции
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		УстановитьПараметрыВыбораСчетовИнкассации(ЭтаФорма);
	КонецЕсли;
	
	УстановитьКурсДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	СвойстваПлатежа = Неопределено;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
		
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	

		//Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьСчетаУчетаРегл(Объект.СчетОрганизации, Объект.СчетБанк);
		
		Если (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) 
			И СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда
			
			СтрокаПлатеж.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		КонецЕсли;
		
		//Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		//		Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
		//раньше был в "УстановитьВидимость"
		УстановитьКурсВзаиморасчетовПриКонвертации(ЭтаФорма);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
		КонецЕсли;
		
	КонецЕсли;

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	// Управление видимостью счетов    
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	//ПоказыватьВДокументахСчетаУчета = Истина;
	
	//обработка субконто
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Прочие", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Инкассация", Объект.СчетУчетаРасчетовСКонтрагентомНУ);

	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
		
	УстановитьВидимостьСтраницНаСервере();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)

	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(форма.СписокВидовДоговоров.ВыгрузитьЗначения())));
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Форма.ВалютаРегламентированногоУчета));
		Элементы.РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("ВыбиратьДоговорыВВалюте", Истина));
		Элементы.РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	Иначе
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	НовыйМассивПараметров = Новый Массив();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда		
		//если отражется реализация ин.валюты, то валюта обязательно должна быть регламентированной
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Форма.ВалютаРегламентированногоУчета));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты")  Тогда
		// при покупке валюты, валюта ДС, наоборот, НЕ должна быть регламентированной
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("ВыбиратьСчетаВВалюте", Истина));
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Элемент)
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);
   
	СчетаБанка = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка.ВыгрузитьЗначения())));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетовИнкассации(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	//БУ
	МассивОтбораБУ = Новый Массив;
	МассивОтбораБУ.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВПути);
	
	СчетаИнкассацииБУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбораБУ);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаИнкассацииБУ.ВыгрузитьЗначения())));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомБУИнкассация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

	//НУ
	МассивОтбораНУ = Новый Массив;
	МассивОтбораНУ.Добавить(ПланыСчетов.Налоговый.ДенежныеСредстваВПути);
	
	СчетаИнкассацииНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбораНУ,,,, "Налоговый");
		
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаИнкассацииНУ.ВыгрузитьЗначения())));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомНУИнкассация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазниц 		 = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()

	СтруктураКурсаВалютаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);

	КурсДокумента      = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаВалютаДокумента.Кратность;

КонецПроцедуры // УстановитьКурсДокумента()

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделениеПолучатель);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоКтБУ1" + Постфикс,
		Префикс + "СубконтоКтБУ2" + Постфикс,
		Префикс + "СубконтоКтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоКтБУ1", "ЗаголовокСубконтоКтБУ2", "ЗаголовокСубконтоКтБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()

	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаИнкассация);
	МассивСтраниц.Добавить(Элементы.ГруппаПокупаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПродажаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочееПоступлениеДС);
	
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПокупаВалюты;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПродажаВалюты;        
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПрочееПоступлениеДС;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда	
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаИнкассация;
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	ВидимостьКонтрагентаИСчета = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств"));
	Элементы.СчетКонтрагента.Видимость = ВидимостьКонтрагентаИСчета;
	Элементы.Контрагент.Видимость	   = ВидимостьКонтрагентаИСчета;
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
	// --- Проверка заполненности реквизитов организации (банковский счет)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКурсВзаиморасчетовПриКонвертации(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
		И (Объект.РасшифровкаПлатежа.Количество()> 0) Тогда
		
		ВалютаДенежныхСредств = Объект.СчетОрганизации.ВалютаДенежныхСредств;
		СтруктураКурсаВалютаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДенежныхСредств, Объект.Дата);
		
		Для Каждого СтрокаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если СтрокаПлатежа.КурсВзаиморасчетов = 0 Или СтрокаПлатежа.КурсВзаиморасчетов = 1 Или Объект.СуммаДокумента = 0 Тогда
				СтрокаПлатежа.КурсВзаиморасчетов        = СтруктураКурсаВалютаДокумента.Курс;
				СтрокаПлатежа.КратностьВзаиморасчетов   = СтруктураКурсаВалютаДокумента.Кратность;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.КурсНаДатуПриобретенияРеализацииВалюты = 0 Или Объект.КурсНаДатуПриобретенияРеализацииВалюты = 1 Или Объект.СуммаДокумента = 0 Тогда
			Объект.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаВалютаДокумента.Курс / ?(СтруктураКурсаВалютаДокумента.Кратность=0, 1, СтруктураКурсаВалютаДокумента.Кратность);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВзаиморасчетовПриКонвертации

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации); 
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));		
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда	
		Если ЗначениеЗаполнено(Объект.СчетОрганизации) И Объект.СчетОрганизации.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
			ТекстСообщения  = НСтр("ru = 'При операции ""Приобретение иностранной валюты"" валюта документа должна отличаться от валюты регламентированного учета. Счет организации очищен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И Объект.СчетКонтрагента.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			ТекстСообщения  = НСтр("ru = 'При операции ""Поступление от продажи иностранной валюты"" валюта документа должна быть равна валюте регламентированного учета. Счет организации очищен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект");
		КонецЕсли;
		
	КонецЕсли;	
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа	= Объект.СуммаДокумента;
	СтрокаПлатеж.СтавкаНДС 		= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Прочие", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Инкассация", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли;

	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
		
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		УстановитьПараметрыВыбораСчетовИнкассации(ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета,,,СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	
	УстановитьКурсДокумента();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		ВалютаДенежныхСредств = ?(ЗначениеЗаполнено(Объект.СчетОрганизации.ВалютаДенежныхСредств), Объект.СчетОрганизации.ВалютаДенежныхСредств, Объект.ВалютаДокумента);
		СтруктураКурсаВалютаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДенежныхСредств, Объект.Дата);
		
		Для Каждого СтрокаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			СтрокаПлатежа.КурсВзаиморасчетов        = СтруктураКурсаВалютаДокумента.Курс;
			СтрокаПлатежа.КратностьВзаиморасчетов   = СтруктураКурсаВалютаДокумента.Кратность;
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ЭтаФорма);
			КонецЕсли;
		КонецЦикла;
		
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаВалютаДокумента.Курс / ?(СтруктураКурсаВалютаДокумента.Кратность=0, 1, СтруктураКурсаВалютаДокумента.Кратность);
		
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда

		Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		КонецЦикла;	
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = ?(Объект.КурсНаДатуПриобретенияРеализацииВалюты = 0, 1,Объект.КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											СтрокаПлатеж.КурсВзаиморасчетов, 1,
											СтрокаПлатеж.КратностьВзаиморасчетов, 1);
											
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
		
		СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = ?(СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = 0, 1, СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
											
		УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли; 
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

&НаСервере
Процедура СчетБанкПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда

		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ПриИзмененииВалютыДокументаНаСервере();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыДокументаНаСервере(СтруктураРезультатаВыполнения = Неопределено)

	Если Не Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда

		НеобходимПересчетСумм = СтруктураРезультатаВыполнения = Неопределено ИЛИ (СтруктураРезультатаВыполнения.Свойство("НеобходимПересчетСумм") И СтруктураРезультатаВыполнения.НеобходимПересчетСумм);
		
		Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента", ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.ВалютаДокумента, НеобходимПересчетСумм);
		
		Если НеобходимПересчетСумм Тогда

			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
			
			Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
				Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
					// Курс взиморасчетов используется для хранения курса приобретения валюты (в валюте документа)
					УстановитьКурсВзаиморасчетовПриКонвертации(ЭтаФорма);
					Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
						РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
					КонецЦикла;	
				ИначеЕсли Не Объект.СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
					//Необходимо пересчитать суммы в таблице расшифровок.
					Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
						СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
													ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
													ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
													ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
													
						РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма)
					КонецЦикла;
				КонецЕсли;
			КонецЕсли; 

		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(Форма)
		
	Если Форма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = Форма.Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Форма.Объект.СуммаДокумента;
		
		Если Форма.ЕстьРасшифровкаПлатежа Тогда
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если Не СтруктураПараметров.ИзмененаОрганизация И Не СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		НовыйСчетОрганизации = Объект.СтруктурноеПодразделениеПолучатель.ОсновнойБанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		НовыйСчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
	Иначе
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ВалютаСчета = НовыйСчетОрганизации.ВалютаДенежныхСредств;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
			И ВалютаСчета = ВалютаРегламентированногоУчета Тогда
			
			НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			И ВалютаСчета <> ВалютаРегламентированногоУчета Тогда
			
			НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли; 
	Объект.СчетОрганизации = НовыйСчетОрганизации;
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		СчетОрганизацииПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);
	КонецЕсли;	

	Если ЕстьРасшифровкаПлатежа Тогда
		УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);
	КонецЕсли;

	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
		
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) И СтруктурноеПодразделениеОрганизацияОтправитель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - отправитель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) И СтруктурноеПодразделениеОрганизацияПолучатель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Объект.СтруктурноеПодразделениеПолучатель	  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - получатель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;

	//обработка субконто
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Прочие", "СчетУчетаРасчетовСКонтрагентомНУ");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтБУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "Инкассация", "СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;	

	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)

	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств
	Тогда
		
		СтруктураРеквизитовШапки = Неопределено;
		СписокАналитикиСчетовШапки = Новый СписокЗначений;
		
		СписокАналитикиСчетовШапки.Добавить("БУ");// СчетБУ
		СписокАналитикиСчетовШапки.Добавить("НУ");// СчетНУ
		
		СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки, СуффиксСчета, СуффиксСубконто", Объект, СписокАналитикиСчетовШапки, "УчетаРасчетовСКонтрагентом", "Кт");
		
		РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, , , СтруктураРеквизитовШапки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено, ПричиныИзмененияСчетовУчета)
	
	ВалютаДенежныхСредствОрганизации = Объект.СчетОрганизации.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(ВалютаДенежныхСредствОрганизации) И (ВалютаДенежныхСредствОрганизации <> Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Объект.СчетОрганизации.ВалютаДенежныхСредств;
		ПриИзмененииВалютыДокументаНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;	
		
	ВалютаДенежныхСредствКонтрагента = Объект.СчетКонтрагента.ВалютаДенежныхСредств;
	Если Не Объект.СчетКонтрагента.Пустая() И Не ВалютаДенежныхСредствОрганизации = ВалютаДенежныхСредствКонтрагента Тогда

		ТекстСообщения  = НСтр("ru = 'Валюта счета контрагента не соответствует валюте счета организации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетКонтрагента", "Объект");
		
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();

	КонецЕсли;

	//Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьСчетаУчетаРегл(Объект.СчетОрганизации, Объект.СчетБанк);

	ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета)
	
	Если ПричиныИзмененияСчетовУчета.Найти("Контрагент") = Неопределено Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	КонецЕсли;

	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтавкаНДС 	= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
	
	ОсновнойДоговорКонтрагента 		= ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
	ВидОсновногоДоговораКонтрагента = ОсновнойДоговорКонтрагента.ВидДоговора;
	
	ИзмененаОрганизация = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;

	ИначеЕсли Не УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ВидОсновногоДоговораКонтрагента) = Неопределено Тогда

		ВалютаВзаиморасчетов 			= ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
		ОрганизацияДоговораКонтрагента  = ОсновнойДоговорКонтрагента.Организация;
		
		Если Не (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
			И ЗначениеЗаполнено(ОсновнойДоговорКонтрагента)
			И ВалютаВзаиморасчетов <> ЭтаФорма.ВалютаРегламентированногоУчета) Тогда
			
			Если Объект.Организация.Пустая() Тогда

				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Если Объект.Организация <> ОсновнойДоговорКонтрагента.Организация Тогда
					ИзмененаОрганизация = Истина;
				КонецЕсли;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				СтруктурноеПодразделениеОрганизация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ЗначениеЗаполнено(ОрганизацияДоговораКонтрагента)
				ИЛИ ОрганизацияДоговораКонтрагента = Объект.Организация Тогда

				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;

			КонецЕсли;

		КонецЕсли;	

	КонецЕсли;
	
	Если ИзмененаОрганизация Тогда
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", Истина, Ложь), Неопределено);
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС 					   = СтараяСтавкаНДС;
		
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	Иначе
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере()
	
	ВалютаДСОрганизации = Объект.СчетОрганизации.ВалютаДенежныхСредств;
	ВалютаДСКонтрагента = Объект.СчетКонтрагента.ВалютаДенежныхСредств;

	Если Не Объект.СчетОрганизации.Пустая() И Не ВалютаДСОрганизации = ВалютаДСКонтрагента Тогда

		ТекстСообщения  = НСтр("ru = 'Валюта счета контрагента не соответствует валюте счета организации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетКонтрагента", "Объект");
	 
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();

		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораНаСервере(НомерСтрокаПлатежа = Неопределено, ПричиныИзмененияСчетовУчета)
	
	Если НомерСтрокаПлатежа = Неопределено Тогда
		РасшифровкаПлатежей = Объект.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежей = Новый Массив;
		РасшифровкаПлатежей.Добавить(Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа));
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежей Цикл

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
			И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
			И СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			
			// можно выбирать только договор в валюте регламентированного учета
			СтрокаПлатеж.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
			И СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			
			// можно выбирать только договор в иностранной валюте учета
			СтрокаПлатеж.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		КонецЕсли;
		
		СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

		ТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов;

		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Объект.Дата);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			// Не изменяем курс взаиморасчетов.
			// Курс взаиморасчетов используется для хранения курса приобретения валюты (в валюте документа)
			УстановитьКурсВзаиморасчетовПриКонвертации(ЭтаФорма);
		Иначе
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
				СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПлатеж.КурсВзаиморасчетов;
			КонецЕсли; 
			
		КонецЕсли; 

		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

		//Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);

		Если Не ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
			СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");			
		КонецЕсли;
		
		СтрокаПлатеж.Сделка = Неопределено;
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"РасшифровкаПлатежа.ДоговорКонтрагента",
			Объект,
			СтрокаПлатеж);
			
		Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ПлатежныйОрдерПоступлениеДенежныхСредств,
			ПараметрыЗаполненияСчетовУчета.КЗаполнению,
			Объект,
			"РасшифровкаПлатежа",
			СтрокаПлатеж);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	//СП в шапке
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	//СП отправитель, для ВО "прочее поступление ДС"
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	//СП получатель, для ВО "прочее поступление ДС"
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		//всегда будет отображаться панель для выбора организации. Для выбора структурных подразделений предназначена своя панель
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
		
		// Заполнение реквизитов формы "СтруктурноеПодразделение"
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Элементы.ГруппаОтправитель.Видимость = Истина;
			Элементы.ГруппаПолучатель.Видимость = Истина;
						
			Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель)Тогда
				СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			
			Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)Тогда
				СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияПолучатель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
		Иначе 
			Если Не Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Или ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				     				
				Элементы.ГруппаОтправитель.Видимость = Истина;
				Элементы.ГруппаПолучатель.Видимость = Истина;
			
				СтруктурноеПодразделениеОрганизацияОтправитель 		 = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				СтруктурноеПодразделениеОрганизацияПолучатель  		 = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			Иначе
				Элементы.ГруппаОтправитель.Видимость = Ложь;
				Элементы.ГруппаПолучатель.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
						
	//для других операций, даем выбор только одного структурного подразделения, которое будет хранится в реквзите "СтруктурноеПодразделениеОтправитель"
	Иначе
		//для других операций, даем выбор только одного структурного подразделения, которое будет хранится в реквзите "СтруктурноеПодразделениеПолучатель"
		Если  ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)Тогда
				СтруктурноеПодразделениеОрганизация = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, Истина);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
		
		Иначе 
			Если Не Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)Тогда
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
				
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, Истина);
			Иначе
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоговуюСумму(ТабличнаяЧасть, Графа = "СуммаПлатежа")
	
	Объект.СуммаДокумента = Объект[ТабличнаяЧасть].Итог(Графа);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучатель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправитель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	// если ДДС не заполнена устанавливать субконто не нужно
	Если Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + Строка(НомерСубконто)] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств") Тогда
			Объект["СубконтоКтБУ" + Строка(НомерСубконто)] = Объект.СтатьяДвиженияДенежныхСредств;
			ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, НомерСубконто, Объект["СубконтоКтБУ" + Строка(НомерСубконто)], "СубконтоКтНУ");
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтБУ1", "СубконтоКтБУ2", "СубконтоКтБУ3", 
	                                                        ДанныеОбъекта.СубконтоКтБУ1, ДанныеОбъекта.СубконтоКтБУ2, ДанныеОбъекта.СубконтоКтБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));
															
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, Постфикс, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзаиморасчетовПриИзменении(СтрокаПлатеж)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		Если (СтрокаПлатеж.СуммаПлатежа<> 0) И (КратностьДокумента <> 0) Тогда
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов
							/ СтрокаПлатеж.СуммаПлатежа * КратностьДокумента; 
		КонецЕсли;					
	Иначе
		Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
								/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
		КонецЕсли;					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВалютыНачалоВыбораНаКлиенте(СтрокаПлатеж, ИмяТЧ, ИмяПоля = "")

	СтруктураПараметров = Новый Структура;
	
	ПараметрыОповещения			= Новый Структура;
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		ПараметрыОповещения.Вставить("ИмяТЧ", ИмяТЧ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ПараметрыОповещения.Вставить("ИмяПоля", ИмяПоля);
	КонецЕсли;	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		СтруктураПараметров.Вставить("Валюта", Объект.ВалютаДокумента);
	Иначе	
		Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			ТекстСообщения  = НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		СтруктураПараметров.Вставить("Валюта", СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	
	Если ПустаяСтрока(ИмяТЧ) И ПустаяСтрока(ИмяПоля) Тогда
		СтруктураПараметров.Вставить("КратностьВалюты", 			 СтрокаПлатеж.КратностьВзаиморасчетов);
		СтруктураПараметров.Вставить("КурсВалюты", 					 СтрокаПлатеж.КурсВзаиморасчетов);
		
	ИначеЕсли ПустаяСтрока(ИмяТЧ) И Не ПустаяСтрока(ИмяПоля) Тогда
		СтруктураПараметров.Вставить("КурсВалюты", 					 Объект[ИмяПоля]);
		
	Иначе
		СтруктураПараметров.Вставить("КурсВалюты", 			 		 СтрокаПлатеж[ИмяПоля]);
		
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
		ИмяТЧ	= "";
		ИмяПоля = "";
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
			ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
			Если Параметры.Свойство("ИмяПоля", ИмяПоля) Тогда
				ТекущиеДанные[ИмяПоля] = Результат.КурсВалюты;
				ЗаполнятьКурсиКратностьРасшифровки = Ложь;
			КонецЕсли;   		
		ИначеЕсли Параметры.Свойство("ИмяПоля", ИмяПоля) Тогда
			Объект[Параметры.ИмяПоля] = Результат.КурсВалюты;
			ЗаполнятьКурсиКратностьРасшифровки = Ложь;
		Иначе
			
			ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		КонецЕсли;
		
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
			ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
			
			РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
			
		КонецЕсли;
	КонецЕсли; 
	                                                             		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СчетОрганизации");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
		
	Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
	ПриИзмененииЗначенияОрганизацииНаСервере(ПараметрыОбработки, Неопределено);
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) И (ИсходныеДанные.СчетОрганизации <> Объект.СчетОрганизации) Тогда
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Прочие", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "Инкассация", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета);
	
	Если Не Объект.СчетКонтрагента.Пустая() Тогда
		СчетКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(, ПричиныИзмененияСчетовУчета);

КонецПроцедуры	

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииКлиент()

	Если Объект.СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ВалютаДенежныхСредств = ПолучитьЗначениеРеквизита(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И (ВалютаДенежныхСредств <> Объект.ВалютаДокумента)
		И Объект.СуммаДокумента > 0 Тогда
		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчет, ВалютаДенежныхСредств", Истина, ВалютаДенежныхСредств));

	Иначе
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчетеСуммыДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Ложь);
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Возврат;
		
	Иначе
		
		СтруктураРезультатаВыполнения = Параметры;
		
	КонецЕсли;
	
	Если НЕ Параметры = Неопределено И Параметры.Свойство("ИзмененСчет") Тогда
		
		Если СтруктураРезультатаВыполнения = Неопределено Тогда
			СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Истина);
		Иначе
			СтруктураРезультатаВыполнения.Вставить("НеобходимПересчетСумм", Истина);
		КонецЕсли;
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетБанк");
	
	// инкассация
	//ЭлементыСчетов.Добавить("ГруппаСчетаИАналитика");
	//ЭлементыСчетов.Добавить("ГруппаСчетАналитикаБУИнкассация");
	//ЭлементыСчетов.Добавить("ГруппаСчетАналитикаНУИнкассация");
	
	// прочее поступление
	//ЭлементыСчетов.Добавить("ГруппаСчетаИАналитикаПрочее");
	//ЭлементыСчетов.Добавить("ГруппаСчетАналитикаБУ");
	//ЭлементыСчетов.Добавить("ГруппаСчетАналитикаНУ");
	
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентомНУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовСКонтрагентомНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНУ = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	Элементы.СчетБанк.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
						
		Если ЕстьРасшифровкаПлатежа 
			И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет возвратов'");								
			Иначе	
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов'");
			КонецЕсли;
					
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ.Видимость =
			ВидимостьНУ И Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		Элементы.РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Ложь;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСчетАналитикаБУ.Видимость = Истина;
		Элементы.ГруппаСчетАналитикаНУ.Видимость = ВидимостьНУ;
		Элементы.ГруппаСчетаИАналитикаПрочее.Видимость = Истина;
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		Элементы.ГруппаСчетАналитикаБУИнкассация.Видимость = Истина;
		Элементы.ГруппаСчетАналитикаНУИнкассация.Видимость = ВидимостьНУ;
		Элементы.ГруппаСчетаИАналитика.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПлатежныйОрдерПоступлениеДенежныхСредств",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ1");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ2");
	КонецЕсли;

	// СтатьяДвиженияДенежныхСредств
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ2");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКтНУ2");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
		КонецЕсли;

		// СтатьяДвиженияДенежныхСредств
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВидУчетаНУПриИзмененииНаСервере()
	УстановитьВидимостьСчетовУчета();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	ВидУчетаНУПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти
