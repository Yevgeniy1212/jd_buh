#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	
	// инкассация
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИнкассацияДенежныхСредств");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКтБУ1", "СубконтоДенежныеСредства1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКтБУ2", "СубконтоСтатьяДвиженияДенежныхСредств2");

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомНУ", "ИнкассацияНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИнкассацияДенежныхСредств");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКтНУ1", "СубконтоДенежныеСредства1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоКтБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКтНУ2", "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоКтБУ2");

	// Табличная часть РасшифровкаПлатежа
	
	// возврат ДС поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "РасчетыСПоставщикомПоВозвратам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ПустойСчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");

	// расчеты по займам и кредитам
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКВыплате");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКВыплатеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// приобретение/продажа валюты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "КонвертацияВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ПустойСчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьОперацииСВалютой");
	
	// прочие расчеты с контрагентом
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателемПрочие");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ПустойСчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	// прочие виды операций
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ПустойСчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьОперацииСВалютой");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтатьяДвиженияДенежныхСредств");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	Для Каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасшифровкаПлатежа", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасчетыПоКредитам" , "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьОперацииСВалютой"  , "ВидОперации");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасшифровкаПлатежа") Тогда
		
		ДанныеЗаполнения.ЕстьРасшифровкаПлатежа = ЕстьРасшифровкаПлатежа(ДанныеЗаполнения.ВидОперации);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасчетыПоКредитам") Тогда
		
		ДанныеЗаполнения.ЕстьРасчетыПоКредитам = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьОперацииСВалютой") Тогда
		
		ДанныеЗаполнения.ЕстьОперацииСВалютой = 
			ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
		
	КонецЕсли;

КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПоставщиком");
	ВидыОпераций.Добавить("РасчетыПоКредитамИЗаймам");
	ВидыОпераций.Добавить("ИнкассацияДенежныхСредств");
	ВидыОпераций.Добавить("ПриобретениеИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажиИностраннойВалюты");
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");
	ВидыОпераций.Добавить("ОплатаСтруктурногоПодразделения");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаУчетаРегл(СчетОрганизации, СчетБанк) Экспорт
	
	//заполним счет учета
	Если Не СчетОрганизации.Пустая() Тогда
		СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ	= ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам			= ПланыСчетов.Типовой.ПустаяСсылка();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ	= ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     	= ПланыСчетов.Типовой.ПустаяСсылка();
		
	ИначеЕсли НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда

		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        	 = СчетаУчета.СчетВозвратов;
		
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = ПланыСчетов.Типовой.ПустаяСсылка();
			
		Иначе

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = СчетаУчета.СчетАвансовПокупателя;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация, СтруктурноеПодразделениеОтправитель,СтруктурноеПодразделениеПолучатель ");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Касса");
		БлокируемыеРеквизиты.Добавить("ДатаВыписки");
		БлокируемыеРеквизиты.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		БлокируемыеРеквизиты.Добавить("Оплачено");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");		
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации"); 
		БлокируемыеРеквизиты.Добавить("СчетКонтрагента"); 
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Контрагент; РасшифровкаПлатежаКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты; РасшифровкаПлатежаКурсНаДатуПриобретенияРеализацииВалюты");
		
		// таб. часть РасшифровкаПлатежаПокупкаВалюты платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.ДоговорКонтрагента; РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаПлатежа; РасшифровкаПлатежаПокупкаВалютыСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаНДС; РасшифровкаПлатежаПокупкаВалютыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СтавкаНДС; РасшифровкаПлатежаПокупкаВалютыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КратностьВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КурсВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов");		
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.СуммаВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов; РасшифровкаПлатежаПокупкаВалютыРасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПокупкаВалюты.КурсНаДатуПриобретенияРеализацииВалюты;РасшифровкаПлатежаПокупкаВалютыКурсНаДатуПриобретенияРеализацииВалюты");
		
		// таб. часть РасшифровкаПлатежаПродажаВалюты 
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.ДоговорКонтрагента; РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаПлатежа; РасшифровкаПлатежаПродажаВалютыСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаНДС; РасшифровкаПлатежаПродажаВалютыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СтавкаНДС; РасшифровкаПлатежаПродажаВалютыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КратностьВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.СуммаВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КурсВзаиморасчетов; РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежаПродажаВалюты.КурсНаДатуПриобретенияРеализацииВалюты;РасшифровкаПлатежаПродажаВалютыКурсНаДатуПриобретенияРеализацииВалюты");

			
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.ВалютаДокумента		   = ВалютаРегламентированногоУчета;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);

	Объект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	Объект.ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Типовой.ПустаяСсылка());
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",     ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Объект.ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		Иначе
			Объект.ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли; 
		
		Объект.Контрагент		   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору      = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			Объект.ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		
		Если Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") Тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") Тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС	= ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,			 		  "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,	  "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ");		
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам");
		Иначе				
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснованиеРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ТипЗнч(ДокументОснованиеРТУ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснованиеРТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если НЕ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			ВызватьИсключение НСтр("ru = 'Платежный ордер вводится только на основании расходного кассового ордера с видом операции
			|""Инкассация денежных средств""'");
			
		КонецЕсли;
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств;
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ 	= ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентомБУ;
		Объект.СубконтоКтБУ1						= ПараметрыДокументаОснования.СубконтоДтБУ1;
		Объект.СубконтоКтБУ2						= ПараметрыДокументаОснования.СубконтоДтБУ2;
		Объект.СубконтоКтБУ3						= ПараметрыДокументаОснования.СубконтоДтБУ3;
		
		Объект.СтатьяДвиженияДенежныхСредств 		= ПараметрыДокументаОснования.СтатьяДвиженияДенежныхСредств;
		Объект.СуммаДокумента 						= ПараметрыДокументаОснования.СуммаДокумента;
		
		//Объект.СчетБанк 							= ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		Объект.Контрагент  = ПараметрыДокументаОснования.Эквайрер;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорВзаиморасчетовЭквайрера;
		
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрокаПлатежа = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрокаПлатежа.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			НоваяСтрокаПлатежа.Сделка = ДокументОснование;
		КонецЕсли;

		НоваяСтрокаПлатежа.КурсВзаиморасчетов = КурсДокумента;
		НоваяСтрокаПлатежа.КратностьВзаиморасчетов = КратностьДокумента;
		
		Если ДокументОснование.РасшифровкаПлатежа.Количество() = 1 Тогда
			НоваяСтрокаПлатежа.СтатьяДвиженияДенежныхСредств = ДокументОснование.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;

		НоваяСтрокаПлатежа.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента - ПараметрыДокументаОснования.СуммаТорговойУступки;
		НоваяСтрокаПлатежа.СуммаВзаиморасчетов = НоваяСтрокаПлатежа.СуммаПлатежа;
		
		УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(НоваяСтрокаПлатежа);
		
		НоваяСтрокаПлатежа.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
		
		УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(НоваяСтрокаПлатежа);
		
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

		Объект.СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
		НоваяСтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПараметрыДокументаОснования.СчетУчетаРасчетовСЭквайрером;
	
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт

	ЕстьРасшифровка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты"));

	Возврат ЕстьРасшифровка;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
//Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	// Коэффициент пересчета сумм из валюты документа в тенге
	Если Реквизиты.ДокументВРеглВалюте Тогда
		КоэффициентРеглВалюты = 1;
	Иначе                                                                                                                                               
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
		КонецЕсли;
		
		КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	Запрос.УстановитьПараметр("КоэффициентРеглВалюты", КоэффициентРеглВалюты);
	
	Если Отказ Или НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ПодразделениеДляРеглОпераций					= УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ПодразделениеДляРеглОпераций ", 			  	 ПодразделениеДляРеглОпераций);
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   ВедениеУчетаВременныхразницБалансовымМетодом);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, 						"НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПодразделениеДляРеглОпераций, 					"ПодразделениеДляРеглОпераций");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхразницБалансовымМетодом, 	"ВедениеУчетаВременныхразницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                 ВалютаРеглУчета);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", 		 НеобходимостьОтраженияВНУ);
	
	Запрос.УстановитьПараметр("СодержаниеПокупкаВалюты", НСтр("ru = 'Приобретение иностранной валюты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПродажаВалюты", НСтр("ru = 'Продажа иностранной валюты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочее"       , НСтр("ru = 'Прочее поступление денежных средств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеИнкассация"   , НСтр("ru = 'Инкассация денежных средств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочиеРасчеты", НСтр("ru = 'Расчеты с контрагентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеРасчетыКредит", НСтр("ru = 'Расчеты по кредитам и займам'", ОбщегоНазначения.КодОсновногоЯзыка()));	
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц,      ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
	|					ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
	|				КОНЕЦ		
	|			ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
	|	КОНЕЦ КАК СчетБанкНУ,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеДляРеглОпераций,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК КратностьВзаиморасчетов
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК Реквизиты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
	|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО Реквизиты.СчетБанк = Типовой.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.ДокументВРеглВалюте КАК ДокументВРеглВалюте,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетБанкНУ КАК СчетБанкНУ,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПодразделениеДляРеглОпераций КАК ПодразделениеДляРеглОпераций,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|
	|ИЗ
	| 	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// в данных видах операций табличная часть Расшифровка платежа не используется
	Если Не ЕстьРасшифровкаПлатежа(Реквизиты.ВидОперации) Тогда 
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	| 	ВЫБОР 
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам) 
	|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ
	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав))
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
	|					ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|				ИНАЧЕ ВЫБОР 
	|						КОГДА Реквизиты.ДокументВРеглВалюте
	|							ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|						ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0 
	|								ТОГДА 0
	|							ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
	|						КОНЕЦ		
	|					КОНЕЦ
	|				КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Реквизиты.ДокументВРеглВалюте
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0 
	|					ТОГДА 0
	|				ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
	|				КОНЕЦ
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
    |ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - РасчетыПоКредитамИЗаймам
	// - ПрочиеРасчетыСКонтрагентами 
	// - ВозвратДенежныхСредствПоставщиком
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
	Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком) 
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя) 
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл,
		|   ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		|			ТОГДА &СодержаниеПрочиеРасчеты
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
		|			ТОГДА &СодержаниеРасчетыКредит
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ИнкассацияДенежныхСредств 
	// - ПрочееПоступлениеБезналичныхДенежныхСредств  
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Период							КАК Период,
		|	Реквизиты.Организация						КАК Организация,
		|	Реквизиты.ВалютаДокумента					КАК ВалютаДокумента,
		|	Реквизиты.Контрагент						КАК Контрагент,
		|	&НеобходимостьОтраженияВНУ					КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ						КАК ВидУчетаНУ,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ 	КАК СчетКтБУ,
		|	Реквизиты.СубконтоКтБУ1 					КАК СубконтоКтБУ1,
		|	Реквизиты.СубконтоКтБУ2 					КАК СубконтоКтБУ2,
		|	Реквизиты.СубконтоКтБУ3 					КАК СубконтоКтБУ3,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ 	КАК СчетКтНУ,
		|	Реквизиты.СубконтоКтНУ1 					КАК СубконтоКтНУ1,
		|	Реквизиты.СубконтоКтНУ2 					КАК СубконтоКтНУ2,
		|	Реквизиты.СубконтоКтНУ3 					КАК СубконтоКтНУ3,
		|	Реквизиты.СчетБанк 							КАК СчетДтБУ,
		|	Реквизиты.СчетОрганизации 					КАК СубконтоДтБУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоДтБУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтБУ3,
		|	Реквизиты.СчетБанкНУ						КАК СчетДтНУ,
		|	Реквизиты.СчетОрганизации 					КАК СубконтоДтНУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоДтНУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтНУ3,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель  КАК СтруктурноеПодразделениеПолучатель,
		| 	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств) 
		|			ТОГДА Реквизиты.СтруктурноеПодразделениеОтправитель
		|		ИНАЧЕ Реквизиты.СтруктурноеПодразделениеПолучатель
		|	КОНЕЦ КАК СтруктурноеПодразделениеОтправитель,
	 	|	Реквизиты.СуммаДокумента 					КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		| 	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств) 
		|			ТОГДА &СодержаниеПрочее
		|		ИНАЧЕ &СодержаниеИнкассация
		|	КОНЕЦ КАК Содержание
	 	|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РеквизитыПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРеглПоКурсуБанка,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл,
		|	&СодержаниеПокупкаВалюты КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПриобретениеВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПриобретениеВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР	
		|					КОГДА ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = &ВалютаРеглУчета
		|						ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|				КОНЕЦ
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРеглПоКурсуБанка,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл,
		|	&СодержаниеПродажаВалюты КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПродажаВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|  
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";  
	
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
		|ГДЕ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|	И ПлатежныйОрдерПоступлениеДенежныхСредств.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПокупателю
		|	И НЕ ПлатежныйОрдерПоступлениеДенежныхСредств.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|	И НЕ ПлатежныйОрдерПоступлениеДенежныхСредств.ДокументОснование ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПлатежныйОрдерПоступлениеДенежныхСредств");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
			
			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла; 

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

#КонецЕсли

