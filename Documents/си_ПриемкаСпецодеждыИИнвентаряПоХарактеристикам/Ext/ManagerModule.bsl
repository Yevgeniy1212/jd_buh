#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//// Поступление спецодежды
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ПоступлениеСпецодежды";
	//КомандаПечати.Представление = НСтр("ru = 'Поступление спецодежды'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	//КомандаПечати.МестоРазмещения = "Печать";
	//КомандаПечати.Порядок = 50;	
	//
	Возврат;	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПоступлениеСпецодежды") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ПФ_MXL_ПоступлениеСпецодежды",
	//		НСтр("ru = 'Расходный ордер'"),
	//		ПечатьПоступлениеСпецодежды(МассивОбъектов, ОбъектыПечати),
	//		,
	//		"Документ.си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикам.ПФ_MXL_ПоступлениеСпецодежды");
	//КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПоПоступлению(Поступление, Очищать = Ложь, Объект) Экспорт
	
	общ_ПереопределяемыеПроцедурыБКСервер.ЗаполнитьШапкуДокументаПоОснованию(Объект, Поступление);
	
	Если ТипЗнч(Поступление) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТабЧасть = Объект.Материалы;
		Если Очищать Тогда
			ТабЧасть.Очистить();
			Объект.НомераГТД.Очистить();
		КонецЕсли;
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Поступление", Поступление);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение,
		|	ПоступлениеТоваровУслуг.УчитыватьКПН,
		|	ПоступлениеТоваровУслуг.Склад,
		|	ПоступлениеТоваровУслуг.ВидУчетаНУ
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &Поступление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		|	ПоступлениеТоваровУслугТовары.Коэффициент,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Склад,
		|	ПоступлениеТоваровУслугТовары.НомерГТД
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем
		|	И ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаШапка = Результат[0].Выбрать();
		Если ВыборкаШапка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект,ВыборкаШапка);
		КонецЕсли;
		
		ВыборкаТоваров = Результат[1].Выбрать();

		Пока ВыборкаТоваров.Следующий() Цикл
			НоваяСтрока = ТабЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоваров);
			ПараметрыОбъекта = Новый Структура("Дата, Организация, СтруктурноеПодразделение, Склад, УчитыватьКПН, ВидУчетаНУ", Объект.Дата,Объект.Организация,Объект.СтруктурноеПодразделение,Объект.Склад, Объект.УчитыватьКПН,Объект.ВидУчетаНУ);
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта,Объект);
			НоваяСтрока.КлючСвязи = общ_ПереопределениеПроцедурБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТабЧасть);
			СведенияОНоменклатуре = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОНоменклатуре(НоваяСтрока.Номенклатура, ПараметрыОбъекта);
			Если Не СведенияОНоменклатуре = Неопределено Тогда
				ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, НоваяСтрока, "Материалы", СведенияОНоменклатуре);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
				НоваяСтрокаГТД = Объект.НомераГТД.Добавить();
				НоваяСтрокаГТД.КлючСвязи = НоваяСтрока.КлючСвязи;
				НоваяСтрокаГТД.Количество = ВыборкаТоваров.Количество * ?(ВыборкаТоваров.Коэффициент=0,1,ВыборкаТоваров.Коэффициент);
				НоваяСтрокаГТД.НомерГТД = ВыборкаТоваров.НомерГТД;
			КонецЕсли;
			
		КонецЦикла;
		ВыборкаТоваров.Сбросить();
		Если ВыборкаТоваров.Следующий() Тогда
			Объект.Склад = ВыборкаТоваров.Склад;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , Поступление);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПоступлению()

// Проверяет правильность заполнения количества номенклатцрных позиций с документом основания
//
Процедура ПроверитьЗаполнениеКоличестваТабЧастиТоварыПоДокументуОснования(СтруктураШапкиДокумента, Отказ, ТЧ) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	//ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти.Товары.Представление();
	ПредставлениеТабличнойЧасти = "Товары";
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		
		//Запрос.УстановитьПараметр("ДокументПоступленияСпецодежды" , СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("ТЧ" , ТЧ);
		Запрос.УстановитьПараметр("ДокументПоступленияТоваров"    , СтруктураШапкиДокумента.ДокументОснование);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧ.Номенклатура КАК Номенклатура,
		|	ТЧ.Количество
		|ПОМЕСТИТЬ ВТ_ТЧ
		|ИЗ
		|	&ТЧ КАК ТЧ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Количество, 0) КАК КоличествоПоступления,
		|	ПоступлениеСпецодеждыИИнвентаря.Номенклатура,
		|	ПоступлениеСпецодеждыИИнвентаря.Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикамТовары.Номенклатура КАК Номенклатура,
		|		СУММА(си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикамТовары.Количество) КАК Количество
		|	ИЗ
		|		ВТ_ТЧ КАК си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикамТовары
		|	
		|	СГРУППИРОВАТЬ ПО
		|		си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикамТовары.Номенклатура) КАК ПоступлениеСпецодеждыИИнвентаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|			СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ГДЕ
		|			ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступленияТоваров
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПоступлениеТоваровУслугТовары.Номенклатура) КАК ПоступлениеТоваровУслуг
		|		ПО ПоступлениеСпецодеждыИИнвентаря.Номенклатура = ПоступлениеТоваровУслуг.Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстОбОшибкиНачало = "В табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
			КоличествоОтличается = (Выборка.Количество <> Выборка.КоличествоПоступления);
			
			Если КоличествоОтличается Тогда // Ошибка
				
				Если КоличествоОтличается Тогда
					ТекстОбОшибки = ТекстОбОшибкиНачало + "Сумма количества номенклатуры """ + Выборка.Номенклатура + 
						""" с табличной частью ""Товары"" документа основания отличается!";
				КонецЕсли;
					
				ОбщегоНазначения.СообщитьПользователю(ТекстОбОшибки,,,, Отказ);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеКоличестваТабЧастиТоварыПоДокументуОснования()

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения1(ДокументСсылка, Отказ) Экспорт
	ПереопределяемыеЗапросы = Новый Массив;
	ДополнительныеПараметрыЗапросов = Новый Структура();
	
	ПараметрыПроведения = си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка,Отказ,,,,,,ПереопределяемыеЗапросы,ДополнительныеПараметрыЗапросов);
	
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.ТаблицаТовары Цикл
		Если (СтрокаТаблицы.Коэффициент <> 0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество * СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	ДополнительныеПараметрыЗапросов = Новый Структура();
	ДополнительныеПараметрыЗапросов.Вставить("СодержаниеСписаныТМЗ", 			НСтр("ru='Списаны ТМЗ'"));
	ДополнительныеПараметрыЗапросов.Вставить("НовыйСчетУчетаБУ", 				СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации);
	ДополнительныеПараметрыЗапросов.Вставить("НовыйСчетУчетаНУ", 				СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации.СчетНУ);
	ДополнительныеПараметрыЗапросов.Вставить("СчетУчетаБУНаСкладе", 			СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе);
	ДополнительныеПараметрыЗапросов.Вставить("СчетУчетаНУНаСкладе", 			СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе.СчетНУ);
	ДополнительныеПараметрыЗапросов.Вставить("СкладОстатков", 					ДокументСсылка.Склад);
	//ДополнительныеПараметрыЗапросов.Вставить("СчетУчетаБУНаСкладе", 			ДокументСсылка.Склад);
	
	ДополнительныеЗапросы = Новый Массив;
	ДополнительныеЗапросы.Добавить("СписаниеТоваров");
	ДополнительныеЗапросы.Добавить("ТоварыОрганизаций");
	
	ДополнительныеЗапросы.Добавить("СпособыОтраженияРасходов");
		
	ДополнительныеПараметрыЗапросов.Вставить("Организация", 				ДокументСсылка.Организация);
	ДополнительныеПараметрыЗапросов.Вставить("ВидУчетаНУ", 					ДокументСсылка.ВидУчетаНУ);
	ДополнительныеПараметрыЗапросов.Вставить("Склад", 						ДокументСсылка.Склад);
	ДополнительныеПараметрыЗапросов.Вставить("Ссылка", 						ДокументСсылка);
	ДополнительныеПараметрыЗапросов.Вставить("СтруктурноеПодразделение", 	ДокументСсылка.СтруктурноеПодразделение);
	ДополнительныеПараметрыЗапросов.Вставить("МоментВремени", 				Новый МоментВремени(ДокументСсылка.Дата,ДокументСсылка));
	
	ПараметрыПроведения = си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка,Отказ,Истина,Истина,,,,,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	ПараметрыПроведения.Реквизиты.Колонки.Добавить("ПодразделениеОрганизации");
	ПараметрыПроведения.ТаблицаМатериалы.Колонки.Добавить("Сотрудник");
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц,ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Материалы"" КАК ИмяСписка,
	|	""Материалы"" КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчетаБУ СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ СчетУчетаНУ,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад КАК КорСклад,
	|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	&СчетУчетаБУНаСкладе КАК КорСчетСписанияБУ,
	|	ТаблицаТовары.Номенклатура КАК КорСубконтоБУ1,
	|	Реквизиты.Склад КАК КорСубконтоБУ2,
	|	"""" КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	&СчетУчетаНУНаСкладе КАК КорСчетСписанияНУ,
	|	ТаблицаТовары.Номенклатура КАК КорСубконтоНУ1,
	|	Реквизиты.Склад КАК КорСубконтоНУ2,
	|	"""" КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМатериалы КАК ТаблицаТовары
	|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ 
	|   НЕ ТаблицаТовары.СчетУчетаБУ = &СчетУчетаБУНаСкладе
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСпособыОтраженияРасходов(НомераТаблиц,ПараметрыПроведения, Реквизиты) Экспорт
	
	//НомераТаблиц.Вставить("СпособыОтраженияРасходовСписокНазначений", НомераТаблиц.Количество());
	//НомераТаблиц.Вставить("СпособыОтраженияРасходовСписокНазначенийИСпособов", НомераТаблиц.Количество());
	//НомераТаблиц.Вставить("СпособыОтраженияРасходов", НомераТаблиц.Количество());
	//
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	ТаблицаМатериалы.НазначениеИспользования КАК НазначениеИспользования
	//|ПОМЕСТИТЬ ВТ_СписокНазначений
	//|ИЗ
	//|	ТаблицаМатериалы КАК ТаблицаМатериалы
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_СписокНазначений.НазначениеИспользования,
	//|	си_НазначенияИспользования.СпособОтраженияРасходов
	//|ПОМЕСТИТЬ ВТ_СпособыОтражения
	//|ИЗ
	//|	ВТ_СписокНазначений КАК ВТ_СписокНазначений
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.си_НазначенияИспользования КАК си_НазначенияИспользования
	//|		ПО ВТ_СписокНазначений.НазначениеИспользования = си_НазначенияИспользования.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК Ссылка,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3,
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент
	//|ИЗ
	//|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	//|ГДЕ
	//|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ВТ_СпособыОтражения.СпособОтраженияРасходов
	//|			ИЗ
	//|				ВТ_СпособыОтражения КАК ВТ_СпособыОтражения)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Ссылка";
	//
	//Возврат ТекстЗапроса + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт
	
	Если Реквизиты.ЕстьНомераГТД  Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = общ_ПереопределяемыеПроцедурыБКСервер.ТекстЗапросаТоварыОрганизацийРасход("Материалы","ТаблицаМатериалы");
				 
	 Иначе     		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
		
	КонецЕсли;
	                     			
	Возврат ТекстЗапроса;
	
	//Если Реквизиты.ЕстьНомераГТД  Тогда 
	//	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
	//	
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	МИНИМУМ(ТаблицаНомераГТД.НомерСтроки) КАК НомерСтроки,
	//	|	""Товары"" КАК ИмяСписка,
	//	|	ТаблицаНомераГТД.Номенклатура КАК Товар,
	//	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	//	|	СУММА(ТаблицаНомераГТД.Количество) КАК Количество,
	//	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	//	|ИЗ
	//	|	ТаблицаНомераГТД КАК ТаблицаНомераГТД
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ТаблицаНомераГТД.НомерГТД,
	//	|	ТаблицаНомераГТД.Номенклатура
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки"
	//	 + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
	//	 
	// Иначе     		
	//	ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
	//	
	//КонецЕсли;
	//                     			
	//Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

#КонецЕсли


