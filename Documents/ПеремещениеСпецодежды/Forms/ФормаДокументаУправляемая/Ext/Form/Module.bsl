////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборСпецОдежды.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ИсходнаяОрганизация = Объект.Организация Тогда
		Возврат
	КонецЕсли;

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь,"ПослеВыбораСтруктурногоПодразделенияОтправителя");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучателя");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервре();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если Объект.СкладОтправитель = ТекущийСклад Тогда
		Возврат;
	Иначе
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеПодтвержденияСменыСкладаОтправителя", ЭтаФорма), "Табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.Нет);
		Иначе
			ПриСменеСкладаОтправителя();
		КонецЕсли;	
	КонецЕсли;
	
	Объект.МОЛОтправитель = ПолучитьМОЛСклада(Объект.СкладОтправитель, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСменыСкладаОтправителя(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ПриСменеСкладаОтправителя();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСкладаОтправителя()

	ТекущийСклад = Объект.СкладОтправитель;
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры	

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда				
		ТекущиеДанные.Коэффициент = 1;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Товары");

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ, СчетУчетаНУ, НовыйСчетУчетаБУ, НовыйСчетУчетаНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.НовыйСчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.НовыйСчетУчетаБУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].НовыйСчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.НовыйСчетУчетаБУ = Неопределено;
		
		Возврат;
		
	КонецЕсли;

	СтрокаТаблицы.НовыйСчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.НовыйСчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.НовыйСчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.НовыйСчетУчетаНУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].НовыйСчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.НовыйСчетУчетаНУ = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен склад для получения остатков'"),, "СкладОтправитель", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена организация для получения остатков'"),, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
						|Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоОстаткам", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ЗаполнитьТабличнуюЧастьПоОстаткам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоОстаткам(Результат, Параметры) Экспорт
		
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
    Объект.Товары.Очистить();
	
	ЗаполнитьТабличнуюЧастьПоостаткам();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
		
	ЕстьСклады = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(ПланыСчетов.Типовой.Товары);
	Элементы.ТоварыЗаполнитьПоОстаткам.Видимость = ЕстьСклады;
	ИсходнаяОрганизация = Объект.Организация;

	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда   
		Объект.СкладОтправитель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Объект.СкладПолучатель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	КонецЕсли;
	
	ТекущийСклад         = Объект.СкладОтправитель;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		//Если учет ВР отключен, то НУ отключаем
		Если НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда 
			Объект.УчитыватьКПН = Ложь;
		КонецЕсли;
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;	

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ
		 (ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь И (ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)));
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь 
		 И НЕ(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)) Тогда
		
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Ложь;
	Иначе
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	
	//Элементы.ТекстДокументаОснования.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ВидУчетаНУ.Видимость 			   = Объект.УчитыватьКПН;
	Элементы.ТоварыСчетУчетаНУ.Видимость 	   = Объект.УчитыватьКПН;
	Элементы.ТоварыНовыйСчетУчетаНУ.Видимость  = Объект.УчитыватьКПН;
	//Элементы.УчитыватьКПН.Видимость 	 	   = Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
	Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СтруктурноеПодразделениеОрганизацияПолучатель  = Объект.Организация;
	Объект.СтруктурноеПодразделениеПолучатель      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);

	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УправлениеФормой(ЭтаФорма);
	
	ИсходнаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура СкладОтправительПриИзмененииНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервре()

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
	КонецЕсли; 
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОбъекта.Товары, "Номенклатура", Истина), ДанныеОбъекта.Дата);
		
	СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);

	Документы.ПеремещениеСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Товары");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОбъекта.Товары, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ПеремещениеСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам() Экспорт

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";	
	Иначе 
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	            
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТиповойОстатки.Счет,
	                      |	ТиповойОстатки.Субконто1 КАК Номенклатура,
	                      |	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество,
	                      |	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения
	                      |ИЗ
	                      |	РегистрБухгалтерии.Типовой.Остатки(
	                      |			&Дата,
	                      |			,
	                      |			&ВидыСубконто,
	                      |			Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
	                      |				И Субконто2 = &Склад) КАК ТиповойОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТиповойОстатки.Субконто1,
	                      |	ТиповойОстатки.Счет");
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад",		 Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("Дата",		 ?(Параметры.Ключ.Пустая(),Неопределено,Объект.Дата));
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Количество 	 	 = Выборка.Количество;
		НоваяСтрока.Номенклатура	 = Выборка.Номенклатура;
		НоваяСтрока.СчетУчетаБУ  	 = Выборка.Счет;
		НоваяСтрока.НовыйСчетУчетаБУ = Выборка.Счет;
		НоваяСтрока.Коэффициент  	 = 1;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		
		НоваяСтрока.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетУчетаБУ));
		НоваяСтрока.НовыйСчетУчетаНУ = 	НоваяСтрока.СчетУчетаНУ;
		НоваяСтрока.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары",		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ДокументСсылка",			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата",				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация",		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад",			Объект.СкладПолучатель);
	
	Возврат ПараметрыОбработки;

КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
			
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", 	 СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("Цена", 			 СтрокаТовара.Цена);
		СтруктураОтбора.Вставить("Количество",		 СтрокаТовара.Количество);
		СтруктураОтбора.Вставить("ДатаВыдачиСтарый", 	СтрокаТовара.ДатаВыдачи);
		СтруктураОтбора.Вставить("СрокСлужбыСтарый", 	СтрокаТовара.СрокСлужбы);
		СтруктураОтбора.Вставить("ДатаОкончанияСтарый", СтрокаТовара.ДатаОкончания);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
	
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СтрокаТабличнойЧасти.Коэффициент = 1;
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.СпецОдежда;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправителя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
		
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчетаБУ");
		СписокСвойств.Добавить("СчетУчетаНУ");

		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("НовыйСчетУчетаБУ");
			СписокСвойств.Добавить("НовыйСчетУчетаНУ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
			
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура КТ_ЗаполнитьПоОстаткам(Команда)
	
	ЕстьОшибки = Ложь;
	Если Объект.Организация.Пустая() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Укажите организацию!'"),, "Организация", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.Товары.Количество() > 0 Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеПодтвержденияЗаполнитьОстатками", ЭтаФорма), "Табличная часть ""Товары"" будет перезаполнена, продолжить?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьОстаткамиНаСервере();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗаполнитьОстатками(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Объект.Товары.Очистить();
		ЗаполнитьОстаткамиНаСервере();	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		Сообщить("Не заполнен склад для получения остатков!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не заполнена организация для получения остатков!");
	КонецЕсли;
		
		//Получаем срок службы и дату окончания
		ЗапросСроки = новый Запрос;
		ЗапросСроки.Текст="ВЫБРАТЬ
		|	СрокСлужбыСООстатки.Номенклатура,
		|	СрокСлужбыСООстатки.ДатаОкончания,
		|	СрокСлужбыСООстатки.ДатаВыдачи,
		|	СрокСлужбыСООстатки.СрокСлужбы,
		|	СУММА(СрокСлужбыСООстатки.КоличествоОстаток) КАК количество,
		|	СрокСлужбыСООстатки.СкладПолучатель,
		|	СрокСлужбыСООстатки.МОЛПолучатель
		|ИЗ
		|	РегистрНакопления.СрокСлужбыСО.Остатки(
		|			&НаДату,
		|				"+?(ЗначениеЗаполнено(Объект.МОЛОтправитель),"МОЛПолучатель = &МОЛПолучатель","")+"
		|				"+?(ЗначениеЗаполнено(Объект.СкладОтправитель),?(ЗначениеЗаполнено(Объект.МОЛОтправитель)," И ","")+"СкладПолучатель = &СкладПолучатель","")+"
		|) КАК СрокСлужбыСООстатки
		|ГДЕ
		|	СрокСлужбыСООстатки.КоличествоОстаток > 0		
		|СГРУППИРОВАТЬ ПО
		|	СрокСлужбыСООстатки.Номенклатура,
		|	СрокСлужбыСООстатки.ДатаОкончания,
		|	СрокСлужбыСООстатки.ДатаВыдачи,
		|	СрокСлужбыСООстатки.СрокСлужбы,
		|	СрокСлужбыСООстатки.МОЛПолучатель,
		|	СрокСлужбыСООстатки.СкладПолучатель";
		ЗапросСроки.УстановитьПараметр("НаДату",Объект.Дата);
		ЗапросСроки.УстановитьПараметр("МОЛПолучатель",Объект.МОЛОтправитель);
		ЗапросСроки.УстановитьПараметр("СкладПолучатель",Объект.СкладОтправитель);
		выборкаСроки = ЗапросСроки.Выполнить().Выбрать();
		Пока выборкаСроки.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Количество = выборкаСроки.Количество;
			НоваяСтрока.Номенклатура = выборкаСроки.Номенклатура;
			НоваяСтрока.СчетУчетаБУ = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
			НоваяСтрока.НовыйСчетУчетаБУ = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
			НоваяСтрока.СчетУчетаНУ = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия.СчетНУ;
			НоваяСтрока.НовыйСчетУчетаНУ = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия.СчетНУ;
			НоваяСтрока.Коэффициент = выборкаСроки.Количество;
			НоваяСтрока.ЕдиницаИзмерения = выборкаСроки.Номенклатура.БазоваяЕдиницаИзмерения;
			
			НоваяСтрока.ДатаВыдачи = выборкаСроки.ДатаВыдачи;	
			НоваяСтрока.СрокСлужбы = выборкаСроки.СрокСлужбы;	
			НоваяСтрока.СрокСлужбыОст = Месяц(выборкаСроки.ДатаОкончания)-Месяц(Объект.Дата)+(Год(выборкаСроки.ДатаОкончания)-Год(Объект.Дата))*12+1;
			НоваяСтрока.ДатаОкончания = выборкаСроки.ДатаОкончания;	
			
		//	//Заполняем цен и сумма
		//ЗапросЦена = Новый Запрос;
		//ЗапросЦена.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Ссылка,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.НомерСтроки,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Номенклатура,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.ЕдиницаИзмерения,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Коэффициент,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Количество,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.СчетУчета,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.НовыйСчетУчета,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.СрокСлужбы,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.ДатаОкончания,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Цена,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Сумма,
		//				   |	ВедомостьВыдачиСпецодеждыТовары.ОприходоватьНаЗабалансовыйСчет
		//				   |ИЗ
		//				   |	Документ.ВедомостьВыдачиСпецодежды.Товары КАК ВедомостьВыдачиСпецодеждыТовары
		//				   |ГДЕ
		//				   |	ВедомостьВыдачиСпецодеждыТовары.Номенклатура = &Номенклатура
		//			   	   |                "+?(ЗначениеЗаполнено(МОЛОтправитель)," И ВедомостьВыдачиСпецодеждыТовары.Ссылка.МОЛПолучатель = &МОЛПолучатель","")+"
		//				   |				"+?(ЗначениеЗаполнено(СкладОтправитель)," И ВедомостьВыдачиСпецодеждыТовары.Ссылка.СкладПолучатель = &СкладПолучатель","")+"
		//				   |УПОРЯДОЧИТЬ ПО
		//				   |Ссылка УБЫВ";
		//ЗапросЦена.УстановитьПараметр("МОЛПолучатель",МОЛОтправитель);
		//ЗапросЦена.УстановитьПараметр("СкладПолучатель",СкладОтправитель);
		//ЗапросЦена.УстановитьПараметр("Номенклатура",выборкаСроки.Номенклатура);
		//ВыборкаЦена = ЗапросЦена.Выполнить().Выбрать();
		//Если ВыборкаЦЕна.Следующий() Тогда
		//	y=(Конецдня(выборкаСроки.датаокончания)-Конецдня(выборкаСроки.Датавыдачи))/60/60/24;
		//	z=(Конецдня(выборкаСроки.датаокончания)-Конецдня(Дата))/60/60/24;
		//	НоваяСтрока.Сумма = окр(ВыборкаЦена.Сумма*выборкаСроки.Количество/y*z,2);
		//КонецЕсли;
		y=(Конецдня(выборкаСроки.датаокончания)-Конецдня(выборкаСроки.Датавыдачи))/60/60/24;
		z=(Конецдня(выборкаСроки.датаокончания)-Конецдня(Объект.Дата))/60/60/24;
		НоваяСтрока.Цена = окр(ПолучитьЦену(выборкаСроки)/y*z,2);
		НоваяСтрока.Сумма = окр(ПолучитьЦену(выборкаСроки)*выборкаСроки.Количество/y*z,2);
	КонецЦикла;

КонецПроцедуры

&НаСервере
функция ПолучитьЦену(выборка)
	Запрос = новый запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ПеремещениеСпецодеждыТовары.Цена
	             |ИЗ
	             |	Документ.ПеремещениеСпецодежды.Товары КАК ПеремещениеСпецодеждыТовары
	             |ГДЕ
	             |	ПеремещениеСпецодеждыТовары.Ссылка.МОЛПолучатель = &МОЛПолучатель
	             |	И ПеремещениеСпецодеждыТовары.Ссылка.СкладПолучатель = &СкладПолучатель
	             |	И ПеремещениеСпецодеждыТовары.Номенклатура = &Номенклатура
	             |	И НАЧАЛОПЕРИОДА(ПеремещениеСпецодеждыТовары.Ссылка.Дата, ДЕНЬ) = &ДатаВыдачи
	             |	И ПеремещениеСпецодеждыТовары.ДатаОкончания = &ДатаОкончания
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ВедомостьВыдачиБУСпецодеждыТовары.Цена
	             |ИЗ
	             |	Документ.ВедомостьВыдачиБУСпецодежды.Товары КАК ВедомостьВыдачиБУСпецодеждыТовары
	             |ГДЕ
	             |	ВедомостьВыдачиБУСпецодеждыТовары.Ссылка.МОЛПолучатель = &МОЛПолучатель
	             |	И ВедомостьВыдачиБУСпецодеждыТовары.Ссылка.СкладПолучатель = &СкладПолучатель
	             |	И ВедомостьВыдачиБУСпецодеждыТовары.Номенклатура = &Номенклатура
	             |	И ВедомостьВыдачиБУСпецодеждыТовары.СрокСлужбы = &СрокСлужбы
	             |	И ВедомостьВыдачиБУСпецодеждыТовары.ДатаОкончания = &ДатаОкончания
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ВедомостьВыдачиСпецодеждыТовары.Цена
	             |ИЗ
	             |	Документ.ВедомостьВыдачиСпецодежды.Товары КАК ВедомостьВыдачиСпецодеждыТовары
	             |ГДЕ
	             |	ВедомостьВыдачиСпецодеждыТовары.Ссылка.МОЛПолучатель = &МОЛПолучатель
	             |	И ВедомостьВыдачиСпецодеждыТовары.Ссылка.СкладПолучатель = &СкладПолучатель
	             |	И ВедомостьВыдачиСпецодеждыТовары.Номенклатура = &Номенклатура
	             |	И ВедомостьВыдачиСпецодеждыТовары.СрокСлужбы = &СрокСлужбы
	             |	И ВедомостьВыдачиСпецодеждыТовары.ДатаОкончания = &ДатаОкончания";
	Запрос.УстановитьПараметр("МОЛПолучатель",Объект.МОЛОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("Номенклатура",выборка.Номенклатура);
	Запрос.УстановитьПараметр("ДатаОкончания",выборка.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаВыдачи",выборка.ДатаВыдачи);
	Запрос.УстановитьПараметр("СрокСлужбы",выборка.СрокСлужбы);
	выб = запрос.Выполнить().Выбрать();
	Пока выб.Следующий() цикл
		возврат выб.цена;	
	Конеццикла;
	возврат 0;
Конецфункции

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Объект.МОЛПолучатель = ПолучитьМОЛСклада(Объект.СкладПолучатель, Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМОЛСклада(Склад, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Склад) КАК ОтветственныеЛицаСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ФизическоеЛицо;
	Иначе 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	


&НаКлиенте
Процедура ПодборСпецОдежды(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора();
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборСпецОдежды.Форма.Форма", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора()

	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Склад", 		Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("МОЛ",   		Объект.МОЛОтправитель);
	ПараметрыФормы.Вставить("Дата",  		Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);

	Возврат ПараметрыФормы;

КонецФункции


&НаСервере
Процедура ПриОткрытииНаСервере()
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюСервер();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСервер()
	Объект.Автор = Пользователи.ТекущийПользователь();
КонецПроцедуры

//++Кубасов Евгений Кибернетика Задача:I-20275 Перемещение СО - не меняется остаточная стоимость
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	#Область Расчет_Цены_И_Суммы
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ДанныеДляПолученияЦены = новый Структура("Номенклатура,ДатаОкончания,ДатаВыдачи,СрокСлужбы",ТекущаяСтрока.Номенклатура,ТекущаяСтрока.ДатаОкончания,ТекущаяСтрока.ДатаВыдачи,ТекущаяСтрока.СрокСлужбы);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Количество) И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаВыдачи) И ЗначениеЗаполнено(ТекущаяСтрока.СрокСлужбы) тогда
		y=(Конецдня(ТекущаяСтрока.ДатаОкончания)-Конецдня(ТекущаяСтрока.Датавыдачи))/60/60/24;
		z=(Конецдня(ТекущаяСтрока.датаокончания)-Конецдня(Объект.Дата))/60/60/24;
		ТекущаяСтрока.Цена = окр(ПолучитьЦену(ДанныеДляПолученияЦены)/y*z,2);
		ТекущаяСтрока.Сумма = окр(ПолучитьЦену(ДанныеДляПолученияЦены)*ТекущаяСтрока.Количество/y*z,2);   
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
//--Кубасов Евгений Кибернетика Задача:I-20275 Перемещение СО - не меняется остаточная стоимость
 

