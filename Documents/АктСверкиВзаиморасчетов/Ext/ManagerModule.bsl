#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",         СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания), СтруктураПараметров.ДатаОкончания, КонецДня(СтруктураПараметров.ДатаОкончания)));
	Запрос.УстановитьПараметр("ДатаПослеОкончания", ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания), СтруктураПараметров.ДатаОкончания, КонецДня(СтруктураПараметров.ДатаОкончания) + 1));
	Запрос.УстановитьПараметр("Организация",        СтруктураПараметров.Организация);
	
	Запрос.УстановитьПараметр("Контрагент", СтруктураПараметров.Контрагент);
	
	Если СтруктураПараметров.ВключатьДочерние Тогда
		ЗапросКонтрагентов = Новый Запрос;
		ЗапросКонтрагентов.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
		|			ИЛИ Контрагенты.Ссылка = &ГоловнойКонтрагент)";
		
		ЗапросКонтрагентов.УстановитьПараметр("ГоловнойКонтрагент", СтруктураПараметров.Контрагент);
		РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить();
		
		Если НЕ РезультатЗапросаКонтрагентов.Пустой() Тогда
			СписокКонтрагентов = Новый СписокЗначений;
			ВыборкаЗапросаКонтрагентов = РезультатЗапросаКонтрагентов.Выбрать();
			Пока ВыборкаЗапросаКонтрагентов.Следующий() Цикл
				СписокКонтрагентов.Добавить(ВыборкаЗапросаКонтрагентов.Контрагент);
			КонецЦикла;
			Запрос.УстановитьПараметр("Контрагент", СписокКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Валюта", ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента), Неопределено, СтруктураПараметров.ВалютаДокумента));
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", СтруктураПараметров.ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента), Неопределено, СтруктураПараметров.ДоговорКонтрагента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|			КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг 
	|             ИЛИ ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке 
	|             ИЛИ ТиповойОбороты.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг 
	|				ТОГДА ТиповойОбороты.Регистратор.ДатаПодписанияГЗ
	|			ИНАЧЕ ТиповойОбороты.Регистратор.Дата
    |  КОНЕЦ   КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО ИЛИ &Валюта = &ВалютаРегУчета
	|			ТОГДА ТиповойОбороты.СуммаОборотДт
	|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО ИЛИ &Валюта = &ВалютаРегУчета
	|			ТОГДА ТиповойОбороты.СуммаОборотКт
	|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	0 КАК ОстатокНаКонец,
	|	ТиповойОбороты.КорСчет,
	|	ТиповойОбороты.КорСубконто1,
	|	ТиповойОбороты.КорСубконто2,
	|	ТиповойОбороты.КорСубконто3,
	|	ТиповойОбороты.Валюта,
	|	ТиповойОбороты.ВалютнаяСуммаОборот,
	|	ТиповойОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		//УсловиеОрганизации
	|		    И ВЫБОР
	|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        КОГДА &Валюта = &ВалютаРегУчета
	|		            ТОГДА Валюта = &Валюта ИЛИ Валюта ЕСТЬ NULL
	|		        ИНАЧЕ Валюта = &Валюта
	|		    КОНЕЦ
	|		    И Субконто1 В (&Контрагент)";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
		
		Если СтруктураПараметров.ВключатьВнутренниеОбороты Тогда 
			Запрос.Текст = Запрос.Текст + "
			|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента),
			|		,
			|		) КАК ТиповойОбороты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТиповойОбороты.Счет = ТиповойОбороты.КорСчет
			|					И ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
			|					И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2
			|					//УсловиеСтруктурныеПодразделения
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";		
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента),
			|		,
			|		) КАК ТиповойОбороты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТиповойОбороты.Счет = ТиповойОбороты.КорСчет
			|					И ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
			|					И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2
			|					//УсловиеСтруктурныеПодразделения
			|				ТОГДА ЛОЖЬ
			|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
			|				ТОГДА (НЕ(ТиповойОбороты.КорСубконто1 В (&Контрагент)
			|									И ТиповойОбороты.КорСубконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)
			|					//УсловиеСтруктурныеПодразделения))
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
		КонецЕсли;
	
	ИначеЕсли СтруктураПараметров.РазбитьПоДоговорам И НЕ СтруктураПараметров.ВключатьВнутренниеОбороты Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|		,
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.Счет = ТиповойОбороты.КорСчет
		|					И ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
		|					И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2
		|					//УсловиеСтруктурныеПодразделения
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ 
		|				ВЫБОР 
		|					КОГДА ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2 
		|					//УсловиеСтруктурныеПодразделения
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ";	
				
	ИначеЕсли НЕ СтруктураПараметров.ВключатьВнутренниеОбороты Тогда  		
		Запрос.Текст = Запрос.Текст + "
		|		,
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.Счет = ТиповойОбороты.КорСчет
		|					И ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
		|					И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2
		|					//УсловиеСтруктурныеПодразделения
		|				ТОГДА ЛОЖЬ
		|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
		|				ТОГДА ВЫБОР
		|						КОГДА ТиповойОбороты.КорСубконто1 В (&Контрагент)
		|					//УсловиеСтруктурныеПодразделения
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					  КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Иначе  		
		Запрос.Текст = Запрос.Текст + "
		|		,
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.Счет = ТиповойОбороты.КорСчет
		|					И ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
		|					И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2
		|					//УсловиеСтруктурныеПодразделения
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;
	
	Если НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.СтруктурноеПодразделение) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|И НЕ ТиповойОбороты.Регистратор ССЫЛКА Документ.АвизоПрочее";	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Остатки"",
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО ИЛИ &Валюта = &ВалютаРегУчета
		|			ТОГДА ТиповойОстатки.СуммаОстаток
		|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&ДатаНачала,
		|		Счет В (&ФильтрСписокСчетов),
		|		&АналитикаРасчетов,
		|		//УсловиеОрганизации
		|		    И ВЫБОР
		|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|		            ТОГДА ИСТИНА
		|		        КОГДА &Валюта = &ВалютаРегУчета
		|		            ТОГДА Валюта = &Валюта ИЛИ Валюта ЕСТЬ NULL
		|		        ИНАЧЕ Валюта = &Валюта
		|		    КОНЕЦ";
		
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто1 В (&Контрагент)";
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
			Запрос.Текст = Запрос.Текст + "
			|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		    ) КАК ТиповойОстатки ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Остатки"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО ИЛИ &Валюта = &ВалютаРегУчета
	|			ТОГДА ТиповойОстатки.СуммаОстаток
	|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|		&ДатаПослеОкончания,
	|		Счет В (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		//УсловиеОрганизации
	|		    И ВЫБОР
	|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        КОГДА &Валюта = &ВалютаРегУчета
	|		            ТОГДА Валюта = &Валюта ИЛИ Валюта ЕСТЬ NULL
	|		        ИНАЧЕ Валюта = &Валюта
	|		    КОНЕЦ";
	
	Запрос.Текст = Запрос.Текст + "
	|		    И Субконто1 В (&Контрагент)";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|		    ) КАК ТиповойОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктураПараметров.СтруктурноеПодразделение) Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураПараметров.СтруктурноеПодразделение);
		УсловиеОрганизации = "((Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение)";
	Иначе
		УсловиеОрганизации = "(Организация = &Организация";
	КонецЕсли;
	Если СтруктураПараметров.СписокОрганизаций.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.СписокОрганизаций);
		УсловиеОрганизации = УсловиеОрганизации + " ИЛИ Организация В (&СписокОрганизаций)) ";
	Иначе
		УсловиеОрганизации = УсловиеОрганизации + ") ";
	КонецЕсли;
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда 
		УсловиеСтруктурныеПодразделения = "И ТиповойОбороты.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделениеКор";
	Иначе
		УсловиеСтруктурныеПодразделения = "";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеОрганизации", УсловиеОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеСтруктурныеПодразделения", УсловиеСтруктурныеПодразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = СтруктураПараметров.ПоДаннымОрганизации;
	НаборДвижений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", 0);
	ОстатокНаКонец  = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дата = "Остатки" Тогда
			СтруктураДанныхЗаполнения.ОстатокНаНачало = СтруктураДанныхЗаполнения.ОстатокНаНачало + Выборка.ОстатокНаНачало;
			ОстатокНаКонец  = ОстатокНаКонец + Выборка.ОстатокНаКонец;
			Продолжить;
		КонецЕсли; 
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		Если СтруктураПараметров.РазбитьПоДоговорам Тогда	
			НоваяСтрока.Договор 		   = Выборка.Договор;
		КонецЕсли;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;  
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот; 
		
	КонецЦикла;
	
	Если СтруктураПараметров.РазбитьПоДоговорам Тогда
		НаборДвижений.Свернуть("Дата, Документ, Договор", "Дебет, Кредит");
	Иначе
		НаборДвижений.Свернуть("Дата, Документ", "Дебет, Кредит");
	КонецЕсли;
	
	НаборДвижений.Сортировать("Дата, Документ");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", НаборДвижений);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДатаНачала");
		БлокируемыеРеквизиты.Добавить("ДатаОкончания");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("СверкаСогласована");
		БлокируемыеРеквизиты.Добавить("ВключатьДочерние");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация, ПредставлениеСпискаСтруктурныхЕдиниц");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("ОстатокНаНачало");
		
		// таб. часть ПоДаннымОрганизации
		БлокируемыеРеквизиты.Добавить("ПоДаннымОрганизации; ПоДаннымОрганизацииЗаполнить");
		БлокируемыеРеквизиты.Добавить("ПоДаннымОрганизации.Дата; ПоДаннымОрганизацииДата");
		БлокируемыеРеквизиты.Добавить("ПоДаннымОрганизации.Документ; ПоДаннымОрганизацииДокумент");
		БлокируемыеРеквизиты.Добавить("ПоДаннымОрганизации.Дебет; ПоДаннымОрганизацииДебет");
		БлокируемыеРеквизиты.Добавить("ПоДаннымОрганизации.Кредит; ПоДаннымОрганизацииКредит");
		
		// таб. часть ПоДаннымКонтрагента
		БлокируемыеРеквизиты.Добавить("ПоДаннымКонтрагента; ПоДаннымКонтрагентаЗаполнить");
		БлокируемыеРеквизиты.Добавить("ПоДаннымКонтрагента.Дата; ПоДаннымКонтрагентаДата");
		БлокируемыеРеквизиты.Добавить("ПоДаннымКонтрагента.Документ; ПоДаннымКонтрагентаДокумент");
		БлокируемыеРеквизиты.Добавить("ПоДаннымКонтрагента.Дебет; ПоДаннымКонтрагентаДебет");
		БлокируемыеРеквизиты.Добавить("ПоДаннымКонтрагента.Кредит; ПоДаннымКонтрагентаКредит");
		
		// таб. часть СписокСчетов
		БлокируемыеРеквизиты.Добавить("СписокСчетов; СписокСчетовЗаполнить");
		БлокируемыеРеквизиты.Добавить("СписокСчетов.Счет; СписокСчетовСчет");
		БлокируемыеРеквизиты.Добавить("СписокСчетов.УчаствуетВРасчетах; СписокСчетовУчаствуетВРасчетах");
			
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.ПредставительКонтрагента КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.ПредставительКонтрагента = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.ПредставительОрганизации КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.ПредставительОрганизации = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.СтруктурноеПодразделение КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ответственный КАК Контакт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт сверки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"АктСверки",
		НСтр("ru = 'Акт сверки'"),
		ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
		,
		"Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("АктСверки"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДокументовСФ = Новый СписокЗначений;
	СписокДокументовСФ.Добавить("СчетФактураВыданный");	
	СписокДокументовСФ.Добавить("СчетФактураПолученный");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	ТабДок.ТолькоПросмотр = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки", КодЯзыка);
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьСФ           = Макет.ПолучитьОбласть("СФ");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		
		НазваниеОрганизации = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = Шапка.Организация;
		КонецЕсли;
		
		НаименованиеКонтрагента = Шапка.КонтрагентНаименование;
		Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
			НаименованиеКонтрагента = Шапка.Контрагент;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
		
		ШапкаДатаОкончания = ?(ЗначениеЗаполнено(Шапка.ДатаОкончания), Шапка.ДатаОкончания, ОбщегоНазначения.ТекущаяДатаПользователя());
		ОписаниеПериода = НСтр("ru = 'Период: %1'", КодЯзыка);
		ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПериода,  ПредставлениеПериода(НачалоДня(Шапка.ДатаНачала), КонецДня(ШапкаДатаОкончания), "Л=" + КодЯзыка + "; ФП = Истина"));
		
		ИмяПредставителяОрганизации = Шапка.ПредставительОрганизации;
		ИмяПредсатвителяКонтрагента = Шапка.ПредставительКонтрагента;
		
		ТекстЗаголовка = НСтр("ru = 'взаимных расчетов за период с %1 по %2 между %3 и %4'", КодЯзыка);
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Формат(Шапка.ДатаНачала, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"), Формат(ШапкаДатаОкончания, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"), НазваниеОрганизации, НаименованиеКонтрагента);
		
		Если ЗначениеЗаполнено(Шапка.Договор) Тогда
			Если Шапка.Договор.ЭтоГруппа Тогда
				ПодтекстЗаголовка = НСтр("ru = '%1 по группе договоров %2'", КодЯзыка);
			Иначе
				ПодтекстЗаголовка = НСтр("ru = '%1 по договору %2'", КодЯзыка);
			КонецЕсли;
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстЗаголовка, ТекстЗаголовка, СокрЛП(Шапка.ДоговорНаименование));
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДанныеПредставителяОрганизации = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПредставительОрганизации, ШапкаДатаОкончания);
		ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия), "", ДанныеПредставителяОрганизации.Фамилия
		+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя), "", " " + ДанныеПредставителяОрганизации.Имя)
		+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество), "", " " + ДанныеПредставителяОрганизации.Отчество));
		
		СтрЗаголовокТаблица = НСтр("ru = 'Мы, нижеподписавшиеся, %1 %2 %3, с одной стороны, 
		|и %4 %5 %6, с другой стороны, 
		|составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:'", КодЯзыка);
		СтрЗаголовокТаблица = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрЗаголовокТаблица, ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность), "________________", ДанныеПредставителяОрганизации.Должность),
		?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________"), НазваниеОрганизации, ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента.Должность),"________________", Шапка.ПредставительКонтрагента.Должность), 
		НаименованиеКонтрагента, ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента), "_______________________", Шапка.ПредставительКонтрагента));
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		Если НЕ ЗначениеЗаполнено(Шапка.ВалютаДокумента) Тогда
			ОбластьЗаголовок.Параметры.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Иначе
			ОбластьЗаголовок.Параметры.ВалютаДокумента = Шапка.ВалютаДокумента;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы); 
		
		ИтСуммаОборотДт      = Шапка.СуммаДогДт;
		ИтСуммаОборотКт      = Шапка.СуммаДогКт;
		ИтСуммаОборотДтКонтр = Шапка.СуммаДогДтКонтр;
		ИтСуммаОборотКтКонтр = Шапка.СуммаДогКтКонтр;   
		
		НачОстДебет  = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		НачОстКредит = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ИтСуммаОборотДт - ИтСуммаОборотКт;
		
		КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		ОстатокНаКонецК = -Шапка.ОстатокНаНачало + ИтСуммаОборотДтКонтр - ИтСуммаОборотКтКонтр;
		
		КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
		КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		
		ОбластьНачОстатки.Параметры.ДатаНачала = Формат(Шапка.ДатаНачала, "Л=" + КодЯзыка + "; ДЛФ=DD");
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
		ТабДок.Вывести(ОбластьНачОстатки);  
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		Если Шапка.РазбитьПоДоговорам Тогда  
			
			ПараметрыНачальногоСальдо = Новый Структура;
			ПараметрыНачальногоСальдо.Вставить("ПоДаннымОрганизации", ПоместитьВоВременноеХранилище(Шапка.Ссылка.ПоДаннымОрганизации.Выгрузить(, "Договор")));
			ПараметрыНачальногоСальдо.Вставить("ПоДаннымКонтрагента", ПоместитьВоВременноеХранилище(Шапка.Ссылка.ПоДаннымКонтрагента.Выгрузить(, "Договор"))); 
			ПараметрыНачальногоСальдо.Вставить("СписокСчетов", Шапка.Ссылка.СписокСчетов);
			ПараметрыНачальногоСальдо.Вставить("Организация", Шапка.Организация);
			ПараметрыНачальногоСальдо.Вставить("ДатаНачала", ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата));
			ПараметрыНачальногоСальдо.Вставить("Контрагент", Шапка.Контрагент);  
			ПараметрыНачальногоСальдо.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);  
			ПараметрыНачальногоСальдо.Вставить("Договор", Шапка.Договор);   
			ПараметрыНачальногоСальдо.Вставить("ДоговорЭтоГруппа", Шапка.ДоговорЭтоГруппа); 
			ПараметрыНачальногоСальдо.Вставить("СтруктурноеПодразделение", Шапка.СтруктурноеПодразделение);	
			
			СписокОрганизацийПрочих = Шапка.Ссылка.СписокОрганизаций.ВыгрузитьКолонку("Организация");
			ОрганизацияДляИсключения = СписокОрганизацийПрочих.Найти(Шапка.Организация);
			Если ОрганизацияДляИсключения <> Неопределено Тогда
				СписокОрганизацийПрочих.Удалить(ОрганизацияДляИсключения);
			КонецЕсли;  
			
			ПараметрыНачальногоСальдо.Вставить("СписокОрганизаций", СписокОрганизацийПрочих);
			
			СальдоПоДоговорам = НачальноеСальдоПоДоговорам(ПараметрыНачальногоСальдо);
			НачальноеСальдоПоДоговорамАкта      = СальдоПоДоговорам.ПоДоговорамАкта;
			НачальноеСальдоПоОстальнымДоговорам = СальдоПоДоговорам.ПоОстальнымДоговорам;
			
		КонецЕсли;
		
		ОбходПоДоговорамСКонтрагентом = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорСКонтрагентом");
		
		Пока ОбходПоДоговорамСКонтрагентом.Следующий() Цикл
			
			// Собираем данные
			ОбходПоДоговорам = ОбходПоДоговорамСКонтрагентом.Выбрать();
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = Новый Массив;
			СписокДокументовК = Новый Массив;  
			
			Пока ОбходПоДоговорам.Следующий() Цикл
				Если ОбходПоДоговорам.Дата <> NULL Тогда
					СписокДокументов.Добавить(Новый Структура("ДатаДокумента, РегистраторПредставление, Документ, СуммаОборотДт, СуммаОборотКт, ОтложитьПринятиеНДСКЗачету, ОтложитьНачислениеНДС",
					ОбходПоДоговорам.Дата, ОбходПоДоговорам.Представление, ОбходПоДоговорам.Документ, ОбходПоДоговорам.СуммаДогДт, ОбходПоДоговорам.СуммаДогКт, ОбходПоДоговорам.ОтложитьПринятиеНДСКЗачету, ОбходПоДоговорам.ОтложитьНачислениеНДС));
				КонецЕсли;
				
				Если ОбходПоДоговорам.ДатаК <> NULL Тогда
					СписокДокументовК.Добавить(Новый Структура("ДатаДокумента, РегистраторПредставление, Документ, СуммаОборотДт, СуммаОборотКт, ОтложитьПринятиеНДСКЗачету, ОтложитьНачислениеНДС",
					ОбходПоДоговорам.ДатаК, ОбходПоДоговорам.ПредставлениеК, ОбходПоДоговорам.Документ, ОбходПоДоговорам.СуммаДогДтКонтр, ОбходПоДоговорам.СуммаДогКтКонтр, ОбходПоДоговорам.ОтложитьПринятиеНДСКЗачету, ОбходПоДоговорам.ОтложитьПринятиеНДСКЗачету));
				КонецЕсли;
			КонецЦикла; 
				
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс  = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			
			//Получение подчиненных документов (счетов-фактур) и связанных с ними ЭСФ
			МассивДокументовСФ = Новый Массив;
			СоответствиеДокументовСФ = Новый Соответствие;
			МассивДокументовСФКонтр = Новый Массив;
			СоответствиеДокументовСФКонтр = Новый Соответствие;
			
			Для Инд = 0 По МаксИндекс Цикл
				Если Инд < СписокДокументов.Количество() Тогда
					СтрокаОрганизации = СписокДокументов[Инд];
					Для Каждого СФ Из СписокДокументовСФ Цикл
						ДокументСФ      = Неопределено;
						ДокументСФКонтр = Неопределено;
						Если СтрокаОрганизации <> Неопределено Тогда
							Если СтрокаОрганизации.ОтложитьПринятиеНДСКЗачету Тогда
								ДокументРегистрацияНДС = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС");
								Если ДокументРегистрацияНДС <> Неопределено Тогда
									ДокументСФ = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДокументРегистрацияНДС, СФ.Значение);
								КонецЕсли;
							ИначеЕсли СтрокаОрганизации.ОтложитьНачислениеНДС Тогда
								ДокументРегистрацияНДС = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС");
								Если ДокументРегистрацияНДС <> Неопределено Тогда
									ДокументСФ = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДокументРегистрацияНДС, СФ.Значение);
								КонецЕсли;
							Иначе
								ДокументСФ = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, СФ.Значение);
							КонецЕсли;
							
							Если ДокументСФ <> Неопределено Тогда
								МассивДокументовСФ.Добавить(ДокументСФ);
								СоответствиеДокументовСФ.Вставить(Инд, ДокументСФ);
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
				
				Если Инд < СписокДокументовК.Количество() Тогда
					СтрокаОрганизацииКонтр = СписокДокументовК[Инд];
					Для Каждого СФ Из СписокДокументовСФ Цикл
						ДокументСФ      = Неопределено;
						ДокументСФКонтр = Неопределено;
						Если СтрокаОрганизацииКонтр <> Неопределено Тогда
							Если СтрокаОрганизацииКонтр.ОтложитьПринятиеНДСКЗачету Тогда
								ДокументРегистрацияНДСКонтр = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизацииКонтр.Документ, "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС");
								Если ДокументРегистрацияНДСКонтр <> Неопределено Тогда
									ДокументСФКонтр = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДокументРегистрацияНДСКонтр, СФ.Значение);
								КонецЕсли; 
							ИначеЕсли СтрокаОрганизацииКонтр.ОтложитьНачислениеНДС Тогда
								ДокументРегистрацияНДС = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизацииКонтр.Документ, "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС");
								Если ДокументРегистрацияНДС <> Неопределено Тогда
									ДокументСФ = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДокументРегистрацияНДС, СФ.Значение);
								КонецЕсли;
							Иначе
								ДокументСФКонтр = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(СтрокаОрганизацииКонтр.Документ, СФ.Значение);
							КонецЕсли;
							Если ДокументСФКонтр <> Неопределено Тогда
								МассивДокументовСФКонтр.Добавить(ДокументСФКонтр);
								СоответствиеДокументовСФКонтр.Вставить(Инд, ДокументСФКонтр);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
			КонецЦикла;
			
			СоответствиеЭСФСвязанныеСДокументамиСФ = Новый Соответствие;
			СоответствиеЭСФСвязанныеСДокументамиСФ = ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам(МассивДокументовСФ,"Ссылка, Дата, Номер");
			СоответствиеЭСФСвязанныеСДокументамиСФКонтр = Новый Соответствие;
			СоответствиеЭСФСвязанныеСДокументамиСФКонтр = ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам(МассивДокументовСФКонтр,"Ссылка, Дата, Номер");
			
			ЗаполнятьДанныеКонтрагента = (Шапка.СверкаСогласована ИЛИ (СписокДокументовК.Количество() <> 0));
			
			ЕстьСтрокиДокументов = СписокДокументов.Количество() <> 0 ИЛИ СписокДокументовК.Количество() <> 0;
			
			// Выводим данные в табличный документ
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговор.Параметры.Заполнить(ОбходПоДоговорамСКонтрагентом);  
				ОбластьДоговор.Параметры.ДоговорСКонтрагентом = ?(ЗначениеЗаполнено(ОбходПоДоговорамСКонтрагентом.ДоговорСКонтрагентом), ОбходПоДоговорамСКонтрагентом.ДоговорСКонтрагентом, "Пустой договор");
				НачальноеСальдоПоДоговору = НачальноеСальдоПоДоговорамАкта.Скопировать(
				Новый Структура("Договор", ОбходПоДоговорамСКонтрагентом.ДоговорСКонтрагентом));
				СтруктураСальдоПоДоговору = Новый Структура;
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруДт",
				НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруДт"));
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруКт",
				НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруКт"));
				ОбластьДоговор.Параметры.Заполнить(СтруктураСальдоПоДоговору);
				
				ТабДок.Вывести(ОбластьДоговор);
			КонецЕсли;
			
			//перебор документов табличной части
			Для Инд = 0 По МаксИндекс Цикл
				Если Инд < СписокДокументов.Количество() Тогда
					СтрокаОрганизации = СписокДокументов[Инд];
					Регистратор   = СтрокаОрганизации.Документ;
					ОбластьОбороты.Параметры.СуммаОборотДт = СтрокаОрганизации.СуммаОборотДт;
					ОбластьОбороты.Параметры.СуммаОборотКт = СтрокаОрганизации.СуммаОборотКт;
					
					РегистраторПредставление = "";
					Если НЕ СтрокаОрганизации.Документ = Неопределено Тогда
						
						РегистраторПредставление = СтрокаОрганизации.Документ.Метаданные().Синоним + " " 
						+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаОрганизации.Документ.Номер, СтрокаОрганизации.Документ) + " " + НСтр("ru ='от'", КодЯзыка) + " " 
						+ Формат(СтрокаОрганизации.Документ.Дата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
						
						Если СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
							Если ЗначениеЗаполнено(СтрокаОрганизации.Документ.НомерВходящегоДокумента) И ЗначениеЗаполнено(СтрокаОрганизации.Документ.ДатаВходящегоДокумента) Тогда
								
								
								РегистраторПредставление = РегистраторПредставление + ", " + СтрокаОрганизации.Документ.ВидВходящегоДокумента +
								" " + НСтр("ru = '№ вх.'", КодЯзыка) + " " + СтрокаОрганизации.Документ.НомерВходящегоДокумента + " " + НСтр("ru = 'от'", КодЯзыка) + " " + Формат(СтрокаОрганизации.Документ.ДатаВходящегоДокумента, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");  
								
							КонецЕсли;	
							
						Иначе
							
							ДатаДокументаГЗ  = ?(СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("ДатаДокументаГЗ") <> Неопределено, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОрганизации.Документ, "ДатаДокументаГЗ"), "");
							НомерДокументаГЗ = ?(СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("НомерДокументаГЗ") <> Неопределено, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОрганизации.Документ, "НомерДокументаГЗ"), "");
							РегистраторПредставление =  РегистраторПредставление + ?(ЗначениеЗаполнено(НомерДокументаГЗ), НСтр("ru=', № вх.'") + " " + НомерДокументаГЗ 
							+ ?(ЗначениеЗаполнено(ДатаДокументаГЗ)," " + НСтр("ru='от'") + " " + Формат(ДатаДокументаГЗ,"Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"),""),"");
						КонецЕсли;	
					КонецЕсли; 
					
					
					ОбластьОбороты.Параметры.РегистраторПредставление = РегистраторПредставление;
					
					ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.Документ;
					ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.ДатаДокумента, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
				Иначе
					Если СтрокаОрганизации <> Неопределено Тогда 
						СтрокаОрганизации = Неопределено;
					КонецЕсли;
					ОбластьОбороты.Параметры.СуммаОборотДт = "";
					ОбластьОбороты.Параметры.СуммаОборотКт = "";
					ОбластьОбороты.Параметры.РегистраторПредставление = "";
					ОбластьОбороты.Параметры.Регистратор = "";
					ОбластьОбороты.Параметры.ДатаДокумента = "";
				КонецЕсли;
				
				Если Инд < СписокДокументовК.Количество() Тогда
					СтрокаОрганизацииКонтр = СписокДокументовК[Инд];
					Регистратор = 	СтрокаОрганизацииКонтр.Документ;
					ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СтрокаОрганизацииКонтр.СуммаОборотДт;
					ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СтрокаОрганизацииКонтр.СуммаОборотКт;
					
					РегистраторПредставлениеКонтр = "";			
					Если НЕ СтрокаОрганизацииКонтр.Документ = Неопределено Тогда
						
						РегистраторПредставлениеКонтр = СтрокаОрганизацииКонтр.Документ.Метаданные().Синоним + " " 
						+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаОрганизацииКонтр.Документ.Номер, СтрокаОрганизацииКонтр.Документ) + НСтр("ru = ' от '", КодЯзыка) 
						+ Формат(СтрокаОрганизацииКонтр.Документ.Дата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
						
						Если СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
							Если ЗначениеЗаполнено(СтрокаОрганизацииКонтр.Документ.НомерВходящегоДокумента)  
								И ЗначениеЗаполнено(СтрокаОрганизацииКонтр.Документ.ДатаВходящегоДокумента) Тогда
								
								РегистраторПредставлениеКонтр = РегистраторПредставлениеКонтр + ", " + СтрокаОрганизацииКонтр.Документ.ВидВходящегоДокумента + " " +
								НСтр("ru = '№ вх.'", КодЯзыка) + " " + СтрокаОрганизацииКонтр.Документ.НомерВходящегоДокумента + " " + НСтр("ru = 'от'", КодЯзыка) + " " + Формат(СтрокаОрганизацииКонтр.Документ.ДатаВходящегоДокумента,"Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
							КонецЕсли;
							
						Иначе
							ДатаДокументаГЗ  = ?(СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("ДатаДокументаГЗ") <> Неопределено, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОрганизацииКонтр.Документ, "ДатаДокументаГЗ"), "");
							НомерДокументаГЗ = ?(СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("НомерДокументаГЗ") <> Неопределено, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОрганизацииКонтр.Документ, "НомерДокументаГЗ"), "");
							РегистраторПредставлениеКонтр =  РегистраторПредставлениеКонтр +  ?(ЗначениеЗаполнено(НомерДокументаГЗ), НСтр("ru=', № вх.'") + " " + НомерДокументаГЗ 
							+ ?(ЗначениеЗаполнено(ДатаДокументаГЗ), " " + НСтр("ru='от'") + " " + Формат(ДатаДокументаГЗ, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"),""),"");
						КонецЕсли;
						
					КонецЕсли;
					
					ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = РегистраторПредставлениеКонтр;
					
					ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизацииКонтр.ДатаДокумента, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
				Иначе
					Если СтрокаОрганизацииКонтр <> Неопределено Тогда 
						СтрокаОрганизацииКонтр = Неопределено;
					КонецЕсли;
					ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
					ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
					ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
					ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
				КонецЕсли;
				ТабДок.Вывести(ОбластьОбороты);
				
				//выведем подчиненные счета-фактуры, если имеются
				Выводить        = Ложь;
				
				ДокументСФ = СоответствиеДокументовСФ.Получить(Инд);
				ДокументСФКонтр = СоответствиеДокументовСФКонтр.Получить(Инд);
				
				Если ДокументСФ <> Неопределено Тогда
					
					Если ТипЗнч(ДокументСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
						Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
						Если ЗначениеЗаполнено(ДокументСФ.НомерВходящегоДокумента) Тогда
							Документ = Документ + " " + НСтр("ru = '№ вх.'", КодЯзыка) + " " + ДокументСФ.НомерВходящегоДокумента;
						КонецЕсли;
						Если ЗначениеЗаполнено(ДокументСФ.ДатаВходящегоДокумента) Тогда
							Документ = Документ + " " + НСтр("ru = 'от'", КодЯзыка) + " " + Формат(ДокументСФ.ДатаВходящегоДокумента, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
						КонецЕсли;
						
						Если ДокументСФ.СпособПолучения = ПолучитьПредопределенноеЗначениеЭлектронно() Тогда
							Если СоответствиеЭСФСвязанныеСДокументамиСФ.Получить(ДокументСФ) <> Неопределено Тогда
								ЭСФ = СоответствиеЭСФСвязанныеСДокументамиСФ.Получить(ДокументСФ).ЭСФ;
								Документ = ПолучитьТесктовоеПредставлениеСФ(ЭСФ);
								ДокументСФ = ЭСФ;
								
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ДокументСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
						Документ = ПолучитьТесктовоеПредставлениеСФ(ДокументСФ);
						Если  ДокументСФ.СпособВыставления = ПолучитьПредопределенноеЗначениеЭлектронно()	Тогда
							
							Если СоответствиеЭСФСвязанныеСДокументамиСФ.Получить(ДокументСФ) <> Неопределено Тогда
								ЭСФ = СоответствиеЭСФСвязанныеСДокументамиСФ.Получить(ДокументСФ).ЭСФ;
								Документ = ПолучитьТесктовоеПредставлениеСФ(ЭСФ);
								ДокументСФ = ЭСФ;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Документ = ПолучитьТесктовоеПредставлениеСФ(ДокументСФ);
					КонецЕсли;
					
					ОбластьСФ.Параметры.ДокументСФ = Документ;
					ОбластьСФ.Параметры.РасшифровкаСФ = ДокументСф;
					Выводить = Истина;
				КонецЕсли;
				
				Если ДокументСФКонтр <> Неопределено Тогда
					Выводить = Истина; 				
					Если ТипЗнч(ДокументСФКонтр) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
						
						Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
						Если ЗначениеЗаполнено(ДокументСФКонтр.НомерВходящегоДокумента) Тогда
							Документ = Документ + " " + НСтр("ru = '№ вх.'", КодЯзыка) + " " + ДокументСФКонтр.НомерВходящегоДокумента;
						КонецЕсли;
						Если ЗначениеЗаполнено(ДокументСФКонтр.ДатаВходящегоДокумента) Тогда
							Документ = Документ + " " + НСтр("ru = 'от'", КодЯзыка) + " " + Формат(ДокументСФКонтр.ДатаВходящегоДокумента, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
						КонецЕсли;
						
						Если  ДокументСФКонтр.СпособПолучения = ПолучитьПредопределенноеЗначениеЭлектронно()	Тогда
							
							Если СоответствиеЭСФСвязанныеСДокументамиСФКонтр.Получить(ДокументСФКонтр) <> Неопределено Тогда
								ЭСФ = СоответствиеЭСФСвязанныеСДокументамиСФКонтр.Получить(ДокументСФКонтр).ЭСФ;
								Документ = ПолучитьТесктовоеПредставлениеСФ(ЭСФ);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;     
					ОбластьСФ.Параметры.ДокументСФКонтр = Документ;
					ОбластьСФ.Параметры.РасшифровкаСФКонтр = ДокументСфКонтр;
				КонецЕсли; 
				
				Если Выводить Тогда
					ТабДок.Вывести(ОбластьСФ);
					ОбластьСФ = Макет.ПолучитьОбласть("СФ");
				КонецЕсли;   	
			КонецЦикла;	
			
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговорИтоги.Параметры.СуммаОборотДт = ОбходПоДоговорамСКонтрагентом.СуммаДогДт;  
				ОбластьДоговорИтоги.Параметры.СуммаОборотКт = ОбходПоДоговорамСКонтрагентом.СуммаДогКт;
				ОбластьДоговорИтоги.Параметры.СуммаОборотДтКонтр = ОбходПоДоговорамСКонтрагентом.СуммаДогДтКонтр;
				ОбластьДоговорИтоги.Параметры.СуммаОборотКтКонтр = ОбходПоДоговорамСКонтрагентом.СуммаДогКтКонтр;
				// Конечное сальдо по договору
				СтруктураКонСальдоПоДоговору = Новый Структура;
				КонОстатокПоДоговоруДт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорамСКонтрагентом.СуммаДогДт;
				КонОстатокПоДоговоруКт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорамСКонтрагентом.СуммаДогКт;
				КонОстатокПоДоговору   = КонОстатокПоДоговоруДт - КонОстатокПоДоговоруКт;
				Если КонОстатокПоДоговору < 0 Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",-КонОстатокПоДоговору);
				Иначе
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", КонОстатокПоДоговору);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт", 0);
				КонецЕсли;
				
				Если НЕ ЗаполнятьДанныеКонтрагента Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
				Иначе
					КонОстатокПоДоговоруДтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорамСКонтрагентом.СуммаДогДтКонтр;
					КонОстатокПоДоговоруКтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорамСКонтрагентом.СуммаДогКтКонтр;
					КонОстатокПоДоговоруКонтр = КонОстатокПоДоговоруДтКонтр - КонОстатокПоДоговоруКтКонтр;
					Если КонОстатокПоДоговоруКонтр < 0 Тогда
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр",-КонОстатокПоДоговоруКонтр);
					Иначе
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", КонОстатокПоДоговоруКонтр);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
					КонецЕсли;
				КонецЕсли;
				
				ОбластьДоговорИтоги.Параметры.Заполнить(СтруктураКонСальдоПоДоговору);
				ТабДок.Вывести(ОбластьДоговорИтоги);
			КонецЕсли;
			
		КонецЦикла;
			
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		Если НЕ Шапка.СверкаСогласована Тогда
			НачальныйНомер = 1;
			Для Итерация = 1 По 5 Цикл
				ТабДок.Вывести(ОбластьПустаяСтрока);
				НачальныйНомер = НачальныйНомер + 1;
			КонецЦикла;		
		КонецЕсли;  	
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт = ИтСуммаОборотДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт = ИтСуммаОборотКт;
		Если Шапка.СверкаСогласована Тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
		КонецЕсли;
		ТабДок.Вывести(ОбластьОборотыИтог);
		
		ОбластьКонОстатки.Параметры.ДатаОкончания = Формат(КонецДня(ШапкаДатаОкончания), "Л=" + КодЯзыка + "; ДЛФ=DD");
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
		
		Если Шапка.СверкаСогласована Тогда
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		Если НЕ ЗначениеЗаполнено(Шапка.ВалютаДокумента) Тогда
			ВалютаРезультата = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Иначе
			ВалютаРезультата = Шапка.ВалютаДокумента;
		КонецЕсли;
		
		Если СписокДокументов.Количество() = 0 И ОстатокНаКонец = 0 Тогда
			РезультатыСверки = "";
		ИначеЕсли НЕ ЗначениеЗаполнено(ШапкаДатаОкончания) Тогда
			РезультатыСверки = НСтр("ru = '<не указана дата сверки>'", КодЯзыка);
		ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			РезультатыСверки = НСтр("ru = '<не указан контрагент>'", КодЯзыка);
		Иначе
			РезультатыСверки = НСтр("ru = 'на'", КодЯзыка) + " " + Формат(ШапкаДатаОкончания, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy") + " " + НСтр("ru = 'задолженность '", КодЯзыка) + " ";
			
			Если ОстатокНаКонец > 0 Тогда
				ТекстСверки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в пользу %1  %2  %3 (%4)'", КодЯзыка),
				СокрЛП(НазваниеОрганизации),
				Формат(ОстатокНаКонец, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2"),
				Строка(ВалютаРезультата),
				СокрЛП(ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ОстатокНаКонец, ВалютаРезультата, КодЯзыка))
				);
				
				РезультатыСверки = РезультатыСверки + ТекстСверки;				
				
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				
				ТекстСверки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в пользу %1  %2  %3 (%4)'", КодЯзыка),
				СокрЛП(НаименованиеКонтрагента),
				Формат(-ОстатокНаКонец, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2"),
				Строка(ВалютаРезультата),
				СокрЛП(ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(-ОстатокНаКонец, ВалютаРезультата, КодЯзыка))
				);
				
				РезультатыСверки = РезультатыСверки + ТекстСверки;				
				
				
			Иначе
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Шапка.СверкаСогласована Тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = НСтр("ru = 'По данным'", КодЯзыка) + " " + СокрЛП(НаименованиеКонтрагента);
			
			Если СписокДокументовК.Количество() = 0 И ОстатокНаКонецК = 0  Тогда
				РезультатыСверки = "";
			ИначеЕсли НЕ ЗначениеЗаполнено(ШапкаДатаОкончания) Тогда
				РезультатыСверки = НСтр("ru = '<не указана дата сверки>'", КодЯзыка);
			ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				РезультатыСверки = НСтр("ru = '<не указан контрагент>'", КодЯзыка);
			Иначе
				РезультатыСверки = НСтр("ru = 'на'", КодЯзыка) + " " + Формат(ШапкаДатаОкончания, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy") + " " + НСтр("ru = 'задолженность'", КодЯзыка) + " ";
				
				Если ОстатокНаКонецК < 0 Тогда
					ТекстСверки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в пользу %1  %2  %3 (%4)'", КодЯзыка),
					СокрЛП(НазваниеОрганизации),
					Формат(-ОстатокНаКонецК, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2"),
					Строка(ВалютаРезультата),
					СокрЛП(ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(-ОстатокНаКонецК, ВалютаРезультата, КодЯзыка))
					);
					
					РезультатыСверки = РезультатыСверки + ТекстСверки;
					
				ИначеЕсли ОстатокНаКонецК > 0 Тогда
					ТекстСверки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в пользу %1  %2  %3 (%4)'", КодЯзыка),
					СокрЛП(НаименованиеКонтрагента),
					Формат(ОстатокНаКонецК, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2"),
					Строка(ВалютаРезультата),
					СокрЛП(ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ОстатокНаКонецК, ВалютаРезультата, КодЯзыка))
					);
					
					РезультатыСверки = РезультатыСверки + ТекстСверки;
					
				Иначе
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'", КодЯзыка);
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			
			Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
				СуммаРасхождений = ?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК);
				ИтогСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В результате сверки выявлено расхождение информации о состоянии расчетов в размере %1 %2 (%3).'", КодЯзыка),
				Формат(СуммаРасхождений, "Л=" + КодЯзыка + "; ЧЦ=21; ЧДЦ=2"),
				Строка(ВалютаРезультата),
				СокрЛП(ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаРасхождений, ВалютаРезультата, КодЯзыка))
				);
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
			КонецЕсли; 
		КонецЕсли;
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаАктаСверки);
		
		ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
		ОбластьПодвал.Параметры.ПредставлениеРНН_БИНОрганизации = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Шапка.Ссылка.Дата,,,?(КодЯзыка="kk", "kz", "ru"));
		
		СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
		ОбластьПодвал.Параметры.ПредставлениеРНН_БИНКонтрагента = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Шапка.Ссылка.Дата,,,?(КодЯзыка="kk", "kz", "ru"));
		
		ОбластьПодвал.Параметры.Должность  = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность), "________________", ДанныеПредставителяОрганизации.Должность);
		ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента.Должность), "________________", Шапка.ПредставительКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "(" + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Представление), "_______________________", ДанныеПредставителяОрганизации.Представление) + ")";
		ОбластьПодвал.Параметры.ФИОПредставителяК = "(" + ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),"_______________________", Шапка.ПредставительКонтрагента) + ")";
		
		ТабДок.Вывести(ОбластьПодвал);
		ТабДок.АвтоМасштаб = Истина;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Акт.Ссылка КАК АктСверки,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	NULL КАК ДатаК,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Документ.Представление КАК Представление,
	|	NULL КАК ПредставлениеК,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	0 КАК ДебетК,
	|	0 КАК КредитК,
	|	0 КАК НомерТабЧасти,
	|	ЕСТЬNULL(ТЧПоДаннымОрганизации.Документ.ОтложитьПринятиеНДСКЗачету, ЛОЖЬ) КАК ОтложитьПринятиеНДСКЗачету,
	|	ЕСТЬNULL(ТЧПоДаннымОрганизации.Документ.ОтложитьНачислениеНДС, ЛОЖЬ) КАК ОтложитьНачислениеНДС,
	|	Акт.МоментВремени КАК МоментВремени,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ПО Акт.Ссылка = ТЧПоДаннымОрганизации.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	ТЧПоДаннымКонтрагента.Документ,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Документ.Представление,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит,
	|	1,
	|	ЕСТЬNULL(ТЧПоДаннымКонтрагента.Документ.ОтложитьПринятиеНДСКЗачету, ЛОЖЬ),
	|	ЕСТЬNULL(ТЧПоДаннымКонтрагента.Документ.ОтложитьНачислениеНДС, ЛОЖЬ),
	|	Акт.МоментВремени,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|		ПО Акт.Ссылка = ТЧПоДаннымКонтрагента.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктСверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.АктСверки КАК Ссылка,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Документ КАК Документ,
	|	ДанныеДокумента.ДатаК КАК ДатаК,
	|	ДанныеДокумента.Представление КАК Представление,
	|	ДанныеДокумента.ПредставлениеК КАК ПредставлениеК,
	|	ДанныеДокумента.Дебет КАК СуммаДогДт,
	|	ДанныеДокумента.Кредит КАК СуммаДогКт,
	|	ДанныеДокумента.ДебетК КАК СуммаДогДтКонтр,
	|	ДанныеДокумента.КредитК КАК СуммаДогКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	АктСверкиВзаиморасчетов.СтруктурноеПодразделение.НаименованиеПолное КАК СтруктурноеПодразделениеНаименование,
	|	АктСверкиВзаиморасчетов.Контрагент.НаименованиеПолное КАК КонтрагентНаименование,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК Договор,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ДанныеДокумента.ОтложитьПринятиеНДСКЗачету КАК ОтложитьПринятиеНДСКЗачету,
	|	ДанныеДокумента.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	ДанныеДокумента.Договор КАК ДоговорСКонтрагентом,
	|	ЕСТЬNULL(АктСверкиВзаиморасчетов.ДоговорКонтрагента.ЭтоГруппа, ЛОЖЬ) КАК ДоговорЭтоГруппа
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО ДанныеДокумента.АктСверки = АктСверкиВзаиморасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.МоментВремени,
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаДогДт),
	|	СУММА(СуммаДогКт),
	|	СУММА(СуммаДогДтКонтр),
	|	СУММА(СуммаДогКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение),
	|	МАКСИМУМ(СтруктурноеПодразделениеНаименование),
	|	МАКСИМУМ(КонтрагентНаименование),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(ДоговорНаименование),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(СверкаСогласована),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(ДоговорЭтоГруппа)
	|ПО
	|	Ссылка,
	|	ДоговорСКонтрагентом";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПредопределенноеЗначениеЭлектронно()
	Возврат ПредопределенноеЗначение("Перечисление.СпособыОбменаДокументами.Электронно");
КонецФункции

Функция ПолучитьТесктовоеПредставлениеСФ(ДокументЭСФ)
	
	Если ДокументЭСФ <> Неопределено Тогда
		ТекстовоеПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 от %3'"),
			ДокументЭСФ.Метаданные().Синоним,
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументЭСФ.Номер, ДокументЭСФ),
			Формат(ДокументЭСФ.Дата, "ДФ=dd.MM.yyyy"));
	Иначе 
		ТекстовоеПредставлениеДокумента = "";
	КонецЕсли;
	
	Возврат ТекстовоеПредставлениеДокумента;
	
КонецФункции

Функция НачальноеСальдоПоДоговорам(Шапка)
	
	ЗапросОстаткиДоговоров = Новый Запрос;
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Шапка.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДоговоров = ПолучитьИзВременногоХранилища(Шапка.ПоДаннымОрганизации);
	ТаблицаДоговоров.Свернуть("Договор");
	МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	// Дополним массив договорами из табличной части контрагента.
	ТаблицаДоговоровКонтрагента = ПолучитьИзВременногоХранилища(Шапка.ПоДаннымКонтрагента);
	ТаблицаДоговоровКонтрагента.Свернуть("Договор");
	МассивДоговоровКонтрагента = ТаблицаДоговоровКонтрагента.ВыгрузитьКолонку("Договор");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДоговоров, МассивДоговоровКонтрагента, Истина);
	
	ЗапросОстаткиДоговоров.УстановитьПараметр("Организация",   Шапка.Организация);
	ЗапросОстаткиДоговоров.УстановитьПараметр("НачалоПериода", Шапка.ДатаНачала);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаРасчета",  ФильтрСписокСчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Контрагент",    Шапка.Контрагент);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Валюта",
		?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, Неопределено, Шапка.ВалютаДокумента));
	Если Шапка.ДоговорЭтоГруппа Тогда
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Шапка.Договор);
	Иначе
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Неопределено);
	КонецЕсли;
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("ГоловнаяОрганизация",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.Организация, "ГоловнаяОрганизация").ГоловнаяОрганизация);
	ЗапросОстаткиДоговоров.УстановитьПараметр("АналитикаРасчетов",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры));
	ЗапросОстаткиДоговоров.УстановитьПараметр("АктСверкиВВалюте",
		Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета);  
		
	ЗапросОстаткиДоговоров.Текст =                                
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Типовой.Ссылка КАК Ссылка
	 |ПОМЕСТИТЬ СчетаРасчета
	 |ИЗ
	 |	ПланСчетов.Типовой КАК Типовой
	 |ГДЕ
	 |	Типовой.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	 |ПОМЕСТИТЬ ОстальныеДоговоры
	 |ИЗ
	 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |ГДЕ
	 |	ДоговорыКонтрагентов.Владелец = &Контрагент
	 |	И НЕ ДоговорыКонтрагентов.Ссылка В (&Договоры)
	 |	И (&ГруппаДоговоров = НЕОПРЕДЕЛЕНО
	 |			ИЛИ ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&ГруппаДоговоров))
	 |	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	 |	И ДоговорыКонтрагентов.Организация = &ГоловнаяОрганизация
	 |	И (&Валюта = НЕОПРЕДЕЛЕНО
	 |			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВЫБОР
	 |		КОГДА &АктСверкиВВалюте
	 |			ТОГДА ТиповойОстатки.ВалютнаяСуммаОстатокДт
	 |		ИНАЧЕ ТиповойОстатки.СуммаОстатокДт
	 |	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	 |	ВЫБОР
	 |		КОГДА &АктСверкиВВалюте
	 |			ТОГДА ТиповойОстатки.ВалютнаяСуммаОстатокКт
	 |		ИНАЧЕ ТиповойОстатки.СуммаОстатокКт
	 |	КОНЕЦ КАК НачОстатокПоДоговоруКт,
	 |	ТиповойОстатки.Субконто1 КАК Договор
	 |ПОМЕСТИТЬ ОстаткиПоДоговорамАкта
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Остатки(
	 |			&НачалоПериода,
	 |			Счет В
	 |				(ВЫБРАТЬ
	 |					СчетаРасчета.Ссылка
	 |				ИЗ
	 |					СчетаРасчета КАК СчетаРасчета),
	 |			&АналитикаРасчетов,
	 |			//УсловиеОрганизации  
	 |			И Субконто1 В (&Договоры)) КАК ТиповойОстатки
	 |
	 |;
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВЫБОР
	 |		КОГДА &АктСверкиВВалюте
	 |			ТОГДА ТиповойОстатки.ВалютнаяСуммаОстатокДт
	 |		ИНАЧЕ ТиповойОстатки.СуммаОстатокДт
	 |	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	 |	ВЫБОР
	 |		КОГДА &АктСверкиВВалюте
	 |			ТОГДА ТиповойОстатки.ВалютнаяСуммаОстатокКт
	 |		ИНАЧЕ ТиповойОстатки.СуммаОстатокКт
	 |	КОНЕЦ КАК НачОстатокПоДоговоруКт,
	 |	ТиповойОстатки.Субконто1 КАК Договор
	 |ПОМЕСТИТЬ ОстаткиПоОстальнымДоговорам
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Остатки(
	 |			&НачалоПериода,
	 |			Счет В
	 |				(ВЫБРАТЬ
	 |					СчетаРасчета.Ссылка
	 |				ИЗ
	 |					СчетаРасчета КАК СчетаРасчета),
	 |			&АналитикаРасчетов,
	 |			//УсловиеОрганизации
	 |				И Субконто1 В
	 |					(ВЫБРАТЬ
	 |						ОстальныеДоговоры.Ссылка
	 |					ИЗ
	 |						ОстальныеДоговоры КАК ОстальныеДоговоры)) КАК ТиповойОстатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	 |	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт,
	 |	ОстаткиПоДоговорамАкта.Договор КАК Договор
	 |ИЗ
	 |	ОстаткиПоДоговорамАкта КАК ОстаткиПоДоговорамАкта
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ОстаткиПоДоговорамАкта.Договор
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	 |	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт,
	 |	ОстаткиПоОстальнымДоговорам.Договор КАК Договор
	 |ИЗ
	 |	ОстаткиПоОстальнымДоговорам КАК ОстаткиПоОстальнымДоговорам
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |		ПО ОстаткиПоОстальнымДоговорам.Договор = ДоговорыКонтрагентов.Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДоговорыКонтрагентов.Наименование,
	 |	ОстаткиПоОстальнымДоговорам.Договор
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ДоговорыКонтрагентов.Наименование"; 
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(Шапка.СтруктурноеПодразделение) Тогда
		ЗапросОстаткиДоговоров.УстановитьПараметр("СтруктурноеПодразделение", Шапка.СтруктурноеПодразделение);
		УсловиеОрганизации = "((Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение)";
	Иначе
		УсловиеОрганизации = "(Организация = &Организация";
	КонецЕсли;
	Если Шапка.СписокОрганизаций.Количество() > 0 Тогда
		ЗапросОстаткиДоговоров.УстановитьПараметр("СписокОрганизаций", Шапка.СписокОрганизаций);
		УсловиеОрганизации = УсловиеОрганизации + " ИЛИ Организация В (&СписокОрганизаций)) ";
	Иначе
		УсловиеОрганизации = УсловиеОрганизации + ") ";
	КонецЕсли;
	ЗапросОстаткиДоговоров.Текст = СтрЗаменить(ЗапросОстаткиДоговоров.Текст, "//УсловиеОрганизации", УсловиеОрганизации);
	
	РезультатЗапроса = ЗапросОстаткиДоговоров.ВыполнитьПакет();
	
	НачальноеСальдоПоДоговорам = Новый Структура;
	НачальноеСальдоПоДоговорам.Вставить("ПоДоговорамАкта", РезультатЗапроса[4].Выгрузить());
	НачальноеСальдоПоДоговорам.Вставить("ПоОстальнымДоговорам", РезультатЗапроса[5].Выгрузить());

	Возврат НачальноеСальдоПоДоговорам;
	
КонецФункции 

Функция НовыйСтруктураДокумента(ПоДаннымКонтрагента = Ложь)

	СтруктураДокумента = Новый Структура;
	Если ПоДаннымКонтрагента Тогда
		Суффикс = "Контр";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДокумента.Вставить("Дата" + Суффикс);
	СтруктураДокумента.Вставить("Представление" + Суффикс);
	СтруктураДокумента.Вставить("Регистратор"   + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотДт" + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотКт" + Суффикс);
	
	Возврат СтруктураДокумента;
	
КонецФункции


#КонецЕсли
