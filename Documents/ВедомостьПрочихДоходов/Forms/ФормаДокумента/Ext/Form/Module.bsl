&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения =  ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Вставить("КоманднаяПанель", Элементы.ГруппаКоманднаяПанель);	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаСписка" Тогда
		
		Если Объект.Выплаты.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 					= Объект.Выплаты.Добавить();	
			НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			
			Если ЗначениеЗаполнено(НоваяСтрока.ФизЛицо) Тогда
				ДанныеКонтрагента = ПолучитьДанныеКонтрагентаНаСервере(Объект.Организация, Объект.Банк, НоваяСтрока.ФизЛицо);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеКонтрагента, "ДоговорКонтрагента,НомерСчета");
			КонецЕсли;
			
			ОбновитьОписаниеСостоянияДокумента();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		
		Если Объект.Выплаты.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			
			НоваяСтрока 					= Объект.Выплаты.Добавить();	
			НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			
			ОбновитьОписаниеСостоянияДокумента();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			Если Объект.Выплаты.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
				
				НоваяСтрока 					= Объект.Выплаты.Добавить();	
				НоваяСтрока.ФизЛицо 			= СтрокаМассива;
				
				Если ТипЗнч(НоваяСтрока.ФизЛицо) = Тип("СправочникСсылка.Контрагенты")
					И ЗначениеЗаполнено(НоваяСтрока.ФизЛицо) Тогда
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаНаСервере(Объект.Организация, Объект.Банк, НоваяСтрока.ФизЛицо);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеКонтрагента, "ДоговорКонтрагента,НомерСчета");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		ОбновитьОписаниеСостоянияДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыплатыПоВедомостиРегл" И Параметр[Объект.Ссылка] <> Неопределено 
		ИЛИ ИмяСобытия = "ОбновитьФорму" И Параметр = Объект.Ссылка Тогда 
		
		НайтиПлатежныйДокументИЗаполнитьСсылкуНаСервере();
		ОбработкаОповещенияНаСервере();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	КлючеваяОперация = "Документ ""зарплата к выплате организаций"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма, ,Истина);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПриИзменении(Элемент)
	
	Если Объект.СпособВыплаты <> ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк") Тогда
		Объект.Банк = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьОписаниеСостоянияДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыФизлицоПриИзменении(Элемент)
	
	ТекущиеВыплаты = Элементы.Выплаты.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеВыплаты.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ЗначениеЗаполнено(ТекущиеВыплаты.ФизЛицо) Тогда 
			
			ДанныеКонтрагента = ПолучитьДанныеКонтрагентаНаСервере(Объект.Организация, Объект.Банк, ТекущиеВыплаты.ФизЛицо);
			ЗаполнитьЗначенияСвойств(ТекущиеВыплаты, ДанныеКонтрагента, "ДоговорКонтрагента,НомерСчета");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПлатежныйДокументНажатие(Элемент)
	
	Если СписокПлатежныхДокументов.Количество() = 0 Тогда
			
		Если Объект.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя создать платежное поручение на основании ведомости, помеченной на удаление.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если Объект.Выплаты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена таб. часть Перечисление прочих доходов.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "";
		Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Нельзя создать платежный документ на основании незаписанного документа. Записать документ?'");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ДополнительныеПараметры = Новый Структура("Форма", ЭтотОбъект);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииПлатежногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		ИначеЕсли Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк") Тогда
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		ИначеЕсли Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу") Тогда
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли СписокПлатежныхДокументов.Количество() > 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокПлатежныхДокументов,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокПлатежныхДокументов[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	ВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговоров)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ПараметрыОтбора = Новый ФиксированныйМассив(НовыеПараметры);
	Элемент.ПараметрыВыбора = ПараметрыОтбора; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Зарплата

&НаКлиенте
Процедура ВыплатыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Выплаты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтараяСумма							= ТекущиеДанные.СуммаКВыплате;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьОписаниеСостоянияДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПослеУдаления(Элемент)
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыСуммаКВыплатеПриИзменении(Элемент)
	
	Если Элементы.Выплаты.ТекущиеДанные.СуммаКВыплате <> СтараяСумма Тогда
		СтараяСумма	= Элементы.Выплаты.ТекущиеДанные.СуммаКВыплате;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыплатаДоходовРКО(Команда)
	
	ВыплатаДоходовЧерезКассу();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчета(Команда)
	
	Если Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу") Тогда
		
		ТекстСообщения = НСтр("ru = 'Действие выполняется только при перечислении через банк!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Банк"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьКартСчетаНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	Если Элементы.Выплаты.ТекущиеДанные = Неопределено ИЛИ (ЗначениеЗаполнено(Элементы.Выплаты.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.Выплаты.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,,Режим);
		
	ИначеЕсли Не ЗначениеЗаполнено(Элементы.Выплаты.ТекущиеДанные.ФизЛицо) Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,,Режим);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыплатаДоходовЧерезКассу()
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Действие может быть выполнено только после записи документа. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередОтрытиемВыплатыРКО", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		 				
	Иначе
		
		ВыплатаДоходовРКООткрыть();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииПлатежногоДокумента(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			Если Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу") Тогда
		
				ВыплатаДоходовЧерезКассу();
			
			Иначе
		
				ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ГоловнаяОрганизация  = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	 
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	          	
	Если Параметры.Ключ.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Объект.Дата = КонецДня(Объект.Дата);
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособВыплаты) Тогда
			Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации =  НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		КонецЕсли;
		
		ОплатаСтатус = 0;
		ОплатаТекст = "";
		
		ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, НСтр("ru = 'Документ не заполнен'"), "СообщениеОПроблемах");
		
	Иначе
		
		ПроверитьДокументыВведенныеНаОсновании();
		
	КонецЕсли;
	
	НайтиПлатежныйДокументИЗаполнитьСсылкуНаСервере();

	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям");

	// Проверка ведения однофирменности
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = НЕ НастройкиПользователя.УчетПоВсемОрганизациям;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьОписаниеСостоянияДокумента();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	Элементы.ФормаВыплатаДоходовРКО.Доступность = ПравоДоступа("Использование", Метаданные.Обработки.ВыплатаЗарплатыРасходнымиОрдерами);

	// на момент реализации используются только контрагенты
	Элементы.ВыплатыФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Элементы.ВыплатыНомерКартСчета.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров, "Выплаты");
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.ПодразделениеОрганизации.Владелец <> Объект.Организация Тогда
		Объект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентаНаСервере(Организация, Банк, Контрагент)
	
	СтруктураДанныхКонтрагента = Новый Структура;
	СтруктураДанныхКонтрагента.Вставить("ДоговорКонтрагента", ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент));
	ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОсновнойБанковскийСчет");
	БанкСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойБанковскийСчет, "Банк");
	Если Банк = БанкСчета Тогда
		СтруктураДанныхКонтрагента.Вставить("НомерСчета", ОсновнойБанковскийСчет);
	Иначе
		СтруктураДанныхКонтрагента.Вставить("НомерСчета", Справочники.БанковскиеСчета.ПустаяСсылка());
	КонецЕсли;

	Возврат СтруктураДанныхКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Результат.Вставить("ОчищатьНекорректныеЗначения", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;		
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
    РедактированиеРазрешено = Форма.ОплатаСтатус = 0;
	ДоступностьКассовыхФорм   = Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу");
	ДоступностьБанковскихФорм = Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк");
	
	Форма.ТолькоПросмотр 							= НЕ РедактированиеРазрешено;
	Элементы.ВыплатыПодбор.Доступность 				= РедактированиеРазрешено;
	
	Элементы.ВыплатыГруппаЗаполнить.Доступность    = РедактированиеРазрешено;
	Элементы.ВыплатыЗаполнитьКартСчета.Доступность = РедактированиеРазрешено И ДоступностьБанковскихФорм;
		
	Элементы.Банк.Видимость	    = НЕ ДоступностьКассовыхФорм И ЗначениеЗаполнено(Объект.СпособВыплаты);
        	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Объект.Ссылка);
	
	Если Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК ПорядокТипа,
		|	ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов.Ссылка) КАК Представление,
		|	&КоличествоФизлиц КАК КоличествоФизлиц
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов.Документ = &Ведомость
		|	И ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов.Ссылка.Проведен";
		
		ЗапросПоПлатежнымДокументам.УстановитьПараметр("КоличествоФизлиц", Объект.Выплаты.Количество());
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПорядокТипа,
		|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдер.Ссылка) КАК Представление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйКассовыйОрдер.Ссылка) КАК КоличествоФизлиц
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ПлатежнаяВедомость = &Ведомость
		|	И РасходныйКассовыйОрдер.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйКассовыйОрдер.Ссылка";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
	
	УжеОплачивали = НЕ РезультатЗапроса.Пустой();
	
	Если УжеОплачивали Тогда
		ПлатежныеДокументы = РезультатЗапроса.Выгрузить();
		ПлатежныеДокументы.Сортировать("ПорядокТипа, Представление");
		ПлатежныеДокументы.Свернуть("Ссылка, Представление", "КоличествоФизлиц");
		
		КоличествоДоктов = ПлатежныеДокументы.Количество();
		КоличествоФизЛиц = Мин(ПлатежныеДокументы.Итог("КоличествоФизлиц"), Объект.Выплаты.Количество());
		
		Если КоличествоДоктов = 1 Тогда
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документом %1'"), ПлатежныеДокументы[0].Представление);
		Иначе
			МассивПлатежныхДокументов = Новый Массив;
			КоличествоДоктовДляПоказа = Мин(КоличествоДоктов, 3);
			Для Н = 1 По КоличествоДоктовДляПоказа Цикл
				МассивПлатежныхДокументов.Добавить(ПлатежныеДокументы[Н - 1].Представление);
			КонецЦикла;
			Если КоличествоДоктов > КоличествоДоктовДляПоказа Тогда
				МассивПлатежныхДокументов.Добавить("...");
			КонецЕсли;
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документами %1'"), СтрСоединить(МассивПлатежныхДокументов, ", "));
		КонецЕсли;
		
		Если Объект.Выплаты.Количество() = 0 Тогда
			ОплатаСтатус = 1;
		Иначе
			ОплатаСтатус = КоличествоФизЛиц / Объект.Выплаты.Количество();
		КонецЕсли;
	Иначе
		ОплатаСтатус = 0;
		ОплатаТекст = "";
	КонецЕсли;		
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОписаниеСостоянияДокумента()   
	
	НеЗаполнен = НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ Объект.Выплаты.Количество() = 0;
    ЗаполненСОшибками = Ложь;
	
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Справочники.Контрагенты.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Неопределено)).Количество() > 0;
	
    ЕстьНулевыеСуммы = Ложь;
	Для Каждого СтрокаВыплаты Из Объект.Выплаты Цикл
		Если (СтрокаВыплаты.СуммаКВыплате) <= 0 Тогда
			ЕстьНулевыеСуммы = Истина;
			Прервать
		КонецЕсли;
	КонецЦикла;	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеСостоянияДокумента(НЕ НеЗаполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы);// поля структуры описания - ТекстСообщения и ВажностьСообщения
	ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеСостоянияДокумента(Заполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы) 

	ТекстСообщения = "";
	ВажностьСообщения = "";                         
	ТекстПоПериодам = "";
	
	Если НЕ Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Документ не заполнен.'");
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Поля документа заполнены не полностью или неверно.'");
	ИначеЕсли ЕстьНулевыеСуммы Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Есть строки с нулевыми суммами.'");
	ИначеЕсли НЕ Параметры.Ключ.Пустая() Тогда
		ВажностьСообщения = "Информация";
		Если ОплатаСтатус = 0 Тогда
			ПредлагаемыйДокумент = ?(Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, НСтр("ru = 'Платежное поручение исходящее'"), НСтр("ru = 'Расходный кассовый ордер'"));
			ТекстОплаты = НСтр("ru = 'Для оплаты документа можно ввести на основании '") + ПредлагаемыйДокумент;
		Иначе
			ТекстОплаты = 
				НСтр("ru = 'Ведомость '")
				+ ?(ОплатаСтатус = 1, НСтр("ru = 'полностью'"), НСтр("ru = 'частично'"))
				+ НСтр("ru = ' оплачена '")
			    + ОплатаТекст;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Документ записан. '") + ТекстПоПериодам + ТекстОплаты; 
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.Выплаты.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗаполнениемКартСчета(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	ЗаполнитьКартСчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартСчетаНаСервере()

	Запрос  = новый Запрос();
	Запрос.УстановитьПараметр("ВТ_СписокФЛ", Объект.Выплаты.Выгрузить());
	Запрос.УстановитьПараметр("Банк", Объект.Банк);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВедомостьПрочихДоходовВыплаты.Физлицо КАК Физлицо,
	|	ВедомостьПрочихДоходовВыплаты.НомерСтроки КАК НомерСтроки,
	|	ВедомостьПрочихДоходовВыплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВедомостьПрочихДоходовВыплаты.СуммаКВыплате КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТ_СписокФЛ
	|ИЗ
	|	&ВТ_СписокФЛ КАК ВедомостьПрочихДоходовВыплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КартСчетаФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	КартСчетаФизЛицСрезПоследних.НомерКартСчета КАК НомерСчета,
	|	КартСчетаФизЛицСрезПоследних.АктивностьСчета КАК АктивностьСчета
	|ПОМЕСТИТЬ ВТ_КартСчетаФизЛиц
	|ИЗ
	|	РегистрСведений.КартСчетаФизЛиц.СрезПоследних(
	|			&Дата,
	|			Банк = &Банк
	|				И НомерКартСчета <> ЗНАЧЕНИЕ(Справочник.КартСчета.ПустаяСсылка)
	|				И ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СписокФЛ.Физлицо
	|					ИЗ
	|						ВТ_СписокФЛ КАК СписокФЛ)) КАК КартСчетаФизЛицСрезПоследних
	|ГДЕ
	|	КартСчетаФизЛицСрезПоследних.АктивностьСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокФЛ.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОсновныеБанковскиеСчетаКонтрагентов.Ссылка ЕСТЬ NULL
	|				ИЛИ ОсновныеБанковскиеСчетаКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|		КОГДА НЕ ОсновныеБанковскиеСчетаКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ОсновныеБанковскиеСчетаКонтрагентов.Ссылка
	|		КОГДА НЕ БанковскиеСчетаКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА БанковскиеСчетаКонтрагентов.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	КОНЕЦ КАК НомерСчета
	|ПОМЕСТИТЬ ВТ_КартСчетаКонтрагентов
	|ИЗ
	|	ВТ_СписокФЛ КАК СписокФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СписокФЛ.Физлицо = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ОсновныеБанковскиеСчетаКонтрагентов
	|		ПО СписокФЛ.Физлицо = ОсновныеБанковскиеСчетаКонтрагентов.Владелец
	|			И (ОсновныеБанковскиеСчетаКонтрагентов.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ОсновныеБанковскиеСчетаКонтрагентов.ДатаЗакрытия > &Дата)
	|			И (ОсновныеБанковскиеСчетаКонтрагентов.Банк = &Банк)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагентов
	|		ПО СписокФЛ.Физлицо = БанковскиеСчетаКонтрагентов.Владелец
	|			И (БанковскиеСчетаКонтрагентов.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ БанковскиеСчетаКонтрагентов.ДатаЗакрытия > &Дата)
	|			И (БанковскиеСчетаКонтрагентов.Банк = &Банк)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокФЛ.НомерСтроки КАК НомерСтроки,
	|	ВТ_СписокФЛ.Физлицо КАК Физлицо,
	|	ВТ_СписокФЛ.СуммаКВыплате КАК СуммаКВыплате,
	|	ВТ_СписокФЛ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА КартСчетаФизЛиц.НомерСчета ЕСТЬ NULL
	|				И КартСчетаКонтрагентов.НомерСчета ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ВТ_СписокФЛ.Физлицо) = ТИП(Справочник.ФизическиеЛица)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.КартСчета.ПустаяСсылка)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|				КОНЕЦ
	|		КОГДА КартСчетаФизЛиц.НомерСчета ЕСТЬ NULL
	|			ТОГДА КартСчетаКонтрагентов.НомерСчета
	|		ИНАЧЕ КартСчетаФизЛиц.НомерСчета
	|	КОНЕЦ КАК НомерСчета
	|ИЗ
	|	ВТ_СписокФЛ КАК ВТ_СписокФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КартСчетаФизЛиц КАК КартСчетаФизЛиц
	|		ПО ВТ_СписокФЛ.Физлицо = КартСчетаФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КартСчетаКонтрагентов КАК КартСчетаКонтрагентов
	|		ПО ВТ_СписокФЛ.Физлицо = КартСчетаКонтрагентов.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	Объект.Выплаты.Загрузить(Результат.Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДоходовРКООткрыть()
	
	ПараметрыФормы = Новый Структура("Организация, 			СтруктурноеПодразделение, 	ПлатежнаяВедомость, 		Автозаполнение", 
									  Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Ссылка, 				Истина);

	ОткрытьФорму("Обработка.ВыплатаЗарплатыРасходнымиОрдерами.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	ПроверитьДокументыВведенныеНаОсновании();
	
	НеЗаполнен = НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ Объект.Выплаты.Количество() = 0;
	
	ЗаполненСОшибками = НЕ ЗначениеЗаполнено(Объект.СпособВыплаты);
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Справочники.Контрагенты.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Выплаты.НайтиСтроки(Новый Структура("Физлицо",Неопределено)).Количество() > 0;
	
    ЕстьНулевыеСуммы = Ложь;
	Для Каждого СтрокаЗарплаты Из Объект.Выплаты Цикл
		Если (СтрокаЗарплаты.СуммаКВыплате) <= 0 Тогда
			ЕстьНулевыеСуммы = Истина;
			Прервать
		КонецЕсли;
	КонецЦикла;	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеСостоянияДокумента(НЕ НеЗаполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы);// поля структуры описания - ТекстСообщения и ВажностьСообщения
	ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередОтрытиемВыплатыРКО(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	ВыплатаДоходовРКООткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ЭтаФорма, ВыбранныйЭлемент.Значение, Истина);
		Возврат;	
	КонецЕсли;
	
	Объект.ПериодРегистрации = ВыбранныйЭлемент.Значение; 
	МесяцНачисленияСтрокой   = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура НайтиПлатежныйДокументИЗаполнитьСсылкуНаСервере() Экспорт
	
	Документы.ВедомостьПрочихДоходов.НайтиПлатежныйДокументИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаПлатежныйДокумент, СписокПлатежныхДокументов);
	
КонецПроцедуры
