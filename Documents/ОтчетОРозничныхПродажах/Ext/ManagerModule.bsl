#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "Касса");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоВозвратам", "РасчетыПоПретензиям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");

	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаАкцизаПоРеализации", "Акциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "АкцизВидОперацииРеализации", "АкцизВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаАкциза", "СтавкаАкциза");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиБУ", "СебестоимостьРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиНУ", "СебестоимостьРеализацииНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовНУ", "ВыручкаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовБУ", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовНУ", "ВыручкаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьАкциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Касса");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры   

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли; 			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаАкцизаПоРеализации) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаАкцизаПоРеализации = СчетаУчета.СчетУчетаАкцизаПоРеализации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовОтРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовОтРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		
	ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратовПокупателя;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Возвращает список доступных видов операций, в зависимости от настроек информационной базы
//
Функция ДоступныеВидыОпераций() Экспорт
	
	ДоступныеОперации   = Новый Массив;
	ИсключаемыеОперации = Новый Массив;
	
	Возврат ДоступныеОперации;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Касса");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КурсДокумента");
		БлокируемыеРеквизиты.Добавить("КратностьДокумента");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СчетКасса");
		БлокируемыеРеквизиты.Добавить("ТипЦен");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыДействия, ТоварыСкопироватьСтроки, ТоварыВставитьСтроки,
		|ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаАкциза; ТоварыСтавкаАкциза");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаАкциза; ТоварыСуммаАкциза");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; ТоварыПодборУслуги, УслугиИзменитьУслуги, УслугиСкопироватьСтроки, УслугиВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
		// таб. часть Оплата
		БлокируемыеРеквизиты.Добавить("Оплата");
		БлокируемыеРеквизиты.Добавить("Оплата.ВидОплаты; ОплатаВидОплаты");
		БлокируемыеРеквизиты.Добавить("Оплата.СуммаОплаты; ОплатаСуммаОплаты");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахУслуги.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Услуги КАК ОтчетОРозничныхПродажахУслуги
	|ГДЕ
	|	ОтчетОРозничныхПродажахУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", КодОсновногоЯзыка));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасчетыВВалюте", Ложь);
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик       = Реквизиты.Организация;
	НалогоплательщикАкциза = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		НалогоплательщикАкциза = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.Акциз);
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	Реквизиты.Вставить("НалогоплательщикАкциза", НалогоплательщикАкциза);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НалогоплательщикАкциза	 , "НалогоплательщикАкциза");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансовВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПлатежи(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары"            , НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимУслуги"            , НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("СинонимВозвраты"          , НСтр("ru = 'Возвраты'"));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС"     , НСтр("ru = 'НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеВыделенАкциз"   , НСтр("ru = 'Акциз'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетВыручки"   , НСтр("ru = 'Зачет сумм возврата: выручка'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетНДС"       , НСтр("ru = 'Зачет сумм возврата: НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетАкциза"    , НСтр("ru = 'Зачет сумм возврата: акциз'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеОплатаНаличными", НСтр("ru = 'Оплата наличными денежными средствами'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеОплатаКарточкой", НСтр("ru = 'Оплата платежной карточкой'", КодОсновногоЯзыка));
	
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументСсылка.Организация, ДокументСсылка.Контрагент, ДокументСсылка.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СчетВозвратов", 	СчетаУчета.СчетВозвратовПокупателя);
	Запрос.УстановитьПараметр("СчетРасчетов",	СчетаУчета.СчетРасчетовПокупателя);
	Запрос.УстановитьПараметр("ВидРасчетов",       Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());

//	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", Неопределено);
	
	ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", Неопределено);
			
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.НомераГТД КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	НЕОПРЕДЕЛЕНО КАК ПризнакДоговорСовместнойДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	ЛОЖЬ КАК УказанДокументОтгрузки,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаДокумента,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.Касса,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.УказанДокументОтгрузки,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	NULL КАК ДокументОтгрузки,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ИСТИНА КАК УказанСчетВозвратов,
	|	Реквизиты.Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаАкциза,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СтавкаАкциза,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкцизаПоРеализации КАК СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ3 КАК СубконтоЗатратНУ3,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьНомераГТД Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +

		"ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаНомераГТД.КлючСвязи,
		|	ТаблицаНомераГТД.Количество КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.НомераГТД КАК ТаблицаНомераГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаНомераГТД.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Себестоимость,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВал,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетЗатратБУ КАК КорСчетСписанияБУ,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК КорСубконтоБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК КорСубконтоБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3 КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ТаблицаТовары.СчетЗатратНУ КАК КорСчетСписанияНУ,
		|	ТаблицаТовары.СубконтоЗатратНУ1 КАК КорСубконтоНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2 КАК КорСубконтоНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3 КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	&СодержаниеСписаныТМЗ КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги Тогда 
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкцизаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетЗатратБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ЛОЖЬ КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	0 КАК СуммаАкцизаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
		|	ТаблицаУслуги.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ИСТИНА КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаРеализация.Сумма КАК Сумма,
	|	ВременнаяТаблицаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаРеализация.СуммаАкциза КАК СуммаАкциза,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.Партия КАК Партия,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаРеализация.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков) КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС И НЕ (Реквизиты.ЕстьТовары И Реквизиты.УчитыватьАкциз) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Результаты запросов ниже будут использоваться для формирования движений по регистру НДС.
	// В регистре НДС предполагается, что ресурсы СуммаБезНДС и ОборотПоРеализации заполняются
	// суммами, включающими акциз. Поле ТаблицаТовары.Сумма не содержит акциза и НДС,
	// поэтому при определении СуммаБезНДС и ОборотПоРеализации к сумме прибавляется акциз. 
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК СуммаБезНДС,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК ОборотПоРеализации,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС, 					   
		|	0 КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков) КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ТаблицаТовары.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ТоварыАкциз"",
		|	&СинонимТовары,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	0,
		|	0,
		|	ТаблицаТовары.СуммаАкциза,
		|	0,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|	0,
		|	ТаблицаТовары.СтавкаАкциза,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков),
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Ссылка,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.Акциз),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог),
		|	НЕОПРЕДЕЛЕНО,
		|	&СодержаниеВыделенАкциз,
		|	ИСТИНА,
		|	ТаблицаТовары.Количество,
		|	СправочникНоменклатура.КоэффициентРасчетаОблагаемойБазыАкциза,
		|    НЕОПРЕДЕЛЕНО,
		|	1
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Реквизиты.УчитыватьАкциз
		|	И ТаблицаТовары.СуммаАкциза <> 0";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма КАК СуммаБезНДС,
		|	ТаблицаУслуги.Сумма КАК ОборотПоРеализации,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СтавкаАкциза,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	Значение(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков) КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ЕстьНомераГТД Тогда
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());
		
		ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();
		
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
		
	КонецЕсли;
		
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов + ТаблицаТовары.СуммаНДСВзаиморасчетов + ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС + ТаблицаТовары.СуммаАкциза КАК Сумма
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	1 КАК КурсВзаиморасчетов,
	|	1 КАК КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Значение(ПланСчетов.Типовой.Пустаяссылка) КАК СчетРасчетов,
	|	Значение(ПланСчетов.Типовой.Пустаяссылка) КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Значение(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) КАК ВидДоговора,
	|	Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом) КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаЗачетАвансовВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетовВозвраты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизитыВозвраты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокументаВозвраты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.СуммаАкцизаВзаиморасчетов) КАК СуммаАкцизаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.Сумма) КАК СуммаРегл,
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаСуммВзаиморасчетовВозвраты.СуммаАкциза) КАК СуммаАкциза
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетовВозвраты
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК СуммаАкцизаВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС,
	|		0 КАК СуммаАкциза
	|	ГДЕ
	|		ЛОЖЬ";
		
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетовВозвраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	&СчетВозвратов КАК СчетРасчетов,
	|	&СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаРегл,
	|	&СодержаниеЗачетВыручки КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозвраты КАК ТаблицаСуммВзаиморасчетовВозвраты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаВзаиморасчетов ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	&СчетВозвратов КАК СчетРасчетов,
	|	&СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаНДС КАК СуммаРегл,
	|	&СодержаниеЗачетНДС КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозвраты КАК ТаблицаСуммВзаиморасчетовВозвраты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаНДСВзаиморасчетов ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	&СчетВозвратов КАК СчетРасчетов,
	|	&СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаАкцизаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаАкциза КАК СуммаРегл,
	|	&СодержаниеЗачетАкциза КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозвраты КАК ТаблицаСуммВзаиморасчетовВозвраты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетовВозвраты.СуммаАкцизаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаПлатежи(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВТ_НаличнаяОплата", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_СчетаУчетаРасчетовСЭквайрером", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_СчетУчетаРасчетовСЭквайрером", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_БезналичнаяОплата", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Платежи", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ЕСТЬNULL(БезналичныеПлатежи.СуммаОплаты, 0) КАК СуммаПроводки,
	|	ОтчетОРозничныхПродажах.СчетКасса КАК СчетДт,
	|	ОтчетОРозничныхПродажах.Касса КАК СубконтоДт1,
	|	ОтчетОРозничныхПродажах.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
	|	Неопределено КАК СубконтоДт3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков) КАК СчетКт,
	|	ОтчетОРозничныхПродажах.Контрагент КАК СубконтоКт1,
	|	ОтчетОРозничныхПродажах.ДоговорКонтрагента КАК СубконтоКт2,
	|	ОтчетОРозничныхПродажах.Ссылка КАК СубконтоКт3,
	|	&СодержаниеОплатаНаличными КАК Содержание,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ НаличнаяОплата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК СуммаОплаты,
	|			ОтчетОРозничныхПродажахОплата.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ГДЕ
	|			ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтчетОРозничныхПродажахОплата.Ссылка) КАК БезналичныеПлатежи
	|		ПО ОтчетОРозничныхПродажах.Ссылка = БезналичныеПлатежи.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажах.СуммаДокумента > ЕСТЬNULL(БезналичныеПлатежи.СуммаОплаты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты КАК ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем КАК СчетДт
	|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСЭквайрером
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (ДоговорыЭквайринга.ДоговорВзаиморасчетов = СчетаУчетаРасчетовСКонтрагентами.Договор)
	|			И (НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (ДоговорыЭквайринга.ДоговорВзаиморасчетов = СчетаУчетаРасчетовСКонтрагентами.Договор)
	|			И (НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (Реквизиты.Организация = СчетаУчетаРасчетовСКонтрагентами.Организация)
	|			И (ДоговорыЭквайринга.Эквайрер = СчетаУчетаРасчетовСКонтрагентами.Контрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (Реквизиты.Организация = СчетаУчетаРасчетовСКонтрагентами.Организация)
	|			И (ДоговорыЭквайринга.Эквайрер = СчетаУчетаРасчетовСКонтрагентами.Контрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (ДоговорыЭквайринга.Эквайрер = СчетаУчетаРасчетовСКонтрагентами.Контрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (ДоговорыЭквайринга.Эквайрер = СчетаУчетаРасчетовСКонтрагентами.Контрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	8,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|		ПО (СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент)
	|			И (СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор)
	|			И (СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов)
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	МИНИМУМ(ВТ_СчетаУчетаРасчетовСЭквайрером.Приоритет) КАК Приоритет,
	|	ВТ_СчетаУчетаРасчетовСЭквайрером.ВидОплаты КАК ВидОплаты
	|	ПОМЕСТИТЬ ВТ_СчетУчетаРасчетовСЭквайрером
	|ИЗ
	|	ВТ_СчетаУчетаРасчетовСЭквайрером КАК ВТ_СчетаУчетаРасчетовСЭквайрером
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетаУчетаРасчетовСЭквайрером.ВидОплаты
	|;
 	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ОтчетОРозничныхПродажахОплата.СуммаОплаты КАК СуммаПроводки,
	|	ЕСТЬNULL(ВТ_СчетаУчетаРасчетовСЭквайрером.СчетДт, ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков))  КАК СчетДт,
	|	ДоговорыЭквайринга.Эквайрер КАК СубконтоДт1,
	|	ДоговорыЭквайринга.ДоговорВзаиморасчетов КАК СубконтоДт2,
	|	Реквизиты.Ссылка КАК СубконтоДт3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков) КАК СчетКт,
	|	Реквизиты.Контрагент КАК СубконтоКт1,
	|	Реквизиты.ДоговорКонтрагента КАК СубконтоКт2,
	|	Реквизиты.Ссылка КАК СубконтоКт3,
	|	&СодержаниеОплатаКарточкой КАК Содержание,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ БезналичнаяОплата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ДоговорыЭквайринга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетУчетаРасчетовСЭквайрером КАК ВТ_СчетУчетаРасчетовСЭквайрером
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ВТ_СчетУчетаРасчетовСЭквайрером.ВидОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаРасчетовСЭквайрером КАК ВТ_СчетаУчетаРасчетовСЭквайрером
	|		ПО ВТ_СчетУчетаРасчетовСЭквайрером.Приоритет = ВТ_СчетаУчетаРасчетовСЭквайрером.Приоритет
	|		И ВТ_СчетУчетаРасчетовСЭквайрером.ВидОплаты = ВТ_СчетаУчетаРасчетовСЭквайрером.ВидОплаты
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БезналичнаяОплата.Период КАК Период,
	|	БезналичнаяОплата.Организация КАК Организация,
	|	БезналичнаяОплата.СуммаПроводки КАК СуммаПроводки,
	|	БезналичнаяОплата.СчетДт КАК СчетДт,
	|	БезналичнаяОплата.СубконтоДт1 КАК СубконтоДт1,
	|	БезналичнаяОплата.СубконтоДт2 КАК СубконтоДт2,
	|	БезналичнаяОплата.СубконтоДт3 КАК СубконтоДт3,
	|	БезналичнаяОплата.СчетКт КАК СчетКт,
	|	БезналичнаяОплата.СубконтоКт1 КАК СубконтоКт1,
	|	БезналичнаяОплата.СубконтоКт2 КАК СубконтоКт2,
	|	БезналичнаяОплата.СубконтоКт3 КАК СубконтоКт3,
	|	БезналичнаяОплата.Содержание КАК Содержание,
	|	БезналичнаяОплата.ВалютаДокумента КАК ВалютаДокумента,
	|	БезналичнаяОплата.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	БезналичнаяОплата КАК БезналичнаяОплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаличнаяОплата.Дата,
	|	НаличнаяОплата.Организация,
	|	НаличнаяОплата.СуммаПроводки,
	|	НаличнаяОплата.СчетДт,
	|	НаличнаяОплата.СубконтоДт1,
	|	НаличнаяОплата.СубконтоДт2,
	|	НаличнаяОплата.СубконтоДт3,
	|	НаличнаяОплата.СчетКт,
	|	НаличнаяОплата.СубконтоКт1,
	|	НаличнаяОплата.СубконтоКт2,
	|	НаличнаяОплата.СубконтоКт3,
	|	НаличнаяОплата.Содержание,
	|	НаличнаяОплата.ВалютаДокумента,
	|	НаличнаяОплата.СтруктурноеПодразделение
	|ИЗ
	|	НаличнаяОплата КАК НаличнаяОплата";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура РазбитьДокумент(ДокументСсылка, МаксимальноеКоличествоСтрок, РезультатОбработки) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		КоличествоУслуг   = ДокументОбъект.Услуги.Количество();
		КоличествоТоваров = ?(ДокументОбъект.НомераГТД.Количество() = 0, ДокументОбъект.Товары.Количество(), ДокументОбъект.НомераГТД.Количество());
		
		Если (КоличествоУслуг + КоличествоТоваров) <= МаксимальноеКоличествоСтрок Тогда 
			РезультатОбработки = "ДокументНеТребуетОбработки";
		Иначе
			
			// При распределении могут быть созданы новые документы ОтчетОРозничныхПродажах.
			// Сумма (КоличествоУслуг + КоличествоТоваров) документа не должна превышать МаксимальноеКоличествоСтрок.
			//
			// 1. Вначале выполняется распределение табличных частей Товары и НомераГТД.
			// Если есть данные в таб. части НомераГТД, то за основу распределения берётся эта табличная часть.
			// То есть, число строк в НомераГТД не должно превышать МаксимальноеКоличествоСтрок.
			// При этом количество строк в Товары может оказаться меньше, чем МаксимальноеКоличествоСтрок.
			// Если таб. часть НомераГТД не заполнена, то распределяется только таб. часть Товары.
			//
			// 2. Следующим этапом распределяются Услуги.
			// Если есть возможность, услуги добавляются в обработанные на 1-м этапе документы.
			// Если такой возможности нет, то создаются новые документы.
			
			СтруктураДляРасчетовСумм = Новый Структура;
			СтруктураДляРасчетовСумм.Вставить("Дата");	
			СтруктураДляРасчетовСумм.Вставить("ВалютаДокумента");
			СтруктураДляРасчетовСумм.Вставить("КурсВзаиморасчетов");
			СтруктураДляРасчетовСумм.Вставить("КратностьВзаиморасчетов");
			СтруктураДляРасчетовСумм.Вставить("УчитыватьНДС");
			СтруктураДляРасчетовСумм.Вставить("СуммаВключаетНДС");
			СтруктураДляРасчетовСумм.Вставить("СуммаВключаетАкциз");
			СтруктураДляРасчетовСумм.Вставить("УчитыватьАкциз");
			
			ЗаполнитьЗначенияСвойств(СтруктураДляРасчетовСумм, ДокументОбъект);
			
			СуммаТоварыКСписанию    = ДокументОбъект.Товары.Итог("Сумма");
			СуммаНДСТоварыКСписанию = ДокументОбъект.Товары.Итог("СуммаНДС");
			
			СуммаТоварыСписано      = 0;
			СуммаНДСТоварыСписано   = 0;
			
			ДокументыКзаписи = Новый Массив;
			
			Оплата    = ДокументОбъект.Оплата.Выгрузить();
			НомераГТД = ДокументОбъект.НомераГТД.Выгрузить();
			Товары    = ДокументОбъект.Товары.Выгрузить();
			Услуги    = ДокументОбъект.Услуги.Выгрузить();
			
			ДокументОбъект.Оплата.Очистить();
			ДокументОбъект.НомераГТД.Очистить();
			ДокументОбъект.Товары.Очистить();
			ДокументОбъект.Услуги.Очистить();
			
			// Распределение Товаров И НомеровГТД
			Если КоличествоТоваров <> 0 Тогда
				
				ТекущийДокумент = ДокументОбъект;
				Счетчик = 1;
				
				Если НомераГТД.Количество() <> 0 Тогда
					
					СтруктураСтрокиТабЧасти = Новый Структура("Номенклатура, Количество, Сумма, СтавкаАкциза, СуммаАкциза, СтавкаНДС, СуммаНДС");
					
					Для Каждого СтрокаГТД Из НомераГТД Цикл
						
						Если Счетчик > МаксимальноеКоличествоСтрок Тогда
							
							ТекущийДокумент.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ТекущийДокумент, "Товары");
							Если ДокументыКЗаписи.Найти(ТекущийДокумент) = Неопределено Тогда 
								ДокументыКЗаписи.Добавить(ТекущийДокумент);
							КонецЕсли;
							
							ТекущийДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
							ЗаполнитьЗначенияСвойств(ТекущийДокумент, ДокументОбъект);
							ТекущийДокумент.Номер = "";
							
							Счетчик = 1;
							
						КонецЕсли; 
						
						НоваяСтрокаГТД = ТекущийДокумент.НомераГТД.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаГТД, СтрокаГТД);
						
						НоваяСтрока = ТекущийДокумент.Товары.Добавить();
						СтрокаИсточник = Товары.Найти(СтрокаГТД.КлючСвязи, "КлючСвязи");
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
						НоваяСтрока.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТекущийДокумент.Товары);
						НоваяСтрокаГТД.КлючСвязи = НоваяСтрока.КлючСвязи;
						
						Если Не СтрокаГТД.Количество = СтрокаИсточник.Количество Тогда 
							НоваяСтрока.Количество = СтрокаГТД.Количество;
							НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
							ЗаполнитьЗначенияСвойств(СтруктураСтрокиТабЧасти, НоваяСтрока);
							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтруктураСтрокиТабЧасти, СтруктураДляРасчетовСумм);
							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтруктураСтрокиТабЧасти, СтруктураДляРасчетовСумм);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтрокиТабЧасти);
						КонецЕсли;
						
						СуммаТоварыСписано    = СуммаТоварыСписано + НоваяСтрока.Сумма;
						СуммаНДСТоварыСписано = СуммаНДСТоварыСписано + НоваяСтрока.СуммаНДС;
									
						Счетчик = Счетчик + 1;
						
					КонецЦикла;
					
					// Корректировка возможных отклонений сумм после распределения
					// ТекущийДокумент - последний обработанный документ
					КорректировкаСумм = Ложь;
					Если СуммаТоварыКСписанию <> СуммаТоварыСписано Тогда
						ОстатокКСписанию = СуммаТоварыКСписанию - СуммаТоварыСписано;
						ПоследняяСтрока  = ТекущийДокумент.Товары.Получить(ТекущийДокумент.Товары.Количество() - 1);
						ПоследняяСтрока.Сумма = Последняястрока.Сумма + ОстатокКСписанию;
						КорректировкаСумм = Истина;
					КонецЕсли;
					Если СуммаНДСТоварыКСписанию <> СуммаНДСТоварыСписано Тогда
						ОстатокКСписанию = СуммаНДСТоварыКСписанию - СуммаНДСТоварыСписано;
						ПоследняяСтрока  = ТекущийДокумент.Товары.Получить(ТекущийДокумент.Товары.Количество() - 1);
						ПоследняяСтрока.СуммаНДС = Последняястрока.СуммаНДС + ОстатокКСписанию;
						КорректировкаСумм = Истина;
					КонецЕсли;
					Если КорректировкаСумм Тогда
						ТекущийДокумент.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ТекущийДокумент, "Товары");
					КонецЕсли;
					
				Иначе  // распределение таб. части Товары без учета НомераГТД

					Для Каждого СтрокаТовар Из Товары Цикл
						
						Если Счетчик > МаксимальноеКоличествоСтрок Тогда 
							
							ТекущийДокумент.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ТекущийДокумент, "Товары");
							Если ДокументыКЗаписи.Найти(ТекущийДокумент) = Неопределено Тогда 
								ДокументыКЗаписи.Добавить(ТекущийДокумент);
							КонецЕсли;
							
							ТекущийДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
							ЗаполнитьЗначенияСвойств(ТекущийДокумент, ДокументОбъект);
							ТекущийДокумент.Номер = "";
							
							Счетчик = 1;
							
						КонецЕсли;
						
						НоваяСтрока = ТекущийДокумент.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
						
						Счетчик = Счетчик + 1;
						
					КонецЦикла;
						
				КонецЕсли;
				
				Если ДокументыКЗаписи.Найти(ТекущийДокумент) = Неопределено Тогда 
					ДокументыКЗаписи.Добавить(ТекущийДокумент);
				КонецЕсли;
					
			КонецЕсли;  // КоличествоТоваров <> 0
			
			// Распределение Услуг
			Если КоличествоУслуг <> 0 Тогда
				
				Если КоличествоТоваров = 0 Тогда
					// Если существующий документ содержит только услуги,
					// то в нем остается выбранное количество услуг.
					// Остальные услуги распределяются по новым документам.
					ТекущийДокумент = ДокументОбъект;
				Иначе
					// Если существующий документ содержит и товары и услуги,
					// то выполняется поиск документа, в который можно добавить часть услуг.
					// Остальные услуги переносятся в новые документы.
					ТекущийДокумент = Неопределено;
					Для Каждого ОбработанныйДокумент Из ДокументыКзаписи Цикл
						КоличествоТоваров = ?(ОбработанныйДокумент.НомераГТД.Количество() = 0, ОбработанныйДокумент.Товары.Количество(), ОбработанныйДокумент.НомераГТД.Количество());
						Если КоличествоТоваров < МаксимальноеКоличествоСтрок Тогда
							ТекущийДокумент = ОбработанныйДокумент;
						КонецЕсли;
					КонецЦикла;
					
					Если ТекущийДокумент = Неопределено Тогда
						ТекущийДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ТекущийДокумент, ДокументОбъект);
						ТекущийДокумент.Номер = "";
						ДокументыКЗаписи.Добавить(ТекущийДокумент);
					КонецЕсли;
					
				КонецЕсли;
				
				КоличествоТоваров = ?(ТекущийДокумент.НомераГТД.Количество() = 0, ТекущийДокумент.Товары.Количество(), ТекущийДокумент.НомераГТД.Количество());
				Счетчик = КоличествоТоваров + 1; // для нового документа Счетчик = 1
				Для Каждого СтрокаУслуг Из Услуги Цикл
					Если Счетчик > МаксимальноеКоличествоСтрок Тогда 
						ТекущийДокумент.СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ТекущийДокумент, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ТекущийДокумент, "Услуги");
						Если ДокументыКЗаписи.Найти(ТекущийДокумент) = Неопределено Тогда 
							ДокументыКЗаписи.Добавить(ТекущийДокумент);
						КонецЕсли;
						ТекущийДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ТекущийДокумент, ДокументОбъект);
						ТекущийДокумент.Номер = "";
						Счетчик = 1;
					КонецЕсли;
					НоваяСтрока = ТекущийДокумент.Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг);
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				Если ДокументыКЗаписи.Найти(ТекущийДокумент) = Неопределено Тогда 
					ДокументыКЗаписи.Добавить(ТекущийДокумент);
				КонецЕсли;
					
			КонецЕсли;  // КоличествоУслуг <> 0
			
			//Распределение оплаты
			ТекущийДокументИндекс   = -1;
			ПоследнийДокументИндекс = ДокументыКЗаписи.ВГраница();
			Для Каждого ДокументОтчет Из ДокументыКЗаписи Цикл
				
				ТекущийДокументИндекс = ТекущийДокументИндекс + 1;
				
				СчетчикОплата = Оплата.Количество() - 1;
				СуммаДок = ДокументОтчет.СуммаДокумента;
				
				Пока СчетчикОплата >= 0 Цикл
					
					Если Оплата[СчетчикОплата].СуммаОплаты <= СуммаДок Тогда 
						СтрокаОплаты = ДокументОтчет.Оплата.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОплаты, Оплата[СчетчикОплата]);
						СуммаДок = СуммаДок - Оплата[СчетчикОплата].СуммаОплаты;
						Оплата.Удалить(Оплата[СчетчикОплата]);
					ИначеЕсли ТекущийДокументИндекс < ПоследнийДокументИндекс Тогда  
						СтрокаОплаты = ДокументОтчет.Оплата.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОплаты, Оплата[СчетчикОплата]);
						СтрокаОплаты.СуммаОплаты = СуммаДок ;
						Оплата[СчетчикОплата].СуммаОплаты = Оплата[СчетчикОплата].СуммаОплаты - СуммаДок;
						СуммаДок = 0;
					Иначе // В последний документ записываем всю оставшуюся оплату
						СтрокаОплаты = ДокументОтчет.Оплата.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОплаты, Оплата[СчетчикОплата]);
						СтрокаОплаты.СуммаОплаты = Оплата[СчетчикОплата].СуммаОплаты ;
						Оплата.Удалить(Оплата[СчетчикОплата]);
						СуммаДок = 0;
					КонецЕсли;
					
					Если СуммаДок = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					СчетчикОплата = СчетчикОплата - 1;
					
				КонецЦикла;
				
				Если Оплата.Количество() = 0 Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ОтменитьТранзакцию  = Ложь;
		
			НачатьТранзакцию();
			
			ЗаписатьДокументы(ДокументыКЗаписи, ДокументОбъект.Проведен, ОтменитьТранзакцию);
			
			Если ОтменитьТранзакцию Тогда
				ОтменитьТранзакцию();
				РезультатОбработки = "ДокументОшибкиЗаписи";
			Иначе
				ЗафиксироватьТранзакцию();
				РезультатОбработки = "ДокументРазбит";
			КонецЕсли;

		КонецЕсли;  // (КоличествоУслуг + КоличествоТоваров) <= МаксимальноеКоличествоСтрок
		
	КонецЕсли;  // ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
	
КонецПроцедуры

Процедура ЗаписатьДокументы(ДокументыКЗаписи, ПровестиДокументы, ОтменитьТранзакцию)
	
	ДокументыКПроведению = Новый Массив;
	Для Каждого ДокументДляЗаписи Из ДокументыКЗаписи Цикл
		Попытка
			ДокументДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			Если ПровестиДокументы Тогда
				ДокументыКПроведению.Добавить(ДокументДляЗаписи);
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записан документ <%1>.'"), Строка(ДокументДляЗаписи.Ссылка)),
				ДокументДляЗаписи.Ссылка, "Объект");
		Исключение
			ОтменитьТранзакцию = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при записи документа <%1>: %2'"),
				Строка(ДокументДляЗаписи.Ссылка), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				ДокументДляЗаписи.Ссылка, "Объект");
		КонецПопытки;
	КонецЦикла;
	
	Если ОтменитьТранзакцию Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументДляПроведения Из ДокументыКПроведению Цикл
		Попытка
			ДокументДляПроведения.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проведен документ <%1>.'"), Строка(ДокументДляПроведения.Ссылка)),
				ДокументДляПроведения.Ссылка, "Объект");
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не проведен документ <%1>: %2'"),
				Строка(ДокументДляПроведения.Ссылка), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				ДокументДляПроведения.Ссылка, "Объект");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
