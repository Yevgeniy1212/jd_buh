
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриСозданииНаСервере(ЭтотОбъект);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	си_УчетСпецодеждыСервер.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	//КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);	
	
	//	++кибернетика: 2024-09-05 Искендеров Алишер - https://cybernetika.myalm.ru/pm/JDtechsupport/I-18445
	киб_УправлениеФормой();
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.киб_АвтоЗаполнениеСуммы(Ложь,"Форма.Объект.Материалы","МодульФормыДокумента", ЭтаФорма);
	//	--кибернетика: 2024-09-05 Искендеров Алишер               
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора)<>Тип("УправляемаяФорма") Тогда	
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, "Материалы");
	ИначеЕсли ИсточникВыбора.ИмяФормы="Справочник.Номенклатура.Форма.ФормаВыбора" ИЛИ ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ПланСчетов.Типовой.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияСчетовУчета(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда	
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ПереопределениеПроцедурБСПКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	
	Если ИмяСобытия = "ПолучитьВыбранныеЭлементы" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда 
			ПолучитьВыбранныеЭлементы(Параметр.Адрес)
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ПолучитьСписокСотрудников" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда
			ПолучитьСписокСотрудников(Параметр.Адрес);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьМатериалы" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиМатериалыНаСервере(Параметр);
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	
	си_ОбщегоНазначенияСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	Если ТекущийОбъект.ФлагЗапретРедактирования Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПослеЗаписиНаСервере(ЭтотОбъект,ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_си_ПередачаМатериаловВЭксплуатацию", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача") Тогда
		Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.ДокументПередачи = ПредопределенноеЗначение("Документ.си_ПередачаМатериаловВЭксплуатацию.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета И (Объект.Материалы.Количество() > 0) Тогда 
		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеВидаОперации");
	Иначе 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПерезаполнитьСчетаУчета", Истина);
		ВидОперацииПриИзмененииНаСервере(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = общ_ПереопределениеПроцедурБККлиентСервер.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_ПереопределяемыеПроцедурыБККлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Материалы.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = общ_ПереопределениеПроцедурБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Материалы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	общ_ПереопределяемыеПроцедурыБККлиент.УдалитьНомераГТДПриИзмененииТовара(ЭтаФорма, "Материалы", Элементы.Материалы.ТекущаяСтрока);
	
	ДанныеСтрокиТаблицы = Новый Структура(
	"Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетУчетаБУ, СчетУчетаНУ,Характеристика"
	);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
	"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
	|УчитыватьКПН, Склад, ВидОперации");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.МатериалыНоменклатура;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана номенклатура!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	си_ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	мКоэффициент =  СтрокаТабличнойЧасти.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
	
	//	++кибернетика: 2024-09-04 Искендеров Алишер - https://cybernetika.myalm.ru/pm/JDtechsupport/I-18445
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные.НомерСтроки-1;
	киб_АвтоЗаполнениеНазначения(Элементы.Материалы.ТекущиеДанные.Номенклатура, 
	Элементы.Материалы.ТекущиеДанные.Сотрудник,
	ТекущаяСтрока);
	киб_АвтоЗаполнениеСрокаСлужбы(Элементы.Материалы.ТекущиеДанные.НазначениеИспользования, ТекущаяСтрока);
	//	--кибернетика: 2024-09-04 Искендеров Алишер               
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетаУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.СчетУчетаБУ),,
		"Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ",
		"Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = Неопределено;
		Возврат;
	КонецЕсли;
	
	// НУ
	СтрокаТаблицы.СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
	Пока Истина Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТаблицы.КлючСвязи);
		МассивСтрокНомераГТД = Объект.НомераГТД.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрокНомераГТД.Количество() > 0 Тогда
			Объект.НомераГТД.Удалить(МассивСтрокНомераГТД[0]);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.СчетУчетаНУ),,
		"Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ",
		"Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПоступленияТовары(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Материалы", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНорм(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТЧПриАвтозаполнении", ЭтаФорма);
		ТекстВопроса = "При заполнении табличная часть будет очищена. Продолжить?";
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"'"), Режим, 0);
	Иначе
		Автозаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТовары(Команда)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПоступленияТоваровУслуг("Материалы", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискомРаботников(Команда)
	Если Объект.Проведен Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменаПроведенияПриЗаполнении", ЭтаФорма);
		ТекстВопроса = "Для заполнения табличной части требуется отмена проведения документа. Продолжить?";
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"'"), Режим, 0);
	Иначе
		ЗаполнитьСпискомРаботниковВызовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
		ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчистка", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Продолжить выполнение операции?';"
	+ " en = 'Do you want to continue?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзОстатков(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийПередачиВЭксплуатацию.ПередачаМатериаловБУ") Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СостояниеМатериалов", ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе"));
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		СостояниеМатериаловНаСкладе = Новый СписокЗначений;
		СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении"));
		ПараметрыФормы.Вставить("СостояниеМатериаловНаСкладе", СостояниеМатериаловНаСкладе);
		ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаПодбораМатериаловИзОстатков",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
		ФормаПодбора.Открыть();
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СостояниеМатериалов", ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе"));
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		СостояниеМатериаловНаСкладе = Новый СписокЗначений;
		СостояниеМатериаловНаСкладе.Добавить(ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая"));
		ПараметрыФормы.Вставить("СостояниеМатериаловНаСкладе", СостояниеМатериаловНаСкладе);
		ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаПодбораМатериаловИзОстатков",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
		ФормаПодбора.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	си_УчетСпецодеждыКлиент.ПодборНоменклатуры(Элементы.Материалы,УникальныйИдентификатор,ПараметрыПодбора,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоХарактеристикам(Команда)
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиМатериалы();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Документ.си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикам.Форма.ФормаОбработкиТабЧасти", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСчетУчета(Команда)
	ПараметрыФормы = Новый Структура;
	Форма = ПолучитьФорму("ПланСчетов.Типовой.ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
	Форма.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
	
	ВалютаРегламентированногоУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидаОперации(Элементы.ВидОперации);
	
	ВедетсяУчетПоХарактеристикам = си_УчетСпецодеждыСерверПовтИсп.ВедетсяУчетПоХарактеристикам();
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	общ_ПереопределяемыеПроцедурыБКСервер.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.МатериалыСотрудник);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость          = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость        = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Видимость счетов учета
	Элементы.ГруппаСчетаУчета.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача") Тогда
		Элементы.МатериалыСчетаУчетаБУ.Видимость 					= Форма.ПоказыватьВДокументахСчетаУчета;
		Элементы.МатериалыСчетаУчетаНУ.Видимость 					= Форма.ПоказыватьВДокументахСчетаУчета;
		Элементы.МатериалыДокументПередачи.Видимость 				= Ложь;
		Элементы.МатериалыДокументПередачи.АвтоОтметкаНезаполненного = Ложь;
		Элементы.МатериалыПодборИзОстатков.Видимость 				= Форма.ВедетсяУчетПоХарактеристикам;
		Элементы.МатериалыДокументВозврата.Видимость				= Ложь;
	Иначе 
		Элементы.МатериалыСчетаУчетаБУ.Видимость 					= Ложь;
		Элементы.МатериалыСчетаУчетаНУ.Видимость 					= Ложь;
		Элементы.МатериалыДокументПередачи.Видимость 				= Истина;
		Элементы.МатериалыДокументПередачи.АвтоОтметкаНезаполненного = Истина;
		Элементы.МатериалыДокументВозврата.Видимость				= Истина;
	КонецЕсли;
	Если Форма.ВедетсяУчетПоХарактеристикам Тогда
		Элементы.МатериалыРаспределитьПоХарактеристикам.Видимость = Истина;
	Иначе
		Элементы.МатериалыРаспределитьПоХарактеристикам.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
	Элементы.МатериалыИзменитьТовары.Видимость = си_ОбщегоНазначенияВызовСервераПовтИсп.ДоступноИзменениеТабличныхЧастей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           	= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ 				= НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаОперации(Элемент)
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Документы.си_ПередачаМатериаловВЭксплуатацию.ДоступныеВидыОпераций()));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// При изменении реквизитов (на сервере)
&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , , СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(СтруктураПараметров)
	
	ВидОперацииОбработатьИзменение();
	Если СтруктураПараметров.Свойство("ПерезаполнитьСчетаУчета") И СтруктураПараметров.ПерезаполнитьСчетаУчета Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина, (Объект.Материалы.Количество() > 0));
		Если ПоказыватьВДокументахСчетаУчета Тогда 
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	общ_ПереопределяемыеПроцедурыБКСервер.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ТекущийВидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре 							= общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  			= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.НазначениеИспользования 	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования),СтрокаТабличнойЧасти.НазначениеИспользования,СтрокаТабличнойЧасти.Номенклатура.си_ОсновноеНазначениеИспользования);
	
	Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Материалы", СведенияОНоменклатуре);
	
КонецПроцедуры

// Подбор товаров
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ТипЦен"                  , Неопределено);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Неопределено);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Материалы" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(
	общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("Сотрудник", Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()].ПустаяСсылка());
		
		СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		ИначеЕсли СтрокаТовара.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			
			Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.КлючСвязи = общ_ПереопределениеПроцедурБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТовара.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ЗаполнятьСчетаРасчетов = Ложь, ЗаполнятьСчетаТабЧастей = Ложь)
	
	Если Объект.Материалы.Количество() > 0 И ЗаполнятьСчетаТабЧастей Тогда
		Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Материалы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация, ВидОперации, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСчетаУчетаСпискаНоменклатуры(
	ДанныеОбъекта.Организация, общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	СтрокиКУдалению = Новый Массив;	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТабличнойЧасти.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
			Продолжить;	
		КонецЕсли;
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СчетаУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Материалы", СчетаУчета);
		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
		ТаблицаОбработки.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Объект.Материалы.Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина);
	Иначе
		ЗаполнитьСчетаУчетаНаСервере(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	ТекущийВидОперации = Объект.ВидОперации;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеВидаОперации(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", Результат = КодВозвратаДиалога.Да);
	ВидОперацииПриИзмененииНаСервере(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеОрганизации(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Материалы", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчистка(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтменаПроведенияПриЗаполнении(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения));
	ЗаполнитьСпискомРаботниковВызовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТЧПриАвтозаполнении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Автозаполнение();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	Объект.НомераГТД.Очистить();
	
	Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть, СпособЗаполнения)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.си_ПередачаМатериаловВЭксплуатацию.ЗаполнитьПоПоступлению(Объект, ТабличнаяЧасть, "Добавить", ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеЭлементы(Адрес)
	ВыбранныеЭлементы = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ВыбранныеЭлементы) = Тип("ТаблицаЗначений") Тогда
		СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ВыбранныеЭлементы, "Номенклатура", Истина), Объект);
		Для Каждого ЭлементТаблицы Из ВыбранныеЭлементы Цикл
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", ЭлементТаблицы.Номенклатура);
			Если Не ВыбранныеЭлементы.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЭлементТаблицы.ЕдиницаИзмерения);
			КонецЕсли;
			Если Не ВыбранныеЭлементы.Колонки.Найти("Сотрудник") = Неопределено Тогда
				СтруктураОтбора.Вставить("Сотрудник", Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()].ПустаяСсылка());
			КонецЕсли;
			Если ВедетсяУчетПоХарактеристикам Тогда
				СтруктураОтбора.Вставить("Характеристика",ЭлементТаблицы.Характеристика);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, "Материалы", СтруктураОтбора);
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
				// Нашли, увеличиваем количество в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ЭлементТаблицы.Количество;
			Иначе
				НоваяСтрока = Объект.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементТаблицы);
				ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетУчетаБУ, СчетУчетаНУ");
				ДанныеСтрокиТаблицы.Вставить("Характеристика");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
				ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, УчитыватьКПН, Склад, ВидОперации");
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
				ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
				Если ЗначениеЗаполнено(ЭлементТаблицы.СчетУчетаБУ) Тогда
					ДанныеСтрокиТаблицы.СчетУчетаБУ = ЭлементТаблицы.СчетУчетаБУ;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлементТаблицы.СчетУчетаНУ) Тогда
					ДанныеСтрокиТаблицы.СчетУчетаНУ = ЭлементТаблицы.СчетУчетаНУ;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискомРаботниковВызовФормы()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда 
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
	ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаФормированияСпискаСотрудников",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСотрудников(Адрес)
	Документы.си_ПередачаМатериаловВЭксплуатацию.АвтозаполнениеСпискомСотрудников(ЭтаФорма,Адрес);
КонецПроцедуры

&НаСервере
Процедура Автозаполнение()
	Документы.си_ПередачаМатериаловВЭксплуатацию.Автозаполнение(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияСчетовУчета(ВыбранноеЗначение)
	Режим = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса = Новый Структура("ВыбранноеЗначение",ВыбранноеЗначение);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаУстановкаСчета", ЭтаФорма, ПараметрыВопроса);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Установить выбранный счет учета для всех выделенных позиций?';"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаУстановкаСчета(Результат, ПараметрыВопроса) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеПозиции = Элементы.Материалы.ВыделенныеСтроки;
	Для Каждого СтрокаТЧ Из ВыделенныеПозиции Цикл
		ТекущаяСтрока = Объект.Материалы.НайтиПоИдентификатору(СтрокаТЧ);
		Если Не ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока.СчетУчетаБУ = ПараметрыВопроса.ВыбранноеЗначение;
			ТекущаяСтрока.СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущаяСтрока.СчетУчетаБУ));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиМатериалыНаСервере(Параметры) Экспорт
	
	ТаблицаМатериалы = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиМатериалыВХранилище);
	
	Объект.Материалы.Загрузить(ТаблицаМатериалы); 
	
	ДанныеОбъекта = Новый Структура(
	"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
	|УчитыватьКПН, Склад, ВидОперации");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	си_УчетСпецодеждыСервер.ОбработатьРезультатРаспределенияПоХарактеристикам(Объект);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл 
		ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиМатериалы()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаМатериалы",		ПоместитьМатериалыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("Заголовок", 					"Приемка спецодежды и инвентаря по характеристикам");
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьМатериалыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат общ_ПереопределяемыеПроцедурыБКСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма,"Материалы");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	общ_ПереопределениеПроцедурБСПКлиент.ФормаОбъекта_ПриОткрытии(ЭтотОбъект,Отказ);

	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		си_УчетСпецодеждыКлиент.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_ПереопределяемыеПроцедурыБКСервер.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//СтандартныеОбработчикиФормыБСП.Начало


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	//Элементы.Товары.ТолькоПросмотр       = Ложь;
	//Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	//Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	

	//Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

//СтандартныеОбработчикиФормыБСП.Конец

// СтараяБСП

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	общ_ПереопределениеПроцедурБСПСервер.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		общ_ПереопределениеПроцедурБСПКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;	

КонецПроцедуры

// Конец СтараяБСП

#КонецОбласти

//	++кибернетика: 2024-09-04 Искендеров Алишер - https://cybernetika.myalm.ru/pm/JDtechsupport/I-18445
&НаСервере
Процедура киб_УправлениеФормой()
	
	НовыйЭлемент = Элементы.Вставить("Материалыкиб_СрокСлужбы",Тип("ПолеФормы"),Элементы.Материалы,Элементы.МатериалыНазначениеИспользования);
	НовыйЭлемент.ПутьКДанным = "Объект.Материалы.киб_СрокСлужбы";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Вставить("Материалыкиб_ДатаОкончанияСрока",Тип("ПолеФормы"),Элементы.Материалы,Элементы.МатериалыНазначениеИспользования);
	НовыйЭлемент.ПутьКДанным = "Объект.Материалы.киб_ДатаОкончанияСрока";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Вставить("Материалыкиб_Цена",Тип("ПолеФормы"),Элементы.Материалы,Элементы.МатериалыНазначениеИспользования);
	НовыйЭлемент.ПутьКДанным = "Объект.Материалы.киб_Цена";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Вставить("Материалыкиб_Сумма",Тип("ПолеФормы"),Элементы.Материалы,Элементы.МатериалыНазначениеИспользования);
	НовыйЭлемент.ПутьКДанным = "Объект.Материалы.киб_Сумма";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НоваяГруппа = Элементы.Добавить("киб_ГруппаДополнительно", Тип("ГруппаФормы"), Элементы.ГруппаШапкаПравая);
	НоваяГруппа.Заголовок = "Дополнительно";
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НоваяГруппа = Элементы.Добавить("киб_ГруппаДопСвойстваФизЛиц", Тип("ГруппаФормы"), Элементы.киб_ГруппаДополнительно);
	НоваяГруппа.Заголовок = "Доп. свойства физ. лиц";
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НоваяГруппа = Элементы.Добавить("киб_ГруппаИнформацияОСотруднике", Тип("ГруппаФормы"), Элементы.киб_ГруппаДополнительно);
	НоваяГруппа.Заголовок = "Информация о сотруднике";
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйЭлемент = Элементы.Добавить("киб_Рост",Тип("ПолеФормы"),Элементы.киб_ГруппаДопСвойстваФизЛиц);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_Рост";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_РазмерОдежды",Тип("ПолеФормы"),Элементы.киб_ГруппаДопСвойстваФизЛиц);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_РазмерОдежды";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_РазмерОбуви",Тип("ПолеФормы"),Элементы.киб_ГруппаДопСвойстваФизЛиц);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_РазмерОбуви";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_РазмерГоловногоУбора",Тип("ПолеФормы"),Элементы.киб_ГруппаДопСвойстваФизЛиц);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_РазмерГоловногоУбора";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_Должность",Тип("ПолеФормы"),Элементы.киб_ГруппаИнформацияОСотруднике);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_Должность";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_Пол",Тип("ПолеФормы"),Элементы.киб_ГруппаИнформацияОСотруднике);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_Пол";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент = Элементы.Добавить("киб_Утверждает",Тип("ПолеФормы"),Элементы.ГруппаДополнительно);
	НовыйЭлемент.ПутьКДанным = "Объект.киб_Утверждает";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Элементы.Материалыкиб_Цена.ТолькоПросмотр = Истина;
		Элементы.Материалыкиб_Сумма.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура киб_АвтоЗаполнениеНазначения(Номенклатура, Сотрудник, ИндексСтроки)
	
	ТЗ_Материалы = ЭтаФорма.Объект.Материалы.Выгрузить();
	ТЗ_Материалы.Свернуть("Номенклатура, Сотрудник");
	ТЗ_Материалы.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для сч = 0 По ТЗ_Материалы.Количество()-1 Цикл
		ТЗ_Материалы[сч].Подразделение = ЭтаФорма.Объект.ПодразделениеОрганизации;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МатериалыВЭксплуатацию.Сотрудник КАК Сотрудник,
		|	МатериалыВЭксплуатацию.Номенклатура КАК Номенклатура,
		|	МатериалыВЭксплуатацию.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_МатериалыВЭксплуатацию
		|ИЗ
		|	&МатериалыВЭксплуатацию КАК МатериалыВЭксплуатацию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МатериалыВЭксплуатацию.Сотрудник КАК Сотрудник,
		|	ВТ_МатериалыВЭксплуатацию.Номенклатура КАК Номенклатура,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	ВТ_МатериалыВЭксплуатацию.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ДолжностьСотрудника
		|ИЗ
		|	ВТ_МатериалыВЭксплуатацию КАК ВТ_МатериалыВЭксплуатацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСобытия, ) КАК РаботникиОрганизацийСрезПоследних
		|		ПО (ВТ_МатериалыВЭксплуатацию.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|				ИЛИ ВТ_МатериалыВЭксплуатацию.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДолжностьСотрудника.Сотрудник КАК Сотрудник,
		|	ДолжностьСотрудника.Номенклатура КАК Номенклатура,
		|	си_УстановкаНормВыдачиСпецодеждыИИнвентаряДолжности.Ссылка КАК Ссылка,
		|	ДолжностьСотрудника.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_УстановкаНормСО
		|ИЗ
		|	ВТ_ДолжностьСотрудника КАК ДолжностьСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.си_УстановкаНормВыдачиСпецодеждыИИнвентаря.Должности КАК си_УстановкаНормВыдачиСпецодеждыИИнвентаряДолжности
		|		ПО ДолжностьСотрудника.Должность = си_УстановкаНормВыдачиСпецодеждыИИнвентаряДолжности.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УстановкаНормСО.Сотрудник КАК Сотрудник,
		|	си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи.Номенклатура КАК Номенклатура,
		|	си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи.НазначениеИспользования КАК НазначениеИспользования,
		|	ВТ_УстановкаНормСО.Подразделение КАК Подразделение,
		|	си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи.НазначениеИспользования.СпособОтраженияРасходов КАК НазначениеИспользованияСпособОтраженияРасходов
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	Документ.си_УстановкаНормВыдачиСпецодеждыИИнвентаря.НормыВыдачи КАК си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УстановкаНормСО КАК ВТ_УстановкаНормСО
		|		ПО си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи.Номенклатура = ВТ_УстановкаНормСО.Номенклатура
		|			И си_УстановкаНормВыдачиСпецодеждыИИнвентаряНормыВыдачи.Ссылка = ВТ_УстановкаНормСО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Результат.Сотрудник КАК Сотрудник,
		|	ВТ_Результат.Номенклатура КАК Номенклатура,
		|	ВТ_Результат.НазначениеИспользования КАК НазначениеИспользования,
		|	ВТ_Результат.Подразделение КАК Подразделение,
		|	ВТ_Результат.НазначениеИспользованияСпособОтраженияРасходов КАК НазначениеИспользованияСпособОтраженияРасходов
		|ИЗ
		|	ВТ_Результат КАК ВТ_Результат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
		|		ПО ВТ_Результат.НазначениеИспользованияСпособОтраженияРасходов = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
		|			И ВТ_Результат.Подразделение = СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1";
	
	Запрос.УстановитьПараметр("МатериалыВЭксплуатацию", ТЗ_Материалы);
	Если Параметры.Ключ.Пустая() Тогда
		Запрос.УстановитьПараметр("ДатаСобытия", ТекущаяДата());
	Иначе
		Запрос.УстановитьПараметр("ДатаСобытия", Объект.Дата);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Объект.Материалы[ИндексСтроки].НазначениеИспользования = ВыборкаДетальныеЗаписи.НазначениеИспользования;			
		КонецЦикла;
	Иначе
		Объект.Материалы[ИндексСтроки].НазначениеИспользования = Справочники.си_НазначенияИспользования.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура киб_АвтоЗаполнениеСрокаСлужбы(НазначениеИспользования, ИндексСтроки)
	Если Объект.ВидОперации = Перечисления.си_ВидыОперацийПередачиВЭксплуатацию.ПередачаМатериаловБУ Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	си_НазначенияИспользования.СрокПолезногоИспользования КАК СрокПолезногоИспользования
		|ИЗ
		|	Справочник.си_НазначенияИспользования КАК си_НазначенияИспользования
		|ГДЕ
		|	си_НазначенияИспользования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НазначениеИспользования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.Материалы[ИндексСтроки].киб_СрокСлужбы = ВыборкаДетальныеЗаписи.СрокПолезногоИспользования;
		
		Если Параметры.Ключ.Пустая() Тогда
			Объект.Материалы[ИндексСтроки].киб_ДатаОкончанияСрока = ДобавитьМесяц(ТекущаяДатаСеанса(),Объект.Материалы[ИндексСтроки].киб_СрокСлужбы)-24*60*60;	
		Иначе
			Объект.Материалы[ИндексСтроки].киб_ДатаОкончанияСрока = ДобавитьМесяц(Объект.Дата,Объект.Материалы[ИндексСтроки].киб_СрокСлужбы)-24*60*60; 		
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры
//	--кибернетика: 2024-09-04 Искендеров Алишер