////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
				
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	ОформитьПустыеКолонки();    
КонецПроцедуры

&НаСервере
Процедура ОформитьПустыеКолонки()
	
	Для Каждого Стр Из Объект.тбСписание Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Стр.Код = Стр.Номенклатура.Код;
			Стр.ЕдИзм = Стр.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
	
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);

	ОформитьПустыеКолонки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(, Объект.Организация,);
	Если Результат.ИзмененаОрганизация Тогда
		Если Объект.тбСписание.Количество() > 0 Тогда
			РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
		Иначе
			ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры          

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КТ_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента     = Объект.Дата;
	ТекущийСклад	         = Объект.МОЛ;
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, СтруктураРезультатаВыполнения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	Конецесли;
        
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ЗатратБУ");     // СчетЗатратБУ
	СписокАналитикиСчетов.Добавить("ЗатратНУ");     // СчетЗатратНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСНУ"); 
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей, СтруктураРеквизитовШапки);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ЗаполнитьНаСервере()
	Объект.тбСписание.Очистить();
	
	зпСписание = новый Запрос;
	Если Объект.флТолькоНормируемыеМатериалы Тогда
		зпСписание.Текст = ПолучитьТекстЗапросаПоНормируемымТМЦ();
	Иначе
		зпСписание.Текст = ПолучитьТекстЗапросаПоНеНормируемымТМЦ();
	КонецЕсли;
	
	зпСписание.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	зпСписание.УстановитьПараметр("Счет1310"          , ПланыСчетов.Типовой.СырьеИМатериалы);
	зпСписание.УстановитьПараметр("ДатаНач"           , НачалоМесяца(Объект.Дата));
	зпСписание.УстановитьПараметр("ДатаКон"           , КонецДня(Объект.Дата));
	зпСписание.УстановитьПараметр("ВыбСклад"          , Объект.МОЛ);
	зпСписание.УстановитьПараметр("пустаяНомГруппа"   , Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	зпСписание.УстановитьПараметр("Подразделение"     , Объект.ПодразделениеОрганизации);
	                                                                  
	РезультатЗапроса = зпСписание.Выполнить();

	Объект.тбСписание.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаПоНормируемымТМЦ()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТОИОб.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ТОИОб.Субконто1.Код КАК Код,
	               |	ТОИОб.Субконто1.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	               |	ТОИОб.Счет КАК Счет,
	               |	ТОИОб.КоличествоНачальныйОстатокДт КАК КоличествоНач,
	               |	ТОИОб.КоличествоКонечныйОстатокДт КАК КоличествоКон,
	               |	ВЫРАЗИТЬ(ТОИОб.Субконто2 КАК Справочник.Склады) КАК Склад,
	               |	ТОИОб.КоличествоОборотДт КАК ПриходФакт,
	               |	ТОИОб.КоличествоОборотКт КАК РасходФакт,
	               |	ТОИОб.КоличествоКонечныйОстатокДт КАК ОстатокПослеСписания
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет1310),
	               |			,
	               |			Субконто2 В ИЕРАРХИИ (&ВыбСклад)
	               |				И Субконто1 В
	               |					(ВЫБРАТЬ
	               |						КТ_НормыРасходаТМЦСрезПоследних.Номенклатура КАК Номенклатура
	               |					ИЗ
	               |						РегистрСведений.КТ_НормыРасходаТМЦ.СрезПоследних(&ДатаКон, ) КАК КТ_НормыРасходаТМЦСрезПоследних
	               |							ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |								КТ_НормыРасходаТМЦСрезПоследних.Номенклатура КАК Номенклатура,
	               |								МАКСИМУМ(КТ_НормыРасходаТМЦСрезПоследних.Период) КАК Период
	               |							ИЗ
	               |								РегистрСведений.КТ_НормыРасходаТМЦ.СрезПоследних(&ДатаКон, ) КАК КТ_НормыРасходаТМЦСрезПоследних
	               |							ГДЕ
	               |								КТ_НормыРасходаТМЦСрезПоследних.ВидРасхода = ЗНАЧЕНИЕ(Перечисление.КТ_ВариантПланФакт.Факт)
	               |								И КТ_НормыРасходаТМЦСрезПоследних.Номенклатура <> &ПустаяНоменклатура
	               |								И КТ_НормыРасходаТМЦСрезПоследних.Участок = &Подразделение
	               |							СГРУППИРОВАТЬ ПО
	               |								КТ_НормыРасходаТМЦСрезПоследних.Номенклатура) КАК Периоды
	               |							ПО
	               |								КТ_НормыРасходаТМЦСрезПоследних.Номенклатура = Периоды.Номенклатура
	               |					ГДЕ
	               |						КТ_НормыРасходаТМЦСрезПоследних.ВидРасхода = ЗНАЧЕНИЕ(Перечисление.КТ_ВариантПланФакт.Факт)
	               |						И КТ_НормыРасходаТМЦСрезПоследних.Номенклатура <> &ПустаяНоменклатура
	               |						И КТ_НормыРасходаТМЦСрезПоследних.Участок = &Подразделение
	               |						И КТ_НормыРасходаТМЦСрезПоследних.Норма > 0
	               |					СГРУППИРОВАТЬ ПО
	               |						КТ_НормыРасходаТМЦСрезПоследних.Номенклатура)) КАК ТОИОб";

	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоНеНормируемымТМЦ()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТОИОб.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ТОИОб.Субконто1.Код КАК Код,
	               |	ТОИОб.Субконто1.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	               |	ТОИОб.Счет КАК Счет,
	               |	ТОИОб.КоличествоНачальныйОстатокДт КАК КоличествоНач,
	               |	ТОИОб.КоличествоКонечныйОстатокДт КАК КоличествоКон,
	               |	ВЫРАЗИТЬ(ТОИОб.Субконто2 КАК Справочник.Склады) КАК Склад,
	               |	ТОИОб.КоличествоОборотДт КАК ПриходФакт,
	               |	ТОИОб.КоличествоОборотКт КАК РасходФакт,
	               |	ТОИОб.КоличествоКонечныйОстатокДт КАК ОстатокПослеСписания
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет1310),
	               |			,
	               |			Субконто2 В ИЕРАРХИИ (&ВыбСклад)
	               |				И НЕ Субконто1 В
	               |						(ВЫБРАТЬ
	               |							КТ_НормыРасходаТМЦСрезПоследних.Номенклатура КАК Номенклатура
	               |						ИЗ
	               |							РегистрСведений.КТ_НормыРасходаТМЦ.СрезПоследних(&ДатаКон, ) КАК КТ_НормыРасходаТМЦСрезПоследних
	               |								ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |									КТ_НормыРасходаТМЦСрезПоследних.Номенклатура КАК Номенклатура,
	               |									МАКСИМУМ(КТ_НормыРасходаТМЦСрезПоследних.Период) КАК Период
	               |								ИЗ
	               |									РегистрСведений.КТ_НормыРасходаТМЦ.СрезПоследних(&ДатаКон, ) КАК КТ_НормыРасходаТМЦСрезПоследних
	               |								ГДЕ
	               |									КТ_НормыРасходаТМЦСрезПоследних.ВидРасхода = ЗНАЧЕНИЕ(Перечисление.КТ_ВариантПланФакт.Факт)
	               |									И КТ_НормыРасходаТМЦСрезПоследних.Номенклатура <> &ПустаяНоменклатура
	               |									И КТ_НормыРасходаТМЦСрезПоследних.Участок = &Подразделение
	               |								СГРУППИРОВАТЬ ПО
	               |									КТ_НормыРасходаТМЦСрезПоследних.Номенклатура) КАК Периоды
	               |								ПО
	               |									КТ_НормыРасходаТМЦСрезПоследних.Номенклатура = Периоды.Номенклатура
	               |						ГДЕ
	               |							КТ_НормыРасходаТМЦСрезПоследних.ВидРасхода = ЗНАЧЕНИЕ(Перечисление.КТ_ВариантПланФакт.Факт)
	               |							И КТ_НормыРасходаТМЦСрезПоследних.Номенклатура <> &ПустаяНоменклатура
	               |							И КТ_НормыРасходаТМЦСрезПоследних.Участок = &Подразделение
	               |							И КТ_НормыРасходаТМЦСрезПоследних.Норма > 0
	               |						СГРУППИРОВАТЬ ПО
	               |							КТ_НормыРасходаТМЦСрезПоследних.Номенклатура)) КАК ТОИОб";
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.Проведен Тогда
		Сообщить("Отмените проведение!");
		Возврат;	
	КонецЕсли;
	
	Если Вопрос("Очистить таблицу и заполнить заново?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
	ОформитьПустыеКолонки();    

КонецПроцедуры

&НаКлиенте
Процедура СписатьВсеОстатки(Команда)
	
	Если Вопрос("Проставить все остатки в расход?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого стр Из Объект.тбСписание Цикл
		стр.КоличествоСписать    = стр.КоличествоКон;
		стр.ОстатокПослеСписания = стр.КоличествоНач + стр.ПриходФакт - стр.РасходФакт - стр.КоличествоСписать;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Согласование(Команда)
	Если Вопрос("Записать документ и отправить на согласование бухгалтеру?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	Текст00       = "";
	Подсказка     = "Текст сообщения (можно оставить пустым)";
	рез           = ВвестиСтроку(Текст00, Подсказка, 400, Ложь);
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСогласования.НаРасмотрении");
	
	ОставитьСледВИстории(Текст00);
КонецПроцедуры

&НаСервере
Процедура ОставитьСледВИстории(Текст00 = "")
	
	новСтрИстория                   = Объект.тбИсторияИзмененияСтатусов.Добавить();
	новСтрИстория.ДатаСобытия       = ТекущаяДата();
	новСтрИстория.Пользователь      = ПользователиКлиентСервер.ТекущийПользователь();
	новСтрИстория.ТекстСогласования = Текст00;
	новСтрИстория.Статус            = Объект.Статус;
	
	Записать();

КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	Если Вопрос("Отклонить документ и отправить на доработку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	Текст00   = "";
	Подсказка = "Текст сообщения(можно оставить пустым)";
	рез       = ВвестиСтроку(Текст00,Подсказка, 400, Ложь);
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСогласования.Отклонено");
	
	ОставитьСледВИстории(Текст00);
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	Если Вопрос("Согласовать и принять документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	Текст00   = "";
	Подсказка = "Текст сообщения(можно оставить пустым)";
	рез       = ВвестиСтроку(Текст00, Подсказка, 400, Ложь);
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСогласования.Согласовано");
	
	ОставитьСледВИстории(Текст00);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов()
	
	флДоступЕсть = ВернутьДоступРоли();
	
	Элементы.Отклонить.Доступность = флДоступЕсть;
	Элементы.ДействияФормы.Кнопки.кнПринять.Доступность = флДоступЕсть;
	
	Если (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСогласования.Согласовано") 
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСогласования.НаРасмотрении")) и НЕ флДоступЕсть Тогда
		//***реквизиты будут недоступны для редактирования
		Элементы.тбСписание.ТолькоПросмотр             = Истина;
		Элементы.тбСписаниеКоманднаяПанель.Доступность = Ложь;
		Элементы.ОтправитьНаСогласование.Доступность   = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тбСписаниеКоличествоСписатьПриИзменении(Элемент)
	 ПересчетСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСтроки()
	ТекущДанные = Элементы.тбСписание.ТекущиеДанные;
	ТекущДанные.ОстатокПослеСписания = ТекущДанные.КоличествоНач + ТекущДанные.ПриходФакт - ТекущДанные.РасходФакт - ТекущДанные.КоличествоСписать;
КонецПроцедуры

Функция ВернутьДоступРоли()  
	флДоступЕсть = Ложь;
	Если РольДоступна("ПолныеПрава") 
		ИЛИ РольДоступна("ГлавныйБухгалтер") 
		ИЛИ РольДоступна("бит_ПолныеПрава") Тогда
		флДоступЕсть = Истина;
	КонецЕсли;
	
	Возврат флДоступЕсть;
КонецФункции // ()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОформитьПустыеКолонки();    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры
