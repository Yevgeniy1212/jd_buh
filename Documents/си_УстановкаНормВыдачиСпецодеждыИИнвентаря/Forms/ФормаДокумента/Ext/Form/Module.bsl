
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриСозданииНаСервере(ЭтотОбъект);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	си_УчетСпецодеждыСервер.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	//КонецЕсли;		
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрНайти(ИсточникВыбора.ИмяФормы,"Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников())>0 Тогда
		Если Объект.Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 			= Объект.Работники.Добавить();
			НоваяСтрока.Сотрудник   = ВыбранноеЗначение;
			НоваяСтрока.КлючСвязи 	= ПолучитьНовыйКлючСвязи();
		КонецЕсли;
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаДолжностей()+".Форма.ФормаВыбора" Тогда
		Если Объект.Должности.НайтиСтроки(Новый Структура("Должность", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 			= Объект.Должности.Добавить();
			НоваяСтрока.Должность   = ВыбранноеЗначение;
			НоваяСтрока.КлючСвязи 	= ПолучитьНовыйКлючСвязи();
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы="Справочник.Номенклатура.Форма.ФормаВыбора" ИЛИ ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		Если Объект.Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 			= Объект.Работники.Добавить();
			НоваяСтрока.Сотрудник   = ВыбранноеЗначение;
			НоваяСтрока.КлючСвязи 	= ПолучитьНовыйКлючСвязи();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ПереопределениеПроцедурБСПКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	
	си_ОбщегоНазначенияСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПослеЗаписиНаСервере(ЭтотОбъект,ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
		Объект.Работники.Очистить();
		Объект.НормыВыдачи.Очистить();
	Иначе
		Объект.Должности.Очистить();
		Объект.НормыВыдачи.Очистить();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботники

&НаКлиенте
Процедура РаботникиПриАктивизацииСтроки(Элемент)
	// Установим текущий ключ связи
	ТекДанные = Элементы.Работники.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекКлючСвязи = 0;
	Иначе 
		ТекКлючСвязи = ТекДанные.КлючСвязи;
	КонецЕсли;
	// Установим отбор по текущему ключу связи
	Элементы.НормыВыдачи.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекКлючСвязи);
	// Если есть связанные строки, то устанавливаем первую строку табличной части активной
	Строки = Объект.НормыВыдачи.НайтиСтроки(Новый Структура("КлючСвязи", ТекКлючСвязи));
	Если Строки.Количество() > 0 Тогда
		Элементы.НормыВыдачи.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.Работники.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("КлючСвязи", ТекДанные.КлючСвязи);
	Строки = Объект.НормыВыдачи.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		ТекстВопроса = "При удалении работника будут удалены связанные строки табличной части ""Нормы выдачи"".
		|Продолжить?";
		Отказ = Истина;	
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура("Отбор, ИдентификаторСтроки, ИмяТаблицы",Отбор,ТекДанные.ПолучитьИдентификатор(),"НормыВыдачи");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаботникиПередУдалением", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиФизЛицоПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		КлючСвязиКопируемый = Элемент.ТекущиеДанные.КлючСвязи;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекКлючСвязи = ПолучитьНовыйКлючСвязи();
		Элемент.ТекущиеДанные.КлючСвязи = ТекКлючСвязи;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Строки = Объект.НормыВыдачи.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиКопируемый));
		Для Каждого ТекСтрока Из Строки Цикл
			НоваяСтрока = Объект.НормыВыдачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "КлючСвязи");
			НоваяСтрока.КлючСвязи = ТекКлючСвязи;
		КонецЦикла;
		
		РаботникиПриАктивизацииСтроки(Элементы.Работники);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ТекДанные = Элементы.Работники.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Отбор = Новый Структура("КлючСвязи", ТекДанные.КлючСвязи);
		
		УдалитьСтрокиТаблицыПоОтбору("НормыВыдачи", Отбор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РаботникиПриАктивизацииСтроки(Элементы.Работники);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Работники,СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДолжности

&НаКлиенте
Процедура ДолжностиПриАктивизацииСтроки(Элемент)
	// Установим текущий ключ связи
	ТекДанные = Элементы.Должности.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекКлючСвязи = 0;
	Иначе 
		ТекКлючСвязи = ТекДанные.КлючСвязи;
	КонецЕсли;
	// Установим отбор по текущему ключу связи
	Элементы.НормыВыдачи.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекКлючСвязи);
	// Если есть связанные строки, то устанавливаем первую строку табличной части активной
	Строки = Объект.НормыВыдачи.НайтиСтроки(Новый Структура("КлючСвязи", ТекКлючСвязи));
	Если Строки.Количество() > 0 Тогда
		Элементы.НормыВыдачи.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.Должности.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("КлючСвязи", ТекДанные.КлючСвязи);
	Строки = Объект.НормыВыдачи.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		ТекстВопроса = "При удалении должности будут удалены связанные строки табличной части ""Нормы выдачи"".
		|Продолжить?";
		Отказ = Истина;	
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура("Отбор, ИдентификаторСтроки, ИмяТаблицы",Отбор,ТекДанные.ПолучитьИдентификатор(),"НормыВыдачи");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДолжностиПередУдалением", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		КлючСвязиКопируемый = Элемент.ТекущиеДанные.КлючСвязи;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекКлючСвязи = ПолучитьНовыйКлючСвязи();
		Элемент.ТекущиеДанные.КлючСвязи = ТекКлючСвязи;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Строки = Объект.НормыВыдачи.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиКопируемый));
		Для Каждого ТекСтрока Из Строки Цикл
			НоваяСтрока = Объект.НормыВыдачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "КлючСвязи");
			НоваяСтрока.КлючСвязи = ТекКлючСвязи;
		КонецЦикла;
		
		ДолжностиПриАктивизацииСтроки(Элементы.Должности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ТекДанные = Элементы.Должности.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Отбор = Новый Структура("КлючСвязи", ТекДанные.КлючСвязи);
		
		УдалитьСтрокиТаблицыПоОтбору("НормыВыдачи", Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДолжностиПриАктивизацииСтроки(Элементы.Работники);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормыВыдачи

&НаКлиенте
Процедура НормыВыдачиПриАктивизацииСтроки(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
		ТекДанные = Элементы.Должности.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.Работники.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.КлючСвязи = 0 Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
			ПоказатьПредупреждение(,"Не выбрана должность!");
			ТекущийЭлемент = Элементы.Должности;
		Иначе
			ПоказатьПредупреждение(,"Не выбран работник!");
			ТекущийЭлемент = Элементы.Работники;
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
		ТекДанные = Элементы.Должности.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.Работники.ТекущиеДанные;
	КонецЕсли;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда 
		Элементы.НормыВыдачи.ТекущиеДанные.КлючСвязи = ТекДанные.КлючСвязи;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачиНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.НормыВыдачи.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьВладельца(ТекДанные, "Номенклатура", "НазначениеИспользования");
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.НазначениеИспользования) Тогда
		ТекДанные.НазначениеИспользования = си_УчетСпецодеждыСервер.ПолучитьОсновноеНазначениеИспользованияНоменклатуры(ТекДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачиНазначениеИспользованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.НормыВыдачи.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Не выбрана номенклатура!");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДолжностиЗаполнитьПоНормамВыдачи(Команда)
	Если Объект.Должности.Количество() > 0 Тогда
		
		ТекстВопроса = "При заполнении табличные части ""Должности"" и ""Нормы выдачи"" будут очищены.
		|Продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеДолжности", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);
	Иначе
		ДолжностиЗаполнитьПоНормамВыдачиНаСервере();
		Если Объект.Должности.Количество() > 0 Тогда
			Элементы.Должности.ТекущаяСтрока = 0;
			ДолжностиПриАктивизацииСтроки(Элементы.Должности);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиОчистить(Команда)
	
	Если Объект.Должности.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличные части ""Должности"" и ""Нормы выдачи"" будут очищены.
		|Продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДолжностиОчистить", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиПодбор(Команда)
	ФормаПодбора = ПолучитьФорму("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаДолжностей()+".ФормаВыбора",,ЭтаФорма);
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
		Отказ = Объект.Должности.Количество()=0;
		Отказ = ?(Отказ,Отказ,Элементы.Должности.ТекущиеДанные = Неопределено);
		
	Иначе
		Отказ = Объект.Работники.Количество()=0;
		Отказ = ?(Отказ,Отказ,Элементы.Работники.ТекущиеДанные = Неопределено);
	КонецЕсли;
	Если Отказ Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран объект для определения норм");
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("НормыВыдачи");
	си_УчетСпецодеждыКлиент.ПодборНоменклатуры(Элементы.НормыВыдачи,УникальныйИдентификатор,ПараметрыПодбора,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзОстатков(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СостояниеМатериалов", ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе"));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторИсточника", УникальныйИдентификатор);
	ФормаПодбора = ПолучитьФорму("ОбщаяФорма.си_ФормаПодбораМатериаловИзОстатков",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура РаботникиЗаполнитьПоНормамВыдачи(Команда)
	Если Объект.Работники.Количество() > 0 Тогда
		
		ТекстВопроса = "При заполнении табличные части ""Работники"" и ""Нормы выдачи"" будут очищены.
		|Продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеРаботники", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);
	Иначе
		РаботникиЗаполнитьПоНормамВыдачиНаСервере();
		Если Объект.Работники.Количество() > 0 Тогда
			Элементы.Работники.ТекущаяСтрока = 0;
			РаботникиПриАктивизацииСтроки(Элементы.Работники);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОчистить(Команда)
	
	Если Объект.Работники.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличные части ""Работники"" и ""Нормы выдачи"" будут очищены.
		|Продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаботникиОчистить", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"';"), Режим, 0);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиПодбор(Команда)
	УчетПоФизЛицам = си_УчетСпецодеждыСервер.ПолучитьВедениеУчетаПоФизЛицам();
	ПараметрыФормы = Новый Структура("РежимВыбора",Истина);
	Если УчетПоФизЛицам Тогда 
		ФормаПодбора = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	Иначе
		ФормаПодбора = ПолучитьФорму("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+?(си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()<>"СотрудникиОрганизаций",".ФормаВыбора",".ФормаСписка"), ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	ФормаПодбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			
			Объект.ВидОперации = Перечисления.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям;
		КонецЕсли;
		
	КонецЕсли;
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.РаботникиФизЛицо);
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.ГруппаСотрудники);
	
	ЭлементСписка = Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Перечисления.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоРаботникам);
	УчетПоФизЛицам = си_УчетСпецодеждыСервер.ПолучитьВедениеУчетаПоФизЛицам();
	ЭлементСписка.Представление = ?(УчетПоФизЛицам, "По физическим лицам","По сотрудникам");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.си_ВидыОперацийУстановкаНормВыдачиСпецодеждыИИнвентаря.ПоДолжностям") Тогда
		Элементы.ГруппаДолжности.Видимость = Истина;
		Элементы.ГруппаСотрудники.Видимость = Ложь;
	Иначе
		Элементы.ГруппаДолжности.Видимость = Ложь;
		Элементы.ГруппаСотрудники.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	АктивизироватьТабличнуюЧасть = общ_ПереопределяемыеПроцедурыБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	общ_ПереопределяемыеПроцедурыБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаРаботникиПередУдалением(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Отбор = Параметры.Отбор;
	ИмяТаблицы = Параметры.ИмяТаблицы;	
	ТекущаяСтрока = Объект.Работники.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Объект.Работники.Удалить(ТекущаяСтрока);
	УдалитьСтрокиТаблицыПоОтбору(ИмяТаблицы,Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДолжностиПередУдалением(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Отбор = Параметры.Отбор;
	ИмяТаблицы = Параметры.ИмяТаблицы;	
	ТекущаяСтрока = Объект.Должности.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Объект.Должности.Удалить(ТекущаяСтрока);
	УдалитьСтрокиТаблицыПоОтбору(ИмяТаблицы,Отбор);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыПоОтбору(Таблица, Отбор)
	си_УчетСпецодеждыСервер.УдалитьСтрокиТаблицыПоОтбору(Объект[Таблица], Отбор);
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйКлючСвязи()
	Таблицы = Новый Массив;
	Таблицы.Добавить(Объект.Работники);
	Таблицы.Добавить(Объект.Должности);
	Возврат си_УчетСпецодеждыСервер.ПолучитьНовыйКлючСвязи(Таблицы);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение, Свойство)
	Возврат Значение[Свойство];
КонецФункции

// Проверяет владельца у подчиненного реквизита.
//
// Параметры:
//  ТекСтрока - строка таблицы, в которой нужно проверить владельца;
//  ИмяКолонкиВладельца - строка - имя колонки владельца;
//  ИмяПроверяемойКолонки - строка - имя проверяемой колонки.
//
&НаКлиенте
Процедура ПроверитьВладельца(ТекСтрока, ИмяКолонкиВладельца, ИмяПроверяемойКолонки)
	
	Если ЗначениеЗаполнено(ТекСтрока[ИмяПроверяемойКолонки]) 
		И ТекСтрока[ИмяКолонкиВладельца] <> ПолучитьСвойство(ТекСтрока[ИмяПроверяемойКолонки],"Владелец") Тогда
		
		ТекСтрока[ИмяПроверяемойКолонки] = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВладельца()

&НаСервере
Процедура ДолжностиЗаполнитьПоНормамВыдачиНаСервере()
	
	Объект.Должности.Очистить();
	Объект.НормыВыдачи.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"     		, Объект.Дата);
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("ПустаяДолжность"	, Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаДолжностей()].ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.Должность КАК Должность,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.СпецодеждаИнвентарь КАК Номенклатура,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.НазначениеИспользования,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.си_НормыОбеспеченностиСпецодеждойИИнвентарем.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Должность <> &ПустаяДолжность) КАК си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних
	|ИТОГИ ПО
	|	Должность";
	
	ВыборкаПоДолжности 						= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Должность");
	
	Пока ВыборкаПоДолжности.Следующий() Цикл
		
		НоваяСтрокаДолжности 				= Объект.Должности.Добавить();
		НоваяСтрокаДолжности.Должность   	= ВыборкаПоДолжности.Должность;
		НоваяСтрокаДолжности.КлючСвязи 		= си_УчетСпецодеждыСервер.ПолучитьНовыйКлючСвязи(Объект.Должности);
		
		Выборка 							= ВыборкаПоДолжности.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока 					= Объект.НормыВыдачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи 			= НоваяСтрокаДолжности.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РаботникиЗаполнитьПоНормамВыдачиНаСервере()
	
	Объект.Работники.Очистить();
	Объект.НормыВыдачи.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"     , Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПустаяДолжность", Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаДолжностей()].ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.Сотрудник КАК Сотрудник,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.СпецодеждаИнвентарь КАК Номенклатура,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.НазначениеИспользования,
	|	си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.си_НормыОбеспеченностиСпецодеждойИИнвентарем.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Должность = &ПустаяДолжность) КАК си_НормыОбеспеченностиСпецодеждойИИнвентаремСрезПоследних
	|ИТОГИ ПО
	|	Сотрудник";
	
	ВыборкаПоФизЛицу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
	
	Пока ВыборкаПоФизЛицу.Следующий() Цикл
		
		НоваяСтрокаРаботника = Объект.Работники.Добавить();
		НоваяСтрокаРаботника.Сотрудник   = ВыборкаПоФизЛицу.Сотрудник;
		НоваяСтрокаРаботника.КлючСвязи = си_УчетСпецодеждыСервер.ПолучитьНовыйКлючСвязи(Объект.Работники);
		
		Выборка = ВыборкаПоФизЛицу.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.НормыВыдачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = НоваяСтрокаРаботника.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // КоманднаяПанель2ЗаполнитьНормамиВыдачи()

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеДолжности(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ДолжностиЗаполнитьПоНормамВыдачиНаСервере();
	Если Объект.Должности.Количество() > 0 Тогда
		Элементы.Должности.ТекущаяСтрока = 0;
		ДолжностиПриАктивизацииСтроки(Элементы.Должности);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДолжностиОчистить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Должности Цикл
		Отбор  = Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи);
		УдалитьСтрокиТаблицыПоОтбору("Должности",Отбор);
	КонецЦикла;
	Объект.Должности.Очистить();	
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРаботникиОчистить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Работники Цикл
		Отбор  = Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи);
		УдалитьСтрокиТаблицыПоОтбору("Работники",Отбор);
	КонецЦикла;
	Объект.Работники.Очистить();	
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеРаботники(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	РаботникиЗаполнитьПоНормамВыдачиНаСервере();
	Если Объект.Работники.Количество() > 0 Тогда
		Элементы.Работники.ТекущаяСтрока = 0;
		РаботникиПриАктивизацииСтроки(Элементы.Работники);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Неопределено);
	ПараметрыФормы.Вставить("Склад"                   , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ТипЦен"                  , Неопределено);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Неопределено);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "НормыВыдачи" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(
	общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("КлючСвязи", ТекКлючСвязи);
		СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		ИначеЕсли СтрокаТовара.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СтрокаТабличнойЧасти.КлючСвязи = ТекКлючСвязи;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
				СтрокаТабличнойЧасти.НазначениеИспользования = си_УчетСпецодеждыСервер.ПолучитьОсновноеНазначениеИспользованияНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТовара.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	общ_ПереопределениеПроцедурБСПКлиент.ФормаОбъекта_ПриОткрытии(ЭтотОбъект,Отказ);

	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		си_УчетСпецодеждыКлиент.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_си_УстановкаНормВыдачиСпецодеждыИИнвентаря", ПараметрыЗаписи, Объект.Ссылка);	
		
КонецПроцедуры

//СтандартныеОбработчикиФормыБСП.Начало


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	//Элементы.Товары.ТолькоПросмотр       = Ложь;
	//Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	//Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	

	//Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

//СтандартныеОбработчикиФормыБСП.Конец

// СтараяБСП

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	общ_ПереопределениеПроцедурБСПСервер.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		общ_ПереопределениеПроцедурБСПКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;	

КонецПроцедуры

// Конец СтараяБСП

#КонецОбласти
