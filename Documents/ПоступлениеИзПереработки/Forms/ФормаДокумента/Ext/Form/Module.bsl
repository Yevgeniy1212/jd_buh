
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	//// Включим предопределенные счета и их субсчета
	//УчетПроизводства.ОграничитьВыборСчетамиПроизводственныхРасходов(Элементы.СчетЗатратБУ);
	//УчетПроизводства.ОграничитьВыборСчетамиПроизводственныхРасходов(Элементы.СчетЗатратНУ, "Налоговый");

	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура");
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	ПараметрыЗаписи.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_ПоступлениеИзПереработки", ПараметрыЗаписи, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено ИЛИ Источник = СчетФактура) Тогда
		
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда				
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
	Иначе
		
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""поступление из переработки"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;

	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПоступлениеИзПереработки.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));	

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);

	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);

	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	
	КонтрагентПриИзмененииНаСервере(Неопределено);
			
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Продукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, НоменклатурнаяГруппа,  Количество, ПлановаяСтоимость, СуммаПлановая, 
		|Спецификация, СчетБУ, СчетНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Продукция.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Продукция.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)
	
	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(Элементы.Продукция.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)
	
	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(Элементы.Продукция.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСчетБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Продукция[" + Элементы.Продукция.ТекущаяСтрока + "].СчетБУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;


	СтрокаТабличнойЧасти.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетБУ));

КонецПроцедуры


&НаКлиенте
Процедура ПродукцияСчетНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Продукция[" + Элементы.Продукция.ТекущаяСтрока + "].СчетНУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");

		Возврат;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги


&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта)
		
	Документы.ПоступлениеИзПереработки.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта);		
		
		ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИспользованныеМатериалы

&НаКлиенте
Процедура ИспользованныеМатериалыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИспользованныеМатериалы[" + Элементы.ИспользованныеМатериалы.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;

	СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, СчетУчетаБУ , СчетУчетаНУ ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ИспользованныеМатериалы.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.ИспользованныеМатериалы.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры


&НаКлиенте
Процедура ИспользованныеМатериалыСчетУчетаНУПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИспользованныеМатериалы[" + Элементы.ИспользованныеМатериалы.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвращенныеМатериалы

&НаКлиенте
Процедура ВозвращенныеМатериалыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура,  Количество, СчетУчетаБУ , СчетУчетаНУ, СчетПередачиБУ, СчетПередачиНУ ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ВозвращенныеМатериалы.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.ВозвращенныеМатериалы.ТекущиеДанные, ДанныеСтрокиТаблицы);


КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;

	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВозвращенныеМатериалы[" + Элементы.ВозвращенныеМатериалы.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;


	СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;

	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВозвращенныеМатериалы[" + Элементы.ВозвращенныеМатериалы.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетПередачиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетПередачиБУ));

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыСчетПередачиБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;

	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетПередачиБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетПередачиБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВозвращенныеМатериалы[" + Элементы.ВозвращенныеМатериалы.ТекущаяСтрока + "].СчетПередачиБУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетПередачиБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;


	СтрокаТабличнойЧасти.СчетПередачиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетПередачиБУ));

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыСчетПередачиНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;

	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТабличнойЧасти.СчетПередачиНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТабличнойЧасти.СчетПередачиНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВозвращенныеМатериалы[" + Элементы.ВозвращенныеМатериалы.ТекущаяСтрока + "].СчетПередачиНУ", "Объект");
		
		СтрокаТабличнойЧасти.СчетПередачиНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УчастникиСовместнойДеятельности

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("ДатаВходящего" , ДатаСчетаФактурыПолученного);
	ДанныеСчетаФактуры.Вставить("НомерВходящего", НомерСчетаФактурыПолученного);
			
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный", ДанныеСчетаФактуры);
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПродукция(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Продукция", НСтр("ru='Продукция'"));
	
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги", НСтр("ru='Услуги'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru='Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧастьТовары("Продукция", НСтр("ru='Продукция'"));

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованныеМатериалы(Команда)
	
	ИзменитьТабличнуюЧастьИспользованныеМатериалы("ИспользованныеМатериалы", НСтр("ru='Использованные материалы'"));

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВозвращенныеМатериалы(Команда)
	
	ИзменитьТабличнуюЧастьВозвращенныеМатериалы("ВозвращенныеМатериалы", НСтр("ru='Возвращенные материалы'"));
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользованныеМатериалыЗаполнитьПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Укажите контрагента'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
		|Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧасти", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыЗаполнитьПоОстаткам(Команда)
		
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Укажите контрагента'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
		|Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиВозвратныеМатериалы", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыЗаполнитьПоСпецификации(Команда)
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
		|Заполнить?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧастиВозвращенныеМатериалы", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ВозвращенныеМатериалы");
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыПодбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвращенныеМатериалы", НСтр("ru='Возвращенные материалы'"));
	
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	     
	ВедетсяУчетПоТоварамОрганизацийБУ   			= НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);

КонецПроцедуры 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция", "Продукция");
	СписокТабличныхЧастей.Добавить("Услуги", 	"Услуги");
	//СписокТабличныхЧастей.Добавить("ИспользованныеМатериалы", "ИспользованныеМатериалы");
	//СписокТабличныхЧастей.Добавить("ВозвращенныеМатериалы",   "ВозвращенныеМатериалы");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.СчетЗатратНУ.Видимость          = Объект.УчитыватьКПН И Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ГруппаИтогиНДС.Видимость        = Объект.УчитыватьНДС;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));

	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость 	= Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.СчетЗатратБУ.Видимость     = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.СчетЗатратНУ.Видимость     = Форма.ПоказыватьВДокументахСчетаУчета И Объект.УчитыватьКПН;
		
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Ложь;
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;  
	
	Элементы.ПродукцияНомерГТД.Видимость 			 = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	Элементы.ВозвращенныеМатериалыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
	Элементы.УслугиСчетУчетаНДС.Видимость = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.УслугиНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	СформироватьЗаголовокСчетаУчета(Форма);
		
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Ложь;
		Элементы.Сделка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Объект.Сделка = Неопределено;
	Объект.УчастникиСовместнойДеятельности.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Ложь;
		Элементы.Сделка.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, ТипЦен, ВедениеВзаиморасчетов");
	
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);
	
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);

	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Если НЕ Параметры.Ключ.Пустая() Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура");
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено);
		Иначе
			Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Ложь;
			Элементы.Сделка.Доступность = Ложь;
		КонецЕсли;
			
		Если  НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(Объект);
		КонецЕсли;
		
		Объект.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
		Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(Объект.СчетЗатратБУ, Объект.Дата, ПланыСчетов.Налоговый.ОсновноеПроизводство);		
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");			
			Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);			
		Иначе			
			Элементы.Сделка.Доступность = Ложь;			
		КонецЕсли;
		
		РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина);
	Иначе
		ЗаполнитьСчетаУчетаНаСервере(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ОбновитьИтоги(ЭтаФорма);
	
	Если Параметры <> Неопределено
		И Параметры.Свойство("ДополнительныеПараметры")
		И ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	    ПерезаполнитьСчетаУчета = ДополнительныеПараметры.Свойство("ПерезаполнитьСчетаУчета") И ДополнительныеПараметры.ПерезаполнитьСчетаУчета;
	Иначе
		ПерезаполнитьСчетаУчета = Ложь;
	КонецЕсли;
	
	Если ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = ДополнительныеПараметры.Свойство("ТолькоСчетаРасчетов") И ДополнительныеПараметры.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
		И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = СтруктураРезультатаВыполнения.Свойство("ТолькоСчетаРасчетов") И СтруктураРезультатаВыполнения.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ЗаполнятьСчетаРасчетов = Ложь, ЗаполнятьСчетаТабЧастей = Ложь)

	Если Объект.Продукция.Количество() > 0 И ЗаполнятьСчетаТабЧастей  Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 И ЗаполнятьСчетаТабЧастей Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если Объект.ИспользованныеМатериалы.Количество() > 0 И ЗаполнятьСчетаТабЧастей  Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИспользованныеМатериалы");
	КонецЕсли;
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 И ЗаполнятьСчетаТабЧастей  Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");
	КонецЕсли;
	
	Если ЗаполнятьСчетаРасчетов Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

		Если Параметры <> Неопределено И Параметры.Свойство("ПерезаполнитьСчетаУчета") И Параметры.ПерезаполнитьСчетаУчета Тогда 
			ТолькоСчетаРасчетов = Параметры.Свойство("ТолькоСчетаРасчетов") И Параметры.ТолькоСчетаРасчетов;
			ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
			Если ПоказыватьВДокументахСчетаУчета Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Продукция.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ИспользованныеМатериалы.Количество() > 0 ИЛИ Объект.ВозвращенныеМатериалы.Количество() > 0; 
	
	ПерезаполнитьСчетаУчета = Ложь;
	ТолькоСчетаРасчетов     = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = НЕ ЕстьЗаполненныетабЧасти;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = Истина;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	ИначеЕсли ПерезаполнитьСчетаУчета Тогда
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			Если ЕстьЗаполненныетабЧасти Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаПослеИзмененияКонтрагента = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> ТекущийКонтрагент;
	ЗаполнитьСчетаПослеИзмененияДоговора    = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ИсходныйДоговор <> Объект.ДоговорКонтрагента;

	Если ЗаполнитьСчетаПослеИзмененияКонтрагента ИЛИ ЗаполнитьСчетаПослеИзмененияДоговора Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
													
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект);
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И (СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента) Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	
	Если  ИмяТаблицы <> "Услуги"  Тогда
		ПараметрыФормы.Вставить("Товар"               , Истина);
	Иначе
		// В списке Услуги может быть и продукция и услуги
		ПараметрыФормы.Вставить("Услуги", Истина);
	КонецЕсли;
	
	Если  ИмяТаблицы = "ВозвращенныеМатериалы"  ИЛИ  ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	Иначе
		ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
		ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"              , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();  
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
	//Если ИмяТаблицы = "Продукция" ИЛИ ИмяТаблицы = "Услуги" Тогда
	//	СписокЗапросов.Добавить("ЦеныНоменклатуры", НСтр("ru = 'Цены номенклатуры'"));
	//КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Спецификация      = УправлениеПроизводствомСервер.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
	
	УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, ДанныеОбъекта.Дата, ДанныеОбъекта.Организация);
	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС") ;
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СчетаУчетаСпискаНоменклатуры = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	Объект.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект.Дата); 	
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, 
	|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ПараметрыОбъекта);

	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			СтруктураОтбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Рассчитать реквизиты табличной части.
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Услуги" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
			КонецЕсли;
			
			Если ИмяТаблицы = "Продукция" Тогда
				УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);

			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда 				
				Если СведенияОНоменклатуре.Услуга Тогда 					
					Если ИмяТаблицы = "Продукция"  ИЛИ  ИмяТаблицы = "ИспользованныеМатериалы" ИЛИ ИмяТаблицы = "ВозвращенныеМатериалы" Тогда 						
						Продолжить; 						
					КонецЕсли;  					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда 						
						Продолжить;    						
					КонецЕсли;     					
				КонецЕсли;  				
			КонецЕсли;
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ИмяТаблицы = "Продукция" Тогда
				Если НЕ ЭтоВставкаИзБуфера ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПлановаяСтоимость) Тогда
					УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Объект.Дата, Объект.Организация);
				КонецЕсли;
			КонецЕсли;
			
			СчетаУчета = СчетаУчетаСпискаНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТаблицы, СчетаУчета, НЕ ЭтоВставкаИзБуфера);
			
			Если ИмяТаблицы = "Услуги" Тогда
											
				Если СведенияОНоменклатуре = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
				
				Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект); 
				Если ЭтоВставкаИзБуфера Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
				КонецЕсли;	
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
				
				Документы.ПоступлениеИзПереработки.ЗаполнитьРеквизитыНалоговогоУчета(Объект, СтрокаТабличнойЧасти, ИмяТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТаблицы = "Продукция" Тогда
			УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена       = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
				
    Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
КонецПроцедуры 

&НаСервере
Процедура ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "ИспользованныеМатериалы", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.ИспользованныеМатериалы.Очистить();
	
	ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиВозвратныеМатериалы(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.ВозвращенныеМатериалы.Очистить();
	
	ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере()
	
	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.СтруктурноеПодразделение, Объект.Ссылка, Объект.Дата);
	
	Объект.ИспользованныеМатериалы.Загрузить(ОстаткиМатериалов);
	
	Для Каждого Строка Из	Объект.ИспользованныеМатериалы Цикл
		Строка.СчетУчетаНУ  =  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Строка.СчетУчетаБУ));
	КонецЦикла;

КонецПроцедуры

// Возвращаемое значение:
// Таблица значений - список материалов, имеющихся у переработчика
&НаСервереБезКонтекста
Функция ОстаткиМатериаловУПереработчика(Организация, Контрагент, СтруктурноеПодразделение, Ссылка, Дата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата",
			Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;

	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Типовой.МатериалыПереданныеВПереработку);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто",   ВидыСубконто);

	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделение = "";		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.Счет,
	|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидыСубконто,
	|			Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
	|				И Субконто1 = &Контрагент) КАК ТиповойОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТиповойОстатки.Счет,
	|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто2 КАК Справочник.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Счет КАК СчетУчетаБУ,
	|	ДанныеРегистра.Номенклатура,
	|	ДанныеРегистра.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ДанныеРегистра.Количество
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ИспользованныеМатериалыЗаполнитьПоСпецификации(Команда)
	
	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
		|Заполнить?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧасти", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ИспользованныеМатериалы");
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ИмяТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|// Таблица документа
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукции.Спецификация КАК Спецификация,
	|	ТаблицаПродукции.Количество   КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТабличнаяЧастьПродукция КАК ТаблицаПродукции
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Таблица продукции
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.Номенклатура                 КАК Номенклатура,
	|	ВТ_ТаблицаДокумента.Спецификация                 КАК Спецификация,
	|	ЕСТЬNULL(СпецификацииНоменклатуры.Количество, 0) КАК КоличествоНаВыходе,
	|	ВТ_ТаблицаДокумента.Количество                   КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаПродукции
	|ИЗ
	|	ВТ_ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО ВТ_ТаблицаДокумента.Спецификация = СпецификацииНоменклатуры.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Количество по каждой спецификации
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПродукции.Спецификация       КАК Спецификация,
	|	ВТ_ТаблицаПродукции.КоличествоНаВыходе КАК КоличествоНаВыходе,
	|	СУММА(ВТ_ТаблицаПродукции.Количество)  КАК КоличествоПродукции
	|ПОМЕСТИТЬ ВТ_КоличествоПоСпецификациям
	|ИЗ
	|	ВТ_ТаблицаПродукции
	|ГДЕ
	|	ВТ_ТаблицаПродукции.Спецификация <> ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Спецификация,
	|	КоличествоНаВыходе
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Основной запрос
	|ВЫБРАТЬ
	|	СоставСпецификации.Номенклатура                  КАК Номенклатура,
	|	СоставСпецификации.Номенклатура.Наименование     КАК НоменклатураНаименование,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ВТ_КоличествоПоСпецификациям.КоличествоНаВыходе = 0
	|				ТОГДА 0
	|			Иначе
	|				ВТ_КоличествоПоСпецификациям.КоличествоПродукции
	|					* СоставСпецификации.Количество
	|					/ ВТ_КоличествоПоСпецификациям.КоличествоНаВыходе
	|		КОНЕЦ
	|	) КАК Количество
	|ИЗ
	|	ВТ_КоличествоПоСпецификациям
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СоставСпецификации
	|		ПО СоставСпецификации.Ссылка = ВТ_КоличествоПоСпецификациям.Спецификация
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставСпецификации.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьПродукция", Объект.Продукция.Выгрузить());
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.ИспользованныеМатериалы.Очистить();
			
	ЗаполнитьПоСпецификацииНаСервере("ИспользованныеМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧастиВозвращенныеМатериалы(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.ВозвращенныеМатериалы.Очистить();
			
	ЗаполнитьПоСпецификацииНаСервере("ВозвращенныеМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыПодбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ИспользованныеМатериалы", НСтр("ru='Материалы'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвращенныеМатериалы", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере()

	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.СтруктурноеПодразделение, Объект.Ссылка, Объект.Дата);
	
	Объект.ВозвращенныеМатериалы.Загрузить(ОстаткиМатериалов);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Документы.ПоступлениеИзПереработки.ЗаполнитьДокументПоСчетФактураПолученный(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);  

	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Продукция.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.ВозвращенныеМатериалы.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьТовары(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
		
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;

	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьИспользованныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиИспользованныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧастиИспользованныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
		
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;

	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьВозвращенныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиВозвращенныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧастиВозвращенныеМатериалы(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
		
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;

	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции


#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаПродукция" Тогда		
		ИмяТаблицы = "Продукция";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";  
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаИспользованныеМатериалы" Тогда		
		ИмяТаблицы = "ИспользованныеМатериалы"; 
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаВозвращенныеМатериалы" Тогда		
		ИмяТаблицы = "ВозвращенныеМатериалы"; 
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Продукция" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НомерГТД");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("ПлановаяСтоимость");	
			СписокСвойств.Добавить("СуммаПлановая");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетБУ");				
			СписокСвойств.Добавить("СчетНУ");
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");		
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("СтатьяЗатрат");	
		КонецЕсли;		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");			
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("СтатьяЗатрат");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");				
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НомерГТД");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("СтатьяЗатрат");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
				СписокСвойств.Добавить("СчетПередачиБУ");	
				СписокСвойств.Добавить("СчетПередачиНУ");	
			КонецЕсли; 			
		КонецЕсли;  
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ПродукцияВставитьСтроки.Доступность				 = Доступность;
	Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.ИспользованныеМатериалыВставитьСтроки.Доступность				  = Доступность;
	Элементы.ИспользованныеМатериалыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	Элементы.ВозвращенныеМатериалыВставитьСтроки.Доступность				  = Доступность;
	Элементы.ВозвращенныеМатериалыКонтекстноеМенюВставитьСтроки.Доступность	  = Доступность;  
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры
