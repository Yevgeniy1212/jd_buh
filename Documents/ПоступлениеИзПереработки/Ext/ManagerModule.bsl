#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре,  ВключаяЗаполненные = Истина) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;     		
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда					
				СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;   			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Продукция" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетБУ) Тогда				
				СтрокаТабличнойЧасти.СчетБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;  			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетБУ) Тогда				
				СтрокаТабличнойЧасти.СчетНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда							
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетПередачиНУ;
			КонецЕсли;  			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ВозвращенныеМатериалы" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетПередачиБУ) Тогда	
				СтрокаТабличнойЧасти.СчетПередачиБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;  			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетПередачиНУ) Тогда	
				СтрокаТабличнойЧасти.СчетПередачиНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;  			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
			КонецЕсли;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетПередачиНУ;
			КонецЕсли;  			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);

КонецПроцедуры

// Заполняет счета расчетов с контрагентом в документе
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

КонецПроцедуры

// Заполняет табличную часть ИспользованныеМатериалы на основании данных табличной части Продукция.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
//
// Параметры:
//  МатериалыЗаказчика - ДокументТабличнаяЧасть.РеализацияУслугПоПереработке.МатериалыЗаказчика - заполняемая табличная часть.
//              Допускается передавать соответствующие данные формы 
//              или таблицу значений со совпадающей структурой.
//  Услуги - ТаблицаЗначений - структура таблицы совпадает со структурой одноименной табличной части
// 
Процедура ЗаполнитьМатериалыПоПродукции(ИспользованныеМатериалы, Продукция, Организация = Неопределено, Дата = Неопределено) Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Продукция", Продукция);
	
	Запрос.Текст = 
	// Исходные данные
	"ВЫБРАТЬ
	|	Продукция.Спецификация,
	|	Продукция.Количество КАК КоличествоПродукции
	|ПОМЕСТИТЬ Выпуск
	|ИЗ
	|	&Продукция КАК Продукция
	|;"
	// Данные о расходе сырья
	+ УправлениеПроизводствомСервер.ТекстЗапросаВременнаяТаблицаЗатратыСырья()
	// Преобразуем в формат получателя
	+ 
	"ВЫБРАТЬ
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Представление КАК НоменклатураПредставление,
	|	СУММА(ЗатратыСырья.Количество) КАК Количество
	|ИЗ
	|	ЗатратыСырья КАК ЗатратыСырья
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПредставление";
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация");
	ДанныеОбъекта.Дата			= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	ДанныеОбъекта.Организация	= Организация;
	ДанныеОбъекта.Реализация	= Истина;
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаМатериала Из ТаблицаМатериалов Цикл
		
		СтрокаТабличнойЧасти = ИспользованныеМатериалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаМатериала);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаМатериала.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "ИспользованныеМатериалы", СведенияОНоменклатуре);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Заполнение

Процедура ЗаполнитьДокументПоСчетФактураПолученный(Объект, Основание) Экспорт
	
	Если Основание.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  
	
	Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Продукция.Очистить();
	Объект.Услуги.Очистить();
	Объект.ИспользованныеМатериалы.Очистить();
	Объект.ВозвращенныеМатериалы.Очистить();
	Объект.УчастникиСовместнойДеятельности.Очистить();
	
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка);
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
		УчестьСуммуНДС = Истина;
	Иначе
		УчестьСуммуНДС = Ложь;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ЗаполнитьРеквизитыНалоговогоУчета(Объект, СтрокаТабличнойЧасти, "Услуги");
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Дата);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СчетаУчета);
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла; 
	
	Объект.ДокументОснование = Основание;
	
	ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоДоверенности(Объект, Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Продукция.Очистить();
	Объект.Услуги.Очистить();
	Объект.ИспользованныеМатериалы.Очистить();
	Объект.ВозвращенныеМатериалы.Очистить();
	Объект.УчастникиСовместнойДеятельности.Очистить();
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Основание);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоверенностьТовары.НаименованиеТовара КАК Номенклатура,
		|	ДоверенностьТовары.Количество КАК Количество,
		|	ДоверенностьТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.Доверенность.Товары КАК ДоверенностьТовары
		|ГДЕ
		|	ДоверенностьТовары.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры,
		|	ВТ_Товары.Количество КАК Количество
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
		|				&Момент,
		|				Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура КАК Номенклатура
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
		|		ПО ВТ_Товары.Номенклатура = ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Товары.НомерСтроки";	
	
	Запрос.УстановитьПараметр("Момент", Дата);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти                  = Объект.Продукция.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Спецификация       = Выборка.СпецификацияНоменклатуры;

		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	
	Объект.ДокументОснование = Основание.Ссылка;
	Объект.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru='Отнесение на затраты услуги по переработке'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СинонимПродукция",				НСтр("ru = 'Продукция'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	Запрос.УстановитьПараметр("ПроизводственныйСчет",	ЭтоПроизводственныйСчет(ТаблицаРеквизиты[0].СчетЗатратБУ));
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);

	ОпределятьСтоимостьПриобретенияПоКурсуАванса    = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ОпределятьСтоимостьПриобретенияПоКурсуАванса",   ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОпределятьСтоимостьПриобретенияПоКурсуАванса, "ОпределятьСтоимостьПриобретенияПоКурсуАванса");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом, "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Налогоплательщик = Реквизиты.Организация;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)			
					+ ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаВыпускПродукцииБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаВыпускПродукцииНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаВозращенныеМатериалы(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПродукцияТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаВозвращенныеМатериалыТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);
					
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги",	      НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеТовары",     НСтр("ru='Оприходованы ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС", НСтр("ru='Выделен НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом",	ВедениеУчетаВременныхРазницБалансовымМетодом);
	Запрос.УстановитьПараметр("ОпределятьСтоимостьПриобретенияПоКурсуАванса", ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	Запрос.УстановитьПараметр("СодержаниеУслуг",	  НСтр("ru = 'Выпуск продукции'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимИспользованныеМатериалы", НСтр("ru = 'Использованные материалы'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимВозращенныеМатериалы", НСтр("ru = 'Возращенные материалы'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВозращенныеМатериалы", НСтр("ru = 'Возврат сырья из переработки'", ОбщегоНазначения.КодОсновногоЯзыка()));


	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаУслуги",                 ПараметрыПроведения.ТаблицаУслуги);
	
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьПродукция) КАК ЕстьПродукция,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьИспользованныеМатериалы) КАК ЕстьИспользованныеМатериалы,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвращенныеМатериалы) КАК ЕстьВозвращенныеМатериалы,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьПродукция,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьИспользованныеМатериалы,
	|		ЛОЖЬ КАК ЕстьВозвращенныеМатериалы,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.Продукция КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.ИспользованныеМатериалы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.ВозвращенныеМатериалы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.НоменклатурнаяГруппа,
	|	Реквизиты.ПодразделениеОрганизации,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПродукция, ЛОЖЬ) КАК ЕстьПродукция,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьИспользованныеМатериалы, ЛОЖЬ) КАК ЕстьИспользованныеМатериалы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвращенныеМатериалы, ЛОЖЬ) КАК ЕстьВозвращенныеМатериалы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.НоменклатурнаяГруппа,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.Содержание,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьПродукция Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаПродукция", НомераТаблиц.Количество());
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПродукция.Ссылка,
		|	ТаблицаПродукция.НомерСтроки,
		|	ТаблицаПродукция.Номенклатура,
		|	ТаблицаПродукция.СчетБУ КАК СчетУчетаБУ,
		|	ТаблицаПродукция.СчетНУ КАК СчетУчетаНУ,
		|	ТаблицаПродукция.Количество,
		|	ТаблицаПродукция.СуммаПлановая,
		|	ТаблицаПродукция.НомерГТД
		|ПОМЕСТИТЬ ТаблицаПродукция
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Продукция КАК ТаблицаПродукция
		|ГДЕ
		|	ТаблицаПродукция.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаПродукция.СчетБУ"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	&Содержание КАК Содержание,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления,
		|	Реквизиты.СчетЗатратБУ,
		|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратБУ1,
		|	Реквизиты.НоменклатурнаяГруппа     КАК СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СтатьяЗатрат		   КАК СубконтоЗатратБУ3,
		|	Реквизиты.СчетЗатратНУ,
		|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратНУ1,
		|	Реквизиты.НоменклатурнаяГруппа     КАК СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СтатьяЗатрат		   КАК СубконтоЗатратНУ3
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|			ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьИспользованныеМатериалы Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаИспользованныеМатериалы", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаМатериалы.Ссылка,
		|	ТаблицаМатериалы.НомерСтроки,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Количество,
		|	ТаблицаМатериалы.СчетУчетаБУ,
		|	ТаблицаМатериалы.СчетУчетаНУ,
		|	ТаблицаМатериалы.СтатьяЗатрат	
		|ПОМЕСТИТЬ ТаблицаИспользованныеМатериалы
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.ИспользованныеМатериалы КАК ТаблицаМатериалы
		|ГДЕ
		|	ТаблицаМатериалы.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвращенныеМатериалы Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвращенныеМатериалы", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаМатериалы.Ссылка,
		|	ТаблицаМатериалы.НомерСтроки,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Количество,
		|	ТаблицаМатериалы.СчетУчетаБУ,
		|	ТаблицаМатериалы.СчетУчетаНУ,
		|	ТаблицаМатериалы.СчетПередачиБУ,
		|	ТаблицаМатериалы.СчетПередачиНУ,
		|	ТаблицаМатериалы.НомерГТД
		|ПОМЕСТИТЬ ТаблицаВозвращенныеМатериалы
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.ВозвращенныеМатериалы КАК ТаблицаМатериалы
		|ГДЕ
		|	ТаблицаМатериалы.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;

	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
		
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Содержание,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.СчетЗатратБУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаУслуги.СчетЗатратНУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ3,
	|	ВременнаяТаблицаУслуги.НДСВидОборота,
	|	ВременнаяТаблицаУслуги.НДСВидПоступления
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС"
	+ ?(Реквизиты.ЕстьУслуги, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуги.СуммаВзаиморасчетов,
	|		ТаблицаУслуги.СуммаНДСВзаиморасчетов,
	|		ТаблицаУслуги.Сумма,
	|		ТаблицаУслуги.СуммаНДС
	|	ИЗ
	|		ТаблицаУслуги КАК ТаблицаУслуги", "") + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.Сумма + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДС
	|	КОНЕЦ КАК СуммаРегл,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьУслуги 	 Тогда 
		ПараметрыПроведения.Вставить("ТаблицаУслуги", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры) КАК ВидКорСубконто2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления,
		|	ТаблицаУслуги.Содержание КАК Содержание
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если  НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаУслуги.НДСВидОборота КАК ВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления КАК ВидОперацииПоступления,
		|   Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)	";		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьПродукцииРеквизиты",Неопределено);
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьПродукцииТаблица",	Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииТаблица"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратБУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратБУ2,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратНУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратНУ2,
	|	ТаблицаПродукция.СчетУчетаБУ КАК СчетБУ,
	|	ТаблицаПродукция.Номенклатура КАК СубконтоБУ1,
	|	Реквизиты.Склад КАК СубконтоБУ2,
	|	Реквизиты.Ссылка КАК СубконтоБУ3,
	|	ТаблицаПродукция.СчетУчетаНУ КАК СчетНУ,
	|	ТаблицаПродукция.Номенклатура КАК СубконтоНУ1,
	|	Реквизиты.Склад КАК СубконтоНУ2,
	|	Реквизиты.Ссылка КАК СубконтоНУ3,
	|	ТаблицаПродукция.Количество   КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК СуммаПлановая,
	|	&СодержаниеУслуг КАК Содержание,
	|	ВЫБОР
	|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
	|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВедетсяПартионныйУчет
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
	|		ПО ТаблицаПродукция.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускПродукцииБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ВыпускПродукцииРеквизитыБУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускПродукцииТаблицаБУ",	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускПродукцииРеквизитыБУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускПродукцииТаблицаБУ",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом  КАК  ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаПродукция.СчетУчетаБУ КАК СчетСписания,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания3,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускПродукцииНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ВыпускПродукцииРеквизитыНУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускПродукцииТаблицаНУ", 	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускПродукцииРеквизитыНУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускПродукцииТаблицаНУ",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом  КАК  ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаПродукция.СчетУчетаНУ КАК СчетСписания,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания3,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьИспользованныеМатериалы Тогда 
		ПараметрыПроведения.Вставить("ТаблицаИспользованныеМатериалы", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаИспользованныеМатериалы",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	""ИспользованныеМатериалы"" КАК ИмяСписка,
		                              |	&СинонимИспользованныеМатериалы КАК СинонимСписка,
		                              |	Реквизиты.Дата КАК Период,
		                              |	ТаблицаИспользованныеМатериалы.НомерСтроки КАК НомерСтроки,
		                              |	ТаблицаИспользованныеМатериалы.СчетУчетаБУ КАК СчетУчетаБУ,
		                              |	ТаблицаИспользованныеМатериалы.СчетУчетаНУ КАК СчетУчетаНУ,
		                              |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		                              |	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		                              |	ТаблицаИспользованныеМатериалы.Номенклатура КАК Номенклатура,
		                              |	Реквизиты.Склад КАК Склад,
		                              |	ТаблицаИспользованныеМатериалы.Количество КАК Количество,
		                              |	0 КАК Себестоимость,
		                              |	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		                              |	0 КАК Сумма,
		                              |	0 КАК КАКСуммаНДС,
		                              |	0 КАК СуммаАкциза,
		                              |	0 КАК СуммаВал,
		                              |	0 КАК СуммаНДСВал,
		                              |	0 КАК СуммаАкцизаВал,
		                              |	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
		                              |	НЕОПРЕДЕЛЕНО КАК СтавкаАкциза,
		                              |	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДС,
		                              |	НЕОПРЕДЕЛЕНО КАК СчетУчетаАкциза,
		                              |	НЕОПРЕДЕЛЕНО КАК НДСВидОперацииРеализации,
		                              |	НЕОПРЕДЕЛЕНО КАК АкцизВидОперацииРеализации,
		                              |	ВЫБОР
		                              |		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL
		                              |				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		                              |			ТОГДА ЛОЖЬ
		                              |		ИНАЧЕ ИСТИНА
		                              |	КОНЕЦ КАК ВедетсяПартионныйУчет,
		                              |	ЛОЖЬ КАК СчетУчетаБУЗабалансовый,
		                              |	Реквизиты.СчетЗатратБУ КАК КорСчетСписанияБУ,
		                              |	ВЫБОР
		                              |		КОГДА &ПроизводственныйСчет
		                              |			ТОГДА Реквизиты.ПодразделениеОрганизации
		                              |		ИНАЧЕ ТаблицаИспользованныеМатериалы.СтатьяЗатрат
		                              |	КОНЕЦ КАК КорСубконтоБУ1,
		                              |	Реквизиты.НоменклатурнаяГруппа КАК КорСубконтоБУ2,
		                              |	ВЫБОР
		                              |		КОГДА &ПроизводственныйСчет
		                              |			ТОГДА ТаблицаИспользованныеМатериалы.СтатьяЗатрат
		                              |		ИНАЧЕ Реквизиты.ПодразделениеОрганизации
		                              |	КОНЕЦ КАК КорСубконтоБУ3,
		                              |	ТаблицаИспользованныеМатериалы.СтатьяЗатрат КАК СтатьяЗатрат,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		                              |	Реквизиты.СчетЗатратНУ КАК КорСчетСписанияНУ,
		                              |	ВЫБОР
		                              |		КОГДА &ПроизводственныйСчет
		                              |			ТОГДА Реквизиты.ПодразделениеОрганизации
		                              |		ИНАЧЕ ТаблицаИспользованныеМатериалы.СтатьяЗатрат
		                              |	КОНЕЦ КАК КорСубконтоНУ1,
		                              |	Реквизиты.НоменклатурнаяГруппа КАК КорСубконтоНУ2,
		                              |	ВЫБОР
		                              |		КОГДА &ПроизводственныйСчет
		                              |			ТОГДА ТаблицаИспользованныеМатериалы.СтатьяЗатрат
		                              |		ИНАЧЕ Реквизиты.ПодразделениеОрганизации
		                              |	КОНЕЦ КАК КорСубконтоНУ3,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		                              |	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		                              |	&СодержаниеСписаныТМЗ КАК Содержание
		                              |ИЗ
		                              |	ТаблицаИспользованныеМатериалы КАК ТаблицаИспользованныеМатериалы
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		                              |		ПО (ИСТИНА)
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		                              |		ПО ТаблицаИспользованныеМатериалы.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		                              |
		                              |УПОРЯДОЧИТЬ ПО
		                              |	ТаблицаИспользованныеМатериалы.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВозращенныеМатериалы(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьВозвращенныеМатериалы Тогда 
		ПараметрыПроведения.Вставить("ТаблицаВозвращенныеМатериалы", Неопределено);
		ПараметрыПроведения.Вставить("ВозвращенныеМатериалыРеквизиты", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ВозвращенныеМатериалыРеквизиты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаВозвращенныеМатериалы", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеквизитыВозвратМатериалов.Ссылка КАК Регистратор,
		|	РеквизитыВозвратМатериалов.Дата КАК Период,
		|	РеквизитыВозвратМатериалов.Организация,
		|	РеквизитыВозвратМатериалов.СтруктурноеПодразделение,
		|	РеквизитыВозвратМатериалов.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	РеквизитыВозвратМатериалов.Контрагент КАК Контрагент,
		|	РеквизитыВозвратМатериалов.ПодразделениеОрганизации КАК Подразделение,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	РеквизитыВозвратМатериалов.ВидУчетаНУ КАК ВидУчетаНУ,
		|	РеквизитыВозвратМатериалов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	&СодержаниеВозращенныеМатериалы КАК Содержание
		|ИЗ
		|	Реквизиты  КАК РеквизитыВозвратМатериалов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимВозращенныеМатериалы КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаВозвращенныеМатериалы.НомерСтроки,
		|	ТаблицаВозвращенныеМатериалы.СчетУчетаБУ,
		|	ТаблицаВозвращенныеМатериалы.СчетУчетаНУ,
		|	ТаблицаВозвращенныеМатериалы.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	Реквизиты.Склад КАК КорСклад,
		|	ТаблицаВозвращенныеМатериалы.Количество КАК Количество,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	0 КАК Себестоимость,
		|	0 КАК Сумма,
		|	0 КАК СуммаВал,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаВозвращенныеМатериалы.СчетПередачиБУ КАК КорСчетСписанияБУ,
		|	ТаблицаВозвращенныеМатериалы.Номенклатура КАК КорСубконтоБУ1,
		|	Реквизиты.Склад КАК КорСубконтоБУ2,
		|	Реквизиты.Ссылка КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ТаблицаВозвращенныеМатериалы.СчетПередачиНУ КАК КорСчетСписанияНУ,
		|	ТаблицаВозвращенныеМатериалы.Номенклатура КАК КорСубконтоНУ1,
		|	Реквизиты.Склад КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВозвращенныеМатериалы КАК ТаблицаВозвращенныеМатериалы
		|		ПО Реквизиты.Ссылка = ТаблицаВозвращенныеМатериалы.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаВозвращенныеМатериалы.НомерСтроки"	
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

		
КонецФункции

Функция ТекстЗапросаПродукцияТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьПродукция  Тогда 
		НомераТаблиц.Вставить("ТаблицаПродукцияТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Продукция"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	Реквизиты.Склад КАК Склад,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаПродукция КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаПродукцияТоварыОрганизаций"	 , Неопределено);		
	
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаВозвращенныеМатериалыТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если  Реквизиты.ЕстьВозвращенныеМатериалы  Тогда 
		НомераТаблиц.Вставить("ТаблицаВозвращенныеМатериалыТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""ВозвращенныеМатериалы"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	Реквизиты.Склад КАК Склад,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаВозвращенныеМатериалы КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаВозвращенныеМатериалыТоварыОрганизаций"	 , Неопределено);		
	
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ЭтоПроизводственныйСчет(ТекСчетЗатрат)  Экспорт

	Если ТекСчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Типовой.ОсновноеПроизводство_)
		ИЛИ ТекСчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_)
		ИЛИ ТекСчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Типовой.ВспомогательныеПроизводства_)
		ИЛИ ТекСчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Типовой.НакладныеРасходы_) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на передачу
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладной";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на передачу'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 52;
	КонецЕсли;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладной";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Накладная на передачу
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьНакладной") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьНакладной",
			НСтр("ru = 'Накладная на передачу'"),
			ПечатьНакладной(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПоступлениеИзПереработки.ПФ_MXL_МХ18");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеИзПереработки.Ссылка,
	|	ПоступлениеИзПереработки.Номер КАК НомерДокумента,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|	ПоступлениеИзПереработки.Контрагент,
	|	ПоступлениеИзПереработки.Организация,
	|	ПоступлениеИзПереработки.СтруктурноеПодразделение,
	|	ПоступлениеИзПереработки.Склад КАК Склад,
	|	ПоступлениеИзПереработки.СчетЗатратБУ КАК КоррСчет,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.НомерДокумента,
	|	ВТ_Доки.ДатаДокумента,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.Склад,
	|	ВТ_Доки.КоррСчет,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ,
	|	ВТ_Доки.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ПоступлениеИзПереработки.Номенклатура.Код КАК ТоварКод,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СУММА(ПоступлениеИзПереработки.Количество) КАК Количество,
	|	СУММА(ПоступлениеИзПереработки.СуммаПлановая) КАК СуммаПлановая,
	|	МИНИМУМ(ПоступлениеИзПереработки.НомерСтроки) КАК НомерСтроки,
	|	ПоступлениеИзПереработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработки.Ссылка,
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ПоступлениеИзПереработки.Номенклатура.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеИзПереработки.ПФ_MXL_МХ18");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент.КлючПараметровПечати = "ПоступлениеИзПереработки_МХ18";
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		
		ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если НЕ Шапка.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
				ОбластьМакета.Параметры.ПредставлениеОрганизации   =  ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
				ОбластьМакета.Параметры.ОрганизацияПоОКПО          =  СведенияОбОрганизации.КодПоОКПО;
			Иначе
				ОбластьМакета.Параметры.ПредставлениеОрганизации   = Шапка.СтруктурноеПодразделение.НаименованиеПолное;
				ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.СтруктурноеПодразделение.КодПоОКПО;
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.СтруктурноеПодразделение;
		Иначе
			Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				ОбластьМакета.Параметры.ПредставлениеПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Иначе			
				ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
			КонецЕсли;
			
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Получатель = Шапка.Склад;
		ОбластьМакета.Параметры.КоррСчет =  Шапка.КоррСчет;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 20;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Страница %1'", КодЯзыка), НомерСтраницы);
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрок.Количество();
		
		Если КоличествоСтрок <= 2 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоКоличествоНаСтранице  = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоКоличество  = 0;
		Ном              = 0;
		ИтогСумма        = 0;
		
		// Выводим многострочную часть докмента
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'"));
					Продолжить;
				КонецЕсли;
				
				Ном           = Ном + 1;
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
					или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоКоличествоНаСтранице  = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Страница %1'", КодЯзыка), НомерСтраницы);
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);
				ОбластьМакета.Параметры.Цена  = ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.СуммаПлановая / ВыборкаСтрокТовары.Количество);
				ОбластьМакета.Параметры.Сумма = ВыборкаСтрокТовары.СуммаПлановая;
				
				Количество  = ВыборкаСтрокТовары.Количество;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				// увеличим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
				ИтогСумма                  = ИтогСумма                  + ВыборкаСтрокТовары.СуммаПлановая;
				// увеличим итоги по дукументу
				ИтогоМассаБрутто = 0;
				ИтогоКоличество  = ИтогоКоличество  + Количество;
				
			КонецЦикла;
		КонецЕсли;
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогМест        = "";
		ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогСуммы       = ИтогСумма;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакета.Параметры.ИтогСуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогСумма, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		// заполняем МОЛ
		
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.Получил = ДанныеМОЛ.Представление;
			ОбластьМакета.Параметры.ДолжностьПолучил = ДанныеМОЛ.Должность;
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура КАК Товар,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Услуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

#КонецЕсли
