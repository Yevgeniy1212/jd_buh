#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета расчетов с контрагентом в шапке документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам 	  = СчетаУчета.СчетАвансов;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаНМА(ДанныеОбъекта.Организация, 
																			СтрокаТабличнойЧасти.НематериальныйАктив, ДанныеОбъекта.Дата);

		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета НМА в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНМА 		  - структура сведений о НМА, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНМА) Экспорт

	Если СведенияОНМА = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНМА.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда 
		Если СтрокаТабличнойЧасти.НематериальныйАктив.ВидНМА = Перечисления.ВидыНМА.Гудвилл Тогда
			СведенияОНМА.СчетУчетаБУ = ПланыСчетов.Типовой.Гудвилл;
		Иначе
			СведенияОНМА.СчетУчетаБУ = ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы;	
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетУчетаБУ  = СведенияОНМА.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	
	СтрокаТабличнойЧасти.СчетУчетаНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));

КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Объект, Основание) Экспорт
	
	Объект.ДокументОснование 	= Основание.Ссылка;
	Объект.ВидОперации  		= Перечисления.ВидыОперацийПоступлениеНМА.Покупка;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Доверенность") Тогда
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);		
		
		//заполним табличную часть
		Для Каждого Строка Из Основание.Товары Цикл
			Если ТипЗнч(Строка.НаименованиеТовара) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
				НоваяСтрока = Объект.НМА.Добавить();
				НоваяСтрока.НематериальныйАктив = Строка.НаименованиеТовара;
				
				НоваяСтрока.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(НоваяСтрока, "НМА", МетаданныеДокумента, Пользователи.ТекущийПользователь());		
				
				ДанныеСтрокиТаблицы = Новый Структура(
					"НематериальныйАктив, Сумма, СтавкаНДС,
					|СуммаНДС, Всего, СчетУчетаБУ,
					|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
					|СчетУчетаНУ"
					);
		
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
	
				ДанныеОбъекта = Новый Структура(
					"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
					|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС, 
					|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
		
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
								
				СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаНМА(ДанныеОбъекта.Организация, 
																			ДанныеСтрокиТаблицы.НематериальныйАктив, ДанныеОбъекта.Дата);

																
				ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, ДанныеСтрокиТаблицы, "НМА", СчетаУчета);
															
				ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, ДанныеСтрокиТаблицы, "НМА");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);

			КонецЕсли;			
		КонецЦикла;   		
		Объект.ДокументОснование = Основание;
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
			ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;  	
		
		Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка);
		
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		
		Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
			УчестьСуммуНДС = Истина;
		Иначе
			УчестьСуммуНДС = Ложь;
		КонецЕсли;

		Для каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл
						
			СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, "НМА", МетаданныеДокумента, Пользователи.ТекущийПользователь());		
			
			ДанныеСтрокиТаблицы = Новый Структура(
								"НематериальныйАктив, Сумма, СтавкаНДС,
								|СуммаНДС, Всего, СчетУчетаБУ,
								|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
								|СчетУчетаНУ"
								);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
			ДанныеОбъекта = Новый Структура(
							"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
							|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС, 
							|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
			
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
			СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаНМА(ДанныеОбъекта.Организация, 
			ДанныеСтрокиТаблицы.НематериальныйАктив, ДанныеОбъекта.Дата);
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, ДанныеСтрокиТаблицы, "НМА", СчетаУчета);
			
			ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, ДанныеСтрокиТаблицы, "НМА");
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
			
			Если УчестьСуммуНДС Тогда
				СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЕсли;

		КонецЦикла;
								
		СчетаУчета 	= УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"						  , ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",	ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());

	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;           	
		
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
       	ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	  		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ОпределятьСтоимостьПриобретенияПоКурсуАванса    = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик       = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОпределятьСтоимостьПриобретенияПоКурсуАванса  , "ОпределятьСтоимостьПриобретенияПоКурсуАванса");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");	
	
	Запрос.УстановитьПараметр("СинонимНМА",	               НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'Выделен НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ОпределятьСтоимостьПриобретенияПоКурсуАванса", ОпределятьСтоимостьПриобретенияПоКурсуАванса);
				
	НомераТаблиц = Новый Структура;
	Запрос.Текст = 	ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		 			+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияНМА(НомераТаблиц)
					;
	         	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаПоступление",  ПараметрыПроведения.ТаблицаПоступление);
	
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("СоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьНМА) КАК ЕстьНМА,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьНМА,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПоступлениеНМА.НМА КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПоступлениеНМА.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПоступлениеНМА"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету,
	|	Реквизиты.ВидОперации
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеНМА КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	СоставДокумента.ЕстьУчастникиСовместнойДеятельности,
	|	СоставДокумента.ЕстьНМА,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету,
	|	Реквизиты.ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	СуммыТаблицыНМА = Результат[НомераТаблиц["СуммыТаблицыНМА"]].Выгрузить();
	УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыНМА, Реквизиты);
	Запрос.УстановитьПараметр("СуммыТаблицыНМА", СуммыТаблицыНМА);
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты);
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаНМА", "ПОМЕСТИТЬ ВременнаяТаблицаНМА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПередачаНМА.Ссылка = &Ссылка", "ПередачаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|НомерСтроки");
	НомераТаблиц.Вставить("СуммыТаблицыНМА", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВременнаяТаблицаНМА.НомерСтроки,
	|	ВременнаяТаблицаНМА.СтавкаНДС,
	|	ВременнаяТаблицаНМА.СуммаВзаиморасчетов,
	|	ВременнаяТаблицаНМА.СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаНМА.Сумма,
	|	ВременнаяТаблицаНМА.СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыНМА.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыНМА.Сумма,
	|	СуммыТаблицыНМА.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыНМА
	|ИЗ
	|	&СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНМА.НомерСтроки,
	|	ВременнаяТаблицаНМА.НематериальныйАктив,
	|	ВременнаяТаблицаНМА.Код,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыНМА.Сумма КАК Сумма,
	|	СуммыТаблицыНМА.СуммаНДС,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов1,
	|	ВременнаяТаблицаНМА.СтавкаНДС,
	|	ВременнаяТаблицаНМА.Состояние,
	|	ВременнаяТаблицаНМА.НДСВидОборота,
	|	ВременнаяТаблицаНМА.НДСВидПоступления,
	|	ВременнаяТаблицаНМА.СчетУчетаНДС,
	|	ВременнаяТаблицаНМА.СчетУчетаБУ,
	|	ВременнаяТаблицаНМА.СчетУчетаНУ
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|		ПО ВременнаяТаблицаНМА.НомерСтроки = СуммыТаблицыНМА.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ВременнаяТаблицаНМА", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК Код,
	|	ТаблицаНМА.Сумма - ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
	|				И НЕ Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаНМА.Сумма - ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
	|				И НЕ Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаНМА.СуммаНДС,
	|	ТаблицаНМА.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаНМА.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Поступил) КАК Состояние,
	|	ТаблицаНМА.НДСВидОборота,
	|	ТаблицаНМА.НДСВидПоступления,
	|	ТаблицаНМА.СчетУчетаНДС,
	|	ТаблицаНМА.СчетУчетаБУ,
	|	ТаблицаНМА.СчетУчетаНУ
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	Документ.ПоступлениеНМА.НМА КАК ТаблицаНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ТаблицаНМА.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаНМА.СчетУчетаБУ = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПоступлениеНМА.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьНМА Тогда
		ПараметрыПроведения.Вставить("ТаблицаПоступление", Неопределено);
	Иначе 		
		НомераТаблиц.Вставить("ТаблицаПоступление", НомераТаблиц.Количество());
		ТекстЗапроса = "ВЫБРАТЬ
		               |	""НМА"" КАК ИмяСписка,
		               |	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
		               |	ТаблицаНМА.НематериальныйАктив,
		               |	ТаблицаНМА.Сумма КАК Сумма,
		               |	ТаблицаНМА.СуммаНДС КАК СуммаНДС,
		               |	ТаблицаНМА.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		               |	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		               |	ТаблицаНМА.СчетУчетаБУ КАК СчетУчетаБУ,
		               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетНачисленияАмортизацииБУ,
		               |	ТаблицаНМА.СчетУчетаНУ КАК СчетУчетаНУ,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Поступление) КАК ВидДвиженияСтоимостиФА
		               |ИЗ
		               |	ТаблицаНМА КАК ТаблицаНМА
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаНМА.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();			
		
	КонецЕсли;
	        	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНМА.СуммаВзаиморасчетов + ТаблицаНМА.СуммаНДСВзаиморасчетов,
	|		ТаблицаНМА.Сумма + ТаблицаНМА.СуммаНДС
	|	ИЗ
	|		ТаблицаНМА КАК ТаблицаНМА) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС 
		ИЛИ  Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	""НМАНДС"" КАК ИмяСписка,
		               |	&СинонимНМА КАК СинонимСписка,
		               |	ТаблицаНМА.НомерСтроки,
		               |	ТаблицаНМА.НематериальныйАктив КАК ТМЗ,
		               |	ТаблицаНМА.СуммаНДС,
		               |	ТаблицаНМА.СуммаНДС КАК УплаченныйНДС,
		               |	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		               |	ТаблицаНМА.СтавкаНДС,
		               |	ТаблицаНМА.Сумма - ВЫБОР
		               |		КОГДА Реквизиты.НДСВключенВСтоимость
		               |			ТОГДА ТаблицаНМА.СуммаНДС
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СуммаБезНДС,
		               |	ТаблицаНМА.НДСВидОборота КАК ВидОборота,
		               |	ТаблицаНМА.НДСВидПоступления КАК ВидОперацииПоступления,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		               |	ТаблицаНМА.СчетУчетаНДС КАК Счет,
		               |	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		               |	НЕОПРЕДЕЛЕНО КАК Субконто3,
		               |	Реквизиты.Контрагент КАК КорСубконто1,
		               |	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		               |	Реквизиты.Ссылка КАК КорСубконто3,
		               |	&СодержаниеВыделенНДС КАК Содержание,
		               |	Реквизиты.ВидВходящегоДокумента,
		               |	Реквизиты.ДатаВходящегоДокумента,
		               |	Реквизиты.НомерВходящегоДокумента
		               |ИЗ
		               |	ТаблицаНМА КАК ТаблицаНМА
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               |		ПО (ИСТИНА)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаНМА.НомерСтроки" 
					   + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
				
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияНМА(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСостоянийНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ТаблицаНМА.Состояние КАК Состояние,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации НМА'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 51;
	КонецЕсли;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Приходная накладная
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьНакладная",
			НСтр("ru = 'Приходная накладная'"),
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПоступлениеНМА.ПФ_MXL_Накладная");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПечатьНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	         
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст ="ВЫБРАТЬ
				  |	ПоступлениеНМА.Номер,
				  |	ПоступлениеНМА.Дата,
				  |	ПоступлениеНМА.Ссылка,
				  |	ПоступлениеНМА.ДоговорКонтрагента,
				  |	ПоступлениеНМА.Контрагент,
				  |	ПоступлениеНМА.Организация,
				  |	ПоступлениеНМА.СтруктурноеПодразделение,
				  |	ПоступлениеНМА.СуммаДокумента,
				  |	ПоступлениеНМА.ВалютаДокумента,
				  |	ПоступлениеНМА.УчитыватьНДС,
				  |	ПоступлениеНМА.СуммаВключаетНДС
				  |ИЗ
				  |	Документ.ПоступлениеНМА КАК ПоступлениеНМА
				  |ГДЕ
				  |	ПоступлениеНМА.Ссылка В(&Ссылка)
				  |АВТОУПОРЯДОЧИВАНИЕ";
				  
	ШапкаДокумента = Запрос.Выполнить().Выбрать();

	ЗапросПоНМА = Новый Запрос();
	ЗапросПоНМА.УстановитьПараметр("Ссылка", МассивОбъектов);
	ЗапросПоНМА.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНМАНМА.НематериальныйАктив,
	|	ПоступлениеНМАНМА.СтавкаНДС,
	|	СУММА(ПоступлениеНМАНМА.Сумма) КАК Сумма,
	|	СУММА(ПоступлениеНМАНМА.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(ПоступлениеНМАНМА.НомерСтроки) КАК НомерСтроки,
	|	ПоступлениеНМАНМА.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНМА.НМА КАК ПоступлениеНМАНМА
	|ГДЕ
	|	ПоступлениеНМАНМА.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНМАНМА.НематериальныйАктив,
	|	ПоступлениеНМАНМА.СтавкаНДС,
	|	ПоступлениеНМАНМА.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = ЗапросПоНМА.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПоступлениеНМА_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеНМА.ПФ_MXL_Накладная", КодЯзыка);
	
	Пока ШапкаДокумента.Следующий() Цикл

		ОбластьМакетаЗаголовок     = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаПоставщик     = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакетаПокупатель    = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакетаШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрока		   = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтого		   = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаИтогоНДС	   = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакетаСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакетаПодписи	   = Макет.ПолучитьОбласть("Подписи");

		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокНМА = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокНМА = Неопределено;
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);

		// Выводим шапку накладной
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ШапкаДокумента.Ссылка, НСтр("ru = 'Накладная'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);

		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ШапкаДокумента.Контрагент, ШапкаДокумента.Дата), "ПолноеНаименование,");
		ОбластьМакетаПоставщик.Параметры.Поставщик				 = ШапкаДокумента.Контрагент;
		ТабДокумент.Вывести(ОбластьМакетаПоставщик);

		ОбластьМакетаПокупатель.Параметры.ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата), "ПолноеНаименование,");
		ОбластьМакетаПокупатель.Параметры.Получатель			  = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакетаПокупатель);

		// Вывести табличную часть
		ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);

		Сумма    = 0;
		СуммаНДС = 0;
		
		Если ВыборкаСтрокНМА <> Неопределено Тогда
		
			Пока ВыборкаСтрокНМА.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокНМА.НематериальныйАктив) Тогда
					ТекстСообщения = НСтр("ru = 'В одной из строк не заполнено значение НМА - строка при печати пропущена.'");
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокНМА);
				ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокНМА.НематериальныйАктив);
				ОбластьМакетаСтрока.Параметры.Количество		= 1;
				ОбластьМакетаСтрока.Параметры.Цена 				= ВыборкаСтрокНМА.Сумма;
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
				Сумма    = Сумма    + ВыборкаСтрокНМА.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокНМА.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;
				
		// Вывести Итого
		ОбластьМакетаИтого.Параметры.ИтогСумма = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакетаИтого);
		
		// Вывести ИтогоНДС
		Если ШапкаДокумента.УчитыватьНДС Тогда
			ОбластьМакетаИтогоНДС.Параметры.ИтогСуммаНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ТекстВТомЧислеНДС							 = НСтр("ru = 'В том числе НДС:'",КодЯзыка);
			ТекстСуммаНДС								 = НСтр("ru = 'Сумма НДС:'",КодЯзыка);
			ОбластьМакетаИтогоНДС.Параметры.НДС			 = ?(ШапкаДокумента.СуммаВключаетНДС, ТекстВТомЧислеНДС, ТекстСуммаНДС);
			ТабДокумент.Вывести(ОбластьМакетаИтогоНДС);
		КонецЕсли;
				
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ШапкаДокумента.СуммаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = НСтр("ru = 'Всего наименований %1 , на сумму %2'",КодЯзыка);
		Если НЕ ВыборкаСтрокНМА = Неопределено Тогда 
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока, ВыборкаСтрокНМА.Количество(), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ШапкаДокумента.ВалютаДокумента));
		КонецЕсли;
		
		ОбластьМакетаСуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		
		ОбластьМакетаСуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ШапкаДокумента.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаСуммаПрописью);
		
		// Вывести подписи
		ОбластьМакетаПодписи.Параметры.Заполнить(ШапкаДокумента);
		ТабДокумент.Вывести(ОбластьМакетаПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;	
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПоступлениеНМА КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.НематериальныйАктив КАК Товар,
	|	ОбрабатываемаяТаблица.НематериальныйАктив.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.ПоступлениеНМА.НМА КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

#КонецЕсли

