////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц(Объект,);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
			
	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность 			 = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	ПараметрыЗаписи.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_ПоступлениеНМА", ПараметрыЗаписи, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""поступление нма"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.НМА.Количество() > 0 Тогда 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;

	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим 	   = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим 	   = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПередачаНМА.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим 	   = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты", ЭтотОбъект, СтруктураРезультатаВыполненияПриИзмененииДаты);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	НовыеПараметры = Новый Массив;
	
	СписокВидовДоговоров.Очистить();
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров.ВыгрузитьЗначения()));
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Истина));
	Иначе 	
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Ложь));
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НМА

&НаКлиенте
Процедура НМАПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.НМА.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
				
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		
		ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("НематериальныйАктив, Сумма, СтавкаНДС,
											|СуммаНДС, Всего, СчетУчетаБУ,
											|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
											|СчетУчетаНУ"
											);
											
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "НМА", ПараметрыОбъекта);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"НематериальныйАктив, Сумма, СтавкаНДС,
		|СуммаНДС, Всего, СчетУчетаБУ,
		|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
		|СчетУчетаНУ"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.НМА.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	НМАНематериальныйАктивПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.НМА.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный");
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
		
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("ДатаВходящего" , ДатаСчетаФактурыПолученного);
	ДанныеСчетаФактуры.Вставить("НомерВходящего", НомерСчетаФактурыПолученного);
			
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный", ДанныеСчетаФактуры);
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)                            	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНМА(Команда)
	
	ИзменитьТабличнуюЧасть("НМА", НСтр("ru='НМА'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Видимость счетов учета
	Элементы.ГруппаСчетаУчета.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.НМАСчетУчетаНДС.Видимость = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.НМАНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
	
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);

	// Счет-фактура
	Если НЕ Параметры.Ключ.Пустая() Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
	
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = НЕ НастройкиПользователя.УчетПоВсемОрганизациям;
	
	ПоказыватьВДокументахСчетаУчета 			 = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	Если Параметры.Ключ.Пустая() Тогда

		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			ТекущийКонтрагент = Неопределено;
		КонецЕсли;
				
		ДоговорКонтрагентаОбработатьИзменение(Неопределено);
		
		Если  НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаРасчетов(Объект);
		КонецЕсли;
		
		Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект,"НМА");
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	ТекущийДокументОснование = Объект.ДокументОснование;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Иначе 		
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
		
	Форма.ИтогиВсегоНДС = Объект.НМА.Итог("СуммаНДС");
	Форма.ИтогиВсего    = Объект.НМА.Итог("Сумма");

	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

// Цены и валюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	
	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПараметрыОткрытия = Неопределено;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ОбновитьИтоги(ЭтаФорма);                                              	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	
	Если Параметры <> Неопределено
		И Параметры.Свойство("ДополнительныеПараметры")
		И ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	    ПерезаполнитьСчетаУчета = ДополнительныеПараметры.Свойство("ПерезаполнитьСчетаУчета") И ДополнительныеПараметры.ПерезаполнитьСчетаУчета;
	Иначе
		ПерезаполнитьСчетаУчета = Ложь;
	КонецЕсли;
	
	Если ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = ДополнительныеПараметры.Свойство("ТолькоСчетаРасчетов") И ДополнительныеПараметры.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаПослеИзмененияКонтрагента = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> ТекущийКонтрагент;
	ЗаполнитьСчетаПослеИзмененияДоговора    = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ИсходныйДоговор <> Объект.ДоговорКонтрагента;

	Если (ЗаполнитьСчетаПослеИзмененияКонтрагента ИЛИ ЗаполнитьСчетаПослеИзмененияДоговора) Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Ложь;
		Элементы.Сделка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	Объект.УчастникиСовместнойДеятельности.Очистить();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ДоговорСовместнойДеятельности, ВедениеВзаиморасчетов");		
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);		
		ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);		
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

		
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И (СтруктураРезультатаВыполнения <> Неопределено
		   И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		   И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента) Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ЗаполнятьСчетаРасчетов = Ложь, ЗаполнятьСчетаТабЧастей = Ложь)
	
	Если Объект.НМА.Количество() > 0 И ЗаполнятьСчетаТабЧастей Тогда
		Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "НМА");
	КонецЕсли;
	
	Если ЗаполнятьСчетаРасчетов Тогда
		Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, СписокТабличныхЧастей = "НМА")

	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "Всего"
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НМАНематериальныйАктивПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаНМА(ДанныеОбъекта.Организация, 
																			СтрокаТабличнойЧасти.НематериальныйАктив, ДанныеОбъекта.Дата);

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НематериальныйАктив) Тогда																		
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, "НМА", МетаданныеДокумента, Пользователи.ТекущийПользователь());		
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		СтрокаТабличнойЧасти.Сумма     = 0;
	КонецЕсли;
																		
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ПоступлениеНМА.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "НМА", СчетаУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта)
		
	Документы.ПоступлениеНМА.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ИзменятьУчетНДС = Истина;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента Тогда
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

// При изменении реквизитов (на клиенте)

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.НМА.Количество() > 0; 
	
	ПерезаполнитьСчетаУчета = Ложь;
	ТолькоСчетаРасчетов     = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = НЕ ЕстьЗаполненныетабЧасти;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = Истина;
	КонецЕсли;
	
	Если ПерезаполнитьСчетаУчета Тогда
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			Если ЕстьЗаполненныетабЧасти Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УчетАгентскогоНДС = УправлениеВзаиморасчетамиСервер.ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(Объект.ВидОперации);
	Если УчетАгентскогоНДС <> Неопределено
	Тогда	
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, Новый Структура("УчетАгентскогоНДС", УчетАгентскогоНДС), СтруктураРезультатаВыполнения);
	Иначе
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина);
	Иначе
		ЗаполнитьСчетаУчетаНаСервере(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.НМА.Очистить();
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
		
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);

	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	                    	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	Документы.ПоступлениеНМА.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

		Если Параметры <> Неопределено И Параметры.Свойство("ПерезаполнитьСчетаУчета") И Параметры.ПерезаполнитьСчетаУчета Тогда 
			ТолькоСчетаРасчетов = Параметры.Свойство("ТолькоСчетаРасчетов") И Параметры.ТолькоСчетаРасчетов;
			ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
			Если ПоказыватьВДокументахСчетаУчета Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПараметрыОткрытияФормыЦеныИВалюта());
		
	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента Тогда			
		Объект.УчитыватьНДС         = Ложь;
		Объект.СуммаВключаетНДС     = Ложь;
		Объект.УчитыватьКПН 		= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	Иначе
		Если Не Объект.УчитыватьНДС Тогда
			Объект.НДСВключенВСтоимость = Ложь;
			Объект.УчитыватьНДС         = Истина;
			Объект.СуммаВключаетНДС     = Истина;
		КонецЕсли;
		Объект.УчитыватьКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Проверить текущий договор
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекущийКонтрагент = Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		ТекущийДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если Объект.УчитыватьНДС Тогда
		
		ТекущийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
		Объект.УчитыватьНДС 	= Ложь;
		Объект.СуммаВключаетНДС = Ложь;
		
		Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
		Для Каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		КонецЦикла;
		
	КонецЕсли;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	ТекущийВидОперации   = Объект.ВидОперации;

КонецПроцедуры

