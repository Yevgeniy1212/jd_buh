#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автозаполнение документа.
//
Процедура Автозаполнение(Объект, ВариантЗаполнения) Экспорт
	
	Объект.ИсполнительныеЛисты.Очистить();
	ОтображатьСтруктурныеПодразделения = ОбщегоНазначенияБК.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		                                                       
		ДанныеРеглУчетаТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.Получатель КАК Получатель,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование КАК ДокументОснование,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток КАК СуммаСборов,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток КАК СуммаПлатежа
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|					&парамДата, 
		|					Организация = &парамОрганизация И 
		|					ДокументОснование.СпособПеречисления = &парамСпособПеречисления" + ?(ОтображатьСтруктурныеПодразделения, " И СтруктурнаяЕдиница = &парамСтруктурноеПодразделение", "") + " И
		|					ПериодВзаиморасчетов = &парамМесяц) КАК ВзаиморасчетыОрганизацийСПолучателямиИЛ
		|ГДЕ
		|	(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток > 0)";
		
		Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
		
		Если ВариантЗаполнения = "Остатки" Тогда
			Запрос.УстановитьПараметр("парамДата", Объект.Дата);
		ИначеЕсли ВариантЗаполнения = "ОстаткиНаКонецМесяца" Тогда
			Запрос.УстановитьПараметр("парамДата", КонецМесяца(Объект.ПериодРегистрации) + 1);
		КонецЕсли;
		
		Если ОтображатьСтруктурныеПодразделения Тогда
			Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", ?(Объект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Объект.Организация, Объект.СтруктурноеПодразделение));
		КонецЕсли;

		Запрос.УстановитьПараметр("парамМесяц", Объект.ПериодРегистрации);
		Запрос.УстановитьПараметр("парамОрганизация", Объект.Организация);
		Запрос.УстановитьПараметр("парамСпособПеречисления", Объект.СпособПеречисления);
		
		Объект.ИсполнительныеЛисты.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры //  Автозаполнение()

// Процедура выполняет расчет суммы перечисления по строкам табличной части.
//
Процедура Рассчитать(Объект, ВариантРасчета) Экспорт
	
	ОтображатьСтруктурныеПодразделения = ОбщегоНазначенияБК.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеречислениеПоИсполнительнымЛиста.Получатель,
	|	ПеречислениеПоИсполнительнымЛиста.ДокументОснование,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток, 0) КАК СуммаСборов,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток, 0) + ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток, 0) КАК СуммаПлатежа
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ПеречислениеПоИсполнительнымЛиста
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
	|									&парамДата, 
	|									Организация = &парамОрганизация " + ?(ОтображатьСтруктурныеПодразделения, " И СтруктурнаяЕдиница = &парамСтруктурноеПодразделение", "") + " И 
	|									ДокументОснование.СпособПеречисления = &парамСпособПеречисления И
	|									ПериодВзаиморасчетов = &парамМесяц) КАК ВзаиморасчетыОрганизацийСПолучателямиИЛ
	|		ПО ПеречислениеПоИсполнительнымЛиста.Получатель = ВзаиморасчетыОрганизацийСПолучателямиИЛ.Получатель
	|		   И ПеречислениеПоИсполнительнымЛиста.ДокументОснование = ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование
	|
	|ГДЕ
	|	ПеречислениеПоИсполнительнымЛиста.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеречислениеПоИсполнительнымЛиста.НомерСтроки";
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Если ВариантРасчета = "НаДатуДокумента" Тогда
		Запрос.УстановитьПараметр("парамДата", Объект.Дата);
	ИначеЕсли ВариантРасчета = "НаКонецМесяца" Тогда
		Запрос.УстановитьПараметр("парамДата", КонецМесяца(Объект.ПериодРегистрации) + 1);
	КонецЕсли;	
	
	Если ОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", ?(Объект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Объект.Организация, Объект.СтруктурноеПодразделение));
	КонецЕсли;

	Запрос.УстановитьПараметр("парамСсылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация", Объект.Организация);
	Запрос.УстановитьПараметр("парамМесяц", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСпособПеречисления", Объект.СпособПеречисления);
	
	Объект.ИсполнительныеЛисты.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры // Рассчитать() 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список на перечисление по ИЛ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаПеречислениеПоИЛ";
	КомандаПечати.Представление = НСтр("ru = 'Список на перечисление по ИЛ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаПеречислениеПоИЛ";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокНаПеречислениеПоИЛ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СписокНаПеречислениеПоИЛ",
			НСтр("ru = 'Список на перечисление по ИЛ'"),
			ПечатьСписокНаПеречислениеПоИЛ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ИЛПеречислениеПолучателям.ПФ_MXL_СписокНаПеречислениеПоИЛ");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СписокНаПеречислениеПоИЛ"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьСписокНаПеречислениеПоИЛ(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ИЛПеречислениеПолучателям_СписокНаПеречислениеПоИЛ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИЛПеречислениеПолучателям.ПФ_MXL_СписокНаПеречислениеПоИЛ", КодЯзыка);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапкаСтрОбщий 		= Макет.ПолучитьОбласть("ШапкаСтр|Общий");
	ОбластьШапкаСтрСборы 		= Макет.ПолучитьОбласть("ШапкаСтр|Сборы");
	
	ОбластьСтрокаОбщий 			= Макет.ПолучитьОбласть("Строка|Общий");
	ОбластьСтрокаСборы	 		= Макет.ПолучитьОбласть("Строка|Сборы");
	
	ОбластьИтогСтраницыОбщий 	= Макет.ПолучитьОбласть("ИтогСтраницы|Общий");
	ОбластьИтогСтраницыСборы 	= Макет.ПолучитьОбласть("ИтогСтраницы|Сборы");
	
	ОбластьПодвалОбщий 			= Макет.ПолучитьОбласть("Подвал|Общий");
	ОбластьПодвалСборы	 		= Макет.ПолучитьОбласть("Подвал|Сборы");
	
	ОбластьПодписи 				= Макет.ПолучитьОбласть("Подписи");
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрокаОбщий);
	ВыводимыеОбласти.Добавить(ОбластьИтогСтраницыОбщий);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТекстЗапросаПоШапке = 
	"ВЫБРАТЬ
	|	ИЛПеречислениеПолучателям.Ссылка,
	|	ИЛПеречислениеПолучателям.Номер КАК НомерДокумента,
	|	ИЛПеречислениеПолучателям.Дата КАК ДатаДокумента,
	|	ИЛПеречислениеПолучателям.Организация,
	|	ИЛПеречислениеПолучателям.СтруктурноеПодразделение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИЛПеречислениеПолучателям.СтруктурноеПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА ИЛПеречислениеПолучателям.СтруктурноеПодразделение.НаименованиеПолное
	|			ИНАЧЕ ИЛПеречислениеПолучателям.Организация.НаименованиеПолное
	|		КОНЕЦ КАК СТРОКА(1000)) КАК НазваниеОрганизации,
	|	ИЛПеречислениеПолучателям.СпособПеречисления,
	|	ИЛПеречислениеПолучателям.ПериодРегистрации,
	|	ИЛПеречислениеПолучателям.Ответственный
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям КАК ИЛПеречислениеПолучателям
	|ГДЕ
	|	ИЛПеречислениеПолучателям.Ссылка В(&МассивОбъектов)";
	
	Запрос.Текст = ТекстЗапросаПоШапке;
	
	// получим данные для печати
	ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
	//ВыборкаПоШапкеДокумента.Следующий();
	
	ТекстЗапросаПоТабЧасти = 
	"ВЫБРАТЬ
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.НаименованиеПолное КАК СТРОКА(1000)) КАК Получатель,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.РНН КАК РННПолучателя,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ИдентификационныйКодЛичности КАК БИНПолучателя,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов КАК СуммаСборов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
	|ГДЕ
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка В(&МассивОбъектов)
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаСборов),
	|	СУММА(СуммаПлатежа)
	|ПО
	|	Ссылка";
	
	Запрос.Текст = ТекстЗапросаПоТабЧасти;
	
	// по работникам
	ВыборкаТабЧасти = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоШапкеДокумента.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ОбластьШапка.Параметры.НомерДокумента  = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапкеДокумента.НомерДокумента, ВыборкаПоШапкеДокумента.Ссылка);
		ОбластьШапка.Параметры.ДатаДокумента   = Формат(ВыборкаПоШапкеДокумента.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ='дд ММММ гггг'");
		
		ОбластьШапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'за [ОписаниеПериода]'", КодЯзыка),
			Новый Структура("ОписаниеПериода", Формат(ВыборкаПоШапкеДокумента.ПериодРегистрации, "Л=" + КодЯзыка + "; ДФ='ММММ гггг'")));
		
		ВключатьСборы = Ложь;
		Если ВыборкаПоШапкеДокумента.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу Тогда
			ОбластьШапка.Параметры.НазначениеПлатежа = НСтр("ru = 'на выдачу денежных средств'", КодЯзыка);
		Иначе 
			ОбластьШапка.Параметры.НазначениеПлатежа = НСтр("ru = 'на перечисление денежных средств'", КодЯзыка);
			ВключатьСборы = Истина;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
			СпособПеречисленияТекст = НСтр("ru = 'Через банк'", КодЯзыка);	
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу Тогда
			СпособПеречисленияТекст = НСтр("ru = 'Через кассу'", КодЯзыка);	
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезПочту Тогда
			СпособПеречисленияТекст = НСтр("ru = 'Через почту'", КодЯзыка);	
		Иначе
			СпособПеречисленияТекст = ВыборкаПоШапкеДокумента.СпособПеречисления;
		КонецЕсли;
		
		ОбластьШапка.Параметры.СпособПеречисления = НРег(СпособПеречисленияТекст);
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		// вспомогательные переменные
		ИтогоПоСтраницеСуммаВзаиморасчетов	= 0;
		ИтогоПоСтраницеСуммаСборов 			= 0;
		ИтогоПоСтраницеСуммаПлатежа 		= 0;
		
		ИтогоСуммаВзаиморасчетов 			= 0;
		ИтогоСуммаСборов 					= 0;
		ИтогоСуммаПлатежа 					= 0;
		
		НомерСтроки = 0;
		
		ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоШапкеДокумента.ДатаДокумента < ДатаПрекращенияВыводаРНН;
		ОбластьШапкаСтрОбщий.Параметры.ТекстРНН_БИН = ?(ВыводитьРНН, НСтр("ru = 'РНН'", КодЯзыка), НСтр("ru = 'БИН / ИИН'", КодЯзыка));
		
		// Первая страница
		ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
		Если ВключатьСборы Тогда
			ТабДокумент.Присоединить(ОбластьШапкаСтрСборы);
		КонецЕсли;
		
		//Цикл печати
		КоличествоСтрок 	= ВыборкаТабЧасти.Количество(); 
		КоличествоСтраниц 	= 1;
		
		ВыборкаТабЧасти.Сбросить();
		
		Если ВыборкаТабЧасти.НайтиСледующий(ВыборкаПоШапкеДокумента.Ссылка) Тогда
			ВыборкаПоТабЧасти = ВыборкаТабЧасти.Выбрать();
		Иначе
			ВыборкаПоТабЧасти = Неопределено;
		КонецЕсли;
		
		Если ВыборкаПоТабЧасти <> Неопределено Тогда
			
			Пока ВыборкаПоТабЧасти.Следующий() Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Тогда
					КоличествоСтраниц = КоличествоСтраниц + 1;
					// конец страницы
					ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаВзаиморасчетов	= ИтогоПоСтраницеСуммаВзаиморасчетов;
					ОбластьИтогСтраницыСборы.Параметры.ИтогоПоСтраницеСуммаСборов			= ИтогоПоСтраницеСуммаСборов;
					ОбластьИтогСтраницыСборы.Параметры.ИтогоПоСтраницеСуммаПлатежа	 		= ИтогоПоСтраницеСуммаПлатежа;
					
					ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
					Если ВключатьСборы Тогда
						ТабДокумент.Присоединить(ОбластьИтогСтраницыСборы);
					КонецЕсли;
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// начинается новая страница
					ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
					Если ВключатьСборы Тогда
						ТабДокумент.Присоединить(ОбластьШапкаСтрСборы);
					КонецЕсли;
					
					ИтогоПоСтраницеСуммаВзаиморасчетов 	= 0;
					ИтогоПоСтраницеСуммаСборов 			= 0;
					ИтогоПоСтраницеСуммаПлатежа		 	= 0;
				КонецЕсли;
				
				// новая строка
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрокаОбщий.Параметры.РНН_БИНПолучателя= ?(ВыводитьРНН, ВыборкаПоТабЧасти.РННПолучателя, ВыборкаПоТабЧасти.БИНПолучателя);
				ОбластьСтрокаОбщий.Параметры.Заполнить(ВыборкаПоТабЧасти);
				ОбластьСтрокаОбщий.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьСтрокаОбщий);
				
				// копим итоги
				ИтогоПоСтраницеСуммаВзаиморасчетов 	= ИтогоПоСтраницеСуммаВзаиморасчетов + ВыборкаПоТабЧасти.СуммаВзаиморасчетов;
				ИтогоПоСтраницеСуммаСборов			= ИтогоПоСтраницеСуммаСборов + ВыборкаПоТабЧасти.СуммаСборов;
				ИтогоПоСтраницеСуммаПлатежа 		= ИтогоПоСтраницеСуммаПлатежа + ВыборкаПоТабЧасти.СуммаПлатежа;
				
				ИтогоСуммаВзаиморасчетов 			= ИтогоСуммаВзаиморасчетов + ВыборкаПоТабЧасти.СуммаВзаиморасчетов;
				ИтогоСуммаСборов					= ИтогоСуммаСборов + ВыборкаПоТабЧасти.СуммаСборов;
				ИтогоСуммаПлатежа 					= ИтогоСуммаПлатежа + ВыборкаПоТабЧасти.СуммаПлатежа;
				
				Если ВключатьСборы Тогда
					
					ОбластьСтрокаСборы.Параметры.СуммаСборов 	= ВыборкаПоТабЧасти.СуммаСборов;
					ОбластьСтрокаСборы.Параметры.СуммаПлатежа 	= ВыборкаПоТабЧасти.СуммаПлатежа;
					ТабДокумент.Присоединить(ОбластьСтрокаСборы);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// итог по последней странице
		Если КоличествоСтраниц > 1 Тогда
			ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаВзаиморасчетов	   = ИтогоПоСтраницеСуммаВзаиморасчетов;
			ОбластьИтогСтраницыСборы.Параметры.ИтогоПоСтраницеСуммаСборов  = ИтогоПоСтраницеСуммаСборов;
			ОбластьИтогСтраницыСборы.Параметры.ИтогоПоСтраницеСуммаПлатежа = ИтогоПоСтраницеСуммаПлатежа;
			
			ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
			Если ВключатьСборы Тогда
				ТабДокумент.Присоединить(ОбластьИтогСтраницыСборы);
			КонецЕсли;
		КонецЕсли;
		
		// итоги в целом
		ОбластьПодвалОбщий.Параметры.ИтогоСуммаВзаиморасчетов = ИтогоСуммаВзаиморасчетов;
		ТабДокумент.Вывести(ОбластьПодвалОбщий);                                  
		Если ВключатьСборы Тогда
			ОбластьПодвалСборы.Параметры.ИтогоСуммаСборов	= ИтогоСуммаСборов;
			ОбластьПодвалСборы.Параметры.ИтогоСуммаПлатежа 	= ИтогоСуммаПлатежа;
			ТабДокумент.Присоединить(ОбластьПодвалСборы);
		КонецЕсли;
		
		// подписи
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапкеДокумента.ДатаДокумента, ВыборкаПоШапкеДокумента.Ответственный.ФизЛицо);
		
		Если НЕ ЗначениеЗаполнено(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность) Тогда
			ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность = НСтр("ru = 'Главный бухгалтер'");
		КонецЕсли;
		
		ОбластьПодписи.Параметры.Заполнить(ОтветЛица);
		ОбластьПодписи.Параметры.ИтогоСуммаПлатежаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаПлатежа, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыка);
		ТабДокумент.Вывести(ОбластьПодписи);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли
