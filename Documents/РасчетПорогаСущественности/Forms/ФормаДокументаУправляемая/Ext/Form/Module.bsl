////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидБазовогоПоказателя), Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
	Объект.ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя[0];	
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидБазовогоПоказателя), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидБазовогоПоказателя), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ 

&НаКлиенте
Процедура ИзменитьПериод(Шаг)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетПорогаСущественности.РасчетПорогаСущественности") Тогда
		Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
			Шаг = Шаг * 3;
			мТекДатаКонца  = КонецКвартала(ДобавитьМесяц(Объект.ДатаНачалаРасчета, Шаг));
			мТекДатаНачала = НачалоКвартала(мТекДатаКонца);
			
			Объект.ДатаНачалаРасчета    = мТекДатаНачала;
			Объект.ДатаОкончанияРасчета = КонецДня(мТекДатаКонца);	
		ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
			мТекДатаКонца  = КонецМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, Шаг));
			мТекДатаНачала = НачалоМесяца(мТекДатаКонца);
			
			Объект.ДатаНачалаРасчета    = мТекДатаНачала;
			Объект.ДатаОкончанияРасчета = КонецДня(мТекДатаКонца);			
		КонецЕсли;

		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетПорогаСущественности.РасчетКонтрольногоПорогаСущественности") Тогда
		Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
			Шаг = Шаг * 3;
			мТекДатаКонца  = КонецКвартала(ДобавитьМесяц(Объект.ДатаНачалаРасчета, Шаг));
			мТекДатаНачала = НачалоКвартала(мТекДатаКонца);
			
			Объект.ДатаНачалаРасчета    = мТекДатаНачала;
			Объект.ДатаОкончанияРасчета = КонецДня(мТекДатаКонца);	
		ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
			мТекДатаКонца  = КонецМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, Шаг));
			мТекДатаНачала = НачалоМесяца(мТекДатаКонца);
			
			Объект.ДатаНачалаРасчета    = мТекДатаНачала;
			Объект.ДатаОкончанияРасчета = КонецДня(мТекДатаКонца);			
		КонецЕсли;
		
	КонецЕсли;
	Объект.Дата = мТекДатаКонца;
	ПоказатьПериод(мТекДатаНачала, мТекДатаКонца);	
		
КонецПроцедуры // ИзменитьПериод()

&НаКлиенте
Процедура ПоказатьПериод(ТекДатаНачала, ТекДатаОкончания)
		
	ПериодСоставленияОтчета = ПоказатьОсновнойПериод(ТекДатаНачала, ТекДатаОкончания);
	
КонецПроцедуры

 //Функция управляет показом в форме периода
&НаКлиенте
Функция ПоказатьОсновнойПериод(ТекДатаНачала, ТекДатаОкончания) Экспорт

	СтрПериодОтчета = ПредставлениеПериода(ТекДатаНачала, ТекДатаОкончания, "ФП = истина");
    Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьОсновнойПериод()

&НаКлиенте
Функция ВернутьМесяцВСтроке(Дата)
	
	МесяцДаты = Число(Месяц(Дата));
	
	Если МесяцДаты>9 Тогда
		Возврат Строка(МесяцДаты); 
	Иначе
		Возврат "0"+Строка(МесяцДаты)
	КонецЕсли;
	
КонецФункции

// Возвращает значение запрашиваемого параметра по имени
//
// Параметры:
//  Имя - Строка - имя параметра
//  Пар - в данную переменную помещается ссылка на строку ТЧ ЗапрашиваемыеПараметры
//
// Возвращаемое значение:
//  Значение параметра
&НаСервере
Функция ПолучитьЗначениеПараметра(Имя, Пар = Неопределено)

	Если СокрЛП(Имя) = "" Тогда
		Возврат Неопределено
	КонецЕсли;

	Для каждого Параметр Из Объект.ЗапрашиваемыеПараметры Цикл

		Если Параметр.Имя = Имя Тогда
			Возврат Параметр.Значение
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Формирует проводки на основании типовой операции, после заполнения
// пользователем значений параметров
//
// Параметры:
//  ТаблицаПараметров - ТаблицаЗначений с колонками соответствующими реквизитам
//						ТЧ ЗапрашиваемыеПараметры
&НаСервере
Процедура ЗаполнитьПоТО(ТаблицаПараметров)

	Если ТаблицаПараметров = Неопределено Тогда
		Возврат
	КонецЕсли;

	Объект.ЗапрашиваемыеПараметры.Загрузить(ТаблицаПараметров);

КонецПроцедуры

// Перезаполняет ТЧ ЗапрашиваемыеПараметры на основании типовой операции.
// Введенные пользователем значения парамтеров при этом сохраняются
//
&НаСервере
Процедура ОбновитьПараметры()

	ТаблицаЗначений = Объект.ЗапрашиваемыеПараметры.Выгрузить();
	Объект.ЗапрашиваемыеПараметры.Очистить();

	Для каждого Параметр Из Объект.ЗапрашиваемыеПараметры Цикл
		Стр = ТаблицаЗначений.Найти(Параметр.Имя, "Имя");
		Если Стр = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Параметр.Значение = Стр.Значение;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДанныеПС(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ПроцентИПСДляОперацийИСверокВГО) ИЛИ НЕ ЗначениеЗаполнено(Объект.ПроцентОПСДляОпераций) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПроцентОПСДляСверокВГО) Тогда
		Сообщить("Укажите проценты для расчета порогов существенности!");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.СуммаИсходныхДанных) или НЕ ЗначениеЗаполнено(Объект.СреднемесячныйПоказатель) Тогда
		Сообщить("Произведите расчет исходных данных!");
	КонецЕсли;
	
	Объект.ОПСДляОпераций  = Объект.СреднемесячныйПоказатель * Объект.ПроцентОПСДляОпераций /100;
	Объект.ОПСДляСверокВГО = Объект.СреднемесячныйПоказатель * Объект.ПроцентОПСДляСверокВГО/100;
	Объект.ИПСДляОпераций  = Объект.ОПСДляОпераций  * Объект.ПроцентИПСДляОперацийИСверокВГО/100;
	Объект.ИПСДляСверокВГО = Объект.ОПСДляСверокВГО * Объект.ПроцентИПСДляОперацийИСверокВГО/100;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПорогСущественности()
	
	СчетаПорогаСущественности = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетаПорогаСущественностиСрезПоследних.Счет КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаПорогаСущественности.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ВидБазовогоПоказателя = &ВидБазовогоПоказателя) КАК СчетаПорогаСущественностиСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаПорогаСущественностиСрезПоследних.Счет.Код";
	Запрос.УстановитьПараметр("Период"     , Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидБазовогоПоказателя", Объект.ВидБазовогоПоказателя);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СчетаПорогаСущественности.Добавить(Выборка.Счет);			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат СчетаПорогаСущественности;
	
КонецФункции

&НаСервере
Функция ПолучитьИсключениеСчетовПорогаСущественности()
	
	ИсключениеСчетовПорогаСущественности = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсключенияСчетовПорогаСущественностиСрезПоследних.Счет КАК Счет
	               |ИЗ
	               |	РегистрСведений.ИсключенияСчетовПорогаСущественности.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ВидБазовогоПоказателя = &ВидБазовогоПоказателя) КАК ИсключенияСчетовПорогаСущественностиСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИсключенияСчетовПорогаСущественностиСрезПоследних.Счет.Код";
	Запрос.УстановитьПараметр("Период"     , Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидБазовогоПоказателя", Объект.ВидБазовогоПоказателя);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИсключениеСчетовПорогаСущественности.Добавить(Выборка.Счет);			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ИсключениеСчетовПорогаСущественности;
	
КонецФункции

&НаСервере
Функция ПолучитьСуммы(СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности)
	
	СуммаОстаток = Неопределено;
	
	Запрос = Новый Запрос ("ВЫБРАТЬ
	|	СУММА(ТиповойОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(ТиповойОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	СУММА(ТиповойОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, , , Организация = &Организация) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.Счет В(&СчетаПорогаСущественности)
	|	И (НЕ ТиповойОстатки.Счет В (&ИсключениеСчетовПорогаСущественности))");
	Запрос.УстановитьПараметр("Период",      Объект.ДатаОкончанияРасчета);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетаПорогаСущественности", СчетаПорогаСущественности);
	Запрос.УстановитьПараметр("ИсключениеСчетовПорогаСущественности", ИсключениеСчетовПорогаСущественности);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаОстаток = Выборка.СуммаОстаток;			
	КонецЕсли;
	
	Возврат СуммаОстаток;
	
КонецФункции

&НаСервере
Функция СуммаОборотыКт(ДатаНач, ДатаКон, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОбороты.СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В (&СчетаПорогаСущественности)
	               |				И (НЕ Счет В (&ИсключениеСчетовПорогаСущественности)),
	               |			,
	               |			Организация = &Организация,
	               |			,
	               |			) КАК ТиповойОбороты";
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетаПорогаСущественности", СчетаПорогаСущественности);
	Запрос.УстановитьПараметр("ИсключениеСчетовПорогаСущественности", ИсключениеСчетовПорогаСущественности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СуммаОборотКт;
	
КонецФункции

&НаКлиенте
Процедура РасчетСуммыИсходныхДанных(Команда)

	СчетаПорогаСущественности = ПолучитьПорогСущественности();
	Если СчетаПорогаСущественности.Количество() = 0 Тогда
		Сообщить("Не найдены счета для вычисления порога существенности!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	ИсключениеСчетовПорогаСущественности = ПолучитьИсключениеСчетовПорогаСущественности();
	
	// на данном этапе нужно ли разделять на вид опрерации или он должен учитываться только в проведении?
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетПорогаСущественности.РасчетПорогаСущественности") Тогда
		// это будут данные для текущего периода
		
		СуммаОстаток = ПолучитьСуммы(СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
		
		Если Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.ВеличинаТекущихАктивов") Тогда
			Если СуммаОстаток <> Неопределено Тогда
				Объект.СуммаИсходныхДанных = СуммаОстаток + Объект.ДополнительнаяСумма;
				Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных/12;
			Иначе
			    Предупреждение("За данный период нет данных!")
			КонецЕсли;
		ИначеЕсли Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.СобственныйКапитал") Тогда
			Если СуммаОстаток <> Неопределено Тогда
				Объект.СуммаИсходныхДанных = -СуммаОстаток + Объект.ДополнительнаяСумма;
				Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных/12;
			Иначе
			    Предупреждение("За данный период нет данных!")
			КонецЕсли;
		ИначеЕсли Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.ВыручкаОтРеализации") Тогда
			ДатаНачалаПредыдущегоПериода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -12));
			ДатаКонцаПредыдущегоПериода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -12));
			Если Объект.ПериодРасчетаПорогаСущественности    = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
				ДатаНачалаПредПредыдущегоПериода      = НачалоМесяца(ДобавитьМесяц(ДатаНачалаПредыдущегоПериода, -1));
				ДатаКонцаПредПредыдущегоПериода       = КонецМесяца(ДобавитьМесяц(ДатаКонцаПредыдущегоПериода, -1));
				ДатаНачалаПредыдущегоПериодаЭтогоГода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -1));
				ДатаКонцаПредыдущегоПериодаЭтогоГода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -1));
			ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
				ДатаНачалаПредПредыдущегоПериода      = НачалоМесяца(ДобавитьМесяц(ДатаНачалаПредыдущегоПериода, -3));
				ДатаКонцаПредПредыдущегоПериода       = КонецМесяца(ДобавитьМесяц(ДатаКонцаПредыдущегоПериода, -3));
				ДатаНачалаПредыдущегоПериодаЭтогоГода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -3));
				ДатаКонцаПредыдущегоПериодаЭтогоГода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -3));
			КонецЕсли;
			
			ОборотПредПредыдущегоПериода      = СуммаОборотыКт(ДатаНачалаПредПредыдущегоПериода, ДатаКонцаПредПредыдущегоПериода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотПредыдущегоПериода          = СуммаОборотыКт(ДатаНачалаПредыдущегоПериода, ДатаКонцаПредыдущегоПериода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотПредыдущегоПериодаЭтогоГода = СуммаОборотыКт(ДатаНачалаПредыдущегоПериодаЭтогоГода , ДатаКонцаПредыдущегоПериодаЭтогоГода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотТекущегоПериода             = СуммаОборотыКт(Объект.ДатаНачалаРасчета , Объект.ДатаОкончанияРасчета, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			
			Если Объект.ИспользоватьДанныеПредыдущегоПериода Тогда
				КорректирующийПоказатель = ((ОборотПредыдущегоПериодаЭтогоГода - ОборотПредПредыдущегоПериода)/ОборотПредПредыдущегоПериода)*100;
				ЗначениеБазовогоПоказателя = ОборотПредыдущегоПериода + (ОборотПредыдущегоПериода * КорректирующийПоказатель)/100;
				Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
					Объект.СуммаИсходныхДанных = ЗначениеБазовогоПоказателя + Объект.ДополнительнаяСумма;
					Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных;	
				ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
					Объект.СуммаИсходныхДанных = ЗначениеБазовогоПоказателя + Объект.ДополнительнаяСумма;
					Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных / 3;
				КонецЕсли;
			Иначе
				Если Месяц(Объект.ДатаНачалаРасчета) > 1 Тогда // не первый месяц и квартал - берем предыдущий период этого года
					Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
						Объект.СуммаИсходныхДанных      = ОборотПредыдущегоПериодаЭтогоГода + Объект.ДополнительнаяСумма;
						Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных;	
					ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
						Объект.СуммаИсходныхДанных      = ОборотПредыдущегоПериодаЭтогоГода + Объект.ДополнительнаяСумма;
						Объект.СреднемесячныйПоказатель = Объект.СуммаИсходныхДанных / 3;
					КонецЕсли;	
				Иначе
					Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
						СуммаИсходныхДанных = ОборотТекущегоПериода + Объект.ДополнительнаяСумма;
						СреднемесячныйПоказатель = СуммаИсходныхДанных;	
					ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
						СуммаИсходныхДанных = ОборотТекущегоПериода + Объект.ДополнительнаяСумма;
						СреднемесячныйПоказатель = СуммаИсходныхДанных / 3;
					КонецЕсли;					
				КонецЕсли;				
			КонецЕсли;		
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетПорогаСущественности.РасчетКонтрольногоПорогаСущественности") Тогда
		// тот же запрос, на всякий случай для будущего
		// это будут данные для текущего периода
		СуммаОстаток = ПолучитьСуммы(СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
		
		Если Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.ВеличинаТекущихАктивов") Тогда
			Если СуммаОстаток <> Неопределено Тогда
				СуммаИсходныхДанных = СуммаОстаток + Объект.ДополнительнаяСумма;
				СреднемесячныйПоказатель = СуммаИсходныхДанных/12;
			Иначе
			    Предупреждение("За данный период нет данных!")
			КонецЕсли;
		ИначеЕсли Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.СобственныйКапитал") Тогда
			Если СуммаОстаток <> Неопределено Тогда
				СуммаИсходныхДанных = -СуммаОстаток + Объект.ДополнительнаяСумма;
				СреднемесячныйПоказатель = СуммаИсходныхДанных/12;
			Иначе
			    Предупреждение("За данный период нет данных!")
			КонецЕсли;
		ИначеЕсли Объект.ВидБазовогоПоказателя = ПредопределенноеЗначение("Перечисление.ВидБазовогоПоказателя.ВыручкаОтРеализации") Тогда
			ДатаНачалаПредыдущегоПериода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -12));
			ДатаКонцаПредыдущегоПериода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -12));
			Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
				ДатаНачалаПредПредыдущегоПериода      = НачалоМесяца(ДобавитьМесяц(ДатаНачалаПредыдущегоПериода, -1));
				ДатаКонцаПредПредыдущегоПериода       = КонецМесяца(ДобавитьМесяц(ДатаКонцаПредыдущегоПериода, -1));
				ДатаНачалаПредыдущегоПериодаЭтогоГода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -1));
				ДатаКонцаПредыдущегоПериодаЭтогоГода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -1));
			ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
				ДатаНачалаПредПредыдущегоПериода      = НачалоМесяца(ДобавитьМесяц(ДатаНачалаПредыдущегоПериода, -3));
				ДатаКонцаПредПредыдущегоПериода       = КонецМесяца(ДобавитьМесяц(ДатаКонцаПредыдущегоПериода, -3));
				ДатаНачалаПредыдущегоПериодаЭтогоГода = НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаРасчета, -3));
				ДатаКонцаПредыдущегоПериодаЭтогоГода  = КонецМесяца(ДобавитьМесяц(Объект.ДатаОкончанияРасчета, -3));
			КонецЕсли;
			
			ОборотПредПредыдущегоПериода      = СуммаОборотыКт(ДатаНачалаПредПредыдущегоПериода, ДатаКонцаПредПредыдущегоПериода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотПредыдущегоПериода          = СуммаОборотыКт(ДатаНачалаПредыдущегоПериода, ДатаКонцаПредыдущегоПериода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотПредыдущегоПериодаЭтогоГода = СуммаОборотыКт(ДатаНачалаПредыдущегоПериодаЭтогоГода , ДатаКонцаПредыдущегоПериодаЭтогоГода, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			ОборотТекущегоПериода             = СуммаОборотыКт(Объект.ДатаНачалаРасчета , Объект.ДатаОкончанияРасчета, СчетаПорогаСущественности, ИсключениеСчетовПорогаСущественности);
			
			Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
				СуммаИсходныхДанных      = ОборотТекущегоПериода + Объект.ДополнительнаяСумма;
				СреднемесячныйПоказатель = СуммаИсходныхДанных;	
			ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
				СуммаИсходныхДанных      = ОборотТекущегоПериода + Объект.ДополнительнаяСумма;
				СреднемесячныйПоказатель = СуммаИсходныхДанных / 3;
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийПериод(Команда)
	ИзменитьПериод(-1);
КонецПроцедуры

&НаКлиенте
Процедура СледующийПериод(Команда)
	ИзменитьПериод(1);
КонецПроцедуры

&НаСервере
Функция УстановитьРеквизитыИзНастроекМетодаНачисления()
	
	Отбор = Новый Структура("Организация", Объект.Организация);
	НастройкиМетодаНачисления = РегистрыСведений.НастройкиМетодаНачисления.ПолучитьПоследнее(Объект.Дата, Отбор);
	Объект.ПериодРасчетаПорогаСущественности = НастройкиМетодаНачисления.ПериодРасчетаПорогаСущественности;
	Объект.ВидБазовогоПоказателя = НастройкиМетодаНачисления.ВидБазовогоПоказателя;
	Объект.ИспользоватьДанныеПредыдущегоПериода = НастройкиМетодаНачисления.ИспользоватьДанныеПредыдущегоПериода;
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРасчетаПорогаСущественности) ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидБазовогоПоказателя) Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ
		Объект.ДатаСозданияДокумента = ТекущаяДата();
		
		Если НЕ УстановитьРеквизитыИзНастроекМетодаНачисления() Тогда
			Сообщить("Заполните настройки для расчета порога существенности в ""Настройки метода начисления""!", СтатусСообщения.Важное);
		КонецЕсли;
		Если Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Квартал") Тогда
			мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
			
			Объект.ДатаНачалаРасчета    = НачалоКвартала(Объект.ДатаСозданияДокумента);
			Объект.ДатаОкончанияРасчета = КонецКвартала(Объект.ДатаНачалаРасчета);
			
			мТекДатаКонца  = Объект.ДатаОкончанияРасчета;
			мТекДатаНачала = Объект.ДатаНачалаРасчета;
			
			Объект.Дата = мТекДатаКонца;
		ИначеЕсли Объект.ПериодРасчетаПорогаСущественности = ПредопределенноеЗначение("Перечисление.ПериодРасчетаПорогаСущественности.Месяц") Тогда
			мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
			
			Объект.ДатаНачалаРасчета    = НачалоМесяца(Объект.ДатаСозданияДокумента);
			Объект.ДатаОкончанияРасчета = КонецМесяца(Объект.ДатаНачалаРасчета);
			
			мТекДатаКонца  = Объект.ДатаОкончанияРасчета;
			мТекДатаНачала = Объект.ДатаНачалаРасчета;
			
			Объект.Дата = мТекДатаКонца;
		КонецЕсли;
		
		ПоказатьПериод(мТекДатаНачала, мТекДатаКонца);
	Иначе
		ПоказатьПериод(Объект.ДатаНачалаРасчета, Объект.ДатаОкончанияРасчета);
	КонецЕсли;	
	
	мВидОперации = Объект.ВидОперации;
	
	НадписьВидБазовогоПоказателя         = "Вид базового показателя: " + Объект.ВидБазовогоПоказателя;
	НадписьПериодРасчетаПС               = "Период расчета порога существенности (" + Объект.ПериодРасчетаПорогаСущественности+"):";
	НадписьИспользоватьДанныеПредПериода = "Использовать данные предыдущего периода: " + Объект.ИспользоватьДанныеПредыдущегоПериода;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьКорректностьПроводокНаСервере();
	
	Если НЕ ТаблицаНекорректныхПроводок.Количество() = 0 Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не записан. Обнаружены некорректные корреспонденции!'"));
        ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТаблицаКорреспонденций", ТаблицаНекорректныхПроводок);
		ОткрытьФорму("РегистрСведений.КорректныеКорреспонденцииСчетов.Форма.ФормаСпискаКорреспонденций", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	КонецЕсли;  
	
КонецПроцедуры

//вместо процедуры при записи
&НаСервере
Процедура ПроверитьКорректностьПроводокНаСервере()
	
	Если НЕ	ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "КонтрольКорреспонденцииСчетов") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНекорректныхПроводок.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяСсылка",   ПланыСчетов.Типовой.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("СсылкаНаЭтотДокумент", Объект.Ссылка); 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Типовой.СчетДт,
	|	Типовой.СчетКт,
	|	Типовой.СчетДт.Код КАК КодДт,
	|	Типовой.СчетКт.Код КАК КодКт,
	|	Типовой.Содержание КАК Комментарий,
	|	СУММА(1) КАК ВесПроводки	
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Типовой.СчетДт КАК СчетДт,
	|			Типовой.СчетКт КАК СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой КАК Типовой
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Типовой.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И Типовой.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ
	|			Типовой.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Типовой.СчетДт,
	|			Типовой.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой КАК Типовой
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Типовой.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И (КорректныеКорреспонденцииСчетов.СчетКт = &ПустаяСсылка)
	|		ГДЕ
	|			Типовой.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Типовой.СчетДт,
	|			Типовой.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой КАК Типовой
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО (КорректныеКорреспонденцииСчетов.СчетДт = &ПустаяСсылка) И Типовой.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ 
	|			Типовой.Регистратор = &СсылкаНаЭтотДокумент) КАК Проверенные
	|		ПО Проверенные.СчетКт = Типовой.СчетКт И Проверенные.СчетДт = Типовой.СчетДт
	|ГДЕ
	|	((Проверенные.СчетКт) ЕСТЬ NULL ) И
	|	Типовой.Регистратор = &СсылкаНаЭтотДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Типовой.СчетДт,
	|	Типовой.СчетКт,
	|	Типовой.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДт,
	|	КодКт";

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;		
		ТаблицаНекорректныхПроводок.Загрузить(Результат.Выгрузить());	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидБазовогоПоказателя), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры





