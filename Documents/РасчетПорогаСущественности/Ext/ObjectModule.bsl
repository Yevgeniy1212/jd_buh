Перем мВалютаРегламентированногоУчета;
Перем мКэшСоответствиеСчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Производит замену предопределенных конструкций в формульном выражении
// К формульным конструкциям относятся выражения типа:  Проводка1.СубконтоДт1
//
// Параметры:
//  Формула  - Строка формулы
//  Проводки - ссылка на текущий набор записей регистра бухгалтерии
//
// Возвращаемое значение:
//  Строка - преобразованное формульное выражение
//
Функция ЗаменитьПараметры(Формула, Проводки)

	Для каждого Пров Из Проводки Цикл

		Ном = 1 + Проводки.Индекс(Пров);

		// Субконто Дт
		Если Не Пров.СчетДт.Пустая() Тогда

			ВидыСубконто =Пров.СчетДт.ВидыСубконто;
			Для Каждого Стр Из ВидыСубконто Цикл

				ИндСубк = ВидыСубконто.Индекс(Стр);
				Что     = "Проводка" + Ном + ".СубконтоДт" + (ИндСубк+1);
				НаЧто   = "Проводки[" + (Ном-1) + "].СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НайтиПоКоду(""" + Стр.ВидСубконто.Код + """)]";
				Формула = СтрЗаменить(Формула, Что, НаЧто);

			КонецЦикла;

		КонецЕсли;

		// Субконто Кт
		Если Не Пров.СчетКт.Пустая() Тогда

			ВидыСубконто =Пров.СчетКт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИндСубк = ВидыСубконто.Индекс(Стр);
				Что     = "Проводка" + Ном + ".СубконтоКт" + (ИндСубк+1);
				НаЧто   = "Проводки[" + (Ном-1) + "].СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НайтиПоКоду(""" + Стр.ВидСубконто.Код + """)]";
				Формула = СтрЗаменить(Формула, Что, НаЧто);

			КонецЦикла;

		КонецЕсли;

		// остальные поля
		Что     = "Проводка" + Ном;
		НаЧто   = "Проводки[" + (Ном-1) + "]";
		Формула = СтрЗаменить(Формула, Что, НаЧто);

	КонецЦикла;

	Возврат(Формула);

КонецФункции // ЗаменитьПараметры()

// Разбирает строку на две части: до подстроки разделителя и после
//
// Параметры:
//  Стр            - разбираемая строка
//  Разделитель    - подстрока-разделитель
//  Режим          - 0 - разделитель в возвращаемые подстроки не включается
//                   1 - разделитель включается в левую подстроку
//                   2 - разделитель включается в правую подстроку
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть      = "";
	ПозРазделителя   = Найти(Стр, Разделитель);
	ДлинаРазделителя = СтрДлина(Разделитель);

	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть = Сред(Стр, ПозРазделителя + ?(Режим = 2, 0, ДлинаРазделителя));
		Стр         = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим = 1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Вычислет значение поля (реквизита) проводки в соответствии с настройкой
// шаблона проводки в типовой операции
//
// Параметры:
//  ИмяПоля      - Строка - имя поля. Например: Сумма
//  Проводки	 - ссылка на текущий набор записей регистра бухгалтерии
//  Проводка     - ссылка на текущую запись в наборе регистра бухгалтерии
//  ШаблонЗаписи - ссылка на строку табличной части "Типовой" типовой операции
//  Формулы      - Структура, содержащая формулы полей
//  Параметры	 - Структура, содержащая значения параметров типовой операции
//
// Возвращаемое значение:
//  Значение типа соответствующего типу поля (реквизита) проводки
//
Функция ЗначениеПоля(ИмяПоля, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры)

	Значение       = Неопределено;
	ПрограммныйКод = "";

	Если Формулы <> Неопределено Тогда

		Формула = СокрЛП(Формулы[СокрЛП(ИмяПоля)]);

		Если Формула <> "" Тогда

			Значение = "";
			Стр      = "";

			Для каждого Пар Из Параметры Цикл
				Стр = Стр + Пар.Ключ + " = Параметры." + Пар.Ключ + ";" + Символы.ПС;
			КонецЦикла;

			Стр = Стр + "Значение = " + ЗаменитьПараметры(Формула, Проводки) + ";";

			Попытка
				Выполнить(Стр);
			Исключение

				СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
				ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
				Сообщить("Ошибка при вычислении значения поля по формуле: " + ИмяПоля + " - " + ОписаниеОшибки);

			КонецПопытки; 

			Возврат Значение;

		КонецЕсли;

	КонецЕсли;

	Значение = ШаблонЗаписи[ИмяПоля];

	Возврат Значение;

КонецФункции // ЗначениеПоля()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет документ на основании типовой операции
//
// Параметры:
//  ТО       - ссылка на элемент справочника Типовые операции. Типовая операция,
//             на основании которой заполняется документ
//  Очистить - Булево - если Истина, то перед заполнением удаляются
//             существующие проводки
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаОснованииТиповойОперации(ТО, Очистить = Истина) Экспорт

	Проводки    = Движения.Типовой;
	//ПроводкиНУ  = Движения.Налоговый;

	Если Очистить = Истина Тогда
		Проводки.Очистить();
		//ПроводкиНУ.Очистить();
	КонецЕсли;

	// Инициализация параметров

	Параметры = Новый Структура();

	// Не запрашиваемые параметры
	Для каждого Параметр Из ТО.Параметры Цикл

		Если Не Параметр.НеЗапрашивать Тогда
			Продолжить;
		КонецЕсли;

		Параметры.Вставить(Параметр.Имя, Параметр.Значение);

	КонецЦикла;

	// Запрашиваемые параметры
	Для каждого Параметр Из ЗапрашиваемыеПараметры Цикл
		Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	// НачалоАлгоритма
	НачалоАлгоритма = "";
	Для каждого Параметр Из Параметры Цикл
		НачалоАлгоритма = НачалоАлгоритма + Параметр.Ключ + " = Параметры." + Параметр.Ключ + ";" + Символы.ПС;
	КонецЦикла;

	// КонецАлгоритма
	КонецАлгоритма = Символы.ПС;
	Для каждого Параметр Из Параметры Цикл
		КонецАлгоритма = КонецАлгоритма + "Параметры." + Параметр.Ключ + " = " + Параметр.Ключ + ";" + Символы.ПС;
	КонецЦикла;

	// АлгоритмПриВводе
	АлгоритмПриВводе = ТО.АлгоритмПриВводе;
	Если Не ПустаяСтрока(АлгоритмПриВводе) Тогда

		Попытка
			Выполнить(НачалоАлгоритма + АлгоритмПриВводе + КонецАлгоритма);
		Исключение

			СтрокаМодуля   = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (перед формированием проводок):  " + ОписаниеОшибки);

		КонецПопытки;

	КонецЕсли;

	// Неудовлетворяющие условиям проводки будем добавлять в массив
	МассивУдаляемыхПроводок    = Новый Массив;
	МассивУдаляемыхПроводокНУ  = Новый Массив;

	// Заполняем проводки по шаблонам БУ
	Для каждого ШаблонЗаписи Из ТО.Типовой Цикл

		Проводка   = Проводки.Добавить();

		Формулы    = Неопределено;
		СтрФормулы = СокрЛП(ШаблонЗаписи.Формулы);

		Если СтрФормулы <> "" Тогда
			Формулы = ЗначениеИзСтрокиВнутр(СтрФормулы);
		КонецЕсли;

		СубконтоДт1     = "";
		СубконтоДт2     = "";
		СубконтоДт3     = "";

		КоличествоДт    = 0;
		ВалютаДт        = "";
		ВалютнаяСуммаДт = 0;

		СубконтоКт1     = "";
		СубконтоКт2     = "";
		СубконтоКт3     = "";

		КоличествоКт    = 0;
		ВалютаКт        = "";
		ВалютнаяСуммаКт = 0;

		Проводка.СчетДт = ЗначениеПоля("СчетДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СчетДт          = Проводка.СчетДт;

		Если Не Проводка.СчетДт.Пустая() Тогда

			ВидыСубконто = Проводка.СчетДт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИмяПеременной = "СубконтоДт" + Строка(1+ВидыСубконто.Индекс(Стр));
				Зн            = ЗначениеПоля(ИмяПеременной, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				Проводка.СубконтоДт[Стр.ВидСубконто] = Зн;

				Выполнить(ИмяПеременной + " = Зн;");

			КонецЦикла;

			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = ЗначениеПоля("КоличествоДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				КоличествоДт          = Проводка.КоличествоДт;
			КонецЕсли;

			Если Проводка.СчетДт.Валютный Тогда

				Проводка.ВалютаДт        = ЗначениеПоля("ВалютаДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютаДт                 = Проводка.ВалютаДт;
				Проводка.ВалютнаяСуммаДт = ЗначениеПоля("ВалютнаяСуммаДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютнаяСуммаДт          = Проводка.ВалютнаяСуммаДт;

			КонецЕсли;

		КонецЕсли;

		Проводка.СчетКт = ЗначениеПоля("СчетКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СчетКт          = Проводка.СчетКт;

		Если Не Проводка.СчетКт.Пустая() Тогда

			ВидыСубконто = Проводка.СчетКт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИмяПеременной = "СубконтоКт" + Строка(1+ВидыСубконто.Индекс(Стр));
				Зн            = ЗначениеПоля(ИмяПеременной, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				Проводка.СубконтоКт[Стр.ВидСубконто] = Зн;

				Выполнить(ИмяПеременной + " = Зн;");

			КонецЦикла;

			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = ЗначениеПоля("КоличествоКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				КоличествоКт          = Проводка.КоличествоКт;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда

				Проводка.ВалютаКт        = ЗначениеПоля("ВалютаКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютаКт                 = Проводка.ВалютаКт;
				Проводка.ВалютнаяСуммаКт = ЗначениеПоля("ВалютнаяСуммаКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютнаяСуммаКт          = Проводка.ВалютнаяСуммаКт;

			КонецЕсли;

		КонецЕсли;

		Проводка.Сумма        = ЗначениеПоля("Сумма", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		Сумма                 = Проводка.Сумма;

		Проводка.НомерЖурнала = ЗначениеПоля("НомерЖурнала", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		НомерЖурнала          = Проводка.НомерЖурнала;

		Проводка.Содержание   = ЗначениеПоля("Содержание", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);

		// Условие формирования проводки
		СтрокаУсловия = ШаблонЗаписи.Условие;

		Если Не ПустаяСтрока(СтрокаУсловия) Тогда

			УсловиеВыполняется = Ложь;
			АлгоритмУсловия    = НачалоАлгоритма + "УсловиеВыполняется = " + ЗаменитьПараметры(СтрокаУсловия, Проводки) + ";";

			Попытка

				Выполнить(АлгоритмУсловия);

				Если Не УсловиеВыполняется Тогда
					МассивУдаляемыхПроводок.Добавить(Проводка);
				КонецЕсли;

			Исключение

				СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
				ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
				Сообщить("Условие формирования проводки №" + (1 + ТО.Типовой.Индекс(ШаблонЗаписи))  + " " + ОписаниеОшибки);

			КонецПопытки;

		КонецЕсли;

	КонецЦикла; // по шаблонам проводок

	//// Заполняем проводки по шаблонам НУ
	//Для каждого ШаблонЗаписи Из ТО.Налоговый Цикл

	//	Проводка   = ПроводкиНУ.Добавить();

	//	Формулы    = Неопределено;
	//	СтрФормулы = СокрЛП(ШаблонЗаписи.Формулы);

	//	Если СтрФормулы <> "" Тогда
	//		Формулы = ЗначениеИзСтрокиВнутр(СтрФормулы);
	//	КонецЕсли;

	//	СубконтоДт1     = "";
	//	СубконтоДт2     = "";
	//	СубконтоДт3     = "";

	//	КоличествоДт    = 0;

	//	СубконтоКт1     = "";
	//	СубконтоКт2     = "";
	//	СубконтоКт3     = "";

	//	КоличествоКт    = 0;

	//	Проводка.СчетДт = ЗначениеПоля("СчетДт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	СчетДт          = Проводка.СчетДт;

	//	Если Не Проводка.СчетДт.Пустая() Тогда

	//		ВидыСубконто = Проводка.СчетДт.ВидыСубконто;

	//		Для Каждого Стр Из ВидыСубконто Цикл

	//			ИмяПеременной = "СубконтоДт" + Строка(1+ВидыСубконто.Индекс(Стр));
	//			Зн            = ЗначениеПоля(ИмяПеременной, ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//			Проводка.СубконтоДт[Стр.ВидСубконто] = Зн;

	//			Выполнить(ИмяПеременной + " = Зн;");

	//		КонецЦикла;

	//		Если Проводка.СчетДт.Количественный Тогда
	//			Проводка.КоличествоДт = ЗначениеПоля("КоличествоДт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//			КоличествоДт          = Проводка.КоличествоДт;
	//		КонецЕсли;

	//	КонецЕсли;

	//	Проводка.СчетКт = ЗначениеПоля("СчетКт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	СчетКт          = Проводка.СчетКт;

	//	Если Не Проводка.СчетКт.Пустая() Тогда

	//		ВидыСубконто = Проводка.СчетКт.ВидыСубконто;

	//		Для Каждого Стр Из ВидыСубконто Цикл

	//			ИмяПеременной = "СубконтоКт" + Строка(1+ВидыСубконто.Индекс(Стр));
	//			Зн            = ЗначениеПоля(ИмяПеременной, ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//			Проводка.СубконтоКт[Стр.ВидСубконто] = Зн;

	//			Выполнить(ИмяПеременной + " = Зн;");

	//		КонецЦикла;

	//		Если Проводка.СчетКт.Количественный Тогда
	//			Проводка.КоличествоКт = ЗначениеПоля("КоличествоКт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//			КоличествоКт          = Проводка.КоличествоКт;
	//		КонецЕсли;

	//	КонецЕсли;

	//	Проводка.Сумма        = ЗначениеПоля("Сумма", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	Сумма                 = Проводка.Сумма;

	//	Проводка.НомерЖурнала = ЗначениеПоля("НомерЖурнала", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	НомерЖурнала          = Проводка.НомерЖурнала;

	//	Проводка.ВидУчетаДт   = ЗначениеПоля("ВидУчетаДт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	ВидУчета              = Проводка.ВидУчетаДт;

	//	Проводка.ВидУчетаКт   = ЗначениеПоля("ВидУчетаКт", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);
	//	ВидУчета              = Проводка.ВидУчетаКт;

	//	Проводка.Содержание   = ЗначениеПоля("Содержание", ПроводкиНУ, Проводка, ШаблонЗаписи, Формулы, Параметры);

	//	// Условие формирования проводки
	//	СтрокаУсловия = ШаблонЗаписи.Условие;

	//	Если Не ПустаяСтрока(СтрокаУсловия) Тогда

	//		УсловиеВыполняется = Ложь;
	//		АлгоритмУсловия    = НачалоАлгоритма + "УсловиеВыполняется = " + ЗаменитьПараметры(СтрокаУсловия, ПроводкиНУ) + ";";

	//		Попытка

	//			Выполнить(АлгоритмУсловия);

	//			Если Не УсловиеВыполняется Тогда
	//				МассивУдаляемыхПроводокНУ.Добавить(Проводка);
	//			КонецЕсли;

	//		Исключение

	//			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
	//			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	//			Сообщить("Условие формирования проводки (НУ) №" + (1 + ТО.Налоговый.Индекс(ШаблонЗаписи))  + " " + ОписаниеОшибки);

	//		КонецПопытки;

	//	КонецЕсли;

	//КонецЦикла; // по шаблонам проводок

	// Выполним алгоритм после формирования проводок
	АлгоритмОперации = СокрЛП(ТО.АлгоритмПослеВвода);
	Если Не ПустаяСтрока(АлгоритмОперации) Тогда

		Попытка
			Выполнить(НачалоАлгоритма + ЗаменитьПараметры(АлгоритмОперации, Проводки));
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (после формирования проводок):  " + ОписаниеОшибки);
		КонецПопытки; 

	КонецЕсли;

	// Вычислим содержание операции по формуле
	ФормулаСодержания = СокрЛП(ТО.ФормулаСодержания);
	Если ФормулаСодержания <> "" Тогда

		АлгоритмСодержания = НачалоАлгоритма + "Содержание = " + ЗаменитьПараметры(ФормулаСодержания, Проводки) + ";";

		Попытка
			Выполнить(АлгоритмСодержания);
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Формула содержания операции:  " + ОписаниеОшибки);
		КонецПопытки;

	КонецЕсли;

	// Вычислим сумму операции по формуле
	ФормулаСуммыОперации = СокрЛП(ТО.ФормулаСуммыОперации);
	Если ФормулаСуммыОперации <> "" Тогда

		АлгоритмСуммыОперации = НачалоАлгоритма + "СуммаОперации = " + ЗаменитьПараметры(ФормулаСуммыОперации, Проводки) + ";";

		Попытка
			Выполнить(АлгоритмСуммыОперации);
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Формула суммы операции:  " + ОписаниеОшибки);
		КонецПопытки;

	КонецЕсли;

	// Удалим неудовлетворяющие условиям проводки
	Для каждого Проводка Из МассивУдаляемыхПроводок Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;

	// Удалим неудовлетворяющие условиям проводки
	//Для каждого Проводка Из МассивУдаляемыхПроводокНУ Цикл
	//	ПроводкиНУ.Удалить(Проводка);
	//КонецЦикла;    	

КонецПроцедуры // ЗаполнитьНаОснованииТиповойОперации()


#Если Клиент Тогда

Функция ПечатьРасчетПС()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПорогаСущественности.ДатаСозданияДокумента,
	|	РасчетПорогаСущественности.ПроцентОПСДляОпераций,
	|	РасчетПорогаСущественности.ПроцентОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ПроцентИПСДляОперацийИСверокВГО,
	|	РасчетПорогаСущественности.ВидБазовогоПоказателя КАК ИсходныеДанные,
	|	РасчетПорогаСущественности.СуммаИсходныхДанных,
	|	РасчетПорогаСущественности.СреднемесячныйПоказатель,
	|	РасчетПорогаСущественности.ОПСДляОпераций,
	|	РасчетПорогаСущественности.ОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ИПСДляОпераций,
	|	РасчетПорогаСущественности.ИПСДляСверокВГО,
	|	РасчетПорогаСущественности.ДатаНачалаРасчета,
	|	РасчетПорогаСущественности.ДатаОкончанияРасчета,
	|	РасчетПорогаСущественности.ДополнительнаяСумма,
	|	РасчетПорогаСущественности.ДополнительнаяИнформация
	|ИЗ
	|	Документ.РасчетПорогаСущественности КАК РасчетПорогаСущественности
	|ГДЕ
	|	РасчетПорогаСущественности.Ссылка = &ТекущийДокумент";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("РасчетПС");
	
	// Получаем области макета для вывода в табличный документ.
	ОбастьМакета   = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	//ТабДокумент.ПолеСверху              = 10;
	//ТабДокумент.ПолеСлева               = 0;
	//ТабДокумент.ПолеСнизу               = 0;
	//ТабДокумент.ПолеСправа              = 0;
	//ТабДокумент.РазмерКолонтитулаСверху = 10;
	//ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетПС";

	// Выведем шапку документа.
	ОбастьМакета.Параметры.Валюта    			  = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.ВеличинаТекущихАктивов Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Величина всех активов Общества на "+Лев(Строка(ДатаОкончанияРасчета),10);
	ИначеЕсли ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.СобственныйКапитал Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Собственный капитал Общества на "+Лев(Строка(ДатаОкончанияРасчета),10);
	ИначеЕсли ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.ВыручкаОтРеализации Тогда
		ОбастьМакета.Параметры.ТекстИсходныхДанных    = "Выручка от реализации Общества на "+Лев(Строка(ДатаОкончанияРасчета),10);
	КонецЕсли;	
	
	ОбастьМакета.Параметры.ТекстРасчетаСреднемесячногоПоказателя    = "Среднемесячное значение базового показателя на "+Лев(Строка(ДатаОкончанияРасчета),10);;

	ОбастьМакета.Параметры.СуммаИсходныхДанных    = СуммаИсходныхДанных;
	ОбастьМакета.Параметры.ТекстДопИнформации     = ДополнительнаяИнформация;
	ОбастьМакета.Параметры.СуммаДополнительная    = ДополнительнаяСумма;
	ОбастьМакета.Параметры.СреднемесячноеЗначение = СреднемесячныйПоказатель;
	ОбастьМакета.Параметры.БазовыйПоказатель      = СреднемесячныйПоказатель;
	ОбастьМакета.Параметры.ПроцентОПСОпераций     = Строка(ПроцентОПСДляОпераций)+" %";
	ОбастьМакета.Параметры.ПроцентОПССвверокВГОО  = Строка(ПроцентОПСДляСверокВГО)+" %";
	ОбастьМакета.Параметры.ПроцентИПСиОПС         = Строка(ПроцентИПСДляОперацийИСверокВГО)+" %";
	ОбастьМакета.Параметры.ОПСОпераций    		  = ОПСДляОпераций;
	ОбастьМакета.Параметры.ОПССверокВГОО    	  = ОПСДляСверокВГО;
	ОбастьМакета.Параметры.ИПСОпераций    		  = ИПСДляОпераций;
	ОбастьМакета.Параметры.ИПССверокВГОО    	  = ИПСДляСверокВГО;
	
	ТабДокумент.Вывести(ОбастьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()

Функция ПечатьСправкаИтог()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПорогаСущественности.ДатаСозданияДокумента,
	|	РасчетПорогаСущественности.ПроцентОПСДляОпераций,
	|	РасчетПорогаСущественности.ПроцентОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ПроцентИПСДляОперацийИСверокВГО,
	|	РасчетПорогаСущественности.ВидБазовогоПоказателя КАК ИсходныеДанные,
	|	РасчетПорогаСущественности.СуммаИсходныхДанных,
	|	РасчетПорогаСущественности.СреднемесячныйПоказатель,
	|	РасчетПорогаСущественности.ОПСДляОпераций,
	|	РасчетПорогаСущественности.ОПСДляСверокВГО,
	|	РасчетПорогаСущественности.ИПСДляОпераций,
	|	РасчетПорогаСущественности.ИПСДляСверокВГО,
	|	РасчетПорогаСущественности.ДатаНачалаРасчета,
	|	РасчетПорогаСущественности.ДатаОкончанияРасчета,
	|	РасчетПорогаСущественности.ДополнительнаяСумма,
	|	РасчетПорогаСущественности.ДополнительнаяИнформация
	|ИЗ
	|	Документ.РасчетПорогаСущественности КАК РасчетПорогаСущественности
	|ГДЕ
	|	РасчетПорогаСущественности.Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	ВыборкаДвижений.Следующий();
	Макет = ПолучитьМакет("СправкаИтог");
	
	// Получаем области макета для вывода в табличный документ.
	ОбастьМакета   = Макет.ПолучитьОбласть("Область");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	//ТабДокумент.ПолеСверху              = 10;
	//ТабДокумент.ПолеСлева               = 0;
	//ТабДокумент.ПолеСнизу               = 0;
	//ТабДокумент.ПолеСправа              = 0;
	//ТабДокумент.РазмерКолонтитулаСверху = 10;
	//ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаИтог";

	// Выведем шапку документа.
	//ОбастьМакета.Параметры.Валюта    			  = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.ВеличинаТекущихАктивов Тогда
		ОбастьМакета.Параметры.БазовыйПоказатель    = "Величина всех активов Общества";
	ИначеЕсли ВидБазовогоПоказателя = Перечисления.ВидБазовогоПоказателя.СобственныйКапитал Тогда
		ОбастьМакета.Параметры.БазовыйПоказатель    = "Собственный капитал Общества";
	КонецЕсли;	
	
	ОбастьМакета.Параметры.Организация = Организация.НаименованиеПолное;
	ОбастьМакета.Параметры.Период = ПредставлениеПериода(ДатаНачалаРасчета,ДатаОкончанияРасчета, "ФП = истина");
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасчетПорогаСущественности.РасчетКонтрольногоПорогаСущественности Тогда
		ЗапросПС = Новый Запрос("ВЫБРАТЬ
		                        |	РасчетПорогаСущественности.ПроцентОПСДляОпераций,
		                        |	РасчетПорогаСущественности.ПроцентОПСДляСверокВГО,
		                        |	РасчетПорогаСущественности.ПроцентИПСДляОперацийИСверокВГО,
		                        |	РасчетПорогаСущественности.СуммаИсходныхДанных,
		                        |	РасчетПорогаСущественности.СреднемесячныйПоказатель,
		                        |	РасчетПорогаСущественности.ОПСДляОпераций,
		                        |	РасчетПорогаСущественности.ОПСДляСверокВГО,
		                        |	РасчетПорогаСущественности.ИПСДляОпераций,
		                        |	РасчетПорогаСущественности.ИПСДляСверокВГО,
		                        |	РасчетПорогаСущественности.ДополнительнаяСумма
		                        |ИЗ
		                        |	Документ.РасчетПорогаСущественности КАК РасчетПорогаСущественности
		                        |ГДЕ
		                        |	РасчетПорогаСущественности.ДатаНачалаРасчета = &ДатаНачалаРасчета
		                        |	И РасчетПорогаСущественности.ДатаОкончанияРасчета = &ДатаОкончанияРасчета
		                        |	И РасчетПорогаСущественности.ВидБазовогоПоказателя = &ВидБазовогоПоказателя
		                        |	И РасчетПорогаСущественности.ВидОперации = &ВидОперации");
		ЗапросПС.УстановитьПараметр("ДатаНачалаРасчета",ДатаНачалаРасчета);
		ЗапросПС.УстановитьПараметр("ДатаОкончанияРасчета",ДатаОкончанияРасчета);
        ЗапросПС.УстановитьПараметр("ВидБазовогоПоказателя", ВидБазовогоПоказателя);
        ЗапросПС.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийРасчетПорогаСущественности.РасчетПорогаСущественности);
        ВыборкаПС = ЗапросПС.Выполнить().Выбрать();
		Если ВыборкаПС.Количество() > 0 Тогда
			ВыборкаПС.Следующий();
			ОбастьМакета.Параметры.БазПоказатель = ВыборкаПС.СуммаИсходныхДанных;
			ОбастьМакета.Параметры.ПроцентОПСДляОпераций = ВыборкаПС.ПроцентОПСДляОпераций;
			ОбастьМакета.Параметры.ОПСДляОпераций = ВыборкаПС.ОПСДляОпераций;
			ОбастьМакета.Параметры.ПроцентОПСДляСверокВГО = ВыборкаПС.ПроцентОПСДляСверокВГО;
			ОбастьМакета.Параметры.ОПСДляСверокВГО = ВыборкаПС.ОПСДляСверокВГО;
			ОбастьМакета.Параметры.ПроцентИПСДляОперацийИСверокВГО = ВыборкаПС.ПроцентИПСДляОперацийИСверокВГО;
			ОбастьМакета.Параметры.ИПСДляОпераций = ВыборкаПС.ИПСДляОпераций;
			ОбастьМакета.Параметры.ИПСДляСверокВГО = ВыборкаПС.ИПСДляСверокВГО;			
		Иначе
			Сообщить ("Не осуществлен расчет общего порога существенности за период: "+ПредставлениеПериода(ДатаНачалаРасчета,ДатаОкончанияРасчета, "ФП = истина"));
		КонецЕсли;
			// КПС
		ОбастьМакета.Параметры.БазовыйОперации_КПС = ВыборкаДвижений.СуммаИсходныхДанных;
		ОбастьМакета.Параметры.ОПС_операции_КПС = ВыборкаДвижений.ОПСДляОпераций;
		ОбастьМакета.Параметры.ИПС_операции_КПС = ВыборкаДвижений.ИПСДляОпераций;
		//ОбастьМакета.Параметры.БазовыйВГО_КПС = ВыборкаДвижений.СуммаИсходныхДанных;
		ОбастьМакета.Параметры.ОПС_ВГО_КПС = ВыборкаДвижений.ОПСДляСверокВГО;
		ОбастьМакета.Параметры.ИПС_ВГО_КПС = ВыборкаДвижений.ИПСДляСверокВГО;
	Иначе
		ОбастьМакета.Параметры.БазПоказатель = ВыборкаДвижений.СуммаИсходныхДанных;
		ОбастьМакета.Параметры.ПроцентОПСДляОпераций = ВыборкаДвижений.ПроцентОПСДляОпераций;
		ОбастьМакета.Параметры.ОПСДляОпераций = ВыборкаДвижений.ОПСДляОпераций;
		ОбастьМакета.Параметры.ПроцентОПСДляСверокВГО = ВыборкаДвижений.ПроцентОПСДляСверокВГО;
		ОбастьМакета.Параметры.ОПСДляСверокВГО = ВыборкаДвижений.ОПСДляСверокВГО;
		ОбастьМакета.Параметры.ПроцентИПСДляОперацийИСверокВГО = ВыборкаДвижений.ПроцентИПСДляОперацийИСверокВГО;
		ОбастьМакета.Параметры.ИПСДляОпераций = ВыборкаДвижений.ИПСДляОпераций;
		ОбастьМакета.Параметры.ИПСДляСверокВГО = ВыборкаДвижений.ИПСДляСверокВГО;			
	КонецЕсли;
		
		

	
	
	
	//ОбастьМакета.Параметры.ТекстРасчетаСреднемесячногоПоказателя    = "Среднемесячное значение базового показателя на "+Лев(Строка(ДатаОкончанияРасчета),10);;

	//ОбастьМакета.Параметры.СуммаИсходныхДанных    = СуммаИсходныхДанных;
	//ОбастьМакета.Параметры.ТекстДопИнформации     = ДополнительнаяИнформация;
	//ОбастьМакета.Параметры.СуммаДополнительная    = ДополнительнаяСумма;
	//ОбастьМакета.Параметры.СреднемесячноеЗначение = СреднемесячныйПоказатель;
	//ОбастьМакета.Параметры.БазовыйПоказатель      = СреднемесячныйПоказатель;
	//ОбастьМакета.Параметры.ПроцентОПСОпераций     = Строка(ПроцентОПСДляОпераций)+" %";
	//ОбастьМакета.Параметры.ПроцентОПССвверокВГОО  = Строка(ПроцентОПСДляСверокВГО)+" %";
	//ОбастьМакета.Параметры.ПроцентИПСиОПС         = Строка(ПроцентИПСДляОперацийИСверокВГО)+" %";
	//ОбастьМакета.Параметры.ОПСОпераций    		  = ОПСДляОпераций;
	//ОбастьМакета.Параметры.ОПССверокВГОО    	  = ОПСДляСверокВГО;
	//ОбастьМакета.Параметры.ИПСОпераций    		  = ИПСДляОпераций;
	//ОбастьМакета.Параметры.ИПССверокВГОО    	  = ИПСДляСверокВГО;
	
	ТабДокумент.Вывести(ОбастьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетПС" Тогда
 		ТабДокумент = ПечатьРасчетПС();
	ИначеЕсли ИмяМакета = "СправкаИтог" Тогда
		ТабДокумент = ПечатьСправкаИтог();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли


// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	ПечатныеФормы = Новый Структура;
	ПечатныеФормы.Вставить("РасчетПС", "Расчет ПС");
	ПечатныеФормы.Вставить("СправкаИтог", "Справка о значениях ПС");
	Возврат ПечатныеФормы;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПроверкаЗаполнения (Отказ) Экспорт
	//Если НЕ ЗначениеЗаполнено(ИсходныеДанные) Тогда
	//	Отказ = Истина;
	//	Сообщить ("Не заполнено поле исходных данных для рассчета!",СтатусСообщения.Важное);
	//КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СуммаИсходныхДанных) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма исходных данных!",СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СреднемесячныйПоказатель) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма среднемесячного показателя!",СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОПСДляОпераций) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма ОПС для операций!",СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОПСДляСверокВГО) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма ОПС для сверок ВГОО!",СтатусСообщения.Важное);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ИПСДляОпераций) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма ИПС для операций!",СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИПСДляСверокВГО) Тогда
		Отказ = Истина;
		Сообщить ("Не рассчитана сумма ИПС для сверок ВГОО!",СтатусСообщения.Важное);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если ОбъектКопирования = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.ОперацияБух") Тогда
		Возврат;
	КонецЕсли;

	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Содержание    = ОбъектКопирования.Содержание;
	Ответственный = ОбъектКопирования.Ответственный;

	ДвиженияБУ = РегистрыБухгалтерии.Типовой.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияБУ.Следующий() Цикл

		Проводка = Движения.Типовой.Добавить();

		Проводка.СчетДт          = ДвиженияБУ.СчетДт;
		Проводка.СчетКт          = ДвиженияБУ.СчетКт;

		Для каждого Субконто Из ДвиженияБУ.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияБУ.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.ВалютаДт        = ДвиженияБУ.ВалютаДт;
		Проводка.ВалютаКт        = ДвиженияБУ.ВалютаКт;
		Проводка.ВалютнаяСуммаДт = ДвиженияБУ.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = ДвиженияБУ.ВалютнаяСуммаКт;
		Проводка.КоличествоДт    = ДвиженияБУ.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияБУ.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияБУ.НомерЖурнала;
		Проводка.Организация     = ДвиженияБУ.Организация;
		Проводка.Содержание      = ДвиженияБУ.Содержание;
		Проводка.Сумма           = ДвиженияБУ.Сумма;

	КонецЦикла;

	ДвиженияНУ = РегистрыБухгалтерии.Налоговый.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияНУ.Следующий() Цикл

		Проводка = Движения.Налоговый.Добавить();

		Проводка.СчетДт          = ДвиженияНУ.СчетДт;
		Проводка.СчетКт          = ДвиженияНУ.СчетКт;

		Для каждого Субконто Из ДвиженияНУ.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияНУ.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.КоличествоДт    = ДвиженияНУ.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияНУ.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияНУ.НомерЖурнала;
		Проводка.Организация     = ДвиженияНУ.Организация;
		Проводка.ВидУчетаДт      = ДвиженияНУ.ВидУчетаДт;
		Проводка.ВидУчетаКт      = ДвиженияНУ.ВидУчетаКт;
		Проводка.Содержание      = ДвиженияНУ.Содержание;
		Проводка.Сумма           = ДвиженияНУ.Сумма;

	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаЗаполнения(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("СправочникСсылка.ТиповыеОперации")) Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда

		СписокТиповыхОпераций = ВосстановитьЗначение("СписокТиповыхОпераций");

		Если СписокТиповыхОпераций = Неопределено Тогда
			СписокТиповыхОпераций = Новый СписокЗначений; 
		Иначе

			Элемент = СписокТиповыхОпераций.НайтиПоЗначению(Основание);
			Если Элемент <> Неопределено Тогда
				СписокТиповыхОпераций.Удалить(Элемент);
			КонецЕсли;

		КонецЕсли;

		СписокТиповыхОпераций.Вставить(0, Основание, Строка(Основание));
		СохранитьЗначение("СписокТиповыхОпераций", СписокТиповыхОпераций);

	#КонецЕсли

	// Инициализация параметров
	Параметры = Новый Структура();
	Для каждого Пар Из Основание.Параметры Цикл
		Параметры.Вставить(Пар.Имя, Пар.Значение);
	КонецЦикла;

	// АлгоритмПередВводом
	АлгоритмПередВводом = Основание.АлгоритмПередВводом;
	Если Не ПустаяСтрока(АлгоритмПередВводом) Тогда

		// НачалоАлгоритма
		НачалоАлгоритма = "";
		Для каждого Пар Из Параметры Цикл
			НачалоАлгоритма = НачалоАлгоритма + Пар.Ключ + " = Параметры." + Пар.Ключ + ";" + Символы.ПС;
		КонецЦикла;

		// КонецАлгоритма
		КонецАлгоритма = Символы.ПС;
		Для каждого Пар Из Параметры Цикл
			КонецАлгоритма = КонецАлгоритма + "Параметры." + Пар.Ключ + " = " + Пар.Ключ + ";" + Символы.ПС;
		КонецЦикла;

		Попытка

			Выполнить(НачалоАлгоритма + АлгоритмПередВводом + КонецАлгоритма);

		Исключение

			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (перед заполнением параметров):  " + ОписаниеОшибки);

		КонецПопытки;

	КонецЕсли;

	ЗапрашиваемыеПараметры.Очистить();
	ТиповаяОперация = Основание.Ссылка;
	Для каждого Пар Из Основание.Параметры Цикл

		Если Пар.НеЗапрашивать Тогда
			Продолжить
		КонецЕсли;

		ОписаниеТиповПараметра = Пар.Тип.Получить();

		СтрокаТЧ               = ЗапрашиваемыеПараметры.Добавить();

		СтрокаТЧ.Имя           = Пар.Имя;
		СтрокаТЧ.Представление = Пар.Представление;
		СтрокаТЧ.Значение      = ОписаниеТиповПараметра.ПривестиЗначение(Параметры[Пар.Имя]);

	КонецЦикла;

	Если ЗапрашиваемыеПараметры.Количество() = 0 Тогда

		ЗаполнитьНаОснованииТиповойОперации(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЭтоНовыйДокумент = Ссылка.Пустая();

	Если ЭтоНовыйДокумент Тогда
		РанееУстановленнаяПометкаУдаления = Ложь;

	Иначе

		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СсылкаНаОперацию", Ссылка); 
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	0 
		|ИЗ
		|	Документ.ОперацияБух КАК Операция
		|
		|ГДЕ
		|	(Операция.Ссылка = &СсылкаНаОперацию) И
		|	(Операция.ПометкаУдаления = Ложь)";
		Результат = Запрос.Выполнить();

		РанееУстановленнаяПометкаУдаления = Результат.Пустой();

	КонецЕсли;

	Если ПометкаУдаления <> РанееУстановленнаяПометкаУдаления Тогда

		Для каждого ПроводкиДокумента из Движения Цикл

			Если (НЕ ПроводкиДокумента.Модифицированность()) И (НЕ ПроводкиДокумента.Выбран()) И
			     (НЕ ЭтоНовыйДокумент) Тогда

				ПроводкиДокумента.Прочитать();

			КонецЕсли;

			КоличествоПроводок = ПроводкиДокумента.Количество();

			Если КоличествоПроводок > 0 Тогда

				// Определяем текущую активность проводок по первой проводке
				ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
				НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;

				Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
					ПроводкиДокумента.УстановитьАктивность(НужнаяАктивностьПроводок);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ДанныеПорогаСущественности.Регистратор
	                       |ИЗ
	                       |	РегистрСведений.ДанныеПорогаСущественности КАК ДанныеПорогаСущественности
	                       |ГДЕ
	                       |	ДанныеПорогаСущественности.ВидБазовогоПоказателя = &ВидБазовогоПоказателя
	                       |	И ДанныеПорогаСущественности.ПериодРегистрации = &ПериодРегистрации
	                       |	И ДанныеПорогаСущественности.ВидОперации = &ВидОперации
	                       |	И ДанныеПорогаСущественности.Регистратор <> &Регистратор");
						   
	Запрос.УстановитьПараметр("ВидБазовогоПоказателя",ВидБазовогоПоказателя);
	Запрос.УстановитьПараметр("ПериодРегистрации",ДатаНачалаРасчета);
	Запрос.УстановитьПараметр("ВидОперации",ВидОперации);
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Сообщить ("Порог существенности для данного периода уже рассчитан!");
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);	
	Движение = Движения.ДанныеПорогаСущественности.Добавить();
	Движение.Период = Дата;
	Движение.ВидБазовогоПоказателя = ВидБазовогоПоказателя;
	Движение.ПериодРегистрации = ДатаНачалаРасчета;
	Движение.ВидОперации = ВидОперации;
	Движение.СуммаИсходныхДанных = СуммаИсходныхДанных;
	Движение.СреднемесячныйПоказатель = СреднемесячныйПоказатель;
	Движение.ОПСДляОпераций = ОПСДляОпераций;
	Движение.ОПСДляСверокВГО = ОПСДляСверокВГО;
	Движение.ИПСДляОпераций = ИПСДляОпераций;
	Движение.ИПСДляСверокВГО = ИПСДляСверокВГО;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//
	//Движение = Движения.Типовой;
	//Движение.Прочитать();
	//Движение.УстановитьАктивность(Ложь);
	//Движение.Записать(Истина);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();