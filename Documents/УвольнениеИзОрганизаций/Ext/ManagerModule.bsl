#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечати(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.СтруктурноеПодразделение,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения,
	|	УвольнениеИзОрганизацийРаботникиОрганизации.СтатьяЗаконаОТрудеРК,
	|	ВЫРАЗИТЬ(УвольнениеИзОрганизацийРаботникиОрганизации.РеквизитыДокументаОснования КАК СТРОКА(1000)) КАК ОснованиеУвольнения
	|ПОМЕСТИТЬ ВТ_ДокументыУвольнениеИзОрганизаций
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФИОФИзЛиц.ФизЛицо,
	|	ПериодыФИОФИзЛиц.Период,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыУвольнениеИзОрганизаций КАК ВТ_ДокументыУвольнениеИзОрганизаций
	|				ПО ФИОФизЛиц.Период <= ВТ_ДокументыУвольнениеИзОрганизаций.Дата
	|					И ФИОФизЛиц.ФизЛицо = ВТ_ДокументыУвольнениеИзОрганизаций.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФИОФизЛиц.ФизЛицо) КАК ПериодыФИОФИзЛиц
	|		ПО ФИОФизЛиц.Период = ПериодыФИОФИзЛиц.Период
	|			И ФИОФизЛиц.ФизЛицо = ПериодыФИОФИзЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыУвольнениеИзОрганизаций.Ссылка КАК Ссылка,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА ВТ_ДокументыУвольнениеИзОрганизаций.Физлицо.Наименование
	|		ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
	|	КОНЕЦ КАК Работник,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.Организация КАК Организация,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.Дата КАК ДатаДок,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.Номер КАК НомерДок,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.СтатьяЗаконаОТрудеРК,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.ОснованиеУвольнения,
	|	ВТ_ДокументыУвольнениеИзОрганизаций.ДатаУвольнения,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Работники.Должность,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	ВТ_ДокументыУвольнениеИзОрганизаций КАК ВТ_ДокументыУвольнениеИзОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
	|		ПО ВТ_ДокументыУвольнениеИзОрганизаций.Физлицо = ВТ_ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокДат.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|			РаботникиОрганизации.Должность.Наименование КАК Должность
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиВнутри.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник
	|						И РаботникиВнутри.Период <= Док.ДатаУвольнения
	|			ГДЕ
	|				Док.Ссылка В(&МассивОбъектов)
	|				И РаботникиВнутри.Активность
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиВнутри.Сотрудник) КАК СписокДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
	|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
	|					И РаботникиОрганизации.Активность) КАК Работники
	|		ПО ВТ_ДокументыУвольнениеИзОрганизаций.Сотрудник = Работники.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение),
	|	МАКСИМУМ(ДатаДок),
	|	МАКСИМУМ(НомерДок)
	|ПО
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьНалогоплательщикаДляПримененияВычетовПоИПН(ФизЛицо, ДатаАктуальности = Неопределено, Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ЗначениеЗаполнено(ДатаАктуальности), ДатаАктуальности, Дата));
	
	Запрос.Текст = "
	|// т.к. в плановых вычетах налогоплательщик должен быть указан обязательно, а в ИПНПрименениеВычетов - может быть пустым (ресурс),
	|// то плановые вычеты анализируем раньше
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИПНПлановыеВычеты.Налогоплательщик
	|ИЗ
	|	РегистрСведений.ИПНПлановыеНалоговыеВычетыФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ИПНПлановыеВычеты
	|ГДЕ
	|	ИПНПлановыеВычеты.СуммаВычета <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ИПНПрименениеВычетов.Налогоплательщик
	|ИЗ
	|	РегистрСведений.ИПНПрименениеВычетов.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ИПНПрименениеВычетов
	|ГДЕ
	|	ИПНПрименениеВычетов.ФизЛицо = &ФизЛицо
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Налогоплательщик;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьПоДокументуОснования(Объект, Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.ТекущаяСтруктурнаяЕдиница КАК Организация,
		|	СотрудникиОрганизаций.ТекущееСтруктурноеПодразделение КАК СтруктурноеПодразделение
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Организация = Выборка.Организация;
			СтруктурноеПодразделение = Выборка.СтруктурноеПодразделение;
			НоваяСтрока.ДатаУвольнения	= ОбщегоНазначения.ТекущаяДатаПользователя();
			
		КонецЕсли;
		
		ДокументОснование = Основание;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ на каждого сотрудника
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Увольнение_ПриказНаСотрудника";
	КомандаПечати.Представление = НСтр("ru = 'Приказ на каждого сотрудника'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приказ на список сотрудников
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Увольнение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Приказ на список сотрудников'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Увольнение_ПриказНаСотрудника,Увольнение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Увольнение_ПриказНаСотрудника,Увольнение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Увольнение_ПриказНаСотрудника,Увольнение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать приказа на каждого сотрудника
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Увольнение_ПриказНаСотрудника") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Увольнение_ПриказНаСотрудника",
			НСтр("ru = 'Приказ на каждого сотрудника'"),
			ПечатьПриказНаКаждогоСотрудника(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.УвольнениеИзОрганизаций.ПФ_MXL_Приказ"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("Увольнение_ПриказНаСотрудника"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;

	// Печать приказа на список сотрудников
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Увольнение_ПриказНаСписокСотрудников") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Увольнение_ПриказНаСписокСотрудников",
			НСтр("ru = 'Приказ на список сотрудников'"),
			ПечатьПриказНаСписокСотрудников(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.УвольнениеИзОрганизаций.ПФ_MXL_ПриказСписком");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("Увольнение_ПриказНаСписокСотрудников"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой "ПриказНаРаботника"
//
Функция ПечатьПриказНаКаждогоСотрудника(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "УвольнениеИзОрганизации_ПриказНаСотрудника";	
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УвольнениеИзОрганизаций.ПФ_MXL_Приказ", КодЯзыка);
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
	 	
	// выводим данные о руководителях организации
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий()   Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
				
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаДляШапки.Организация, ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		НомерДокДляПечати =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		ВложеннаяВыборка = ВыборкаДляШапки.Выбрать();
		
		// Начинаем формировать выходной документ
		Пока ВложеннаяВыборка.Следующий() Цикл
			
			// Каждый приказ на отдельной странице.
			Если ТабДокумент.ВысотаТаблицы > 0 Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			// Шапка документа.
			Если ВложеннаяВыборка.Количество() > 1 Тогда
				ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
			КонецЕсли; 
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			
			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
			ОбластьМакета.Параметры.ДатаУвольнения = Формат(ВложеннаяВыборка.ДатаУвольнения, "Л=" + КодЯзыка + "; ДЛФ=DD");
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Подвал документа.
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции 

// Функция формирует табличный документ с печатной формой "ПриказНаРаботников".
//
Функция ПечатьПриказНаСписокСотрудников(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	ТабДокумент.КлючПараметровПечати = "УвольнениеИзОрганизации_ПриказСписком";
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УвольнениеИзОрганизаций.ПФ_MXL_ПриказСписком", КодЯзыка);
	
	ОбластьМакетаШапка 		 = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал 	 = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 			 = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника
	
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий() Цикл
				
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		// выводим данные о руководителях организации
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаДляШапки.Организация, ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация,ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		НомерДокДляПечати =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
		
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		// Начинаем формировать выходной документ
		ВложеннаяВыборка = ВыборкаДляШапки.Выбрать();
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ВсегоСтрокДокумента = ВложеннаяВыборка.Количество();
		
		ВыведеноСтраниц = 0; ВыведеноСтрок = 0;
		// выводим строки по работникам
		Пока ВложеннаяВыборка.Следующий() Цикл
			
			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
			СчПечати = 0;
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
			Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
				СчПечати = СчПечати + 1;
				Если СчПечати > 15 Тогда 
					Прервать;
				КонецЕсли;			
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;

		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
		
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Запрос.УстановитьПараметр("Организация", 			   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",  Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Месяц"					,  ДобавитьМесяц(НачалоМесяца(Реквизиты.Дата), 1));
	Запрос.УстановитьПараметр("ПустаяДата"				,  Дата(1,1,1));
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда   			
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																							Реквизиты.Организация,
	    																					ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"));
	Иначе
		Налогоплательщик = Реквизиты.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик",  Налогоплательщик);
	
	ПодготовитьТаблицыДокумента(Запрос, Реквизиты);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРаботникиОрганизации(НомераТаблиц)
					+ ТекстЗапросаПлановыеНачисленияРаботникиОрганизации(НомераТаблиц)
					+ ТекстЗапросаПлановыеУдержанияРаботникиОрганизации(НомераТаблиц)
					+ ТекстЗапросаИПНПлановыеНалоговыеВычетыФизлицРаботникиОрганизации(НомераТаблиц)
					+ ТекстЗапросаТаблицаПрименениеВычетовИПН(НомераТаблиц)
					+ ТекстЗапросаТаблицаПрочиеВычетыИПН(НомераТаблиц)
					+ ТекстЗапросаТаблицаСтандартныеВычетыИПН(НомераТаблиц)
;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат ПараметрыПроведения;
		
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц) 
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УвольнениеИзОрганизаций.Дата,
	|	УвольнениеИзОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	УвольнениеИзОрганизаций.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации, ИСТИНА)
	|			ТОГДА ВЫБОР
	|					КОГДА УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА УвольнениеИзОрганизаций.Организация
	|					ИНАЧЕ УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация
	|				КОНЕЦ
	|		ИНАЧЕ УвольнениеИзОрганизаций.Организация
	|	КОНЕЦ КАК Организация,
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|		ПО УвольнениеИзОрганизаций.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|ГДЕ
	|	УвольнениеИзОрганизаций.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ПодготовитьТаблицыДокумента(Запрос, Реквизиты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.СтатьяЗаконаОТрудеРК,
	|	ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты,
	|	ТЧРаботникиОрганизации.РеквизитыДокументаОснования,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	ТЧРаботникиОрганизации.Физлицо
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизации
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|ПОМЕСТИТЬ ВТ_СписокДат
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК Док
	|		ПО СостояниеВнутри.Сотрудник = Док.Сотрудник
	|			И (СостояниеВнутри.Организация = &Организация)
	|			И СостояниеВнутри.Период <= Док.ДатаУвольнения
	|			И (СостояниеВнутри.Регистратор <> &Ссылка)
	|			И (СостояниеВнутри.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержанияРаботниковОрганизаций.Организация КАК Организация,
	|	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо КАК Физлицо,
	|	ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|	ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ПлановыеУдержанияРаботниковОрганизаций.Период) КАК ДатаИзмененияРеквизитов
	|ПОМЕСТИТЬ ВТ_ДатыУдержаний
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|		ПО Док.Сотрудник.Физлицо = ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
	|			И Док.ДатаУвольнения >= ПлановыеУдержанияРаботниковОрганизаций.Период
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Организация = &Организация)
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Регистратор <> &Ссылка)
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержанияРаботниковОрганизаций.Организация,
	|	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо,
	|	ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
	|	ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|	НачисленияРаботниковОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|	НачисленияРаботниковОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СписокВидовНачислений
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|			НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|		ИЗ
	|			ВТ_РаботникиОрганизации КАК Док
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|				ПО Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|					И (НачисленияРаботниковОрганизации.Организация = &Организация)
	|					И Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
	|					И (НачисленияРаботниковОрганизации.Регистратор <> &Ссылка)
	|					И (НачисленияРаботниковОрганизации.Активность)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НачисленияРаботниковОрганизации.Сотрудник,
	|			НачисленияРаботниковОрганизации.ВидРасчетаИзмерение) КАК ДатыНачислений
	|		ПО НачисленияРаботниковОрганизации.Период = ДатыНачислений.ДатаИзмененияРеквизитов
	|			И НачисленияРаботниковОрганизации.Сотрудник = ДатыНачислений.Сотрудник
	|			И (НачисленияРаботниковОрганизации.Размер <> 0)
	|			И (НачисленияРаботниковОрганизации.Организация = &Организация)
	|			И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение
	|			И (НачисленияРаботниковОрганизации.Регистратор <> &Ссылка)
	|			И (НачисленияРаботниковОрганизации.Активность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
	|	ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|	ПлановыеУдержанияРаботниковОрганизаций.Организация КАК Организация,
	|	ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СписокВидовУдержаний
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыУдержаний КАК ДатыУдержаний
	|		ПО ПлановыеУдержанияРаботниковОрганизаций.Период = ДатыУдержаний.ДатаИзмененияРеквизитов
	|			И ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо = ДатыУдержаний.Физлицо
	|			И ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета = ДатыУдержаний.ВидРасчета
	|			И ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование = ДатыУдержаний.ДокументОснование
	|			И ПлановыеУдержанияРаботниковОрганизаций.Организация = ДатыУдержаний.Организация
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Регистратор <> &Ссылка)
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Активность)";
	
	Результат = Запрос.Выполнить();

КонецПроцедуры

Функция ТекстЗапросаРаботникиОрганизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаРаботники", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Организация КАК Организация,
	|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	&СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ), СЕКУНДА, 1) КАК Период,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
	|	ДанныеПоРаботникуДоНазначения.ИсчислятьОППВ КАК ИсчислятьОППВ,
	|	ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) КАК ПричинаИзмененияСостояния,
	|	0 КАК ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.СтатьяЗаконаОТрудеРК КАК СтатьяЗаконаОТрудеРК,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежнееОбособленноеПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокДат КАК СписокДат
	|			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|				И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|				И (ДанныеПоРаботникуДоНазначения.Активность)
	|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (ДанныеПоРаботникуДоНазначения.Организация = &Организация)
	|			И (ДанныеПоРаботникуДоНазначения.Активность)";
                     	
 	Возврат	ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПлановыеНачисленияРаботникиОрганизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПлановыеНачисления", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация,
	|	&ОбособленноеПодразделение,
	|	&СтруктурноеПодразделение,
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ), СЕКУНДА, 1) КАК Период,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СписокВидовРасчета.ВидРасчета.ЗачетОтработанногоВремени, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СписокВидовРасчета.ВидРасчетаИзмерение
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	СписокВидовРасчета.ВидРасчета,
	|	0 КАК Размер
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокВидовНачислений КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник";
                     	
 	Возврат	ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПлановыеУдержанияРаботникиОрганизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПлановыеУдержания", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация,
	|	&ОбособленноеПодразделение,
	|	&СтруктурноеПодразделение,
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ), СЕКУНДА, 1) КАК Период,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	0 КАК Размер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить) КАК Действие,
	|	СписокВидовРасчета.ДокументОснование,
	|	СписокВидовРасчета.ВидРасчета,
	|	ТЧРаботникиОрганизации.Физлицо КАК ФизЛицо
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокВидовУдержаний КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Физлицо = СписокВидовРасчета.ФизЛицо
	|			И (ТЧРаботникиОрганизации.СотрудникВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))";
                     	
 	Возврат	ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаИПНПлановыеНалоговыеВычетыФизлицРаботникиОрганизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаИПНПлановыеВычеты", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация,
	|	&ОбособленноеПодразделение,
	|	&СтруктурноеПодразделение,
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ), СЕКУНДА, 1) КАК Период,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	0 КАК СуммаВычета,
	|	ИПНПлановыеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИПНПлановыеВычеты.ВычетИПН КАК ВычетИПН,
	|	ИПНПлановыеВычеты.ДокументОснование КАК ДокументОснование,
	|	ИПНПлановыеВычеты.Налогоплательщик КАК Налогоплательщик,
	|	ТЧРаботникиОрганизации.ФизЛицо
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПлановыеНалоговыеВычетыФизлиц КАК ИПНПлановыеВычеты
	|		ПО ТЧРаботникиОрганизации.ФизЛицо = ИПНПлановыеВычеты.Физлицо
	|			И (ИПНПлановыеВычеты.Налогоплательщик = &Налогоплательщик)
	|			И (ИПНПлановыеВычеты.СуммаВычета <> 0)
	|			И (ИПНПлановыеВычеты.МесяцНалоговогоПериода >= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1))
	|			И (ИПНПлановыеВычеты.Период <= ТЧРаботникиОрганизации.ДатаУвольнения)
	|			И (ИПНПлановыеВычеты.Активность)
	|ГДЕ
	|	ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ИПНПлановыеВычеты.МесяцНалоговогоПериода,
	|	ИПНПлановыеВычеты.ВычетИПН,
	|	ИПНПлановыеВычеты.ДокументОснование,
	|	ИПНПлановыеВычеты.Налогоплательщик,
	|	ТЧРаботникиОрганизации.ФизЛицо";
                     	
 	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаПрименениеВычетовИПН(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПрименениеВычетовИПН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период,
	|	&Организация КАК Организация,
	|	&Ссылка КАК Регистратор,
	|	ТЧРаботникиОрганизации.Физлицо КАК ФизЛицо
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаСтандартныеВычетыИПН(НомераТаблиц)
	
	НомераТаблиц.Вставить("СтандартныеВычетыИПН", НомераТаблиц.Количество()+4);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период,
	|	&Организация КАК Организация,
	|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычетаИПН,
	|	ВычетыФизическихЛицИПН.ДействуетПо КАК ДействуетПо,
	|	ВычетыФизическихЛицИПН.Основание КАК Основание,
	|	ТЧРаботникиОрганизации.Физлицо КАК ФизЛицо,
	|	ВычетыФизическихЛицИПН.Регистратор КАК Регистратор,
	|	ВычетыФизическихЛицИПН.Период КАК ПериодВычета,
	|	ВычетыФизическихЛицИПН.ПредоставлятьВычет КАК ПредоставлятьВычет
	|ПОМЕСТИТЬ ВТПериод
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
	|		ПО ТЧРаботникиОрганизации.Физлицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) >= ВычетыФизическихЛицИПН.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВычетыФизическихЛицИПН.ДействуетПо >= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1)
	|		КОНЕЦ
	|	И ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|	И ВычетыФизическихЛицИПН.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТПериод.ПериодВычета) КАК ПериодВычета,
	|	ВТПериод.ФизЛицо КАК ФизЛицо,
	|	ВТПериод.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ВТПериод.ДействуетПо КАК ДействуетПо,
	|	ВТПериод.Период КАК Период
	|ПОМЕСТИТЬ ВТСрез
	|ИЗ
	|	ВТПериод КАК ВТПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПериод.ФизЛицо,
	|	ВТПериод.ВидВычетаИПН,
	|	ВТПериод.ДействуетПо,
	|	ВТПериод.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериод.Период КАК Период,
	|	ВТПериод.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ВТПериод.ФизЛицо КАК ФизЛицо,
	|	ВТПериод.Основание КАК Основание,
	|	ВТСрез.ПериодВычета КАК ПериодВычета
	|ИЗ
	|	ВТПериод КАК ВТПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрез КАК ВТСрез
	|		ПО ВТПериод.ПериодВычета = ВТСрез.ПериодВычета
	|			И ВТПериод.ФизЛицо = ВТСрез.ФизЛицо
	|			И ВТПериод.ВидВычетаИПН = ВТСрез.ВидВычетаИПН
	|ГДЕ
	|	ВТПериод.ПредоставлятьВычет" ;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПрочиеВычетыИПН(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПрочиеВычетыИПН", НомераТаблиц.Количество()+2);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период,
	|	&Организация КАК Организация,
	|	ПрочиеВычетыФизическихЛиц.ВидВычета КАК ВидВычетаИПН,
	|	ПрочиеВычетыФизическихЛиц.Размер КАК Размер,
	|	ПрочиеВычетыФизическихЛиц.ДействуетПо КАК ДействуетПо,
	|	ПрочиеВычетыФизическихЛиц.ДействуетС КАК ДействуетС,
	|	ПрочиеВычетыФизическихЛиц.Основание КАК Основание,
	|	ПрочиеВычетыФизическихЛиц.ФизическоеЛицо КАК ФизЛицо,
	|	ПрочиеВычетыФизическихЛиц.Регистратор КАК Регистратор,
	|	ПрочиеВычетыФизическихЛиц.Период КАК ПериодВычета
	|ПОМЕСТИТЬ ВТПериодПрочие
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛиц
	|		ПО ТЧРаботникиОрганизации.Физлицо = ПрочиеВычетыФизическихЛиц.ФизическоеЛицо
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) >= ПрочиеВычетыФизическихЛиц.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПрочиеВычетыФизическихЛиц.ДействуетПо = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ПрочиеВычетыФизическихЛиц.ДействуетПо >= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1)
	|		КОНЕЦ
	|	И ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|	И ПрочиеВычетыФизическихЛиц.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТПериодПрочие.ПериодВычета) КАК ПериодВычета,
	|	ВТПериодПрочие.ФизЛицо КАК ФизЛицо,
	|	ВТПериодПрочие.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ВТПериодПрочие.Период КАК Период
	|ПОМЕСТИТЬ ВТСрезПрочие
	|ИЗ
	|	ВТПериодПрочие КАК ВТПериодПрочие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПериодПрочие.ФизЛицо,
	|	ВТПериодПрочие.ВидВычетаИПН,
	|	ВТПериодПрочие.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериодПрочие.Период КАК Период,
	|	ВТПериодПрочие.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ВТПериодПрочие.ФизЛицо КАК ФизЛицо,
	|	ВТПериодПрочие.Основание КАК Основание,
	|	ВТПериодПрочие.Размер КАК Размер,
	|	ВТПериодПрочие.ДействуетС КАК ДействуетС,
	|	ВТПериодПрочие.ПериодВычета КАК ПериодВычета
	|ИЗ
	|	ВТПериодПрочие КАК ВТПериодПрочие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПрочие КАК ВТСрезПрочие
	|		ПО ВТПериодПрочие.ПериодВычета = ВТСрезПрочие.ПериодВычета
	|			И ВТПериодПрочие.ФизЛицо = ВТСрезПрочие.ФизЛицо
	|			И ВТПериодПрочие.ВидВычетаИПН = ВТСрезПрочие.ВидВычетаИПН
	|ГДЕ
	|	ВТПериодПрочие.Размер <> 0";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецЕсли