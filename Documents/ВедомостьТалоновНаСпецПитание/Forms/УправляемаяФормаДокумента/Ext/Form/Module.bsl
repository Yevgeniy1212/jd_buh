
Перем мТабельныеНомера;

Перем мГоловнаяОрганизация;

&НаКлиенте
Процедура СпискомРаботников(Команда)
	
	//Если Объект.Проведен Тогда
	//	
	//	ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличнойЧасти", ЭтотОбъект);
	//	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	//	
	//ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
	//	
	//	ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после его записи. Записать?'");
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличнойЧасти", ЭтотОбъект);
	//	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	//					
	//Иначе
	//	
		//СпискомРаботниковНаСервере();

	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Обработка.ЗаполнениеРаботников.Форма.УправляемаяФормаНастройки", , Элементы.РаботникиОрганизации, Объект.Ссылка);
	Форма.ОткрытьМодально();

КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЗаписатьОтменивПроведение();
	
	СпискомРаботниковНаСервере();

	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьПередЗаполнениемСотрудниками", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьПередЗаполнениемСотрудниками(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	ЭтотОбъект.Записать();
	
	СпискомРаботниковНаСервере();

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОтменивПроведение() 
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпискомРаботниковНаСервере()

	//Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
	//	КлючеваяОперация 	= "Документ ""ведомость талонов на спецпитание"" (автозаполнение по всем сотрудникам)";
	//	ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	//КонецЕсли;
	//
	//Документы.ВедомостьТалоновНаСпецПитание.Автозаполнение(Объект, ЭтотОбъект, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	//
	//ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПоПлановымНачислениям = Ложь;
	НачатьПодбор();	
	//ФормаВыбора = ПолучитьФорму("Справочник.СотрудникиОрганизаций.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе", Ложь), ЭтаФорма);
	//ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор()
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Ложь);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ОтборПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Объект.РаботникиОрганизации.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВExcel(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Таблица Excel (.xls)|*.xls";
	Диалог.Расширение = "xls";
	Если Диалог.Выбрать() Тогда
		АдресХрНаСервере = ВыгрузкаВExcell(Диалог.ВыбранныеФайлы[0]);
		
		//Адрес=ПолучитьФайл();
		Описание = Новый ОписаниеПередаваемогоФайла(Диалог.ВыбранныеФайлы[0], АдресХрНаСервере);
		МассивОписаний = Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,, Ложь);

		//Двоичное = ПолучитьИзВременногоХранилища(АдресХрНаСервере);
		//Сообщить(Двоичное);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервер(АдресХранилища, Расширение) Экспорт
	
	ЛокальныйАдресКаталога = КаталогВременныхФайлов();
	
	КаталогЗаписи = Новый Файл(ЛокальныйАдресКаталога);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ИмяФайла = Новый УникальныйИдентификатор;
	
	Попытка
		ДвоичныеДанные.Записать(ЛокальныйАдресКаталога + "\" + ИмяФайла + Расширение);
	Исключение
		ЗаписьЖурналаРегистрации("Запись Excel-файла на сервер.", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	ПутьНаСервере = ЛокальныйАдресКаталога + "\" + ИмяФайла + Расширение;
	
	Возврат ПутьНаСервере;
	
КонецФункции

&НаСервере
Функция ПолучитьФайл()
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьНаСервере);
	Адрес=ПоместитьВоВременноеХранилище(ДвоичныеДанные,ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;
КонецФункции

Функция ВыгрузкаВExcell(ПутьКФайлу)
//Процедура ВыгрузкаВExcell(ПутьКФайлу)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.ВедомостьТалоновНаСпецПитание.ПолучитьМакет("ВыгрузкаВExcell");
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТабДок.Вывести(Область);
	// РаботникиОрганизации
	Область = Макет.ПолучитьОбласть("РаботникиОрганизацииШапка");
	ТабДок.Вывести(Область);
	ОбластьРаботникиОрганизации = Макет.ПолучитьОбласть("РаботникиОрганизации");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Физлицо КАК Физлицо,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Должность КАК Должность,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Подразделение КАК Подразделение,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Физлицо.Код КАК КодСотрудника,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК КоличествоЗавтрак,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК КоличествоОбед,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК КоличествоУжин,
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК КоличествоНочное
	|ИЗ
	|	Документ.ВедомостьТалоновНаСпецПитание.РаботникиОрганизации КАК ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации
	|ГДЕ
	|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбластьРаботникиОрганизации.Параметры.Заполнить(Выборка);
		ОбластьРаботникиОрганизации.Параметры.КодСотрудника = "В" + Выборка.КодСотрудника;
		ОбластьРаботникиОрганизации.Параметры.КоличествоИтого = Выборка.КоличествоЗавтрак + Выборка.КоличествоОбед + Выборка.КоличествоУжин + Выборка.КоличествоНочное;
		ТабДок.Вывести(ОбластьРаботникиОрганизации);
	КонецЦикла;

	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
		
	Попытка 
		АдресХранилища = СохранитьФайлНаСервере(ПутьКФайлу, ".xls");
		ТабДок.Записать(ПутьНаСервере, ТипФайлаТабличногоДокумента.XLS);
		//АдресХранилища = СохранитьФайлНаСервере(ПутьКФайлу, ".xls");
	Исключение
		Сообщить(ОписаниеОшибки() + " возможно этот файл открыт!");
		//Возврат;
	КонецПопытки;
	
	//Эксель = Новый COMОбъект("Excel.Application");
	//Док = Эксель.Workbooks.Open(ПутьНаСервере);
	
	
	//Попытка 
	//	ТабДок.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	//Исключение
	//	Сообщить(ОписаниеОшибки() + " возможно этот файл открыт!");
	//	Возврат;
	//КонецПопытки;
	
	//Эксель = Новый COMОбъект("Excel.Application");
	//Док = Эксель.Workbooks.Open(ПутьКФайлу);
	
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьНаСервере);
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресХр = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Идентификатор);
	
	Сообщить("Выгрузка выполнена!");
	
	//Эксель.DisplayAlerts = 0;
	//Эксель.Visible = 1;
	
	Возврат АдресХр;
	
//КонецПроцедуры
КонецФункции

&НаКлиенте
Процедура ЗагрузкаВExcel(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Таблица Excel (.xls)|*.xls";
	Диалог.Расширение = "xls";
	Если Диалог.Выбрать() Тогда
		Путь = Диалог.ПолноеИмяФайла;
		//АдресХранилища = СохранитьФайлНаСервереДляЗаписи(Путь, ".xls");
		//ЗагрузкаИзExcel(Диалог.ВыбранныеФайлы[0]);
		ЗагрузкаИзExcelНаКлиенте(Диалог.ВыбранныеФайлы[0]);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗагрузкаИзExcel(ПутьКФайлу)
	
	ДубльСтроки = Новый ТаблицаЗначений;
	ДубльСтроки.Колонки.Добавить("Сотрудник");
	
	// Получаем com объект Эксель
	Попытка
		Эксель = ПолучитьCOMОбъект(,"Excel.Application");
	Исключение
		Попытка
			Эксель = Новый COMОбъект("Excel.Application");
		Исключение
			Сообщить (ОписаниеОшибки());
			Возврат
		КонецПопытки;
	КонецПопытки;
	
	// Получаем книгу Эксель (нужный нам файл) а так же Лист
	Книга = Эксель.WorkBooks.Open(ПутьНаСервере); 
	Лист = Книга.WorkSheets(1);
	
	// Метод эксель возращающий нам количетсво колонок и текущее количетсво строк листа
	ВсегоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;	
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;	
	
	// Колонки нащего файла 
	
	кКодСотрудника = 2;
	кИспТалонов = 9;
	кКомандирова = 10;
	
	Для СтрокаЭксель = 6 По ВсегоСтрок Цикл
		
		Код = "" + СокрЛП(Лист.Cells(СтрокаЭксель,кКодСотрудника).Value);
		Количество = Лист.Cells(СтрокаЭксель,кИспТалонов).Value;
		Командировка = ?(НРег(СокрЛП(Лист.Cells(СтрокаЭксель,кКомандирова).Value)) = "да", Истина, Ложь);
		
		Сотрудник = Справочники.ФизическиеЛица.НайтиПоКоду(Сред(Код,2)); // отбросим первый символ кода
		тзРО = Объект.РаботникиОрганизации.Выгрузить();
		СтрокаДокумента = тзРО.Найти(Сотрудник, "Физлицо");
		
		Если СтрокаДокумента <> Неопределено Тогда
			
			// если сотрудник встречается еще раз то суммируем количество
			Если ДубльСтроки.Найти(Сотрудник,"Сотрудник") <> Неопределено Тогда 
				СтрокаДокумента.Количество = СтрокаДокумента.Количество + Количество;
			Иначе 
				СтрокаДокумента.Количество = Количество;
			КонецЕсли;
			
			СтрокаДокумента.Командировка  = Командировка;
			// нужно будет проверять встретится ли тот же сотрудник еще раз
			СтрокаТЗ = ДубльСтроки.Добавить();
			СтрокаТЗ.Сотрудник = Сотрудник;
		КонецЕсли;
		
		тчРО = Объект.РаботникиОрганизации;
		СтрокатчРО = тчРО.Добавить();
		СтрокатчРО.КодСотрудника = Код;
		СтрокатчРО.Количество = Количество;
		СтрокатчРО.Физлицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(Сотрудник);
		СтрокатчРО.Командировка = Командировка;
		
	КонецЦикла;
	
	ЭтотОбъект.Записать();
	
	//Закрываем книгу и сам эксель при этом ответив положительно на запрос сохранить файл
	
	Книга.Close(True);
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExcelНаКлиенте(ПутьКФайлу)
	
	//ДубльСтроки = Новый ТаблицаЗначений;
	//ДубльСтроки.Колонки.Добавить("Сотрудник");
	
	// Получаем com объект Эксель
	Попытка
		Эксель = ПолучитьCOMОбъект(,"Excel.Application");
	Исключение
		Попытка
			Эксель = Новый COMОбъект("Excel.Application");
		Исключение
			Сообщить (ОписаниеОшибки());
			Возврат
		КонецПопытки;
	КонецПопытки;
	
	// Получаем книгу Эксель (нужный нам файл) а так же Лист
	Книга = Эксель.WorkBooks.Open(ПутьКФайлу); 
	Лист = Книга.WorkSheets(1);
	
	// Метод эксель возращающий нам количетсво колонок и текущее количетсво строк листа
	ВсегоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;	
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;	
	
	// Колонки нащего файла 
	кКодСотрудника = 1;
	кИспТалонов    = 12;
	кКомандирова   = 13;
    кДолжность	   = 3;
    кПодразделение = 5;
	кЗавтрак  = 6;
	кОбед    = 7;
	кУжин     = 8;
	кНочное = 9; 
	
	Для СтрокаЭксель = 5 По ВсегоСтрок Цикл
		Код = "" + СокрЛП(Лист.Cells(СтрокаЭксель, кКодСотрудника).Value);
		Количество    = Лист.Cells(СтрокаЭксель, кИспТалонов).Value;
		Командировка  = ?(НРег(СокрЛП(Лист.Cells(СтрокаЭксель, кКомандирова).Value)) = "да", Истина, Ложь);
		Должность     = Лист.Cells(СтрокаЭксель, кДолжность).Value;
		Подразделение = Лист.Cells(СтрокаЭксель, кПодразделение).Value;
		
		Сотрудник = НайтиСотрудника(Код);  // отбросим первый символ кода
		
		Приказ = ПолучитьПриказФЛ(Сотрудник); 
		
		СтрокаДокумента = НайтиДубль(Сотрудник);
		
		Завтрак  = Лист.Cells(СтрокаЭксель, кЗавтрак).Value;;
		Обед    = Лист.Cells(СтрокаЭксель, кОбед).Value;;
		Ужин     = Лист.Cells(СтрокаЭксель, кУжин).Value;;
		Ночное = Лист.Cells(СтрокаЭксель, кНочное).Value;; 
		
		
		Если СтрокаДокумента Тогда
			// если сотрудник встречается еще раз то суммируем количество
			Для Каждого Стр Из Объект.РаботникиОрганизации Цикл 
				Если Стр.Физлицо = Сотрудник Тогда
					Стр.КоличествоЗавтрак = Стр.КоличествоЗавтрак + ?(Завтрак = Неопределено, 0, Завтрак);
					Стр.КоличествоОбед = Стр.КоличествоОбед + ?(Обед = Неопределено, 0, Обед);
					Стр.КоличествоУжин = Стр.КоличествоУжин + ?(Ужин = Неопределено, 0, Ужин);
					Стр.КоличествоНочное = Стр.КоличествоНочное + ?(Ночное = Неопределено, 0, Ночное);
					
					Стр.Командировка  = Командировка;
					//Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			тчРО = Объект.РаботникиОрганизации;
			СтрокатчРО = тчРО.Добавить();
			СтрокатчРО.КодСотрудника = Код;
			СтрокатчРО.КоличествоЗавтрак = Завтрак;
			СтрокатчРО.КоличествоОбед 	 = Обед;
			СтрокатчРО.КоличествоУжин 	 = Ужин;
			СтрокатчРО.КоличествоНочное  = Ночное;
			СтрокатчРО.Должность     = НайтиДолжность(Должность);   
			СтрокатчРО.Подразделение = НайтиПодразделение(Подразделение);   
			СтрокатчРО.Физлицо       = Сотрудник;
			СтрокатчРО.Командировка  = Командировка;
			СтрокатчРО.Приказ = Приказ;
			Если Приказ = Неопределено Тогда
				СтрокатчРО.Договорник = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
	КонецЦикла;
	
	Сообщить("Загрузка выполнена!");
	
	//Закрываем книгу и сам эксель при этом ответив положительно на запрос сохранить файл
	Книга.Close(True);
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция НайтиСотрудника(Код)
	
	Возврат Справочники.ФизическиеЛица.НайтиПоКоду(Сред(Код, 2));	
	
КонецФункции

&НаСервере
Функция НайтиДолжность(Эл)
	
	Возврат Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Эл);
	
КонецФункции

&НаСервере
Функция НайтиПодразделение(Эл)
	
	Возврат Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(Эл);
	
КонецФункции


&НаСервере
Функция НайтиДубль(Сотрудник)
	
	тзРО = Объект.РаботникиОрганизации.Выгрузить();
	СтрокаДокумента = тзРО.Найти(Сотрудник, "Физлицо");
	
	Если СтрокаДокумента = Неопределено Тогда
		Найден = Ложь;
	Иначе
		Найден = Истина;
	КонецЕсли;
	
	Возврат Найден;
	
КонецФункции
	
&НаКлиенте
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//мФормаПодбора = ПолучитьФорму("ОбщаяФорма.ФормаВыбораРаботникаОрганизации", , Элементы.РаботникиОрганизации, Объект.Ссылка);
	//// поле Физлицо есть безусловно
	//Если мФормаПодбора.Открыта() Тогда  
	//	// Если выбор произошел в форме подбора и этого физлица в документе пока нет, 
	//	// добавим новую строку в таблицу 
	//	
	//	//Если глЗначениеПеременной1("глУчетнаяПолитикаПоПерсоналуОрганизации")[Объект.Организация].ПоддержкаВнутреннегоСовместительства Тогда
	//		СтруктураПоиска = Новый Структура("ФизЛицо,Приказ", ВыбранноеЗначение.ФизЛицо,ВыбранноеЗначение.Приказ);
	//	//Иначе
	//	//	СтруктураПоиска = Новый Структура("ФизЛицо", ВыбранноеЗначение.ФизЛицо);
	//	//КонецЕсли;
	//	
	//	// получим должность и подразделение
	//	
	//	Значение = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ЭтаФорма, Элемент, ВыбранноеЗначение.Физлицо, Объект.Организация, , );//глЗначениеПеременной1("глУчетнаяПолитикаПоПерсоналуОрганизации")
	//	
	//	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
	//		СтрокаТабличнойЧасти = Объект.РаботникиОрганизации.Добавить();
	//		СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
	//		СтрокаТабличнойЧасти.Должность = Значение.Должность;
	//		СтрокаТабличнойЧасти.Подразделение = Значение.ПодразделениеОрганизации;
	//		СтрокаТабличнойЧасти.Приказ = ВыбранноеЗначение.Приказ;
	//		СтрокаТабличнойЧасти.КодСотрудника = ВыбранноеЗначение.Физлицо.Код;
	//	КонецЕсли;
	//	
	//	
	//Иначе // иначе обновим данные строки
	//	Элемент.ТекущиеДанные.Физлицо = ВыбранноеЗначение.Физлицо;
	//	Элемент.ТекущиеДанные.КодСотрудника = ВыбранноеЗначение.Физлицо.Код;
	//	Элемент.ТекущаяСтрока.Приказ = ВыбранноеЗначение.Приказ;		
	//	
	//КонецЕсли;
	
	//СтандартнаяОбработка = Ложь;
	
	ОбработатьПодборНаСервере(ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНаСервере(АдресВременногоХранилища)
	
	тзВыборка = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если тзВыборка.Количество() = 0 Тогда
	
		Сообщить("Не обнаружены данные для записи в табличную часть документа!");
		Возврат;
	
	КонецЕсли; 
	Объект.РаботникиОрганизации.Очистить();
	
	тзВыборка.свернуть("Сотрудник,Приказ,Подразделение,Должность,Договорник");
	
	Для каждого Строка Из тзВыборка Цикл
				
		СтрокаТЧ = Объект.РаботникиОрганизации.Добавить();
		
		СтрокаТЧ.Физлицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(Строка.Сотрудник);
		СтрокаТЧ.Приказ = Строка.Приказ;
		СтрокаТЧ.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(Строка.Подразделение);
		СтрокаТЧ.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Строка.Должность);
		СтрокаТЧ.Договорник =  Строка.Договорник;
		
	КонецЦикла; 
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ПриОткрытииНаСервере();
		
	КонецЕсли;
	
	//НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	Если Этаформа.ТолькоПросмотр Тогда
		Элементы.КоманднаяПанель.Доступность=ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()

	мГоловнаяОрганизация = ОбщегоНазначенияБК.ГоловнаяОрганизация(Объект.Организация);
	
	//мФормаПодбора = ПолучитьОбщуюФорму("ФормаВыбораРаботникаОрганизации", Элементы.РаботникиОрганизации, Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("000003202");
		Объект.ОтраженВУчете = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Организация = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(),"ОсновнаяОрганизация");
		Объект.ВидПоступления = Справочники.ВидыПоступления.НайтиПоКоду("100000005");
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииФизлицоПриИзменении(Элемент)
	
	НомерСтр = Элементы.РаботникиОрганизации.ТекущиеДанные.НомерСтроки;
	ВыбранноеЗначение = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, Элементы.РаботникиОрганизации.ТекущиеДанные.Физлицо, ТекущаяДата());
	ПроставитьДанныеПриИзмененииФизлица(НомерСтр, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьДанныеПриИзмененииФизлица (НомерСтр, ВыбранноеЗначение)
	
	ТекущаяСтрока = Объект.РаботникиОрганизации.Получить(НомерСтр-1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекущаяСтрока.Физлицо.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СотрудникОрг = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		СотрудникОрг = Выборка.Ссылка;
	КонецЦикла;

	// если не строка таблицы значений значит выбран не из регистра работники организаций 
	Если СотрудникОрг = Неопределено Тогда
		ТекущаяСтрока.Подразделение  = Неопределено;
		ТекущаяСтрока.Должность      = Неопределено;
		ТекущаяСтрока.Приказ		 = Неопределено;
		// если выбран не из регистра работники организаций предпологаем что договорник
		ТекущаяСтрока.Договорник = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Подразделение = ВыбранноеЗначение.ПодразделениеОрганизации;
	ТекущаяСтрока.Должность = ВыбранноеЗначение.Должность;
	ТекущаяСтрока.Договорник = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокКомандированных(Команда)
	
	Если НЕ Объект.Проведен Тогда 
		Сообщить("Для печати документ необходимо провести!");
		Возврат;
	КонецЕсли;
	Печать().Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговорников(Команда)
	
	Если НЕ Объект.Проведен Тогда 
		Сообщить("Для печати документ необходимо провести!");
		Возврат;
	КонецЕсли;
	
	Печать(Истина).Показать();

КонецПроцедуры

&НаСервере
Функция Печать(Договорник = Ложь)
	
	ДатаНомер = Объект.Номер + " от " + Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
	ПризнакФормирования = ?(Договорник,"Список договорников","Список командированных");
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.ВедомостьТалоновНаСпецПитание.ПолучитьМакет("Печать");
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ДатаНомер = ДатаНомер;
	Область.Параметры.ПризнакФормирования = ПризнакФормирования;
	ТабДок.Вывести(Область);
	// РаботникиОрганизации
	Область = Макет.ПолучитьОбласть("РаботникиОрганизацииШапка");
	ТабДок.Вывести(Область);
	ОбластьРаботникиОрганизации = Макет.ПолучитьОбласть("РаботникиОрганизации");
	
	Если Договорник Тогда 
		Условие = " ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Договорник ";
	Иначе 
		Условие = " ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Командировка ";
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Физлицо КАК Физлицо,
		|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК Количество,
		|	(ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) КАК СуммаСНДС,
		|	(ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) КАК НДС,
		|	(ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) КАК Сумма
		|ИЗ
		|	Документ.ВедомостьТалоновНаСпецПитание.РаботникиОрганизации КАК ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации
	|ГДЕ " +
	Условие +"
	|	И ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка = &Ссылка
	| ИТОГИ  Сумма(Количество), Сумма(Сумма),Сумма(СуммаСНДС),Сумма(НДС) ПО Общие";
	
	
		//"ВЫБРАТЬ
		//|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Физлицо КАК Физлицо,
		//|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК Количество,
		//|	(ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) КАК СуммаСНДС,
		//|	(ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) - 100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) КАК НДС,
		//|	(ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаЗавтрак * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоЗавтрак КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаОбед * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоОбед КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаУжин * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоУжин КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(100 * (ВЫРАЗИТЬ(ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.ЦенаНочное * ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.КоличествоНочное КАК ЧИСЛО(15, 2))) / (ВЫРАЗИТЬ(100 + ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка.Номенклатура.СтавкаНДС.Ставка КАК ЧИСЛО(15, 2))) КАК ЧИСЛО(15, 2))) КАК Сумма
		//|ИЗ
		//|	Документ.ВедомостьТалоновНаСпецПитание.РаботникиОрганизации КАК ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации
		//|ГДЕ
		//|	ВедомостьТалоновНаСпецПитаниеРаботникиОрганизации.Ссылка = &Ссылка
		//|ИТОГИ
		//|	СУММА(Количество),
		//|	СУММА(СуммаСНДС),
		//|	СУММА(НДС),
		//|	СУММА(Сумма)
		//|ПО
		//|	ОБЩИЕ";

	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий()  Цикл 
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьРаботникиОрганизации.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьРаботникиОрганизации);
		КонецЦикла;

	//Итоги
	Итоги = Макет.ПолучитьОбласть("Итого");
	Итоги.Параметры.ИтогоКоличество = ВыборкаИтоги.Количество;
	Итоги.Параметры.ИтогоСуммаБезНДС = ВыборкаИтоги.Сумма;
	Итоги.Параметры.ИтогоСуммаСНДС = ВыборкаИтоги.СуммаСНДС;
    Итоги.Параметры.ИтогоНДС = ВыборкаИтоги.НДС;
	ТабДок.Вывести(Итоги);
	
	КонецЦикла;
	//Подвал
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Подвал);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура Спецпитание(Команда)
	
	ОткрытьФорму("РегистрСведений.Спецпитание.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура  ОбработкаВыбораНаСервере(ВыбранноеЗначение)
		Значение = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, ВыбранноеЗначение.ФизЛицо,ТекущаяДата());//глЗначениеПеременной1("глУчетнаяПолитикаПоПерсоналуОрганизации")
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтрокаТабличнойЧасти = Объект.РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.ФизЛицо;
		СтрокаТабличнойЧасти.Должность = Значение.Должность;
		СтрокаТабличнойЧасти.Подразделение = Значение.ПодразделениеОрганизации;
		СтрокаТабличнойЧасти.Приказ = ПолучитьПриказ(ВыбранноеЗначение.Ссылка);
		СтрокаТабличнойЧасти.КодСотрудника = ВыбранноеЗначение.Физлицо.Код;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПриказ(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|		ПО СотрудникиОрганизаций.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		|			И СотрудникиОрганизаций.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПриказФЛ(Сотрудник)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Сотрудник.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		СотрудникОрг = Выборка.Ссылка;
	КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|		ПО СотрудникиОрганизаций.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		|			И СотрудникиОрганизаций.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", СотрудникОрг);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;


КонецФункции 
 

&НаСервере
Функция СохранитьФайлНаСервере(ИмяФайла, Расширение = ".xls")
	
	ЛокальныйАдресКаталога = КаталогВременныхФайлов();
	
	КаталогЗаписи = Новый Файл(ЛокальныйАдресКаталога);
	Идентификатор = Новый УникальныйИдентификатор;
	
	ПутьНаСервере = ЛокальныйАдресКаталога + "\" + Идентификатор + Расширение;
	
	Возврат ПутьНаСервере; 
	
КонецФункции

&НаСервере
Функция СохранитьФайлНаСервереДляЗаписи(ИмяФайла, Расширение = ".xls")
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Идентификатор);
	
	Возврат ЗаписатьНаСервер(АдресХранилища, Расширение);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТЧ(Команда)
	
	ИзменитьТабличнуюЧасть("РаботникиОрганизации", "Работники организации");
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Физлицо");
	СтруктураРеквизитов.Вставить("Должность");
	СтруктураРеквизитов.Вставить("Подразделение");
	СтруктураРеквизитов.Вставить("Командировка");
	СтруктураРеквизитов.Вставить("ПериодНачало");
	СтруктураРеквизитов.Вставить("ПериодКонец");
	СтруктураРеквизитов.Вставить("Приказ");
	СтруктураРеквизитов.Вставить("Договорник");
	СтруктураРеквизитов.Вставить("КодСотрудника");
	СтруктураРеквизитов.Вставить("КоличествоЗавтрак");
	СтруктураРеквизитов.Вставить("КоличествоОбед");
	СтруктураРеквизитов.Вставить("КоличествоУжин");
	СтруктураРеквизитов.Вставить("КоличествоНочное");
	
	//СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратБУ", "СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3");
	//СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	//ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
			
	Модифицированность = Истина;
	
КонецПроцедуры

