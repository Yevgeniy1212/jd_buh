#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДоступныеВидыОпераций(Объект) Экспорт
    
    ДоступныеОперации = Новый Массив;
    ИсключаемыеОперации = Новый Массив;
	
	ОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Объект.Организация, Объект.Дата);
	
    Если НЕ ОрганизацияЯвляетсяВкладчикомОППВ Тогда 
        ИсключаемыеОперации.Добавить(Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов);
    КонецЕсли;
    
    Для Каждого ВидОперации Из Перечисления.ВидыОперацийОПВПеречислениеВФонды Цикл
        Если ИсключаемыеОперации.Найти(ВидОперации) <> Неопределено Тогда 
            Продолжить;
        КонецЕсли;
        ДоступныеОперации.Добавить(ВидОперации);
	КонецЦикла;
	
	Возврат ДоступныеОперации;

КонецФункции

Функция ДоступныеДокументыОснования(ВидОперации) Экспорт
	
	ДоступныеДокументы = Новый Массив;
	ИсключаемыеДокументы = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов Тогда
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
		ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
		
	КонецЕсли;
	
	Для Каждого ВидОперацииОснования Из Перечисления.ВидыОперацийРасчетПени Цикл
		Если ИсключаемыеДокументы.Найти(ВидОперацииОснования) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ДоступныеДокументы.Добавить(ВидОперацииОснования);
	КонецЦикла;
	
	Возврат ДоступныеДокументы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт
	
	ВидОперации = Параметры.ВидОперации;

	ДанныеРеглУчетаТекст = "";
	ДанныеПоСотрудникам = "";
	
	УсловиеНаПодразделение = "";

	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) И Параметры.ПорядокЗаполнения = 0 Тогда
		УсловиеНаПодразделение = " И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
	КонецЕсли;
	
	УсловиеНаПодразделение = УсловиеНаПодразделение + "И РаботникиОрганизацийСрезПоследних.СтруктурноеПодразделение = &парамСтруктурноеПодразделение";

	Если Параметры.ПорядокЗаполнения = 1 Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурнаяЕдиница = &СтруктурнаяЕдиница ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации)
		ИЛИ  (ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов) 
		ИЛИ  (ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)Тогда

		ДанныеПоСотрудникам = ДанныеРеглУчетаТекст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_РаботникиОрганизаций
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизации.Период
		|			КОНЕЦ) КАК Период
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		И РаботникиОрганизации.Период <= &парамНачало
		|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		И РаботникиОрганизации.Активность
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизации.Сотрудник.Физлицо) КАК ДатыПоследнихНазначений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
		|		ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
		|			И (ДатыПоследнихНазначений.Период = ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
		|			КОНЕЦ)
		|			И (РаботникиОрганизацийСрезПоследних.Организация = &парамГоловнаяОрганизация)
		|			И (РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизацийСрезПоследних.Активность)
		|			И (ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				И ДатыПоследнихНазначений.Период < НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ)
		|					ТОГДА ДатыПоследнихНазначений.ФизЛицо <> РаботникиОрганизацийСрезПоследних.Организация.ИндивидуальныйПредприниматель
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|								" + УсловиеНаПодразделение + "		
		|		
		|;
		|";
		
	КонецЕсли;
	
	Если Не Параметры.ПоУдельномуВесу Тогда
		ДанныеОсновнойЗапрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОПВРасчетыСФондамиОстатки.Физлицо КАК ФизЛицо, 
		|	ОПВРасчетыСФондамиОстатки.Физлицо.Наименование,
		|	ОПВРасчетыСФондамиОстатки.ВзносОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления." + Параметры.ВидРегистра + ".Остатки(
		|				&парамГраницаОстатков,
		|				Организация = &парамОрганизация" + УсловиеСтруктурноеПодразделение + "
		|				И ВидПлатежа = &парамВидПлатежа
		|				И " + ?(Параметры.ПоОстаткам, "
		|					МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
		|					МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + ") КАК ОПВРасчетыСФондамиОстатки";
		ДанныеРеглУчетаТекст = ДанныеПоСотрудникам + ДанныеОсновнойЗапрос;
	Иначе
		ДанныеОсновнойЗапрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОПВРасчетыСФондамиОстатки.Физлицо КАК ФизЛицо,
		|	ОПВРасчетыСФондамиОстатки.Физлицо.Наименование,
		|	ОПВРасчетыСФондамиОстатки.ВзносОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
		|				&парамГраницаОстатков,
		|				Организация = &парамОрганизация" + УсловиеСтруктурноеПодразделение + "			
		|				И " + ?(Параметры.ПоОстаткам, "
		|					МесяцВыплатыДоходов <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
		|					МесяцВыплатыДоходов МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + ") КАК ОПВРасчетыСФондамиОстатки";
		ДанныеРеглУчетаТекст = ДанныеПоСотрудникам + ДанныеОсновнойЗапрос;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)Тогда 
		
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо";
		
		Если Параметры.ПорядокЗаполнения = 0 Тогда //  по сотрудникам организации
			ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
			"
			|ГДЕ
			|	НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
			|";
		Иначе  // по непринятым лицам
			ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
			"
			|ГДЕ
			|	РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
			|";
		КонецЕсли; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда

		ДанныеПоОПВР = ДанныеОсновнойЗапрос +
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо";

		ДанныеПоОПВР = ДанныеПоОПВР + "
			|ГДЕ
			|	НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
			|"; 
				
		ДанныеОсновнойЗапрос = СтрЗаменить(ДанныеОсновнойЗапрос, "РАЗРЕШЕННЫЕ", "");
		ДанныеОсновнойЗапрос = СтрЗаменить(ДанныеОсновнойЗапрос, "Организация = &парамОрганизация", "Организация = &парамОрганизация И СтруктурнаяЕдиница = &СтруктурнаяЕдиница"); 
		ДанныеПоОПВР = ДанныеПоОПВР +  
		"		ОБЪЕДИНИТЬ 
		| " + ДанныеОсновнойЗапрос +
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
		|";

		ДанныеПоОПВР = ДанныеПоОПВР +
	   	"
		|ГДЕ
		|	РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";
			
		ДанныеРеглУчетаТекст = ДанныеПоСотрудникам + ДанныеПоОПВР;
	КонецЕсли;
	
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + "
	|УПОРЯДОЧИТЬ ПО
	|	ОПВРасчетыСФондамиОстатки.Физлицо.Наименование
	|";
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	Если Параметры.ПорядокЗаполнения = 1 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
		Если ЗначениеЗаполнено(Параметры.парамСтруктурноеПодразделение) Тогда
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамСтруктурноеПодразделение);
		Иначе
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамОрганизация);
		КонецЕсли;
	КонецЕсли;
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Сумма) И Выборка.Сумма > 0 Тогда
			НоваяСтрока = Параметры.ТаблицаПенсионныеВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаПенсионныеВзносы", Параметры.ТаблицаПенсионныеВзносы); 
	 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
	
КонецПроцедуры 

// Процедура выполняет расчет строк табличной части документа по данным регистров.
//
// Параметры: ВариантРасчета = "НаДатуДокумента" на дату, "НаКонецМесяца" на конец месяца
//            Исчисление (тип "Булево") = Истина в случае заполнения исчисленными суммами ОПВ
//            							  Ложь в случае заполнения удержанными суммами ОПВ по НУ (суммы к перечислению)
//
Процедура ПодготовитьДанныеДляРасчета(Параметры, АдресХранилища) Экспорт
	
	Если Не Параметры.ПоУдельномуВесу Тогда
		ДанныеРеглУчетаТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОПВПеречислениеВФондыПенсионныеВзносы.НомерСтроки,
		|	ОПВПеречислениеВФондыПенсионныеВзносы.Физлицо,
		|	ОПВРасчетыСФондамиОстатки.ВзносОстаток КАК Сумма
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + Параметры.ВидРегистра + ".Остатки(
		|					&парамГраницаОстатков,
		|					Организация = &парамОрганизация
		|					И ВидПлатежа = &парамВидПлатежа
		|					И " + ?(Параметры.ПоОстаткам, "
		|						МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
		|						МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + "
		|					И ФизЛицо В (ВЫБРАТЬ
		|										ФизЛицо
		|									ИЗ
		|										Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК Док
		|									ГДЕ
		|										Док.Ссылка = &парамСсылка)) КАК ОПВРасчетыСФондамиОстатки
		|			ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
		|
		|ГДЕ
		|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = &парамСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОПВПеречислениеВФондыПенсионныеВзносы.НомерСтроки";
	Иначе
		ДанныеРеглУчетаТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОПВПеречислениеВФондыПенсионныеВзносы.НомерСтроки,
		|	ОПВПеречислениеВФондыПенсионныеВзносы.Физлицо,
		|	ОПВРасчетыСФондамиОстатки.ВзносОстаток КАК Сумма
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
		|					&парамГраницаОстатков,
		|					Организация = &парамОрганизация		
		|					И " + ?(Параметры.ПоОстаткам, "
		|						МесяцВыплатыДоходов <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
		|						МесяцВыплатыДоходов МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + "
		|					И ФизЛицо В (ВЫБРАТЬ
		|										ФизЛицо
		|									ИЗ
		|										Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК Док
		|									ГДЕ
		|										Док.Ссылка = &парамСсылка)) КАК ОПВРасчетыСФондамиОстатки
		|			ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
		|
		|ГДЕ
		|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = &парамСсылка		
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОПВПеречислениеВФондыПенсионныеВзносы.НомерСтроки";
	КонецЕсли;
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаПенсионныеВзносы", Запрос.Выполнить().Выгрузить()); 
	 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
			
КонецПроцедуры

Процедура ЗаполнитьПоРасчетПениОПВиСО(Объект, Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидПлатежа = Основание.ВидПлатежа;
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ ИЛИ 
		Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР ИЛИ 
		Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя;
		
	Иначе
		
		Объект.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов; 

	КонецЕсли;
	
	Объект.ДокументОснование = Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетПени.ФизЛицо,
	|	СУММА(РасчетПени.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК РасчетПени
	|ГДЕ
	|	РасчетПени.Ссылка = &Основание
	|	И РасчетПени.МесяцНалоговогоПериода МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|СГРУППИРОВАТЬ ПО
	|	РасчетПени.ФизЛицо
	|";
	
	Объект.ПенсионныеВзносы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Объект.ДокументОснование = Основание;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецЕсли