
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.ТребованиеНакладная.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, Константы.ВалютаРегламентированногоУчета.Получить());
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
	
	//++Кибернетика Беляев Е.И. 24.01.2025	
	Если ОбъектКопирования.флНовыйРасчет = Истина Тогда		
		 ЭтотОбъект.флНовыйРасчет = Ложь;
		 ЭтотОбъект.РасчетЛЗК.Очистить();
		 ЭтотОбъект.НоменклГрупыЛЗК.Очистить(); 
		 ЭтотОбъект.Материалы.Очистить();
	КонецЕсли;	
	//--Кибернетика Беляев Е.И. 24.01.2025
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ УчитыватьКПН Тогда
		 МассивНепроверяемыхРеквизитов.Добавить("Материалы.СчетНУ");
		 МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНУ");
		 МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли; 
	
	Если Материалы.Количество() > 0 
		И МатериалыЗаказчика.Количество() = 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыЗаказчика");		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");		
		
	ИначеЕсли Материалы.Количество() = 0 
		И МатериалыЗаказчика.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Материалы");		
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Материалы.Количество() > 0 Тогда 
		Документы.ТребованиеНакладная.ПроверитьЗаполнениеСтатьиЗатрат(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		ТаблицаДокумента = НомераГТДСервер.ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(Материалы, Истина, Склад);
		ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект,ТаблицаДокумента, ТаблицаНомераГТД);
	КонецЕсли;


	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") 
		ИЛИ (ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") И НЕ ДополнительныеСвойства.ВыполненаПроверкаЗаполнения) Тогда 
		
		Отказ = НЕ ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ТребованиеНакладная.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаСписанныеМатериалы = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТаблицаМатериалы,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	ТаблицаСписанныеМатериалыЗаказчика = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТаблицаМатериалыЗаказчика,
		ПараметрыПроведения.РеквизитыМатериалыЗаказчика, Отказ);
		
	//КОНТРОЛЬ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ
	НомераГТДСервер.ВыполнитьКонтрольТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, , Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);		
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеМатериалы,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеМатериалыЗаказчика,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);

	//Контротек ВК ->начало
	СформироватьДвиженияСписаниеНаПродукцию();
	
	СформироватьДвиженияСписаниеСРаспределениемНаПродукцию(ТаблицаСписанныеМатериалы, Движения, Отказ);
	
	СформироватьДвиженияИспользованиеНормЛЗК(Движения);
	//Контротек ВК ->конец


	//Евгений+   
	Для каждого Строка из Материалы Цикл
		Если Строка.ОприходоватьНаЗабалансовыйСчет Тогда
			ОприходоватьНаЗабалансовыйСчет(Строка);	
		КонецЕсли;
	КонецЦикла;
	
	
	Для каждого Строка из ТоварыЗабаланс Цикл
		ОтразитьПроводкиТоварыЗабаланс(Строка);
	КонецЦикла;
	
	//Евгений-

КонецПроцедуры

//Евгений+
Процедура ОприходоватьНаЗабалансовыйСчет(СтрокаДанных)
	
	Если СтрокаДанных.СчетБУ.Код="1310" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеСырьеИМатериалы;
	ИначеЕсли СтрокаДанных.СчетБУ.Код="1313" Тогда
		Счет=ПланыСчетов.Типовой.СписанноеТопливо;
	ИначеЕсли СтрокаДанных.СчетБУ.Код="1315" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
	ИначеЕсли СтрокаДанных.СчетБУ.Код="1316" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы; 
	Иначе 
		Счет = СтрокаДанных.СчетБУ;
	КонецЕсли;
	
	
	//Если СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ПокупныеМатериалыКомплектующиеИзделия Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.Топливо Тогда
	//	Счет = ПланыСчетов.Типовой.СписанноеТопливо;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ТараИТарныеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписаннаяТараИТарныеМатериалы;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ЗапасныеЧасти Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ПрочиеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.СтроительныеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеСтроительныеМатериалы;
	//Иначе 
	//	Счет = СтрокаДанных.СчетУчетаБУ;
	//КонецЕсли;

	
	ПроводкаБУ = Движения.Типовой.Добавить();
	ПроводкаБУ.СчетДт = Счет;
	ПроводкаБУ.Период = Дата;
	ПроводкаБУ.Организация = Организация;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДТ, 1, СтрокаДанных.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Склад);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, МОЛ);
	ПроводкаБУ.КоличествоДт = СтрокаДанных.Количество;
	ПроводкаБУ.Содержание = "Списание ТМЗ"; 
	
	Движения.Типовой.Записывать = Истина;
	
КонецПроцедуры  


Процедура ОтразитьПроводкиТоварыЗабаланс(СтрокаДанных)
	
	//Движения.Типовой.Записывать = Истина;
	
	ПроводкаБУ = Движения.Типовой.Добавить();
	ПроводкаБУ.Период = Дата;
	ПроводкаБУ.СчетКт = СтрокаДанных.СчетУчетаБУ;
	ПроводкаБУ.Организация = Организация;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, СтрокаДанных.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Склад);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 3, МОЛ);
	ПроводкаБУ.КоличествоКт = СтрокаДанных.Количество;
	ПроводкаБУ.Содержание = "Списание ТМЗ с забаланса";
	
	Движения.Типовой.Записывать = Истина;
	
	//Если СтрокаДанных.СчетУчетаБУ = ПланыСчетов.Типовой.МатериалыВторичногоИспользованияГПР Тогда
	//	Движение = Движения.ДвижениеМатериаловВторичногоИспользованияГПР.ДобавитьРасход();
	//	Движение.Период = Дата;
	//	Движение.Организация = Организация;
	//	Движение.Номенклатура = СтрокаДанных.Номенклатура;
	//	Движение.Склады = Склад;
	//	Движение.МОЛ = МОЛ;
	//	Движение.БлокиГПР = СтрокаДанных.БлокГПР;
	//	Движение.Количество = СтрокаДанных.Количество;
	//	
	//	Движения.ДвижениеМатериаловВторичногоИспользованияГПР.Записывать = Истина;
	//КонецЕсли;
	
	Если СтрокаДанных.ОприходоватьНаЗабалансовыйСчет Тогда
		ПроводкаБУ = Движения.Типовой.Добавить();
		ПроводкаБУ.СчетДт = ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
		ПроводкаБУ.Период = Дата;
		ПроводкаБУ.Организация = Организация;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДТ, 1, СтрокаДанных.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Склад);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ЭтотОбъект.МОЛ);
		ПроводкаБУ.КоличествоДт = СтрокаДанных.Количество;
		ПроводкаБУ.Содержание = "Списание ТМЗ с забаланса"; 
		
		Движения.Типовой.Записывать = Истина;
	КонецЕсли; 
	
КонецПроцедуры

//Евгений-

//Контротек. -----------------------------------------------
Процедура СформироватьДвиженияСписаниеНаПродукцию()
	////////////////////////////////TS START//////////////////////////////////////// 
	// Автор: Ананьев А.А.
	// Дата: 22.12.2008
	
	ИтогПоказательРаспределенияНом = РаспределениеПоНоменклатуре.Итог("ПоказательРаспределения");
	Если ВидОперации = Перечисления.ВидыОперацийТебованияНакладной.СписаниеНаПродукцию Тогда
		Если Не (СчетЗатратБУ = ПланыСчетов.Типовой.ВспомогательныеПроизводства ИЛИ СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство) Тогда
			Сообщить("Для данного вида операции должен быть установлен счет учета прямых затрат. Проведение прервано.");
			Отказ = Истина;
		КонецЕсли;
		//Подготовим таблицу для проведения по регистру TS_РасходМатериаловПоПродукции
		ТаблицаРасходМатериаловПоПродукции = Новый ТаблицаЗначений;
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Период");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Регистратор");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Организация");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Подразделение");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("ПодразделениеИсточник");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Продукция");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("ВидСкважины");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Номенклатура");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("СтатьяЗатрат");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("СчетУчетаЗатрат");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("ШифрПроизводственныхЗатрат");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Сумма");
		ТаблицаРасходМатериаловПоПродукции.Колонки.Добавить("Количество");
		Подразделение	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КоличествоСубконто = СчетЗатратБУ.ВидыСубконто.Количество();
		Для Счетчик = 1 По КоличествоСубконто Цикл
			Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
				Подразделение	= ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
			КонецЕсли;
		КонецЦикла;
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
		Для Счетчик = 1 По КоличествоСубконто Цикл
			Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
				СтатьяЗатрат	= ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
			КонецЕсли;
		КонецЦикла;
		ТаблицаДвижения	= Новый ТаблицаЗначений;
		ТаблицаДвижения	= Движения.Типовой.Выгрузить();
		Для каждого СтрокаДвижения из ТаблицаДвижения Цикл
			НоваяСтр				= ТаблицаРасходМатериаловПоПродукции.Добавить();
			НоваяСтр.Период         = Дата;
			НоваяСтр.Регистратор    = ЭтотОбъект.Ссылка;
			НоваяСтр.Организация    = Организация;
			НоваяСтр.Подразделение  = Подразделение;
			НоваяСтр.ПодразделениеИсточник = Подразделение;
			НоваяСтр.Продукция      = Номенклатура;
			НоваяСтр.ВидСкважины    = Номенклатура.ВидСкважины;
			НоваяСтр.ШифрПроизводственныхЗатрат    = ШифрПроизводственныхЗатрат;
			СписанныйМатериал = Справочники.Номенклатура.ПустаяСсылка();
			КоличествоСубконто = СтрокаДвижения.СчетКт.ВидыСубконто.Количество();
			Для Счетчик = 1 По КоличествоСубконто Цикл
				Если СтрокаДвижения["ВидСубконтоКт"+Счетчик] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура Тогда
					СписанныйМатериал	= СтрокаДвижения["СубконтоКт"+Счетчик];
				КонецЕсли;
			КонецЦикла;
			НоваяСтр.Номенклатура   = СписанныйМатериал;
			НоваяСтр.СчетУчетаЗатрат= СчетЗатратБУ;
			НоваяСтр.Сумма          = СтрокаДвижения.Сумма;
			НоваяСтр.Количество     = СтрокаДвижения.КоличествоКт;
			НоваяСтр.СтатьяЗатрат   = СтатьяЗатрат;
		КонецЦикла;
		НаборЗаписей = РегистрыНакопления.ЗатратыНаПродукцию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Загрузить(ТаблицаРасходМатериаловПоПродукции);
		НаборЗаписей.Записать();
		
		//БИТ
	//	ПроведениеОборотыПоБюджетам(ТаблицаРасходМатериаловПоПродукции);
		
		ДвиженияПоРегНезавершенноеПроизводство = Движения.НезавершенноеПроизводствоДетальноПоПродукции;
		ТаблицаДвижений = ТаблицаРасходМатериаловПоПродукции.Скопировать();
		ТаблицаДвижений.Свернуть("Подразделение, Продукция, СтатьяЗатрат","Сумма");
		ТаблицаДвижений.Колонки.Добавить("Организация");
		ТаблицаДвижений.Колонки.Добавить("Период");
		ТаблицаДвижений.Колонки.Добавить("ВидДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		ДвиженияПоРегНезавершенноеПроизводство.Загрузить(ТаблицаДвижений);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТебованияНакладной.СписаниеСРаспределениемНаПродукцию Тогда
		//Подготовим таблицу для проведения по регистру ЗатратыНаПродукцию
		ТаблицаРасходМатериаловПоСкважинам = Новый ТаблицаЗначений;
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Период");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Регистратор");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Организация");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Подразделение");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("ПодразделениеИсточник");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Продукция");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("ВидСкважины");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Номенклатура");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("СтатьяЗатрат");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("СчетУчетаЗатрат");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("ШифрПроизводственныхЗатрат");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Сумма");
		ТаблицаРасходМатериаловПоСкважинам.Колонки.Добавить("Количество");
		
		ТаблицаДвиженийПоБухучету = Движения.Типовой.Выгрузить();
		Если ТаблицаДвиженийПоБухучету.Количество()>0 Тогда
			СтрокаДвижения = ТаблицаДвиженийПоБухучету[0];
			КоличествоСубконто = СтрокаДвижения.СчетКт.ВидыСубконто.Количество();
			НомерСубконтоНоменклатуры = 0;
			Для Счетчик = 1 По КоличествоСубконто Цикл
				Если СтрокаДвижения["ВидСубконтоКт"+Счетчик] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура Тогда
					ТаблицаДвиженийПоБухучету.Свернуть("СубконтоКт"+Счетчик,"Сумма,КоличествоКт");
					НомерСубконтоНоменклатуры = Счетчик;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого СтрокаТаблицыМатериалов Из ТаблицаДвиженийПоБухучету Цикл
				
				СуммаОсталосьРаспределить = СтрокаТаблицыМатериалов.Сумма;
				КоличествоОсталосьРаспределить = СтрокаТаблицыМатериалов.КоличествоКт;
				КоличествоСубконтоДт = СчетЗатратБУ.ВидыСубконто.Количество();
				пНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				пСтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
				пПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				пНоменклатура = СтрокаТаблицыМатериалов["СубконтоКт"+НомерСубконтоНоменклатуры];
				
				Для Счетчик = 1 По КоличествоСубконтоДт Цикл
					Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
						пСтатьяЗатрат = ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
					ИначеЕсли СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						пПодразделение = ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
					КонецЕсли;
					
				КонецЦикла;
				Для каждого СтрокаТаблицыРаспределенияПоНом Из РаспределениеПоНоменклатуре Цикл
					СуммаСписать = Окр(СтрокаТаблицыМатериалов.Сумма*СтрокаТаблицыРаспределенияПоНом.ПоказательРаспределения/ИтогПоказательРаспределенияНом,2);
					КоличествоСписать = Окр(СтрокаТаблицыМатериалов.КоличествоКт*СтрокаТаблицыРаспределенияПоНом.ПоказательРаспределения/ИтогПоказательРаспределенияНом,2);
					СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - СуммаСписать;
					КоличествоОсталосьРаспределить = КоличествоОсталосьРаспределить - КоличествоСписать;
					НоваяСтрока = ТаблицаРасходМатериаловПоСкважинам.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = ЭтотОбъект.Ссылка;
					НоваяСтрока.Организация = Организация;
					НоваяСтрока.Подразделение = СтрокаТаблицыРаспределенияПоНом.Подразделение;
					НоваяСтрока.ПодразделениеИсточник = пПодразделение;
					НоваяСтрока.Продукция = СтрокаТаблицыРаспределенияПоНом.Продукция;
					НоваяСтрока.ВидСкважины = СтрокаТаблицыРаспределенияПоНом.ВидСкважины;
					НоваяСтрока.Номенклатура = пНоменклатура;
					НоваяСтрока.СтатьяЗатрат = пСтатьяЗатрат;
					НоваяСтрока.СчетУчетаЗатрат = СчетЗатратБУ;
					НоваяСтрока.ШифрПроизводственныхЗатрат    = ШифрПроизводственныхЗатрат;
					НоваяСтрока.Сумма = СуммаСписать;
					НоваяСтрока.Количество = КоличествоСписать;
				КонецЦикла;
				Если СуммаОсталосьРаспределить <> 0 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + СуммаОсталосьРаспределить;
				КонецЕсли;
				Если КоличествоОсталосьРаспределить <> 0 Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + КоличествоОсталосьРаспределить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей = РегистрыНакопления.ЗатратыНаПродукцию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Загрузить(ТаблицаРасходМатериаловПоСкважинам);
		НаборЗаписей.Записать();
		
		//БИТ
	//	ПроведениеОборотыПоБюджетам(ТаблицаРасходМатериаловПоСкважинам);
		
		ДвиженияПоРегНезавершенноеПроизводство = Движения.НезавершенноеПроизводствоДетальноПоПродукции;
		ТаблицаДвижений = ТаблицаРасходМатериаловПоСкважинам.Скопировать();
		ТаблицаДвижений.Свернуть("Подразделение, Продукция, СтатьяЗатрат","Сумма");
		ТаблицаДвижений.Колонки.Добавить("Организация");
		ТаблицаДвижений.Колонки.Добавить("Период");
		ТаблицаДвижений.Колонки.Добавить("ВидДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		ДвиженияПоРегНезавершенноеПроизводство.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	//////////////////////////////TS FINISH///////////////////////////////////////
	
КонецПроцедуры

Процедура СформироватьДвиженияИспользованиеНормЛЗК(Движения)
	Если ЭтотОбъект.флНовыйРасчет Тогда
		//КТ_2016.07.30
		Движения.ИспользованиеНормЛЗК.Записывать = Истина;
		Если Не Номенклатура.Пустая() Тогда
			Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Для Счетчик = 1 По СчетЗатратБУ.ВидыСубконто.Количество() Цикл
				Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					Подразделение = ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
				КонецЕсли;
			КонецЦикла;
			
			СтрукОсн = Новый Структура("Период, Принята, Участок, ВидСкважины, БуровойАгрегат", Дата, Принята, Номенклатура.УчастокБурения, Номенклатура.ВидСкважины, Подразделение);
			тзНорм = РасчетЛЗК.Выгрузить();
			тзНорм.Свернуть("НоменклатурнаяГруппа,ОстатокНормы,Норма","Количество");
			Для каждого Стр Из НоменклГрупыЛЗК Цикл
				//проверка****************
				Если Стр.РезультатНорма>0 Тогда
					//проверяем - установлен ли флаг разрешить списать больше нормы**
					найтиСтр00 = РасчетЛЗК.Найти(Стр.НоменклатурнаяГруппа,"НоменклатурнаяГруппа");
					
					если найтиСтр00.ВидРасчетаЛЗК<> Перечисления.КТ_ВидРасчетаЛЗК.СписатьОстатокСверхНормы и найтиСтр00.ВидРасчетаЛЗК<> Перечисления.КТ_ВидРасчетаЛЗК.СписатьФакт Тогда
						Сообщить("Для "+Стр.НоменклатурнаяГруппа+" не разрешено списание больше нормы!");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
				//***********************
				Зап = Движения.ИспользованиеНормЛЗК.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Зап, СтрукОсн);
				ЗаполнитьЗначенияСвойств(Зап, Стр);
				Зап.Норма = Стр.ПоНормеНаФактОбъем;
				
				Зап = Движения.ИспользованиеНормЛЗК.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Зап, СтрукОсн);
				ЗаполнитьЗначенияСвойств(Зап, Стр);
				Зап.Норма = Стр.КоличКСписанию;
			КонецЦикла;
		КонецЕсли;
	иначе	
		Движения.ИспользованиеНормЛЗК.Записывать = Истина;
		Если РасчетЛЗК_Выполнен И Не Номенклатура.Пустая() Тогда
			Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Для Счетчик = 1 По СчетЗатратБУ.ВидыСубконто.Количество() Цикл
				Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					Подразделение = ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
				КонецЕсли;
			КонецЦикла;
			
			СтрукОсн = Новый Структура("Период, Принята, Участок, ВидСкважины, БуровойАгрегат", Дата, Принята, Номенклатура.УчастокБурения, Номенклатура.ВидСкважины, Подразделение);
			тзНорм = РасчетЛЗК.Выгрузить();
			тзНорм.Свернуть("НоменклатурнаяГруппа,ОстатокНормы,Норма","Количество");
			Для каждого Стр Из тзНорм Цикл
				Если Стр.Норма<>0 Тогда
					Зап = Движения.ИспользованиеНормЛЗК.ДобавитьПриход();
					ЗаполнитьЗначенияСвойств(Зап, СтрукОсн);
					ЗаполнитьЗначенияСвойств(Зап, Стр);
					Зап.Норма = Стр.Норма;
				КонецЕсли;
				
				Зап = Движения.ИспользованиеНормЛЗК.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Зап, СтрукОсн);
				ЗаполнитьЗначенияСвойств(Зап, Стр);
				Зап.Норма = Стр.Количество;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДвиженияСписаниеСРаспределениемНаПродукцию(ТаблицаМатериалов, Движения, Отказ)
	////////////////////////////////TS START//////////////////////////////////////// 
	// Автор: Ананьев А.А. Дата: 23.12.2008
	
	//Описание: Предупредим если в ШЗ подразделение не равно подразделению в субконто
	КоличествоСубконто = СчетЗатратБУ.ВидыСубконто.Количество();
	//Если ТекстСообщения=Неопределено Тогда
	//	ТекстСообщения="";
	//КонецЕсли;
	
	Для Счетчик = 1 По КоличествоСубконто Цикл
		Если СчетЗатратБУ.ВидыСубконто[Счетчик-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
			Если Не ЗначениеЗаполнено(ЭтотОбъект["СубконтоЗатратБУ"+Счетчик]) Тогда
				Сообщить("Не заполненна аналитика Подразделение");
				Отказ	= Истина;
			Иначе
				ВремПодразделение = ЭтотОбъект["СубконтоЗатратБУ"+Счетчик];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийТебованияНакладной.СписаниеСРаспределениемНаПродукцию  Тогда
		//Распределим материалы 
		Если РаспределениеЗатрат.Количество() = 0 Тогда
			Сообщить("Нет данных по распределению. Проведение прервано.", СтатусСообщения.Внимание);
			Отказ = Истина;
		Иначе
			ВременнаяТаблицаМатериалов = ТаблицаМатериалов.Скопировать();
			ТаблицаМатериалов.Очистить();
			
			ИтогПоказательРаспределенияНГ  = РаспределениеЗатрат.Итог("ПоказательРаспределения");
			ИтогПоказательРаспределенияНом = РаспределениеПоНоменклатуре.Итог("ПоказательРаспределения");
			
			Для каждого СтрокаТаблицыМатериалов Из ВременнаяТаблицаМатериалов Цикл
				КоличествоОсталосьРаспределитьПоНГ = СтрокаТаблицыМатериалов.Количество;
				Для каждого СтрокаТаблицыРаспределенияПоНГ Из РаспределениеЗатрат Цикл
					КоличествоСписать = Окр(СтрокаТаблицыМатериалов.Количество*СтрокаТаблицыРаспределенияПоНГ.ПоказательРаспределения/ИтогПоказательРаспределенияНГ,3);
					КоличествоОсталосьРаспределитьПоНГ = КоличествоОсталосьРаспределитьПоНГ - КоличествоСписать; 
					
					НоваяСтрока = ТаблицаМатериалов.Добавить();
					НоваяСтрока.Количество = КоличествоСписать;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыМатериалов);
					
					Если Лев(СтрокаТаблицыМатериалов.КорСчетСписанияБУ.Код, 2)<> "81" 
						или ВремПодразделение.ВидПодразделения=Перечисления.ВидыПодразделений.Освоение	Тогда
						НоваяСтрока.КорСубконтоСписанияБУ1 = СубконтоЗатратБУ1;//
					Иначе
						НоваяСтрока.КорСубконтоСписанияБУ1 = СтрокаТаблицыРаспределенияПоНГ.Подразделение;//
					КонецЕсли;
					НоваяСтрока.КорСубконтоСписанияБУ2 = СубконтоЗатратБУ2;
					Если Лев(СтрокаТаблицыМатериалов.КорСчетСписанияБУ.Код, 2)<> "84" Тогда
						НоваяСтрока.КорСубконтоСписанияБУ2 = СтрокаТаблицыРаспределенияПоНГ.НоменклатурнаяГруппа;
					КонецЕсли;
					//НоваяСтрока.КорСубконтоСписанияБУ3 = СтрокаТаблицыМатериалов.КорСубконтоСписанияБУ3;
					//НоваяСтрока.КорСубконтоСписанияНУ1 = СтрокаТаблицыМатериалов.КорСубконтоСписанияНУ1;
					//НоваяСтрока.КорСубконтоСписанияНУ2 = СтрокаТаблицыМатериалов.КорСубконтоСписанияНУ2;	
					//НоваяСтрока.КорСубконтоСписанияНУ3 = СтрокаТаблицыМатериалов.КорСубконтоСписанияНУ3;	
					//НоваяСтрока.КорСчетСписанияБУ = СтрокаТаблицыМатериалов.КорСчетСписанияБУ;
					//НоваяСтрока.КорСчетСписанияНУ = СтрокаТаблицыМатериалов.КорСчетСписанияНУ;
					//НоваяСтрока.КоэффОплаты = СтрокаТаблицыМатериалов.КоэффОплаты;
					//НоваяСтрока.Номенклатура = СтрокаТаблицыМатериалов.Номенклатура;
					//НоваяСтрока.НомерСтроки = СтрокаТаблицыМатериалов.НомерСтроки;
					//НоваяСтрока.НомерСтроки1 = СтрокаТаблицыМатериалов.НомерСтроки1;
					//НоваяСтрока.Организация = СтрокаТаблицыМатериалов.Организация;
					//НоваяСтрока.Регистратор = СтрокаТаблицыМатериалов.Регистратор;
					//НоваяСтрока.Склад = СтрокаТаблицыМатериалов.Склад;
					//НоваяСтрока.СчетУчетаБУ = СтрокаТаблицыМатериалов.СчетУчетаБУ;
					//НоваяСтрока.СчетУчетаНУ = СтрокаТаблицыМатериалов.СчетУчетаНУ;
				КонецЦикла;
				Если КоличествоОсталосьРаспределитьПоНГ <> 0 Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + КоличествоОсталосьРаспределитьПоНГ;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
    ТаблицаМатериалов.Свернуть("Организация, КоэффОплаты, Коэффициент, Склад, ДоговорКонтрагента, ДоговорПоставщика,ДокументОприходования, валюта, ВходящийНДС, СчетУчетаБУ, КорСчетСписанияБУ, КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3, СчетУчетаНУ, КорСчетСписанияНУ, КорСубконтоСписанияНУ1, КорСубконтоСписанияНУ2, КорСубконтоСписанияНУ3, Регистратор, Номенклатура","Количество ");
	КонецЕсли;
	////////////////////////////////TS FINISH/////////////////////////////////////// 
	
	Если НЕ Отказ Тогда
		
		//TS_Автор: Грицик К.Н.
		//Описание: Создадим проводки если счет не 8110
		////Если (СчетЗатратБУ.Код <> "8210") и (СчетЗатратБУ.Код <> "8110") Тогда
		//TS_Start
		СуммаДокумента	= Движения.Типовой.Итог("Сумма");
		Записать();
		//TS_Finish
		Если ВидОперации = Перечисления.ВидыОперацийТебованияНакладной.СписаниеСРаспределениемНаПродукцию  Тогда
			Если ((ШифрПроизводственныхЗатрат.ПодразделениеОрганизации <> ВремПодразделение)) или           //и(ВремПодразделение.ВидПодразделения=Перечисления.ВидыПодразделений.Освоение)
				(СчетЗатратБУ.Код <> "8110")  Тогда
				// всегда , если источник и приемник - разные подразделения 
				КоличествоМатериалов=Материалы.Количество();
				НомерПроводки=1;
				//////Если (ШифрПроизводственныхЗатрат.ПодразделениеОрганизации.ВидПодразделения	= Перечисления.ВидыПодразделений.Бригада) или (ШифрПроизводственныхЗатрат.ПодразделениеОрганизации.ВидПодразделения	= Перечисления.ВидыПодразделений.Участок) Тогда
				// даже для просто подразделений, чтобы распределить на все скважины
				НДТиповой = Движения.Типовой.Выгрузить();
				//Для ЦиклПоМатериалам=1 по КоличествоМатериалов Цикл
				//	СтрокаМатериалов=Материалы.Получить(ЦиклПоМатериалам-1);
				Для Каждого СтрокаНДТиповой из НДТиповой Цикл
					СуммаОсталосьРаспределитьПоНГ = СтрокаНДТиповой.Сумма;
					
					Для Каждого СтрокаРаспределениеЗатрат из РаспределениеЗатрат Цикл
						//СтрокаНДТиповой= НДТиповой.Получить(НомерПроводки-1);
						//Если СтрокаНДТиповой.СубконтоКт2 = СтрокаМатериалов.Номенклатура Тогда 
						НовСтрПроводки				= Движения.Типовой.Добавить();
						НовСтрПроводки.Организация	= СтрокаНДТиповой.Организация;
						НовСтрПроводки.Период		= СтрокаНДТиповой.Период;
						НовСтрПроводки.Содержание	= СтрокаНДТиповой.Содержание;
						НовСтрПроводки.Сумма		= Окр(СтрокаНДТиповой.Сумма*СтрокаРаспределениеЗатрат.ПоказательРаспределения/ИтогПоказательРаспределенияНГ,3);   ///СтрокаНДТиповой.Сумма;///
						СуммаОсталосьРаспределитьПоНГ = СуммаОсталосьРаспределитьПоНГ - НовСтрПроводки.Сумма; 
						НовСтрПроводки.СчетДт		= ПланыСчетов.Типовой.ОсновноеПроизводство;
						НовСтрПроводки.СубконтоДт.Подразделения	= СтрокаРаспределениеЗатрат.Подразделение; //ШифрПроизводственныхЗатрат.ПодразделениеОрганизации;
						//НовСтрПроводки.СубконтоДт.НоменклатурныеГруппы = СтрокаРаспределениеЗатрат.НоменклатурнаяГруппа;
						
						НовСтрПроводки.СчетКт       = СтрокаНДТиповой.СчетДт;
						НовСтрПроводки.СубконтоКт.Подразделения	= СтрокаНДТиповой.СубконтоДт1;
						Если Лев(СчетЗатратБУ.Код, 2)<> "84" Тогда
							НовСтрПроводки.СубконтоДт.НоменклатурныеГруппы = СтрокаНДТиповой.СубконтоДт2;
							НовСтрПроводки.СубконтоКт.НоменклатурныеГруппы	= СтрокаНДТиповой.СубконтоДт2;
							НовСтрПроводки.СубконтоДт.СтатьиЗатрат	= СтрокаНДТиповой.СубконтоДт3;
							НовСтрПроводки.СубконтоКт.СтатьиЗатрат	= СтрокаНДТиповой.СубконтоДт3;
						Иначе
							НовСтрПроводки.СубконтоДт.НоменклатурныеГруппы = СтрокаРаспределениеЗатрат.НоменклатурнаяГруппа;
							НовСтрПроводки.СубконтоДт.СтатьиЗатрат	= СтрокаНДТиповой.СубконтоДт2;
							НовСтрПроводки.СубконтоКт.СтатьиЗатрат	= СтрокаНДТиповой.СубконтоДт2;
						КонецЕсли;
						//НомерПроводки=НомерПроводки+1;
						//КонецЕсли;
					КонецЦикла;
					Если СуммаОсталосьРаспределитьПоНГ <> 0 Тогда
						НовСтрПроводки.Сумма = НовСтрПроводки.Сумма + СуммаОсталосьРаспределитьПоНГ;
					КонецЕсли;
				КонецЦикла;
				//////КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	////////////////////////////////TS FINISH/////////////////////////////////////// 

КонецПроцедуры

#КонецЕсли