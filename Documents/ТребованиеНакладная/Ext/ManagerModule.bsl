#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Организация, СтрокаТЧ, ЗаполнятьНУ, ВключаяЗаполненные = Истина) Экспорт

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетБУ) Тогда
		СтрокаТЧ.СчетБУ = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Если ЗаполнятьНУ = Истина Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетНУ) Тогда
			СтрокаТЧ.СчетНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;   		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаЗатрат(Объект) Экспорт
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаЗатратВТабличнойЧасти(Объект, ТабличнаяЧасть) Экспорт
	
	Для Каждого ТекСтрока Из Объект[ТабличнаяЧасть] Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, ТекСтрока, Объект.УчитыватьКПН);
	КонецЦикла; 
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ЗаполнитьПоДокументуОснования(Объект, Основание) Экспорт
	
	Объект.Материалы.Очистить();
	Объект.НомераГТД.Очистить();
	Объект.МатериалыЗаказчика.Очистить();
	Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		Объект.ДокументОснование = Основание;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Объект.Контрагент      = Основание.Контрагент;
			ТабличнаяЧасть         = Объект.МатериалыЗаказчика;
			СтрокаТабЧасть         = "Материалы заказчика";
		Иначе
			ТабличнаяЧасть         = Объект.Материалы;
			СтрокаТабЧасть         = "Материалы";
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			Если СтрокаТабЧасть = "Материалы" Тогда
				  		
				СтруктураПоиска.Вставить("Номенклатура",ТекСтрокаТовары.Номенклатура); 		
				СтруктураПоиска.Вставить("ЕдиницаИзмерения",ТекСтрокаТовары.ЕдиницаИзмерения);
											                                                             		
				НоваяСтрока = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ТекСтрокаТовары, ТабличнаяЧасть, Объект.НомераГТД);				
				
				ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НоваяСтрока, Объект.УчитыватьКПН);							
					
			Иначе
				
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.Количество   = ТекСтрокаТовары.Количество; 				
				
				СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, НоваяСтрока.Номенклатура);
				НоваяСтрока.Счет         = СчетаУчета.СчетУчетаДавСырья;
				НоваяСтрока.СчетПередачи = СчетаУчета.СчетПередачиЗаб;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			СтруктураПоиска.Вставить("Номенклатура"    , ТекСтрокаТовары.Номенклатура); 		
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ТекСтрокаТовары.ЕдиницаИзмерения);
			
			НоваяСтрока = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ТекСтрокаТовары, Объект.Материалы, Объект.НомераГТД);				

			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НоваяСтрока, Объект.УчитыватьКПН И 
				(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Или Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
						
		КонецЦикла;
		
		Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ)
					, , , Объект.Дата);
	
	КонецЕсли;
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Или (ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))) Тогда
		
		Объект.СчетЗатратБУ       = Основание.СчетЗатратБУ;
		Объект.СубконтоЗатратБУ1  = Основание.ПодразделениеОрганизации;
		Объект.СубконтоЗатратБУ2  = Основание.НоменклатурнаяГруппа; 
		Объект.СубконтоЗатратБУ3  = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
								
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Результат = РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "АктОбОказанииПроизводственныхУслуг.Услуги");
		Иначе
			Результат = РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "ОтчетПроизводстваЗаСмену.Продукция", Объект.Номенклатура);
		КонецЕсли;
		
		ТаблицаМатериалов = Результат.Выгрузить();

		ТаблицаМатериалов.Свернуть("Номенклатура, ЕдиницаИзмерения", "Количество");

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			
			Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
				
				СтруктураПоиска.Вставить("Номенклатура"    , СтрокаМатериалов.Номенклатура); 		
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаМатериалов.ЕдиницаИзмерения);				
				НоваяСтрока = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаМатериалов, Объект.Материалы, Объект.НомераГТД);
				
			КонецЦикла;   			
		Иначе
			Объект.Материалы.Загрузить(ТаблицаМатериалов);
		КонецЕсли;
		
		Для Каждого ТекСтрока Из Объект.Материалы Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, ТекСтрока, Объект.УчитыватьКПН И 
				(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			ТекСтрока.Коэффициент = 1;
		КонецЦикла;
		
		Если Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
			Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ)
					, , , Объект.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СчетЗатратНУ) ТОгда
			Объект.СубконтоЗатратНУ1 = Основание.ПодразделениеОрганизации;
			Объект.СубконтоЗатратНУ2 = Основание.НоменклатурнаяГруппа; 
			Объект.СубконтоЗатратНУ3 = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
		КонецЕсли;		

	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
	
		Для Каждого ТекСтрокаМатериалыЗаказчика Из Основание.МатериалыЗаказчика Цикл
			НоваяСтрока = Объект.МатериалыЗаказчика.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаМатериалыЗаказчика.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаМатериалыЗаказчика.Номенклатура;
			НоваяСтрока.Счет 			= ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
			НоваяСтрока.СчетПередачи 	= ТекСтрокаМатериалыЗаказчика.СчетУчета;
		КонецЦикла;
		
		Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ)
					, , , Объект.Дата);
	
	КонецЕсли;
	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
	
		Объект.Номенклатура = Основание.Владелец;
		
		Для Каждого ТекСтрокаТовары Из Основание.ИсходныеКомплектующие Цикл
			
			НоваяСтрока = Объект.Материалы.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       = ТекСтрокаТовары.Количество;
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НоваяСтрока, Объект.УчитыватьКПН И 
				(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент      = 1;
					
		КонецЦикла;
				
		Если Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
			Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ)
					, , , Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	//**************************************
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеВспомогательныхТМЗ") Тогда
		
		// Заполнение шапки
		Объект.Склад        = Основание.МОЛ;
		СтрокаТЧ            = Объект.Материалы;
		СтрокаТабЧасть      = "Материалы";
		Объект.Комментарий	= "Создан на основании " + Основание.Ссылка;
		Если СтрокаТЧ.Количество() > 0  Тогда
			#Если Клиент Тогда
				ТекстВопроса = "Очистить табличную часть """ + СтрокаТабЧасть + """ перед заполнением?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтрокаТЧ.Очистить();
				КонецЕсли; 
			#КонецЕсли 			
		КонецЕсли;   		
		
		Для Каждого ТекСтрокаТовары Из Основание.тбСписание Цикл
			
			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       = ТекСтрокаТовары.КоличествоСписать;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент      = 1;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НоваяСтрока, Объект.УчитыватьКПН И 
			                              (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			НоваяСтрока.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетБУ)
					, , , Объект.Дата);
		КонецЦикла;
		
		Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ)
					, , , Объект.Дата);

		#Если Клиент Тогда
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
															"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
															СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Требование накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТребованиеНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Требование накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// М11
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьМ11";
	КомандаПечати.Представление = НСтр("ru = 'М-11 (Требование накладная)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// З6
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьЗ6";
	КомандаПечати.Представление = НСтр("ru = 'З-6 (Акт списания запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТребованиеНакладная,ПечатьМ11,ПечатьЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТребованиеНакладная,ПечатьМ11,ПечатьЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТребованиеНакладная,ПечатьМ11,ПечатьЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
	//++Кибернетика Беляев Е.И. от 09.10.2024 АктСписанияПоЛЗК
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьАктСписанияПоЛЗК";
	КомандаПечати.Представление = НСтр("ru = 'Акт списания по ЛЗК'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 53;
    //++Кибернетика Беляев Е.И. от 09.10.2024 АктСписанияПоЛЗК
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать требования накладной
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТребованиеНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьТребованиеНакладная",
			НСтр("ru = 'Требование-накладная'"),
			ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПечатьТребованиеНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

	// Печать формы М-11
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьМ11") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьМ11",
			НСтр("ru = 'М-11 (Требование накладная)'"),
			ПечатьМ11(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ТребованиеНакладная.ПФ_MXL_М11");
	КонецЕсли;

	// Печать формы З-6
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗ6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьЗ6",
			НСтр("ru = 'З-6 (Акт списания запасов)'"),
			//Евгений+
			//ПечатьЗ6(МассивОбъектов, ОбъектыПечати),
			ПечатьЗ9(МассивОбъектов, ОбъектыПечати), 
			//Евгений-
			,
			"ОбщийМакет.ПФ_MXL_З6");
	КонецЕсли;
	
	//++Кибернетика Беляев Е.И. от 09.10.2024 Печать формы ПечатьАктСписанияПоЛЗК
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьАктСписанияПоЛЗК") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьАктСписанияПоЛЗК",
			НСтр("ru = 'Акт списания по ЛЗК'"),
			ПечатьАктСписанияПоЛЗК(МассивОбъектов, ОбъектыПечати), 
			,
			"Документ.ТребованиеНакладная.ПФ_MXL_АктСписанияПоЛЗК");
	КонецЕсли;
   	//--Кибернетика Беляев Е.И. от 09.10.2024 Печать формы ПечатьАктСписанияПоЛЗК
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная", КодЯзыка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ТребованиеНакладная_Накладная";

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Ссылка КАК Ссылка,
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребованиеНакладная.Ссылка.Номер КАК Номер,
	|	ТребованиеНакладная.Ссылка.Дата КАК Дата,
	|	ТребованиеНакладная.НомерСтроки КАК НомерСтроки,
	|	ТребованиеНакладная.Ссылка.Организация КАК Организация,
	|	ТребованиеНакладная.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТребованиеНакладная.Ссылка.Склад КАК Склад,
	|	ТребованиеНакладная.Номенклатура.Код КАК Код,
	|	ВЫРАЗИТЬ(ТребованиеНакладная.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Имя,
	|	ТребованиеНакладная.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ТребованиеНакладная.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	|	ТребованиеНакладная.Количество КАК Количество,
	|	ТребованиеНакладная.Ссылка КАК Ссылка,
	|	0 КАК Метка
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребованиеНакладная.Ссылка.Номер,
	|	ТребованиеНакладная.Ссылка.Дата, 
	|	ТребованиеНакладная.НомерСтроки,
	|	ТребованиеНакладная.Ссылка.Организация,
	|	ТребованиеНакладная.Ссылка.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Ссылка.Склад,
	|	ТребованиеНакладная.Номенклатура.Код,
	|	ВЫРАЗИТЬ(ТребованиеНакладная.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ТребованиеНакладная.Номенклатура."+ ТекстКодАртикул + ",
	|	ТребованиеНакладная.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ТребованиеНакладная.Количество,
	|	ТребованиеНакладная.Ссылка,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Шапка.Ссылка КАК Ссылка,
	|	ВТ_Шапка.Номер КАК Номер,
	|	ВТ_Шапка.Дата КАК Дата,
	|	ВТ_Шапка.Организация КАК Организация,
	|	ВТ_Шапка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_Шапка.Склад КАК Склад,
	|	ВТ_ТЧ.Код КАК Код,
	|	ВТ_ТЧ.Имя КАК Имя,
	|	ВТ_ТЧ.КодАртикул КАК КодАртикул,
	|	ВТ_ТЧ.ЕдИзм КАК ЕдИзм,
	|	ВТ_ТЧ.Количество КАК Количество,
	|	ВТ_ТЧ.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТЧ.Метка КАК Метка
	|ИЗ
	|	ВТ_Шапка КАК ВТ_Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЧ КАК ВТ_ТЧ
	|		ПО ВТ_Шапка.Ссылка = ВТ_ТЧ.Ссылка 
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТЧ.Метка,
	|	ВТ_ТЧ.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение),
	|	МАКСИМУМ(Склад)
	|ПО
	|	Ссылка";
			
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Требование-накладная'", КодЯзыка),,,,КодЯзыка);
		Область.Параметры.Заполнить(Шапка);
		Область.Параметры.Организация = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть(ОбластьШапки);
		
		Если ВыводитьКоды Тогда
			Область.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(Область);
		
		ВыборкаПоСтрокам = Шапка.Выбрать();
		НомерТекущий = 1;
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокам.Код) Тогда
				Продолжить;
			КонецЕсли; 
			
			Область = Макет.ПолучитьОбласть(ОбластьСтроки);
			Область.Параметры.Заполнить(ВыборкаПоСтрокам);
			Область.Параметры.НомерТекущий = НомерТекущий;
			Если ВыводитьКоды Тогда
				Область.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
			КонецЕсли; 
			ТабДокумент.Вывести(Область);
			НомерТекущий = НомерТекущий + 1;
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Шапка.Организация, ПолучитьМОЛ(Шапка.Дата, Шапка.Склад), Шапка.Дата);
			Область.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
		КонецЕсли;	
		
		ТабДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент; 
	
КонецФункции

Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_М11");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка = КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ТребованиеНакладная_М11";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Ссылка КАК Ссылка,
	|	ТребованиеНакладная.Номер КАК НомерДокумента,
	|	ТребованиеНакладная.Дата КАК ДатаДокумента,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатратБУ,
	|	ТребованиеНакладная.СубконтоЗатратБУ1,
	|	ТребованиеНакладная.СубконтоЗатратБУ2,
	|	ТребованиеНакладная.СубконтоЗатратБУ3
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТребованиеНакладнаяМатериалы.Ссылка.Номер КАК НомерДокумента,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Дата КАК ДатаДокумента, 
	|	ТребованиеНакладнаяМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Организация КАК Организация,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Склад КАК Склад,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ТребованиеНакладнаяМатериалы.Ссылка КАК Ссылка,
	|	ТребованиеНакладнаяМатериалы.СчетБУ КАК Счет,
	|	ТребованиеНакладнаяМатериалы.Номенклатура КАК Материал,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.НаименованиеПолное КАК МатериалНаименование,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.Код КАК НоменклатурныйНомер,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТребованиеНакладнаяМатериалы.Количество,
	|	0 КАК Метка
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка В(&ТекущийДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Номер,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Дата,
	|	ТребованиеНакладнаяМатериалыЗаказчика.НомерСтроки,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Организация,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СтруктурноеПодразделение,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Склад,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СчетЗатратБУ,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СубконтоЗатратБУ1,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СубконтоЗатратБУ2,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СубконтоЗатратБУ3,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Счет,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.НаименованиеПолное,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.Код,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Количество,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТребованиеНакладнаяМатериалыЗаказчика
	|ГДЕ
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка В(&ТекущийДокумент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Шапка.Ссылка КАК Ссылка,
	|	ВТ_Шапка.НомерДокумента КАК НомерДокумента,
	|	ВТ_Шапка.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_Шапка.Организация КАК Организация,
	|	ВТ_Шапка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_Шапка.Склад КАК Склад,
	|	ВТ_Шапка.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВТ_Шапка.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВТ_Шапка.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВТ_Шапка.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВТ_ТЧ.Счет КАК Счет,
	|	ВТ_ТЧ.Материал КАК Материал,
	|	ВТ_ТЧ.МатериалНаименование КАК МатериалНаименование,
	|	ВТ_ТЧ.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТЧ.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ВТ_ТЧ.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВТ_ТЧ.Количество КАК Количество,
	|	ВТ_ТЧ.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТЧ.Метка КАК Метка
	|ИЗ
	|	ВТ_Шапка КАК ВТ_Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЧ КАК ВТ_ТЧ
	|		ПО ВТ_Шапка.Ссылка = ВТ_ТЧ.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТЧ.Метка,
	|	ВТ_ТЧ.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(СчетЗатратБУ),
	|	МАКСИМУМ(СубконтоЗатратБУ1),
	|	МАКСИМУМ(СубконтоЗатратБУ2),
	|	МАКСИМУМ(СубконтоЗатратБУ3)
	|ПО
	|	Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заголовок                = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ТРЕБОВАНИЕ-НАКЛАДНАЯ № %1'", КодЯзыка), ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка));
		Область.Параметры.КодОКПО                  = СтруктурнаяЕдиницаОрганизация.КодПоОКПО;
		Область.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
		Область.Параметры.ДатаСоставления          = Формат(Шапка.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ=dd.MM.yy");
		Область.Параметры.Склад                    = Шапка.Склад;
		Область.Параметры.КоррСчет                 = Шапка.СчетЗатратБУ.Код;
		
		Для Счетчик = 1 по 3 Цикл			
			ТекСубконто = Шапка["СубконтоЗатратБУ" + Счетчик];
			Если ЗначениеЗаполнено(ТекСубконто) Тогда
				Если  ТипЗнч(ТекСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					Область.Параметры.ПредставлениеПодразделения = ТекСубконто;
					Прервать;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
		
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Строка");
		
		// Поиск сумм списания активов для заполнения Цены и Суммы
		ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(Шапка.Ссылка);
		КоличествоОтпущено  = 0;
		СуммаБезНДС         = 0;
		
		ВыборкаДетальныеЗаписи = Шапка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатурныйНомер) Тогда
				Продолжить;
			КонецЕсли; 
			
			Область.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаДетальныеЗаписи.Материал, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				Область.Параметры.Цена = 0;
				Область.Параметры.Сумма = 0;
				Цена = 0;
			Иначе
				Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
				Область.Параметры.Цена  = Цена;
				Область.Параметры.Сумма = Цена * ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			КоличествоОтпущено  = КоличествоОтпущено + ВыборкаДетальныеЗаписи.Количество;
			СуммаБезНДС         = СуммаБезНДС + (Цена * ВыборкаДетальныеЗаписи.Количество);
			
			ТабДокумент.Вывести(Область);
			
		КонецЦикла;
		
		//выводим итоги
		Область = Макет.ПолучитьОбласть("Итоги");
		Область.Параметры.КоличествоОтпущено = КоличествоОтпущено;
		Область.Параметры.СуммаБезНДС        = СуммаБезНДС;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Подвал");
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Шапка.Организация, ПолучитьМОЛ(Шапка.ДатаДокумента, Шапка.Склад), Шапка.ДатаДокумента);
			Область.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
			Область.Параметры.ДолжностьМОЛ = ДанныеМОЛ.Должность;
		КонецЕсли;	
		
		ТабДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьЗ6(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З6"); 
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка = КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "ТребованиеНакладная_З6";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК ДатаДокумента,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад КАК СкладПредставление
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Ссылка.Номер КАК Номер,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Дата КАК ДатаДокумента,
	|	ТребованиеНакладнаяМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Организация КАК Организация,
	|	ТребованиеНакладнаяМатериалы.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Склад КАК СкладПредставление,
	|	ТребованиеНакладнаяМатериалы.Ссылка КАК Ссылка,
	|	ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.Код КАК НоменклатурныйНомер,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ТребованиеНакладнаяМатериалы.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТребованиеНакладнаяМатериалы.Количество,
	|	0 КАК Метка
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка В(&ТекущийДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Номер,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Дата,
	|	ТребованиеНакладнаяМатериалыЗаказчика.НомерСтроки,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Организация,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.СтруктурноеПодразделение,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка.Склад,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.НаименованиеПолное,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.Код,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ТребованиеНакладнаяМатериалыЗаказчика.Количество,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТребованиеНакладнаяМатериалыЗаказчика
	|ГДЕ
	|	ТребованиеНакладнаяМатериалыЗаказчика.Ссылка В(&ТекущийДокумент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Шапка.Ссылка КАК Ссылка,
	|	ВТ_Шапка.Номер КАК Номер,
	|	ВТ_Шапка.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_Шапка.Организация КАК Организация,
	|	ВТ_Шапка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_Шапка.СкладПредставление КАК СкладПредставление,
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.ТоварНаименование КАК ТоварНаименование,
	|	ВТ_ТЧ.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТЧ.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ВТ_ТЧ.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВТ_ТЧ.Количество КАК Количество,
	|	ВТ_ТЧ.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТЧ.Метка КАК Метка
	|ИЗ
	|	ВТ_Шапка КАК ВТ_Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЧ КАК ВТ_ТЧ
	|		ПО ВТ_Шапка.Ссылка = ВТ_ТЧ.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТЧ.Метка,
	|	ВТ_ТЧ.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение),
	|	МАКСИМУМ(СкладПредставление)
	|ПО
	|	Ссылка";
	
	ЗапросИнвентаризационнаяКомиссия = Новый Запрос;
	ЗапросИнвентаризационнаяКомиссия.УстановитьПараметр("ТекДокумент", МассивОбъектов);
	ЗапросИнвентаризационнаяКомиссия.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладнаяИнвентаризационнаяКомиссия.ФизЛицо,
	|	ТребованиеНакладнаяИнвентаризационнаяКомиссия.Председатель,
	|	ТребованиеНакладнаяИнвентаризационнаяКомиссия.Ссылка
	|ИЗ
	|	Документ.ТребованиеНакладная.ИнвентаризационнаяКомиссия КАК ТребованиеНакладнаяИнвентаризационнаяКомиссия
	|ГДЕ
	|	ТребованиеНакладнаяИнвентаризационнаяКомиссия.Ссылка В (&ТекДокумент)"; 	
	ТаблицаИнвентаризационнаяКомиссия1 = ЗапросИнвентаризационнаяКомиссия.Выполнить().Выгрузить();		
	
	Док = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Док.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ПараметрыОтбора = Новый Структура("Ссылка", Док.Ссылка);
		ТаблицаИнвентаризационнаяКомиссия = ТаблицаИнвентаризационнаяКомиссия1.Скопировать(ПараметрыОтбора);
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
				
		//Получим области
		Шапка 			 = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
		Итого 			 = Макет.ПолучитьОбласть("Итого");
		ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
		Комиссия		 = Макет.ПолучитьОбласть("Комиссия");
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
		ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Док.Организация, ПолучитьМОЛ(Док.ДатаДокумента, Док.СкладПредставление), Док.ДатаДокумента);
		
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДокумента, "ru");
		
		Шапка.Параметры.НомерДокумента	   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер, Док.Ссылка);
		Шапка.Параметры.ДатаДок			   = Формат(Док.ДатаДокумента, "Л=" + КодЯзыка + "; ДЛФ=DD");
		Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
		Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
		Шапка.Параметры.Заполнить(Док);
		
		ТабДокумент.Вывести(Шапка);
		
		// вывод заголовка таблицы
		ВалютаПечати 					  = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ВыборкаДетальныеЗаписи = Док.Выбрать();
		
		// вывод строк таблицы
		КоличествоСтрок = ВыборкаДетальныеЗаписи.Количество();
		
		// Инициализация итогов в документе
		ИтогоКоличество = 0;
		ИтогоВсегоСНДС 	= 0;
		
		ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(Док.Ссылка);
		
		НомерПП = 1;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатурныйНомер) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Док.Ссылка); 
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;	
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаДетальныеЗаписи.ТоварНаименование); 
			
			Кратность 		   = 1;
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаДетальныеЗаписи.Номенклатура, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				ВсегоСНДС = 0;
				Цена 	  = 0;
			Иначе
				Цена	  = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
				ВсегоСНДС = Цена * ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
			Количество = ВыборкаДетальныеЗаписи.Количество;
			
			СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
			СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
			
			ИтогоКоличество	= ИтогоКоличество + Количество;
			ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;
			
			НомерПП = НомерПП + 1;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
				
		// вывод итогов
		Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
		
		ТабДокумент.Вывести(Итого);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//вывод оборотной стороны
		ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ОборотнаяСторона);
		
		//Печать данных о комисси
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  НСтр("ru = 'Материально-ответственное лицо:'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии:'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии:'", КодЯзыка));
				
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			ДанныеПредседателя =  ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДокумента);
			 		
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = "";
			Комиссия.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; 
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаКомиссии.ЧленыКомиссии, "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаКомиссии.ЧленыКомиссии, "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;
		
		//Выводим список МОЛ
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
		Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
		Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции
//--Кибернетика Беляев Е.И. от 09.10.2024


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты) 
					+ ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);	
					
	Запрос.УстановитьПараметр("СинонимМатериалы",	       НСтр("ru = 'Материалы'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимМатериалыЗаказчика", НСтр("ru = 'Материалы заказчика'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьМатериалы) КАК ЕстьМатериалы,
	|	МАКСИМУМ(СоставДокумента.ЕстьМатериалыЗаказчика) КАК ЕстьМатериалыЗаказчика,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьМатериалы,
	|		ЛОЖЬ КАК ЕстьМатериалыЗаказчика,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.ТребованиеНакладная.Материалы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ТребованиеНакладная.НомераГТД КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоЗатратБУ3,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоЗатратНУ3,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ТребованиеНакладная КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоЗатратБУ3,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоЗатратНУ3,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьМатериалы, ЛОЖЬ) КАК ЕстьМатериалы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьМатериалыЗаказчика, ЛОЖЬ) КАК ЕстьМатериалыЗаказчика,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьМатериалы Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаМатериалы", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаМатериалы.Ссылка,
		|	ТаблицаМатериалы.НомерСтроки,
		|	ТаблицаМатериалы.Номенклатура,
		|	Выразить(ТаблицаМатериалы.Количество * ТаблицаМатериалы.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаМатериалы.СчетБУ,
		|	ТаблицаМатериалы.СчетБУ КАК СчетУчетаБУ,
		|	ТаблицаМатериалы.СчетНУ,
		|	ТаблицаМатериалы.КлючСвязи,
		|	ТаблицаМатериалы.Коэффициент
		|ПОМЕСТИТЬ ТаблицаМатериалы
		|ИЗ
		|	Документ.ТребованиеНакладная.Материалы КАК ТаблицаМатериалы
		|ГДЕ
		|	ТаблицаМатериалы.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьМатериалыЗаказчика Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаМатериалыЗаказчика", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаМатериалыЗаказчика.Ссылка,
		|	ТаблицаМатериалыЗаказчика.НомерСтроки,
		|	ТаблицаМатериалыЗаказчика.Номенклатура,
		|	ТаблицаМатериалыЗаказчика.Количество КАК Количество,
		|	ТаблицаМатериалыЗаказчика.Счет,
		|	ТаблицаМатериалыЗаказчика.Счет КАК СчетУчетаБУ,
		|	ТаблицаМатериалыЗаказчика.СчетПередачи
		|ПОМЕСТИТЬ ТаблицаМатериалыЗаказчика
		|ИЗ
		|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
		|ГДЕ
		|	ТаблицаМатериалыЗаказчика.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьНомераГТД Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаНомераГТД.КлючСвязи,
		|	ТаблицаНомераГТД.Количество КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.ТребованиеНакладная.НомераГТД КАК ТаблицаНомераГТД
		|ГДЕ
		|	ТаблицаНомераГТД.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли; 
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьМатериалы Тогда 
		ПараметрыПроведения.Вставить("ТаблицаМатериалы", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаМатериалы",	НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	""Материалы"" КАК ИмяСписка,
	|	&СинонимМатериалы КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаМатериалы.НомерСтроки,
	|	ТаблицаМатериалы.СчетБУ КАК СчетУчетаБУ,
	|	ТаблицаМатериалы.СчетНУ КАК СчетУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаМатериалы.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаМатериалы.Количество КАК Количество,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	Реквизиты.СчетЗатратБУ КАК КорСчетСписанияБУ,
	|	Реквизиты.СубконтоЗатратБУ1 КАК КорСубконтоБУ1,
	|	Реквизиты.СубконтоЗатратБУ2 КАК КорСубконтоБУ2,
	|	Реквизиты.СубконтоЗатратБУ3 КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	Реквизиты.СчетЗатратНУ КАК КорСчетСписанияНУ,
	|	Реквизиты.СубконтоЗатратНУ1 КАК КорСубконтоНУ1,
	|	Реквизиты.СубконтоЗатратНУ2 КАК КорСубконтоНУ2,
	|	Реквизиты.СубконтоЗатратНУ3 КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
	|	&СодержаниеСписаныТМЗ КАК Содержание
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМатериалы.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	 
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьМатериалыЗаказчика Тогда 
		ПараметрыПроведения.Вставить("РеквизитыМатериалыЗаказчика", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаМатериалыЗаказчика", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыМатериалыЗаказчика", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМатериалыЗаказчика",	 НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ЛОЖЬ КАК УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	""МатериалыЗаказчика"" КАК ИмяСписка,
	|	&СинонимМатериалыЗаказчика КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаМатериалыЗаказчика.НомерСтроки,
	|	ТаблицаМатериалыЗаказчика.Счет КАК СчетУчетаБУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка) КАК СчетУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаМатериалыЗаказчика.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаМатериалыЗаказчика.Количество КАК Количество,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ТаблицаМатериалыЗаказчика.СчетПередачи КАК КорСчетСписанияБУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК КорСчетСписанияНУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
	|	&СодержаниеСписаныТМЗ КАК Содержание
	|ИЗ
	|	ТаблицаМатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМатериалыЗаказчика.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	 
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	     
	Если Реквизиты.ЕстьНомераГТД  Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход("Материалы", "ТаблицаМатериалы");
				 
	 Иначе   		 
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Функция производит расчет сырья, необходимый для производства готовой
// продукции, указанной в документе - основание
Функция РассчитатьРасходСырьяПоСпецификации(ОснованиеСсылка, ДокументаОснованиеТЧ, Номенклатура = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СпецификацииНоменклатуры.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.КоличествоПродукции * СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатуры.Количество КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументОснования.Спецификация КАК Спецификация,
	|		СУММА(ДокументОснования.Количество) КАК КоличествоПродукции
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокументОснования
	|	ГДЕ
	|		ДокументОснования.Ссылка = &Ссылка
	|		И ДокументОснования.Спецификация <> &Спецификация";
	Если Номенклатура <> Неопределено Тогда
		Если Не Номенклатура.Пустая() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		И ДокументОснования.Спецификация.Владелец.Ссылка = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументОснования.Спецификация) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	|			ПО СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка = СпецификацииНоменклатуры.Ссылка
	|		ПО ВложенныйЗапрос.Спецификация = СпецификацииНоменклатуры.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтчетПроизводстваЗаСмену.Продукция", ДокументаОснованиеТЧ);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ОснованиеСсылка);
	Запрос.УстановитьПараметр("Спецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
		
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьМОЛ(Дата, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаСклад";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.МОЛ;
	КонецЕсли; 
	
	Возврат Неопределено;
		
КонецФункции
 
Процедура ПроверитьЗаполнениеСтатьиЗатрат(Объект, Отказ) Экспорт
	
	Для	Индекс = 1 По 3 Цикл
		
		ПроверяемыйРеквизит = Объект["СубконтоЗатратБУ" + СокрЛП(Индекс)];
		Если ТипЗнч(ПроверяемыйРеквизит) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			
			Если Не ЗначениеЗаполнено(ПроверяемыйРеквизит) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнено субконто бухгалтерского учета ""Статьи затрат""'"), Объект, "СубконтоЗатратБУ" + СокрЛП(Индекс), , Отказ);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Евгений+
// Функция формирует табличный документ с печатной формой "З-6" (акт на списание запасов).
//
Функция ПечатьЗ9(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Ссылка КАК Ссылка,
	|	ТребованиеНакладная.Номер КАК Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Организация КАК Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад КАК Склад,
	|	ТребованиеНакладная.УчитыватьКПН КАК УчитыватьКПН,
	|	ТребованиеНакладная.СолидарноеМолДата КАК СолидарноеМолДата,
	|	ТребованиеНакладная.Подписант КАК Подписант
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер КАК Номер,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация КАК Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК СкладПредставление,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьКПН КАК УчитыватьКПН,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ТребованиеНакладная.ТоварыЗабаланс.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Количество КАК Количество,
	|		Номенклатура КАК Номенклатура,
	|		СчетУчетаБУ КАК СчетУчетаБУ,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Коэффициент КАК Коэффициент,
	|		ДатаПереводаНаЗабаланс КАК ДатаПереводаНаЗабаланс
	|	) КАК ТоварыЗабаланс,
	|	ТребованиеНакладная.СолидарныеМол.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ФизЛицо КАК ФизЛицо
	|	) КАК СолидарныеМол,
	|	ВТ_ДокументыСписаниеТоваров.СолидарноеМолДата КАК СолидарноеМолДата,
	|	ВТ_ДокументыСписаниеТоваров.Подписант КАК Подписант
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ТребованиеНакладная.Ссылка
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
					   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
		
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	//ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                     |	ОбщаяВыборка.Ссылка КАК Ссылка,
	//                     |	ОбщаяВыборка.Номенклатура КАК Номенклатура,
	//                     |	ОбщаяВыборка.ТоварНаименование КАК ТоварНаименование,
	//                     |	ОбщаяВыборка.СуммаСНДС КАК СуммаСНДС,
	//                     |	ОбщаяВыборка.Цена КАК Цена,
	//                     |	ОбщаяВыборка.НоменклатурныйНомер КАК НоменклатурныйНомер,
	//                     |	ОбщаяВыборка.Наименование КАК Наименование,
	//                     |	ОбщаяВыборка.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	//                     |	ОбщаяВыборка.Количество КАК Количество,
	//                     |	ОбщаяВыборка.ПричинаСписания КАК ПричинаСписания
	//                     |ИЗ
	//                     |	(ВЫБРАТЬ
	//                     |		СписаниеТоваров.Ссылка КАК Ссылка,
	//                     |		СписаниеТоваров.Номенклатура КАК Номенклатура,
	//                     |		ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	//                     |		ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0) КАК СуммаСНДС,
	//                     |		ВЫБОР
	//                     |			КОГДА СписаниеТоваров.Количество <> 0
	//                     |				ТОГДА (ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) / СписаниеТоваров.Количество
	//                     |			ИНАЧЕ 0
	//                     |		КОНЕЦ КАК Цена,
	//                     |		СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
	//                     |		СписаниеТоваров.Номенклатура.Наименование КАК Наименование,
	//                     |		СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	//                     |		СписаниеТоваров.Количество КАК Количество,
	//                     |		СписаниеТоваров.ПричинаСписания КАК ПричинаСписания
	//                     |	ИЗ
	//                     |		(ВЫБРАТЬ
	//                     |			ТребованиеНакладнаяМатериалы.Ссылка КАК Ссылка,
	//                     |			ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура,
	//                     |			ТребованиеНакладнаяМатериалы.Номенклатура.Код КАК НоменклатурныйНомер,
	//                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	//                     |			СУММА(ТребованиеНакладнаяМатериалы.Количество) КАК Количество,
	//                     |			"""" КАК ПричинаСписания
	//                     |		ИЗ
	//                     |			Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	//                     |		ГДЕ
	//                     |			ТребованиеНакладнаяМатериалы.Ссылка В(&МассивОбъектов)
	//                     |		
	//                     |		СГРУППИРОВАТЬ ПО
	//                     |			ТребованиеНакладнаяМатериалы.Ссылка,
	//                     |			ТребованиеНакладнаяМатериалы.Номенклатура,
	//                     |			ТребованиеНакладнаяМатериалы.Номенклатура.Код,
	//                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения,
	//                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование) КАК СписаниеТоваров
	//                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//                     |				КорректировкаНДСКВозмещению.Регистратор КАК Регистратор,
	//                     |				КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
	//                     |				СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
	//                     |			ИЗ
	//                     |				РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
	//                     |			ГДЕ
	//                     |				КорректировкаНДСКВозмещению.Регистратор В(&МассивОбъектов)
	//                     |			
	//                     |			СГРУППИРОВАТЬ ПО
	//                     |				КорректировкаНДСКВозмещению.Регистратор,
	//                     |				КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
	//                     |			ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
	//                     |				И СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
	//                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//                     |				ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	//                     |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	//                     |				СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
	//                     |			ИЗ
	//                     |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	//                     |			
	//                     |			СГРУППИРОВАТЬ ПО
	//                     |				ТиповойДвиженияССубконто.Регистратор,
	//                     |				ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	//                     |			ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	//                     |				И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	//                     |	
	//                     |	ОБЪЕДИНИТЬ ВСЕ
	//                     |	
	//                     |	ВЫБРАТЬ
	//                     |		ТребованиеНакладнаяМатериалы.Ссылка,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура,
	//                     |		ПОДСТРОКА(ТребованиеНакладнаяМатериалы.Номенклатура.НаименованиеПолное, 1, 1000),
	//                     |		0,
	//                     |		0,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура.Код,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура.Наименование,
	//                     |		ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование,
	//                     |		СУММА(ТребованиеНакладнаяМатериалы.Количество),
	//                     |		""""
	//                     |	ИЗ
	//                     |		Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	//                     |	ГДЕ
	//                     |		ТребованиеНакладнаяМатериалы.Ссылка В(&МассивОбъектов)
	//                     |	
	//                     |	СГРУППИРОВАТЬ ПО
	//                     |		ТребованиеНакладнаяМатериалы.Ссылка,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура.Код,
	//                     |		ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения,
	//                     |		ТребованиеНакладнаяМатериалы.Номенклатура.Наименование,
	//                     |		ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование,
	//                     |		ПОДСТРОКА(ТребованиеНакладнаяМатериалы.Номенклатура.НаименованиеПолное, 1, 1000)) КАК ОбщаяВыборка
	//                     |
	//                     |УПОРЯДОЧИТЬ ПО
	//                     |	ОбщаяВыборка.Наименование
	//                     |ИТОГИ
	//                     |	СУММА(СуммаСНДС),
	//                     |	СУММА(Цена),
	//                     |	СУММА(Количество)
	//                     |ПО
	//                     |	Ссылка";
	
	
	ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ОбщаяВыборка.Ссылка КАК Ссылка,
	                     |	ОбщаяВыборка.Номенклатура КАК Номенклатура,
	                     |	ОбщаяВыборка.ТоварНаименование КАК ТоварНаименование,
	                     |	ОбщаяВыборка.СуммаСНДС КАК СуммаСНДС,
	                     |	ОбщаяВыборка.Цена КАК Цена,
	                     |	ОбщаяВыборка.НоменклатурныйНомер КАК НоменклатурныйНомер,
	                     |	ОбщаяВыборка.Наименование КАК Наименование,
	                     |	ОбщаяВыборка.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |	ОбщаяВыборка.Количество КАК Количество,
	                     |	ОбщаяВыборка.ПричинаСписания КАК ПричинаСписания
	                     |ИЗ
	                     |	(ВЫБРАТЬ
	                     |		СписаниеТоваров.Ссылка КАК Ссылка,
	                     |		СписаниеТоваров.Номенклатура КАК Номенклатура,
	                     |		ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                     |		ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0) КАК СуммаСНДС,
	                     |		ВЫБОР
	                     |			КОГДА СписаниеТоваров.Количество <> 0
	                     |				ТОГДА (ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) / СписаниеТоваров.Количество
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ КАК Цена,
	                     |		СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |		СписаниеТоваров.Номенклатура.Наименование КАК Наименование,
	                     |		СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |		СписаниеТоваров.Количество КАК Количество,
	                     |		СписаниеТоваров.ПричинаСписания КАК ПричинаСписания
	                     |	ИЗ
	                     |		(ВЫБРАТЬ
	                     |			ТребованиеНакладнаяМатериалы.Ссылка КАК Ссылка,
	                     |			ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура,
	                     |			ТребованиеНакладнаяМатериалы.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	                     |			СУММА(ТребованиеНакладнаяМатериалы.Количество) КАК Количество,
	                     |			"""" КАК ПричинаСписания
	                     |		ИЗ
	                     |			Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	                     |		ГДЕ
	                     |			ТребованиеНакладнаяМатериалы.Ссылка В(&МассивОбъектов)
	                     |		
	                     |		СГРУППИРОВАТЬ ПО
	                     |			ТребованиеНакладнаяМатериалы.Ссылка,
	                     |			ТребованиеНакладнаяМатериалы.Номенклатура,
	                     |			ТребованиеНакладнаяМатериалы.Номенклатура.Код,
	                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения,
	                     |			ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения.Наименование) КАК СписаниеТоваров
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				КорректировкаНДСКВозмещению.Регистратор КАК Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
	                     |				СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
	                     |			ИЗ
	                     |				РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
	                     |			ГДЕ
	                     |				КорректировкаНДСКВозмещению.Регистратор В(&МассивОбъектов)
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				КорректировкаНДСКВозмещению.Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
	                     |			ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
	                     |				И СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                     |				СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
	                     |			ИЗ
	                     |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				ТиповойДвиженияССубконто.Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	                     |			ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                     |				И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор) КАК ОбщаяВыборка
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	ОбщаяВыборка.Наименование
	                     |ИТОГИ
	                     |	СУММА(СуммаСНДС),
	                     |	СУММА(Цена),
	                     |	СУММА(Количество)
	                     |ПО
	                     |	Ссылка";
	
	ВыборкаПоРегистратору = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З9");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_З6";

	//Получим области
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия		 = Макет.ПолучитьОбласть("Комиссия");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтветственноеЛицо, ВыборкаПоДокументам.ДатаДокумента);
		
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН	         = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");
		Шапка.Параметры.КодПоОКПО 				 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");

		
		Шапка.Параметры.НомерДокумента	   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		ШАпка.Параметры.ДатаДок			   = Формат(ВыборкаПоДокументам.ДатаДокумента, "ДЛФ=DD");
		Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
		Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
		Шапка.Параметры.Заполнить(ВыборкаПоДокументам);
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
			
			Шапка.Параметры.ДолжностьПредседателя                = ДанныеПредседателя.Должность;
			Шапка.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			Шапка.Параметры.ДолжностьПредседателя	 = "Руководитель организации (индивидуальный предприниматель)";
			Шапка.Параметры.РасшифровкаПодписи        = Руководители.Руководитель;
			
		КонецЕсли;
		
		
		ТабДокумент.Вывести(Шапка);
		
		// вывод заголовка таблицы
		ВалютаПечати = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// вывод строк таблицы
		КоличествоСтрок = ?(НЕ ВыборкаСтрокТовары = Неопределено , ВыборкаСтрокТовары.Количество(), 0);
		
		// Инициализация итогов в документе
		
		ИтогоКоличество = 0;
		ИтогоВсегоСНДС  = 0;

//		Если НЕ (ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС) Тогда 
			ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ВыборкаПоДокументам.Ссылка);
//		КонецЕсли;

		НомерПП = 1;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					//ТабДокумент.Вывести(ЗаголовокТаблицы);
				//КонецЕсли;	

				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
				
				//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
				//	
				//	СтрокаТаблицы.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
				//	СтрокаТаблицы.Параметры.Цена	   = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
				//	СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВыборкаСтрокТовары.СуммаСНДС,"ЧДЦ=2");
				//	
				//Иначе	
					Кратность = 1;
					СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
					Если СтрокаСуммСписания = Неопределено Тогда
						 ВсегоСНДС = 0;
						 Цена 	   = 0;
					 Иначе
						 //Цена 	   = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						 Цена = ?(ВыборкаСтрокТовары.Количество = 0, 0, СтрокаСуммСписания.Сумма / ВыборкаСтрокТовары.Количество);
						 ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
					 КонецЕсли;

					Количество = ВыборкаСтрокТовары.Количество;

					СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
					СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
					
					ИтогоКоличество	= ИтогоКоличество + Количество;
					ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;

				//КонецЕсли;

				НомерПП = НомерПП + 1;
				
				ТабДокумент.Вывести(СтрокаТаблицы);

			КонецЦикла;
						
		КонецЕсли;
		
		ТоварыЗабаланс = ВыборкаПоДокументам.ТоварыЗабаланс.Выгрузить();
		ТоварыЗабаланс.Свернуть("Номенклатура, ЕдиницаИзмерения, СчетУчетаБУ", "Количество");
		
		Если ТоварыЗабаланс.Количество() > 0 Тогда 
			Для каждого Строка из ТоварыЗабаланс Цикл
				
				СтрокаТаблицы.Параметры.НомерПП = НомерПП;
				СтрокаТаблицы.Параметры.ТоварНаименование = Строка.Номенклатура.Наименование;		
				СтрокаТаблицы.Параметры.НоменклатурныйНомер = Строка.Номенклатура.Код;
				СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмерения;
				СтрокаТаблицы.Параметры.Количество = Формат(Строка.Количество,"ЧДЦ=3");
				СтрокаТаблицы.Параметры.Цена       = 0;
				СтрокаТаблицы.Параметры.СуммаСНДС  =0;
				
				НомерПП = НомерПП + 1;
				
				ИтогоКоличество = ИтогоКоличество + Строка.Количество;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		// вывод итогов
		
		
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
		Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		
		ТабДокумент.Вывести(Итого);
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//вывод оборотной стороны
		ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ОборотнаяСторона);
		
		//вывод комиссии
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Материально-ответственное лицо");
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		//Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		//	
		//	ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
		//		
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		//	Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		//	
		//Иначе
		//	
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = "";
		//	Комиссия.Параметры.РасшифровкаПодписи       = "";
		//	
		//КонецЕсли;
		//	
		//ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			//	
			//	// Выведем разрыв страницы
			//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//	ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			//
			//КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
														   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   		 "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			//	
			//	// Выведем разрыв страницы
			//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//	ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			//	
			//КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;
		
		//Выводим список МОЛ
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
		Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
		Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		Если ВыборкаПоДокументам.СолидарныеМОЛ.Выгрузить().Количество() > 0 Тогда
			
			ДоговорОт = Макет.ПолучитьОбласть("ДоговорОт");
			Если ЗначениеЗаполнено(ВыборкаПоДокументам.СолидарноеМОЛДата) Тогда
				ДоговорОт.Параметры.СолидарныеМОЛДата = ВыборкаПоДокументам.СолидарноеМОЛДата;
			КонецЕсли;
			ТабДокумент.Вывести(ДоговорОт);
			
			Для каждого Строка из ВыборкаПоДокументам.СолидарныеМОЛ.Выгрузить() Цикл
				
				ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, Строка.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = "";
				Комиссия.Параметры.Должность = ДанныеМОЛ.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ДанныеМОЛ.Представление;
				
				ТабДокумент.Вывести(Комиссия);
					
			КонецЦикла;
			            
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Исполнитель");
		
		ДанныеИсполнителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Подписант, ВыборкаПоДокументам.ДатаДокумента);
		//ДанныеИсполнителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Ссылка.Ответственный.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
		ОбластьМакета.Параметры.Должность = ДанныеИсполнителя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ДанныеИсполнителя.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;			

	Возврат ТабДокумент;
	
КонецФункции
//++Кибернетика Беляев Е.И. от 09.10.2024
Функция ПечатьАктСписанияПоЛЗК(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_АктСписанияПоЛЗК");
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "АктСписанияПоЛЗК_Накладная";
	
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	ОбластьВидскв    = Макет.ПолучитьОбласть("Видскв");
	ОбластьСкв    	 = Макет.ПолучитьОбласть("Скважина");
	ОбластьПустая    = Макет.ПолучитьОбласть("пустая");	
	ОбластьШапкаТаблНачало       = Макет.ПолучитьОбласть("ШапкаТаблицы|НаНачало");	
	ОбластьИтТаблНачало       = Макет.ПолучитьОбласть("ИтогТаблицы|НаНачало");
	ОбластьПодвал = Макет.ПолучитьОбласть("подвал");
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Склад КАК Склад,
	|	ТребованиеНакладная.киб_ВидБурения КАК киб_ВидБурения,
	|	ТребованиеНакладная.УчастокБурения КАК УчастокБурения,
	|	ТребованиеНакладная.СубконтоЗатратБУ1 КАК БуровойАгрегат,
	|	ТребованиеНакладная.ВидСкв КАК ВидСкв
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&ТекущийДокумент)";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбластьШапка.Параметры.ПериодСтр = ПредставлениеПериода(НачалоМесяца(ВыборкаДетальныеЗаписи.Дата), КонецМесяца(ВыборкаДетальныеЗаписи.Дата), "ФП = Истина");
		ОбластьШапка.Параметры.БуровойАгрегат = ВыборкаДетальныеЗаписи.БуровойАгрегат;
		ОбластьШапка.Параметры.Склад          = ВыборкаДетальныеЗаписи.Склад;
		
		БуровойАгрегат =  ВыборкаДетальныеЗаписи.БуровойАгрегат;
		ВидБурения     =  ВыборкаДетальныеЗаписи.киб_ВидБурения;
		Участок        =  ВыборкаДетальныеЗаписи.УчастокБурения;
		ДатаНач        =  НачалоМесяца(ВыборкаДетальныеЗаписи.Дата);
		ДатаКон        =  КонецМесяца(ВыборкаДетальныеЗаписи.Дата);
		ВидСкважины    =  ВыборкаДетальныеЗаписи.ВидСкв;
		
	КонецЦикла;
	
	
	зпПоШапке = Новый Запрос;
	зпПоШапке.УстановитьПараметр("БуровойАгрегат", БуровойАгрегат);
	зпПоШапке.УстановитьПараметр("ВидБурения", ВидБурения);
	зпПоШапке.УстановитьПараметр("ДатаКон", ДатаКон);
	зпПоШапке.УстановитьПараметр("ДатаНач", ДатаНач);
	зпПоШапке.УстановитьПараметр("Участок", Участок);
	зпПоШапке.УстановитьПараметр("ВидСкважины", ВидСкважины);

	зпПоШапке.Текст = 
	"ВЫБРАТЬ
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.УчастокПодразделение КАК Участок,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидСкважины КАК ВидСкважины,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.Агрегат КАК Агрегат,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.НомерСкважины КАК НомерСкважины,
	|	СУММА(КТ_ПроизводственнаяСправкаПоОбъемамСправка.ПробуреноПМ) КАК ПробуреноПМПриход,
	|	СУММА(КТ_ПроизводственнаяСправкаПоОбъемамСправка.ПробуреноСкв) КАК ПробуреноСквПриход,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидБурения КАК ВидБурения
	|ИЗ
	|	Документ.КТ_ПроизводственнаяСправкаПоОбъемам.Справка КАК КТ_ПроизводственнаяСправкаПоОбъемамСправка
	|ГДЕ
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.Проведен
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Агрегат = &БуровойАгрегат
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.УчастокПодразделение = &Участок
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.ПробуреноПМ > 0
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидБурения = &ВидБурения
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидСкважины = &ВидСкважины
	|
	|СГРУППИРОВАТЬ ПО
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.УчастокПодразделение,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.Агрегат,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидСкважины,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.НомерСкважины,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидБурения
	|ИТОГИ
	|	СУММА(ПробуреноПМПриход),
	|	СУММА(ПробуреноСквПриход)
	|ПО
	|	ОБЩИЕ,
	|	ВидСкважины,
	|	НомерСкважины";
	
	
	
	РезультатЗапроса = зпПоШапке.Выполнить();
	
	ТЗ_Шапка = РезультатЗапроса.Выгрузить();
	
	КТ_ПробуреноПМПриход  = 0;
	КТ_ПробуреноСквПриход = 0;
	
	Если ТЗ_Шапка.Количество() > 0 Тогда
		КТ_ПробуреноПМПриход   = ТЗ_Шапка[0].ПробуреноПМПриход;
		КТ_ПробуреноСквПриход = ТЗ_Шапка[0].ПробуреноСквПриход;
	КонецЕсли;	
	
	ОбластьШапка.Параметры.ОбъемПМ  = КТ_ПробуреноПМПриход;
	ОбластьШапка.Параметры.ОбъемСкв = КТ_ПробуреноСквПриход; 
	ОбластьШапка.Параметры.УчастокБурения = Участок;
	ОбластьШапка.Параметры.ВидБурения = ВидБурения;
	ТабДокумент.Вывести(ОбластьШапка);
	
	ВыборкаВида = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидСкважины");
	
	Пока ВыборкаВида.Следующий() Цикл
		
		ОбластьВидскв.Параметры.ВидСкважины = ВыборкаВида.ВидСкважины;
		ОбластьВидскв.Параметры.ОбъемПМ  = ВыборкаВида.ПробуреноПМПриход;
		ОбластьВидскв.Параметры.ОбъемСкв = ВыборкаВида.ПробуреноСквПриход;
		ТабДокумент.Вывести(ОбластьВидскв);                 
		
		ВыборкаСкважин = ВыборкаВида.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСкважины");
		
		Пока ВыборкаСкважин.Следующий() Цикл
			
			ОбластьСкв.Параметры.НомерСкважины = ВыборкаСкважин.НомерСкважины;
			ОбластьСкв.Параметры.ОбъемПМ  = ВыборкаСкважин.ПробуреноПМПриход;
			ОбластьСкв.Параметры.ОбъемСкв = ВыборкаСкважин.ПробуреноСквПриход;
			ТабДокумент.Вывести(ОбластьСкв);  	
			
		КонецЦикла;
		
		
	КонецЦикла;	
	
	
	ТабДокумент.Вывести(ОбластьПустая);
	
	ТабДокумент.Вывести(ОбластьШапкаТаблНачало);
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура,
	|	ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТребованиеНакладнаяНоменклГрупыЛЗК.ВидНормы КАК ВидНормы,
	|	ТребованиеНакладнаяНоменклГрупыЛЗК.Норма КАК Норма,
	|	ТребованиеНакладнаяНоменклГрупыЛЗК.ПоНормеНаФактОбъем КАК ПоНормеНаФактОбъем,
	|	ТребованиеНакладнаяМатериалы.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ТребованиеНакладнаяНоменклГрупыЛЗК.ПоНормеНаФактОбъем КАК ЧИСЛО(10, 3)) КАК Округление
	|ПОМЕСТИТЬ ВТ_ПредИтог
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная.НоменклГрупыЛЗК КАК ТребованиеНакладнаяНоменклГрупыЛЗК
	|		ПО ТребованиеНакладнаяМатериалы.Ссылка = ТребованиеНакладнаяНоменклГрупыЛЗК.Ссылка
	|			И ТребованиеНакладнаяМатериалы.Номенклатура = ТребованиеНакладнаяНоменклГрупыЛЗК.Номенклатура
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПредИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ПредИтог.ЕдиницаИзмерения КАК ЕдИзм,
	|	ВТ_ПредИтог.ВидНормы КАК ВидНормы,
	|	ВЫРАЗИТЬ(ВТ_ПредИтог.Норма КАК ЧИСЛО(10, 6)) КАК Норма,
	|	ВЫРАЗИТЬ(ВТ_ПредИтог.ПоНормеНаФактОбъем КАК ЧИСЛО(10, 6)) КАК ПоНормеНаФактОбъем,
	|	ВЫРАЗИТЬ(ВТ_ПредИтог.Количество КАК ЧИСЛО(10, 6)) КАК ФактРасход,
	|	ВЫРАЗИТЬ(ВТ_ПредИтог.Количество - ВТ_ПредИтог.Округление КАК ЧИСЛО(10, 6)) КАК Результат
	|ИЗ
	|	ВТ_ПредИтог КАК ВТ_ПредИтог";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	тбИтог = РезультатЗапроса.Выгрузить();
	
	//Детальные записи
	ОбластьСтрТаблНачало       = Макет.ПолучитьОбласть("СтрокаТаблицы|НаНачало");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбластьСтрТаблНачало.Параметры.Номенклатура		   = ВыборкаДетальныеЗаписи.Номенклатура;
		ОбластьСтрТаблНачало.Параметры.ЕдИзм 			   = ВыборкаДетальныеЗаписи.ЕдИзм;
		ОбластьСтрТаблНачало.Параметры.ВидНормы            = ВыборкаДетальныеЗаписи.ВидНормы;
		ОбластьСтрТаблНачало.Параметры.Норма               = Формат(ВыборкаДетальныеЗаписи.Норма,"ЧДЦ=6");
		ОбластьСтрТаблНачало.Параметры.ПоНормеНаФактОбъем  = Формат(ВыборкаДетальныеЗаписи.ПоНормеНаФактОбъем,"ЧДЦ=6");
		ОбластьСтрТаблНачало.Параметры.ФактРасход          = Формат(ВыборкаДетальныеЗаписи.ФактРасход, "ЧДЦ=3");
		ОбластьСтрТаблНачало.Параметры.Результат           = Формат(ВыборкаДетальныеЗаписи.Результат,"ЧДЦ=6; ЧН=0"); 
		
		ТабДокумент.Вывести(ОбластьСтрТаблНачало);
		
	КонецЦикла;                                                                      		
	//Итоги
	ИтПоНормеНаФкт    = тбИтог.Итог("ПоНормеНаФактОбъем");	
	ИтФактРасх	      = тбИтог.Итог("ФактРасход");
	ИтРезультат       = тбИтог.Итог("Результат");
	
	ОбластьИтТаблНачало.Параметры.ИтПоНормеНаФкт = Формат(ИтПоНормеНаФкт,"ЧДЦ=3");	
	ОбластьИтТаблНачало.Параметры.ИтФактРасх	 = ИтФактРасх;
	ОбластьИтТаблНачало.Параметры.ИтРезультат    = Формат(ИтРезультат,"ЧДЦ=6; ЧН=0");
	ТабДокумент.Вывести(ОбластьИтТаблНачало);
	ТабДокумент.Вывести(ОбластьПодвал);
	
	
	Возврат ТабДокумент;
	
КонецФункции	

#КонецЕсли
