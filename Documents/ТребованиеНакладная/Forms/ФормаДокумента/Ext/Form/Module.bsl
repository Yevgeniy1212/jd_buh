
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	ПодготовитьФормуНаСервере();
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);
	
	УстановитьСвойстваЭлементаКонтрагент();	
	УправлениеФормой(ЭтаФорма); 
	
	//++Кибернетика Беляев Е.И. 24.06.2024
	киб_УправлениеЭлементами();
	//--Кибернетика Беляев Е.И. 24.06.2024
	
	//++Кибернетика Беляев Е.И. 24.06.2024
	киб_ПрограммныйВыводРеквизитовНаФорму();
	//--Кибернетика Беляев Е.И. 24.06.2024

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;
				
				Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение);
		
	//Кибернетика+
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТребованиеНакладная.Форма.ПодборЛЗК_00" Тогда
		РасчетЛЗКОбработкаВыбораНаСервере(ВыбранноеЗначение);
    //Кибернетика-
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;   
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_УведомлениеОВыводеИзОборота" Тогда
		//ИСМПТ
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОВыводеИзОборотаИСЦЭДМ" Тогда
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""требование-накладная"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)  	 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратБУ, Объект, ПоляФормы);

	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
									|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ1ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 1, Объект.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 2, Объект.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 3, Объект.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНУ1", "ЗаголовокСубконтоЗатратНУ2", "ЗаголовокСубконтоЗатратНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратНУ, ПоляФормы, ЗаголовкиПолей);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 1, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 2, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 3, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры           

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
	Объект.РасчетЛЗК_Выполнен = Ложь;

	Если Объект.Дата <= Дата("20191231235959") Тогда
	//	ЭтаФорма.Элементы.ВидСкв.Видимость = Ложь;
		ЭтаФорма.Элементы.УчастокБурения.Видимость   = Ложь;
		ЭтаФорма.Элементы.Номенклатура.Видимость = Истина;
	Иначе
	//	ЭтаФорма.Элементы.ВидСкв.Видимость = Истина;
		ЭтаФорма.Элементы.УчастокБурения.Видимость   = Истина;
		ЭтаФорма.Элементы.Номенклатура.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат
	КонецЕсли;	
	  		
	ТекущийСклад = Объект.Склад;

	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;	

	ЗаполнитьМОЛНаСервере();//Евгений

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ТекущаяНоменклатура = Объект.Номенклатура Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ТекущаяНоменклатура = Объект.Номенклатура;
		Возврат;
	КонецЕсли;
	
	ТекущаяНоменклатура = Объект.Номенклатура;
	
	Если Объект.МатериалыЗаказчика.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='При наличии строк в табличной части ""Материалы заказчика"" заполнение табличной части ""Материалы""
					 |по спецификации выбранной номенклатуры не производится.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "МатериалыЗаказчика[0].НомерСтроки", "Объект");
		Возврат;
	КонецЕсли; 
	
	ДокументОснование = Объект.ДокументОснование;
			
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличестваПродукции", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, 1, "Введите количество продукции",15,3);
	
	Объект.РасчетЛЗК_Выполнен = Ложь;
	ОбновитьНадписьНоменклатура_Скважина();

//	ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(Параметры.КоличествоПродукции);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивНоменклатуры = УстановитьПараметрыВыбораНоменклатуры(Объект.ДокументОснование);
	
	Если МассивНоменклатуры <> Неопределено И МассивНоменклатуры.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура("Ссылка", МассивНоменклатуры);
		ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, ОтображатьВВидеСписка, Отбор", Истина, Истина, Истина, СтруктураОтбора);	
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МАТЕРИАЛЫ

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Материалы);	
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда 
		ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Материалы.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Материалы.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СчетБУ, СчетНУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);   
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.СчетБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.СчетБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Материалы[" + Элементы.Материалы.ТекущаяСтрока + "].СчетБУ", "Объект");
		
		ТекущиеДанные.СчетБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		ТекущиеДанные.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетБУ)
			, , , Объект.Дата);
			
КонецПроцедуры
		
&НаКлиенте
Процедура МатериалыСчетНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.СчетНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.СчетНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Материалы[" + Элементы.Материалы.ТекущаяСтрока + "].СчетНУ", "Объект");
		
		ТекущиеДанные.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)
	УстановитьСвойстваЭлементаКонтрагент();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПослеУдаления(Элемент)
	 УстановитьСвойстваЭлементаКонтрагент();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаКонтрагент()
	
	ЕстьМатериалыЗаказчика = (Объект.МатериалыЗаказчика.Количество() <> 0);
	Элементы.Контрагент.АвтоВыборНезаполненного = ЕстьМатериалыЗаказчика;
	Элементы.Контрагент.АвтоОтметкаНезаполненного = ЕстьМатериалыЗаказчика;
	Элементы.Контрагент.ОтметкаНезаполненного = ЕстьМатериалыЗаказчика;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МАТЕРИАЛЫ ЗАКАЗЧИКА

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Счет, Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.МатериалыЗаказчика.ТекущиеДанные);
	МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.МатериалыЗаказчика.ТекущиеДанные, ДанныеСтрокиТаблицы); 
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.Счет) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.Счет);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "МатериалыЗаказчика[" + Элементы.МатериалыЗаказчика.ТекущаяСтрока + "].Счет", "Объект");
		
		ТекущиеДанные.Счет = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
			
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Счет, Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	МатериалыЗаказчикаСчетПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Физическое лицо %1 уже включено в состав комиссии!'"), Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборМатериалы(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборМатериалыЗаказчика(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("МатериалыЗаказчика");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

//++Кибернетика Кубасов Е
&НаКлиенте
Процедура ПодборТоварыЗабаланс(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТоварыЗабаланс");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры
//--Кибернетика Кубасов Е

&НаКлиенте
Процедура ПодборКомиссия(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
						
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
		
	Если СтруктураПараметров = Неопределено ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	Если СтруктураПараметров <> Неопределено И (СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") 
			И СтруктураПараметров.ОчищатьНекорректныеЗначения) Тогда
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        Объект.СубконтоЗатратБУ1, Объект.СубконтоЗатратБУ2, Объект.СубконтоЗатратБУ3));		
		ПроверитьВладельцаСубконтоПодразделениеНУ(Объект);
	КонецЕсли; 
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВладельцаСубконтоПодразделениеНУ(Объект)
	
	Для Индекс = 1 По 3 Цикл
		
		Если ТипЗнч(Объект["СубконтоЗатратНУ" + Индекс]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			ВладелецСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект["СубконтоЗатратНУ" + Индекс], "Владелец");
			Если ВладелецСубконто = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			              
			Если Объект.Организация <> ВладелецСубконто Тогда
				Объект["СубконтоЗатратНУ" + Индекс] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
    
&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения = Неопределено)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;     
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если СтруктураПараметров.Свойство("ПерезаполнитьСчетаУчета") И СтруктураПараметров.ПерезаполнитьСчетаУчета Тогда 
		ЗаполнитьСчетаУчетаНаСервере();	
	Иначе
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	КонецЕсли;
	
	// после удаления вопроса об очистке подразделений при изменении СП, данное условие можно будет удалить
	Если СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда

		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
		                                                        Объект.СубконтоЗатратБУ1, Объект.СубконтоЗатратБУ2, Объект.СубконтоЗатратБУ3));
																
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
		                                                        Объект.СубконтоЗатратНУ1, Объект.СубконтоЗатратНУ2, Объект.СубконтоЗатратНУ3));
																
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()   
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ТолькоСчетаРасчетов = Ложь)
	
	Если НЕ ТолькоСчетаРасчетов Тогда
		
		Если Объект.Материалы.Количество() > 0 Тогда
			Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатратВТабличнойЧасти(Объект, "Материалы");
		КонецЕсли;
		Если Объект.МатериалыЗаказчика.Количество() > 0 Тогда
			Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатратВТабличнойЧасти(Объект, "МатериалыЗаказчика");
		КонецЕсли;
				
	КонецЕсли; 
		
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатрат(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущийСклад = Объект.Склад;
	ТекущаяНоменклатура = Объект.Номенклатура;
					
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		Объект.УчитыватьКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
							
		Если НЕ ЗначениеЗаполнено(Объект.СчетЗатратБУ) Тогда
			
			Объект.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
			
			Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
			
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратБУ, Объект, ПоляФормы);

			ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
			"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
			
			УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);    
			
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);
			
		КонецЕсли;     
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);

	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);     	
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.УчитыватьКПН.Видимость = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ВидУчетаНУ.Видимость          = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.ГруппаСчетАналитикаЗатратНУ.Видимость = Объект.УчитыватьКПН;
    Элементы.ГруппаСчетаУчетаЗатрат.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.МатериалыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетНУ = Неопределено, ЭтоТаблица = Ложь)
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
		
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПараметрыВыбораНоменклатуры(ДокументОснование)
	
	МассивНоменклатуры = Новый Массив();
		
	Если НЕ ЗначениеЗаполнено(ДокументОснование) ИЛИ (ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	            	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаНоменклатуры = РезультатЗапроса.Выбрать();
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			МассивНоменклатуры.Добавить(ВыборкаНоменклатуры.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивНоменклатуры;
	
КонецФункции    

&НаКлиенте
Процедура ПослеВводаКоличестваПродукции(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = 0 Тогда
		Результат = 1;
	КонецЕсли; 
	
	Параметры = Новый Структура("КоличествоПродукции", Результат);
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Очистить табличную часть ""Материалы"" перед заполнением?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткиМатериалов", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Возврат
	КонецЕсли;
	
	ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(Результат);
	
КонецПроцедуры
    
&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткиМатериалов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        Объект.Материалы.Очистить();
	КонецЕсли;
	
	ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(Параметры.КоличествоПродукции);
	
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(КоличествоПродукции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество <> 0
	|			ТОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество * &КоличествоПродукции
	|		ИНАЧЕ СпецификацииНоменклатурыИсходныеКомплектующие.Количество * &КоличествоПродукции
	|	КОНЕЦ КАК Количество,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	|		ПО ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры = СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка
	|ГДЕ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("КоличествоПродукции", КоличествоПродукции);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		НаваяСтрока = Объект.Материалы.Добавить();
		НаваяСтрока.Номенклатура = ВыборкаРезультатовЗапроса.Номенклатура;
		НаваяСтрока.Количество = ВыборкаРезультатовЗапроса.Количество;
		НаваяСтрока.ЕдиницаИзмерения = ВыборкаРезультатовЗапроса.Номенклатура.БазоваяЕдиницаИзмерения;
		НаваяСтрока.Коэффициент = 1;
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НаваяСтрока, Объект.УчитыватьКПН);
	КонецЦикла;   	
	
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатрат(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
		
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, СтрокаТабличнойЧасти, Объект.УчитыватьКПН); 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	Если ИмяТабличнойЧасти = "" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
	Иначе
		Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
			СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
					
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ТекущиеДанные)
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекущиеДанные.Номенклатура);
	
	ТекущиеДанные.Счет          = СчетаУчета.СчетУчетаДавСырья;
	ТекущиеДанные.СчетПередачи 	= СчетаУчета.СчетПередачиЗаб;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаСчетПриИзмененииНаСервере(ДанныеСтрокиТаблицы)
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ДанныеСтрокиТаблицы.Номенклатура);
	
	ДанныеСтрокиТаблицы.СчетПередачи = СчетаУчета.СчетПередачиЗаб;      
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
			
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	//Евгений+
	Если ИмяТаблицы <> "Материалы" И ИмяТаблицы <> "МатериалыЗаказчика" И ИмяТаблицы <> "ТоварыЗабаланс" Тогда
	//Если ИмяТаблицы <> "Материалы" И ИмяТаблицы <> "МатериалыЗаказчика" Тогда
	//Евгений-
	
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда 		
		ТаблицаМатериалов = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;			
	Иначе                                                   		
		ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	
	ПараметрыОбъекта  = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаМатериалов Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если Не ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Материалы" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда  				
				Продолжить;				
			КонецЕсли; 				
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);		
			
			Если ИмяТаблицы = "Материалы" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
				СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
				МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта);
				
				//Евгений+
			ИначеЕсли ИмяТаблицы = "ТоварыЗабаланс" Тогда
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.ДатаПереводаНаЗабаланс = ТекущаяДата();
				СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
                СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ; 
				
				//Если СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ПокупныеМатериалыКомплектующиеИзделия Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
				//ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.Топливо Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанноеТопливо;
				//ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ТараИТарныеМатериалы Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписаннаяТараИТарныеМатериалы;
				//ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ЗапасныеЧасти Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
				//ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ПрочиеМатериалы Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
				//ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СтроительныеМатериалы Тогда
				//	СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеСтроительныеМатериалы;
				//КонецЕсли;
				
				Для каждого СтрокаТабличнойЧасти из Объект.ТоварыЗабаланс Цикл
					Если СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1310" Тогда
						СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеСырьеИМатериалы;
					ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1313" Тогда
						СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанноеТопливо;
					ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1315" Тогда
						СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
					ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1316" Тогда
						СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
					КонецЕсли;
				КонецЦикла;	
				
				//Евгений-
				
			Иначе
				МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли; 	

	
КонецПроцедуры                                                                                     

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Документы.ТребованиеНакладная.ЗаполнитьПоДокументуОснования(Объект, Объект.ДокументОснование);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратБУ1, ДанныеОбъекта.СубконтоЗатратБУ2, ДанныеОбъекта.СубконтоЗатратБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНУ1, ДанныеОбъекта.СубконтоЗатратНУ2, ДанныеОбъекта.СубконтоЗатратНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНУ1, ДанныеОбъекта.СубконтоЗатратНУ2, ДанныеОбъекта.СубконтоЗатратНУ3));

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма, "Материалы");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;  
	
КонецПроцедуры
//--Кибернетика Беляев Е.И. 24.06.2024

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаМатериалы" Тогда
		
		ИмяТаблицы = "Материалы";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаМатериалыЗаказчика" Тогда
		
		ИмяТаблицы = "МатериалыЗаказчика";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;  
	
	Если ПараметрыВставки.ИмяТаблицы = "Материалы" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("СчетБУ");		
			СписокСвойств.Добавить("СчетНУ");	
		КонецЕсли;		
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "МатериалыЗаказчика" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("Счет");		
			СписокСвойств.Добавить("СчетПередачи");		
		КонецЕсли; 
		
		ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	КонецЕсли; 	
	         	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.МатериалыВставитьСтроки.Доступность				         = Доступность;
	Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность		     = Доступность;
	Элементы.МатериалыЗаказчикаВставитьСтроки.Доступность				 = Доступность;
	Элементы.МатериалыЗаказчикаКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

//Контротек. -----------------------------------------------
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ГруппаРасчетЛЗК.Видимость = Объект.флНовыйРасчет;
	
	ОбновитьНадписьНоменклатура_Скважина();

	Если Объект.РасчетЛЗК_Выполнен = Истина Тогда
		Элементы.МатериалыНоменклатура.ТолькоПросмотр = Истина;
		Элементы.МатериалыСчетБУ.ТолькоПросмотр = Истина;
		Элементы.МатериалыСчетНУ.ТолькоПросмотр = Истина;
		Элементы.МатериалыЕдиницаИзмерения.ТолькоПросмотр = Истина;
		Элементы.МатериалыКоэффициент.ТолькоПросмотр = Истина;
		Элементы.МатериалыКоличество.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.Дата <= Дата("20191231235959") Тогда
		//ЭтаФорма.Элементы.ВидСкв.Видимость = Ложь;
		ЭтаФорма.Элементы.УчастокБурения.Видимость   = Ложь;
		ЭтаФорма.Элементы.Номенклатура.Видимость = Истина;
	Иначе
		//ЭтаФорма.Элементы.ВидСкв.Видимость = Истина;
		ЭтаФорма.Элементы.УчастокБурения.Видимость   = Истина;
		ЭтаФорма.Элементы.Номенклатура.Видимость = Ложь;
	КонецЕсли;
	
	//Евгений+
	СолидарныеМОЛСтрока.Очистить();	
	Для каждого Строка из Объект.СолидарныеМол Цикл
		СолидарныеМОЛСтрока.Добавить(Строка.ФизЛицо);	
	КонецЦикла;
	//Евгений-
	
КонецПроцедуры

&НаКлиенте
Процедура флНовыйРасчетПриИзменении(Элемент)
	Элементы.ГруппаРасчетЛЗК.Видимость = Объект.флНовыйРасчет;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	Объект.РасчетЛЗК_Выполнен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Объект.РасчетЛЗК_Выполнен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьНоменклатура_Скважина()

	Если Объект.флНовыйРасчет и НЕ Объект.Номенклатура.Пустая() Тогда
		Элементы.Номенклатура.Заголовок =  "" + ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "УчастокБурения"));
		Объект.УчастокБурения = ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "УчастокБурения"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Ссылка);
	ОткрытьФормуМодально("Документ.ТребованиеНакладная.Форма.ФормаДополнительныеРеквизиты", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ПолучитьПустоеПодразделение()
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборЛЗК(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"             , Объект.Ссылка);
	ПараметрыФормы.Вставить("ВыбСклад"         , Объект.Склад);
	ПараметрыФормы.Вставить("ВыбДата"          , Объект.Дата);
	ПараметрыФормы.Вставить("ВыбНоменклатура"  , Объект.Номенклатура);
	ПараметрыФормы.Вставить("ВидСкважины"      , Объект.ВидСкв);
	ПараметрыФормы.Вставить("ВыбУчастокБурения", Объект.УчастокБурения);
	//++Кибернетика Беляев Е.И. 24.06.2024
	ПараметрыФормы.Вставить("ВыбВидБурения",Объект.киб_ВидБурения);
	//--Кибернетика Беляев Е.И. 24.06.2024
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
	                           "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	Подразделение = ПолучитьПодразделение(Объект.СчетЗатратБУ, ПоляФормы);

	ПараметрыФормы.Вставить("ВыбПодразделение", Подразделение);
	
	ОткрытьФормуМодально("Документ.ТребованиеНакладная.Форма.ПодборЛЗК_00", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделение(Счет, ПоляОбъекта);
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				Если ТипЗнч(Объект[ПоляОбъекта["Субконто" + Индекс]]) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда
					Подразделение = Объект[ПоляОбъекта["Субконто" + Индекс]];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
    Возврат Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзПроизводственнойСправки(Подразделение)
	
	тзНом = Объект.РасчетЛЗК.Выгрузить(, "Номенклатура, Количество");
	тзНом.Свернуть("Номенклатура", "Количество");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1"        , НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2"        , КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата"         , Новый Граница(ТекущаяДата(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВидСкважины"  , Объект.Номенклатура.ВидСкважины);
	Запрос.УстановитьПараметр("Участок"      , Объект.Номенклатура.УчастокБурения);
	Запрос.УстановитьПараметр("Номенклатура" , тзНом.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Склад"        , Объект.Склад);
	Запрос.УстановитьПараметр("Скважина"     , Объект.Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет13"       , ПланыСчетов.Типовой.НайтиПоКоду("1300"));
	
	МасСубк = Новый Массив;
	МасСубк.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	МасСубк.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	
	Запрос.УстановитьПараметр("Субк", МасСубк);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственнаяСправкаОбороты.Продукция
	|ИЗ
	|	РегистрНакопления.ПроизводственнаяСправка.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Продукция = &Скважина
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение.Родитель = &Подразделение)
	|				И Принята > 0) КАК ПроизводственнаяСправкаОбороты";
	Выб = Запрос.Выполнить().Выбрать();
	Принята = Выб.Следующий();
	Объект.Принята = Принята; 
	Запрос.УстановитьПараметр("Принята", Принята);
	
	ВидСкв = Объект.Номенклатура.ВидСкважины;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроизводственнаяСправкаОбороты.ВидСкважины КАК ВидСкв,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроизводственнаяСправкаОбороты.Продукция) КАК БурениеСкв,
	|	СУММА(ПроизводственнаяСправкаОбороты.ГлубинаЗавершоннойСкваженыОборот) КАК БурениеПМ
	|ИЗ
	|	РегистрНакопления.ПроизводственнаяСправка.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			ВидСкважины = &ВидСкважины
	|				И Подразделение = &Подразделение
	|				И Продукция.УчастокБурения = &Участок
	|				И ВЫБОР КОГДА &Принята ТОГДА Принята > 0 ИНАЧЕ Принята = 0 КОНЕЦ) КАК ПроизводственнаяСправкаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственнаяСправкаОбороты.ВидСкважины";
	Выб = Запрос.Выполнить().Выгрузить();
	
	Если Выб.Количество()<>0 Тогда
		Для Каждого Стр Из Выб Цикл
			ЗаполнитьЗначенияСвойств(Объект, Стр);
		КонецЦикла;
	КонецЕсли;

	тбГруппН = Объект.РасчетЛЗК.Выгрузить();
	тбГруппН.Свернуть("НоменклатурнаяГруппа, ВидНормы, Номенклатура", "ОстатокНаСкладе, Количество, ОстатокНаСкладеК");
	Объект.НоменклГрупыЛЗК.Загрузить(тбГруппН);

    Возврат Выб.Количество(); 

КонецФункции

&НаСервере
Функция ПолучитьДанныеИзПроизводственнойСправкиНов(Подразделение)
	
	тзНом = Объект.РасчетЛЗК.Выгрузить(, "Номенклатура, Количество");
	тзНом.Свернуть("Номенклатура", "Количество");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1"        , НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2"        , КонецМесяца(Объект.Дата));    
	//++Кибернетикка Беляев Е.И. 12.07.2024
	Запрос.УстановитьПараметр("ВидБурения"   , Объект.киб_ВидБурения);
	//++Кибернетикка Беляев Е.И. 12.07.2024
	Запрос.УстановитьПараметр("ВидСкважины"  , Объект.ВидСкв);
	Запрос.УстановитьПараметр("УчастокПодразделение"      , Объект.УчастокБурения);
	Запрос.УстановитьПараметр("Агрегат", Подразделение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственнаяСправкаПоОбъемамОбороты.ПробуреноПМПриход КАК Принята
		|ИЗ
		|	РегистрНакопления.ПроизводственнаяСправкаПоОбъемам.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			УчастокПодразделение = &УчастокПодразделение
		|				И ВидСкважины = &ВидСкважины
		|				И Агрегат = &Агрегат
		//++Кибернетикка Беляев Е.И. 12.07.202
		|				И ВидыБурения = &ВидБурения) КАК ПроизводственнаяСправкаПоОбъемамОбороты
		//--Кибернетикка Беляев Е.И. 12.07.202
		|ГДЕ
		|	ПроизводственнаяСправкаПоОбъемамОбороты.ПробуреноПМПриход > 0";
	Выб = Запрос.Выполнить().Выбрать();
	Принята = Выб.Следующий();
	Объект.Принята = Принята; 
	Запрос.УстановитьПараметр("Принята", Принята);
	
	ВидСкв = Объект.ВидСкв;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ПроизводственнаяСправкаПоОбъемамОбороты.ПробуреноПМПриход) КАК БурениеПМ,
			|	ПроизводственнаяСправкаПоОбъемамОбороты.ВидСкважины КАК ВидСкв,
			|	СУММА(ПроизводственнаяСправкаПоОбъемамОбороты.ПробуреноСквПриход) КАК БурениеСкв
			|ИЗ
			|	РегистрНакопления.ПроизводственнаяСправкаПоОбъемам.Обороты(
			|			&Дата1,
			|			&Дата2,
			|			,
			|			УчастокПодразделение = &УчастокПодразделение
			|				И ВидСкважины = &ВидСкважины
			|				И Агрегат = &Агрегат 
			//Беляев
			|				И ВидыБурения = &ВидБурения) КАК ПроизводственнаяСправкаПоОбъемамОбороты 
			//Беляев
			|ГДЕ
			|	ПроизводственнаяСправкаПоОбъемамОбороты.ПробуреноПМПриход <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроизводственнаяСправкаПоОбъемамОбороты.ВидСкважины";

	Выб = Запрос.Выполнить().Выгрузить();
	
	Если Выб.Количество()<>0 Тогда
		Для Каждого Стр Из Выб Цикл
			ЗаполнитьЗначенияСвойств(Объект, Стр);
		КонецЦикла;
	КонецЕсли;

	тбГруппН = Объект.РасчетЛЗК.Выгрузить();
	тбГруппН.Свернуть("НоменклатурнаяГруппа, ВидНормы, Номенклатура", "ОстатокНаСкладе, Количество, ОстатокНаСкладеК");
	Объект.НоменклГрупыЛЗК.Загрузить(тбГруппН);

	Если Выб.Количество()<>0 Тогда
		ВозвратЗн = Новый Структура;
		ВозвратЗн.Вставить("БурениеСкв", ?(Выб[0].БурениеСкв<0, 0, Выб[0].БурениеСкв));
		ВозвратЗн.Вставить("БурениеПМ" , ?(Выб[0].БурениеПМ<0, 0, Выб[0].БурениеПМ));
		//ВозвратЗн = ?(Выб[0].БурениеСкв=0, Выб[0].БурениеПМ,0);
	Иначе
		ВозвратЗн = 0;
	КонецЕсли;
	
    Возврат ВозвратЗн; 

КонецФункции

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Элемент, Реквизит)
    ПолученныйРеквизит = ПоместитьВоВременноеХранилище(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, Реквизит));	
    Возврат ПолученныйРеквизит; 
КонецФункции

&НаКлиенте
Процедура РасчетЛЗК(Команда)
	
	ПоляФормы	  = Новый Структура("Субконто1, Субконто2, Субконто3",
	                           "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	Подразделение = ПолучитьПодразделение(Объект.СчетЗатратБУ, ПоляФормы);
	
	Если Объект.Дата <=Дата("20191231235959") Тогда
		Если Объект.Номенклатура.Пустая() Тогда
		ИначеЕсли ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ВидСкважины")).Пустая() Тогда
			Предупреждение("У номенклатуры " + Объект.Номенклатура + " не указан вид скважины");
		ИначеЕсли ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "УчастокБурения")).Пустая() Тогда
			Предупреждение("У номенклатуры " + Объект.Номенклатура + " не указан участок");
		ИначеЕсли Подразделение.Пустая() Тогда
			Предупреждение("Подразделение не выбрано");
		Иначе
			Выб = ПолучитьДанныеИзПроизводственнойСправки(Подразделение);
			РасчетЛЗК_Выполнен(Выб);
		КонецЕсли;
	Иначе
		РасчетСд = Истина;
		Если Объект.ВидСкв.Пустая() Тогда
			Предупреждение("Не указан вид скважины!");
			РасчетСд = Ложь;
		КонецЕсли;    
		Если Объект.УчастокБурения.Пустая() Тогда
			Предупреждение("Не указан участок!");
			РасчетСд = Ложь;
		КонецЕсли;
		Если Подразделение.Пустая() Тогда
			Предупреждение("Подразделение не выбрано!");
			РасчетСд = Ложь;
		КонецЕсли;
		//++Кибернетикка Беляев Е.И. 12.07.2024
		Если Объект.киб_ВидБурения.Пустая() Тогда
			 Предупреждение("Вид бурения не выбран!");
			 РасчетСд = Ложь;
		КонецЕсли;	 
		//--Кибернетикка Беляев Е.И. 12.07.2024	 
		Если РасчетСд Тогда
			Выб = ПолучитьДанныеИзПроизводственнойСправкиНов(Подразделение);
			РасчетЛЗК_Выполнен(Выб);
			//++Кибернетикка Беляев Е.И. 12.10.2024		
			Элементы.ДекорацияНомераСкважин.Заголовок = Строка ("<" + СтрСоединить(НомераСкважинИзПроизводственнойСправки(),";") + ">");	 
			//--Кибернетикка Беляев Е.И. 12.10.2024
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетЛЗК_Выполнен(Выб)
	Если Выб = 0 Тогда
		//Объект.ВидСкв = "";
		Объект.БурениеПМ = 0;
		Объект.БурениеСкв = 0;
	Иначе
		Объект.БурениеПМ = Выб.БурениеПМ;
		Объект.БурениеСкв = Выб.БурениеСкв;
	КонецЕсли;
	
	Для Каждого стрГруппы Из Объект.НоменклГрупыЛЗК Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("НоменклатурнаяГруппа", стрГруппы.НоменклатурнаяГруппа);
		Отбор.Вставить("Номенклатура"        , стрГруппы.Номенклатура);
		
		ТЗ_НайденныеСтроки= Объект.РасчетЛЗК.НайтиСтроки(Отбор);
		Для Каждого найдСтр Из ТЗ_НайденныеСтроки Цикл
			стрГруппы.Норма              = найдСтр.Норма;
			стрГруппы.ОстатокНормы       = найдСтр.ОстатокНормы;
			стрГруппы.ПоНормеНаФактОбъем = ?(стрГруппы.ВидНормы = "скв", стрГруппы.Норма * Объект.БурениеСкв, стрГруппы.Норма * Объект.БурениеПМ);
			стрГруппы.Количество         = Мин(стрГруппы.ПоНормеНаФактОбъем, стрГруппы.ОстатокНаСкладе);
			стрГруппы.РезультатНорма     = стрГруппы.Количество - стрГруппы.ПоНормеНаФактОбъем;
			стрГруппы.ОстатокНаСкладеК   = стрГруппы.ОстатокНаСкладе - стрГруппы.Количество;
			стрГруппы.ОстатокНормыК      = стрГруппы.ОстатокНормы + стрГруппы.ПоНормеНаФактОбъем - стрГруппы.Количество;
			
			Если стрГруппы.Количество < стрГруппы.ПоНормеНаФактОбъем И стрГруппы.ОстатокНаСкладе >= стрГруппы.Количество Тогда 
				стрГруппы.КоличКСписанию = стрГруппы.Количество; //вариант 1
			ИначеЕсли  стрГруппы.Количество < стрГруппы.ПоНормеНаФактОбъем И стрГруппы.ОстатокНаСкладе <= стрГруппы.Количество Тогда 
				стрГруппы.КоличКСписанию = стрГруппы.ОстатокНаСкладе;  //вариант 2
			ИначеЕсли  стрГруппы.Количество >= стрГруппы.ПоНормеНаФактОбъем И стрГруппы.ОстатокНаСкладе >= стрГруппы.Количество Тогда 
				//ищем  по материалам если расчет=1  то списываем весь остаток иначе списываем факт
				Если найдСтр.ВидРасчетаЛЗК = ПредопределенноеЗначение("Перечисление.КТ_ВидРасчетаЛЗК.СписатьОстатокСверхНормы") Тогда
					стрГруппы.КоличКСписанию = стрГруппы.ОстатокНаСкладе;  //вариант 3 а)
				ИначеЕсли найдСтр.ВидРасчетаЛЗК = ПредопределенноеЗначение("Перечисление.КТ_ВидРасчетаЛЗК.СписатьФакт") Тогда
					стрГруппы.КоличКСписанию = стрГруппы.Количество;  //вариант 3 с)
				Иначе
					стрГруппы.КоличКСписанию = стрГруппы.ПоНормеНаФактОбъем;  //вариант 3 б)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//***************************
	Объект.Материалы.Очистить();
	Для Каждого стрЛзк Из Объект.НоменклГрупыЛЗК Цикл
		новСтрМат = Объект.Материалы.Добавить();
		новСтрМат.Номенклатура = стрЛзк.Номенклатура;
		новСтрМат.Количество   = стрЛзк.КоличКСписанию;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СчетБУ, СчетНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, новСтрМат);
		
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(новСтрМат, ДанныеСтрокиТаблицы);   
	КонецЦикла;
	
	Объект.РасчетЛЗК_Выполнен = Истина; 
	
	//++ Кибернетика Кубасов Е Задача I-22374
	РаспределитьМатериалы();
	//-- Кибернетика Кубасов Е Задача I-22374
	
КонецПроцедуры


&НаКлиенте
Процедура РасчетЛЗКСписание(Команда)
	
	ПоляФормы	  = Новый Структура("Субконто1, Субконто2, Субконто3",
	                           "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	Подразделение = ПолучитьПодразделение(Объект.СчетЗатратБУ, ПоляФормы);
	
	Если Объект.Дата <=Дата("20191231235959") Тогда
		Если Объект.Номенклатура.Пустая() Тогда
		ИначеЕсли ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ВидСкважины")).Пустая() Тогда
			Предупреждение("У номенклатуры " + Объект.Номенклатура + " не указан вид скважины");
		ИначеЕсли ПолучитьИзВременногоХранилища(ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "УчастокБурения")).Пустая() Тогда
			Предупреждение("У номенклатуры " + Объект.Номенклатура + " не указан участок");
		ИначеЕсли Подразделение.Пустая() Тогда
			Предупреждение("Подразделение не выбрано");
		Иначе
			ЗаполнитьМатериалы();
		КонецЕсли;
	Иначе
		РасчетСд = Истина;
		Если Объект.ВидСкв.Пустая() Тогда
			Предупреждение("Не указан вид скважины!");
			РасчетСд = Ложь;
		КонецЕсли;
		Если Объект.УчастокБурения.Пустая() Тогда
			Предупреждение("Не указан участок!");
			РасчетСд = Ложь;
		КонецЕсли;
		Если Подразделение.Пустая() Тогда
			Предупреждение("Подразделение не выбрано");
			РасчетСд = Ложь;
		КонецЕсли;
		
		Если РасчетСд Тогда
			ЗаполнитьМатериалы();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалы()
	Объект.Материалы.Очистить();
	Для Каждого стрЛзк Из Объект.НоменклГрупыЛЗК Цикл
		новСтрМат = Объект.Материалы.Добавить();
		новСтрМат.Номенклатура = стрЛзк.Номенклатура;
		новСтрМат.Количество   = стрЛзк.КоличКСписанию;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СчетБУ, СчетНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, новСтрМат);
		
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(новСтрМат, ДанныеСтрокиТаблицы);   
	КонецЦикла;
	
	Объект.РасчетЛЗК_Выполнен = Истина;
	Элементы.МатериалыНоменклатура.ТолькоПросмотр = Истина;
	Элементы.МатериалыСчетБУ.ТолькоПросмотр = Истина;
	Элементы.МатериалыСчетНУ.ТолькоПросмотр = Истина;
	Элементы.МатериалыЕдиницаИзмерения.ТолькоПросмотр = Истина;
	Элементы.МатериалыКоэффициент.ТолькоПросмотр = Истина;
	Элементы.МатериалыКоличество.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	РаспределитьМатериалы();	
КонецПроцедуры

&НаСервере
Процедура РаспределитьМатериалы()
	
	Попытка
		Для каждого ТекСтрока Из Объект.Материалы Цикл
			Если ТекСтрока.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.СчетБУ)
				  ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСебестоимость = Новый Запрос;
			ЗапросСебестоимость.Текст = "ВЫБРАТЬ
			|	ТиповойОстатки.Счет,
			|	ТиповойОстатки.Организация,
			|	ТиповойОстатки.Субконто1,
			|	ТиповойОстатки.Субконто2,
			|	ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0) / ВЫБОР
			|		КОГДА ТиповойОстатки.КоличествоОстаток = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 1)
			|	КОНЕЦ КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Остатки(
			|			&Период,
			|			Счет = &Счет,
			|			,
			|			Субконто1 = &Субконто1
			|				И Субконто2 = &Субконто2) КАК ТиповойОстатки";
			ЗапросСебестоимость.УстановитьПараметр("Период"   , Объект.Дата);	
			ЗапросСебестоимость.УстановитьПараметр("Счет"     , ТекСтрока.СчетБУ);	 
			ЗапросСебестоимость.УстановитьПараметр("Субконто1",	ТекСтрока.Номенклатура);	 
			ЗапросСебестоимость.УстановитьПараметр("Субконто2",	Объект.Склад);	 
			РезультатЗапроса = ЗапросСебестоимость.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий()= Ложь Тогда
				ТекСтрока.Сумма =0;
			Иначе
				ТекСтрока.Сумма = Окр(ТекСтрока.Количество * Выборка.СуммаОстаток, 2);
			КонецЕсли;
		
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.РасчетЛЗККоличКСписанию.Видимость = Ложь;
	Элементы.РасчетЛЗКОстатокНормы.Видимость   = Ложь;
	Элементы.РасчетЛЗКОстатокНормыК.Видимость  = Ложь;
	Элементы.РасчетЛЗКНорма.Видимость          = Ложь;
	Элементы.РасчетЛЗКРезультатНорма.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетЛЗККоличествоПриИзменении(Элемент)
	РасчетЛЗК(Null);
КонецПроцедуры

&НаКлиенте
Процедура РасчетЛЗКВидРасчетаЛЗКПриИзменении(Элемент)
	
	ТекДанные = Элементы.РасчетЛЗК.ТекущиеДанные;
	ТекДанные.номерРасчета = Элемент;
	
	Если Элемент = "списать остаток сверх нормы" Тогда 
		текДанные.номерРасчета = 1;
	ИначеЕсли Элемент = "списать факт" Тогда 
		текДанные.номерРасчета = 2;
	Иначе
		текДанные.номерРасчета = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "Материалы" Тогда
		РаспределитьМатериалы();	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ШифрПроизводственныхЗатратПриИзменении(Элемент)
	Объект.РасчетЛЗК_Выполнен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасчетЛЗКОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасчетЛЗКОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура РасчетЛЗКОбработкаВыбораНаСервере(ВыбранноеЗначение)	
	
	Перем Номенклатура, НоменклатурнаяГруппа, Количество, Норма, тбВсе;
	// Получим параметры подбора из структуры подбора.
	ВыбранноеЗначение.Свойство("Номенклатура"        , Номенклатура);
	ВыбранноеЗначение.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ВыбранноеЗначение.Свойство("Количество"          , Количество);
	ВыбранноеЗначение.Свойство("тбВсе"               , тбВсе);
	
	Если ТипЗнч(тбВсе) <> Неопределено Тогда
		Объект.РасчетЛЗК.Очистить();
		Для Каждого стрВсе Из тбВсе Цикл
			СтрокаТабличнойЧасти = Объект.РасчетЛЗК.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, стрВсе) ;
			СтрокаТабличнойЧасти.Количество = стрВсе.ОстатокНаСкладе;
		КонецЦикла;
	Иначе
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "РасчетЛЗК", СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Количество =  Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.РасчетЛЗК.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти
//--Кибернетика Беляев Е.И. 12.10.2024


//ИнтеграцияИСМПТК
#Область ИСМПТ

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНомераСкважинНажатие(Элемент)	

	//++Кибернетика Беляев Е.И. от 11.10.2024
	ОткрытьЗначение(КТ_ПроизводственнаяСправкаПоОбъемам);
	//--Кибернетика Беляев Е.И. от 11.10.2024  
	
КонецПроцедуры

#КонецОбласти

//++Кибернетика Беляев Е.И. 24.06.2024
&НаСервере
Процедура киб_УправлениеЭлементами ()
		
	Элементы.ШифрПроизводственныхЗатрат.Видимость = Ложь;  
	
	//++Кибернетика Беляев Е.И. 12.10.2024
	Если Объект.флНовыйРасчет = Истина и Объект.Принята = Истина Тогда   
		Элементы.ДекорацияНомераСкважин.Заголовок = Строка ("<" + СтрСоединить(НомераСкважинИзПроизводственнойСправки(),";") + ">");	
	КонецЕсли;
	//--Кибернетика Беляев Е.И. 12.10.2024

КонецПроцедуры
//--Кибернетика Беляев Е.И. 24.06.2024    

//++Кибернетика Беляев Е.И. 24.06.2024
&НаСервере
Процедура киб_ПрограммныйВыводРеквизитовНаФорму()
	
	ПолеВводаВидБурения =  Элементы.Добавить("киб_ВидБурения",Тип("ПолеФормы"),Элементы.ГруппаШапкаПравая);
	ПолеВводаВидБурения.Заголовок = "Вид Бурения";
	ПолеВводаВидБурения.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВводаВидБурения.ПутьКДанным = "Объект.киб_ВидБурения";
		
КонецПроцедуры	
//Конец ИнтеграцияИСМПТК

процедура ОбработкаПодбора2(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Номенклатура, НоменклатурнаяГруппа, Количество, Норма, тбВсе;
	// Получим параметры подбора из структуры подбора.
	
	ЗначениеВыбора.Свойство("Номенклатура"        , Номенклатура);
	ЗначениеВыбора.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ЗначениеВыбора.Свойство("Количество"          , Количество);
	ЗначениеВыбора.Свойство("тбВсе"               , тбВсе);
	Если ТипЗнч(тбВсе) = Тип("ТаблицаЗначений") Тогда
		ТабличнаяЧасть.Очистить();
		Для каждого стрВсе Из тбВсе Цикл
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,стрВсе) ;
			СтрокаТабличнойЧасти.Количество =  стрВсе.ОстатокНаСкладе;
		КонецЦикла;
	иначе
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Количество =  Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ЗначениеВыбора) ;
		КонецЕсли;
	КонецЕсли; //Если ТипЗнч(тбВсе) = Тип("ТаблицаЗначений")
	
КонецПроцедуры // ОбработкаПодбора2()


//Евгений+

&НаСервере 
Процедура ЗаполнитьМОЛНаСервере()
	
	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Объект.Склад;
	СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Объект.Дата, Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Объект.МОЛ = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Объект.МОЛ = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗабалансНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТоварыЗабаланс.ТекущиеДанные;
	
	ТекущиеДанные.ДатаПереводаНаЗабаланс = ТекущаяДата();
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СчетУчетаБУ, БлокГПР");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СтруктурноеПодразделение,
		|УчитыватьКПН, ВидУчетаНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыЗабалансНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

	ЗаполнитьСчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗабалансНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
    СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ; 
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаНаСервере()
	//Для каждого СтрокаТабличнойЧасти из Объект.ТоварыЗабаланс Цикл
	//	Если СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ПокупныеМатериалыКомплектующиеИзделия Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
	//	ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.Топливо Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанноеТопливо;
	//	ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ТараИТарныеМатериалы Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписаннаяТараИТарныеМатериалы;
	//	ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ЗапасныеЧасти Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
	//	ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.ПрочиеМатериалы Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
	//	ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СтроительныеМатериалы Тогда
	//		СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеСтроительныеМатериалы;
	//	КонецЕсли;
	//КонецЦикла;	
	
	Для каждого СтрокаТабличнойЧасти из Объект.ТоварыЗабаланс Цикл
		Если СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1310" Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеСырьеИМатериалы;
		ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1313" Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанноеТопливо;
		ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1315" Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
		ИначеЕсли СтрокаТабличнойЧасти.СчетУчетаБУ.Код="1316" Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
		КонецЕсли;
	КонецЦикла;	
	

КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьНаЗабалансовыйСчетПриИзменении(Элемент)
	Если Объект.ОприходоватьНаЗабалансовыйСчет Тогда
		Для каждого Строка из Объект.Материалы Цикл
			Строка.ОприходоватьНаЗабалансовыйСчет = Истина;
		КонецЦикла;
	Иначе
		Для каждого Строка из Объект.Материалы Цикл
			Строка.ОприходоватьНаЗабалансовыйСчет = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры   

&НаКлиенте
Процедура ПодписантПриИзменении(Элемент)
	ПодписантПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодписантПриИзмененииНаСервере()
	ДанныеИсполнителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, Объект.Подписант, Объект.Дата);
	Объект.ДолжностьПодписанта = ДанныеИсполнителя.Должность;
КонецПроцедуры

&НаКлиенте
Процедура СолидарныеМОЛСтрокаПриИзменении(Элемент)
	Объект.СолидарныеМол.Очистить();
	Для каждого текЗначение из СолидарныеМОЛСтрока цикл
		Объект.СолидарныеМол.Добавить().ФизЛицо = текЗначение.Значение;
	Конеццикла;
	
	Модифицированность = Истина;
КонецПроцедуры

//++Кибернетика Беляев Е.И. 12.10.2024
&НаСервере
Функция НомераСкважинИзПроизводственнойСправки()
	
	НомерГода   = Год(Объект.Дата);
	НомерМесяца = Месяц(Объект.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.НомерСкважины КАК НомерСкважины,
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КТ_ПроизводственнаяСправкаПоОбъемам.Справка КАК КТ_ПроизводственнаяСправкаПоОбъемамСправка
	|ГДЕ
	|	КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидСкважины = &ВидСкважины
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.ВидБурения = &ВидБурения
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.УчастокПодразделение = &УчастокПодразделение
	|	И МЕСЯЦ(КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.ПериодРегистрации) = &НомерМесяца
	|	И ГОД(КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.ПериодРегистрации) = &НомерГода
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Агрегат = &Агрегат
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.Проведен = ИСТИНА
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И КТ_ПроизводственнаяСправкаПоОбъемамСправка.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Агрегат", Объект.СубконтоЗатратБУ1);
	Запрос.УстановитьПараметр("ВидБурения", Объект.киб_ВидБурения);
	Запрос.УстановитьПараметр("ВидСкважины", Объект.ВидСкв);
	Запрос.УстановитьПараметр("НомерГода", НомерГода);
	Запрос.УстановитьПараметр("НомерМесяца", НомерМесяца);
	Запрос.УстановитьПараметр("УчастокПодразделение", Объект.УчастокБурения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда	
		Возврат Ложь;	
	Иначе 
		НомераСкважин = Новый Массив();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НомераСкважин.Добавить(Строка(ВыборкаДетальныеЗаписи.НомерСкважины));
			ПроизводственнаяСправка = ВыборкаДетальныеЗаписи.Ссылка; //Если всё правильно заполняют и проводят, то должна быть в выборке одинаковая ссылка!!!
			//Т.К. на каждый месяц может быть 1 Произ справка
		КонецЦикла;
		КТ_ПроизводственнаяСправкаПоОбъемам = ПроизводственнаяСправка; 
		Возврат НомераСкважин; 
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ПодборСкважин(Команда)
	ПодборСкважинНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодборСкважинНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры
//Евгений-

