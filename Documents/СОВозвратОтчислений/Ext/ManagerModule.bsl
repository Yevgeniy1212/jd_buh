#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДоступныеДокументыОснования(ВидОперации) Экспорт
	
	ДоступныеДокументы = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС);
		
	КонецЕсли;
	
	Возврат ДоступныеДокументы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоСОПеречислениеВФонды(Объект, Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	СоответствиеВидовОпераций = Новый Соответствие;
	СоответствиеВидовОпераций.Вставить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений, Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений);
	СоответствиеВидовОпераций.Вставить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС, Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС);
	СоответствиеВидовОпераций.Вставить(Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС, Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС);
	
	Запрос = Новый Запрос;
	Запрос.Текст =      
	"ВЫБРАТЬ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) КАК Сумма
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|ГДЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо
	|АВТОУПОРЯДОЧИВАНИЕ";	
 	
	Запрос.УстановитьПараметр("Ссылка", Основание);
		
	Объект.Контрагент		  = Основание.Контрагент;
	Объект.ВидПлатежа		  = Основание.ВидПлатежа;
	Объект.ПериодРегистрации  = Основание.ПериодРегистрации;
	Объект.ВидОперации 	  	  = СоответствиеВидовОпераций[Основание.ВидОперации]; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаДанных = РезультатЗапроса.Выгрузить();		
   		Объект.СоциальныеОтчисления.Загрузить(ТаблицаДанных);
	КонецЕсли;
	
	Объект.ДокументОснование = Основание;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьВидОперацииПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СОВозвратОтчислений.Ссылка
		|ИЗ
		|	Документ.СОВозвратОтчислений КАК СОВозвратОтчислений
		|ГДЕ
		|	СОВозвратОтчислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СОВозвратОтчислений.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	ВОПоУмолчанию = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений;
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ.СОВозвратОтчислений");
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			ДокументОбъект.ВидОперации = ВОПоУмолчанию;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли