#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьТабличнуюЧастьОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями, РежимЗаполнения) Экспорт 
	
	//Если РежимЗаполнения = "ПоДаннымУчета" Тогда 
	//	СписокОС = Объект.ОС.Выгрузить(,"ОсновноеСредство");
	Если РежимЗаполнения = "ПоЗабалансовым" Тогда 
		СписокОС = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаОстатков",  Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("МОЛ", 		   Объект.МОЛОрганизации);
	Запрос.УстановитьПараметр("СубконтоОС",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокОС",      СписокОС);
	Запрос.УстановитьПараметр("Состояние",     Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);				
		УсловиеСтруктурноеПодразделение = ?(ПоддержкаРаботыСоСтруктурнымиПодразделениями, " И СтруктурноеПодразделение = &СтруктурноеПодразделение "," ");
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	УсловиеОС       	  = ?(ЗначениеЗаполнено(СписокОС), "И ОсновноеСредство В(&СписокОС)", "");
	УсловиеСубконто 	  = ?(ЗначениеЗаполнено(СписокОС), "И Субконто1 В(&СписокОС)", "");
	УсловиеПодразделение  = ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "МестонахождениеОСБухгалтерскийУчет.Местонахождение = &Подразделение ", "");
	УсловиеМОЛ      	  = ?(ЗначениеЗаполнено(Объект.МОЛОрганизации), "МестонахождениеОСБухгалтерскийУчет.МОЛ = &МОЛ ", "");
	
	Если РежимЗаполнения = "ПоЗабалансовым" Тогда   // TED
		УсловиеСчета     = " И СчетУчетаБУ = &Счет9040 ";
	Иначе
		УсловиеСчета     = " И СчетУчетаБУ <> &Счет9040 ";
	КонецЕсли;
	Запрос.УстановитьПараметр("Счет9040", ПланыСчетов.Типовой.НайтиПоКоду("9040"));

	Если ЗначениеЗаполнено(УсловиеПодразделение) И  ЗначениеЗаполнено(УсловиеМОЛ) Тогда
		УсловиеМОЛ = " И " + УсловиеМОЛ;		
	КонецЕсли;                          
	
	Если ЗначениеЗаполнено (УсловиеПодразделение) ИЛИ ЗначениеЗаполнено(УсловиеМОЛ) ТОгда
		УсловиеПодразделение = " И " + УсловиеПодразделение;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	               |	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение,
	               |	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ
	               |ПОМЕСТИТЬ ВТ_Подразделение
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация " + УсловиеОС + ") КАК МестонахождениеОСБухгалтерскийУчет
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
				   |	&ДатаОстатков,
				   |	Организация = &Организация) КАК СостоянияОСОрганизацийСрезПоследних
                   |	ПО МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
				   |	И МестонахождениеОСБухгалтерскийУчет.Организация = СостоянияОСОрганизацийСрезПоследних.Организация
                   |	ГДЕ
				   |	СостоянияОСОрганизацийСрезПоследних.Состояние <> &Состояние
				   |	" + УсловиеПодразделение + УсловиеМОЛ + "
				   |	" + ?(ПоддержкаРаботыСоСтруктурнымиПодразделениями, " И МестонахождениеОСБухгалтерскийУчет.СтруктурноеПодразделение  = &СтруктурноеПодразделение", "") + "
				   |	" + ?(ПоддержкаРаботыСоСтруктурнымиПодразделениями, " И СостоянияОСОрганизацийСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение", "") + "
				   |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчетаБУ
				   |ПОМЕСТИТЬ ВТ_Счета
				   |ИЗ
				   |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И ОсновноеСредство В
				   |					(ВЫБРАТЬ
				   |						ВТ_Подразделение.ОсновноеСредство
				   |					ИЗ
				   |						ВТ_Подразделение КАК ВТ_Подразделение)" + УсловиеСтруктурноеПодразделение + УсловиеОС + УсловиеСчета + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство,
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ
				   |ИЗ
				   |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И ОсновноеСредство В
				   |					(ВЫБРАТЬ
				   |						ВТ_Подразделение.ОсновноеСредство
				   |					ИЗ
				   |						ВТ_Подразделение КАК ВТ_Подразделение) " + УсловиеСтруктурноеПодразделение + УсловиеОС + УсловиеСчета + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
                   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Счета.ОсновноеСредство КАК ОсновноеСредство,
	               |	ЕСТЬNULL(ТиповойОстатки_ВосстановительнаяСтоимость.СуммаОстаток, 0) КАК ВосстановительнаяСтоимость
	               |ИЗ
	               |	ВТ_Счета КАК ВТ_Счета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	               |				&ДатаОстатков,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_Счета.СчетУчетаБУ
	               |					ИЗ
	               |						ВТ_Счета КАК ВТ_Счета),
	               |				&СубконтоОС,
	               |				Организация = &Организация " + УсловиеСтруктурноеПодразделение + УсловиеСубконто + ") КАК ТиповойОстатки_ВосстановительнаяСтоимость
	               |		ПО ВТ_Счета.ОсновноеСредство = ТиповойОстатки_ВосстановительнаяСтоимость.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();

	Если РежимЗаполнения = "ПоДаннымУчета" Тогда 
		
		Для Каждого СтрокаОС Из Объект.ОС Цикл
			
			ОстатокОС = Результат.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
			
			Если НЕ (ОстатокОС = Неопределено) Тогда
				
				СтрокаОС.СтоимостьПоДаннымУчета = ОстатокОС.ВосстановительнаяСтоимость;
				СтрокаОС.НаличиеПоДаннымУчета   = Истина;
				
			Иначе
				
				СтрокаОС.СтоимостьПоДаннымУчета = 0;
				СтрокаОС.НаличиеПоДаннымУчета   = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимЗаполнения = "ПоЗабалансовым" Тогда 
		Для Каждого СтрокаОС Из Результат Цикл
			
			НоваяСтрока = Объект.ОС.Добавить();
			
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			//НоваяСтрока.СтоимостьПоДаннымУчета = СтрокаОС.ВосстановительнаяСтоимость;
			НоваяСтрока.НаличиеПоДаннымУчета   = Истина;
			//НоваяСтрока.НедостачаСумма         = СтрокаОС.ВосстановительнаяСтоимость;
			НоваяСтрока.НедостачаКоличество    = 1;
			
		КонецЦикла;
	
	КонецЕсли;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Инв-8 (Инвентаризационная опись)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьИНВ8";
	КомандаПечати.Представление = НСтр("ru = 'Инв-8 (Инвентаризационная опись)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Инв-16 (сличительная ведомость)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьИНВ16";
	КомандаПечати.Представление = НСтр("ru = 'Инв-16 (сличительная ведомость)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьИНВ8,ПечатьИНВ16";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 73;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьИНВ8,ПечатьИНВ16";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 74;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьИНВ8,ПечатьИНВ16";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Инв-8 (Инвентаризационная опись)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьИНВ8") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьИНВ8",
			НСтр("ru = 'Инв-8 (Инвентаризационная опись)'"),
			ПечатьИНВ8(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ИнвентаризацияОСЗабаланс.ПФ_MXL_ИНВ8");
	КонецЕсли;

	// Инв-16 (сличительная ведомость)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьИНВ16") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьИНВ16",
			НСтр("ru = 'Инв-16 (сличительная ведомость)'"),
			ПечатьИНВ16(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ИнвентаризацияОСЗабаланс.ПФ_MXL_ИНВ16");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьИНВ8(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  НСтр("ru = 'Лицо(а), ответственное(ые) за сохранность основных средств:'"));
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'"));
	ЗаголовокРазделаКомиссии.Вставить("Проверяющий",          НСтр("ru = 'Указанные в настоящей описи данные и расчеты проверил'"));
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.СтруктурноеПодразделение,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ИнвентаризацияОС.Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОСЗабаланс КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&Ссылка)
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредствоНаименованиеПолное,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ПОДСТРОКА(ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер, 1, 250) КАК ЗаводскойНомер,
	|	ПОДСТРОКА(ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта, 1, 250) КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОСЗабаланс.ОС КАК ИнвентаризацияОСОС
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В (&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ИнвентаризацияОС_ИНВ8";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ8");
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Пока ШапкаДокумента.Следующий() Цикл
		
		// Получаем области макета для вывода в табличный документ
		Шапка            = Макет.ПолучитьОбласть("Шапка");
		ПодписьМОЛ       = Макет.ПолучитьОбласть("ПодписьМОЛ");
		Приказ           = Макет.ПолучитьОбласть("Приказ");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ИтогиПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");	
		Итоги   		 = Макет.ПолучитьОбласть("Итоги");
		Комиссия         = Макет.ПолучитьОбласть("Комиссия");	
		Подвал           = Макет.ПолучитьОбласть("Подвал");
		ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");	

		ТаблицаИтогов.Очистить();
		
		ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();
	
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ТекстСообщения = НСтр(
				"ru = 'Невозможно сформировать печатную форму ""Инв-8"" документа ""%1"",
				|так как табличная часть ""ОС"" в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШапкаДокумента.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ШапкаДокумента.Ссылка);
			Продолжить;
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);

		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		Шапка.Параметры.Подразделение     		 = ШапкаДокумента.ПодразделениеПредставление;
		
		Шапка.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ДатаДок  = Формат(ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy") ;
		
		ТабДокумент.Вывести(Шапка);

		СписокОСДокумента = Новый ТаблицаЗначений;         	
		СписокОСДокумента.Колонки.Добавить("ОсновноеСредство",,"ОсновноеСредство");
		СписокОСДокумента.Колонки.Добавить("НаличиеФактическое",,"НаличиеФактическое");
		СписокОСДокумента.Колонки.Добавить("СтоимостьФактическая",,"СтоимостьФактическая");
		
		Если НЕ ВыборкаСтрокОС = Неопределено Тогда
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				Стр = СписокОСДокумента.Добавить();
				Стр.ОсновноеСредство 	 = ВыборкаСтрокОС.ОсновноеСредство;
				Стр.НаличиеФактическое   = ВыборкаСтрокОС.НаличиеФактическое;
				Стр.СтоимостьФактическая = ВыборкаСтрокОС.СтоимостьФактическая;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыборкаСтрокОС.Сбросить();
		
		Если ВыборкаСтрокОС.Количество()<>0 Тогда 
			СписокОС = СписокОСДокумента.ВыгрузитьКолонку("ОсновноеСредство");
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
			Запрос.УстановитьПараметр("Организация",      ШапкаДокумента.Организация);
			Запрос.УстановитьПараметр("Дата",             ШапкаДокумента.Дата);
			
			Запрос.Текст =
			"ВЫБРАТЬ  РАЗЛИЧНЫЕ
			|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
			|ИЗ
			|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
			
			Результат = Запрос.Выполнить().Выгрузить();
			СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
						
			// Выведем подписи МОЛов
			ВыводитьПодпись = Истина;
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.Дата);
			Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
								
				ПодписьМОЛ.Параметры.МОЛ = ?(ВыводитьПодпись, НСтр("ru = 'Материально-ответственное(ые) лицо(а):'"), "");
				
				ВыводитьПодпись = Ложь;
							
				ПодписьМОЛ.Параметры.Должность          = СтрокаМОЛ.Должность;
				ПодписьМОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
				
				ТабДокумент.Вывести(ПодписьМОЛ);
				
			КонецЦикла;
			
			// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х подписей)
			Если ДанныеМОЛ.Количество() < 3 Тогда
				
				Для Итератор = (ДанныеМОЛ.Количество() + 1) По 3 Цикл
					ПодписьМОЛ.Параметры.МОЛ			    = ?(ВыводитьПодпись, НСтр("ru = 'Материально-ответственное(ые) лицо(а):'"), "");
					ПодписьМОЛ.Параметры.Должность          = "";
					ПодписьМОЛ.Параметры.РасшифровкаПодписи = "";
					ТабДокумент.Вывести(ПодписьМОЛ);
				КонецЦикла;
			
			КонецЕсли;
			
			// выведем  данные приказа об инвентаризации
			Приказ.Параметры.Заполнить(ШапкаДокумента);
			Приказ.Параметры.ДокументОснованиеДата       = Формат(ШапкаДокумента.ДокументОснованиеДата		, "ДФ=""дд ММММ гггг 'года.'""");
			Приказ.Параметры.ДатаНачалаИнвентаризации    = Формат(ШапкаДокумента.ДатаНачалаИнвентаризации	, "ДФ=""дд ММММ гггг 'года.'""");
			Приказ.Параметры.ДатаОкончанияИнвентаризации = Формат(ШапкаДокумента.ДатаОкончанияИнвентаризации, "ДФ=""дд ММММ гггг 'года.'""");
			Приказ.Параметры.ДатаДок					 = Формат(ШапкаДокумента.Дата						, "ДФ=""дд ММММ гггг 'года.'""");
			
			БалансовыеСчета = "";
			
			ТаблицаСчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаСпискаОС(ШапкаДокумента.Организация, СписокОС, ШапкаДокумента.Дата);
			
			Для Каждого СтрокаСчет Из ТаблицаСчетаУчета Цикл
				Если БалансовыеСчета = "" Тогда
					БалансовыеСчета = "" + СтрокаСчет.Значение.СчетУчетаБУ;
				Иначе
					Если Найти(БалансовыеСчета, СтрокаСчет.Значение.СчетУчетаБУ) = 0 Тогда 
						БалансовыеСчета = "" + БалансовыеСчета + ", " + СтрокаСчет.Значение.СчетУчетаБУ;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			Приказ.Параметры.БалансовыеСчета = ?(ЗначениеЗаполнено(БалансовыеСчета), БалансовыеСчета, "_______________");
			
			ТабДокумент.Вывести(Приказ);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОборотнаяСторона);
						
			// Выведем заголовок таблицы	
			Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			
			ЗаголовокТаблицы.Параметры.Валюта = Валюта;
					
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ЗаголовокТаблицы) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
			
			ТабДокумент.Вывести(ЗаголовокТаблицы);	
			
			ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
			
			НаличиеФактическоеПоСтранице     = 0;
			СтоимостьФактическаяПоСтранице   = 0;
			НаличиеПоДаннымУчетаПоСтранице   = 0;
			СтоимостьПоДаннымУчетаПоСтранице = 0;
			
			// Выведем строки таблицы
			Пока ВыборкаСтрокОС.Следующий() Цикл
			
				СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
				
				// Присвоим имена с номерами строк областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое" + ВыборкаСтрокОС.НомерСтроки;
				СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая" + ВыборкаСтрокОС.НомерСтроки;
				СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета" + ВыборкаСтрокОС.НомерСтроки;
				СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета" + ВыборкаСтрокОС.НомерСтроки;
				
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ИтогиПоСтранице);
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					
					ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
					
					// Присвоим имена с порядковыми номерами итогов областям таблицы.
					// Номера потребуются для включения/отключения видимости значений в ячейках.
					ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
					ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
					ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
					ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
					
					// Выведем заголовок итогов по странице
					ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
					ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
					ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
					ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
					
					ТабДокумент.Вывести(ИтогиПоСтранице);
					
					// Добавим значения итогов по странице в таблицу итогов.
					// Они потребуются при включении видимости значений ячеек.
					НоваяСтрока = ТаблицаИтогов.Добавить();
					НоваяСтрока.ПорядковыйНомерИтогов      = ПорядковыйНомерИтогов;
					НоваяСтрока.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
					НоваяСтрока.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
					НоваяСтрока.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
					НоваяСтрока.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
					
					ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем заголовок таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
					НаличиеФактическоеПоСтранице     = 0;
					СтоимостьФактическаяПоСтранице   = 0;
					НаличиеПоДаннымУчетаПоСтранице   = 0;
					СтоимостьПоДаннымУчетаПоСтранице = 0;
					
				КонецЕсли;
				
				НаличиеФактическое   = 0;
				НаличиеПоДаннымУчета = 0;
				БалансовыйСчет       = ТаблицаСчетаУчета.Получить(ВыборкаСтрокОС.ОсновноеСредство);
				
				СтрокаТаблицы.Параметры.НомерСтроки 					   = ВыборкаСтрокОС.НомерСтроки;
				СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное = ВыборкаСтрокОС.ОсновноеСредство.НаименованиеПолное;
				СтрокаТаблицы.Параметры.ГодВыпуска						   = ВыборкаСтрокОС.ОсновноеСредство.ДатаВыпуска;
				СтрокаТаблицы.Параметры.ЗаводскойНомер					   = СокрЛП(ВыборкаСтрокОС.ЗаводскойНомер);
				СтрокаТаблицы.Параметры.НомерПаспорта					   = ВыборкаСтрокОС.ОсновноеСредство.НомерПаспорта;
				СтрокаТаблицы.Параметры.БалансовыйСчет 					   = ?(БалансовыйСчет <> Неопределено, БалансовыйСчет.СчетУчетаБУ, "");
				
				ДокументПринятияКУчетуБУ = Неопределено;
				ДатаПриобретения 		 = '00010101';
				
				УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.Поступило, ШапкаДокумента.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);
				
				Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
					УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ШапкаДокумента.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);	
				КонецЕсли;	
				
				СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения;
				
				СтрокаТаблицы.Параметры.ИнвентарныйНомер = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, ШапкаДокумента.Дата).ИнвентарныйНомер;
				
				Если ВыборкаСтрокОС.НаличиеФактическое  Тогда
					НаличиеФактическое=1;
				КонецЕсли;
				
				СтрокаТаблицы.Параметры.НаличиеФактическое	 = НаличиеФактическое;
				СтрокаТаблицы.Параметры.СтоимостьФактическая = ВыборкаСтрокОС.СтоимостьФактическая;
				
				Если ВыборкаСтрокОС.НаличиеПоДаннымУчета  Тогда
					НаличиеПоДаннымУчета=1;
				КонецЕсли;
				СтрокаТаблицы.Параметры.НаличиеПоДаннымУчета   = НаличиеПоДаннымУчета;
				СтрокаТаблицы.Параметры.СтоимостьПоДаннымУчета = ВыборкаСтрокОС.СтоимостьПоДаннымУчета;
				
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
				НаличиеФактическоеПоСтранице     = НаличиеФактическоеПоСтранице   + НаличиеФактическое;
				СтоимостьФактическаяПоСтранице   = СтоимостьФактическаяПоСтранице + ВыборкаСтрокОС.СтоимостьФактическая;
				НаличиеПоДаннымУчетаПоСтранице   = НаличиеПоДаннымУчетаПоСтранице + НаличиеПоДаннымУчета;
				СтоимостьПоДаннымУчетаПоСтранице = СтоимостьПоДаннымУчетаПоСтранице + ВыборкаСтрокОС.СтоимостьПоДаннымУчета;
				
			КонецЦикла;		
			
			
			ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
			
			// Выведем заголовок итогов по странице
			ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
			
			ТабДокумент.Вывести(ИтогиПоСтранице);
			
			// Добавим значения итогов по странице в таблицу итогов.
			// Они потребуются при включении видимости значений ячеек.
			НоваяСтрока = ТаблицаИтогов.Добавить();
			НоваяСтрока.ПорядковыйНомерИтогов      = ПорядковыйНомерИтогов;
			НоваяСтрока.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
			НоваяСтрока.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
			НоваяСтрока.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
			НоваяСтрока.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
			
			ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
			
			Итоги = Макет.ПолучитьОбласть("Итоги");	
						
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			
			// Выведем итоговые строки
			Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(ВыборкаСтрокОС.Количество(),, ",,,м,,,,,0");
			Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(СписокОСДокумента.Итог("НаличиеФактическое"),,",,,м,,,,,0");
			
			Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СписокОСДокумента.Итог("СтоимостьФактическая"), ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			Итоги.Параметры.Валюта = Валюта;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Итоги) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабДокумент.Вывести(Итоги);

			// Выведем подпись председателя инвентаризационной комиссии
			ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
			
			Если НЕ (ПредседательКомиссии = Неопределено) Тогда
				
				ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.Дата);
					
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
				Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
				Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
				
			Иначе
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
				Комиссия.Параметры.Должность                = "";
				Комиссия.Параметры.РасшифровкаПодписи       = "";
				
			КонецЕсли;
							
			ТабДокумент.Вывести(Комиссия);
			
			// Выведем подписи членов комиссии
			ВыводитьЗаголовок = Истина;
			
			// Сформируем список членов комиссии
			СписокЧленовКомиссии = Новый Массив();
			
			Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
				Если НЕ Строка.Председатель Тогда
					СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокЧленовКомиссии, ШапкаДокумента.Дата);
			
			// Сначала выведем членов комиссии из выборки
			Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
			// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
			Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
				КонецЕсли;
				
				Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
					
					Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
					                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
																   "");
					Комиссия.Параметры.Должность          = "";
					Комиссия.Параметры.РасшифровкаПодписи = "";
					
					ТабДокумент.Вывести(Комиссия);
					
					ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
					
				КонецЦикла;
			
			КонецЕсли;
			
			ТабДокумент.Вывести(Подвал);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ8()

Функция ПечатьИНВ16(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.СтруктурноеПодразделение,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОСЗабаланс КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&Ссылка)
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредствоНаименованиеПолное,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК СТРОКА(1000)) КАК ЗаводскойНомер,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта КАК СТРОКА(1000)) КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОСЗабаланс.ОС КАК ИнвентаризацияОСОС
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ16");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ИнвентаризацияОС_ИНВ16";
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	 		
	Пока ШапкаДокумента.Следующий() Цикл

		// Получаем области макета для вывода в табличный документ
		Шапка                     = Макет.ПолучитьОбласть("Шапка");
		СекцияМОЛ                 = Макет.ПолучитьОбласть("СекцияМОЛ");
		СтрокаНадТаблицей         = Макет.ПолучитьОбласть("СтрокаНадТаблицей");
		ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
		ШапкаПодписейМОЛ          = Макет.ПолучитьОбласть("ШапкаПодписейМОЛ");
		Подпись                   = Макет.ПолучитьОбласть("ПодписьМОЛ");
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ТекстСообщения = НСтр(
				"ru = 'Невозможно сформировать печатную форму ""Инв-16"" документа ""%1"",
				|так как табличная часть ""ОС"" в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШапкаДокумента.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ШапкаДокумента.Ссылка);
			Продолжить;			
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);

		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		Шапка.Параметры.ДокументОснованиеДата    = СтрЗаменить(Формат(ШапкаДокумента.ДокументОснованиеДата,"ДЛФ=DD"), "г.", "года");
		
		Шапка.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ДатаДок  = Формат(ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy") + " года";
		
		ТабДокумент.Вывести(Шапка);

	 	СписокОСДокумента = Новый ТаблицаЗначений;         	
		СписокОСДокумента.Колонки.Добавить("ОсновноеСредство",,"ОсновноеСредство");
		СписокОСДокумента.Колонки.Добавить("НаличиеФактическое",,"НаличиеФактическое");
		СписокОСДокумента.Колонки.Добавить("СтоимостьФактическая",,"СтоимостьФактическая");
		
		Если НЕ ВыборкаСтрокОС = Неопределено Тогда
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				Стр = СписокОСДокумента.Добавить();
				Стр.ОсновноеСредство 	 = ВыборкаСтрокОС.ОсновноеСредство;
				Стр.НаличиеФактическое   = ВыборкаСтрокОС.НаличиеФактическое;
				Стр.СтоимостьФактическая = ВыборкаСтрокОС.СтоимостьФактическая;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыборкаСтрокОС.Сбросить();
		
		Если ВыборкаСтрокОС.Количество()<>0 Тогда 
			
			// Получим список МОЛ на основании списка ОС
			СписокОС = СписокОСДокумента.ВыгрузитьКолонку("ОсновноеСредство");
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
			Запрос.УстановитьПараметр("Организация",      ШапкаДокумента.Организация);
			Запрос.УстановитьПараметр("Дата",             ШапкаДокумента.Дата);
			
			Запрос.Текст =
			"ВЫБРАТЬ   РАЗЛИЧНЫЕ
			|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
			|ИЗ
			|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
			
			Результат = Запрос.Выполнить().Выгрузить();
			СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
			
			// Выведем подписи МОЛов
			ДанныеМОЛ 			 = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.Дата);
			ВыводитьЗаголовокМОЛ = Истина;
			
			// Сначала выведем МОЛов из выборки
			Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СекцияМОЛ) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				СекцияМОЛ.Параметры.Должность 		   = СтрокаМОЛ.Должность;
				СекцияМОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
				
				//СекцияМОЛ.Параметры.ЗаголовокМОЛ = ?(ВыводитьЗаголовокМОЛ, НСтр("ru = 'находящихся на ответственном хранении'"), "" );
				ВыводитьЗаголовокМОЛ = Ложь;
				
				ТабДокумент.Вывести(СекцияМОЛ);
				
			КонецЦикла;
			
			// Проверим, помещаются ли строка над таблицей, заголовок и первая строка.
			ШапкаТаблицы = Новый Массив;
			ШапкаТаблицы.Добавить(СтрокаНадТаблицей);
			ШапкаТаблицы.Добавить(ЗаголовокТаблицы);
			ШапкаТаблицы.Добавить(СтрокаТаблицы);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ШапкаТаблицы) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			СтрокаНадТаблицей.Параметры.ДатаНачалаИнвентаризации    = СтрЗаменить(Формат(ШапкаДокумента.ДатаНачалаИнвентаризации,"ДЛФ=DD"), "г.", "года");
			СтрокаНадТаблицей.Параметры.ДатаОкончанияИнвентаризации = СтрЗаменить(Формат(ШапкаДокумента.ДатаОкончанияИнвентаризации,"ДЛФ=DD"), "г.", "года");
			
			// Выведем строку над таблицей
			ТабДокумент.Вывести(СтрокаНадТаблицей);
			
			// Выведем заголовок таблицы
			ЗаголовокТаблицы.Параметры.Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
			// Создадим переменные для накопления итогов по каждой странице
			ИтогИзлишекКоличество   = 0;
			ИтогИзлишекСтоимость    = 0;
			ИтогНедостачаКоличество = 0;
			ИтогНедостачаСтоимость  = 0;
			
			// Выведем строки таблицы
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ПодвалТаблицы);
				Если (ВыборкаСтрокОС.НомерСтроки = ВыборкаСтрокОС.Количество()) Тогда // если последняя строка, должна
					СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера);             // помещаться и подпись гл.бухгалтера
				КонецЕсли;
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					
					// Выведем подвал таблицы
					ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
					ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
					ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
					ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
					
					ТабДокумент.Вывести(ПодвалТаблицы);
					
					// Обнулим переменные для накопления итогов по каждой странице
					ИтогИзлишекКоличество   = 0;
					ИтогИзлишекСтоимость    = 0;
					ИтогНедостачаКоличество = 0;
					ИтогНедостачаСтоимость  = 0;
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Выведем заголовок таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				РазницаПоНаличию   = ВыборкаСтрокОС.НаличиеФактическое - ВыборкаСтрокОС.НаличиеПоДаннымУчета;
				РазницаПоСтоимости = ВыборкаСтрокОС.СтоимостьФактическая - ВыборкаСтрокОС.СтоимостьПоДаннымУчета;
			
				Если (РазницаПоНаличию = 0) И (РазницаПоСтоимости = 0) Тогда
					Продолжить;	
				КонецЕсли;	
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокОС);
				СтрокаТаблицы.Параметры.ИнвентарныйНомер = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, ШапкаДокумента.Дата).ИнвентарныйНомер;
				СтрокаТаблицы.Параметры.ГодВыпуска		 = ВыборкаСтрокОС.ОсновноеСредство.ДатаВыпуска;
				
				ДокументПринятияКУчетуБУ = Неопределено;
				ДатаПриобретения 		 = '00010101';
				
				УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.Поступило, ШапкаДокумента.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);
				
				Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
					УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ШапкаДокумента.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);	
				КонецЕсли;	
				
				СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения;
				
				ИзлишекКоличество   = ?(РазницаПоНаличию > 0,   РазницаПоНаличию, 0);
				ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
				НедостачаКоличество = ?(РазницаПоНаличию < 0,  -РазницаПоНаличию, 0);
				НедостачаСтоимость  = ?(РазницаПоСтоимости < 0,-РазницаПоСтоимости, 0);
				
				ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
				ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость  + ИзлишекСтоимость;
				ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
				ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость  + НедостачаСтоимость;
				
				СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
				СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
				СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
				СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
			КонецЦикла;
			
			
			// Выведем подвал таблицы
			ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
			ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
			ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
			ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
			
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			// Выведем подпись бухгалтера
			Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
			
			ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);
			
			// Проверим, помещаются ли шапка подписей и одна подпись
			Подписи = Новый Массив;
			Подписи.Добавить(ШапкаПодписейМОЛ);
			Подписи.Добавить(Подпись);
						
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подписи) Тогда
					
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			// Выведем шапку подписей МОЛ
			ТабДокумент.Вывести(ШапкаПодписейМОЛ);
			
			// Выведем подписи МОЛов
			ЗаголовокРазделаПодписей = НСтр("ru = 'Материально-ответственное(-ые) лицо(-а)'");
			ВыводитьЗаголовок = Истина;
			
			// Сначала выведем МОЛов из выборки
			Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
				КонецЕсли;
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаПодписей,
															   "");
				Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
				Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
				
				ТабДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
			// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
			Если ДанныеМОЛ.Количество() < 2 Тогда
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
				КонецЕсли;
				
				Для Итератор = (ДанныеМОЛ.Количество() + 1) По 2 Цикл
					
					Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
					                                               ЗаголовокРазделаПодписей,
																   "");
					Подпись.Параметры.Должность                = "";
					Подпись.Параметры.РасшифровкаПодписи       = "";
					
					ТабДокумент.Вывести(Подпись);
					
					ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
					
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);
	
	КонецЦикла;
	   	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ16()

#КонецЕсли
