
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	// Включим предопределенные счета и их субсчета
	УправлениеВнеоборотнымиАктивамиСервер.ОграничитьВыборСчетамиУчетаОС(Элементы.ОССчетУчетаБУ, Истина);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_РеструктуризацияОС", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_ОприходованиеТоваров" Тогда
		УснановитьНадписьДокументаОприходования(Объект.Ссылка, ДокументОприходованиеТМЗ, ГиперссылкаОприходованиеТМЗ)
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""реструктуризация ос"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента) Тогда
		ДатаПриИзмененииНаСервере();	
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Прочее.Количество() > 0 Тогда 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентЧастичногоСписанияПриИзменении(Элемент)
	РассчитатьСуммыСписания(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяСуммаСписанияПервоначальнойСтоимостиПриИзменении(Элемент)
	РассчитатьСуммыСписания(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьЧастичногоСписанияПриИзменении(Элемент)
	РассчитатьОбщуюСуммуСписания(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияЧастичногоСписанияПриИзменении(Элемент)
	РассчитатьОбщуюСуммуСписания(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	РассчитатьКоэффициентАмортизации();
КонецПроцедуры

&НаКлиенте
Процедура ФактСрокИспользованияБУПриИзменении(Элемент)
	РассчитатьКоэффициентАмортизации();
КонецПроцедуры

&НаКлиенте
Процедура ИсходноеОсновноеСредствоПриИзменении(Элемент)
	
	СпособНачисленияАмортизации = ПолучитьСпособНачисленияАмортизацииОС(Объект.ИсходноеОсновноеСредство, Объект.Организация, Объект.Дата);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОприходованиеТМЗНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (НЕ Объект.Проведен) И (НЕ Объект.ПометкаУдаления) Тогда
		
		ТекстВопроса = НСтр("ru='Оприходование ТМЗ нельзя вводить на основании не проведенного документа! Провести документ?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВводаНаОсновании", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
		
	ИначеЕсли ЭтотОбъект.Модифицированность Тогда 
		ПослеЗакрытияВопросаВводаНаОсновании(КодВозвратаДиалога.Да, Параметры);
	Иначе
		СоздатьОткрытьДокументОприходования();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетУчетаБУ));
	
КонецПроцедуры   

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Прочее

&НаКлиенте
Процедура ПрочееСчетСписанияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоСписанияБУ1", "СубконтоСписанияБУ2", "СубконтоСписанияБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетСписанияБУ, ТекущиеДанные, ПоляОбъекта, Истина);   
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");
	
	ТекущиеДанные.СчетСписанияНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетСписанияБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоСписанияНУ1", "СубконтоСписанияНУ2", "СубконтоСписанияНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетСписанияНУ, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее");
		
	ДанныеСтрокиТаблицы = Новый Структура("СчетСписанияБУ, СчетСписанияНУ, 
		|СубконтоСписанияБУ1, СубконтоСписанияБУ2, СубконтоСписанияБУ3,
		|СубконтоСписанияНУ1, СубконтоСписанияНУ2, СубконтоСписанияНУ3, Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеСтрокиТаблицы.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	ДанныеОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПрочееСчетСписанияБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияБУ, ТекущиеДанные.СчетСписанияНУ, 1, ТекущиеДанные.СубконтоСписанияБУ1, "СубконтоСписанияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияБУ, ТекущиеДанные.СчетСписанияНУ, 2, ТекущиеДанные.СубконтоСписанияБУ2, "СубконтоСписанияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияБУ, ТекущиеДанные.СчетСписанияНУ, 3, ТекущиеДанные.СубконтоСписанияБУ3, "СубконтоСписанияНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияБУ", 1, "СчетСписанияБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияБУ", 2, "СчетСписанияБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияБУ", 3, "СчетСписанияБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетСписанияНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияНУ1", "СубконтоСписанияНУ2", "СубконтоСписанияНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее");
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетСписанияНУ, СубконтоСписанияНУ1, СубконтоСписанияНУ2, СубконтоСписанияНУ3, Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	ДанныеСтрокиТаблицы.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");

	ДанныеОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПрочееСчетСписанияНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияНУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее");
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияНУ",  1, "СчетСписанияНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияНУ",  2, "СчетСписанияНУ", ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоСписанияНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияНУ",  3, "СчетСписанияНУ", ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры    

&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СтруктурноеПодразделение, УчитыватьКПН, ВидУчетаНУ, Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ, СчетУчетаНУ");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(ТекущиеДанные);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.СчетУчетаБУ) Тогда
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.СчетУчетаБУ),,
			"Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ",
			"Объект");
			
		ТекущиеДанные.СчетУчетаБУ = Неопределено;
		Возврат;
	КонецЕсли;
	
	// НУ
	ТекущиеДанные.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры    


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПараметрыАмортизации(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИсходноеОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru='Не заполнено исходное основное средство'");
		Поле = "ИсходноеОсновноеСредство";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru='Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны! Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПересчете", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСтоимостьБУОС(Команда)

	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru='Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны! Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаспределенияСтоимостиБУ", ЭтотОбъект, Новый Структура("ТабЧасть", "ОС"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСтоимостьНУОС(Команда)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru='Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны! Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаспределенияСтоимостиНУ", ЭтотОбъект, Новый Структура("ТабЧасть", "ОС"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru='ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСтоимостьБУТМЗ(Команда)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru='Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны! Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаспределенияСтоимостиБУ", ЭтотОбъект, Новый Структура("ТабЧасть", "Товары"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСтоимостьНУТМЗ(Команда)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru='Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны! Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаспределенияСтоимостиНУ", ЭтотОбъект, Новый Структура("ТабЧасть", "Товары"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТМЗ(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru='ТМЗ'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", НСтр("ru='Товары'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	УстановитьДоступностьСубконто();
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
		
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);		
	КонецЕсли;
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УснановитьНадписьДокументаОприходования(Объект.Ссылка, ДокументОприходованиеТМЗ, ГиперссылкаОприходованиеТМЗ);
		
	СпособНачисленияАмортизации = ПолучитьСпособНачисленияАмортизацииОС(Объект.ИсходноеОсновноеСредство, Объект.Организация, Объект.Дата);
	
	ВедетсяАналитическийУчетОСПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Объект.Дата);
	ВедетсяАналитическийУчетОСПоМОЛ            = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Объект.Дата);
	
	РассчитатьОбщуюСуммуСписания(ЭтаФорма);
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
				            		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВидУчетаНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.СтоимостьЧастичногоСписанияНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ПрочееГруппаСубконтоСчетаНУ.Видимость   = Объект.УчитыватьКПН; 
	
	ЧастичноеСписание = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание"));
	
	Элементы.СнятьСУчетаПоНалогам.Видимость = Не ЧастичноеСписание;
	Элементы.ГруппаНовыеПараметрыАмортизацииИсходногоОС.Видимость = ЧастичноеСписание;
	Элементы.КоэффициентЧастичногоСписания.Видимость = ЧастичноеСписание;
	Элементы.ГруппаСписываемыеСуммы.Видимость = ЧастичноеСписание;
	
	СпособНачисленияАмортизации = Форма.СпособНачисленияАмортизации;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));

	Если ЧастичноеСписание Тогда
		
		// по умолчанию настроим видимость для линейного способа амортизации
		Если СпособНачисленияАмортизации = Неопределено Тогда
			СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
		КонецЕсли;	
		
		Если СпособНачисленияАмортизации    = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
			Или СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом")
			Или СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования")
			Или СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка") Тогда
					
			Элементы.СтраницаСрок.Видимость  = Истина;
			Элементы.СтраницаОбъем.Видимость = Ложь;
						
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Производственный") Тогда
			
			Элементы.СтраницаСрок.Видимость  = Ложь;
			Элементы.СтраницаОбъем.Видимость = Истина;
			
		КонецЕсли;
		
		Если СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка") Тогда
			Элементы.КоэффициентУскоренияБУ.Видимость  = Истина;
			Элементы.КоэффициентУскоренияБУ1.Видимость = Истина;
		Иначе
			Элементы.КоэффициентУскоренияБУ.Видимость  = Ложь;
			Элементы.КоэффициентУскоренияБУ1.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбновитьИтоги(Форма);
																				
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособНачисленияАмортизацииОС(ОсновноеСредство, Организация, Дата)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОС", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));   	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			ОсновноеСредство = &ОС
	|				И Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СпособНачисленияАмортизации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьОбщуюСуммуСписания(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ОбщаяСуммаСписанияПервоначальнойСтоимости = Объект.СтоимостьЧастичногоСписания + Объект.АмортизацияЧастичногоСписания;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для Каждого СтрокаТЧ Из Объект.Прочее Цикл
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Прочее")
	
	ИмяЭлементаСписания = "СубконтоСписания";
	ИмяСчетаСписания    = "СчетСписания";
		
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСписанияБУ1", "СубконтоСписанияБУ2", "СубконтоСписанияБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСписанияНУ1", "СубконтоСписанияНУ2", "СубконтоСписанияНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаСписания + Префикс +"%Индекс%", ИмяСчетаСписания + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаСписания + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаСписания + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаСписания + Префикс +"%Индекс%", ИмяСчетаСписания + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаСписания + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаСписания + Префикс + "%Индекс%", ПараметрыДокумента);	
		
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьТекущуюСтраницуОсновнойПанели();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ОС",     "ОС");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	СпособНачисленияАмортизации = ПолучитьСпособНачисленияАмортизацииОС(Объект.ИсходноеОсновноеСредство, Объект.Организация, Объект.Дата);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
				
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, Неопределено);
		
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);    	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СтруктурноеПодразделение, УчитыватьКПН, ВидУчетаНУ, Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Документы.РеструктуризацияОС.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, Объект);
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");	
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияБУ", "СчетСписанияБУ", "Прочее");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНУ", "СчетСписанияНУ", "Прочее");	
	
	СпособНачисленияАмортизации = ПолучитьСпособНачисленияАмортизацииОС(Объект.ИсходноеОсновноеСредство, Объект.Организация, Объект.Дата);
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Прочее.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	// ТЧ Прочее
	Если Объект.Прочее.Количество() <> 0 Тогда

		СписокАналитикиСчетовПрочее = Новый СписокЗначений;    	
		СписокАналитикиСчетовПрочее.Добавить("СписанияБУ");	// СчетСписанияБУ
		СписокАналитикиСчетовПрочее.Добавить("СписанияНУ");	// СчетСписанияНУ
		
		СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Прочее, СписокАналитикиСчетовПрочее); 
		СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
		
	КонецЕсли; 
	
	// ТЧ ОС
	Если Объект.ОС.Количество() <> 0 Тогда
		
		СписокРеквизитовПодразделения = Новый СписокЗначений;
		СписокРеквизитовПодразделения.Добавить("ПодразделениеОрганизации"); 
		
		СтруктураРеквизтов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения",  Объект.ОС, СписокРеквизитовПодразделения); 
		СписокТабличныхЧастей.Добавить(СтруктураРеквизтов);   
		
	КонецЕсли; 
		
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
	ТекстСообщения = НСтр("ru='Значения подразделений в табличных частях не принадлежащие выбранной структурной единицы были очищены.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Прочее.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0 Тогда 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти, ЗаменаСубконтоНУ = Ложь)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыСписания(ПерессчитатьКоэффициент, ПерезаполнитьОбщуюСуммуСписанияПервоначСтоимости)
	
	СтруктураСтоимостиОС = ПолучитьСтоимостьОС();
	
	Если СтруктураСтоимостиОС <> Неопределено Тогда

		Если ПерессчитатьКоэффициент Тогда
			Объект.КоэффициентЧастичногоСписания = ?(СтруктураСтоимостиОС.СтоимостьБУ = 0, 0, ОбщаяСуммаСписанияПервоначальнойСтоимости / СтруктураСтоимостиОС.СтоимостьБУ);
		КонецЕсли;

		Если ПерезаполнитьОбщуюСуммуСписанияПервоначСтоимости Тогда
			ОбщаяСуммаСписанияПервоначальнойСтоимости = Объект.КоэффициентЧастичногоСписания * СтруктураСтоимостиОС.СтоимостьБУ;
			Объект.ЛиквидационнаяСтоимостьЧастичногоСписания = Объект.КоэффициентЧастичногоСписания * СтруктураСтоимостиОС.ЛиквидационнаяСтоимостьБУ;
		КонецЕсли;

	    Объект.АмортизацияЧастичногоСписания = Объект.КоэффициентЧастичногоСписания * СтруктураСтоимостиОС.АмортизацияБУ;

		// Так как амортизацию списываем на стоимость ОС, нужно уменьшить списываемую стоимость
		// на сумму списываемой амортизации
		Объект.СтоимостьЧастичногоСписания = ОбщаяСуммаСписанияПервоначальнойСтоимости - Объект.АмортизацияЧастичногоСписания;

	КонецЕсли;

	// заполним списываемую стоимость по НУ
	Период = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	ТаблицаСтоимостиВА = ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА(Объект.Организация, Объект.ИсходноеОсновноеСредство, Период);

	СтрокаСтоимостьВАНУ = ТаблицаСтоимостиВА.Найти(Справочники.ВидыУчетаНУ.НУ, "ВидУчетаНУ");

	СтоимостьНУ = ?(СтрокаСтоимостьВАНУ = Неопределено, 0, СтрокаСтоимостьВАНУ.СтоимостьНУ);
	Объект.СтоимостьЧастичногоСписанияНУ = СтоимостьНУ * Объект.КоэффициентЧастичногоСписания;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтоимостьОС()
	
	СтруктураСтоимости = Новый Структура("СтоимостьБУ, АмортизацияБУ, ЛиквидационнаяСтоимостьБУ");
	
	ТаблицаСтоимостиОС = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуОС(Объект.Организация, Объект.ИсходноеОсновноеСредство, 
			Новый МоментВремени(Объект.Дата, Объект.Ссылка), КонецДня(Объект.Дата));
	Если ТаблицаСтоимостиОС.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаИсхОС = ТаблицаСтоимостиОС[0];
	Если СтрокаИсхОС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	// определим амортизацию за месяц 	
	АмортизацияЗаМесяцБУ = 0;
	ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Объект.Организация, Объект.Дата); 
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ПолноеСписание ИЛИ Не ПрименятьПараметрыАмортизацииВТекМесяце Тогда
		
		ТаблицаАмортизацииЗаМесяцИсхОС = УправлениеВнеоборотнымиАктивамиСервер.РасчетАмортизацииБухРегл(Объект.Дата, Объект.Организация, 
				Объект.СтруктурноеПодразделение, Объект.ИсходноеОсновноеСредство);
		
		Если ТаблицаАмортизацииЗаМесяцИсхОС.Количество() > 0 тогда
			СтрокаОС = ТаблицаАмортизацииЗаМесяцИсхОС[0];
			АмортизацияЗаМесяцБУ = ?(СтрокаОС = Неопределено, 0, СтрокаОС.Бух);
		КонецЕсли;	
		
	КонецЕсли;
	
	СтруктураСтоимости.СтоимостьБУ				 = СтрокаИсхОС.СтоимостьБУ;
	СтруктураСтоимости.АмортизацияБУ			 = СтрокаИсхОС.АмортизацияБУ + АмортизацияЗаМесяцБУ;
	СтруктураСтоимости.ЛиквидационнаяСтоимостьБУ = СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ;
	
	Возврат СтруктураСтоимости;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьКоэффициентАмортизации()
	
	Если Объект.СрокПолезногоИспользованияБУ - Объект.ФактСрокИспользованияБУ <> 0 Тогда
		Объект.КоэффициентАмортизацииБУ = Окр((12/(Объект.СрокПолезногоИспользованияБУ - Объект.ФактСрокИспользованияБУ)) * 100, 2);
	Иначе
		Объект.КоэффициентАмортизацииБУ = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчете(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДанныеПоАмортизацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоАмортизацииНаСервере()
	
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОС",   		 Объект.ИсходноеОсновноеСредство);
	Запрос.УстановитьПараметр("Период",   	 Объект.Дата);
		
	ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Объект.Организация, Объект.Дата); 
	ПериодОпределенияФактВыработки = ?(ПрименятьПараметрыАмортизацииВТекМесяце, ДобавитьМесяц(КонецМесяца(Объект.Дата), -1), КонецМесяца(Объект.Дата)); 
	
	Запрос.УстановитьПараметр("ПериодОпределенияФактВыработки", ПериодОпределенияФактВыработки);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА (НЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство ЕСТЬ NULL )
	|			ТОГДА ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.КоличествоОборот КАК Количество,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство = &ОС И Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &ПериодОпределенияФактВыработки, , ОсновноеСредство = &ОС) КАК ВыработкаОСОбороты
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|			И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО (ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство)
	|ГДЕ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация";
	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СостояниеОС", Перечисления.ВидыСостоянийОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("ОС",    		 Объект.ИсходноеОсновноеСредство);
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС_БУ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
	|	СостоянияОСОрганизаций.Организация = &Организация И
	|	СостоянияОСОрганизаций.Состояние = &СостояниеОС";

	ТЗСрокБУ = Запрос.Выполнить().Выгрузить();

	// В соответствующие поля строки запишем данные из запроса
	СтрокаТЗБУ = ТЗ_БУ.Найти(Объект.ИсходноеОсновноеСредство, "ОсновноеСредство");

	Если СтрокаТЗБУ = Неопределено Тогда
		
		Объект.СрокПолезногоИспользованияБУ = 0;
		Объект.ФактСрокИспользованияБУ 	    = 0;
		Объект.ОбъемПродукцииРаботБУ 		= 0;
		Объект.ФактОбъемПродукцииРаботБУ 	= 0;
		Объект.КоэффициентАмортизацииБУ 	= 0;
		Объект.КоэффициентУскоренияБУ 		= 0;
		
	Иначе

		Объект.СрокПолезногоИспользованияБУ = СтрокаТЗБУ.СрокПолезногоИспользованияБУ;
		СтрокаСрокБУ = ТЗСрокБУ.Найти(Объект.ИсходноеОсновноеСредство, "ОС_БУ");
		
		Если СтрокаСрокБУ = Неопределено Тогда
			Объект.ФактСрокИспользованияБУ = 0;
		Иначе
			Объект.ФактСрокИспользованияБУ = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьФактическийСрокИспользования(СтрокаСрокБУ.ДатаБУ, Объект.Дата);
		КонецЕсли;

		Объект.ОбъемПродукцииРаботБУ     = СтрокаТЗБУ.ОбъемПродукцииРаботБУ;
		Объект.ФактОбъемПродукцииРаботБУ = СтрокаТЗБУ.Количество;
		Объект.КоэффициентУскоренияБУ    = СтрокаТЗБУ.КоэффициентУскоренияБУ;
		
		Если (Объект.СрокПолезногоИспользованияБУ  - Объект.ФактСрокИспользованияБУ) <> 0 Тогда
			Объект.КоэффициентАмортизацииБУ = Окр((12/(Объект.СрокПолезногоИспользованияБУ - Объект.ФактСрокИспользованияБУ)) * 100, 2);	
		Иначе
			Объект.КоэффициентАмортизацииБУ = 0;	
		КонецЕсли;	
		
	КонецЕсли;		
		
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияВопросаРаспределенияСтоимостиБУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	РаспределитьСтоимость(ДопПараметры.ТабЧасть);
	
КонецПроцедуры
 
&НаСервере
Процедура РаспределитьСтоимость(ИмяТабЧасти)
	
	СтоимостьРаспределяемая = 0;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьРаспределяемая = Объект.СтоимостьЧастичногоСписания;
	Иначе
		// остаточную стоимость распределим на составляющие
		СтруктураСтоимостиОС = ПолучитьСтоимостьОС();
		Если СтруктураСтоимостиОС <> Неопределено Тогда 
			СтоимостьРаспределяемая = СтруктураСтоимостиОС.СтоимостьБУ - СтруктураСтоимостиОС.АмортизацияБУ;
		КонецЕсли;	
	КонецЕсли;

	ПропорциональноКоличеству = Ложь;
	// если заполнены другие таб. части, то уменьшим распределяемую сумму
	Если ИмяТабЧасти = "ОС" Тогда
		ТабЧасть = Объект.ОС;
		ИмяКолонки = "СтоимостьБУ";
		
		СтоимостьРаспределяемая = СтоимостьРаспределяемая - Объект.Товары.Итог("Сумма") - Объект.Прочее.Итог("Сумма");
	ИначеЕсли ИмяТабЧасти = "Товары" Тогда
		ТабЧасть = Объект.Товары;
		ИмяКолонки = "Сумма";
		
		ПропорциональноКоличеству = Истина;
		СтоимостьРаспределяемая = СтоимостьРаспределяемая - Объект.ОС.Итог("СтоимостьБУ") - Объект.Прочее.Итог("Сумма");
	КонецЕсли;
	
	Если СтоимостьРаспределяемая > 0 Тогда
		Количество = ТабЧасть.Количество();
		Если ПропорциональноКоличеству Тогда
			
			ОбщееКол = ТабЧасть.Итог("Количество");
			Если ОбщееКол = 0 Тогда
				ТекстСообщения = НСтр("ru='Не заполнена колонка ""Количество"". Стоимость не будет распределена!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
				Возврат;
			КонецЕсли;
			
		Иначе
			СтоимостьЕд = ?(Количество = 0, 0, Окр(СтоимостьРаспределяемая / Количество, 2));
		КонецЕсли;
		
		РаспределеноСумма = 0;
		
		Для Каждого СтрокаТЧ Из ТабЧасть Цикл
				
			Если ПропорциональноКоличеству Тогда
				СтоимостьЕд = Окр(СтоимостьРаспределяемая * (СтрокаТЧ.Количество / ОбщееКол), 2);
			КонецЕсли;
			
			Если СтрокаТЧ.НомерСтроки = Количество Тогда
				// для последней позиции спишем весь остаток стоимости
				СтоимостьЕд = СтоимостьРаспределяемая - РаспределеноСумма;
			КонецЕсли;	
			
			// для ТМЗ нужно заполнить колонку Цена
			Если ИмяТабЧасти = "Товары" Тогда
				СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтоимостьЕд / СтрокаТЧ.Количество);
			КонецЕсли;
			
			СтрокаТЧ[ИмяКолонки] = СтоимостьЕд;
			РаспределеноСумма = РаспределеноСумма + СтоимостьЕд;
								
		КонецЦикла;
	КонецЕсли;	
	
	ОбновитьИтоги(ЭтаФорма);
	
Конецпроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРаспределенияСтоимостиНУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	РаспределитьСтоимостьНУ(ДопПараметры.ТабЧасть);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСтоимостьНУ(ИмяТабЧасти)
	
	// найдем стоимость по БУ
	СтоимостьРаспределяемая = 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьРаспределяемая = Объект.СтоимостьЧастичногоСписания;
	Иначе
		// остаточную стоимость распределим на составляющие
		СтруктураСтоимостиОС = ПолучитьСтоимостьОС();
		Если СтруктураСтоимостиОС <> Неопределено Тогда 
			СтоимостьРаспределяемая = СтруктураСтоимостиОС.СтоимостьБУ - СтруктураСтоимостиОС.АмортизацияБУ;
		КонецЕсли;	
	КонецЕсли;

	СтоимостьРаспределяемаяНУ = 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьРаспределяемаяНУ = Объект.СтоимостьЧастичногоСписанияНУ;
	Иначе
		Период = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
		ТаблицаСтоимостиВА = ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА(Объект.Организация, Объект.ИсходноеОсновноеСредство, Период);
		
		СтрокаСтоимостьВАНУ = ТаблицаСтоимостиВА.Найти(Справочники.ВидыУчетаНУ.НУ, "ВидУчетаНУ");
		СтоимостьРаспределяемаяНУ = ?(СтрокаСтоимостьВАНУ = Неопределено, 0, СтрокаСтоимостьВАНУ.СтоимостьНУ);
	КонецЕсли;

	// если заполнены другие таб. части, то уменьшим распределяемую сумму
	Если ИмяТабЧасти = "ОС" Тогда
		ТабЧасть = Объект.ОС;
		ИмяКолонки = "СтоимостьНУ";
		
		СтоимостьРаспределяемаяНУ = СтоимостьРаспределяемаяНУ - Объект.Товары.Итог("СуммаНУ") - Объект.Прочее.Итог("СуммаНУ");
	ИначеЕсли ИмяТабЧасти = "Товары" Тогда
		ТабЧасть = Объект.Товары;
		ИмяКолонки = "СуммаНУ";
		
		СтоимостьРаспределяемаяНУ = СтоимостьРаспределяемаяНУ - Объект.ОС.Итог("СтоимостьНУ") - Объект.Прочее.Итог("СуммаНУ");
	КонецЕсли;
	
	Если СтоимостьРаспределяемаяНУ > 0 Тогда
		Количество = ТабЧасть.Количество();
		РаспределеноСумма = 0;
		
		Для Каждого СтрокаТЧ Из ТабЧасть Цикл
			
			ПозицияТекстНУ = Найти(ИмяКолонки, "НУ");
			
			ИмяКолонкиБУ = Сред(ИмяКолонки,1,ПозицияТекстНУ-1);
			Если ИмяТабЧасти = "ОС" Тогда
				ИмяКолонкиБУ = ИмяКолонкиБУ + "БУ";
			КонецЕсли;	
			Стоимость = Окр(СтрокаТЧ[ИмяКолонкиБУ]/СтоимостьРаспределяемая * СтоимостьРаспределяемаяНУ, 2);
			
			Если СтрокаТЧ.НомерСтроки = Количество Тогда
				// для последней позиции спишем весь остаток стоимости
				Стоимость = СтоимостьРаспределяемаяНУ - РаспределеноСумма;
			КонецЕсли;	
			
			СтрокаТЧ[ИмяКолонки] = Стоимость;
			РаспределеноСумма = РаспределеноСумма + Стоимость;
								
		КонецЦикла;
	КонецЕсли;	
	
	ОбновитьИтоги(ЭтаФорма);
	
Конецпроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтроки)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(ДанныеСтроки.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	ДанныеСтроки.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
	
	Документы.РеструктуризацияОС.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, ДанныеСтроки, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
				
            Документы.РеструктуризацияОС.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВводаНаОсновании(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		Попытка
			// выполняем проведение документа
			ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение))
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки(), Объект.Ссылка, , "Объект"); 
			Возврат;
		КонецПопытки;
				
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		СоздатьОткрытьДокументОприходования();
	КонецЕсли;                                	
	
КонецПроцедуры
 
&НаКлиенте 
Процедура СоздатьОткрытьДокументОприходования()

	Если (Не ЗначениеЗаполнено(ДокументОприходованиеТМЗ)) И (Не Объект.ПометкаУдаления) Тогда
			
		Форма = ПолучитьФорму("Документ.ОприходованиеТоваров.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
		Форма.Модифицированность = Истина;
		Форма.Открыть();
		
	ИначеЕсли ЗначениеЗаполнено(ДокументОприходованиеТМЗ) Тогда
		ОткрытьФорму("Документ.ОприходованиеТоваров.ФормаОбъекта", Новый Структура("Ключ", ДокументОприходованиеТМЗ));
	Иначе
		ТекстСообщения = НСтр("ru='На основании документов, помеченных на удаление, ввод оприходования ТМЗ не предусмотрен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УснановитьНадписьДокументаОприходования(Ссылка, ДокументОприходованиеТМЗ, ГиперссылкаОприходованиеТМЗ)
	
	ДокументОприходованиеТМЗ = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(Ссылка, "ОприходованиеТоваров");
	ГиперссылкаОприходованиеТМЗ = ?(Не ЗначениеЗаполнено(ДокументОприходованиеТМЗ), НСтр("ru='Ввести оприходование ТМЗ'"), Строка(ДокументОприходованиеТМЗ)); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееСчетСписанияБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияБУ1", "СубконтоСписанияБУ2", "СубконтоСписанияБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияБУ1, СтрокаТабличнойЧасти.СубконтоСписанияБУ2, СтрокаТабличнойЧасти.СубконтоСписанияБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияБУ, СубконтоСписанияБУ1,
								 |СубконтоСписанияБУ2, СубконтоСписанияБУ3", СтрокаТабличнойЧасти.СчетСписанияБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияБУ1, СтрокаТабличнойЧасти.СубконтоСписанияБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияБУ", "СчетСписанияБУ", "СубконтоСписанияБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияНУ1", "СубконтоСписанияНУ2", "СубконтоСписанияНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияНУ1, СтрокаТабличнойЧасти.СубконтоСписанияНУ2, СтрокаТабличнойЧасти.СубконтоСписанияНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияНУ, СубконтоСписанияНУ1,
								 |СубконтоСписанияНУ2, СубконтоСписанияНУ3", СтрокаТабличнойЧасти.СчетСписанияНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияНУ1, СтрокаТабличнойЧасти.СубконтоСписанияНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияНУ", "СчетСписанияНУ", "СубконтоСписанияНУ");	
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееСчетСписанияНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияНУ1", "СубконтоСписанияНУ2", "СубконтоСписанияНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияНУ1, СтрокаТабличнойЧасти.СубконтоСписанияНУ2, СтрокаТабличнойЧасти.СубконтоСписанияНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияНУ, СубконтоСписанияНУ1,
								 |СубконтоСписанияНУ2, СубконтоСписанияНУ3", СтрокаТабличнойЧасти.СчетСписанияНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияНУ1, СтрокаТабличнойЧасти.СубконтоСписанияНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияНУ", "СчетСписанияНУ", "СубконтоСписанияНУ");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;		
	
	Форма.ВсегоБУ = Объект.ОС.Итог("СтоимостьБУ") + Объект.Товары.Итог("Сумма") + Объект.Прочее.Итог("Сумма");
	Форма.ВсегоНУ = Объект.ОС.Итог("СтоимостьНУ") + Объект.Товары.Итог("СуммаНУ") + Объект.Прочее.Итог("СуммаНУ");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы="")
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);	
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство - %1 уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "ОС[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНУ");
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		СтруктураРеквизитов.Вставить("ОсновноеСредство");
		СтруктураРеквизитов.Вставить("СтоимостьБУ");
		СтруктураРеквизитов.Вставить("АмортизацияБУ");
		СтруктураРеквизитов.Вставить("СчетНачисленияАмортизацииБУ");
	ИначеЕсли ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураРеквизитов.Вставить("Номенклатура");
		СтруктураРеквизитов.Вставить("Количество");
		СтруктураРеквизитов.Вставить("Цена");
		СтруктураРеквизитов.Вставить("Сумма");
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры


