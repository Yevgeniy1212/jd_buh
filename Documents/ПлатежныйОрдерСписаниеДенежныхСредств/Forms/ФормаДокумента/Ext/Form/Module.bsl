////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""платежный ордер (списание денежных средств)"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = Объект.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;

	КонецЕсли;
    	
	Если НЕ Объект.Оплачено Тогда
		Объект.ДатаВыписки = Объект.Дата;
	КонецЕсли;
	
	Объект.Оплачено = Истина;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	ЗаполнитьДобавленныеКолонкиТаблиц();  
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		
		ОплаченныеСчета = Новый Массив;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			
			УникальныеЗначения = Новый Соответствие;
			
			Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета);  
		
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет)
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаДополнительно") Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
		ЭтаФорма.Модифицированность = Истина;
		
		РассчитатьСуммуКомиссии(ЭтаФорма);
		СформироватьНазначениеПлатежа();
		ОбновитьПодвал(ЭтаФорма);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаКомиссияБанка") Тогда		
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
				
		ЭтаФорма.Модифицированность = Истина;
		
		СформироватьНазначениеПлатежа();
		ОбновитьПодвал(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделениеОтправитель = Неопределено;
		Объект.СтруктурноеПодразделениеПолучатель  = Неопределено;
		СтруктурноеПодразделениеОрганизацияОтправитель = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель  = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет") Тогда
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		
		СчетБанкПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПереводПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииКлиент();

КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьКомиссиюБанкаПриИзменении(Элемент)
	
	Если Объект.ВключатьКомиссиюБанка И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ЗаполнитьРеквизитыКомиссии();	
	КонецЕсли;
	
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссииПриИзменении(Элемент)
	
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКомиссииПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПрочееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПрочееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПрочееПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПрочееПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета);
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если Объект.СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииКлиент()

	Если Объект.СчетОрганизации.Пустая() Тогда
		Возврат
	КонецЕсли;
	
	ВалютаДенежныхСредств = ПолучитьЗначениеРеквизита(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И (ВалютаДенежныхСредств <> Объект.ВалютаДокумента)
		И Объект.СуммаДокумента > 0 Тогда
		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчет, ВалютаДенежныхСредств", Истина, ВалютаДенежныхСредств));

	Иначе
		
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчетеСуммыДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Ложь);
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		СтруктураРезультатаВыполнения = Параметры;
		
	КонецЕсли;
	
	Если НЕ Параметры = Неопределено И Параметры.Свойство("ИзмененСчет") Тогда
		
		Если СтруктураРезультатаВыполнения = Неопределено Тогда
			СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Истина);
		Иначе
			СтруктураРезультатаВыполнения.Вставить("НеобходимПересчетСумм", Истина);
		КонецЕсли;
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;

	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочееПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствКомиссияПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ИмяРеквизита", ЭтаФорма, "НазначениеПлатежа");
	Оповещение = Новый ОписаниеОповещения("НазначениеПлатежаЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.НазначениеПлатежа,
		НСтр("ru='Назначение платежа'"));
	
КонецПроцедуры 

&НаКлиенте
Процедура НазначениеПлатежаЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.НазначениеПлатежа = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	РассчитатьСуммуКомиссии(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	ОбновитьПодвал(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	РассчитатьСуммуКомиссии(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	ОбновитьПодвал(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
		РассчитатьСуммуКомиссии(ЭтаФорма);
		СформироватьНазначениеПлатежа();
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
		
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю") Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаРасчетовПоАвансам) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента'")); 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		                                / СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	РассчитатьСуммуКомиссии(ЭтаФорма);	
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
	    СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
	Иначе
	    СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)

	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	СформироватьНазначениеПлатежа();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриИзменении(Элемент)
		
	РассчитатьИтоговуюСумму("ПеречислениеЗаработнойПлаты");
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
		
	РассчитатьИтоговуюСумму("ПеречислениеЗаработнойПлаты");
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ПеречислениеЗаработнойПлаты");
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура КомиссияБанка(Команда)
	          		
	РаботаСДиалогамиКлиент.ОткрытьФормуКомиссияБанка(ЭтаФорма, "ПлатежныйОрдерСписаниеДенежныхСредств");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ПеречислениеЗаработнойПлаты.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеЗаработнойПлаты.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеЗаработнойПлаты.ИзменятьПорядокСтрок = Ложь;

	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;

	УстановитьКурсДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// теперь в форме документа, ранее в "ЗаполнитьРеквизитыРасчетногоДокумента"
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);

	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации); 
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику"));	
	КонецЕсли;

	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СформироватьНазначениеПлатежа();

			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
		КонецЕсли;
		
		Объект.ДатаВыписки = Объект.Дата;
	Иначе
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	УстановитьВидимостьСтраницНаСервере();
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	УстановитьСвязиПараметровВыбораСчетКонтрагента();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)

	УправлениеФормой(ЭтотОбъект);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	                     
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Если Форма.ЕстьРасшифровкаПлатежа Тогда
		
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
		// --- Проверка заполненности реквизитов организации (банковский счет)
		Элементы.Контрагент.Видимость	   = Истина;
		Элементы.СчетКонтрагента.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет") Тогда
		
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Ложь);
		// --- Проверка заполненности реквизитов организации (банковский счет)
		Элементы.Контрагент.Видимость	   = Ложь;
		Элементы.СчетКонтрагента.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты") Тогда
		
		Элементы.Контрагент.Видимость	   = Ложь;
		Элементы.СчетКонтрагента.Видимость = Ложь;
		
	Иначе
		
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
		// --- Проверка заполненности реквизитов организации (банковский счет)
		Элементы.Контрагент.Видимость	   = Истина;
		Элементы.СчетКонтрагента.Видимость = Истина;
		
	КонецЕсли;

	Элементы.ИнформационнаяНадписьИтого.Видимость = Элементы.КомиссияБанка.Видимость И Объект.ВключатьКомиссиюБанка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);

	СчетаБанк = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора, Истина, Объект.СчетБанк);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанк.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));

	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетБанкПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораСчетКонтрагента()
	
	МассивСвязей = Новый Массив();
	МассивПараметров = Новый Массив;
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		СвязьВладелец  = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
		Если НЕ Объект.СчетОрганизации.Пустая() Тогда
			ПараметрВалюта = Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.СчетОрганизации.ВалютаДенежныхСредств);
		КонецЕсли;
	Иначе
		СвязьВладелец = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
		Если НЕ Объект.СчетОрганизации.Пустая() Тогда
			ПараметрВалюта = Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.СчетОрганизации.ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	МассивСвязей.Добавить(СвязьВладелец);
	
	Элементы.СчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	Элементы.СчетКонтрагентаПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	Если НЕ ПараметрВалюта = Неопределено Тогда
		МассивПараметров.Добавить(ПараметрВалюта);
		Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.СчетКонтрагентаПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы = Найти(Объект.НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(Объект.НазначениеПлатежа, АдресСуммы-2);
	Иначе
		ТекстНазначение = Объект.НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" И НЕ Объект.СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = Объект.СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	Если Объект.ВключатьКомиссиюБанка Тогда 		
		СуммаДляПлатежа	= Объект.СуммаДокумента + Объект.СуммаКомиссии;
	Иначе
		СуммаДляПлатежа	= Объект.СуммаДокумента;		
	КонецЕсли;
	
	ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма %1 %2'", ОбщегоНазначения.КодОсновногоЯзыка()),Формат(СуммаДляПлатежа, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00"),Символы.ПС);
	
	ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();	
	ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");	
	Для Каждого СтрокаНДС Из ТабНДС Цикл		
		ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1НДС(%2) %3%4'", ОбщегоНазначения.КодОсновногоЯзыка()), 
						ТекстСумма, 
						?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), НСтр("ru='без налога'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаНДС.СтавкаНДС),
						Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00"),
						Символы.ПС); 	
	КонецЦикла;
	
	Объект.НазначениеПлатежа = ?(ТекстНазначение="", ТекстНазначение + ТекстСумма, ТекстНазначение + Символы.ПС + ТекстСумма);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет 
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

		СтруктурноеПодразделениеОрганизация = Объект.Организация;
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
		
		// Заполнение реквизитов формы "СтруктурноеПодразделение"
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
				Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
			Иначе
				Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
			КонецЕсли;                                            		
			
			Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			
			Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияПолучатель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
		Иначе 
			Если НЕ Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
					Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
				Иначе
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
				КонецЕсли;
				
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				СтруктурноеПодразделениеОрганизацияПолучатель  = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			Иначе
				Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
					Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Ложь;
				Иначе
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Ложь;
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
						
	//для других операций, даем выбор только одного структурного подразделения, которое будет хранится в реквзите "СтруктурноеПодразделениеПолучатель"
	Иначе
	
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Истина);
		Иначе 
			Если НЕ Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Истина);
			Иначе
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Ложь);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Ложь);
			КонецЕсли;
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасшифровкаПлатежа);
	МассивСтраниц.Добавить(Элементы.ГруппаВзносНаличнымиВБанк);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗаработнойПлаты);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВзносНаличнымиВБанк;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПрочее;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗаработнойПлаты;
		
	ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаРасшифровкаПлатежа;
		
	КонецЕсли;
	
	Для Каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.КомиссияБанка.Видимость = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств") 
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога") 
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = Новый ФиксированныйМассив(Форма.СписокВидовДоговоров.ВыгрузитьЗначения());
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ВидыДоговора));
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДтБУ1" + Постфикс,
		Префикс + "СубконтоДтБУ2" + Постфикс,
		Префикс + "СубконтоДтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДтБУ1", "ЗаголовокСубконтоДтБУ2", "ЗаголовокСубконтоДтБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс = "", ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделениеОтправитель);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаСервере
Процедура ПроверитьСоответствиеСчетаКонтрагентаВидуОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда	
		// Должен быть выбран счет организации
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ Объект.СчетКонтрагента.Владелец = Объект.Организация Тогда
			
			ТекстСообщения = НСтр("ru='Указанный банковский счет: %1 не принадлежит организации: %2.
							|Банковский счет был очищен.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Организация)), , "СчетКонтрагента", "Объект");
			
			Объект.СчетКонтрагента = Неопределено;
		КонецЕсли;		
	Иначе
		// Должен быть выбран счет контрагента
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ Объект.СчетКонтрагента.Владелец = Объект.Контрагент Тогда
			
			ТекстСообщения = НСтр("ru='Указанный банковский счет: %1 не принадлежит контрагенту: %2.
							|Банковский счет был очищен.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Контрагент)), , "СчетКонтрагента", "Объект");
			
			Объект.СчетКонтрагента = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодвал(Форма)
	
	Объект = Форма.Объект;

	Если НЕ Объект.ВключатьКомиссиюБанка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма документа: %1 %2'"),
						?(Объект.ВключатьКомиссиюБанка, Объект.СуммаДокумента + Объект.СуммаКомиссии, Объект.СуммаДокумента),
						Объект.ВалютаДокумента);
	
	
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета	 Тогда 
		
		СуммаИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, курс: %2'"),
						СуммаИтого,
						Форма.КурсДокумента);

	КонецЕсли;
	
	Форма.ИнформационнаяНадписьИтого = СуммаИтого;
	
	Если Объект.ВключатьКомиссиюБанка И Объект.СуммаКомиссии <> 0 Тогда
		
		Форма.ИнформационнаяНадписьИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, в т.ч. комиссия %2 %3'"),
												Форма.ИнформационнаяНадписьИтого,
												Объект.СуммаКомиссии,
												Объект.ВалютаДокумента)
	КонецЕсли;
	
	Форма.Элементы.ИнформационнаяНадписьИтого.Видимость = Форма.Элементы.КомиссияБанка.Видимость И Объект.ВключатьКомиссиюБанка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);

	СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
									  СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
									  Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									  Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	

	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ПроверитьСоответствиеСчетаКонтрагентаВидуОперации();
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ПеречислениеЗаработнойПлаты.Очистить();

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Объект.ВключатьКомиссиюБанка = Ложь;
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ПричиныИзмененияСчетовУчета.Добавить("ВключатьКомиссиюБанка");
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	СформироватьНазначениеПлатежа();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);

	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);     
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику"));	
	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет") И ПоддержкаРаботыСоСтруктурнымиПодразделениями
		И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		Объект.СтруктурноеПодразделениеПолучатель = Объект.СтруктурноеПодразделениеОтправитель;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
			Объект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;		
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	УстановитьВидимостьСтраницНаСервере();
	УстановитьСвязиПараметровВыбораСчетКонтрагента();

	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПолучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		Если Объект.СчетКонтрагента = Объект.СчетОрганизации Тогда
			Объект.СчетКонтрагента = Неопределено;
			ТекстСообщения = НСтр("ru='Счет выбран как Банковский счет (отправитель)'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Организация)),,
				"СчетОрганизации", 
				"Объект");
			
		КонецЕсли;
			
	КонецЕсли;
	
	СчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктураПараметров);
	КонецЕсли;
		
	ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
		
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
		Объект.СчетОрганизации = Объект.СтруктурноеПодразделениеПолучатель.ОсновнойБанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
	Иначе
		Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УправлениеДенежнымиСредствамиСервер.СтруктурноеПодразделениеПриИзменении(Объект, СтруктураПараметров);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.СчетКонтрагента = Неопределено;
	КонецЕсли;

	Если ЕстьРасшифровкаПлатежа Тогда
		УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);
	КонецЕсли;

	СчетОрганизацииПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
    
	// получаем учетную политику для выбранной организации	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);	

	 Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда		
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) И СтруктурноеПодразделениеОрганизацияОтправитель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Объект.СтруктурноеПодразделениеОтправитель	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение в поле ""Структурная единица (отправитель)"" не соответствует выбранной организации и было изменено.'"));
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) И СтруктурноеПодразделениеОрганизацияПолучатель <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Объект.СтруктурноеПодразделениеПолучатель	  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение в поле ""Структурная единица (получатель)"" не соответствует выбранной организации и было изменено.'"));
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(Объект);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета,, Истина);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УстановитьКурсДокумента();

	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	КонецЦикла;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет") 
		И (НЕ Объект.СчетБанк.Валютный = Объект.СчетУчетаРасчетовСКонтрагентомБУ.Валютный ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ)) Тогда
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(Форма)
		
	Если Форма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = Форма.Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Форма.Объект.СуммаДокумента;
		
		Если Форма.ЕстьРасшифровкаПлатежа Тогда
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		    УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
		
		//рассчитаем сумму комиссии
		Если Форма.Объект.ВключатьКомиссиюБанка Тогда
			РассчитатьСуммуКомиссии(Форма);
			ОбновитьПодвал(Форма);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуКомиссии(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВключатьКомиссиюБанка  Тогда
		Объект.СуммаКомиссии = Окр(Объект.ПроцентКомиссии / 100 * Объект.СуммаДокумента, 2);		
	Иначе
		Объект.СуммаКомиссии = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКомиссии()

	Объект.ПроцентКомиссии = Объект.СчетОрганизации.ПроцентКомиссии;
	Объект.СтатьяДвиженияДенежныхСредств     = Объект.СчетОрганизации.СтатьяДвиженияДенежныхСредств;
	
	Объект.СчетУчетаРасчетовСКонтрагентомБУ  = Объект.СчетОрганизации.СчетЗатратБУ;
	Объект.СубконтоДтБУ1					 = Объект.СчетОрганизации.СубконтоЗатратБУ1;
	Объект.СубконтоДтБУ2					 = Объект.СчетОрганизации.СубконтоЗатратБУ2;
	Объект.СубконтоДтБУ3					 = Объект.СчетОрганизации.СубконтоЗатратБУ3;
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ  = Объект.СчетОрганизации.СчетЗатратНУ;
	Объект.СубконтоДтНУ1					 = Объект.СчетОрганизации.СубконтоЗатратНУ1;
	Объект.СубконтоДтНУ2					 = Объект.СчетОрганизации.СубконтоЗатратНУ2;
	Объект.СубконтоДтНУ3					 = Объект.СчетОрганизации.СубконтоЗатратНУ3;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучатель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправитель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере()
	
	Если НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств = Объект.СчетКонтрагента.ВалютаДенежныхСредств Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			ТекстСообщения = НСтр("ru='Несоответствие валют выбранных счетов организации!'");
		Иначе
			ТекстСообщения = НСтр("ru='Валюта счета контрагента не соответствует валюте счета организации!'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетКонтрагента", "Объект");
		
		Объект.СчетКонтрагента = Неопределено;
		
	КонецЕсли;
	
	Объект.ТекстПолучателя = Объект.СчетКонтрагента.ТекстКорреспондента;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетКонтрагента");
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено, ПричиныИзмененияСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.СчетОрганизации.ВалютаДенежныхСредств) И (Объект.СчетОрганизации.ВалютаДенежныхСредств <> Объект.ВалютаДокумента) Тогда

		Объект.ВалютаДокумента = Объект.СчетОрганизации.ВалютаДенежныхСредств;
		
		Если НЕ Объект.СчетКонтрагента.Пустая() И НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств = Объект.СчетКонтрагента.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Валюта счета контрагента не соответствует валюте счета организации'"), , "СчетКонтрагента", "Объект");
			Объект.СчетКонтрагента = Неопределено;
		КонецЕсли;
		
		ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);

	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации.ТекстКорреспондента) Тогда
		Объект.ТекстПлательщика = Объект.СчетОрганизации.ТекстКорреспондента;
	Иначе
		ОрганизацияДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);
		Объект.ТекстПлательщика = ?(НЕ ЗначениеЗаполнено(ОрганизацияДляПечати.НаименованиеПолное), ОрганизацияДляПечати.Наименование, ОрганизацияДляПечати.НаименованиеПолное);
	КонецЕсли;		
	
	УстановитьСвязиПараметровВыбораСчетКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если Объект.ВключатьКомиссиюБанка Тогда
			ОбновитьПодвал(ЭтаФорма);		
		КонецЕсли;
		
		Возврат;	
	КонецЕсли;
	
	Если Объект.ВключатьКомиссиюБанка Тогда
		ЗаполнитьРеквизитыКомиссии();
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	
	// Если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Индекс = 1;
	Пока Индекс < 3  Цикл
	 
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств") Тогда
			Объект["СубконтоДтБУ" + Индекс] = Объект.СтатьяДвиженияДенежныхСредств;
		 	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоДтБУ" + Индекс], "СубконтоДтНУ");
		Прервать;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоговуюСумму(ТабличнаяЧасть, Графа = "СуммаПлатежа")
	
	Объект.СуммаДокумента = Объект[ТабличнаяЧасть].Итог(Графа);	
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(НомерСтрокаПлатежа = Неопределено, ПричиныИзмененияСчетовУчета)

	Если НомерСтрокаПлатежа = Неопределено Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

	СтрокаПлатеж.Сделка = Неопределено;
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"РасшифровкаПлатежа.ДоговорКонтрагента",
			Объект,
			СтрокаПлатеж);
			
		Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ПлатежныйОрдерСписаниеДенежныхСредств,
			ПараметрыЗаполненияСчетовУчета.КЗаполнению,
			Объект,
			"РасшифровкаПлатежа",
			СтрокаПлатеж);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СчетОрганизации");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты") Тогда
		Объект.ПеречислениеЗаработнойПлаты.Очистить();	
	КонецЕсли;                                           
	  	
	Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	
	Если НЕ ИсходныеДанные.Организация = Объект.Организация  Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
		ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
		ОрганизацияПриИзмененииНаСервере(ПараметрыОбработки, Неопределено);
	КонецЕсли;
	
	Если ИсходныеДанные.СчетОрганизации <> Объект.СчетОрганизации Тогда
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	СформироватьНазначениеПлатежа();
	
	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета)
	
	Если ПричиныИзмененияСчетовУчета.Найти("Контрагент") = Неопределено Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	КонецЕсли;

	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	
	Объект.РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	
	ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
	
	ИзмененаОрганизация = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
		
	ИначеЕсли НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			
			Если Объект.Организация.Пустая() Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Если Объект.Организация <> ОсновнойДоговорКонтрагента.Организация Тогда
					ИзмененаОрганизация = Истина;
				КонецЕсли;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				СтруктурноеПодразделениеОрганизация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
			  	  ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
			КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененаОрганизация Тогда
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", Истина, Ложь), Неопределено);
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС 					   = СтараяСтавкаНДС;
		
	КонецЕсли;    
	
	Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
	СчетКонтрагентаПриИзмененииНаСервере();
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), ПричиныИзмененияСчетовУчета);

КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)

	Если НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда

		НеобходимПересчетСумм = СтруктураРезультатаВыполнения = Неопределено ИЛИ (СтруктураРезультатаВыполнения.Свойство("НеобходимПересчетСумм") И СтруктураРезультатаВыполнения.НеобходимПересчетСумм);
		
		Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента, СуммаДокумента", ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.ВалютаДокумента, НеобходимПересчетСумм);
		
		Если НеобходимПересчетСумм Тогда
			
			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
			
			Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
				Если НЕ Объект.СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
				  	//Необходимо пересчитать суммы в таблице расшифровок.
					Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
						СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
													ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
													ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
													ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
													
						УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
						РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
		
	КонецЕсли; 
	                                                             		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтБУ1", "СубконтоДтБУ2", "СубконтоДтБУ3", 
	                                                        ДанныеОбъекта.СубконтоДтБУ1, ДанныеОбъекта.СубконтоДтБУ2, ДанныеОбъекта.СубконтоДтБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
															
														КонецПроцедуры
														
&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("СчетПеревод");
	ЭлементыСчетов.Добавить("СчетБанкПеревод");
	
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНУ = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	Элементы.СчетБанк.Видимость        = ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетПеревод.Видимость     = ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетБанкПеревод.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
					
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			Элементы.СчетБанк.Видимость = Ложь;
		КонецЕсли;

		Если ЕстьРасшифровкаПлатежа Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru='Счет возвратов (БУ)'");								
			Иначе	
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru='Счет авансов (БУ)'");
			КонецЕсли;
					
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ.Видимость =
			ВидимостьНУ И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;

	Элементы.ГруппаАналитикаНУ.Видимость = ВидимостьНУ;
    
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПлатежныйОрдерСписаниеДенежныхСредств",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
	КонецЕсли;

	// ВключатьКомиссиюБанка
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВключатьКомиссиюБанка") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// СубконтоДтБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
	КонецЕсли;

	// СубконтоДтБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
	КонецЕсли;

	// СубконтоДтБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// СчетОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// ВключатьКомиссиюБанка
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВключатьКомиссиюБанка") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// СубконтоДтБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоДтБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоДтБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

#КонецОбласти
