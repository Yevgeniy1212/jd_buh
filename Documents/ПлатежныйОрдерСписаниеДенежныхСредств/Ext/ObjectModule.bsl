#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
		
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
    ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	Если НЕ Оплачено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Платежный ордер может быть проведен только если он оплачен(флаг ""Оплачено"").
		         |До установки признака оплаты документ можно только записать.'"),,,, Отказ);
				 
		Возврат;
		
	КонецЕсли;

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
        МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;		

	Если НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты");
	КонецЕсли;
	
	//Отключаем проверку реквизитов шапки
	Если НЕ ОрганизацияПлательщикНалогаНаПрибыль ИЛИ НЕ УчитыватьКПН Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;
	
	Если НЕ НеобходимостьОтраженияВНУ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли НЕ ЕстьРасчетыПоКредитам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;

	Если НЕ (ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СуммаДокумента");

		Если СуммаДокумента + СуммаКомиссии = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана ни одна из сумм (сумма документа, сумма комиссии)! Для проведения документа одна из сумм должна быть заполнена'"),,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(ВидОперации)) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если НЕ ВключатьКомиссиюБанка И СуммаКомиссии = 0 
		И НЕ (ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет) Тогда
		 
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
		Если НЕ ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не совпадает сумма документа и суммы на выплату заработной платы!'"), ЭтотОбъект, "ПеречислениеЗаработнойПлаты", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;	
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ВключатьКомиссиюБанка И СуммаКомиссии <> 0 И НЕ ЗначениеЗаполнено(СчетОрганизации.Банк.Контрагент) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для отражения комиссинных взносов банку, необходимо заполнить поле ""Контрагент"" у банка: %1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетОрганизации.Банк);
		                  
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Банк", "Объект", Отказ);
		
	КонецЕсли; 	
	
	Если Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(ВидОперации) тогда 

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не совпадают сумма документа и ее расшифровка.'"), ЭтотОбъект, "РасшифровкаПлатежа", "Объект", Отказ);
			
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ВалютаДокумента", ВалютаДокумента);
		Реквизиты.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Реквизиты.Вставить("Регистратор", Ссылка);

		Для Каждого СтрокаТабличнойЧасти Из РасшифровкаПлатежа Цикл
			
			Реквизиты.Вставить("ДоговорКонтрагента",СтрокаТабличнойЧасти.ДоговорКонтрагента); 
			Реквизиты.Вставить("ВалютаВзаиморасчетов",СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
			ДополнениеКСообщению = НСтр("ru = 'Строка %1 - '");
			ДополнениеКСообщению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДополнениеКСообщению, СтрокаТабличнойЧасти.НомерСтроки);
			УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ, ДополнениеКСообщению);
			
		КонецЦикла;
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
			ТекстСообщения = НСтр("ru = 'Выплата заработной платы может осуществляться только в %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаРегламентированногоУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
    ЕстьРасшифровкаПлатежа = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ЕстьРасшифровкаПлатежа(ВидОперации);

    Если ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
    КонецЕсли;
    
	Если НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		ПеречислениеЗаработнойПлаты.Очистить();
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет 
		И НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств	 Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(НомерВходящегодокумента) Или ЗначениеЗаполнено(ДатаВходящегоДокумента)) Тогда
		НомерВходящегодокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, ЭтотОбъект, , Истина, Истина));
		ДатаВходящегоДокумента = Дата;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи); 
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда  
		
		ЕстьСчетаНаОплату = Ложь;
		
		СчетаНаОплату = РасшифровкаПлатежа.ВыгрузитьКолонку("СчетНаОплату");
		
		Для Каждого СчетНаОплату Из СчетаНаОплату Цикл  
			
			Если СчетНаОплату <> Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
				ЕстьСчетаНаОплату = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСчетаНаОплату Тогда 
			
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			ТаблицаРеквизитов.Колонки.Добавить("Период");
			ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
			ТаблицаРеквизитов.Колонки.Добавить("Организация");
			
			СтрокаТабРеквизитов = ТаблицаРеквизитов.Добавить();
			СтрокаТабРеквизитов.Период      = Дата;
			СтрокаТабРеквизитов.Регистратор = Ссылка;
			СтрокаТабРеквизитов.Организация = Организация;
			
			ТаблицаОплатаСчетов = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ТаблицаОплатаСчетов(ЭтотОбъект);
			
			ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
				ТаблицаОплатаСчетов, ТаблицаРеквизитов, Истина);
			
			СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
				ТаблицаСтатусовСчетов, ТаблицаРеквизитов);		
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = "";
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
		
	// Изменение статуса счетов на оплату 
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;	
		
	Если НЕ ГрупповоеПерепроведение Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ    	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РеквизитыПрочее, 
		Движения, Отказ);
	
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияКомиссияБанка(ПараметрыПроведения.РеквизитыКомиссияБанка, 
		Движения, Отказ);
			
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеЗП, Движения, Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, Отказ);
	
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Оплата счетов
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если НЕ ГрупповоеПерепроведение Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли


