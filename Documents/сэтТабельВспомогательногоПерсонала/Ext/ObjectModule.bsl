//=======================================================//
// ОПИСАНИЕ ПЕРЕМЕННЫХ									 //
//=======================================================//

//=======================================================//
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА							 //
//=======================================================//
//Функция ПолучитьТариф(ФЛ,ДатаСреза)Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Начисления.Физлицо,
//	|	Начисления.ВидРасчета,
//	|	Начисления.Размер
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ВЫБОР
//	|			КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ КАК ОсновноеНачисление,
//	|		НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
//	|		НачисленияРаботниковОрганизации.Размер КАК Размер,
//	|		НачисленияРаботниковОрганизации.ФизЛицо КАК Физлицо,
//	|		НачисленияРаботниковОрганизации.Приказ КАК Приказ
//	|	ИЗ
//	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
//	|				&парамначало,
//	|				Организация = &Организация
//	|					И ФизЛицо = &ФизЛицо) КАК НачисленияРаботниковОрганизации
//	|	ГДЕ
//	|		НачисленияРаботниковОрганизации.Размер <> 0
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ВЫБОР
//	|			КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ,
//	|		НачисленияРаботниковОрганизации.ВидРасчета,
//	|		НачисленияРаботниковОрганизации.Размер,
//	|		НачисленияРаботниковОрганизации.ФизЛицо,
//	|		НачисленияРаботниковОрганизации.Приказ
//	|	ИЗ
//	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
//	|	ГДЕ
//	|		НачисленияРаботниковОрганизации.Период > &парамНачало
//	|		И НачисленияРаботниковОрганизации.Период <= &парамКонец
//	|		И НачисленияРаботниковОрганизации.ФизЛицо = &ФизЛицо
//	|		И НачисленияРаботниковОрганизации.Организация = &Организация) КАК Начисления";
//	Запрос.УстановитьПараметр("Дата", ДатаСреза);
//	Запрос.УстановитьПараметр("ФизЛицо", ФЛ);
//	Запрос.УстановитьПараметр("Организация", Организация);
//	
//	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
//	Если ТаблицаНачислений.Количество() = 0 Тогда
//		
//		Сообщить("Не введены сведения о плановых начисления работника с зачетом отработанного времени - " + ФЛ, СтатусСообщения.Информация);
//		Возврат 0;
//	КонецЕсли;
//	Видрасчета=ТаблицаНачислений[0];
//	Возврат Видрасчета;
//	
//КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Отказ=Ложь;
	
	Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Сообщить("Подразделение не может быть пустым!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не может быть пустым!");
		Отказ = Истина;
	КонецЕсли;
	
	//*** Механизаторы
	Для Каждого Стр из Задание Цикл
		
		Срез=ПолучитьТариф(Стр.Физлицо,Дата, Организация) ;
		
		//Евгений+  
		СтавкаЧаса = 0;
		Если Срез.Физлицо.киб_Вахтовик и ЗначениеЗаполнено(Срез.Размер) Тогда
			СтавкаЧаса = ПолучитьСтавкуЧаса(Срез.Физлицо,Дата,Организация,Срез.Размер);
		КонецЕсли;
		//Евгений-
		
		Если  Стр.КоличествоЧасов>0 Тогда
			// Основное время
			Движение 				= Движения.сэтВремяПоТабелю.Добавить();
			Движение.Период 		= Дата;
			Движение.Организация 	= Организация;
			//Движение.Подразделение	= ПодразделениеОрганизации;
			Движение.Физлицо 		= Стр.Физлицо;
			Движение.ВидРасчета		= Срез.ВидРасчета;
			Движение.Часы			= Стр.КоличествоЧасов;
			Движение.Дни			= Стр.Дни;
			Отказ					= Ложь;				
			
			//Евгений+
			
			//Движение.Тариф			= Срез.размер;        
			//Если Срез.Физлицо.киб_Вахтовик Тогда
			//	Движение.Тариф          = СтавкаЧаса*Стр.КоличествоЧасов;
			//Иначе
				Движение.Тариф			= Срез.размер;
			//КонецЕсли;
			
			//Евгений-  
			
		КонецЕсли;
		
		Если  Стр.КоличествоЧасовНочных>0 Тогда
			// Ночные
			Движение 				= Движения.сэтВремяПоТабелю.Добавить();
			Движение.Период 		= Дата;
			Движение.Организация 	= Организация;
			//Движение.Подразделение	= ПодразделениеОрганизации;
			Движение.Физлицо 		= Стр.Физлицо;
			Движение.ВидРасчета		= ВидРасчетаНочной;
			Движение.Часы			= Стр.КоличествоЧасовНочных;
			//Движение.Дни			= Стр.Дни;
			Отказ					= Ложь;				
			
			//Евгений+
			
			//Движение.Тариф			= Срез.размер*0.5;        
			Если Срез.Физлицо.киб_Вахтовик Тогда
				Движение.Тариф          = СтавкаЧаса*ВидРасчетаНочной.киб_РазмерДоплаты;//*Стр.КоличествоЧасовНочных;
			Иначе
				Движение.Тариф			= Срез.размер*ВидРасчетаНочной.киб_РазмерДоплаты;
			КонецЕсли;
			
			//Евгений-
		КонецЕсли;	
			
		Если  Стр.КоличествоЧасовПраздничных>0 Тогда
			// Праздничные
			Движение 				= Движения.сэтВремяПоТабелю.Добавить();
			Движение.Период 		= Дата;
			Движение.Организация 	= Организация;
			//Движение.Подразделение	= ПодразделениеОрганизации;
			Движение.Физлицо 		= Стр.Физлицо;
			Движение.ВидРасчета		= ВидРасчетаПраздничный;
			Движение.Часы			= Стр.КоличествоЧасовПраздничных;
			//Движение.Дни			= Стр.Дни;
			Отказ					= Ложь;
			
			//Евгений+
			
			//Движение.Тариф			= Срез.размер;        
			Если Срез.Физлицо.киб_Вахтовик Тогда
				Движение.Тариф          = СтавкаЧаса*ВидРасчетаПраздничный.киб_РазмерДоплаты;//*Стр.КоличествоЧасовПраздничных;
			Иначе
				Движение.Тариф			= Срез.размер*ВидРасчетаПраздничный.киб_РазмерДоплаты;
			КонецЕсли;
			
			//Евгений-
		
							
		КонецЕсли;
		
		Если  Стр.КоличествоЧасовСверхурочных>0 Тогда
			// Сверхурочные
			Движение 				= Движения.сэтВремяПоТабелю.Добавить();
			Движение.Период 		= Дата;
			Движение.Организация 	= Организация;
			//Движение.Подразделение	= ПодразделениеОрганизации;
			Движение.Физлицо 		= Стр.Физлицо;
			Движение.ВидРасчета		= ВидРасчетаСверхурочный;
			Движение.Часы			= Стр.КоличествоЧасовСверхурочных;
			//Движение.Дни			= Стр.Дни;
			Отказ					= Ложь;	
			
			//Евгений+
			
			//Движение.Тариф			= Срез.размер;        
			Если Срез.Физлицо.киб_Вахтовик Тогда
				Движение.Тариф          = СтавкаЧаса*ВидРасчетаСверхурочный.киб_РазмерДоплаты;//*Стр.КоличествоЧасовСверхурочных;
			Иначе
				Движение.Тариф			= Срез.размер*ВидРасчетаСверхурочный.киб_РазмерДоплаты;
			КонецЕсли;
			
			//Евгений-
		

		КонецЕсли;
		
	КонецЦикла;	
	
	Если Отказ Тогда
		Сообщить("Проведение документа невозможно!", СтатусСообщения.Информация);
	КонецЕсли;
	
	Движения.сэтВремяПоТабелю.Записать();
	
КонецПроцедуры   



//=======================================================//
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ					 //
//=======================================================//


//=======================================================//
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ                   //
//=======================================================//


//=======================================================//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ            //
//=======================================================//


//=======================================================//
// ТЕЛО МОДУЛЯ				                             //
//=======================================================//

