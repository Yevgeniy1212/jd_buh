&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения =  ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Вставить("КоманднаяПанель", Элементы.ГруппаКоманднаяПанель);	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодНачисленияЗарплаты);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьАвторасчет();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
		
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			Если Объект.Зарплата.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.Зарплата.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.ВыплаченностьЗарплаты = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено");
				НоваяСтрока.Авторасчет = Истина;
				ОбновитьОписаниеСостоянияДокумента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.Зарплата.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					
					НоваяСтрока 					= Объект.Зарплата.Добавить();	
					НоваяСтрока.ФизЛицо 			= СтрокаМассива;
					НоваяСтрока.ВыплаченностьЗарплаты = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено");
					НоваяСтрока.Авторасчет = Истина;
					
				КонецЕсли;
				
				ОбновитьОписаниеСостоянияДокумента();
				
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьАвторасчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НастройкаРасчетаСуммКВыплате" Тогда
		Если Параметр.ЗаписатьФорму Тогда
			Объект.РазмерОкругления =  Параметр.РазмерОкругления;
			Объект.ПроцентВыплаты = Параметр. ПроцентВыплаты;
			АвтозаполнениеНаКлиенте(Истина);
			ПодготовитьСправкуФормы(ЭтаФорма);
		КонецЕсли;
	ИначеЕсли  ИмяСобытия = "НастройкаРасчетаСуммКВыплатеПередатьПараметры" Тогда
		Объект.РазмерОкругления =  Параметр.РазмерОкругления;
		Объект.ПроцентВыплаты = Параметр. ПроцентВыплаты;
		ПодготовитьСправкуФормы(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ИзменениеВыплатыПоВедомостиРегл" И Параметр[Объект.Ссылка] <> Неопределено 
		ИЛИ ИмяСобытия = "ОбновитьФорму" И Параметр = Объект.Ссылка Тогда 
		
		ОбработкаОповещенияНаСервере();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	КлючеваяОперация = "Документ ""зарплата к выплате организаций"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодНачисленияЗарплаты);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодНачисленияЗарплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодНачисленияЗарплаты = ДобавитьМесяц(Объект.ПериодНачисленияЗарплаты, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодНачисленияЗарплаты);
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодНачисленияЗарплаты, ЭтаФорма, ,Истина);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПриИзменении(Элемент)
	
	Если Объект.СпособВыплаты <> ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк") Тогда
		Объект.Банк = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСуммКВыплатеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПараметрыЗаполненияНажатие(Элемент)

	ТолькоПросмотр = НЕ ОплатаСтатус = 0;
	
	ПараметрыФормы = Новый Структура("РазмерОкругления, ПроцентВыплаты, ТолькоПросмотр", Объект.РазмерОкругления, Объект.ПроцентВыплаты, ТолькоПросмотр);

	ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.Форма.ФормаНастройкиРасчета", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьСправкуФормыНажатие(Элемент)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВстроеннаяСправкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогамиКлиентСервер.ПолеHTMLДокументаOnClick(Элементы.ВстроеннаяСправка, ДанныеСобытия, ЭтаФорма)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Зарплата

&НаКлиенте
Процедура ЗарплатаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтараяСумма							= ТекущиеДанные.Сумма;
		СтараяДепонированнаяСумма			= ТекущиеДанные.ДепонированнаяСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Зарплата.ТекущиеДанные.Авторасчет			  = Истина;
		Элементы.Зарплата.ТекущиеДанные.ВыплаченностьЗарплаты = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено");
	КонецЕсли;
	ЗаполнитьАвторасчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОплатаСтатус = 0 Тогда	
		// подсчитаем общую сумму по строке
		СтрокаТЧ = Элементы.Зарплата.ТекущиеДанные;
		Если СтрокаТЧ <> Неопределено Тогда
			СтрокаТЧ.СуммаКВыплате = СтрокаТЧ.Сумма + СтрокаТЧ.ДепонированнаяСумма;
		КонецЕсли;
	КонецЕсли;
	ОбновитьОписаниеСостоянияДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПослеУдаления(Элемент)
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаФизлицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗарплатаВыплатаЗарегистрированаДокументом"  И Поле <> Неопределено Тогда
		ПоказатьЗначение(,Объект.Зарплата.НайтиПоИдентификатору(ВыбраннаяСтрока).ВыплатаЗарегистрированаДокументом);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаАвторасчетПриИзменении(Элемент)
	
	ЗаполнитьАвторасчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаДепонированнаяСуммаПриИзменении(Элемент)
	
	Если Элементы.Зарплата.ТекущиеДанные.ДепонированнаяСумма <> СтараяДепонированнаяСумма Тогда
		Элементы.Зарплата.ТекущиеДанные.Авторасчет = Ложь;
		СтараяДепонированнаяСумма				   = Элементы.Зарплата.ТекущиеДанные.ДепонированнаяСумма;
		ЗаполнитьАвторасчет();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	
	Если Элементы.Зарплата.ТекущиеДанные.Сумма <> СтараяСумма Тогда
		Элементы.Зарплата.ТекущиеДанные.Авторасчет = Ложь;
		СтараяСумма	= Элементы.Зарплата.ТекущиеДанные.Сумма;
		ЗаполнитьАвторасчет();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыплатаЗарплатыРКО(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Действие может быть выполнено только после записи документа. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередОтрытиемВыплатыЗарплатыРКО", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		 				
	Иначе
		
		ВыплатаЗарплатыРКООткрыть();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеСправкиФормы(Команда)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗадолженности(Команда)
	
	Если Объект.Зарплата.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		АвтозаполнениеНаКлиенте(Ложь);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеНаКлиенте(ЗаполнитьСуществующиеСтроки)
	
	Если ЗаполнитьСуществующиеСтроки 
	Тогда
		УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""зарплата к выплате организаций"" (расчет)");
	Иначе
		УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""зарплата к выплате организаций"" (заполнение)");	
	КонецЕсли;	
	
	РезультатВыполнения = АвтозаполнениеНаСервере(ЗаполнитьСуществующиеСтроки);		
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;   
	
КонецПроцедуры   

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед расчетом необходимо сохранить документ. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередРасчетом", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);    
		
	Иначе   
		
		АвтозаполнениеНаКлиенте(Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпискуСотрудников(Команда)
	
	Если Объект.Зарплата.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументу(Команда)
	
	Если Объект.Зарплата.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоДокументу", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКартСчета(Команда)
	
	Если Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу") Тогда
		
		ТекстСообщения = НСтр("ru = 'Действие выполняется только при перечислении з/п через банк!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
						
		ТекстВопроса = НСтр("ru= 'Для выполнения действия необходимо сначала записать документ. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗаполнениемКартСчета", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		 				
	Иначе
		
		ЗаполнитьКартСчетаНаСервере();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыплачено(Команда)
	
	ЗначениеНаЗамену = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено");
	
	Для каждого СтрокаТЧ Из Объект.Зарплата Цикл
		
		СтрокаТЧ.ВыплаченностьЗарплаты = ЗначениеНаЗамену
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗадепонировано(Команда)
	
	ЗначениеНаЗамену = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Задепонировано");
	
	Для каждого СтрокаТЧ Из Объект.Зарплата Цикл
		
		СтрокаТЧ.ВыплаченностьЗарплаты = ЗначениеНаЗамену
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНевыплачено(Команда)
	
	ЗначениеНаЗамену = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.НеВыплачено");
	
	Для каждого СтрокаТЧ Из Объект.Зарплата Цикл
		
		СтрокаТЧ.ВыплаченностьЗарплаты = ЗначениеНаЗамену
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ГоловнаяОрганизация  = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	 
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодНачисленияЗарплаты);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УстановитьИмяКнопки(ЭтаФорма);
	          	
	Если Параметры.Ключ.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Объект.Дата = КонецДня(Объект.Дата);
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособВыплаты) Тогда
			Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		КонецЕсли;
		
		Если Объект.СпособРасчетаСуммКВыплате.Пустая() Тогда
			Объект.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПериодНачисленияЗарплаты) Тогда
			Объект.ПериодНачисленияЗарплаты =  НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		КонецЕсли;
		
		ОплатаСтатус = 0;
		ОплатаТекст = "";
		
		ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, НСтр("ru = 'Документ не заполнен'"), "СообщениеОПроблемах");
	Иначе
		
		ПроверитьДокументыВведенныеНаОсновании();
		
	КонецЕсли;

	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям");

	// Проверка ведения однофирменности
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = НЕ НастройкиПользователя.УчетПоВсемОрганизациям;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьОписаниеСостоянияДокумента();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьАвторасчет();
	
	НастройкиРасчета = Документы.ЗарплатаКВыплатеОрганизаций.ЗаполнитьНастройки(Объект);
	Если НЕ ЗначениеЗаполнено(Объект.ПроцентВыплаты) Тогда
		Объект.ПроцентВыплаты = НастройкиРасчета.ПроцентВыплаты
	КонецЕсли;
	Если Объект.РазмерОкругления = 0 Тогда
		Объект.РазмерОкругления = НастройкиРасчета.РазмерОкругления;
	КонецЕсли;

	ИДКартинки = РаботаСДиалогами.ПолучитьИДКартинки(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы);

	ПодготовитьСправкуФормы(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	Элементы.ФормаВыплатаЗарплатыРКО.Доступность = ПравоДоступа("Использование", Метаданные.Обработки.ВыплатаЗарплатыРасходнымиОрдерами);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
		
	ПоказыватьДокументы = Элементы.ЗарплатаВыплатаЗарегистрированаДокументом.Видимость;
		
	// получим данные для отрисовки в ячейках
	Если ПоказыватьДокументы Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо КАК Физлицо
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо В(&Физлица)";
		
		Физлица = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.Зарплата Цикл
			Физлица.Добавить(СтрокаТаблицы.ФизЛицо)
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ведомость", Объект.Ссылка);
		Запрос.УстановитьПараметр("Физлица",	Физлица);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПоказыватьДокументы = Выборка.Количество() > 0;
		
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Объект.Зарплата Цикл		
		
		Если ПоказыватьДокументы Тогда
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтрокаТаблицы.Физлицо, "ФизЛицо") Тогда
				СтрокаТаблицы.ВыплатаЗарегистрированаДокументом  = Выборка.Регистратор;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАвторасчет()
	
	Для Каждого СтрокаТаблицы Из Объект.Зарплата Цикл		

		СтрокаТаблицы.Картинка = Число(СтрокаТаблицы.Авторасчет);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.ПодразделениеОрганизации.Владелец <> Объект.Организация Тогда
		Объект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;		
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
    РедактированиеРазрешено = Форма.ОплатаСтатус = 0;
	ДоступностьКассовыхФорм   = Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу");
	ДоступностьБанковскихФорм = Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк");
	
	Форма.ТолькоПросмотр 							= НЕ РедактированиеРазрешено;
	Элементы.ЗарплатаПодбор.Доступность 			= РедактированиеРазрешено;
	Элементы.ЗарплатаГруппаЗаменитьНа.Доступность   = РедактированиеРазрешено И ДоступностьКассовыхФорм;
	
	Элементы.ЗарплатаГруппаЗаполнить.Доступность    = РедактированиеРазрешено;
	Элементы.ЗарплатаЗаполнитьКартСчета.Доступность = РедактированиеРазрешено И ДоступностьБанковскихФорм;
		
	Элементы.Банк.Видимость	    = НЕ ДоступностьКассовыхФорм И ЗначениеЗаполнено(Объект.СпособВыплаты);
        	
	Если Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ПоВидуРасчета")Тогда
		Элементы.ВидРасчета.Видимость        = Истина;
	Иначе
		Элементы.ВидРасчета.Видимость        = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИмяКнопки(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ИППериодЗарплаты = ПолучитьПредставлениеПериодаРегистрации(Объект);
	Элементы.ФормаПоЗадолженностиНаМесяцНачисления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='По задолженности на конец %1 %2'"), 
																		ИППериодЗарплаты,Формат(Объект.ПериодНачисленияЗарплаты, "ДФ='гггг'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериодаРегистрации(Объект)
	
	МесяцСтрокой = Формат(Объект.ПериодНачисленияЗарплаты, "ДФ=ММММ");
	Если ПустаяСтрока(МесяцСтрокой) Тогда
		Возврат НСтр("ru = 'месяц не выбран'");
	Иначе
		Возврат МесяцСтрокой;
	КонецЕсли;
	
КонецФункции                         

&НаСервере
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Объект.Ссылка);
	
	Если Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК ПорядокТипа,
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка) КАК Представление,
		|	&КоличествоФизлиц КАК КоличествоФизлиц
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = &Ведомость
		|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо)
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.УстановитьПараметр("КоличествоФизлиц", Объект.Зарплата.Количество());
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПорядокТипа,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо) КАК КоличествоФизлиц
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
	
	УжеОплачивали = НЕ РезультатЗапроса.Пустой();
	
	Если УжеОплачивали Тогда
		ПлатежныеДокументы = РезультатЗапроса.Выгрузить();
		ПлатежныеДокументы.Сортировать("ПорядокТипа, Представление");
		ПлатежныеДокументы.Свернуть("Ссылка, Представление", "КоличествоФизлиц");
		
		КоличествоДоктов = ПлатежныеДокументы.Количество(); 
		
		Если Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			КоличествоФизЛицТабЧасти = Объект.Зарплата.Количество();
		Иначе
			МассивФизЛицТабЧасти = Новый Массив;
			Для Каждого ЭлементМассива Из Объект.Зарплата Цикл
				Если МассивФизЛицТабЧасти.Найти(ЭлементМассива.Физлицо) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивФизЛицТабЧасти.Добавить(ЭлементМассива.Физлицо);
			КонецЦикла;	
			
			КоличествоФизЛицТабЧасти = МассивФизЛицТабЧасти.Количество();	
		КонецЕсли;
		
		КоличествоФизЛиц = Мин(ПлатежныеДокументы.Итог("КоличествоФизлиц"), КоличествоФизЛицТабЧасти);
		
		Если КоличествоДоктов = 1 Тогда
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документом %1'"), ПлатежныеДокументы[0].Представление);
		Иначе
			МассивПлатежныхДокументов = Новый Массив;
			КоличествоДоктовДляПоказа = Мин(КоличествоДоктов, 3);
			Для Н = 1 По КоличествоДоктовДляПоказа Цикл
				МассивПлатежныхДокументов.Добавить(ПлатежныеДокументы[Н - 1].Представление);
			КонецЦикла;
			Если КоличествоДоктов > КоличествоДоктовДляПоказа Тогда
				МассивПлатежныхДокументов.Добавить("...");
			КонецЕсли;
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документами %1'"), СтрСоединить(МассивПлатежныхДокументов, ", "));
		КонецЕсли;
		
		Если Объект.Зарплата.Количество() = 0 Тогда
			ОплатаСтатус = 1;
		Иначе
			ОплатаСтатус = (КоличествоФизЛиц = КоличествоФизЛицТабЧасти);
		КонецЕсли;
	Иначе
		ОплатаСтатус = 0;
		ОплатаТекст = "";
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОписаниеСостоянияДокумента()   
	
	НеЗаполнен = НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ Объект.Зарплата.Количество() = 0;
	
	ЗаполненСОшибками = НЕ ЗначениеЗаполнено(Объект.СпособВыплаты) ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособРасчетаСуммКВыплате);
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Зарплата.НайтиСтроки(Новый Структура("Физлицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	
    ЕстьНулевыеСуммы = Ложь;
	Для Каждого СтрокаЗарплаты Из Объект.Зарплата Цикл
		Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.ДепонированнаяСумма) <= 0 Тогда
			ЕстьНулевыеСуммы = Истина;
			Прервать
		КонецЕсли;
	КонецЦикла;	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеСостоянияДокумента(НЕ НеЗаполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы);// поля структуры описания - ТекстСообщения и ВажностьСообщения
	ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеСостоянияДокумента(Заполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы) 
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	ТекстПоПериодам = "";
	Если ЗначениеЗаполнено(Объект.ПериодНачисленияДепонированнойЗарплаты)
		И НачалоМесяца(Объект.ПериодНачисленияДепонированнойЗарплаты) <> НачалоМесяца(Объект.ПериодНачисленияЗарплаты) Тогда
		
		ТекстПоПериодам = ТекстПоПериодам + Символы.ВК + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Период начисления зарплаты: %1. Период начисления депонированной зарплаты: %2.'"),
			Формат(Объект.ПериодНачисленияЗарплаты,"ДФ=dd.MM.yyyy"),
			Формат(Объект.ПериодНачисленияДепонированнойЗарплаты,"ДФ=dd.MM.yyyy")) + Символы.ВК;
		
	КонецЕсли;
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Документ не заполнен.'");
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Поля документа заполнены не полностью или неверно.'");
	ИначеЕсли ЕстьНулевыеСуммы Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru = 'Есть строки с нулевыми суммами.'");
	ИначеЕсли Не Параметры.Ключ.Пустая() Тогда
		ВажностьСообщения = "Информация";
		Если ОплатаСтатус = 0 Тогда
			ТекстОплаты = ?(Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк,
				НСтр("ru = 'Для оплаты документа можно ввести на основании Платежное поручение исходящее'"),
				НСтр("ru = 'Для оплаты документа можно ввести на основании Расходный кассовый ордер'"));
		Иначе
			ТекстОплаты = ?(ПустаяСтрока(ОплатаТекст), НСтр("ru = 'Ведомость полностью оплачена'"), ОплатаТекст);
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Документ записан.'") + " " + ТекстПоПериодам + ТекстОплаты;
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения, ВажностьСообщения", ТекстСообщения, ВажностьСообщения)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПереключенияСправки(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ФормаПереключениеСправкиФормы.Пометка = Форма.ОтображатьСправкуФормы;	
	
	Элементы.ГруппаОсновнаяПравая.Видимость        = Форма.ОтображатьСправкуФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.Зарплата.Очистить();

КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.Зарплата.Очистить();
	
	АвтозаполнениеНаКлиенте(Ложь);
			
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	АвтозаполнениеНаКлиенте(Истина);
	
КонецПроцедуры

&НаСервере
Функция АвтозаполнениеНаСервере(ЗаполнитьСуществующиеСтроки) 
	
	ДатаАктуальности = Макс(Объект.Дата, КонецМесяца(Объект.ПериодНачисленияЗарплаты));
	
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("ЗаполнитьСуществующиеСтроки",      ЗаполнитьСуществующиеСтроки);  
	Если НЕ ЗаполнитьСуществующиеСтроки Тогда
		Объект.Зарплата.Очистить();
	Иначе
		// составим список физлиц с признаком Авторасчет = Истина
		СписокФизЛиц = Новый СписокЗначений;
		Для Каждого СтрокаТЧ Из Объект.Зарплата Цикл
			Если СтрокаТЧ.Авторасчет Тогда
				СписокФизЛиц.Добавить(СтрокаТЧ.Физлицо);
			КонецЕсли;
		КонецЦикла;
		СтруктураПараметров.Вставить("парамСписокФизЛиц", СписокФизЛиц);
	КонецЕсли;    
	СтруктураПараметров.Вставить("парамДата", ДатаАктуальности);
	СтруктураПараметров.Вставить("ДатаАктуальности", ДатаАктуальности);
	СтруктураПараметров.Вставить("парамГраница", Новый Граница(ДатаАктуальности, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("парамОрганизация", Объект.Организация);
	СтруктураПараметров.Вставить("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	СтруктураПараметров.Вставить("парамПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("парамПериодНачисленияЗарплаты", Объект.ПериодНачисленияЗарплаты);
	СтруктураПараметров.Вставить("парамПериодНачисленияДепонированнойЗарплаты", ?(Объект.ПериодНачисленияДепонированнойЗарплаты = Дата("00010101"), Объект.ПериодНачисленияЗарплаты, Объект.ПериодНачисленияДепонированнойЗарплаты));
	СтруктураПараметров.Вставить("парамВидРасчета", Объект.ВидРасчета);	
	СтруктураПараметров.Вставить("парамВыплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	СтруктураПараметров.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);	
	СтруктураПараметров.Вставить("парамБанк", Объект.Банк);
	СтруктураПараметров.Вставить("парамУвольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	СтруктураПараметров.Вставить("парамПроцентВыплаты", Объект.ПроцентВыплаты / 100);
	СтруктураПараметров.Вставить("парамРазмерОкругления", Объект.РазмерОкругления);
	СтруктураПараметров.Вставить("парамДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("парамДатаПеречисления", ДатаАктуальности);
	СтруктураПараметров.Вставить("СпособРасчетаСуммКВыплате", Объект.СпособРасчетаСуммКВыплате);
	СтруктураПараметров.Вставить("РазмерОкругления", Объект.РазмерОкругления);
	СтруктураПараметров.Вставить("ВидРасчета", Объект.ВидРасчета);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СпособВыплаты", Объект.СпособВыплаты);
			    		
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Зарплата к выплате организации»'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.ЗарплатаКВыплатеОрганизаций.ПодготовитьДанныеДляЗаполнения", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
		
	Возврат РезультатВыполнения;  	
		
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Зарплата.Загрузить(СтруктураДанных.ТаблицаЗарплата);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьАвторасчет(); 
	
	Если Объект.Зарплата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Объект.Зарплата.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоДокументу(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.Зарплата.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗаполнениемКартСчета(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	ЗаполнитьКартСчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартСчетаНаСервере()

	Запрос  = новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Банк", Объект.Банк);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КартСчетаФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	КартСчетаФизЛицСрезПоследних.НомерКартСчета КАК НомерКартСчета,
	|	КартСчетаФизЛицСрезПоследних.АктивностьСчета КАК АктивностьСчета
	|ПОМЕСТИТЬ ВТ_КартСчетаФизЛиц
	|ИЗ
	|	РегистрСведений.КартСчетаФизЛиц.СрезПоследних(
	|			&Дата,
	|			Банк = &Банк
	|				И НомерКартСчета <> ЗНАЧЕНИЕ(Справочник.КартСчета.ПустаяСсылка)) КАК КартСчетаФизЛицСрезПоследних
	|ГДЕ
	|	КартСчетаФизЛицСрезПоследних.АктивностьСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Авторасчет
	|ПОМЕСТИТЬ ВТ_СписокФЛ
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокФЛ.НомерСтроки КАК НомерСтроки,
	|	ВТ_СписокФЛ.Физлицо,
	|	ВТ_СписокФЛ.Сумма,
	|	ВТ_СписокФЛ.ДепонированнаяСумма,
	|	ВТ_СписокФЛ.ВыплаченностьЗарплаты,
	|	ВТ_СписокФЛ.СуммаКВыплате,
	|	ВТ_СписокФЛ.Авторасчет,
	|	КартСчетаФизЛиц.НомерКартСчета
	|ИЗ
	|	ВТ_СписокФЛ КАК ВТ_СписокФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КартСчетаФизЛиц КАК КартСчетаФизЛиц
	|		ПО ВТ_СписокФЛ.Физлицо = КартСчетаФизЛиц.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	Объект.Зарплата.Загрузить(Результат.Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыРКООткрыть()
	
	ПараметрыФормы = Новый Структура("Организация, 			СтруктурноеПодразделение, 	ПлатежнаяВедомость, 		Автозаполнение", 
									  Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Ссылка, 				Истина);

	ОткрытьФорму("Обработка.ВыплатаЗарплатыРасходнымиОрдерами.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере ()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Объект.Ссылка);
	
	Если Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК ПорядокТипа,
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка) КАК Представление,
		|	&КоличествоФизлиц КАК КоличествоФизлиц
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = &Ведомость
		|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо)
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.УстановитьПараметр("КоличествоФизлиц", Объект.Зарплата.Количество());
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПорядокТипа,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо) КАК КоличествоФизлиц
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
	
	УжеОплачивали = НЕ РезультатЗапроса.Пустой();
	
	Если УжеОплачивали Тогда
		ПлатежныеДокументы = РезультатЗапроса.Выгрузить();
		ПлатежныеДокументы.Сортировать("ПорядокТипа, Представление");
		ПлатежныеДокументы.Свернуть("Ссылка, Представление", "КоличествоФизлиц");
		
		КоличествоДоктов = ПлатежныеДокументы.Количество(); 
		
		Если Объект.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			КоличествоФизЛицТабЧасти = Объект.Зарплата.Количество();
		Иначе
			МассивФизЛицТабЧасти = Новый Массив;
			Для Каждого ЭлементМассива Из Объект.Зарплата Цикл
				Если МассивФизЛицТабЧасти.Найти(ЭлементМассива.Физлицо) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивФизЛицТабЧасти.Добавить(ЭлементМассива.Физлицо);
			КонецЦикла;	
			
			КоличествоФизЛицТабЧасти = МассивФизЛицТабЧасти.Количество();	
		КонецЕсли;
		
		КоличествоФизЛиц = Мин(ПлатежныеДокументы.Итог("КоличествоФизлиц"), КоличествоФизЛицТабЧасти);
		
		Если КоличествоДоктов = 1 Тогда
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документом %1'"), ПлатежныеДокументы[0].Представление);
		Иначе
			МассивПлатежныхДокументов = Новый Массив;
			КоличествоДоктовДляПоказа = Мин(КоличествоДоктов, 3);
			Для Н = 1 По КоличествоДоктовДляПоказа Цикл
				МассивПлатежныхДокументов.Добавить(ПлатежныеДокументы[Н - 1].Представление);
			КонецЦикла;
			Если КоличествоДоктов > КоличествоДоктовДляПоказа Тогда
				МассивПлатежныхДокументов.Добавить("...");
			КонецЕсли;
			ОплатаТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ведомость полностью оплачена документами %1'"), СтрСоединить(МассивПлатежныхДокументов, ", "));
		КонецЕсли;
		
		Если Объект.Зарплата.Количество() = 0 Тогда
			ОплатаСтатус = 1;
		Иначе
			ОплатаСтатус = (КоличествоФизЛиц = КоличествоФизЛицТабЧасти);
		КонецЕсли;
	Иначе
		ОплатаСтатус = 0;
		ОплатаТекст = "";
	КонецЕсли;
	
	НеЗаполнен = НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ Объект.Зарплата.Количество() = 0;
	
	ЗаполненСОшибками = НЕ ЗначениеЗаполнено(Объект.СпособВыплаты) ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособРасчетаСуммКВыплате);
	ЗаполненСОшибками = ЗаполненСОшибками ИЛИ Объект.Зарплата.НайтиСтроки(Новый Структура("Физлицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	
    ЕстьНулевыеСуммы = Ложь;
	Для Каждого СтрокаЗарплаты Из Объект.Зарплата Цикл
		Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.ДепонированнаяСумма) <= 0 Тогда
			ЕстьНулевыеСуммы = Истина;
			Прервать
		КонецЕсли;
	КонецЦикла;	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеСостоянияДокумента(НЕ НеЗаполнен, ЗаполненСОшибками, ЕстьНулевыеСуммы);// поля структуры описания - ТекстСообщения и ВажностьСообщения
	ПоказатьИнформациюОДокументе(Элементы.ДекорацияНадписьПредупреждение, Элементы.ДекорацияКартинкаПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

	ПоказыватьДокументы = Элементы.ЗарплатаВыплатаЗарегистрированаДокументом.Видимость;
		
	// получим данные для отрисовки в ячейках
	Если ПоказыватьДокументы Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо КАК Физлицо
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо В(&Физлица)";
		
		Физлица = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.Зарплата Цикл
			Физлица.Добавить(СтрокаТаблицы.ФизЛицо)
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ведомость", Объект.Ссылка);
		Запрос.УстановитьПараметр("Физлица",	Физлица);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПоказыватьДокументы = Выборка.Количество() > 0;
		
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Объект.Зарплата Цикл		
		
		Если ПоказыватьДокументы Тогда
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтрокаТаблицы.Физлицо, "ФизЛицо") Тогда
				СтрокаТаблицы.ВыплатаЗарегистрированаДокументом  = Выборка.Регистратор;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередОтрытиемВыплатыЗарплатыРКО(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	ВыплатаЗарплатыРКООткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.Зарплата.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо =ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контекстно-зависимая справка

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьСправкуФормы(Форма) 
	
	ЦветФонаСправки   = РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки = РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветСсылки());
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	ТекстМакетаВстроеннойСправки = "";
	
	ИППериодЗарплаты = ПолучитьПредставлениеПериодаРегистрации(Объект);
	
	//вариант справки 1
	ТекстСпособаВыплат = "<B>" + НСтр("ru = 'Способ заполнения документа'") + "</B> <A id=АктивизироватьЭУ href=""V8:СпособРасчетаСуммКВыплате""><P id=СпособРасчетаСуммКВыплате style=""DISPLAY:inline"">" + Объект.СпособРасчетаСуммКВыплате;
	
	Если Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(зарплата за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(депонированная зарплата в <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(зарплата за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;и депонированная зарплата в <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(остатки по зарплате по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(остатки по депонированной зарплате по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(зарплата за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;и остатки по депонированной зарплате по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ВсяСуммаЗадолженности") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(остатки по зарплате и депонированной зарплате по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>).'");
		
	ИначеЕсли Объект.СпособРасчетаСуммКВыплате = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКВыплате.ПоВидуРасчета") Тогда
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru = '</P></A>&nbsp;(зарплата за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодНачисленияЗарплаты style=""DISPLAY:inline"">%1</P></A>&nbsp;по виду расчета <A id=АктивизироватьЭУ href=""V8:ВидРасчета""><P id=ВидРасчета style=""DISPLAY:inline"">%2</P></A>).'");
		
	Иначе
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + " <" + НСтр("ru = 'не указан'") + "></P></A>";
		
	КонецЕсли;
	ТекстСпособаВыплат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСпособаВыплат, ИППериодЗарплаты, ?(ЗначениеЗаполнено(Объект.ВидРасчета), Объект.ВидРасчета, "<" + НСтр("ru = 'не указан'") + ">"));
	
	Если Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу") Тогда
		СпособВыплатыТекст = "(" + НСтр("ru = 'список сотрудников, не имеющих карт-счета в банке'") + ").";
	ИначеЕсли Объект.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк") Тогда
		СпособВыплатыТекст = "(" + НСтр("ru = 'список сотрудников, имеющих карт-счета в банке'") + " <A id=АктивизироватьЭУ href=""V8:Банк""><P id=Банк style=""DISPLAY:inline"">" + ?(ЗначениеЗаполнено(Объект.Банк), Объект.Банк, "<" + НСтр("ru = 'не указан'") + ">") + "</P></A>).";
	Иначе
		СпособВыплатыТекст = "(" + НСтр("ru = 'при заполнении наличие карт-счета не учитывается'") + ").";
	КонецЕсли;
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink=" + ЦветСсылкиСправки + " vLink=" + ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src=" + РаботаСДиалогамиКлиентСервер.ПолучитьПутьККартинкеДляHTML(Форма.ИДКартинки) + ">
	|		<DIV>
	|		" + ТекстСпособаВыплат + "</DIV>
	|		<DIV>
	|		<B>" + НСтр("ru = 'Способ выплаты'") + "</B> <A id=АктивизироватьЭУ href=""V8:СпособВыплаты""><P id=СпособВыплаты style=""DISPLAY:inline"">" + ?(ЗначениеЗаполнено(Объект.СпособВыплаты), Объект.СпособВыплаты, "<" + НСтр("ru = 'не указан'") + ">") + "</P></A>&nbsp;" + СпособВыплатыТекст + "</DIV>
	|       <DIV>
	|	    <B>" + НСтр("ru = 'Процент выплаты'") + " </B>  " + Строка(Объект.ПроцентВыплаты) + ".
	|       </DIV>
	|       <DIV>
	|	    <B>" + НСтр("ru = 'Округлять суммы до'") + " </B> " + Строка(Объект.РазмерОкругления) + ".
	|       </DIV>
	|		<DIV>
	|		" + НСтр("ru = 'Для изменения порядка округления сумм, указания процента выплаты, необходимо воспользоваться 
	|		гиперссылкой'") + " <A id=АктивизироватьЭУ href=""V8:ДекорацияПараметрыЗаполнения""><P id=НадписьПараметрыЗаполнения style=""DISPLAY:inline"">" + НСтр("ru = 'Настройка расчета сумм к выплате'") + "...</P></A>.</DIV>
	|		<BR>
	|	</FONT></BODY>
	|</HTML>";
	
	Форма.ВстроеннаяСправка = ТекстМакетаВстроеннойСправки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ЭтаФорма, ВыбранныйЭлемент.Значение, Истина);
		Возврат;	
	КонецЕсли;
	
	Объект.ПериодНачисленияЗарплаты = ВыбранныйЭлемент.Значение; 
	МесяцНачисленияСтрокой   = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	Модифицированность = Истина;
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры

