#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автозаполнение табличной части документа по сумме задолженности.
// 
// Параметры:
//	ЗаполнитьСуществующиеСтроки - булево, если Истина, то выбираются только данные по физлицам из табличной части документа
//	
//
Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт     // , Режим = "НаДату") Экспорт

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Не (Параметр.Ключ = "СпособРасчетаСуммКВыплате" И Параметр.Ключ = "РазмерОкругления"
			И Параметр.Ключ = "ВидРасчета" И Параметр.Ключ = "ПодразделениеОрганизации")  Тогда
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;

	Если Параметры.СпособРасчетаСуммКВыплате <> Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
		
		// выбор сумм к выплате на основании задолженности
	
		ТекстЗапросаПоЗарплате = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизЛицо,
		|	СуммаВзаиморасчетовОстаток * &парамПроцентВыплаты КАК Сумма,
		|	0 КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ПОМЕСТИТЬ ВТ_ТекстЗапросаПоЗарплате
		|ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&парамГраница, Организация = &парамОрганизация ";
		
		Если Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц 
		 ИЛИ Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата 
		 ИЛИ Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате Тогда

			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ПериодВзаиморасчетов = &парамПериодНачисленияЗарплаты";
		Иначе
			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ПериодВзаиморасчетов <= КОНЕЦПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ)";
		КонецЕсли;
		
		Если Параметры.ЗаполнитьСуществующиеСтроки Тогда
			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ФизЛицо В (&парамСписокФизЛиц)";
		КонецЕсли;
		
		ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + ")";
		
		Запрос.Текст = ТекстЗапросаПоЗарплате;
		Запрос.Выполнить();
		ТекстЗапросаПоЗарплате = "ВТ_ТекстЗапросаПоЗарплате";

		ТекстЗапросаПоДепонированнойЗарплате = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизЛицо,
		|	0 КАК Сумма,
		|	СуммаВзаиморасчетовОстаток * &парамПроцентВыплаты КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ПОМЕСТИТЬ ВТ_ТекстЗапросаПоДепонированнойЗарплате
		|ИЗ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&парамГраница, Организация = &парамОрганизация ";
		
		Если Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц 
		 ИЛИ Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата Тогда
			
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ПериодВзаиморасчетов = &парамПериодНачисленияДепонированнойЗарплаты";
		Иначе
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ПериодВзаиморасчетов <= КОНЕЦПЕРИОДА(&парамПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)"	
		КонецЕсли;
		
		Если Параметры.ЗаполнитьСуществующиеСтроки Тогда
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ФизЛицо В (&парамСписокФизЛиц)";
		КонецЕсли;
		
		ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + ")";
		
		Запрос.Текст = ТекстЗапросаПоДепонированнойЗарплате;
		Запрос.Выполнить();
		ТекстЗапросаПоДепонированнойЗарплате = "ВТ_ТекстЗапросаПоДепонированнойЗарплате ";

		Если Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоЗарплате;
		
		ИначеЕсли Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоЗарплате;
		
		ИначеЕсли Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоДепонированнойЗарплате;
		
		ИначеЕсли Параметры.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоДепонированнойЗарплате;
		
		Иначе
			
			// нужен выбор из двух регистров
			ДанныеРеглУчетаТекст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеПоЗарплате.ФизЛицо,
			|	ДанныеПоЗарплате.Сумма,
			|	ДанныеПоЗарплате.ДепонированнаяСумма,
			|	ДанныеПоЗарплате.ВыплаченностьЗарплаты
			|ПОМЕСТИТЬ ВТ_Задолженность
			|ИЗ " + ТекстЗапросаПоЗарплате + " КАК ДанныеПоЗарплате
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	ДанныеПоДепонированнойЗарплате.ФизЛицо,
			|	ДанныеПоДепонированнойЗарплате.Сумма,
			|	ДанныеПоДепонированнойЗарплате.ДепонированнаяСумма,
			|	ДанныеПоДепонированнойЗарплате.ВыплаченностьЗарплаты
			|ИЗ " + ТекстЗапросаПоДепонированнойЗарплате + " КАК ДанныеПоДепонированнойЗарплате
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Задолженность.ФизЛицо,
			|	СУММА(Задолженность.Сумма) КАК Сумма,
			|	СУММА(Задолженность.ДепонированнаяСумма) КАК ДепонированнаяСумма,
			|	Задолженность.ВыплаченностьЗарплаты
			|ПОМЕСТИТЬ ВТ_ДанныеРеглУчета
			|ИЗ
			|	ВТ_Задолженность КАК Задолженность
			|СГРУППИРОВАТЬ ПО
			|		Задолженность.ФизЛицо,
			|		Задолженность.ВыплаченностьЗарплаты
			|";	
			
			Запрос.Текст = ДанныеРеглУчетаТекст;
			Запрос.Выполнить();
			ДанныеРеглУчетаТекст = "ВТ_ДанныеРеглУчета";

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда 
											   
		ДанныеРеглУчетаТекст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо,
		|	СУММА(ОсновныеНачисленияРаботниковОрганизации.Результат * &парамПроцентВыплаты) КАК Сумма,
		|	СУММА(0) КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ПОМЕСТИТЬ ВТ_ДанныеРеглУчета 
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисленияРаботниковОрганизации
		|
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизации.Ссылка.Организация = &парамОрганизация И
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &парамВидРасчета И
		|	ОсновныеНачисленияРаботниковОрганизации.Ссылка.ПериодРегистрации = &парамПериодНачисленияЗарплаты И
		|	ОсновныеНачисленияРаботниковОрганизации.Ссылка.Проведен";
		
		Если Параметры.ЗаполнитьСуществующиеСтроки Тогда
			ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + " И
			|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо В (&парамСписокФизЛиц)
			|";
		КонецЕсли;
		
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо,
		|	&парамВыплачено
		|";
		
		Запрос.Текст = ДанныеРеглУчетаТекст;
		Запрос.Выполнить();
		ДанныеРеглУчетаТекст = "ВТ_ДанныеРеглУчета";

	КонецЕсли;

	// Округлим до заданного размера в меньшую сторону
	Если Окр(Параметры.РазмерОкругления, 0) = Параметры.РазмерОкругления Тогда
		ЧислоЗнаковПослеЗапятой = 0;	
	ИначеЕсли Окр(Параметры.РазмерОкругления, 1) = Параметры.РазмерОкругления Тогда
		ЧислоЗнаковПослеЗапятой = 1;
	Иначе
		ЧислоЗнаковПослеЗапятой = 2;
	КонецЕсли;

	Если НЕ Параметры.ЗаполнитьСуществующиеСтроки Тогда
		СписокРаботниковПоОсновномуМестуРаботы = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизации.Период
		|			 КОНЕЦ) КАК Период
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамДата, 
		|				Организация = &парамГоловнаяОрганизация И 
		|				(Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизации.Сотрудник.ФизЛицо
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизации.ОбособленноеПодразделение  КАК ОбособленноеПодразделение,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизации.СтруктурноеПодразделение КАК СтруктурноеПодразделение
		|
		|ПОМЕСТИТЬ ВТ_СписокРаботниковПоОсновномуМестуРаботы
		|	ИЗ 
		|		ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|			ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
		|				И ДатыПоследнихНазначений.Период = ВЫБОР
		|														КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
		|															ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|														ИНАЧЕ РаботникиОрганизации.Период
		|												   КОНЕЦ
		|				И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|				И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
		|;";
		
		Запрос.Текст = СписокРаботниковПоОсновномуМестуРаботы;
		Запрос.Выполнить();
		СписокРаботниковПоОсновномуМестуРаботы = "ВТ_СписокРаботниковПоОсновномуМестуРаботы";

	КонецЕсли;

	// Выводим только положительные суммы (без копеек)
	ОбщаяЗадолженностьТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		Задолженность.ФизЛицо,
	|	    Задолженность.Сумма,
	|		Задолженность.ДепонированнаяСумма,
	|		Задолженность.ВыплаченностьЗарплаты,
	|		Задолженность.Сумма + Задолженность.ДепонированнаяСумма КАК СуммаКВыплате,
	|		Задолженность.Сумма + Задолженность.ДепонированнаяСумма - " + СформироватьТекстЗапросаДляОкругления("(Задолженность.Сумма + Задолженность.ДепонированнаяСумма)", "&парамРазмерОкругления", ЧислоЗнаковПослеЗапятой) + " КАК ДробнаяЧасть
	|ПОМЕСТИТЬ ВТ_ОбщаяЗадолженность	
	|ИЗ 
	|		" + ДанныеРеглУчетаТекст +" КАК Задолженность
	|";
	
	Запрос.Текст = ОбщаяЗадолженностьТекст;
	Запрос.Выполнить();
	
	ИтоговыйЗапрос = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Авторасчет,
	|	Задолженность.ФизЛицо,";
	Если НЕ Параметры.ЗаполнитьСуществующиеСтроки Тогда
		ИтоговыйЗапрос = ИтоговыйЗапрос + "
	|	КартСчетаФизЛиц.НомерКартСчета,"
	КонецЕсли;
	ИтоговыйЗапрос =ИтоговыйЗапрос + "
	|	ВЫБОР КОГДА Задолженность.Сумма <> 0 ТОГДА Задолженность.Сумма - Задолженность.ДробнаяЧасть ИНАЧЕ Задолженность.Сумма КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА Задолженность.Сумма = 0  ТОГДА Задолженность.ДепонированнаяСумма - Задолженность.ДробнаяЧасть ИНАЧЕ Задолженность.ДепонированнаяСумма КОНЕЦ КАК ДепонированнаяСумма,
	|	Задолженность.ВыплаченностьЗарплаты,
	|	Задолженность.СуммаКВыплате - Задолженность.ДробнаяЧасть КАК СуммаКВыплате
	|ИЗ 
	|	ВТ_ОбщаяЗадолженность КАК Задолженность";
	
	Если Параметры.ЗаполнитьСуществующиеСтроки Тогда
	
		ИтоговыйЗапрос = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиТЧ.Авторасчет,		
		|	СтрокиТЧ.ФизЛицо,
		|	СтрокиТЧ.НомерКартСчета,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.Сумма, 0)
		|		ИНАЧЕ СтрокиТЧ.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.ДепонированнаяСумма, 0)
		|		ИНАЧЕ СтрокиТЧ.ДепонированнаяСумма
		|	КОНЕЦ КАК ДепонированнаяСумма,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА &парамВыплачено
		|		ИНАЧЕ СтрокиТЧ.ВыплаченностьЗарплаты
		|	КОНЕЦ КАК ВыплаченностьЗарплаты,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.СуммаКВыплате, 0)
		|		ИНАЧЕ СтрокиТЧ.СуммаКВыплате
		|	КОНЕЦ КАК СуммаКВыплате
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК СтрокиТЧ
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ИтоговыйЗапрос, "РАЗРЕШЕННЫЕ", "") + ") КАК Задолженность
		|		ПО СтрокиТЧ.ФизЛицо = Задолженность.ФизЛицо
		|			И Задолженность.СуммаКВыплате > 0
		|
		|ГДЕ
		|   СтрокиТЧ.Ссылка = &парамДокументСсылка
		|	
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиТЧ.НомерСтроки
		|";
	
	Иначе
		
		// Оставим только нужное подразделение
		УсловиеНаПодразделение = "";
		
		Если ЗначениеЗаполнено(Параметры.ПодразделениеОрганизации) Тогда
			УсловиеНаПодразделение = "РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
		КонецЕсли;
		
		Если УсловиеНаПодразделение <> "" Тогда	
			УсловиеНаПодразделение = УсловиеНаПодразделение + " И ";
		КонецЕсли;
		
		УсловиеНаПодразделение = УсловиеНаПодразделение + "РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение";
			
		Если УсловиеНаПодразделение <> "" Тогда	
			
			РаботникиОрганизацииСрез = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
			|	МАКСИМУМ(ВЫБОР
			|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
			|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|				ИНАЧЕ РаботникиОрганизации.Период
			|			 КОНЕЦ) КАК Период
			|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначенийПоВнутреннемуСовместительству
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|											&парамДата, 
			|											Организация = &парамГоловнаяОрганизация И 
			|											(Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)) КАК РаботникиОрганизации
			|СГРУППИРОВАТЬ ПО
			|	РаботникиОрганизации.Сотрудник.ФизЛицо
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ ВТ_РаботникиОрганизацийСрез
			|ИЗ 
			|	"+ СписокРаботниковПоОсновномуМестуРаботы +" КАК РаботникиОрганизации
			|ГДЕ 
			|	" + УсловиеНаПодразделение + "
			// добавим работников текущей организации по внутреннему совместительству, которые не работают в данной организации по основному месту работы
			|
			|ОБЪЕДИНИТЬ 
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо
			|ИЗ 
			|	ВТ_ДатыПоследнихНазначенийПоВнутреннемуСовместительству КАК ДатыПоследнихНазначений
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|					ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
			|					И ДатыПоследнихНазначений.Период = 	ВЫБОР
			|															КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
			|														ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|															ИНАЧЕ РаботникиОрганизации.Период
			|													   КОНЕЦ
			|					И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
			|					И (РаботникиОрганизации.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
			|  					    ЛЕВОЕ СОЕДИНЕНИЕ "+ СписокРаботниковПоОсновномуМестуРаботы + " КАК МестаПоОсновномуМестуРаботы
			|								ПО МестаПоОсновномуМестуРаботы.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
			|								И  МестаПоОсновномуМестуРаботы.ОбособленноеПодразделение = РаботникиОрганизации.ОбособленноеПодразделение
			|ГДЕ 
			|	МестаПоОсновномуМестуРаботы.ФизЛицо ЕСТЬ NULL И
			|	" + УсловиеНаПодразделение + "			
			|";
			
			Запрос.Текст = РаботникиОрганизацииСрез;
			Запрос.Выполнить();
			РаботникиОрганизацииСрез = "ВТ_РаботникиОрганизацийСрез";
		
			ИтоговыйЗапрос = ИтоговыйЗапрос + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + РаботникиОрганизацииСрез + " КАК РаботникиОрганизацийСрез
			|ПО Задолженность.ФизЛицо = РаботникиОрганизацийСрез.ФизЛицо
			|";
			
	КонецЕсли;
		
		// Надо только тех, кто имеет карт-счета
		Если Параметры.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			
			КартСчетаФизЛиц = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	КартСчетаФизЛиц.ФизЛицо,
			|	КартСчетаФизЛиц.НомерКартСчета КАК НомерКартСчета
			|ПОМЕСТИТЬ ВТ_КартСчетаФизЛиц
			|ИЗ
			|	РегистрСведений.КартСчетаФизЛиц.СрезПоследних(&парамДатаПеречисления) КАК КартСчетаФизЛиц
			|	ГДЕ КартСчетаФизЛиц.АктивностьСчета
			|	" + ?(НЕ Параметры.парамБанк.Пустая(),"И КартСчетаФизЛиц.НомерКартСчета.Банк = &парамБанк", "") + "
			|";
			
			Запрос.Текст = КартСчетаФизЛиц;
			Запрос.Выполнить();
			КартСчетаФизЛиц = "ВТ_КартСчетаФизЛиц";

			ИтоговыйЗапрос = ИтоговыйЗапрос + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + КартСчетаФизЛиц + " КАК КартСчетаФизЛиц
			|	ПО Задолженность.ФизЛицо = КартСчетаФизЛиц.ФизЛицо
			|";
		
		Иначе									
			КартСчетаФизЛиц = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	КартСчетаФизЛиц.ФизЛицо,
			|	Null КАК НомерКартСчета
			|ПОМЕСТИТЬ ВТ_КартСчетаФизЛиц
			|ИЗ
			|		РегистрСведений.КартСчетаФизЛиц.СрезПоследних(&парамДатаПеречисления) КАК КартСчетаФизЛиц
			|			ГДЕ КартСчетаФизЛиц.АктивностьСчета
			|";
			
			Запрос.Текст = КартСчетаФизЛиц;
			Запрос.Выполнить();
			КартСчетаФизЛиц = "ВТ_КартСчетаФизЛиц";

			// надо только тех, у кого нет ни одного карт-счета в банках
			ИтоговыйЗапрос = ИтоговыйЗапрос + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + КартСчетаФизЛиц + " КАК КартСчетаФизЛиц
			|	ПО Задолженность.ФизЛицо = КартСчетаФизЛиц.ФизЛицо
			|";
			
		КонецЕсли;
		
		ИтоговыйЗапрос = ИтоговыйЗапрос + "
		|ГДЕ 
		|	Задолженность.СуммаКВыплате - Задолженность.ДробнаяЧасть > 0 ";
		
		Если Параметры.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ИтоговыйЗапрос = ИтоговыйЗапрос + "
			|	И КартСчетаФизЛиц.ФизЛицо ЕСТЬ NULL";
		КонецЕсли;
		
		ИтоговыйЗапрос = ИтоговыйЗапрос + "
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Задолженность.ФизЛицо
		|АВТОУПОРЯДОЧИВАНИЕ
		|";

	КонецЕсли;
	
	Запрос.Текст = ИтоговыйЗапрос;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаЗарплата", Запрос.Выполнить().Выгрузить()); 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
	
КонецПроцедуры 

// Формирует текст запроса для округления указанного поля до нужного числа знаков в меньшую сторону
// Параметры:
//	ИмяПоляСумма - имя поля в запросе, значение которого надо округлить
//	ИмяПоляРазмерОкругления - имя поля в запросе, в котором задается значение, до которого требуется округлить
//	ЧислоЗнаковПослеЗапятой - число знаков в поле после запятой
//
// Возвращаемое значение:
//	строка - текст на языке запросов для формирования поля, с округленным значением
//
Функция СформироватьТекстЗапросаДляОкругления(ИмяПоляСумма, Знач ИмяПоляРазмерОкругления, ЧислоЗнаковПослеЗапятой = 2) Экспорт
	
	ИмяПоляРазмерОкругления = "ВЫБОР КОГДА " + ИмяПоляРазмерОкругления + " = 0 ТОГДА 1 ИНАЧЕ " + ИмяПоляРазмерОкругления + " КОНЕЦ";

	ТекстРазмерностьРезультата = "ЧИСЛО(15, " + Формат(ЧислоЗнаковПослеЗапятой, "ЧГ=0; ЧН=0; ЧДЦ=0") + ")";
	
	ТекстДеление = "ВЫРАЗИТЬ(" + ИмяПоляСумма + " / " + ИмяПоляРазмерОкругления + " КАК " + ТекстРазмерностьРезультата + ")";
	
	ТекстУмножение = "ВЫРАЗИТЬ(" + ИмяПоляРазмерОкругления + " * " + ТекстДеление + " КАК " + ТекстРазмерностьРезультата + ")";
	
	ТекстУмножение_1 = "ВЫРАЗИТЬ(" + ИмяПоляРазмерОкругления + " * (" + ТекстДеление + " - 1) КАК " + ТекстРазмерностьРезультата + ")";
		
	Текст = "
	|ВЫБОР КОГДА " + ИмяПоляСумма + " - " + ТекстУмножение + " >= 0 ТОГДА
	|	" + ТекстУмножение + "
	|ИНАЧЕ
	|	" + ТекстУмножение_1 + "
	|КОНЕЦ
	|";

	Возврат Текст;
	
КонецФункции

Функция ЗаполнитьНастройки(Объект) Экспорт
	
	НастройкиРасчета = 
		Новый Структура(
			"ПроцентВыплаты,
			 |РазмерОкругления",
			 100,
			 1);
		 
	Если ЗначениеЗаполнено(Объект.ПроцентВыплаты) Тогда
		НастройкиРасчета.ПроцентВыплаты = Объект.ПроцентВыплаты
	КонецЕсли;
	Если Объект.РазмерОкругления <> 0 Тогда
		НастройкиРасчета.РазмерОкругления = Объект.РазмерОкругления;
	КонецЕсли;
	
	Возврат НастройкиРасчета;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Форма Т-2 (по ФИО сотрудников)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТ2_ФИО";
	КомандаПечати.Представление = НСтр("ru = 'Форма Т-2 (по ФИО сотрудников)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Форма Т-2 (по табельным номерам)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТ2_ТабельныйНомер";
	КомандаПечати.Представление = НСтр("ru = 'Форма Т-2 (по табельным номерам)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТ2_ФИО,ПечатьТ2_ТабельныйНомер";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТ2_ФИО,ПечатьТ2_ТабельныйНомер";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьТ2_ФИО,ПечатьТ2_ТабельныйНомер";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Форма Т-2 (по ФИО сотрудников)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ2_ФИО") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьТ2_ФИО",
			НСтр("ru = 'Форма Т-2 (по ФИО сотрудников)'"),
			ПечатьТ2(МассивОбъектов, ОбъектыПечати, Ложь),
			,
			"Документ.ЗарплатаКВыплатеОрганизаций.ПФ_MXL_Т2");
	КонецЕсли;

	// Форма Т-2 (по табельным номерам)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ2_ТабельныйНомер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьТ2_ТабельныйНомер",
			НСтр("ru = 'Форма Т-2 (по табельным номерам)'"),
			ПечатьТ2(МассивОбъектов, ОбъектыПечати, Истина),
			,
			"Документ.ЗарплатаКВыплатеОрганизаций.ПФ_MXL_Т2");
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьТ2(МассивОбъектов, ОбъектыПечати, СортироватьПоТабельномуНомеру = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыплатаФизЛиц.Ссылка,
	|	ВыплатаФизЛиц.Номер,
	|	ВыплатаФизЛиц.Дата,
	|	ВыплатаФизЛиц.Организация КАК Организация,
	|	ВыплатаФизЛиц.СтруктурноеПодразделение,
	|	ВыплатаФизЛиц.Ответственный,
	|	ВыплатаФизЛиц.СпособРасчетаСуммКВыплате,
	|	ВыплатаФизЛиц.ПериодНачисленияЗарплаты,
	|	ВыплатаФизЛиц.ПериодНачисленияДепонированнойЗарплаты,
	|	ВыплатаФизЛиц.ПодразделениеОрганизации,
	|	ВыплатаФизЛиц.СуммаДокумента,
	|	ВыплатаФизЛиц.СпособВыплаты
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ВыплатаФизЛиц
	|ГДЕ
	|	ВыплатаФизЛиц.Ссылка В(&МассивОбъектов)";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ЗапросПоВыплате = Новый Запрос;
	
	ЗапросПоВыплате.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоВыплате.УстановитьПараметр("Увольнение",     Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	ЗапросПоВыплате.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации КАК ВестиУчетПоГоловнойОрганизации,
	|	ВЫБОР
	|	КОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации
	|		ТОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата КАК Период,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|ПОМЕСТИТЬ ВТ_ФизЛица
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФИОФИзЛиц.ФизЛицо,
	|	ПериодыФИОФИзЛиц.Период,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
	|				ПО ФИОФизЛиц.Период <= ВТ_ФизЛица.Период
	|					И ФИОФизЛиц.ФизЛицо = ВТ_ФизЛица.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФИОФизЛиц.ФизЛицо) КАК ПериодыФИОФИзЛиц
	|		ПО ФИОФизЛиц.Период = ПериодыФИОФИзЛиц.Период
	|			И ФИОФизЛиц.ФизЛицо = ПериодыФИОФИзЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	МАКСИМУМ(ПериодыРаботникиОрганизации.Период) КАК Период,
	|	РаботникиОрганизации.Организация
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение
	|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|				ИНАЧЕ РаботникиОрганизаций.Период
	|			КОНЕЦ КАК Период,
	|			РаботникиОрганизаций.Сотрудник.Физлицо КАК СотрудникФизлицо
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
	|				ПО РаботникиОрганизаций.Период <= ВТ_ФизЛица.Период
	|					И РаботникиОрганизаций.Сотрудник.Физлицо = ВТ_ФизЛица.Физлицо) КАК ПериодыРаботникиОрганизации
	|		ПО РаботникиОрганизации.Период = ПериодыРаботникиОрганизации.Период
	|			И РаботникиОрганизации.Сотрудник.Физлицо = ПериодыРаботникиОрганизации.СотрудникФизлицо
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование
	|		ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате), 0) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК УчетнаяПолитикаПоПерсоналуОрганизации
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК РаботникиОрганизацииСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизацииСрезПоследних.ФизЛицо
	|			И (ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизации.ГоловнаяОрганизация, ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация) = РаботникиОрганизацииСрезПоследних.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизацииСрезПоследних.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо)
	|			И (РаботникиОрганизацииСрезПоследних.Организация = РаботникиОрганизации.Организация)
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизацииСрезПоследних.Период = ВЫБОР
	|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Увольнение
	|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|				ИНАЧЕ РаботникиОрганизации.Период
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ВТ_ФИОФизЛиц.ФизЛицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	РаботникиОрганизации.Сотрудник.Код,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование
	|		ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
	|	КОНЕЦ
	|  
	|УПОРЯДОЧИТЬ ПО";
	
	Если СортироватьПоТабельномуНомеру Тогда
		ЗапросПоВыплате.Текст = ЗапросПоВыплате.Текст + "
		|	ТабельныйНомер
		|";
	Иначе
		ЗапросПоВыплате.Текст = ЗапросПоВыплате.Текст + "
		|	ФИОФизЛица
		|";
	КонецЕсли;

	ЗапросПоВыплате.Текст = ЗапросПоВыплате.Текст + "
							   |ИТОГИ 
							   |	СУММА(Сумма)
							   |ПО
							   |	Ссылка
							   |";
							   
	ВыборкаРаботники = ЗапросПоВыплате.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПечатьТ2";
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗарплатаКВыплатеОрганизаций.ПФ_MXL_Т2");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице	= Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если Шапка.СпособВыплаты = ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Для документа со способом выплаты ""Через банк"" печатная форма Т-2 не предусмотрена.'"),
										Шапка.Ссылка
										);
			
			ОбщегоНазначения.СообщитьПользователю(Текст, Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		    		
		// выводим данные о руководителях организации
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
		ФизЛицоОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Ответственный, "ФизЛицо"); 
		ОтветЛица 			  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.Дата, ФизЛицоОтветственного);
		
		ОбластьМакетаШапкаДокумента.Параметры.РНН_БИН				   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.Дата, "ru");
		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации 	   = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакетаШапкаДокумента.Параметры.ПодразделениеОрганизации = Шапка.ПодразделениеОрганизации.Наименование;
		ОбластьМакетаШапкаДокумента.Параметры.ФИОРуководителя		   = ОтветЛица.Руководитель;
		ОбластьМакетаШапкаДокумента.Параметры.ФИОГлБуха 			   = ?(НЕ ЗначениеЗаполнено(ОтветЛица.ГлавныйБухгалтер), НСтр("ru = 'Не предусмотрен'", КодЯзыка), ОтветЛица.ГлавныйБухгалтер);
		
		ОбластьМакетаШапкаДокумента.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Ссылка);
		ОбластьМакетаШапкаДокумента.Параметры.Валюта   = Валюта;
		
		ОбластьМакетаПодвал.Параметры.ФИООтветственного = ОтветЛица.Исполнитель;
		
		ОбластьМакетаШапкаДокумента.Параметры.ДатаДок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года.'", КодЯзыка), Формат(Шапка.Дата, "Л=" + КодЯзыка + "; ДФ=дд ММММ гггг"));
		
		ОбластьМакетаШапкаДокумента.Параметры.СчетДт = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
		ОбластьМакетаШапкаДокумента.Параметры.СчетКт = ПланыСчетов.Типовой.ДенежныеСредстваВКассе.Код;
		
		Если Шапка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц 
			Или Шапка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца 
			Или Шапка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
			
			ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1 %2 года.'", КодЯзыка), Формат(Шапка.ПериодНачисленияЗарплаты, "Л=" + КодЯзыка + "; ДФ=ММММ"), Формат(Шапка.ПериодНачисленияЗарплаты, "Л=" + КодЯзыка + "; ДФ=гггг"));
			
		ИначеЕсли Шапка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц 
			Или Шапка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда
			
			ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1 %2 года.'", КодЯзыка), Формат(?(Шапка.ПериодНачисленияДепонированнойЗарплаты = Дата("00010101"), Шапка.ПериодНачисленияЗарплаты, Шапка.ПериодНачисленияДепонированнойЗарплаты), "Л=" + КодЯзыка + "; ДФ=ММММ"), Формат(Шапка.ПериодНачисленияДепонированнойЗарплаты, "Л=" + КодЯзыка + "; ДФ=гггг"));
			
		Иначе
			Если Шапка.ПериодНачисленияЗарплаты = Шапка.ПериодНачисленияДепонированнойЗарплаты ИЛИ Шапка.ПериодНачисленияДепонированнойЗарплаты = Дата("00010101") Тогда
				ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1 %2 года.'", КодЯзыка), Формат(Шапка.ПериодНачисленияЗарплаты, "Л=" + КодЯзыка + "; ДФ=ММММ"), Формат(Шапка.ПериодНачисленияЗарплаты, "Л=" + КодЯзыка + "; ДФ=гггг"));
			Иначе
				ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1 - %2'", КодЯзыка), Формат(Мин(Шапка.ПериодНачисленияЗарплаты,Шапка.ПериодНачисленияДепонированнойЗарплаты), "Л=" + КодЯзыка + "; ДЛФ=дд"), Формат(Макс(Шапка.ПериодНачисленияЗарплаты,Шапка.ПериодНачисленияДепонированнойЗарплаты), "Л=" + КодЯзыка + "; ДЛФ=дд"));
			КонецЕсли;
		КонецЕсли;
		
		// Сумма по документу.
		ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Валюта);

		ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ОбластьМакетаШапка.Параметры.Валюта = Валюта;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; ИтогоПоВедомости = 0;
				
		ВыборкаРаботники.Сбросить();
		
		Если ВыборкаРаботники.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокРаб     = ВыборкаРаботники.Выбрать();
			ВсегоСтрокДокумента = ВыборкаСтрокРаб.Количество();
		Иначе
			ВыборкаСтрокРаб = Неопределено;
		КонецЕсли;
		
		Если НЕ ВыборкаСтрокРаб = Неопределено Тогда
			
			// выводим данные по строкам документа.
			Пока ВыборкаСтрокРаб.Следующий() Цикл
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокРаб);
				
				// разбиение на страницы
				ВыведеноСтрок 							  = ВыведеноСтрок + 1;
				ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
					ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
					ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				КонецЕсли;
				
				Если ВывестиПодвалЛиста Тогда
					ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
					ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьМакетаШапка);
					ВыведеноСтраниц = ВыведеноСтраниц + 1;
					ИтогоНаСтранице = 0;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				ИтогоНаСтранице  = ИтогоНаСтранице + ВыборкаСтрокРаб.Сумма;
				ИтогоПоВедомости = ИтогоПоВедомости + ВыборкаСтрокРаб.Сумма;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ВыведеноСтрок = 0 Тогда
			СчПечати = 0;
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ОбластьМакетаСтрока.Параметры.ФИОФизлица = " " + Символы.ПС + " ";
			Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
				СчПечати = СчПечати + 1;
				Если СчПечати > 15 Тогда 
					Прервать;
				КонецЕсли;			
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
		ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ОбластьМакетаПодвал.Параметры.ИтогоПоВедомости = ИтогоПоВедомости;
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		// Выведем количество страниц в ведомости
		ТабДокумент.Область("КоличествоЛистов").Текст = ВыведеноСтраниц;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 

#КонецЕсли