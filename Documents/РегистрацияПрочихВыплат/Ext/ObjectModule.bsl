#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ПрочиеВыплаты.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = "";
	
	Для каждого СтрокаТЧ Из ПрочиеВыплаты Цикл
			
		ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СтрокаТЧ.ФизЛицо);
			
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			Иначе
				Если Лев(КраткийСоставДокумента, 2) = ", " Тогда
					КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 95) + "...";
				Иначе
					КраткийСоставДокумента = Лев(КраткийСоставДокумента, 97) + "...";
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
		
	Если Лев(КраткийСоставДокумента, 2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНУ", УчитыватьКПН);   
	
	ОрганизацияПлательщикНалогаНаПрибыль = УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	НеобходимостьОтраженияВНУ 	         = ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН;

	Если НЕ НеобходимостьОтраженияВНУ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
			
	КонецЕсли;  
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);   
	
	ПрочиеВыплатыТаблица = ПрочиеВыплаты.Выгрузить();
	
	Если ПрочиеВыплатыТаблица.Количество() > 0 Тогда
		
		СпособОтраженияВидПрочихВыплат = СпособОтраженияВРеглУчете; 
		
		Если ЗначениеЗаполнено(СпособОтраженияВидПрочихВыплат) Тогда
						
			СчетаРасчетовСпособОтражения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтраженияВидПрочихВыплат, "СчетКт, СчетКтНУ");
			
			Если НЕ ЗначениеЗаполнено(СчетаРасчетовСпособОтражения.СчетКт) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнен Счет Кт (БУ): для способа отражения <%1> не указан счет кредита (БУ)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СпособОтраженияВидПрочихВыплат);				
				Поле = "СпособОтраженияВРеглУчете";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);  
				
			ИначеЕсли НеобходимостьОтраженияВНУ И НЕ ЗначениеЗаполнено(СчетаРасчетовСпособОтражения.СчетКтНУ) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнен Счет Кт (НУ): для способа отражения <%1> не указан счет кредита (НУ)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СпособОтраженияВидПрочихВыплат);				
				Поле = "СпособОтраженияВРеглУчете";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);  
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	НеобходимаПострочнаяПроверка = Ложь;
	Для Каждого КлючЗначение Из ПараметрыПострочнойПроверки Цикл
		Если КлючЗначение.Значение Тогда 
			НеобходимаПострочнаяПроверка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимаПострочнаяПроверка Тогда 
		ПроверитьЗаполнениеТабличнойЧастиПострочно(ПрочиеВыплаты, "ПрочиеВыплаты", Отказ, ПараметрыПострочнойПроверки);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегистрацияПрочихВыплат.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	// по регистрам бухгалтерии	
	РасчетЗарплатыСервер.СформироватьДвиженияРегистрацияПрочихВыплат(Реквизиты, ПараметрыПроведения.ТаблицаПрочиеВыплаты, Движения, Отказ);		
		
	// по регистру ВзаиморасчетыПоПрочимВыплатам																					
	РасчетЗарплатыСервер.СформироватьДвиженияРегистрацияПрочихВыплатВзаиморасчеты(ПараметрыПроведения.ТаблицаВзаиморасчетыПоПрочимВыплатам, 
																					"ВзаиморасчетыПоПрочимВыплатам", Движения, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
		
КонецПроцедуры

#КонецЕсли

