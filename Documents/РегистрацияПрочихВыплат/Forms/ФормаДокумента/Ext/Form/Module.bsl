
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ПрочиеВыплаты.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
				
			Иначе
				
				НоваяСтрока = Объект.ПрочиеВыплаты.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;  
				
				СчетаЗатратПоПрочимВыплатам = ПолучитьСчетаЗатратПоПрочимВыплатам();   	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаЗатратПоПрочимВыплатам); 
 	
				УстановитьДоступностьСубконто(); 
				
			КонецЕсли;
			
		КонецЦикла; 
				
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""регистрация прочих выплат"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
       	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры  

&НаКлиенте
Процедура СпособОтраженияВРеглУчетеПриИзменении(Элемент)
	
	Если (Объект.ПрочиеВыплаты.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru='Заполнить счета затрат в табличной части по способу отражения?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСпособОтраженияВРеглУчете", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли; 
	
	ТекущийСпособОтраженияВРеглУчете = Объект.СпособОтраженияВРеглУчете;
			
КонецПроцедуры  

&НаКлиенте
Процедура ВидПрочихВыплатПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(Объект.ВидПрочихВыплат) Тогда
		
		Если (Объект.ПрочиеВыплаты.Количество() > 0) Тогда
			ТекстВопроса = НСтр("ru='Заполнить способ отражения и счета затрат в табличной части по виду прочих выплат?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииВидПрочихВыплат", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			ТекстВопроса = НСтр("ru='Заполнить способ отражения по виду прочих выплат?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииВидПрочихВыплат", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);	
		КонецЕсли;
		
	КонецЕсли; 
		
	ТекущийВидПрочихВыплат = Объект.ВидПрочихВыплат;
	
КонецПроцедуры  

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры  

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПрочиеВыплаты

&НаКлиенте
Процедура ПрочиеВыплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		УстановитьСчетаЗатратПоПрочимВыплатам();  	
		УстановитьДоступностьСубконто(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСпособОтраженияПриОбменеПриИзменении(Элемент)

   	СтрокаТаблицы = Элементы.ПрочиеВыплаты.ТекущиеДанные;

    ТекстВопроса = НСтр("ru='Заполнить счета затрат в строке по способу отражения?'");
    Режим = РежимДиалогаВопрос.ДаНет;
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСпособОтраженияПриОбмене", ЭтотОбъект, Параметры);
    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
				
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСчетЗатратБУПриИзменении(Элемент)    
	
	СтрокаТаблицы = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ПрочиеВыплаты", Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты", Истина);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");  
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ПрочиеВыплатыСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта); 
	ЗаполнитьСубконтоБУФизЛицо(ДанныеСтрокиТаблицы, СтрокаТаблицы.ФизЛицо);
	ЗаполнитьСубконтоНУФизЛицо(ДанныеСтрокиТаблицы, СтрокаТаблицы.ФизЛицо);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы); 	   
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьСубконтоБУФизЛицо(СтрокаТаблицы, ФизЛицо)   
	
	СтруктураДанныхСпособОтражения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПрочихВыплат.СпособОтраженияВРеглУчете,"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3");		

	СчетЗатратСпособОтражения = СтруктураДанныхСпособОтражения.СчетДт; 
	
	СвойстваСчетаДтБУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратБУ);
	Для ИндексСубконто = 1 По СвойстваСчетаДтБУ.КоличествоСубконто Цикл
		Если СвойстваСчетаДтБУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(ФизЛицо) Тогда
			СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = ФизЛицо;	
		КонецЕсли;
	КонецЦикла;	
		
	Если СтрокаТаблицы.СчетЗатратБУ = СчетЗатратСпособОтражения Тогда  
		
		СвойстваСчетаЗатратСпособОтражения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратСпособОтражения);
		Для ИндексСубконто = 1 По СвойстваСчетаЗатратСпособОтражения.КоличествоСубконто Цикл
			Если СвойстваСчетаЗатратСпособОтражения["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтруктураДанныхСпособОтражения["СубконтоДт" + ИндексСубконто]) Тогда 		
				СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = СтруктураДанныхСпособОтражения["СубконтоДт" + ИндексСубконто];	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратБУ1ПриИзменении(Элемент)	
	
	ТекущиеДанные = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ПрочиеВыплаты");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыВидСубконтоЗатратБУ2ПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ПрочиеВыплаты");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "ПрочиеВыплаты");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыВидСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты");
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ПрочиеВыплатыСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);  
	ЗаполнитьСубконтоНУФизЛицо(ДанныеСтрокиТаблицы, СтрокаТаблицы.ФизЛицо);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);     
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратНУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "ПрочиеВыплаты");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 1, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 2, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 3, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеВыплатыПериодВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанныеПрочиеВыплаты = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	ТекущиеДанныеПрочиеВыплаты.ПериодВзаиморасчетов = НачалоМесяца(ТекущиеДанныеПрочиеВыплаты.ПериодВзаиморасчетов);  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "РегистрацияПрочихВыплат.ПрочиеВыплаты";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка данных по прочим выплатам из файла'");
	
	ДополнительныеПараметры = Новый Структура();  
	ДополнительныеПараметры.Вставить("ИмяТЧ", "ПрочиеВыплаты");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийВидПрочихВыплат = Объект.ВидПрочихВыплат; 	
		
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.СпособОтраженияВРеглУчете = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПрочихВыплат, "СпособОтраженияВРеглУчете"); 
		
	КонецЕсли; 
	
	ТекущийСпособОтражения = Объект.СпособОтраженияВРеглУчете;
	УстановитьДоступностьСубконто();
	
	УправлениеВидимостью(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма)
	
	Объект = Форма.Объект;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы; 
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН); 
	
	Элементы.ПрочиеВыплатыСчетЗатратНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ПрочиеВыплатыГруппаСубконтоСчетаНУ.Видимость = Объект.УчитыватьКПН;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение);
	
	Для Каждого ТекСтрока Из Объект.ПрочиеВыплаты Цикл
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекСтрока, "СубконтоЗатратБУ%Индекс%", "СчетЗатратБУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекСтрока, "СубконтоЗатратБУ%Индекс%", "ПрочиеВыплатыСубконтоЗатратБУ%Индекс%", ПараметрыДокумента);
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекСтрока, "СубконтоЗатратНУ%Индекс%", "СчетЗатратНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекСтрока, "СубконтоЗатратНУ%Индекс%", "ПрочиеВыплатыСубконтоЗатратНУ%Индекс%", ПараметрыДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
		
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
	КонецЕсли;
	
    УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	Если Результат =КодВозвратаДиалога.Да  Тогда
		ПриИзмененииЗначенияОрганизацииСервер(Параметры, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
			
	Для Каждого СтрокаПрочиеВыплаты Из Объект.ПрочиеВыплаты Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаПрочиеВыплаты.СчетЗатратБУ, СтрокаПрочиеВыплаты, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаПрочиеВыплаты.СчетЗатратНУ, СтрокаПрочиеВыплаты, ПоляОбъекта);		
		
		// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаПрочиеВыплаты, "СубконтоЗатратБУ" + "%Индекс%", "СчетЗатратБУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаПрочиеВыплаты, "СубконтоЗатратБУ" + "%Индекс%", "ПрочиеВыплатыСубконтоЗатратБУ" + "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаПрочиеВыплаты, "СубконтоЗатратНУ" + "%Индекс%", "СчетЗатратНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаПрочиеВыплаты, "СубконтоЗатратНУ" + "%Индекс%", "ПрочиеВыплатыСубконтоЗатратНУ" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти, ЗаменаСубконтоНУ = Ложь)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочиеВыплатыСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратБУ, СубконтоЗатратБУ1,
								 |СубконтоЗатратБУ2, СубконтоЗатратБУ3", СтрокаТабличнойЧасти.СчетЗатратБУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекущиеДанные, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочиеВыплатыСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконтоНУФизЛицо(СтрокаТаблицы, ФизЛицо) 
		
	СтруктураДанныхСпособОтражения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПрочихВыплат.СпособОтраженияВРеглУчете,"СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3");		

	СчетЗатратНУСпособОтражения = СтруктураДанныхСпособОтражения.СчетДтНУ; 
	
	СвойстваСчетаДтНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
	Для ИндексСубконто = 1 По СвойстваСчетаДтНУ.КоличествоСубконто Цикл
		Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(ФизЛицо) Тогда
			СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = ФизЛицо;	
		КонецЕсли;
	КонецЦикла;	
		
	Если СтрокаТаблицы.СчетЗатратНУ = СчетЗатратНУСпособОтражения Тогда  
		
		СвойстваСчетаЗатратНУСпособОтражения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНУСпособОтражения);
		Для ИндексСубконто = 1 По СвойстваСчетаЗатратНУСпособОтражения.КоличествоСубконто Цикл
			Если СвойстваСчетаЗатратНУСпособОтражения["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтруктураДанныхСпособОтражения["СубконтоДтНУ" + ИндексСубконто]) Тогда 		
				СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = СтруктураДанныхСпособОтражения["СубконтоДтНУ" + ИндексСубконто];	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПрочиеВыплаты(Команда)
	ИзменитьТабличнуюЧасть("ПрочиеВыплаты", НСтр("ru='Прочие выплаты'"));
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("ПериодВзаиморасчетов");
	
	СтруктураРеквизитов.Вставить("СуммаНачисления");
		
	СтруктураРеквизитов.Вставить("СчетЗатратБУ");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ3");
	
	СтруктураРеквизитов.Вставить("СчетЗатратНУ");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ3");
		
	СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратБУ", "СубконтоЗатратБУ1,СубконтоЗатратБУ2,СубконтоЗатратБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1,СубконтоЗатратНУ2,СубконтоЗатратНУ2");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	НевидимыеКолонки = Новый Массив;
	ПолучитьНевидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", НевидимыеКолонки);
	ПараметрыОбработки.Вставить("НевидимыеКолонки", НевидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьНевидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьНевидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Не Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры          

&НаСервере
Функция ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СпособОтражения) 
	
	СтруктураДанных = Новый Структура;

	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтражения,"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетКтНУ,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3");
		
	Возврат СтруктураДанных;

КонецФункции // ПолучитьСтруктуру() 

&НаКлиенте
Процедура УстановитьСчетаЗатратПоПрочимВыплатам() 

	ПрочиеВыплатыТекущиеДанные = Элементы.ПрочиеВыплаты.ТекущиеДанные; 	
	
	Если ПрочиеВыплатыТекущиеДанные <> Неопределено Тогда 
		СчетаЗатратПоПрочимВыплатам = ПолучитьСчетаЗатратПоПрочимВыплатам();   	
		ЗаполнитьЗначенияСвойств(ПрочиеВыплатыТекущиеДанные, СчетаЗатратПоПрочимВыплатам); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСчетаЗатратПоПрочимВыплатам() 	
	
	ДанныеПоСпособуОтражения = Новый Структура("СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыСчетов.Налоговый.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Объект.СпособОтраженияВРеглУчете) Тогда 	
		
		ДанныеПоСпособуОтраженияСтруктура = ПолучитьДанныеПоСпособуОтраженияВРеглУчете(Объект.СпособОтраженияВРеглУчете);
		
		ДанныеПоСпособуОтражения.СчетЗатратБУ      = ДанныеПоСпособуОтраженияСтруктура.СчетДт; 
		ДанныеПоСпособуОтражения.СчетЗатратНУ      = ДанныеПоСпособуОтраженияСтруктура.СчетДтНУ;
		ДанныеПоСпособуОтражения.СубконтоЗатратБУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт1; 
		ДанныеПоСпособуОтражения.СубконтоЗатратБУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт2;
		ДанныеПоСпособуОтражения.СубконтоЗатратБУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт3;
		ДанныеПоСпособуОтражения.СубконтоЗатратНУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ1;
		ДанныеПоСпособуОтражения.СубконтоЗатратНУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ2;
		ДанныеПоСпособуОтражения.СубконтоЗатратНУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ3;

	КонецЕсли; 
		
	Возврат ДанныеПоСпособуОтражения;
				
КонецФункции 

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииВидПрочихВыплат(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииВидПрочихВыплатНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииВидПрочихВыплатНаСервере()
	
	УстановитьСпособОтражения(); 
	
	Если Объект.ПрочиеВыплаты.Количество() > 0 Тогда
		УстановитьСчетаЗатратПоПрочимВыплатамПострочно(); 	
		УстановитьДоступностьСубконто();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСчетаЗатратПоПрочимВыплатамПострочно() 
	
	ТаблицаПрочиеВыплаты = Объект.ПрочиеВыплаты;
	
	Если ТаблицаПрочиеВыплаты.Количество() > 0 Тогда  
		СчетаЗатратПоПрочимВыплатам = ПолучитьСчетаЗатратПоПрочимВыплатам();  
		Для Каждого СтрокаТаблицы Из ТаблицаПрочиеВыплаты Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СчетаЗатратПоПрочимВыплатам);
				
			СвойстваСчетаДтБУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетаЗатратПоПрочимВыплатам.СчетЗатратБУ);
			Для ИндексСубконто = 1 По СвойстваСчетаДтБУ.КоличествоСубконто Цикл
				Если СвойстваСчетаДтБУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда			
					Если ЗначениеЗаполнено(СчетаЗатратПоПрочимВыплатам["СубконтоЗатратБУ" + ИндексСубконто]) Тогда
						СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = СчетаЗатратПоПрочимВыплатам["СубконтоЗатратБУ" + ИндексСубконто];	
					Иначе
						СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = СтрокаТаблицы.ФизЛицо;	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СвойстваСчетаДтНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
			Для ИндексСубконто = 1 По СвойстваСчетаДтНУ.КоличествоСубконто Цикл
				Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда
					Если ЗначениеЗаполнено(СчетаЗатратПоПрочимВыплатам["СубконтоЗатратНУ" + ИндексСубконто]) Тогда
						СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = СчетаЗатратПоПрочимВыплатам["СубконтоЗатратНУ" + ИндексСубконто];	
					Иначе
						СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = СтрокаТаблицы.ФизЛицо;	
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособОтражения()
	
	Объект.СпособОтраженияВРеглУчете = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПрочихВыплат, "СпособОтраженияВРеглУчете");
	
КонецПроцедуры

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или НЕ ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;                                                                                     
	
	ИмяТЧ = "ПрочиеВыплаты";
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных,ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных, ИмяТЧ)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
		
	ИсключаемыеДанные = Новый Массив;
	
	ТекстИсключаемыеЭлементы = "";
	
	Для Каждого ИсключаемыйЭлемент Из ИсключаемыеДанные Цикл 	
		
		ИсключаемаяСтрокаТаблицы = ЗагруженныеДанные.Найти(ИсключаемыйЭлемент, "ФизЛицо");
		
		Если ИсключаемаяСтрокаТаблицы <> Неопределено Тогда
			ЗагруженныеДанные.Удалить(ИсключаемаяСтрокаТаблицы); 
			ТекстИсключаемыеЭлементы = ТекстИсключаемыеЭлементы + Символы.ПС + ИсключаемыйЭлемент.Наименование;
		Иначе
			ИсключаемыйИндекс = ИсключаемыеДанные.Найти(ИсключаемыйЭлемент);
			ИсключаемыеДанные.Удалить(ИсключаемыйИндекс);
		КонецЕсли; 
				
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
	ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор));
	
	ОбработкаВыбораНаСервере(СтруктураЗагруженныхДанных, ИмяТЧ);
	
	Сообщение = Новый СообщениеПользователю;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("В табличную часть <Прочие выплаты> добавлено физ. лиц: %1, исключено: %2", ЗагруженныеДанные.Количество(), ИсключаемыеДанные.Количество());
	
	Если ИсключаемыеДанные.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ":";
		ТекстСообщения = ТекстСообщения + ТекстИсключаемыеЭлементы; 
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
 	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
		
	СписокСвойств = Неопределено;
	                                               		
	ТаблицаФизЛиц = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		

	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаФизЛица Из ТаблицаФизЛиц Цикл
		
		СтрокаТабличнойЧасти =  Неопределено;
		
		// Ищем выбранную позицию в таблице физ. лиц.
		//  Если найдем - увеличим сумму; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ФизЛицо",     СтрокаФизЛица);

		Если ЗначениеЗаполнено(СтрокаФизЛица.ПериодВзаиморасчетов) Тогда
			СтруктураОтбора.Вставить("ПериодВзаиморасчетов", СтрокаФизЛица.ПериодВзаиморасчетов);
		КонецЕсли;   		
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем сумму в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.СуммаНачисления + СтрокаФизЛица.СуммаНачисления;
		Иначе  
						
			НоваяСтрока = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФизЛица, СписокСвойств);
			
			СчетаЗатратПоПрочимВыплатам = ПолучитьСчетаЗатратПоПрочимВыплатам();   	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаЗатратПоПрочимВыплатам); 

			УстановитьДоступностьСубконто(); 
			
			МетаданныеДокумента = Объект.Ссылка.Метаданные();
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСпособОтраженияВРеглУчете(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииСпособОтраженияВРеглУчетеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииСпособОтраженияВРеглУчетеНаСервере()
	
	УстановитьСчетаЗатратПоПрочимВыплатамПострочно(); 	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСпособОтраженияПриОбмене(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
    
    СтрокаТаблицы = Элементы.ПрочиеВыплаты.ТекущиеДанные;

    ДанныеСтрокиТаблицы = Новый Структура(
		"СпособОтраженияПриОбмене, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3,
        |ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
        |ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
        |СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
        |СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);

	ПослеЗакрытияВопросаПриИзмененииСпособОтраженияПриОбменеНаСервере(ДанныеСтрокиТаблицы);  
    
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииСпособОтраженияПриОбменеНаСервере(СтрокаТаблицы)
	  
    ДанныеПоСпособуОтражения = Новый Структура("СчетЗатратБУ, СчетЗатратНУ, 
    |СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
    |СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
    ПланыСчетов.Типовой.ПустаяСсылка(),
    ПланыСчетов.Налоговый.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка());
    
    Если ЗначениеЗаполнено(Объект.СпособОтраженияВРеглУчете) Тогда 	
        
        ДанныеПоСпособуОтраженияСтруктура = ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СтрокаТаблицы.СпособОтраженияПриОбмене);
        
        ДанныеПоСпособуОтражения.СчетЗатратБУ      = ДанныеПоСпособуОтраженияСтруктура.СчетДт; 
        ДанныеПоСпособуОтражения.СчетЗатратНУ      = ДанныеПоСпособуОтраженияСтруктура.СчетДтНУ;
        ДанныеПоСпособуОтражения.СубконтоЗатратБУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт1; 
        ДанныеПоСпособуОтражения.СубконтоЗатратБУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт2;
        ДанныеПоСпособуОтражения.СубконтоЗатратБУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДт3;
        ДанныеПоСпособуОтражения.СубконтоЗатратНУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ1;
        ДанныеПоСпособуОтражения.СубконтоЗатратНУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ2;
        ДанныеПоСпособуОтражения.СубконтоЗатратНУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоДтНУ3;
        
    КонецЕсли; 
    
    ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеПоСпособуОтражения);
    
    СвойстваСчетаДтБУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеПоСпособуОтражения.СчетЗатратБУ);
    Для ИндексСубконто = 1 По СвойстваСчетаДтБУ.КоличествоСубконто Цикл
        Если СвойстваСчетаДтБУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда			
            Если ЗначениеЗаполнено(ДанныеПоСпособуОтражения["СубконтоЗатратБУ" + ИндексСубконто]) Тогда
                СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = ДанныеПоСпособуОтражения["СубконтоЗатратБУ" + ИндексСубконто];	
            Иначе
                СтрокаТаблицы["СубконтоЗатратБУ" + ИндексСубконто] = СтрокаТаблицы.ФизЛицо;	
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    СвойстваСчетаДтНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
    Для ИндексСубконто = 1 По СвойстваСчетаДтНУ.КоличествоСубконто Цикл
        Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда
            Если ЗначениеЗаполнено(ДанныеПоСпособуОтражения["СубконтоЗатратНУ" + ИндексСубконто]) Тогда
                СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = ДанныеПоСпособуОтражения["СубконтоЗатратНУ" + ИндексСубконто];	
            Иначе
                СтрокаТаблицы["СубконтоЗатратНУ" + ИндексСубконто] = СтрокаТаблицы.ФизЛицо;	
            КонецЕсли;	
        КонецЕсли;
    КонецЦикла;
    ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
    "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
    
    ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта);
    
    ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
    "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
    
    ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта);		
    
    // установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
    ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, "СубконтоЗатратБУ" + "%Индекс%", "СчетЗатратБУ");
    ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТаблицы, "СубконтоЗатратБУ" + "%Индекс%", "ПрочиеВыплатыСубконтоЗатратБУ" + "%Индекс%", ПараметрыДокумента);	
    
    ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, "СубконтоЗатратНУ" + "%Индекс%", "СчетЗатратНУ");
    ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТаблицы, "СубконтоЗатратНУ" + "%Индекс%", "ПрочиеВыплатыСубконтоЗатратНУ" + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры 