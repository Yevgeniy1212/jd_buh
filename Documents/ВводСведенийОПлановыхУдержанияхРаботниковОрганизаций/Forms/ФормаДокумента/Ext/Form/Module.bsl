&НаКлиенте
Перем СинхронизируемыеТабличныеЧасти;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьТаблицуРаботников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	ЗаполнитьТаблицуРаботников();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= РаботникиОрганизации.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				ДобавитьСтрокиУдержанийПоРаботникам(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					
					НоваяСтрока 					= РаботникиОрганизации.Добавить();	
					НоваяСтрока.ФизЛицо 			= СтрокаМассива;
					ДобавитьСтрокиУдержанийПоРаботникам(СтрокаМассива);					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""ввод сведений о плановых удержаниях сотрудников организаций"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		ПриИзмененииЗначенияОрганизацииСервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Сотрудники

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
		
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.РаботникиОрганизации, СинхронизируемыеТабличныеЧасти, "Физлицо");

	Если Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		ТекущееФизЛицо = Элементы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо;
		УстановитьОтборРаботника(ТекущееФизЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ПриИзмененииРаботника(Элементы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиУдержанийПоРаботнику(Элементы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Физлицо", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элементы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо <> ВыбранноеЗначение Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В данном документе по одному сотруднику можно вводить только одну строку!'"));
		Возврат;
	КонецЕсли;
	
	Элементы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = ВыбранноеЗначение;
	ПриИзмененииРаботника(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Удержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.Удержания, СинхронизируемыеТабличныеЧасти, "Физлицо");
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботников();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковУдержанияСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Удержания.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.ДатаДействия = Объект.Дата;
		ТекущаяСтрокаТЧРаботники = Элементы.РаботникиОрганизации.ТекущиеДанные;
		Если ТекущаяСтрокаТЧРаботники <> Неопределено Тогда
			ТекущаяСтрока.ФизЛицо = ТекущаяСтрокаТЧРаботники.Физлицо;
		КонецЕсли; 
		
		Если Элементы.Удержания.ОтборСтрок <> Неопределено Тогда
			ТекущаяСтрока.Физлицо = Элементы.Удержания.ОтборСтрок.Физлицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ВидыДействияСНачислением.Прекратить") Тогда
			ТекущиеДанные.Размер = 0
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ЗаполнитьПоСпискуСотрудников(Команда)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоВсемСотрудникам(Команда)
	
	ПоВсемСотрудникам = Истина;
	Подбор(Команда);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПлановымУдержаниям(Команда)
	
	ПоВсемСотрудникам = Ложь;
	Подбор(Команда);	
	
КонецПроцедуры



&НаКлиенте
Процедура ПоСотруднику(Команда)
	
	Если Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ Элементы.ПоСотруднику.Пометка Тогда
			Элементы.Удержания.ОтборСтрок = Новый ФиксированнаяСтруктура("ФизЛицо", ТекущееФизЛицо);
		Иначе
			Элементы.Удержания.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		Элементы.ПоСотруднику.Пометка = НЕ Элементы.ПоСотруднику.Пометка;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В таблице сотрудников не выбрана строка'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "РаботникиОрганизаций", "Объект");

	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Элементы.ПоСотруднику.Пометка = Ложь;
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуРаботников()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = Объект.Удержания.Выгрузить(, "ФизЛицо");
	ТЗ.Свернуть("ФизЛицо");
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		РаботникиОрганизации.Добавить().ФизЛицо = СтрокаТабличнойЧасти.ФизЛицо;
	КонецЦикла;
	
	РаботникиОрганизации.Сортировать("ФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиУдержанийПоРаботникам(МассивФизЛиц)
	
	ЗапросУдержания = Новый Запрос;
	ЗапросУдержания.УстановитьПараметр("ФизЛицо"			, МассивФизЛиц);
	ЗапросУдержания.УстановитьПараметр("Период"				, Объект.Дата);
	ЗапросУдержания.УстановитьПараметр("Организация"		, ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	ЗапросУдержания.УстановитьПараметр("Регистратор"		, Объект.Ссылка);
	ЗапросУдержания.УстановитьПараметр("Прекратить"			, Перечисления.ВидыДействияСНачислением.Прекратить);
	ЗапросУдержания.УстановитьПараметр("ПустойВидРасчета"	, ПредопределенноеЗначение("ПланВидовРасчета.УдержанияОрганизаций.ПустаяСсылка"));	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ПОМЕСТИТЬ вт_ФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ФизЛица.Ссылка КАК ФизЛицо,
	|	ЕСТЬNULL(Удержания.ВидРасчета, &ПустойВидРасчета) КАК ВидРасчета,
	|	ЕСТЬNULL(Удержания.Размер, 0) КАК Размер,
	|	Удержания.ДокументОснование,
	|	Удержания.Действие,
	|	Удержания.ДействиеЗавершения,
	|	Удержания.ПериодЗавершения
	|ПОМЕСТИТЬ вт_Удержания
	|ИЗ
	|	вт_ФизЛица КАК вт_ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|				&Период,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							вт_ФизЛица.Ссылка
	|						ИЗ
	|							вт_ФизЛица КАК вт_ФизЛица)
	|					И Организация = &Организация
	|					И Регистратор <> &Регистратор) КАК Удержания
	|		ПО вт_ФизЛица.Ссылка = Удержания.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Удержания.ФизЛицо КАК ФизЛицо,
	|	вт_Удержания.ВидРасчета КАК ВидРасчета,
	|	вт_Удержания.Размер КАК Размер,
	|	вт_Удержания.ДокументОснование
	|ИЗ
	|	вт_Удержания КАК вт_Удержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА вт_Удержания.ВидРасчета = &ПустойВидРасчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА вт_Удержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|							И вт_Удержания.ПериодЗавершения < &Период
	|						ТОГДА вт_Удержания.ДействиеЗавершения
	|					ИНАЧЕ вт_Удержания.Действие
	|				КОНЕЦ <> &Прекратить
	|		КОНЕЦ";

	Если Не ПоВсемСотрудникам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
	КонецЕсли;	
		
	ЗапросУдержания.Текст = ТекстЗапроса;	
	Выборка = ЗапросУдержания.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("ФизЛицо, ВидРасчета, ДокументОснование, Действие");
	СтруктураПоиска.Действие   = Перечисления.ВидыДействияСНачислением.НеИзменять;

	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска.ФизЛицо    = Выборка.ФизЛицо;
		СтруктураПоиска.ВидРасчета = Выборка.ВидРасчета;
		СтруктураПоиска.ДокументОснование = Выборка.ДокументОснование;
		МассивУдержаний = Объект.Удержания.НайтиСтроки(СтруктураПоиска);
		
		Если МассивУдержаний.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли; 

		НоваяСтрокаТЧ 					= Объект.Удержания.Добавить();
		НоваяСтрокаТЧ.Физлицо 	 		= Выборка.ФизЛицо;
		НоваяСтрокаТЧ.ВидРасчета 		= Выборка.ВидРасчета;
		НоваяСтрокаТЧ.ДокументОснование = Выборка.ДокументОснование;
		НоваяСтрокаТЧ.Действие   		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		НоваяСтрокаТЧ.ДатаДействия  	= Объект.Дата;
		НоваяСтрокаТЧ.Размер     		= Выборка.Размер;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиУдержанийПоРаботнику(ФизЛицо)
	
	СтруктураПоиска = Новый Структура("ФизЛицо", ФизЛицо);
	
	МассивСтрок = Объект.Удержания.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		Объект.Удержания.Удалить(СтрокаТабличнойЧасти); 
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборРаботника(ФизЛицо)
	
	Если Элементы.ПоСотруднику.Пометка Тогда
		Элементы.Удержания.ОтборСтрок = Новый ФиксированнаяСтруктура("ФизЛицо", ФизЛицо);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРаботника(Значение)

	// если работник изменился, то по предыдущему работнику удалим строки, а по новому добавим
	Если Значение <> ТекущееФизЛицо  Тогда
		
		УдалитьСтрокиУдержанийПоРаботнику(ТекущееФизЛицо);
		
		// запомним текущего работника
		ТекущееФизЛицо = Значение;
		//МассивСотрудник = Новый Массив;
		//МассивСотрудник.Добавить(ТекущееФизЛицо);
		
		// добавим строки удержаний
		ДобавитьСтрокиУдержанийПоРаботникам(ТекущееФизЛицо);
		
		УстановитьОтборРаботника(ТекущееФизЛицо);

	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииРаботника()

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо =ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковУдержанияСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.Удержания.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо =ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			МассивСтрок = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		Исключение
			МассивСтрок = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		КонецПопытки;

		Если МассивСтрок.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СинхронизироватьСтроки()


СинхронизируемыеТабличныеЧасти = Новый Соответствие;
СинхронизируемыеТабличныеЧасти["Удержания"]  			= Ложь;
СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]  = Ложь;
