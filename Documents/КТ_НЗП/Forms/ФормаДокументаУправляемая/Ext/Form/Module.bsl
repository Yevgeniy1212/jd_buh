
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		УстановитьКомментарий();
	КонецЕсли;
				      
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КТ_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, , , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);	
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		Объект.Организация = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(Объект.Организация, Объект.Организация,);
		Если Результат.ИзмененаОрганизация Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
 Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
    
    Если СтруктураПараметров = Неопределено
        ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта")
                И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда
        РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(Объект.Организация, Объект.Организация,, СтруктураПараметров);
        УстановитьФункциональныеОпцииФормы();
    КонецЕсли;
  
КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарий()

	Объект.Комментарий = "НЗП " + Формат( Объект.Дата, "ДФ='ММММ гггг'");

КонецПроцедуры // УстановитьКомментарий()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗакрытиеМесяца");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаКонецМесяца = КонецМесяца(Объект.Дата);
	
	Если День(Объект.Дата) <> День(ДатаКонецМесяца) Тогда
		Объект.Дата = НачалоДня(ДатаКонецМесяца);
	//	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;

	// Изменение времени не влияет на поведение документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
		// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	УстановитьКомментарий();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаСервере
Процедура ЗаполнитьРаспределениеКосвенныхЗатрат()
	
	Объект.Данные.Очистить();
	
	ЗапросПоУчасткам = Новый Запрос;
	ЗапросПоУчасткам.Текст =  "ВЫБРАТЬ
	                          |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Агрегат КАК Агрегат,
	                          |	СУММА(ЕСТЬNULL(ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.ПробуреноПМПриход, 0)) КАК ПробуреноПМПриходВПериоде,
	                          |	СУММА(ЕСТЬNULL(ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.АктированоПМРасход, 0)) КАК АктированоПМРасход,
	                          |	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	                          |	СУММА(ЕСТЬNULL(ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.ПробуреноПМПриход, 0) + ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0)) КАК ПробуреноПМПриход
	                          |ИЗ
	                          |	РегистрНакопления.ПроизводственнаяСправкаПоОбъемам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Организация = &Организация) КАК ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, Счет = &ТекСчетЗакрытия1341, , Организация = &Организация) КАК ТиповойОстатки
	                          |		ПО ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Агрегат = ТиповойОстатки.Субконто1
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Агрегат,
	                          |	ТиповойОстатки.КоличествоОстаток";
	ЗапросПоУчасткам.УстановитьПараметр("Организация"  , Объект.Организация);
	ЗапросПоУчасткам.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.Дата));
	ЗапросПоУчасткам.УстановитьПараметр("КонецПериода" , КонецМесяца(Объект.Дата));
	ЗапросПоУчасткам.УстановитьПараметр("ТекСчетЗакрытия1341" , ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство);  //1341
	ТЗПоУчасткам = ЗапросПоУчасткам.Выполнить().Выгрузить();
	
	СписокУчастков = Новый СписокЗначений;

	ЗапросОстаткиНаСчетах = новый Запрос;
	ЗапросОстаткиНаСчетах.Текст =  "ВЫБРАТЬ
	                               |	ВложенныйЗапрос.Субконто1 КАК Субконто1,
	                               |	ВложенныйЗапрос.Субконто2 КАК Субконто2,
	                               |	ВложенныйЗапрос.Субконто3 КАК Субконто3,
	                               |	СУММА(ВложенныйЗапрос.СуммаОборот) КАК СуммаОборот,
	                               |	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток,
	                               |	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1,
	                               |		ТиповойОстаткиИОбороты.Субконто2 КАК Субконто2,
	                               |		ТиповойОстаткиИОбороты.Субконто3 КАК Субконто3,
	                               |		ВЫБОР
	                               |			КОГДА &КредитовыйОборот
	                               |				ТОГДА ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0)
	                               |			ИНАЧЕ ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотКт, 0)
	                               |		КОНЕЦ КАК СуммаОборот,
	                               |		0 КАК СуммаОстаток,
	                               |		0 КАК КоличествоОстаток
	                               |	ИЗ
	                               |		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &ТекСчетЗакрытия, , Организация = &Организация) КАК ТиповойОстаткиИОбороты
	                               |	
	                               |	ОБЪЕДИНИТЬ ВСЕ
	                               |	
	                               |	ВЫБРАТЬ
	                               |		ТиповойОстаткиИОбороты.Субконто1,
	                               |		ТиповойОстаткиИОбороты.Субконто2,
	                               |		ТиповойОстаткиИОбороты.Субконто3,
	                               |		0,
	                               |		ТиповойОстаткиИОбороты.СуммаОстаток,
	                               |		ТиповойОстаткиИОбороты.КоличествоОстаток
	                               |	ИЗ
	                               |		РегистрБухгалтерии.Типовой.Остатки(&ДатаКон1341, Счет = &ТекСчетЗакрытия1341, , Организация = &Организация) КАК ТиповойОстаткиИОбороты) КАК ВложенныйЗапрос
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	ВложенныйЗапрос.Субконто1,
	                               |	ВложенныйЗапрос.Субконто2,
	                               |	ВложенныйЗапрос.Субконто3";
	
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаНач"    , НачалоМесяца(Объект.Дата));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаКон"    , КонецМесяца(Объект.Дата));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия" , ПланыСчетов.Типовой.ОсновноеПроизводство);  //8110
	ЗапросОстаткиНаСчетах.УстановитьПараметр("КредитовыйОборот", Ложь);   
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ДатаКон1341"    , НачалоМесяца(Объект.Дата)); //КонецМесяца(ДобавитьМесяц(Объект.Дата , -1)));
	ЗапросОстаткиНаСчетах.УстановитьПараметр("ТекСчетЗакрытия1341" , ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство);  //1341
	
	ТЗОстатки = ЗапросОстаткиНаСчетах.Выполнить().Выгрузить();
	ТЗОстатки.Свернуть("Субконто1","СуммаОборот, СуммаОстаток, КоличествоОстаток");
	
	ТекСчет1341         = ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство; //1341
	ТекСчетЗакрытия8110 = ПланыСчетов.Типовой.ОсновноеПроизводство; //8110
	ТекСчетЗакрытия7010 = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг; //7010
	
	ЗапросОстаткиНаПМ = Новый Запрос;
	ЗапросОстаткиНаПМ.Текст ="ВЫБРАТЬ
	                         |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Участок КАК УБР,
	                         |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Агрегат КАК Агрегат,
	                         |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.ПробуреноПМПриход КАК ПробуреноПМПриход,
	                         |	ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.АктированоПМРасход КАК АктированоПМРасход,
	                         |	КТ_СоответствиеАгрегатовПодразделенияЦФО.Ссылка.Код КАК Код
	                         |ИЗ
	                         |	РегистрНакопления.ПроизводственнаяСправкаПоОбъемам.ОстаткиИОбороты(
	                         |			&НачалоПериода,
	                         |			&КонецПериода,
	                         |			,
	                         |			,
	                         |			Организация = &Организация
	                         |				И Агрегат = &Агрегат) КАК ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КТ_СоответствиеАгрегатов.ПодразделенияЦФО КАК КТ_СоответствиеАгрегатовПодразделенияЦФО
	                         |		ПО ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Агрегат = КТ_СоответствиеАгрегатовПодразделенияЦФО.Агрегат
	                         |			И (КТ_СоответствиеАгрегатовПодразделенияЦФО.Участок = ПроизводственнаяСправкаПоОбъемамОстаткиИОбороты.Участок)
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	УБР,
	                         |	Код,
	                         |	Агрегат";
	ЗапросОстаткиНаПМ.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1)));
	ЗапросОстаткиНаПМ.УстановитьПараметр("КонецПериода" , КонецМесяца(ДобавитьМесяц(Объект.Дата , -1)));
	ЗапросОстаткиНаПМ.УстановитьПараметр("Организация"  , Объект.Организация);
	
	ТЗОстаткиНаСчетах = ЗапросОстаткиНаСчетах.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗОстатки Цикл 
		ОбСуммаЗатрат = Стр.СуммаОборот;
		ОбКолОстаток  = Стр.КоличествоОстаток;
		ОбОстаток = Стр.СуммаОстаток;
		ОбСуммаЗатратНач = 0;
		
		СтрР = ТЗПоУчасткам.Найти(Стр.Субконто1, "Агрегат");
		Если СтрР <> Неопределено Тогда
			ОбКолПробурено  = СтрР.ПробуреноПМПриход; 
			ОбКолАктировано = СтрР.АктированоПМРасход;
			ОбРазница = ОбКолПробурено - ОбКолАктировано;  
			
			НайденСтрокиНаСчетах = ТЗОстаткиНаСчетах.НайтиСтроки(Новый Структура("Субконто1", Стр.Субконто1)); 
			Для Каждого ВыборкаОстаткиНаСчетах Из НайденСтрокиНаСчетах Цикл
				Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 Тогда
					КолОст = Окр(?(ОбОстаток=0, 0, (ВыборкаОстаткиНаСчетах.СуммаОстаток/ОбОстаток)*ОбКолОстаток), -3);//(((ВыборкаОстаткиНаСчетах.СуммаОстаток*100)/ОбОстаток)*ОбКолОстаток)/100); 
					КолРазница = Окр((ВыборкаОстаткиНаСчетах.СуммаОборот/ОбСуммаЗатрат)*ОбРазница, -3); //(((ВыборкаОстаткиНаСчетах.СуммаОборот*100)/ОбСуммаЗатрат)*ОбРазница)/100;
					
					Если СтрР.ПробуреноПМПриход > 0 И СтрР.АктированоПМРасход > 0 И СтрР.ПробуреноПМПриход = СтрР.АктированоПМРасход Тогда
						Сумма = Окр((ВыборкаОстаткиНаСчетах.СуммаОборот/СтрР.ПробуреноПМПриход)*СтрР.АктированоПМРасход, 2);
						ДобавитьСтроки(Объект, ТекСчетЗакрытия7010, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, 0, "");
					ИначеЕсли СтрР.ПробуреноПМПриход > 0 И СтрР.АктированоПМРасход > 0 И СтрР.ПробуреноПМПриход <> СтрР.АктированоПМРасход Тогда
						Сумма = Окр((ВыборкаОстаткиНаСчетах.СуммаОборот/СтрР.ПробуреноПМПриход)*СтрР.АктированоПМРасход, 2);
						ДобавитьСтроки(Объект, ТекСчетЗакрытия7010, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, 0, "");
						
						СуммаНа1341 = ВыборкаОстаткиНаСчетах.СуммаОборот - Сумма; //Окр((ВыборкаОстаткиНаСчетах.СуммаОборот/СтрР.ПробуреноПМПриход)*СтрР.АктированоПМРасход, 2);
						
						ОбСуммаЗатратНач = ОбСуммаЗатратНач + Сумма + СуммаНа1341;
						Если ОбСуммаЗатрат - ОбСуммаЗатратНач = 0 Тогда
							ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, СуммаНа1341, ОбРазница, ""); //СтрР.ПробуреноПМПриход - СтрР.АктированоПМРасход);
						Иначе
							ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, СуммаНа1341, ?(ОбРазница - КолРазница<0, ?(ОбРазница - КолРазница>0.1, ОбРазница, КолРазница), ?(ОбРазница - КолРазница<0.1, ОбРазница, КолРазница)), ""); //СтрР.ПробуреноПМПриход - СтрР.АктированоПМРасход);
						КонецЕсли;
						
						ОбРазница = ОбРазница - КолРазница;
						
					ИначеЕсли СтрР.ПробуреноПМПриход > 0 И СтрР.АктированоПМРасход = 0 Тогда
						Сумма = Окр(ВыборкаОстаткиНаСчетах.СуммаОборот, 2);
						
						ОбСуммаЗатратНач = ОбСуммаЗатратНач + Сумма;
						Если ОбСуммаЗатрат - ОбСуммаЗатратНач = 0 Тогда
							ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, ОбРазница, ""); //СтрР.ПробуреноПМПриход - СтрР.АктированоПМРасход);
						Иначе
							ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, ?(ОбРазница - КолРазница<0, ?(ОбРазница - КолРазница>0.1, ОбРазница, КолРазница), ?(ОбРазница - КолРазница<0.1, ОбРазница, КолРазница)), ""); //СтрР.ПробуреноПМПриход - СтрР.АктированоПМРасход);
						КонецЕсли;
					
						ОбРазница = ОбРазница - КолРазница;
	
						/////смотрим остатки на начало по агрегату по счету 1341		
					ИначеЕсли СтрР.ПробуреноПМПриход = 0 И СтрР.АктированоПМРасход > 0 Тогда
						ЗапросОстаткиНаПМ.УстановитьПараметр("Агрегат", ВыборкаОстаткиНаСчетах.Субконто1);
						ВыборкаОстаткиНаПМ = ЗапросОстаткиНаПМ.Выполнить().Выбрать();
						Если ВыборкаОстаткиНаПМ.Следующий() Тогда
							
							Сумма = Окр((ВыборкаОстаткиНаСчетах.СуммаОборот/ВыборкаОстаткиНаПМ.ПробуреноПМПриход)*СтрР.АктированоПМРасход, 2);
							ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, СтрР, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, 0, "");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		Иначе
			//Если ОбКолОстаток>0 тогда
			ЗапросПоСА = Новый Запрос;
			ЗапросПоСА.Текст = "ВЫБРАТЬ
			                   |	КТ_СоответствиеАгрегатовПодразделенияЦФО.Ссылка КАК Ссылка
			                   |ИЗ
			                   |	Справочник.КТ_СоответствиеАгрегатов.ПодразделенияЦФО КАК КТ_СоответствиеАгрегатовПодразделенияЦФО
			                   |ГДЕ
			                   |	КТ_СоответствиеАгрегатовПодразделенияЦФО.Агрегат = &Агрегат";
			ЗапросПоСА.УстановитьПараметр("Агрегат", Стр.Субконто1);
			ВыборкаПоСА = ЗапросПоСА.Выполнить().Выбрать();
			Если ВыборкаПоСА.Следующий() Тогда
				НайденСтрокиНаСчетах = ТЗОстаткиНаСчетах.НайтиСтроки(Новый Структура("Субконто1", Стр.Субконто1)); 
				Для Каждого ВыборкаОстаткиНаСчетах Из НайденСтрокиНаСчетах Цикл
					//Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 ИЛИ ВыборкаОстаткиНаСчетах.СуммаОстаток <> 0 Тогда
					Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 И Стр.КоличествоОстаток > 0 тогда
						//Если Стр.КоличествоОстаток > 0 тогда
						Сумма = ВыборкаОстаткиНаСчетах.СуммаОборот;//+ВыборкаОстаткиНаСчетах.СуммаОстаток;
						ДобавитьСтроки(Объект, ТекСчет1341, ВыборкаОстаткиНаСчетах, ВыборкаОстаткиНаСчетах, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, ВыборкаОстаткиНаСчетах.КоличествоОстаток, "1");
					Иначе
						Если ВыборкаОстаткиНаСчетах.СуммаОборот <> 0 тогда 
							Сумма = ВыборкаОстаткиНаСчетах.СуммаОборот;
							ДобавитьСтроки(Объект, ТекСчетЗакрытия7010, ВыборкаОстаткиНаСчетах, ВыборкаОстаткиНаСчетах, ТекСчетЗакрытия8110, ВыборкаОстаткиНаСчетах, Сумма, 0, "1");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//Иначе
			//	
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;  

	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтроки(Объект, ТекСчетДт, Стр, СтрР, ТекСчетЗакрытия, ВыборкаОстаткиНаСчетах, Сумма, Количество, Сод)
	
	новСтр             = Объект.Данные.Добавить();
	новСтр.СчетДт      = ТекСчетДт;
	
	новСтр.СубконтоДт1 = ?(Сод = "1", СтрР.Субконто1, СтрР.Агрегат);                      
	новСтр.СубконтоДт2 = Стр.Субконто2;
	новСтр.СубконтоДт3 = Стр.Субконто3;
	
	Для каждого субКт Из ТекСчетЗакрытия.ВидыСубконто Цикл
		найдСтрСубДт = ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто");
		Если найдСтрСубДт <> Неопределено И Строка(ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто").ВидСубконто) = "Статьи затрат" Тогда
			НС = найдСтрСубДт.НомерСтроки;
			новСтр["СубконтоДт" + НС] = ВыборкаОстаткиНаСчетах["Субконто" + субКт.НомерСтроки];
		КонецЕсли;
		Если найдСтрСубДт <> Неопределено И Строка(ТекСчетДт.ВидыСубконто.Найти(субКт.ВидСубконто, "ВидСубконто").ВидСубконто) = "Подразделения" Тогда
			НС = найдСтрСубДт.НомерСтроки;
			новСтр["СубконтоДт" + НС] = ВыборкаОстаткиНаСчетах["Субконто" + субКт.НомерСтроки];
		КонецЕсли;
	КонецЦикла;
	
	новСтр.СчетКт      = ТекСчетЗакрытия;
	новСтр.СубконтоКт1 = ВыборкаОстаткиНаСчетах.Субконто1;
	новСтр.СубконтоКт2 = ВыборкаОстаткиНаСчетах.Субконто2;
	новСтр.СубконтоКт3 = ВыборкаОстаткиНаСчетах.Субконто3;   
	
	новСтр.Количество = Количество;
	
	новСтр.Сумма       = Сумма;
	новСтр.Содержание       = Сод;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	
	Отказ = Ложь;
	
	Если Объект.Проведен Тогда
		Сообщить("Отмените проведение!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.Данные.Количество() <> 0 Тогда
		Если Вопрос("Очистить таблицу и заполнить заново?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьРаспределениеКосвенныхЗатрат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры



