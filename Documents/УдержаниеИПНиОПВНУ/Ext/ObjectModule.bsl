#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ФизическиеЛица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ЭтотОбъект.УдержанныйИПН.Количество() > 0 
		ИЛИ ЭтотОбъект.УдержанныйОПВ.Количество() > 0 
		ИЛИ ЭтотОбъект.УдержанныеВОСМС.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("УдержанныйИПН");
		МассивНепроверяемыхРеквизитов.Добавить("УдержанныйОПВ");	
		МассивНепроверяемыхРеквизитов.Добавить("УдержанныеВОСМС");	
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(УдержанныйИПН);
	МассивТЧ.Добавить(УдержанныйОПВ);
	МассивТЧ.Добавить(УдержанныеВОСМС);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.УдержаниеИПНиОПВНУ.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];

	ТаблицаУдержанныйИПН = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.УдержанныйИПН,
																						Движения.ИПНРасчетыСБюджетом.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаУдержанныйИПН,   	 "ИПНРасчетыСБюджетом",				Движения, Отказ);
	
	ТаблицаУдержанныйОПВ = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.УдержанныйОПВ,
																						Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаУдержанныйОПВ,   	 "ОПВПодлежитПеречислениюВФонды",	Движения, Отказ);
	
	ТаблицаУдержанныеВОСМС = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.УдержанныеВОСМС,
																						Движения.ВОСМСПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаУдержанныеВОСМС,  	 "ВОСМСПодлежитПеречислениюВФонды",	Движения, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли

