&НаКлиенте
Перем СинхронизируемыеТабличныеЧасти;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
    ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""удержание ипн, опв и восмс по налоговому учету"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Объект.Дата);
	
	Если Формат(Объект.Дата, "ДФ = 'дд.ММ.гг'") < Формат(ПоследнийРабочийДеньМесяца, "ДФ = 'дд.ММ.гг'") 
		И Месяц(Объект.Дата) = Месяц(Объект.ПериодРегистрации) Тогда
		
		ТекстВопроса = НСтр("ru = 'Расчет удержания ИПН и ОПВ по налоговому учету производится не последним рабочим днем месяца. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьДату", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	УстановитьПризнакиРаспределения();

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма, , Истина);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	УстановитьПризнакиРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УдержанныйИПН

&НаКлиенте
Процедура УдержанныйИПНПриАктивизацииСтроки(Элемент)
	
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.УдержанныйИПН, СинхронизируемыеТабличныеЧасти, "ФизЛицо");

КонецПроцедуры

&НаКлиенте
Процедура УдержанныйИПНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.УдержанныйИПН.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанныйИПНОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		Если Объект.УдержанныйИПН.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 					= Объект.УдержанныйИПН.Добавить();	
			НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			Если Объект.УдержанныйИПН.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
				НоваяСтрока 						= Объект.УдержанныйИПН.Добавить();	
				НоваяСтрока.ФизЛицо 				= СтрокаМассива;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержанныйИПНФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.УдержанныйИПН.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.УдержанныйИПН.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдержанныйИПНФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы    = Новый Структура;
        ПараметрыФормы.Вставить("Отбор",    Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УдержанныйОПВ

&НаКлиенте
Процедура УдержанныйОПВПриАктивизацииСтроки(Элемент)
		
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.УдержанныйОПВ, СинхронизируемыеТабличныеЧасти, "ФизЛицо");

КонецПроцедуры

&НаКлиенте
Процедура УдержанныйОПВПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.УдержанныйОПВ.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанныйОПВОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		Если Объект.УдержанныйОПВ.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 					= Объект.УдержанныйОПВ.Добавить();	
			НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			Если Объект.УдержанныйОПВ.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
				НоваяСтрока 						= Объект.УдержанныйОПВ.Добавить();	
				НоваяСтрока.ФизЛицо 				= СтрокаМассива;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержанныйОПВФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Элементы.УдержанныйОПВ.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.УдержанныйОПВ.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковОПВСписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УдержанныеВОСМС

&НаКлиенте
Процедура УдержанныеВОСМСПриАктивизацииСтроки(Элемент)
	
	СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы.УдержанныеВОСМС, СинхронизируемыеТабличныеЧасти, "ФизЛицо");

КонецПроцедуры

&НаКлиенте
Процедура УдержанныеВОСМСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.УдержанныеВОСМС.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанныеВОСМСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
		Если Объект.УдержанныеВОСМС.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока 					= Объект.УдержанныеВОСМС.Добавить();	
			НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			Если Объект.УдержанныеВОСМС.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
				НоваяСтрока 						= Объект.УдержанныеВОСМС.Добавить();	
				НоваяСтрока.ФизЛицо 				= СтрокаМассива;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержанныеВОСМСФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.УдержанныеВОСМС.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.УдержанныеВОСМС.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдержанныеВОСМСФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы    = Новый Структура;
        ПараметрыФормы.Вставить("Отбор",    Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Автозаполнение(Команда)
	
	Если Объект.УдержанныйИПН.Количество() > 0
			Или Объект.УдержанныйОПВ.Количество() > 0 
			Или Объект.УдержанныеВОСМС.Количество() > 0 ИЛИ Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		АвтозаполнениеНаСервере();
		Если Объект.УдержанныйИПН.Количество() = 0
				И Объект.УдержанныйОПВ.Количество() = 0 
				И Объект.УдержанныеВОСМС.Количество() = 0  Тогда
			ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличные части документа'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсе(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИПН(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьИПННаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьИПННаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОПВ(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьОПВНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьОПВНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВОСМС(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьВОСМСНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьВОСМСНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИПН(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.УдержанныйИПН, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборОПВ(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.УдержанныйОПВ, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодборВОСМС(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.УдержанныеВОСМС, , , ,,Режим)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиРаспределения()
	
	СтруктураПризнаковРаспределения = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Объект.Организация, Объект.ПериодРегистрации);
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределения.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределения.РаспределятьНалогиПоПодразделениямОрганизаций;
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьПризнакиРаспределения();
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект,,,, Параметры.ЗначениеКопирования);
		КонецЕсли;
		Объект.Дата = КонецМесяца(Объект.Дата);
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;

	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	УстановитьФункциональныеОпцииФормы();
	УстановитьПризнакиРаспределения();

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
		УстановитьПризнакиРаспределения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.УдержанныйИПН.Очистить();
	Объект.УдержанныйОПВ.Очистить();
	Объект.УдержанныеВОСМС.Очистить();

КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЗаписатьОтменивПроведение();
	
	Объект.УдержанныйИПН.Очистить();
	Объект.УдержанныйОПВ.Очистить();
	Объект.УдержанныеВОСМС.Очистить();
	
	АвтозаполнениеНаСервере();
	Если Объект.УдержанныйИПН.Количество() = 0
			И Объект.УдержанныйОПВ.Количество() = 0
			И Объект.УдержанныеВОСМС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличные части документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПроведениеИМодифицированность(ПараметрыРасчета)
	
	ОбъектТребуетЗапись = Ложь;
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		ОбъектТребуетЗапись = Истина;
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после его записи. Записать?'");
		ОбъектТребуетЗапись = Истина;
	КонецЕсли;
	
	Если ОбъектТребуетЗапись Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьПередРасчетом", ЭтотОбъект, ПараметрыРасчета);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	Возврат НЕ ОбъектТребуетЗапись;		

КонецФункции

&НаКлиенте  
Процедура ПослеЗакрытияВопросаЗаписатьПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		Выполнить(Параметры.КомандаРасчета);
		
	#Иначе
		
		ВыполнитьНаСервере(Параметры.КомандаРасчета);
				
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере(КомандаРасчета) 
	
	Выполнить(КомандаРасчета);
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеНаСервере() 
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""удержание ипн, опв и восмс по налоговому учету"" (заполнение)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.УдержаниеИПНиОПВНУ.Автозаполнение(Объект);

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.УдержаниеИПНиОПВНУ.Рассчитать(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры    

&НаСервере
Процедура РассчитатьИПННаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет ипн)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.УдержаниеИПНиОПВНУ.РассчитатьИПН(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры  

&НаСервере
Процедура РассчитатьОПВНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет опв)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.УдержаниеИПНиОПВНУ.РассчитатьОПВ(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры  

&НаСервере
Процедура РассчитатьВОСМСНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет восмс)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.УдержаниеИПНиОПВНУ.РассчитатьВОСМС(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьДату(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Дата = ТекущаяДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
    Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции

&НаКлиенте
Процедура СписокСотрудниковИПНСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.УдержанныйИПН.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковОПВСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.УдержанныйОПВ.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковВОСМССписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.УдержанныеВОСМС.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ЭтаФорма, ВыбранныйЭлемент.Значение, Истина);
		Возврат;	
	КонецЕсли;
	
	Объект.ПериодРегистрации = ВыбранныйЭлемент.Значение; 
	МесяцНачисленияСтрокой   = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	Модифицированность = Истина;
	УстановитьПризнакиРаспределения();

КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			МассивСтрок = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		Исключение
			МассивСтрок = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		КонецПопытки;

		Если МассивСтрок.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура УдержанныйОПВФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковУдержанныйОПВЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы    = Новый Структура;
        ПараметрыФормы.Вставить("Отбор",    Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковУдержанныйОПВЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковУдержанныйОПВЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.УдержанныйОПВ.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОтменивПроведение() 
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

СинхронизируемыеТабличныеЧасти = Новый Соответствие;
СинхронизируемыеТабличныеЧасти["УдержанныйИПН"] = Ложь;
СинхронизируемыеТабличныеЧасти["УдержанныйОПВ"] = Ложь;
СинхронизируемыеТабличныеЧасти["УдержанныеВОСМС"] = Ложь;
