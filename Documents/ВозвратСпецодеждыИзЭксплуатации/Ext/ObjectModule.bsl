#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель", "СкладОтправитель");
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеПолучатель", "СкладПолучатель");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПолучитьФункциональнуюОпцию("ПлательщикКПН", Новый Структура("Организация, Период", Организация, Дата));
	
	//Пока ПроверяемыеРеквизиты.Количество()>1 Цикл
	//	ПроверяемыеРеквизиты.Удалить(1);
	//КонецЦикла; 
	
	//Учет ВР всегда идет только балансовым методом
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	// Проверка заполнения табличной части "Товары"
	//Если НЕ УчитыватьКПН ИЛИ (НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ НЕ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НовыйСчетУчетаНУ"); 
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Коэффициент"); 
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ"); 
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НовыйСчетУчетаБУ"); 
	//КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВозвратСпецодеждыИзЭксплуатации.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
			ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
			
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
			ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
			
	СформироватьЗаписиПоСпецОдежде(Отказ);
	
	СформироватьДвижениеБухгалтерскийУчет();
	
КонецПроцедуры

Процедура СформироватьЗаписиПоСпецОдежде(Отказ)
	
	ТаблицаДвижений = Движения.СпецОдеждаБУ.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаДвижений2 = Движения.СрокСлужбыСО.Выгрузить();
	ТаблицаДвижений2.Очистить();
	Движения.ВыданнаяСО.Очистить();
	Для каждого текСтрока из Товары цикл
		Движение 					= ТаблицаДвижений.Добавить();
		Движение.Номенклатура 		= текСтрока.Номенклатура;
		Движение.Склад 				= СкладПолучатель;
		Движение.Мол 				= МолПолучатель;
		Движение.Количество			= текстрока.Количество;
		
		ДанныеСО=ПолучитьДанныеПоСрокуСО(текСтрока.Номенклатура);
		Движение2 					= ТаблицаДвижений2.Добавить();
		Движение2.Номенклатура 		= текСтрока.Номенклатура;
		Движение2.СкладПолучатель 	= СкладОтправитель;
		Движение2.МОЛПолучатель 	= МОЛОтправитель;
		Движение2.Количество		= текстрока.Количество;
		если  ДанныеСО<>"" тогда
			Движение2.СрокСлужбы 		= ДанныеСО.СрокСлужбы;
			Движение2.ДатаОкончания 	= ДанныеСО.ДатаОкончания;
			Движение2.ДатаВыдачи 		= ДанныеСО.ДатаВыдачи;
		Конецесли;

		Движение = Движения.ВыданнаяСО.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, текСтрока, "Номенклатура,Количество");
		Движение.Период 			= Дата;
		Движение.Склад 				= СкладОтправитель;
		Движение.МОЛ 				= МОЛОтправитель;
		Движение.СнятоСУчета 		= Истина;
		Движение.Возвращено 		= Истина;
		Если ДанныеСО<>"" Тогда
			Движение.ДатаВыдачи 		= ДанныеСО.ДатаВыдачи;
			Движение.СрокСлужбы 		= ДанныеСО.СрокСлужбы;
			Движение.ДатаОкончания 		= ДанныеСО.ДатаОкончания;
		КонецЕсли;
	Конеццикла;
	Движения.СпецОдеждаБУ.мПериод          = Дата;
	Движения.СпецОдеждаБУ.мТаблицаДвижений = ТаблицаДвижений;
	Движения.СпецОдеждаБУ.ВыполнитьПриход();
	Движения.СрокСлужбыСО.мПериод          = Дата;
	Движения.СрокСлужбыСО.мТаблицаДвижений = ТаблицаДвижений2;
	Движения.СрокСлужбыСО.ВыполнитьРасход();
	
КонецПроцедуры

Функция ПолучитьДанныеПоСрокуСО(товар)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СрокСлужбыСООстатки.Номенклатура,
	             |	СрокСлужбыСООстатки.ДатаОкончания КАК ДатаОкончания,
	             |	СрокСлужбыСООстатки.СрокСлужбы,
	             |	СрокСлужбыСООстатки.ДатаВыдачи,
	             |	СрокСлужбыСООстатки.СкладПолучатель,
	             |	СрокСлужбыСООстатки.МОЛПолучатель,
	             |	СрокСлужбыСООстатки.КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.СрокСлужбыСО.Остатки(
	             |			&НаДату,
	             |			Номенклатура = &Номенклатура
	             |				И СкладПолучатель = &СкладПолучатель) КАК СрокСлужбыСООстатки
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ДатаОкончания";
	Запрос.УстановитьПараметр("НаДату",Дата);
	Запрос.УстановитьПараметр("Номенклатура",товар);
	Запрос.УстановитьПараметр("СкладПолучатель",СкладОтправитель);
	выборка = Запрос.Выполнить().Выбрать();
	если выборка.Количество()=0 тогда 
		возврат "";
	Иначе
		выборка.Следующий();
		возврат выборка;
	Конецесли;
Конецфункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижениеБухгалтерскийУчет()
	
	Для каждого текСтрока Из Товары Цикл
		Проводка=Движения.Типовой.Добавить();
		Проводка.Организация=Организация;
		Проводка.Период=Дата;
		Проводка.СчетКт=ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
		Проводка.СубконтоКт.Номенклатура=текСтрока.Номенклатура;
		Проводка.СубконтоКт.Склады=СкладОтправитель;
		Проводка.СубконтоКт.РаботникиОрганизаций=МОЛОтправитель;
		Проводка.КоличествоКт=текСтрока.Количество;
		Проводка.СчетДт=ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
		Проводка.СубконтоДт.Номенклатура=текСтрока.Номенклатура;
		Проводка.СубконтоДт.Склады=СкладПолучатель;
		Проводка.СубконтоДт.РаботникиОрганизаций=МОЛПолучатель;
		Проводка.КоличествоДт=текСтрока.Количество;
		Проводка.Содержание="Возврат СО";
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецЕсли


