
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
	КонецЕсли;
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	СформироватьСписокВыбораПризнакаПроисхождения();
	
	// Установить условное оформление
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьСчетовУчета();
	
	УправлениеФормой(ЭтаФорма);
	
	ЭСФСерверПереопределяемый.ДокументыИмпортаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	НалоговыйПериодСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.НалоговыйПериод);

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// При записи документа изменяются элементы справочника НомераГТД.
	// Если не выполнить метод ниже, то в форме документа не изменятся наименования номеров ГТД.
	ОповеститьОбИзменении(Тип("СправочникСсылка.НомераГТД"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	БылЗаданВопрос = Ложь;
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		
		Если Модифицированность = Истина Тогда
			
			НомераСтрок = ПередЗаписьюНаСервере(Объект.Товары,Объект.Ссылка);
			
			Если НомераСтрок.Количество() <> 0 Тогда
				БылЗаданВопрос = Истина;
				Отказ = Истина;
				НомераСтрокСтрокой = "";
				Для каждого Элемент Из НомераСтрок Цикл
					НомераСтрокСтрокой = НомераСтрокСтрокой + Элемент.Представление + "; ";
				КонецЦикла;
				НомераСтрокСтрокой = Лев(НомераСтрокСтрокой, СтрДлина(НомераСтрокСтрокой)- 2);
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыВопроса = Новый Структура;
				ПараметрыВопроса.Вставить("ПараметрыЗаписи",ПараметрыЗаписи);
				ПараметрыВопроса.Вставить("НомераСтрок",НомераСтрок);
				ТекстВопроса = НСтр("ru='Изменилось ключевое поле ""Номер строки заявления"" для источников происхождения указанных в строках: ""%НомераСтрок%"" табличной части ""ТМЗ"".
				|Очистить источники происхождения данных строк?
				|Да  - при проведении будут созданы новые источники происхождения
				|Нет - при проведении будут обновлены существующие источники происхождения'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса,"%НомераСтрок%",НомераСтрокСтрокой);
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНомераСтрокПриИзменении", ЭтотОбъект, ПараметрыВопроса);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") 
		И Не БылЗаданВопрос Тогда
		КлючеваяОперация = "Документ ""заявление о ввозе товаров и уплате косвенных налогов"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(
		Объект.Дата, ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	СтруктураРезультатаВыполнения = Новый Структура;
	
	Если ТекущийДоговорКонтрагента <> Объект.ДоговорКонтрагента
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Если договор изменился и он не пустой, то проверим соответствие валюты договора валюте документа
		Если ТекущаяВалютаВзаиморасчетов <> ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов") Тогда
			СтруктураРезультатаВыполнения.Вставить("ОчиститьТабличныеЧасти", Истина);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьТабличныеЧасти", ЭтотОбъект, СтруктураРезультатаВыполнения);
			ТекстВопроса = НСтр("ru = 'Валюта договора отличается от валюты документа. Очистить табличные части документа?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПослеЗакрытияВопросаОчиститьТабличныеЧасти(КодВозвратаДиалога.Да, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ТолькоПросмотрИзменен = Ложь;
	Если Элемент.ТолькоПросмотр И НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ТолькоПросмотрИзменен = Истина;
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , , , ПараметрыОткрытияФормыЦеныИВалюта());
	
	Если ТолькоПросмотрИзменен Тогда
		ЭтотОбъект.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаЗатрат(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаЗатрат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаЗатратНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтранаИмпортаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияОкнаСтраныИмпорта", ЭтотОбъект);
	
	СтранаРезидентства = ПолучитьЗначениеРеквизита(Объект.Контрагент, "СтранаРезидентства");
	Если ЗначениеЗаполнено(СтранаРезидентства) Тогда
		ОткрытьФорму("Справочник.КлассификаторСтранМира.ФормаОбъекта", Новый Структура("Ключ", СтранаРезидентства), ЭтаФорма,,,, Оповещение)
	Иначе 
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", Объект.Контрагент), ЭтаФорма,,,, Оповещение)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(НалоговыйПериодСтрокой, Объект.НалоговыйПериод);
	НалоговыйПериодСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.НалоговыйПериод = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
		Объект.НалоговыйПериод = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Объект.НалоговыйПериод = ДобавитьМесяц(Объект.НалоговыйПериод, Направление);
	НалоговыйПериодСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.НалоговыйПериод);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
		Объект.НалоговыйПериод = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если Текст = "" Тогда
		Ожидание = 0;
		НачалоВыбораИзСпискаПредставленияНалоговогоПериода(Элемент, Объект.НалоговыйПериод, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" И ДанныеВыбора = Неопределено Тогда
		Объект.НалоговыйПериод = Дата(1, 1, 1);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Товары"

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НоваяСтрока Тогда
		ТекущиеДанные.НомерГТД = Неопределено;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда 
		
		ТекущиеДанные.Коэффициент 	        = 1;
		ТекущиеДанные.Валюта 		        = Объект.ВалютаДокумента;
		ТекущиеДанные.КурсВалюты 			= Объект.КурсВзаиморасчетов;
				
		ДанныеСтрокиТаблицы = Новый Структура("НДСВидОперацииРеализации, ВидНДС, НДСВидОборота, НДСВидПоступления, СтранаПроисхождения");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, "Товары", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
		ЗаполнитьСтрануПроисхождения(Объект.Контрагент, ДанныеСтрокиТаблицы);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрануПроисхождения(Контрагент, СтрокаТаблицы)
	Если Не СтрокаТаблицы.Свойство("СтранаПроисхождения") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.СтранаПроисхождения = Контрагент.СтранаРезидентства;	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, НаименованиеТовара, КодТНВЭД, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Валюта, КурсВалюты, Сумма, ОборотПоРеализации, СуммаДополнительныхРасходов, СтавкаНДС, СуммаНДС, СчетУчетаНДС, СчетУчетаНДСКВозмещению");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Дата, Организация, Ссылка, Контрагент, ДоговорКонтрагента, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораКодаТНВЭД("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОснованиеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки = Новый Структура("Валюта, КурсВалюты, ДокументОснование, НомерТранспортногоДокумента, ДатаТранспортногоДокумента, ДатаПринятияНаУчет");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("ВалютаДокумента, КурсВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ЗаполнитьРеквизитыДокументаОснованияВСтрокеНаСервере(ПараметрыОбъекта, ДанныеСтроки, СтрокаТабличнойЧасти.ДокументОснование);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);    

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКурсВалютыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);

	СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.КурсВалюты;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
	СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.КурсВалюты;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДополнительныхРасходовПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("НДСВидОперацииРеализации, ВидНДС, НДСВидОборота, НДСВидПоступления");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);

	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.ВидНДС",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, "Товары", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПризнакПроисхожденияПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ОС"

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока и НЕ Копирование Тогда
		
		СтрокаТабличнойЧасти 			= Элементы.ОС.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта 	= Объект.ВалютаДокумента;
		СтрокаТабличнойЧасти.КурсВалюты = Объект.КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.Количество = 1;
		
		ДанныеСтрокиТаблицы = Новый Структура("НДСВидОперацииРеализации, ВидНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);

		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			СтрокаТабличнойЧасти,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, "ОС", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, КодТНВЭД, ЕдиницаИзмерения, Количество, Валюта, КурсВалюты, Сумма, ОборотПоРеализации, СуммаДополнительныхРасходов, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Дата, Организация, Ссылка, Контрагент, ДоговорКонтрагента, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
	СтрокаТабличнойЧасти.Количество = ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		
КонецПроцедуры

&НаКлиенте
Процедура ОСКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораКодаТНВЭД("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСДокументОснованиеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	ДанныеСтроки = Новый Структура("Валюта, КурсВалюты, ДокументОснование, НомерТранспортногоДокумента, ДатаТранспортногоДокумента, ДатаПринятияНаУчет");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("ВалютаДокумента, КурсВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ЗаполнитьРеквизитыДокументаОснованияВСтрокеНаСервере(ПараметрыОбъекта, ДанныеСтроки, СтрокаТабличнойЧасти.ДокументОснование);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);    
	
КонецПроцедуры

&НаКлиенте
Процедура ОСКурсВалютыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);

	СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.КурсВалюты;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаДополнительныхРасходовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВидНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("НДСВидОперацииРеализации, ВидНДС, НДСВидОборота, НДСВидПоступления");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);

	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ВидНДС",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ПараметрыОбъекта, ДанныеСтрокиТаблицы, "ОС", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТовары(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюОС(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", НСтр("ru = 'Товары'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru = 'ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияДляВсехСтрок(Команда)
	
	КоличествоСтрок = 0;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПризнакПроисхождения) Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		//задать вопрос
		ТекстВопроса = НСтр("ru = 'Заполненные признаки происхождения будут очищены перед заполнением. Продолжить заполнение?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеПризнакаВоВсехСтроках", ЭтотОбъект, Новый Структура("ТабличнаяЧасть", "Товары"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		//сразу выполняем заполнение
		ЗаполнитьПризнакПроисхожденияДляСтрокТЧ("Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияДляПустыхСтрок(Команда)
	ЗаполнитьПризнакПроисхожденияДляСтрокТЧ("Товары", Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр           = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок      = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок     = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;

КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Товары.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0; 
	
	ПерезаполнитьСчетаУчета = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ЗатратНДСБУ");     // СчетЗатратНДСБУ
	СписокАналитикиСчетов.Добавить("ЗатратНДСНУ");     // СчетЗатратНДСНУ
	
	СтруктураРеквизитовШапки = Новый Структура;
	СтруктураРеквизитовШапки.Вставить("Объект", Объект);
	СтруктураРеквизитовШапки.Вставить("СписокАналитикиСчетовШапки", СписокАналитикиСчетов);
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , , СтруктураРеквизитовШапки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета = Неопределено)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПричиныИзмененияСчетовУчета = Неопределено Тогда
		ПричиныИзмененияСчетовУчета = Новый Массив;
	КонецЕсли;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	//Статья 228. Плательщики 
	// 1. Плательщиками налога на добавленную стоимость являются:
	// ... 2) лица, импортирующие товары на территорию Республики Казахстан в соответствии с таможенным законодательством Республики Казахстан.
	// Т.е. вне зависимости от учетной политики при импорте товара должен быть начислен НДС
	Объект.УчитыватьНДС 		= Истина; 
	
	// поскольку в документе не доступны реквизиты управления НДС - очистим их (чтобы при вводе следующих документов на основании Заявления  их значение не искажало в дальнейшем расчеты по НДС)
	Объект.НДСВключенВСтоимость = Ложь;		
	Объект.СуммаВключаетНДС		= Ложь;						
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		
		Если ТекущаяВалютаВзаиморасчетов <> ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов") Тогда
			СтруктураРезультатаВыполнения.Вставить("ОчиститьТабличныеЧасти", Истина);
		КонецЕсли;
		
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   			= (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость 			= НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.СчетаУчетаЗатрат.Видимость					= Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ТоварыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	Элементы.ТоварыПризнакПроисхождения.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	Элементы.ТоварыГруппаЗаполнитьПризнак.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
		
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	УстановитьНадписьСтраныИмпорта(Объект.Контрагент, Форма.СтранаИмпорта);
	
	СформироватьЗаголовокСчетаУчетаЗатрат(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	Форма.ИтогиВсегоОборотПоРеализации = Объект.Товары.Итог("ОборотПоРеализации")  + Объект.ОС.Итог("ОборотПоРеализации");
	Форма.ИтогиВсегоСумма = Объект.Товары.Итог("Сумма") + Объект.ОС.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	// Запомним значения текущих реквизитов
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ТекущаяВалютаВзаиморасчетов = ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если Параметры.Ключ.Пустая() Тогда

		//Статья 228. Плательщики 
		// 1. Плательщиками налога на добавленную стоимость являются:
		// ... 2) лица, импортирующие товары на территорию Республики Казахстан в соответствии с таможенным законодательством Республики Казахстан.
		// Т.е. вне зависимости от учетной политики при импорте товара должен быть начислен НДС
	    Объект.УчитыватьНДС 		= Истина; 
		
		// поскольку в документе не доступны реквизиты управления НДС - очистим их (чтобы при вводе следующих документов на основании Заявления  их значение не искажало в дальнейшем расчеты по НДС)
		Объект.НДСВключенВСтоимость = Ложь;		
		Объект.СуммаВключаетНДС		= Ложь;						
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;
	
	НалоговыйПериодСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.НалоговыйПериод);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();

	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ 				= НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонок "Всего" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл		
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.Сумма * СтрокаТаблицы.КурсВалюты;
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.Сумма * СтрокаТаблицы.КурсВалюты;
	КонецЦикла;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура УстановитьНадписьСтраныИмпорта(Контрагент, РеквизитСтранаИмпорта)
	
	ТекстНадписи = "";
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстНадписи = НСтр("ru = 'Укажите поставщика товаров.'");
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка,
		               |	Контрагенты.СтранаРезидентства КАК СтранаРезидентства,
		               |	Контрагенты.СтранаРезидентства.Код КАК КодСтраныРезидентства,
		               |	Контрагенты.СтранаРезидентства.УчастникТаможенногоСоюза КАК СтранаУчастникТаможенногоСоюза
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Ссылка = &Контрагент";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.СтранаРезидентства) Тогда
			ТекстНадписи = СокрЛП(Выборка.КодСтраныРезидентства) + ", " + Выборка.СтранаРезидентства + ", ";
			Если ЗначениеЗаполнено(Выборка.СтранаУчастникТаможенногоСоюза) Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'участник Таможенного союза.'");
			Иначе
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'для страны не указано участие в Таможенном союзе.'");
			КонецЕсли;
		Иначе
			ТекстНадписи = НСтр("ru = 'Укажите страну резидентства в карточке контрагента.'");
		КонецЕсли;
	КонецЕсли;
	
	РеквизитСтранаИмпорта = ТекстНадписи;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);	
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Ложь, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
	СтруктураВидовДоговоров = Новый Массив;
	СтруктураВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	СтруктураДоступныхВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СтруктураВидовДоговоров);

    Возврат СтруктураДоступныхВидовДоговоров;

КонецФункции

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	СтруктураРезультатаВыполнения = Новый Структура;
	
	Если ТекущаяВалютаВзаиморасчетов <> ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов") Тогда
		СтруктураРезультатаВыполнения.Вставить("ОчиститьТабличныеЧасти", Истина);
	КонецЕсли;
		
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения.Свойство("ОчиститьТабличныеЧасти") 
		И СтруктураРезультатаВыполнения.ОчиститьТабличныеЧасти Тогда
		Объект.Товары.Очистить();
		Объект.ОС.Очистить();
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, "Товары", СтруктураРезультатаВыполнения);
		
	ТекущаяВалютаВзаиморасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТЧ, СчетаУчетаКЗаполнению)		
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		ИмяТЧ,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
Конецпроцедуры	

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ОграничениеВидимости   = Новый Соответствие;
	ОграничениеВидимости.Вставить("Видимость", Ложь);
	
	ОграничениеДоступности = Новый Соответствие;
	ОграничениеДоступности.Вставить("Доступность", Ложь);
	
	НедоступныеРеквизиты   = Новый Структура;
	НедоступныеРеквизиты.Вставить("УчитыватьНДС"                , ОграничениеДоступности);
	НедоступныеРеквизиты.Вставить("СуммаВключаетНДС"            , ОграничениеДоступности);
	НедоступныеРеквизиты.Вставить("НДСВключенВСтоимость"        , ОграничениеДоступности);
	НедоступныеРеквизиты.Вставить("КурсВзаиморасчетов"          , ОграничениеДоступности);
	НедоступныеРеквизиты.Вставить("КратностьВзаиморасчетов"     , ОграничениеДоступности);
	НедоступныеРеквизиты.Вставить("УстановитьКурсВзаиморасчетов", ОграничениеВидимости);
	
	ПараметрыОткрытия = Новый Структура("НедоступныеРеквизиты, ЕстьЗаполненныеТабличныеЧасти", НедоступныеРеквизиты, Ложь);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаСтраныИмпорта(Результат, Параметры) Экспорт 
	
	УстановитьНадписьСтраныИмпорта(Объект.Контрагент, ЭтаФорма.СтранаИмпорта);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчетаКЗаполнению)
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, "Товары", МетаданныеДокумента);
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", МетаданныеДокумента);
	
	ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура, "КодТНВЭД, НаименованиеПолное, Наименование");
	
	СтрокаТабличнойЧасти.КодТНВЭД 			= ЗначениеРеквизитаНоменклатура.КодТНВЭД;
	СтрокаТабличнойЧасти.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
														, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
														, ЗначениеРеквизитаНоменклатура.Наименование);
														
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
	
	ДанныеОбъекта.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, , Истина);	
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервере
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчетаКЗаполнению)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Основноесредство) Тогда																		
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		СтрокаТабличнойЧасти.Сумма     = 0;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ЗначениеОборотПоРеализации", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта,, Истина);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.КурсВалюты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойчасти, ВалютаРегламентированногоУчета)
	
	ОборотПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Валюта, ВалютаРегламентированногоУчета, СтрокаТабличнойЧасти.КурсВалюты, 1);
	СтрокаТабличнойЧасти.ОборотПоРеализации = ОборотПоРеализации + СтрокаТабличнойЧасти.СуммаДополнительныхРасходов;      
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКодаТНВЭД(ИмяТабличнойЧасти);
	
	ТекущееЗначение = Элементы[ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипКодаГСВС", ПредопределенноеЗначение("Перечисление.ТипыКодовГСВС.ТНВЭД"));
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ТекущийКодТНВЭД"	  , ?(НЕ ЗначениеЗаполнено(ТекущееЗначение), Неопределено, СокрЛП(ТекущееЗначение)));
	
	ДопПараметры = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияОкнаВыбораКодаТНВЭД", ЭтаФорма, ДопПараметры);

	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Истина,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаВыбораКодаТНВЭД(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД = Результат.КодСтроки;
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.НоменклатураГСВС") Тогда
		Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД = ПолучитьКодТНВЭД(Результат);
	Иначе
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	Если ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда

		Настройки = Новый НастройкиКомпоновкиДанных;

		Элемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.Использование = Истина;
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		Элемент.ПравоеЗначение = НачалоМесяца(Объект.НалоговыйПериод);
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	 
		Элемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.Использование = Истина;
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		Элемент.ПравоеЗначение = КонецМесяца(Объект.НалоговыйПериод);
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;

		СтруктураПараметров.Вставить("ФиксированныеНастройки", Настройки);
	
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуга"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
	Если ИмяТаблицы = "Товары" Тогда
		СписокЗапросов.Добавить("ЦеныНоменклатуры", НСтр("ru = 'Цены номенклатуры'"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС");
	
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;

	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
			РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);	

		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;        

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			МетаданныеОбъекта = Объект.Ссылка.Метаданные();
			
			СтрокаТабличнойЧасти.Коэффициент = 1;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура, "КодТНВЭД, НаименованиеПолное, Наименование");
				
				СтрокаТабличнойЧасти.КодТНВЭД 			= ЗначениеРеквизитаНоменклатура.КодТНВЭД;
				СтрокаТабличнойЧасти.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
																	, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
																	, ЗначениеРеквизитаНоменклатура.Наименование);
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;  
			
			Если ЭтоВставкаИзБуфера Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти); 
			КонецЕсли;
			РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
			РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов);
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетов Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаТовары",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"Товары",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);
			
			СтрокаТабличнойЧасти.СтавкаНДС  = СтавкаНДС;
			СтрокаТабличнойЧасти.Количество = 1;
			СтрокаТабличнойЧасти.Валюта     = Объект.ВалютаДокумента;
			СтрокаТабличнойЧасти.КурсВалюты = Объект.КурсВзаиморасчетов;
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, "ОС", Объект, Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов);
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетов Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаОС",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"ОС",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ЗаполнитьТабличнуюЧастьПоПоступлению(ВыбранноеЗначение, ТабличнаяЧасть, Объект);
	
	Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда

		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаОС",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"ОС",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;

		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаТовары",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"Товары",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	СтруктураРезультатаВыполнения = Новый Структура;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьТабличныеЧасти(Результат, СтруктураРезультатаВыполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		Возврат;		
	КонецЕсли;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПараметрыОткрытияФормыЦеныИВалюта());
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ЗаполнитьПоДокументуПоступления(Объект, ДокументОснование);
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда

			Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
				ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
					"НоваяСтрокаОС",
					Объект,
					СтрокаТабличнойЧасти);
				Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
					Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
					ПараметрыЗаполненияСчетовУчета.КЗаполнению,
					Объект,
					"ОС",
					СтрокаТабличнойЧасти);
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
			КонецЦикла;

			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
				ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
					"НоваяСтрокаТовары",
					Объект,
					СтрокаТабличнойЧасти);
				Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
					Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов,
					ПараметрыЗаполненияСчетовУчета.КЗаполнению,
					Объект,
					"Товары",
					СтрокаТабличнойЧасти);
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
			КонецЦикла;
			
		КонецЕсли;
	Иначе 
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, , , , ДокументОснование);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаОснованияВСтрокеНаСервере(ПараметрыОбъекта, ДанныеСтроки, Основание)
	
	Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ЗаполнитьРеквизитыДокументаОснованияВСтрокеТабличнойЧасти(ПараметрыОбъекта, ДанныеСтроки, Основание);
	
КонецПроцедуры

// Работа с субконто
&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ПараметрыОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);	

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконтоПоУмолчаниюНаСервере(Бух = Ложь, Нал = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСубконтоКонтрагентыДоговоры(Бух, Нал);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");	
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	СтруктураРеквизитов.Вставить("НомерСчетаФактуры");
	СтруктураРеквизитов.Вставить("СуммаДополнительныхРасходов");
	СтруктураРеквизитов.Вставить("НомерСчетаФактуры");
	СтруктураРеквизитов.Вставить("ДатаСчетаФактуры");
	СтруктураРеквизитов.Вставить("НомерТранспортногоДокумента");
	СтруктураРеквизитов.Вставить("ДатаТранспортногоДокумента");
	СтруктураРеквизитов.Вставить("ДатаПринятияНаУчет");
	СтруктураРеквизитов.Вставить("СтранаПроисхождения");
	СтруктураРеквизитов.Вставить("НомерГТД");
	СтруктураРеквизитов.Вставить("КурсВалюты");  
	
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");

	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			СтрокаТабличнойЧасти);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
		СтрокаТабличнойЧасти.КурсВалюты 	= Объект.КурсВзаиморасчетов;

	КонецЦикла;	

	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	//нужно рассчитать оборот по реализации и пересчитать сумму НДС
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		
		РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
		РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);    
		
	КонецЦикла;    
	
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);

	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	//нужно рассчитать оборот по реализации и пересчитать сумму НДС
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		
		РассчитатьОборотПоРеализацииВСтроке(СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета);
		РассчитатьСуммуРеглТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура, , Истина);    
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ТоварыНаименованиеТовараПриИзменении(Элемент)
	
	Если Объект.Проведен Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;   	
	 	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГТД", ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка"));
		МассивСтрокСПустымИсточником = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокСПустымИсточником.Количество() <> Объект.Товары.Количество() Тогда		
			НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Объект.Товары, Истина);
		КонецЕсли;  		
	КонецЕсли;
	
КонецПроцедуры

//Признак происхождения

&НаСервере
Процедура СформироватьСписокВыбораПризнакаПроисхождения()
	
	ПредставленияПризнаков = НомераГТДКлиентСервер.ПредставленияПризнаковПроисхождения();
	
	Элементы.ТоварыПризнакПроисхождения.РежимВыбораИзСписка = Истина;
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Очистить();
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("1", ПредставленияПризнаков[0]);
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("2", ПредставленияПризнаков[1]);
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("5", ПредставленияПризнаков[4]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//устанавливаем условное оформление для реквизита Признак происхождения
	Для Каждого ЭлемСЗ Из Элементы.ТоварыПризнакПроисхождения.СписокВыбора Цикл
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		// оформляемое поле
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПризнакПроисхождения.Имя);
		// отбор
		ОтборУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПризнакПроисхождения");
		ОтборУО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборУО.ПравоеЗначение = ЭлемСЗ.Значение;
		// оформление
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ЭлемСЗ.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеПризнакаВоВсехСтроках(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ТабличнаяЧасть, ЗаполнятьВсе = Истина)
	
	ЭСФСервер.ЗаполнитьПустыеПризнакиПроисхождения(Объект, ТабличнаяЧасть, ЗаполнятьВсе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНомераСтрокПриИзменении(Результат, ПараметрыВопроса) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого НомерСтроки  Из ПараметрыВопроса.НомераСтрок Цикл
			ПараметрыОтбора = Новый Структура("НомерСтроки",НомерСтроки.Значение);
			Строки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() <> 0 Тогда
				Строки[0].НомерГТД = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ЭтотОбъект.Записать(ПараметрыВопроса.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПередЗаписьюНаСервере(Знач ОбъектТовары, Знач Ссылка)
	
	Товары = ОбъектТовары.Выгрузить(,
		"НомерСтроки,Номенклатура,КодТНВЭД,НомерГТД,СтранаПроисхождения,ПризнакПроисхождения");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		МассивНомеровСтрок =  ИзмененияНомеровСтрок(Товары,Ссылка);
		
		Если МассивНомеровСтрок.Количество() = 0 Тогда
			Возврат Новый СписокЗначений;
		Иначе
			СписокЗначений = Новый СписокЗначений;
			Для Каждого Элемент Из МассивНомеровСтрок Цикл
				СписокЗначений.Добавить(Элемент,Строка(Элемент));;
			КонецЦикла;
			Возврат СписокЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый СписокЗначений;
КонецФункции

&НаСервереБезКонтекста
Функция ИзмененияНомеровСтрок(Товары,Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.КодТНВЭД,
	|	Товары.НомерГТД,
	|	Товары.СтранаПроисхождения,
	|	Товары.ПризнакПроисхождения
	|ПОМЕСТИТЬ ВТ_НовыеТовары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	(ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД)) <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СтранаПроисхождения,
	|	Товары.ПризнакПроисхождения,
	|	Товары.КодТНВЭД,
	|	Товары.Номенклатура,
	|	Товары.НомерГТД
	|ПОМЕСТИТЬ ВТ_Изменения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧТовары.НомерСтроки КАК НомерСтроки,
	|		ТЧТовары.Номенклатура КАК Номенклатура,
	|		ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	|		ТЧТовары.НомерГТД КАК НомерГТД,
	|		ТЧТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ТЧТовары.ПризнакПроисхождения КАК ПризнакПроисхождения
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ТЧТовары
	|	ГДЕ
	|		ТЧТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.НомерСтроки,
	|		Товары.Номенклатура,
	|		Товары.КодТНВЭД,
	|		Товары.НомерГТД,
	|		Товары.СтранаПроисхождения,
	|		Товары.ПризнакПроисхождения
	|	ИЗ
	|		ВТ_НовыеТовары КАК Товары) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СтранаПроисхождения,
	|	Товары.ПризнакПроисхождения,
	|	Товары.КодТНВЭД,
	|	Товары.Номенклатура,
	|	Товары.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.НомерСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НовыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_НовыеТовары КАК ВТ_НовыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Изменения КАК ВТ_Изменения
	|		ПО ВТ_НовыеТовары.Номенклатура = ВТ_Изменения.Номенклатура
	|			И ВТ_НовыеТовары.КодТНВЭД = ВТ_Изменения.КодТНВЭД
	|			И ВТ_НовыеТовары.НомерГТД = ВТ_Изменения.НомерГТД
	|			И ВТ_НовыеТовары.СтранаПроисхождения = ВТ_Изменения.СтранаПроисхождения
	|			И ВТ_НовыеТовары.ПризнакПроисхождения = ВТ_Изменения.ПризнакПроисхождения";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда
		
		Возврат Результат.ВыгрузитьКолонку("НомерСтроки");
		
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	
КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("НДСВидОборота");
	СписокСвойств.Добавить("НДСВидОперацииРеализации");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("КодТНВЭД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	СписокСвойств.Добавить("СтавкаНДС");

	Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда		
		СписокСвойств.Добавить("НаименованиеТовара");      		
		СписокСвойств.Добавить("Валюта");
		СписокСвойств.Добавить("КурсВалюты");
		СписокСвойств.Добавить("СуммаДополнительныхРасходов");
		СписокСвойств.Добавить("НомерТранспортногоДокумента");
		СписокСвойств.Добавить("ДатаТранспортногоДокумента");
		СписокСвойств.Добавить("ОборотПоРеализации");
		СписокСвойств.Добавить("НомерСчетаФактуры");
		СписокСвойств.Добавить("ДатаСчетаФактуры");
		СписокСвойств.Добавить("ДатаПринятияНаУчет");
		СписокСвойств.Добавить("ДокументОснование");
		СписокСвойств.Добавить("ВидНДС");
		СписокСвойств.Добавить("НДСВидОборота");
	КонецЕсли;
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда			
			СписокСвойств.Добавить("СчетУчетаНДС");	
			СписокСвойств.Добавить("СчетУчетаНДСКВозмещению"); 		
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
	
				
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаЗатратНаСервере()
	СформироватьЗаголовокСчетаУчетаЗатрат(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчетаЗатрат(Форма)
	
	Объект = Форма.Объект;
	ЗаголовокПоля = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчетаЗатрат(Объект);
	
	Если Объект.УчитыватьКПН Тогда
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = ЗаголовокПоля;
	Иначе
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = Лев(ЗаголовокПоля, СтрНайти(ЗаголовокПоля, ",") - 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДетализацияИмпортаЗаявление()

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаТМЗ" Тогда
		
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() > 1 Тогда
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите только один товар для детализации.'"));
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		
		СтруктураДляДетализИмпорта = Новый Структура;
		СтруктураДляДетализИмпорта.Вставить("ДокументСсылка"	, Параметры.Ключ);
		СтруктураДляДетализИмпорта.Вставить("НомерСтроки"		, НомерСтроки);
		СтруктураДляДетализИмпорта.Вставить("ДетализироватьОС"	, Ложь);
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаОС" Тогда
		
		ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() > 1 Тогда
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите только одно основное средство для детализации.'"));
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;	
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		
		СтруктураДляДетализИмпорта = Новый Структура;
		СтруктураДляДетализИмпорта.Вставить("ДокументСсылка"	, Параметры.Ключ);
		СтруктураДляДетализИмпорта.Вставить("НомерСтроки"		, НомерСтроки);
		СтруктураДляДетализИмпорта.Вставить("ДетализироватьОС"	, Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
	
	ВСКлиент.ВыполнитьКомандуСоздатьЭДВС(СтруктураДляДетализИмпорта);	

КонецПроцедуры

&НаКлиенте
Процедура ДетализацияИмпортаЗаявление(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаТМЗ" Тогда
		
		ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанныеТовары = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Нет данных для детализации.'"));
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаОС" Тогда
		
		ТекущиеДанныеОС = Элементы.ОС.ТекущиеДанные;
		Если ТекущиеДанныеОС = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Нет данных для детализации.'"));
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выделите строку товара или основного средства для детализации.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для детализации необходимо записать документ.'"));
	ИначеЕсли Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ был изменен. Для детализации необходимо записать документ.'"));
	Иначе		
		ВыполнитьДетализацияИмпортаЗаявление();
	КонецЕсли;
			
КонецПроцедуры


#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСКВозмещению");
	
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОССчетУчетаНДСКВозмещению");
	
	ЭлементыСчетов.Добавить("ГруппаЗатраты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
	КонецЕсли;
	
	// НоваяСтрокаОС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаОС") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.ВидНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОперацииРеализации");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ВидНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОперацииРеализации");
	КонецЕсли;
	
	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДСКВозмещению");
	КонецЕсли;

	// СчетЗатратНДСБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
	КонецЕсли;

	// СчетЗатратНДСНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// СубконтоЗатратНДСБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
	КонецЕсли;

	// СубконтоЗатратНДСБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
	КонецЕсли;

	// СубконтоЗатратНДСБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСКВозмещению");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДСКВозмещению");
	КонецЕсли;

	// Товары.ВидНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ВидНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;

	// ОС.ОсновноеСредство
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДСКВозмещению");
	КонецЕсли;

	// ОС.ВидНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ВидНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
		КонецЕсли;

		// СчетЗатратНДСБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
		КонецЕсли;

		// СчетЗатратНДСНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
		КонецЕсли;

		// СубконтоЗатратНДСБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоЗатратНДСБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоЗатратНДСБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
		КонецЕсли;

		// Товары.ВидНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ВидНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
		КонецЕсли;

		// ОС.ОсновноеСредство
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСКВозмещению");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

		// ОС.ВидНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ВидНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СформироватьЗаголовокСчетаУчетаЗатрат(ЭтаФорма);
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияНалоговогоПериода(Элемент, НалоговыйПериод, Форма, НачальноеЗначение = Неопределено)

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = НалоговыйПериод;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ДопПараметры = Новый Структура("Элемент, НалоговыйПериод, ЭтаФорма", Элемент, НалоговыйПериод, Форма);
	
	Форма.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации", Форма, ДопПараметры), СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(НалоговыйПериод));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.НалоговыйПериод) Тогда
		НачалоВыбораИзСпискаПредставленияНалоговогоПериода(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ДопПараметры.ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ЭтаФорма.Объект.НалоговыйПериод = ВыбранныйЭлемент.Значение; 
	ДопПараметры.ЭтаФорма.НалоговыйПериодСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	ДопПараметры.ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция ПолучитьКодТНВЭД(НомеклатураГСВС)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомеклатураГСВС, "КодГСВС");
	
КонецФункции
