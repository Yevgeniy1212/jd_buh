#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	Иначе 
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Автор) Тогда
		ЭтотОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
		НалоговыйПериод = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ УчитыватьКПН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;
	
	Если НЕ УчитыватьКПН И НЕ (ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата) 
								И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата)
								ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
	КонецЕсли;
	
	Если ЭтотОбъект.Товары.Количество() > 0 
			ИЛИ ЭтотОбъект.ОС.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата) ИЛИ НЕ УчитыватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
		
	КонецЕсли;
	
	Если НЕ НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если УчитыватьНДС Тогда
		
		Если Товары.Количество() > 0 Тогда
			ПроверитьЗаполнениеТабличнойЧастиПострочно("Товары", НСтр("ru = 'ТМЗ'"), Отказ);
		КонецЕсли;
		
		Если ОС.Количество() > 0 Тогда
			ПроверитьЗаполнениеТабличнойЧастиПострочно("ОС", НСтр("ru = 'ОС'"), Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
	
	Для Каждого СтрокаТовары Из ЭтотОбъект.Товары Цикл
		СтрокаТовары.НомерГТД = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;		
    
    РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
    
	//определим сумму документа
	СуммаДокумента  = Товары.Итог("СуммаНДС")+ ОС.Итог("СуммаНДС");
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата);
	
	Если НЕ Отказ И ВедетсяУчетПоТоварамОрганизацийБУ 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		// Признак происхождения
		ЗаполнитьПустыеПризнакиПроисхождения("Товары");
		
		НайтиСоздатьОбновитьНомераГТД();
		
	КонецЕсли;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ Отказ И ПлательщикНДС Тогда 
		ЗаполнитьПустыеВидыПоступленияНДС();
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ЭтоНовый() Тогда
			ДокументСсылка = ПолучитьСсылкуНового();
			Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
				ДокументСсылка = Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ПолучитьСсылку();
				УстановитьСсылкуНового(ДокументСсылка);
			КонецЕсли;
		Иначе
			ДокументСсылка = Ссылка;
		КонецЕсли;
		
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНДСБУ);
			
		Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчета["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоЗатратНДСБУ" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) Тогда
				ЭтотОбъект[ИмяСубконто] = ДокументСсылка;
			КонецЕсли;

		КонецЦикла;
		
		СвойстваСчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНДСНУ);
		
		Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчетаНУ["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоЗатратНДСНУ" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) Тогда
				ЭтотОбъект[ИмяСубконто] = ДокументСсылка;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Учет НДС
	УчетНДСИАкциза.СформироватьДвиженияЗаявлениеОВвозеТоваров(ПараметрыПроведения.ТаблицаНДС, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценкаДвиженийДокумента, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(
		ПараметрыПроведения.ТаблицаТоварыПоНомерамГТД, ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ЗаполнитьПоДокументуПоступления(ЭтотОбъект, Основание);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, Константы.ВалютаРегламентированногоУчета.Получить(), , , , Основание);
	
КонецПроцедуры // ЗаполнитьПоДокументуОснования()

// Процедура выполняет построчную проверку данных табличных частей
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, Отказ)
	
	ПроверяемаяТабличнаяЧасть = ЭтотОбъект[ИмяТабличнойЧасти];
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ПроверяемаяТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснование) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Документ-основание'"), СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].ДокументОснование";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СтавкаНДС.Ставка <> 0 И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Счет НДС'"), СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчетаНДС";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота) Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Вид оборота'"), СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].НДСВидОборота";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСКВозмещению) Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Счет учета НДС к возмещению'"), СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчетаНДСКВозмещению";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьОбновитьНомераГТД()
	
	ТаблицаНомеровГТД = Справочники.НомераГТД.ПустаяТаблицаНомеровГТД();
	ТаблицаНомеровГТД.Колонки.Добавить("НомерСтрокиГТДЧисло", Новый ОписаниеТипов("Число"));
	
	// Заполнить ТаблицаНомеровГТД, которая будет использоваться 
	// для поиска, создания, обновления номеров ГТД.
	Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
		
		СтрокаНомерГТД = ТаблицаНомеровГТД.Добавить();
		
		СтрокаНомерГТД.Идентификатор = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		СтрокаНомерГТД.НомерСтроки = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		
		СтрокаНомерГТД.НомерГТД = ЭтотОбъект.РегистрационныйНомер;
		СтрокаНомерГТД.НомерСтрокиГТД = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		СтрокаНомерГТД.НомерСтрокиГТДЧисло = СтрокаТовар.НомерСтроки;
		СтрокаНомерГТД.КодТНВЭД = СтрокаТовар.КодТНВЭД;
		СтрокаНомерГТД.ГСВС = ЭСФСерверПереопределяемый.ПолучитьГСВС(,СтрокаТовар.КодТНВЭД);
		СтрокаНомерГТД.НаименованиеТовара = СтрокаТовар.НаименованиеТовара;
		СтрокаНомерГТД.СтранаПроисхожденияТовара = СтрокаТовар.СтранаПроисхождения;
		СтрокаНомерГТД.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ТС;
		СтрокаНомерГТД.РегистрационныйНомерЭСФ = "";
		СтрокаНомерГТД.СсылкаНомерГТД = СтрокаТовар.НомерГТД;
		СтрокаНомерГТД.ПризнакПроисхождения = СтрокаТовар.ПризнакПроисхождения;
		
	КонецЦикла;
	
	Если ТаблицаНомеровГТД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;   
	    			
	РеквизитыИзменены = (РегистрационныйНомер <> Ссылка.РегистрационныйНомер) ИЛИ ИзменилисьРеквизитыТЧТовары(ТаблицаНомеровГТД);
	Если НЕ РеквизитыИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.НомераГТД.НайтиСоздатьОбновитьНомераГТД(ТаблицаНомеровГТД, НСтр("ru = 'ТМЗ'"), ЭтотОбъект);
	
	// Заполнить в таблице Товары ссылки на найденные и созданные элементы справочника НомераГТД. 
	Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
		СтрокаНомерГТД = ТаблицаНомеровГТД.Найти(Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ="), "Идентификатор");
		Если СтрокаНомерГТД = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		СтрокаТовар.НомерГТД = СтрокаНомерГТД.СсылкаНомерГТД;
	КонецЦикла;

		
КонецПроцедуры

Функция ИзменилисьРеквизитыТЧТовары(ТаблицаНомеровГТД)
			
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НомераГТД", ТаблицаНомеровГТД);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НомераГТД.НомерСтрокиГТДЧисло КАК НомерСтрокиГТД,
	               |    НомераГТД.КодТНВЭД КАК КодТНВЭД,	              
	               |	НомераГТД.НаименованиеТовара КАК НаименованиеТовара,
	               |	НомераГТД.СтранаПроисхожденияТовара КАК СтранаПроисхожденияТовара,
	               |	НомераГТД.ПризнакПроисхождения КАК ПризнакПроисхождения,
	               |	НомераГТД.СсылкаНомерГТД КАК СсылкаНомерГТД,
	               |	1 КАК Счетчик
	               |ПОМЕСТИТЬ ВТ_НовыеДанныеНомераГТД
	               |ИЗ
	               |	&НомераГТД КАК НомераГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.СсылкаНомерГТД КАК СсылкаНомерГТД
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТЧТовары.НомерСтроки КАК НомерСтрокиГТД,
	               |		ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	               |		ТЧТовары.НаименованиеТовара КАК НаименованиеТовара,
	               |		ТЧТовары.СтранаПроисхождения КАК СтранаПроисхожденияТовара,
	               |		ТЧТовары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	               |		ТЧТовары.НомерГТД КАК СсылкаНомерГТД,
	               |		-1 КАК Счетчик
	               |	ИЗ
	               |		Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ТЧТовары
	               |	ГДЕ
	               |		ТЧТовары.Ссылка = &ДокументСсылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НомераГТД.НомерСтрокиГТД,
	               |		НомераГТД.КодТНВЭД,
	               |		НомераГТД.НаименованиеТовара,
	               |		НомераГТД.СтранаПроисхожденияТовара,
	               |		НомераГТД.ПризнакПроисхождения,
	               |		НомераГТД.СсылкаНомерГТД,
	               |		НомераГТД.Счетчик
	               |	ИЗ
	               |		ВТ_НовыеДанныеНомераГТД КАК НомераГТД) КАК Товары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.СтранаПроисхожденияТовара,
	               |	Товары.ПризнакПроисхождения,
	               |	Товары.КодТНВЭД,
	               |	Товары.НаименованиеТовара,	              
	               |	Товары.СсылкаНомерГТД,
	               |	Товары.НомерСтрокиГТД
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(Товары.Счетчик) <> 0
	               |		ИЛИ Товары.СсылкаНомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))";
				   
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());

КонецФункции

//Заполнение пустых признаков происхождения по умолчанию
//
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ИмяТЧ)
	
	ЭСФСервер.ЗаполнитьПустыеПризнакиПроисхождения(ЭтотОбъект, ИмяТЧ)
	
КонецПроцедуры

//Заполнение пустых видов поступления НДС значениями по умолчанию
//
Процедура ЗаполнитьПустыеВидыПоступленияНДС()
	
	Для Каждого ТекСтрока Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.НДСВидПоступления) И ТекСтрока.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ТекСтрока.НДСВидПоступления = Справочники.ВидыПоступления.ИмпортТМЗМетодомЗачета;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ОС Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.НДСВидПоступления) И ТекСтрока.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ТекСтрока.НДСВидПоступления = Справочники.ВидыПоступления.ИмпортТМЗМетодомЗачета;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСубконтоКонтрагентыДоговоры(Бух = Ложь, Нал = Ложь) Экспорт
	
	Если Бух Тогда
	
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНДСБУ);
		
		Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчета["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоЗатратНДСБУ" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) И ЗначениеЗаполнено(Контрагент) Тогда
				ЭтотОбъект[ИмяСубконто] = Контрагент;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ЭтотОбъект[ИмяСубконто] = ДоговорКонтрагента;
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;
	
	Если Нал Тогда

		СвойстваСчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНДСНУ);
		
		Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчетаНУ["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоЗатратНДСНУ" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) И ЗначениеЗаполнено(Контрагент) Тогда
				ЭтотОбъект[ИмяСубконто] = Контрагент;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяСубконто]) И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ЭтотОбъект[ИмяСубконто] = ДоговорКонтрагента;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
