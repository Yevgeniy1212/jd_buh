#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// затраты по НДС
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСБУ", "ПрочиеКраткосрочныеАктивы"); //"ОтложенныйНДС");  //"ПрочиеРасходы");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСНУ", "ПрочиеКраткосрочныеАктивыНУ"); //"ОтложенныйНДСНУ");  //"ПрочиеРасходыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ3");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации_ПрочийОблагаемыйИмпорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДСКВозмещению",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "ВидНДС", "ВидНДС_НДСОблагаемыйИмпорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота",  "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНДС", "ВидНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВидНДСМетодомЗачета");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления",  "ВидПоступленияНДС_Импорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНДС", "ВидНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВидНДСМетодомЗачета");
	
	// Табличная часть ОсновныеСредства
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДС", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации_ПрочийОблагаемыйИмпорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДСКВозмещению", "ПредъявленныйНДС_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "ВидНДС", "ВидНДС_НДСОблагаемыйИмпорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота",  "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНДС", "ВидНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВидНДСМетодомЗачета");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления",  "ВидПоступленияНДС_Импорт");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНДС", "ВидНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВидНДСМетодомЗачета");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	КолонкаНоменклатура = ?(ИмяТабличнойЧасти = "ОС", "ОсновноеСредство", "Номенклатура");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		СоответствиеСчетовУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаСпискаОС(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, КолонкаНоменклатура, Истина), ДанныеОбъекта.Дата);
	Иначе
		СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, КолонкаНоменклатура, Истина), ДанныеОбъекта.Дата);
	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[КолонкаНоменклатура]);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		

КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, ВключаяЗаполненные = Истина) Экспорт
	
	Если СчетаУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет настроек по счетам, то заполним значениями по умолчанию
	Если НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		КонецЕсли; 		
	Иначе 
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоРеализации;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСКВозмещению) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДСКВозмещению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
	Иначе 
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСКВозмещению) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДСКВозмещению = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;       		
	КонецЕсли;	
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОперацииРеализации) Тогда
		СтрокаТабличнойЧасти.НДСВидОперацииРеализации = Справочники.ВидыРеализации.ПрочийОблагаемыйИмпорт;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНДС) Тогда
		СтрокаТабличнойЧасти.ВидНДС = Перечисления.ВидыНДС.НДСОблагаемыйИмпорт;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
		// Для метода зачета заполняем дополнительные сведения
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота) Тогда
			МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
			ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидПоступления) Тогда
			СтрокаТабличнойЧасти.НДСВидПоступления = Справочники.ВидыПоступления.ИмпортТМЗМетодомЗачета;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.

Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьДокумента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КурсДокумента");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("ФизЛицо");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("ТаможенныйСбор");
		БлокируемыеРеквизиты.Добавить("РегистрационныйНомер; РегистрационныйНомер");
		  		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Поставщик; ТоварыПоставщик");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена"); 	
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма"); 		
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Валюта; ТоварыВалюта");
		БлокируемыеРеквизиты.Добавить("Товары.КурсВалюты; ТоварыКурсВалюты");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаДополнительныхРасходов; ТоварыСуммаДополнительныхРасходов");
		БлокируемыеРеквизиты.Добавить("Товары.ОборотПоРеализации; ТоварыОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ДокументОснование; ТоварыДокументОснование");
		БлокируемыеРеквизиты.Добавить("Товары.ДатаПринятияНаУчет; ТоварыДатаПринятияНаУчет");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
				  		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСЗаполнить, ОСПодборОС, ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.Валюта; ОСВалюта");
		БлокируемыеРеквизиты.Добавить("ОС.Количество; ОСКоличество");
		БлокируемыеРеквизиты.Добавить("ОС.ДокументОснование; ОСДокументОснование");
		БлокируемыеРеквизиты.Добавить("ОС.КурсВалюты; ОСКурсВалюты");
		БлокируемыеРеквизиты.Добавить("ОС.ОборотПоРеализации; ОСОборотПоРеализации"); 
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаДополнительныхРасходов; ОССуммаДополнительныхРасходов");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС"); 
		БлокируемыеРеквизиты.Добавить("ОС.ДатаПринятияНаУчет; ОСДатаПринятияНаУчет");
		БлокируемыеРеквизиты.Добавить("ОС.ЕдиницаИзмерения; ОСЕдиницаИзмерения");
			 
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектовПереопределяемый

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура ПроверитьСоответствиеНалоговомуПериоду(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СинонимТовары КАК ТабЧасть,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура КАК Номенклатура,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
	|	И (ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет < &НалоговыйПериодНачало
	|			ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет > &НалоговыйПериодКонец)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СинонимОС,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСтроки,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка
	|	И (ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет < &НалоговыйПериодНачало
	|			ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет > &НалоговыйПериодКонец)";
	
	Запрос.УстановитьПараметр("НалоговыйПериодНачало", НачалоМесяца(ДокументСсылка.НалоговыйПериод));
	Запрос.УстановитьПараметр("НалоговыйПериодКонец" , КонецМесяца(ДокументСсылка.НалоговыйПериод));
	Запрос.УстановитьПараметр("Ссылка"               , ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары"        , НСтр("ru = 'ТМЗ'"));
	Запрос.УстановитьПараметр("СинонимОС"            , НСтр("ru = 'ОС'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе <%1>
		|выявлены несоответствия ""Даты принятия к учету"" налоговому периоду документа ""%2"":'"), ДокументСсылка, Формат(ДокументСсылка.НалоговыйПериод, "ДФ='MMMM yyyy'"));
		
		ВыборкаНесоответствия = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаНесоответствия.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '- ""%1"": строка <%2> по документу <%3> не относится к выбранному налоговому периоду'"),
							ВыборкаНесоответствия.ТабЧасть, ВыборкаНесоответствия.НомерСтроки, ВыборкаНесоответствия.ДокументОснование);
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Функция ПолучитьКодыТНВЭДСпискаНоменклатуры(СписокНоменклатуры)
	
	Результат = Новый Соответствие;
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.КодТНВЭД
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатуры = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		Результат.Вставить(ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.КодТНВЭД);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таб часть Товары по указанному поступлению товаров
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг, определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступления, ИмяТабличнойЧасти, Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, УчитыватьКПН, УчитыватьНДС, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);   
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДанныеДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, "Ссылка, Дата, ВалютаДокумента, КурсВзаиморасчетов, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	ТаблицаЗначений = ДокументПоступления[ИмяТабличнойЧасти].Выгрузить();						
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		//ТаблицаЗначений.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС, СтавкаНДС, НДСВидОборота", "Количество, Цена, Сумма");
		СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗначений, "Номенклатура", Истина);
		СоответствиеКодовТНВЭД = ПолучитьКодыТНВЭДСпискаНоменклатуры(СписокНоменклатуры);
	ИначеЕсли ИмяТабличнойЧасти = "ОС" Тогда 
		//ТаблицаЗначений.Свернуть("ОсновноеСредство, СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС, СтавкаНДС, НДСВидОборота", "Сумма");
		
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаЗначений, "Количество", 1);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	
	// Обработка добавленных строк	
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗначений,, "СчетУчетаНДС");
		
		// Реквизиты документа-основания в строке табличной части
		НоваяСтрока.Валюта							= ДанныеДокументаОснования.ВалютаДокумента;
		НоваяСтрока.КурсВалюты						= ДанныеДокументаОснования.КурсВзаиморасчетов;
		НоваяСтрока.ДокументОснование				= ДанныеДокументаОснования.Ссылка;
		НоваяСтрока.НомерТранспортногоДокумента 	= ДанныеДокументаОснования.НомерВходящегоДокумента;
		НоваяСтрока.ДатаТранспортногоДокумента 		= ДанныеДокументаОснования.ДатаВходящегоДокумента;			
		НоваяСтрока.ДатаПринятияНаУчет 				= ДанныеДокументаОснования.Дата;
		
		НоваяСтрока.ОборотПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, НоваяСтрока.Валюта, ВалютаРегламентированногоУчета, НоваяСтрока.КурсВалюты, 1);

		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Структура, , Истина);
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			НоваяСтрока.КодТНВЭД = СоответствиеКодовТНВЭД.Получить(НоваяСтрока.Номенклатура);
			НоваяСтрока.СтранаПроисхождения = Объект.Контрагент.СтранаРезидентства;
			
			ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "НаименованиеПолное, Наименование");
			
			НоваяСтрока.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
																, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
																, ЗначениеРеквизитаНоменклатура.Наименование);
			
		КонецЕсли;

	КонецЦикла;	
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТабличнойЧасти(Объект, НоваяСтрока, ДанныеЗаполнения, ДанныеОснования, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета, СоответствиеСчетовУчета)
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	ЗаполнитьРеквизитыДокументаОснованияВСтрокеТабличнойЧасти(Объект, НоваяСтрока, ДанныеОснования);
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = ДанныеЗаполнения.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		НоваяСтрока.СтранаПроисхождения = Объект.Контрагент.СтранаРезидентства;
	КонецЕсли;
	
	НоваяСтрока.ОборотПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, НоваяСтрока.Валюта, ВалютаРегламентированногоУчета, НоваяСтрока.КурсВалюты, 1);

	Если ИмяТабличнойЧасти = "ОС" Тогда
		НоваяСтрока.Количество = 1;
	КонецЕсли;
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	Структура.Вставить("ЗначениеОборотПоРеализации", Истина);
	
	// Расчет суммы НДС
	ДанныеСтроки = Новый Структура("ОборотПоРеализации, СуммаНДС, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрока);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтроки, Структура, , Истина);
	НоваяСтрока.СуммаНДС = ДанныеСтроки.СуммаНДС;

КонецПроцедуры
		
Процедура ЗаполнитьПоДокументуПоступления(Объект, Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	Объект.ДокументОснование = Основание;
	Объект.УчитыватьНДС = Истина;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, Новый Структура("ВидНДСПриИмпорте", "СтранаРезидентства.УчастникТаможенногоСоюза.ВидНДСПриИмпорте"));
	 	Объект.ВидНалогаНДС = ЗначенияРеквизитов.ВидНДСПриИмпорте;	
	КонецЕсли; 
	
	Товары = Объект.Товары;
	ОС = Объект.ОС;
	
	// Перед заполнением очистим табличные части
	Товары.Очистить();
	ОС.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументСсылка", Основание);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументОснование,
		|	ПоступлениеТоваровУслуг.Дата КАК ДатаПринятияНаУчет,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента КАК Валюта,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаТранспортногоДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК КурсВалюты,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерТранспортногоДокумента,
		|	ПоступлениеТоваровУслуг.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		ЕдиницаИзмерения,
		|		Коэффициент,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		СчетУчетаБУ,
		//|		СчетУчетаНДС,
		|		НДСВидОборота,
		|		НДСВидПоступления,
		|		СчетУчетаНУ,
		|		Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|		Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = &ПустаяСтрока
		|				ТОГДА Номенклатура.Наименование
		|			ИНАЧЕ ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|		КОНЕЦ КАК НаименованиеТовара
		|	),
		|	ПоступлениеТоваровУслуг.ОС.(
		|		Ссылка,
		|		НомерСтроки,
		|		ОсновноеСредство,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		СчетУчетаБУ,
		//|		СчетУчетаНДС,
		|		НДСВидОборота,
		|		НДСВидПоступления,
		|		СчетУчетаНУ,
		|		ПодразделениеОрганизации,
		|		МОЛОрганизации,
		|		СуммаНУ,
		|		СуммаПР
		|	)
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслуг.Товары.НомерСтроки,
		|	ПоступлениеТоваровУслуг.ОС.НомерСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Выборка.Следующий() Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
				
		ВыборкаПоТоварам = Выборка.Товары.Выбрать();
		
		СоответствиеСчетовУчетаТМЗ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(Выборка.Товары.Выгрузить(), "Номенклатура", Истина), ДанныеОбъекта.Дата);

		Пока ВыборкаПоТоварам.Следующий() Цикл
			ЗаполнитьСтрокуТабличнойЧасти(ДанныеОбъекта, Товары.Добавить(), ВыборкаПоТоварам, Выборка, "Товары", ВалютаРегламентированногоУчета, СоответствиеСчетовУчетаТМЗ);
		КонецЦикла;
		
		СоответствиеСчетовУчетаОС = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаСпискаОС(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(Выборка.ОС.Выгрузить(), "ОсновноеСредство", Истина), ДанныеОбъекта.Дата);
			
		ВыборкаПоОС = Выборка.ОС.Выбрать();
		Пока ВыборкаПоОС.Следующий() Цикл
			ЗаполнитьСтрокуТабличнойЧасти(ДанныеОбъекта, ОС.Добавить(), ВыборкаПоОС, Выборка, "ОС", ВалютаРегламентированногоУчета, СоответствиеСчетовУчетаОС);
		КонецЦикла;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументаОснованияВСтрокеТабличнойЧасти(Объект, СтрокаТЧ, Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВалютаДокумента, КурсВзаиморасчетов, НомерВходящегоДокумента, ДатаВходящегоДокумента, Дата");
		СтрокаТЧ.Валюта							= ДанныеОснования.ВалютаДокумента;
		СтрокаТЧ.КурсВалюты						= ДанныеОснования.КурсВзаиморасчетов;
		СтрокаТЧ.ДокументОснование				= Основание;
		СтрокаТЧ.НомерТранспортногоДокумента 	= ДанныеОснования.НомерВходящегоДокумента;
		СтрокаТЧ.ДатаТранспортногоДокумента 	= ДанныеОснования.ДатаВходящегоДокумента;			
		СтрокаТЧ.ДатаПринятияНаУчет 			= ДанныеОснования.Дата;
	ИначеЕсли ТипЗнч(Основание) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Основание);
	Иначе
		СтрокаТЧ.Валюта							= Объект.ВалютаДокумента;
		СтрокаТЧ.КурсВалюты						= Объект.КурсВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Налогоплательщик = Реквизиты.Организация;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимОС",	          НСтр("ru = 'ОС'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьОС
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ВидНалогаНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СчетЗатратНДСБУ,
	|	Реквизиты.СубконтоЗатратНДСБУ1,
	|	Реквизиты.СубконтоЗатратНДСБУ2,
	|	Реквизиты.СубконтоЗатратНДСБУ3,
	|	Реквизиты.СчетЗатратНДСНУ,
	|	Реквизиты.СубконтоЗатратНДСНУ1,
	|	Реквизиты.СубконтоЗатратНДСНУ2,
	|	Реквизиты.СубконтоЗатратНДСНУ3,
	|	Реквизиты.Комментарий
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ВидНалогаНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СчетЗатратНДСБУ,
	|	Реквизиты.СубконтоЗатратНДСБУ1,
	|	Реквизиты.СубконтоЗатратНДСБУ2,
	|	Реквизиты.СубконтоЗатратНДСБУ3,
	|	Реквизиты.СчетЗатратНДСНУ,
	|	Реквизиты.СубконтоЗатратНДСНУ1,
	|	Реквизиты.СубконтоЗатратНДСНУ2,
	|	Реквизиты.СубконтоЗатратНДСНУ3,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОС, ЛОЖЬ) КАК ЕстьОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	Реквизиты.Комментарий
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	ТаблицаТовары.ОборотПоРеализации КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаНДСКВозмещению,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ТаблицаТовары.ВидНДС,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.ДокументОснование.Склад КАК Склад
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.Количество КАК Количество,
		|	ТаблицаОС.ОборотПоРеализации КАК Сумма,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.СчетУчетаНДСКВозмещению,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидОперацииРеализации,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ВидНДС
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|			ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Сумма КАК СуммаБезНДС,
		|	ТаблицаТовары.Сумма КАК ОборотПоРеализации,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаТовары.ВидНДС КАК ВидНалогаНДС,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	ТаблицаТовары.СчетУчетаНДСКВозмещению КАК СчетУчетаНДСКВозмещению,
		|	Реквизиты.ВидНалогаНДС КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.СчетЗатратНДСБУ КАК КорСчет,
		|	Реквизиты.СубконтоЗатратНДСБУ1 КАК КорСубконто1,
		|	Реквизиты.СубконтоЗатратНДСБУ2 КАК КорСубконто2,
		|	Реквизиты.СубконтоЗатратНДСБУ3 КАК КорСубконто3,
		|	Реквизиты.СчетЗатратНДСНУ КАК КорСчетНУ,
		|	Реквизиты.СубконтоЗатратНДСНУ1 КАК КорСубконтоНУ1,
		|	Реквизиты.СубконтоЗатратНДСНУ2 КАК КорСубконтоНУ2,
		|	Реквизиты.СубконтоЗатратНДСНУ3 КАК КорСубконтоНУ3,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОСНДС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаОС.СуммаНДС КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.Сумма КАК СуммаБезНДС,
		|	ТаблицаОС.Сумма КАК ОборотПоРеализации,
		|	ТаблицаОС.НДСВидОборота КАК ВидОборота,
		|	ТаблицаОС.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	ТаблицаОС.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаОС.ВидНДС КАК ВидНалогаНДС,
		|	ТаблицаОС.СчетУчетаНДС КАК Счет,
		|	ТаблицаОС.СчетУчетаНДСКВозмещению КАК СчетУчетаНДСКВозмещению,
		|	Реквизиты.ВидНалогаНДС КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.СчетЗатратНДСБУ КАК КорСчет,
		|	Реквизиты.СубконтоЗатратНДСБУ1 КАК КорСубконто1,
		|	Реквизиты.СубконтоЗатратНДСБУ2 КАК КорСубконто2,
		|	Реквизиты.СубконтоЗатратНДСБУ3 КАК КорСубконто3,
		|	Реквизиты.СчетЗатратНДСНУ КАК КорСчетНУ,
		|	Реквизиты.СубконтоЗатратНДСНУ1 КАК КорСубконтоНУ1,
		|	Реквизиты.СубконтоЗатратНДСНУ2 КАК КорСубконтоНУ2,
		|	Реквизиты.СубконтоЗатратНДСНУ3 КАК КорСубконтоНУ3,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		
		НомераТаблиц.Вставить("ТаблицаТоварыПоНомерамГТД", НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Склад,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе   		
		ПараметрыПроведения.Вставить("ТаблицаТоварыПоНомерамГТД", Неопределено); 		
				
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заявление о ввозе товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявлениеНаВвоз";
	КомандаПечати.Представление = НСтр("ru = 'Заявление о ввозе товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявлениеНаВвоз";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеНаВвоз") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеНаВвоз",
			НСтр("ru = 'Заявление о ввозе товаров'"),
			ПечатьЗаявлениеНаВвоз(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ПФ_MXL_ЗаявлениеНаВвоз");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной утвержденной формой "Заявление 
// о ввозе товаров и уплате косвенных налогов" 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗаявлениеНаВвоз(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаявлениеОВвозеТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ПФ_MXL_ЗаявлениеНаВвоз");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	// Заполнение Шапки
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Номер КАК Номер,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Дата КАК Дата,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент КАК Контрагент,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Ссылка КАК Организация,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Наименование КАК ОрганизацияНаименование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.СтруктурноеПодразделение,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации КАК ОрганизацияСтранаРегистрации,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.Код КАК ОрганизацияСтранаРегистрацииКод,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.КодАльфа3 КАК ОрганизацияСтранаРегистрацииКодАльфа3,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства КАК КонтрагентСтранаРезидентства,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.КодАльфа3 КАК КонтрагентСтранаРезидентстваКодАльфа3,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НомерНалоговойРегистрацииВСтранеРезидентства КАК КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка В(&МассивОбъектов)";
	ЗапросПоШапке.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	1 КАК IDТабличнойЧасти,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,		 
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НаименованиеТовара КАК НаименованиеТовара,  								   
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КодТНВЭД КАК КодТНВЭД,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Количество,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Сумма,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта.Код КАК ВалютаКод,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КурсВалюты,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерТранспортногоДокумента,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаТранспортногоДокумента,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСчетаФактуры,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаСчетаФактуры,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.Представление КАК СтавкаНДСПредставление,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта КАК Валюта,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДокументОснование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.Наименование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КодТНВЭД,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения.Представление,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Количество,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Сумма,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта.Код,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КурсВалюты,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерТранспортногоДокумента,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаТранспортногоДокумента,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСчетаФактуры,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаСчетаФактуры,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОборотПоРеализации,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.Представление,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСтроки,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДокументОснование,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.ДляОсвобожденногоОборота,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.МестоРеализацииНеРК,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	IDТабличнойЧасти,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(ОборотПоРеализации),
		|	СУММА(СуммаНДС)
		|ПО
		|	Ссылка";
		
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаОбщиеИтоги = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаПоШапке.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоШапке.Организация, ВыборкаПоШапке.СтруктурноеПодразделение);
		
		СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапке.Дата, ,);
		СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоШапке.Контрагент, ВыборкаПоШапке.Дата, ,);
	
		// Выводим шапку накладной       	
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		ОбластьМакета.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапке.Номер, ВыборкаПоШапке.Ссылка, ,Ложь, Ложь, ПрефиксацияОбъектовБКВызовСервера.СписокПрефиксовУзлов());
		ОбластьМакета.Параметры.Дата  = Формат(ВыборкаПоШапке.Дата, "Л=" + КодЯзыка + "; ДЛФ=DD");
	
		// В строках «Продавец/Покупатель» Заявления указываются:   
	   // наименование юридического лица или фамилия, имя, отчество индивидуального предпринимателя, физического лица;

		Если СведенияОПоставщике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ОбластьМакета.Параметры.ПродавецНаименование = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоШапке.Контрагент, "ФизЛицо"), ВыборкаПоШапке.Дата).Представление;
		Иначе	
			ОбластьМакета.Параметры.ПродавецНаименование = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");	
		КонецЕсли; 
		
		Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ОбластьМакета.Параметры.ПокупательНаименование = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоШапке.Организация, "ИндивидуальныйПредприниматель"), ВыборкаПоШапке.Дата).Представление;
		Иначе
			ОбластьМакета.Параметры.ПокупательНаименование = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		КонецЕсли;
												 
		// для налогоплательщиков Республики Беларусь – УНП (учетный номер плательщика), для налогоплательщиков Республики Казахстан – РНН (регистрационный номер налогоплательщика) либо БИН (бизнес - идентификационный номер) либо ИИН (индивидуальный идентификационный номер), для налогоплательщиков Российской Федерации – ИНН/КПП (идентификационный номер налогоплательщика/код причины постановки на учет); 
		ОбластьМакета.Параметры.ПродавецРНН = ВыборкаПоШапке.КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства;	
		ДатаПрекращенияВыводаРНН 			= Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоШапке.Дата < ДатаПрекращенияВыводаРНН;
	
		Если ВыводитьРНН Тогда
			// выводим РНН
			ОбластьМакета.Параметры.ПокупательРНН = СтруктурнаяЕдиницаОрганизация.РНН;		
		Иначе
			// Выводим БИН
			ОбластьМакета.Параметры.ПокупательРНН = СтруктурнаяЕдиницаОрганизация.ИдентификационныйНомер;		
		КонецЕсли;	
		
		ОбластьМакета.Параметры.ПродавецКодСтраныАдрес 	 = СокрЛП(ВыборкаПоШапке.КонтрагентСтранаРезидентстваКод) + ", " +  ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ПокупательКодСтраныАдрес = ?(ЗначениеЗаполнено(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), СокрЛП(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), Справочники.КлассификаторСтранМира.Казахстан.Код) + ", " +  ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");	
		// Формат даты договора
		ОбластьМакета.Параметры.ДатаДоговора = Формат(ВыборкаПоШапке.ДатаДоговора, "Л=" + КодЯзыка + "; ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывод табличной части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");

		ИтогоСуммаНДС = 0;
		ИтогоВсего    = 0;
		
		Если ВыборкаОбщиеИтоги.НайтиСледующий(ВыборкаПоШапке.Ссылка) Тогда
			ВыборкаПоТоварам = ВыборкаОбщиеИтоги.Выбрать();	
			
			ОбластьМакетаИтоги = Макет.ПолучитьОбласть("Итого");
			ОбластьМакетаИтоги.Параметры.Заполнить(ВыборкаОбщиеИтоги);
		Иначе
			ВыборкаПоТоварам = Неопределено;
		КонецЕсли;
		
		НомерСтроки = 1;
		
		Если НЕ ВыборкаПоТоварам = Неопределено Тогда 
			
			Пока ВыборкаПоТоварам.Следующий() Цикл		
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);	
				// Полное наименование
				Если ЗначениеЗаполнено(СокрЛП(ВыборкаПоТоварам.НаименованиеТовара)) Тогда
					НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НаименованиеТовара);
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоТоварам.НоменклатураНаименованиеПолное) Тогда
					НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НоменклатураНаименованиеПолное);
				Иначе                                                     
					НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НоменклатураНаименование);
				КонецЕсли;	
		
				ОбластьМакета.Параметры.НоменклатураНаименование = НоменклатураНаименование;
				// ставка НДС
				Если ВыборкаПоТоварам.СтавкаНДСДляОсвобожденногоОборота = ИСТИНА ИЛИ ВыборкаПоТоварам.СтавкаНДСМестоРеализацииНеРК = ИСТИНА Тогда
					ОбластьМакета.Параметры.СтавкаНДСПредставление = НСтр("ru = 'льгота'", КодЯзыка);
				КонецЕсли;	
				// общая нумерация по обеим табличным частям
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
					
			ТабличныйДокумент.Вывести(ОбластьМакетаИтоги); 
		
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");		
	
		Руководители 							= ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапке.Дата);
		ГлавныйБухгалтер 						= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru = 'Не предусмотрен'", КодЯзыка), Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
		                                                		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоШапке.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура ЗаполнитьСтрануПроисхожденияВТоварахЗаявленияОВвозе() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Дата,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Номер,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства КАК СтранаРезидентства,
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
	|		ПО (ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка)
	|ГДЕ
	|	(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтранаПроисхождения = &ПустаяСтранаПроисхождения
	|			ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтранаПроисхождения ЕСТЬ NULL )";
	
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();

	Пока ВыборкаДокументов.Следующий() Цикл
				
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.СтранаПроисхождения = ВыборкаДокументов.СтранаРезидентства;
					
		КонецЦикла;
		           	
		
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ВыборкаДокументов.Регистратор, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
			
	КонецЦикла;

КонецПроцедуры


#КонецЕсли