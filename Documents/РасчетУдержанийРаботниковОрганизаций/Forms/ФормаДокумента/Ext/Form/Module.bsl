
&НаКлиенте
Перем СинхронизируемыеТабличныеЧасти, ЭтоРедактированиеСтроки;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
    ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец РедактированиеДокументовПользователей

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	РассчитатьДополнительныеСведенияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			
			Если Объект.ИсчисленныйИПН.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.ИсчисленныйИПН.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;						
			КонецЕсли;
			
			Если Объект.ИсчисленныйОПВ.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.ИсчисленныйОПВ.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;						
			КонецЕсли;
			
			Если Объект.ИсчисленныеВОСМС.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.ИсчисленныеВОСМС.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;						
			КонецЕсли;
			
			Если Объект.Удержания.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.Удержания.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				МассивСотрудников = Новый Массив;
				МассивСотрудников.Добавить(ВыбранноеЗначение);
				
			КонецЕсли;
			
			Если Объект.ПериодРегистрации < Дата(2018,1,1) // Расчет вычетов ИПН с 2018 выполняется в другой ТЧ
				И Объект.НалоговыеВычеты.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.НалоговыеВычеты.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;						
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.ИсчисленныйИПН.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.ИсчисленныйИПН.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					НоваяСтрока.МесяцНалоговогоПериода 	= Объект.ПериодРегистрации;						
				КонецЕсли;
				
				Если Объект.ИсчисленныйОПВ.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.ИсчисленныйОПВ.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					НоваяСтрока.МесяцНалоговогоПериода 	= Объект.ПериодРегистрации;						
				КонецЕсли;
				
				Если Объект.ИсчисленныеВОСМС.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.ИсчисленныеВОСМС.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					НоваяСтрока.МесяцНалоговогоПериода 	= Объект.ПериодРегистрации;						
				КонецЕсли;
				
				Если Объект.Удержания.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.Удержания.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					МассивСотрудников = Новый Массив;
					МассивСотрудников.Добавить(ВыбранноеЗначение);
					
				КонецЕсли;
				
				Если Объект.ПериодРегистрации < Дата(2018,1,1) // Расчет вычетов ИПН с 2018 выполняется в другой ТЧ
					И Объект.НалоговыеВычеты.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.НалоговыеВычеты.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					НоваяСтрока.МесяцНалоговогоПериода 	= Объект.ПериодРегистрации;						
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		Если МассивСотрудников <> Неопределено Тогда
			ПолучитьПлановыеУдержанияСотрудникаНаСервере(МассивСотрудников);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""расчет удержаний сотрудников организаций"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Объект.Дата);
	
	Если Формат(Объект.Дата, "ДФ = 'дд.ММ.гг'") < Формат(ПоследнийРабочийДеньМесяца, "ДФ = 'дд.ММ.гг'") 
		И Месяц(Объект.Дата) = Месяц(Объект.ПериодРегистрации) Тогда
		
		ТекстВопроса = НСтр("ru = 'Расчет зарплаты производится не последним рабочим днем месяца. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьДату", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИсчисленныйИПН

&НаКлиенте
Процедура ИсчисленныйИПНФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.ИсчисленныйИПН 
		// это открытие формы
		И НЕ ЭтаФорма.ТекущийЭлемент = Элементы.Дата Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ИсчисленныйИПН.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
				
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;			
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковИПНСписокЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсчисленныйИПН.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле.ГиперссылкаЯчейки Тогда
		ИсчисленныйИПНПримененныеВычетыИПННажатие(ТекущиеДанные);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ИсчисленныйИПН.ТекущиеДанные <> Неопределено Тогда 
		ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо;
		ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйИПН.ТекущиеДанные.МесяцНалоговогоПериода;
	Иначе
		ТекущееФизЛицо_Контрагент 		= Неопределено;
		ТекущийМесяцНалоговогоПериода   = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПередУдалением(Элемент, Отказ)
	
	ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо;
	ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйИПН.ТекущиеДанные.МесяцНалоговогоПериода;
	
	УдалитьСтрокиТаблицыВычетыИПН(ТекущееФизЛицо_Контрагент, ТекущийМесяцНалоговогоПериода, Объект.ВычетыИПН);
	
	ТекущееФизЛицо_Контрагент		= Неопределено;
	ТекущийМесяцНалоговогоПериода   = Неопределено;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ  ИсчисленныйОПВ

&НаКлиенте
Процедура ИсчисленныйОПВФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйОПВПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.ИсчисленныйОПВ 
		// это открытие формы
		И НЕ ЭтаФорма.ТекущийЭлемент = Элементы.Дата Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйОПВПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ИсчисленныйОПВ.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйОПВФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.ИсчисленныйОПВ.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.ИсчисленныйОПВ.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковОПВСписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ  ИсчисленныеВОСМС

&НаКлиенте
Процедура ИсчисленныеВОСМСФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.ИсчисленныеВОСМС.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.ИсчисленныеВОСМС.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;   		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.ИсчисленныеВОСМС Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ИсчисленныеВОСМС.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Удержания

&НаКлиенте
Процедура УдержанияФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.Удержания Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковУдержанияСписокЗавершениеВыбора", ЭтотОбъект);

	Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
	Иначе
		
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;   
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НалоговыеВычеты

&НаКлиенте
Процедура НалоговыеВычетыФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеВычетыПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.НалоговыеВычеты Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеВычетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.НалоговыеВычеты.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеВычетыФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковНалоговыеВычетыСписокЗавершениеВыбора", ЭтотОбъект);
	
	Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
	Иначе
		
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;   
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоВсемСотрудникам(Команда)
	
	Если Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после его записи. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
						
	Иначе
	   ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением(КодВозвратаДиалога.Да, Неопределено);
   КонецЕсли;
   	
КонецПроцедуры

&НаКлиенте
Процедура СпискомСотрудников(Команда)
	
	Если Объект.ИсчисленныйИПН.Количество() > 0 
		ИЛИ	Объект.ИсчисленныйОПВ.Количество() > 0 
		ИЛИ	Объект.ИсчисленныеВОСМС.Количество() > 0 
		ИЛИ Объект.Удержания.Количество() > 0 
		ИЛИ Объект.НалоговыеВычеты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличные части будет полностью перезаполнены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтраховыеИЖилищныеВычеты(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьНалоговыеВычетыНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьНалоговыеВычетыНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалогиИВзносы(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьНалогиИВзносыНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьНалогиИВзносыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьУдержания(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьУдержанияНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьУдержанияНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Команда)
	
	ТеущиеДанные = Элементы.ИсчисленныйИПН.ТекущиеДанные;
	ФизЛицоИПН = ?(ТеущиеДанные <> Неопределено, ТеущиеДанные.ФизЛицо, Неопределено);
	ПараметрыРасчета = Новый Структура("ФизЛицо, КомандаРасчета", ФизЛицоИПН, "РассчитатьРаботникаНаСервере(Параметры.ФизЛицо)");

	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьРаботникаНаСервере(ФизЛицоИПН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудникаСКомментарием(Команда)
	
	ТеущиеДанные = Элементы.ИсчисленныйИПН.ТекущиеДанные;
	ФизЛицоИПН = ?(ТеущиеДанные <> Неопределено, ТеущиеДанные.ФизЛицо, Неопределено);
	ПараметрыРасчета = Новый Структура("ФизЛицо, КомандаРасчета", ФизЛицоИПН, "РассчитатьРаботникаНаСервере(Параметры.ФизЛицо)");
	
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьРаботникаНаСервере(ФизЛицоИПН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборомСотрудников(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодробноОПВ(Команда)
	
	ОтображатьПодробностиРасчетаОПВ = НЕ ОтображатьПодробностиРасчетаОПВ;
	
	ОбработкаИзмененияПереключенияПодробностейрасчета(ЭтаФорма);
	Если ОПВПодробностиРасчетаПрочитаны Тогда
		Возврат;
	Иначе
		РассчитатьДополнительныеСведенияНаСервере("ПодробноОПВ");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодробноИПН(Команда)
	
	ОтображатьПодробностиРасчетаИПН = НЕ ОтображатьПодробностиРасчетаИПН;
	
	ОбработкаИзмененияПереключенияПодробностейрасчета(ЭтаФорма);
	Если ИПНПодробностиРасчетаПрочитаны Тогда
		Возврат;
	Иначе
		РассчитатьДополнительныеСведенияНаСервере("ПодробноИПН");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПодробноВОСМС(Команда)
	
	ОтображатьПодробностиРасчетаВОСМС = НЕ ОтображатьПодробностиРасчетаВОСМС;
	
	ОбработкаИзмененияПереключенияПодробностейрасчета(ЭтаФорма);
	Если ВОСМСПодробностиРасчетаПрочитаны Тогда
		Возврат;
	Иначе
		РассчитатьДополнительныеСведенияНаСервере("ПодробноВОСМС");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Объект.Организация, Объект.Дата);
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект,,,, Параметры.ЗначениеКопирования);
		КонецЕсли;
		Объект.Дата = КонецМесяца(Объект.Дата);
	КонецЕсли;
		
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	ОбновитьЭлементыПоПериодуРегистрации(ЭтаФорма, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);		
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьДату(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Дата = ТекущаяДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
    Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ИсчисленныйИПН.Очистить();
	Объект.ИсчисленныйОПВ.Очистить();
	Объект.ИсчисленныеВОСМС.Очистить();
	Объект.Удержания.Очистить();
	Объект.НалоговыеВычеты.Очистить();
    Объект.ВычетыИПН.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Объект.ИсчисленныйИПН.Очистить();
	Объект.ИсчисленныйОПВ.Очистить();
	Объект.ИсчисленныеВОСМС.Очистить();
	Объект.Удержания.Очистить();
	Объект.НалоговыеВычеты.Очистить();
	Объект.ВычетыИПН.Очистить();
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаЗаполнитьПоВсемСотрудникам(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ИсчисленныйИПН.Очистить();
	Объект.ИсчисленныйОПВ.Очистить();
	Объект.ИсчисленныеВОСМС.Очистить();
	Объект.Удержания.Очистить();
	Объект.НалоговыеВычеты.Очистить();
	Объект.ВычетыИПН.Очистить();
	
	АвтозаполнениеНаСервере();
	
	Если Объект.ИсчисленныйИПН.Количество()  = 0 
		И Объект.ИсчисленныйОПВ.Количество() = 0 
		И Объект.ИсчисленныеВОСМС.Количество() = 0 
		И Объект.Удержания.Количество()      = 0 
		И Объект.НалоговыеВычеты.Количество()= 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличные части документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПроведениеИМодифицированность(ПараметрыРасчета)
	
	ОбъектТребуетЗапись = Ложь;
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		ОбъектТребуетЗапись = Истина;
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после его записи. Записать?'");
		ОбъектТребуетЗапись = Истина;
	КонецЕсли;
	
	Если ОбъектТребуетЗапись Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьПередРасчетом", ЭтотОбъект, ПараметрыРасчета);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	Возврат НЕ ОбъектТребуетЗапись;		

КонецФункции

&НаКлиенте  
Процедура ПослеЗакрытияВопросаЗаписатьПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		Выполнить(Параметры.КомандаРасчета);
		
	#Иначе
		
		ВыполнитьНаСервере(Параметры);
				
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере(Параметры) 
	
	Выполнить(Параметры.КомандаРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	Если Объект.ИсчисленныйИПН.Количество() > 0 
		ИЛИ	Объект.ИсчисленныйОПВ.Количество() > 0 
		ИЛИ	Объект.ИсчисленныеВОСМС.Количество() > 0 
		ИЛИ Объект.Удержания.Количество() > 0 
		ИЛИ Объект.НалоговыеВычеты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличные части будет полностью перезаполнены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоВсемСотрудникам", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		АвтозаполнениеНаСервере();
		Если Объект.ИсчисленныйИПН.Количество()  = 0 
			И Объект.ИсчисленныйОПВ.Количество() = 0 
			И Объект.ИсчисленныеВОСМС.Количество() = 0 
			И Объект.Удержания.Количество()      = 0 
			И Объект.НалоговыеВычеты.Количество()= 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличные части документа'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеНаСервере() 
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (заполнение)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетУдержанийРаботниковОрганизаций.Автозаполнение(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетУдержанийРаботниковОрганизаций.Рассчитать(Объект);
	Модифицированность = Истина;
	
	РассчитатьДополнительныеСведенияНаСервере();
	ИПНПодробностиРасчетаПрочитаны = Истина;
	ОПВПодробностиРасчетаПрочитаны = Истина;
	ВОСМСПодробностиРасчетаПрочитаны = Истина;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанные(Источник,Приемник)

	Для Каждого СтрокаДанных Из Источник Цикл
		
		СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода", СтрокаДанных.ФизЛицо, СтрокаДанных.МесяцНалоговогоПериода); 
		Строки = Приемник.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;   
	
КонецПроцедуры 

&НаСервере
Процедура РассчитатьНалоговыеВычетыНаСервере();
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет налоговые вычеты)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетУдержанийРаботниковОрганизаций.РассчитатьНалоговыеВычеты(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНалогиИВзносыНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет налоги и взносы)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетУдержанийРаботниковОрганизаций.РассчитатьНалогиИВзносы(Объект);
	
	РассчитатьДополнительныеСведенияНаСервере();
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьУдержанияНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет удержания)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетУдержанийРаботниковОрганизаций.РассчитатьУдержания(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРаботникаНаСервере(ФизЛицо)
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет сотрудника)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ФизлицоДляРасчета = ?(ТекущееФизЛицо <> Неопределено, ТекущееФизЛицо, ФизЛицо);	
	Документы.РасчетУдержанийРаботниковОрганизаций.Рассчитать(Объект, ФизлицоДляРасчета);
	
	РассчитатьДополнительныеСведенияНаСервере();
	
	Модифицированность = Истина;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФИО(ТекущееФизЛицо)
	
	ФИО = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ТекущееФизЛицо);
	
	Возврат ФИО
	
КонецФункции  

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
КонецФункции

&НаКлиенте
Процедура УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти()
	
	Если ЭтоРедактированиеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаРассчитатьРаботника = Элементы.ФормаРассчитатьСотрудника;
	Если КнопкаРассчитатьРаботника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = "";
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОПВ Тогда
		ТекущиеДанные	= Элементы.ИсчисленныйОПВ.ТекущиеДанные;
		ИмяТЧ = Элементы.ИсчисленныйОПВ.Имя;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИПН Тогда  
		ТекущиеДанные	= Элементы.ИсчисленныйИПН.ТекущиеДанные;
		ИмяТЧ = Элементы.ИсчисленныйИПН.Имя;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВОСМС Тогда  
		ТекущиеДанные	= Элементы.ИсчисленныеВОСМС.ТекущиеДанные;
		ИмяТЧ = Элементы.ИсчисленныеВОСМС.Имя;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочиеУдержания Тогда
		ТекущиеДанные	= Элементы.Удержания.ТекущиеДанные;
		ИмяТЧ = Элементы.Удержания.Имя;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочиеВычеты Тогда
		ТекущиеДанные	= Элементы.НалоговыеВычеты.ТекущиеДанные;
		ИмяТЧ = Элементы.НалоговыеВычеты.Имя;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда 
		ФизЛицоСтроки = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		ФизЛицоСтроки = ТекущиеДанные.ФизЛицо;
		Если ТипЗнч(ФизЛицоСтроки) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоСтроки = ПолучитьЗначениеРеквизита(ФизЛицоСтроки,"ФизЛицо");
		КонецЕсли;	
	КонецЕсли;
	
	Если ФизЛицоСтроки = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка")
		ИЛИ ФизЛицоСтроки = Неопределено Тогда
		
		Если НЕ КнопкаРассчитатьРаботника = Неопределено Тогда
			КнопкаРассчитатьРаботника.Заголовок = НСтр("ru = 'Рассчитать сотрудника'");
		КонецЕсли;
		
		ТекущееФизЛицо = ФизЛицоСтроки;
		
	Иначе
		
		Если ТекущееФизЛицо <> ФизЛицоСтроки Тогда
			ФИО = ФамилияИнициалыФизЛица(ФизЛицоСтроки);
			НовыйЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Рассчитать %1'"), ФИО);
			Если ВРег(КнопкаРассчитатьРаботника.Заголовок) <> ВРег(НовыйЗаголовок) Тогда 
				КнопкаРассчитатьРаботника.Заголовок = НовыйЗаголовок;
			КонецЕсли;
			ТекущееФизЛицо = ФизЛицоСтроки;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФизЛицоСтроки) И НЕ ИмяТЧ = "" Тогда
		СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы[ИмяТЧ], СинхронизируемыеТабличныеЧасти, "ФизЛицо");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковИПНСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ИсчисленныйИПН.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковОПВСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ИсчисленныйОПВ.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковВОСМССписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ИсчисленныеВОСМС.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковУдержанияСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.Удержания.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковНалоговыеВычетыСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.НалоговыеВычеты.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			МассивСтрок = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		Исключение
			МассивСтрок = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		КонецПопытки;

		Если МассивСтрок.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;
	                            
КонецПроцедуры 

&НаКлиенте
Процедура ИсчисленныйИПНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		
		Если ТекущееФизЛицо_Контрагент <> Элемент.ТекущиеДанные.ФизЛицо
				ИЛИ ТекущийМесяцНалоговогоПериода <> Элемент.ТекущиеДанные.МесяцНалоговогоПериода Тогда
	
			УдалитьСтрокиТаблицыВычетыИПН(ТекущееФизЛицо_Контрагент, ТекущийМесяцНалоговогоПериода, Объект.ВычетыИПН);
	
			ТекущееФизЛицо_Контрагент		= Неопределено;
			ТекущийМесяцНалоговогоПериода   = Неопределено;
		КонецЕсли;
		
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
		ИПНПодробностиРасчетаПрочитаны = Ложь;
		Если ОтображатьПодробностиРасчетаИПН Тогда
			РассчитатьДополнительныеСведенияНаСервере("ПодробноИПН");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйОПВПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
		ОПВПодробностиРасчетаПрочитаны = Ложь;
		Если ОтображатьПодробностиРасчетаОПВ Тогда
			РассчитатьДополнительныеСведенияНаСервере("ПодробноОПВ");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
		ВОСМСПодробностиРасчетаПрочитаны = Ложь;
		Если ОтображатьПодробностиРасчетаВОСМС Тогда
			РассчитатьДополнительныеСведенияНаСервере("ПодробноВОСМС");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеВычетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФамилияИнициалыФизЛица(ФизЛицо) 
	
	Возврат ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ФизЛицо);
	
КонецФункции

&НаСервере
Процедура РассчитатьДополнительныеСведенияНаСервере(ИмяКоманды = Неопределено) Экспорт
	
	Если ИмяКоманды = Неопределено
		ИЛИ ИмяКоманды = "ПодробноОПВ" Тогда
		
		ОПВДанныеДляРасчета 			= Объект.ИсчисленныйОПВ.Выгрузить();
		РасчетОПВДополнительныеДанные	= ПроведениеРасчетовСервер.РасчетОПВДополнительныеДанныеОписаниеТаблицыЗначений();
		ПроведениеРасчетовСервер.РассчитатьОПВДополнительныеДанные(Объект, ОПВДанныеДляРасчета, РасчетОПВДополнительныеДанные);	
		ЗаполнитьДополнительныеДанные(РасчетОПВДополнительныеДанные, 	Объект.ИсчисленныйОПВ);
		ОПВПодробностиРасчетаПрочитаны = Истина;
		
	КонецЕсли;
	
	Если ИмяКоманды = Неопределено
		ИЛИ ИмяКоманды = "ПодробноИПН" Тогда
		
		ИПНДанныеДляРасчета 			= Объект.ИсчисленныйИПН.Выгрузить();
		ОПВДанныеДляРасчета 			= Объект.ИсчисленныйОПВ.Выгрузить();
		ВОСМСДанныеДляРасчета 			= Объект.ИсчисленныеВОСМС.Выгрузить();
		ВычетыИПНДляРасчета 			= Объект.ВычетыИПН.Выгрузить();
		РасчетИПНДополнительныеДанные	= ПроведениеРасчетовСервер.РасчетИПНДополнительныеДанныеОписаниеТаблицыЗначений();
		ПроведениеРасчетовСервер.РассчитатьИПНДополнительныеДанные(Объект, ИПНДанныеДляРасчета, ОПВДанныеДляРасчета, ВОСМСДанныеДляРасчета, РасчетИПНДополнительныеДанные,ВычетыИПНДляРасчета);	
		ЗаполнитьДополнительныеДанные(РасчетИПНДополнительныеДанные, 	Объект.ИсчисленныйИПН);
		ИПНПодробностиРасчетаПрочитаны = Истина;
		
	КонецЕсли;	
	
	Если ИмяКоманды = Неопределено
		ИЛИ ИмяКоманды = "ПодробноВОСМС" Тогда
		
		ВОСМСДанныеДляРасчета 			= Объект.ИсчисленныеВОСМС.Выгрузить();
		РасчетВОСМСДополнительныеДанные	= ПроведениеРасчетовСервер.РасчетВОСМСДополнительныеДанныеОписаниеТаблицыЗначений();
		ПроведениеРасчетовСервер.РассчитатьВОСМСДополнительныеДанные(Объект, ВОСМСДанныеДляРасчета, РасчетВОСМСДополнительныеДанные);	
		ЗаполнитьДополнительныеДанные(РасчетВОСМСДополнительныеДанные, 	Объект.ИсчисленныеВОСМС);
		ВОСМСПодробностиРасчетаПрочитаны = Истина;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПереключенияПодробностейрасчета(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПодробноОПВ.Пометка 	= Форма.ОтображатьПодробностиРасчетаОПВ;
	Элементы.ПодробноИПН.Пометка 	= Форма.ОтображатьПодробностиРасчетаИПН;	
	Элементы.ПодробноВОСМС.Пометка 	= Форма.ОтображатьПодробностиРасчетаВОСМС;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
			
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;		
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковВОСМССписокЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
			
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПодробноПримененныеВычетыИПН(ПараметрыОтбора)
	ПараметрыПодробноПримененныеВычетыИПН = Новый Структура;
	
	Запрос 		 = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВычетыИПН.ФизЛицо,
	|	ВычетыИПН.ВидВычета КАК ВидВычета,
	|	ВычетыИПН.РазрешенныйВычет,
	|	ВычетыИПН.ПримененныйВычет,
	|	ВычетыИПН.МесяцНалоговогоПериода
	|ПОМЕСТИТЬ вт_ВычетыИПН
	|ИЗ
	|	&ТаблицаВычетыИПН КАК ВычетыИПН
	|ГДЕ
	|	ВычетыИПН.ФизЛицо = &ФизЛицо
	|	И ВычетыИПН.МесяцНалоговогоПериода = &МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВычетыИПН.ФизЛицо,
	|	вт_ВычетыИПН.ВидВычета,
	|	СУММА(вт_ВычетыИПН.РазрешенныйВычет) КАК РазрешенныйВычет,
	|	СУММА(вт_ВычетыИПН.ПримененныйВычет) КАК ПримененныйВычет,
	|	вт_ВычетыИПН.МесяцНалоговогоПериода,
	|	ВычетыИПН.Приоритет КАК Приоритет
	|ИЗ
	|	вт_ВычетыИПН КАК вт_ВычетыИПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
	|		ПО вт_ВычетыИПН.ВидВычета = ВычетыИПН.Ссылка
	|ГДЕ
	|	ВычетыИПН.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_ВычетыИПН.ВидВычета
	|			ИЗ
	|				вт_ВычетыИПН КАК вт_ВычетыИПН)
	|	И НЕ(вт_ВычетыИПН.РазрешенныйВычет = 0
	|				И вт_ВычетыИПН.ПримененныйВычет = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ВычетыИПН.МесяцНалоговогоПериода,
	|	вт_ВычетыИПН.ФизЛицо,
	|	вт_ВычетыИПН.ВидВычета,
	|	ВычетыИПН.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
				   
	Запрос.УстановитьПараметр("ТаблицаВычетыИПН"		,Объект.ВычетыИПН.Выгрузить());
	Запрос.УстановитьПараметр("ФизЛицо"					,ПараметрыОтбора.ФизЛицо);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода"	,ПараметрыОтбора.МесяцНалоговогоПериода);
	
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("ФизЛицо"					, ПараметрыОтбора.ФизЛицо);
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("МесяцНалоговогоПериода"		, ПараметрыОтбора.МесяцНалоговогоПериода);
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("АдресХранилищаВычетыИПН"	, ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(),УникальныйИдентификатор));
	
	Возврат ПараметрыПодробноПримененныеВычетыИПН;
	
КонецФункции	

&НаКлиенте
Процедура ИсчисленныйИПНПримененныеВычетыИПННажатие(ТекущиеДанные)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФизЛицо"					, ТекущиеДанные.ФизЛицо);
	ПараметрыОтбора.Вставить("МесяцНалоговогоПериода"	, ТекущиеДанные.МесяцНалоговогоПериода);
	
	ПараметрыФормы = ПолучитьПараметрыПодробноПримененныеВычетыИПН(ПараметрыОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПримененныеВычетыИПННажатие", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеИПН",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПримененныеВычетыИПННажатие(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) 
			И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		МесяцНалоговогоПериода 	= ?(ВыбранноеЗначение.Свойство("МесяцНалоговогоПериода"), ВыбранноеЗначение.МесяцНалоговогоПериода, Неопределено);
		ФизЛицо 				= ?(ВыбранноеЗначение.Свойство("ФизЛицо")				, ВыбранноеЗначение.ФизЛицо				  , Неопределено);
		
		Если ЗначениеЗаполнено(МесяцНалоговогоПериода) 
				И ЗначениеЗаполнено(ФизЛицо) Тогда 
			УдалитьСтрокиТаблицыВычетыИПН(ФизЛицо, МесяцНалоговогоПериода, Объект.ВычетыИПН);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		ПослеЗакрытияПримененныеВычетыИПННажатиеНаСервере(ВыбранноеЗначение);	
		
		ИПНПодробностиРасчетаПрочитаны = Ложь;
		
		РассчитатьДополнительныеСведенияНаСервере("ПодробноИПН");
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПослеЗакрытияПримененныеВычетыИПННажатиеНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Свойство("АдресХранилищаВычетыИПН") И
			ЭтоАдресВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВычетыИПН) Тогда	
		
		ТаблицаВычетыИПН 		= ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВычетыИПН);
		
		Если ТипЗнч(ТаблицаВычетыИПН) = Тип("ТаблицаЗначений") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВычетыИПН, Объект.ВычетыИПН);
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиТаблицыВычетыИПН(ФизЛицо, МесяцНалоговогоПериода, ТаблицаВычетыИПН)
	
	УдаляемыеСтроки = ТаблицаВычетыИПН.НайтиСтроки(Новый Структура("ФизЛицо, МесяцНалоговогоПериода", ФизЛицо, МесяцНалоговогоПериода));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаВычетыИПН.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПлановыеУдержанияСотрудникаНаСервере (МассивСотрудников)
	
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.СтруктурноеПодразделение,
		Объект.Организация,
		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	РасчетДляИП = (Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	// узнаем учетную политику по налоговому учету
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Объект.Организация, Объект.Дата);
	
	// При автозаполнении будем исключать физлицо, если организация является ИП на основе СНР
	ИсключитьДанныеИП = (РасчетДляИП И НЕ ОрганизацияЯвляетсяПлательщикомСН);
	
	// При заполнении СО будем учитывать требуется ли ежемесячный расчет
	ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Объект.Организация, Объект.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Объект.Организация);
	Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПодразделение" , Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамДействиеПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("парамРегистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("парамВидРасчета", Объект.ВидРасчета);
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетовФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = УчетнаяПолитикаСервер.ПолучитьТекстЗапросаУчетнойПолитикиПоПерсоналу();
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = СтрЗаменить(УчетнаяПолитикаПоПерсоналуОрганизацииТекст,"РАЗРЕШЕННЫЕ","");
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Объект.ПодразделениеОрганизации = ПустоеПодразделение Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация";
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		УсловиеНаВидРасчета = "ПлановыеУдержания.ВидРасчета = &парамВидРасчета";
	Иначе
		УсловиеНаВидРасчета = "";
	КонецЕсли;
	
	//СписокРаботниковТекст
	//Описание:
	//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и принятых за месяц,
	//  а также переведенных в середине месяца из других обособленных подразделений
	СписокРаботниковТекст = "
	|		// срез работников на начало месяца
	|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|			РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо
	|		ПОМЕСТИТЬ ВТ_СписокРаботников1
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(РаботникиОрганизацийСрезПоследних.Регистратор) = ТИП(Документ.ПриемНаРаботуВОрганизацию)
	|						ТОГДА РаботникиОрганизацийСрезПоследних.Регистратор
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК Регистратор,
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизацийСрезПоследних.Организация КАК Организация
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизацийСрезПоследних
	|
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
	|				РаботникиОрганизацийСрезПоследних.Организация) КАК АктуальныйСписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&парамНачало, 
	|					Организация = &парамГоловнаяОрганизация 
	|					И (Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)) КАК РаботникиОрганизации
	|				ПО АктуальныйСписокРаботников.Физлицо = РаботникиОрганизации.Сотрудник.Физлицо
	|					И АктуальныйСписокРаботников.Организация = РаботникиОрганизации.Организация
	|					И (ВЫБОР
	|						КОГДА АктуальныйСписокРаботников.Регистратор <> ЛОЖЬ
	|							ТОГДА РаботникиОрганизации.Регистратор = АктуальныйСписокРаботников.Регистратор
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ)
	|		ГДЕ
	|			РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
	|			И ФизЛицо В (&МассивСотрудников)
	
	|		" + ?(ПоВсемПодразделениямОрганизации, "", " И " + УсловиеНаПодразделение) + "
	|		
	|		ОБЪЕДИНИТЬ
	|
	|		// движения работников за месяц
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки,
	|									МАКСИМУМ(ПредыдущееНазначение.Период) КАК ДатаПредыдущегоНазначения
	|								ИЗ
	|									РегистрСведений.РаботникиОрганизаций КАК ТекущееНазначение
	|									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущееНазначение
	|										ПО ТекущееНазначение.Сотрудник = ПредыдущееНазначение.Сотрудник
	|											И ПредыдущееНазначение.Организация = &парамГоловнаяОрганизация
	|											И ПредыдущееНазначение.Период < ТекущееНазначение.Период
	|											И ПредыдущееНазначение.Активность
	|								ГДЕ
	|									ТекущееНазначение.Период > &парамНачало
	|									И ТекущееНазначение.Период <= &парамКонец
	|									И ТекущееНазначение.Организация = &парамГоловнаяОрганизация
	|									И ТекущееНазначение.ОбособленноеПодразделение = &парамОрганизация
	|									И ТекущееНазначение.Активность
	|								СГРУППИРОВАТЬ ПО
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки) КАК ДатыПредыдущихНазначений
	|				ПО РаботникиОрганизации.Регистратор = ДатыПредыдущихНазначений.Регистратор
	|					И РаботникиОрганизации.НомерСтроки = ДатыПредыдущихНазначений.НомерСтроки
	|					
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущиеНазначения
	|				ПО РаботникиОрганизации.Сотрудник = ПредыдущиеНазначения.Сотрудник
	|					И ПредыдущиеНазначения.Организация = &парамГоловнаяОрганизация
	|					И ДатыПредыдущихНазначений.ДатаПредыдущегоНазначения = ПредыдущиеНазначения.Период
	|					И ПредыдущиеНазначения.Активность
	|		
	|		ГДЕ
	|			РаботникиОрганизации.Период > &парамНачало
	|			И РаботникиОрганизации.Период <= &парамКонец
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния = &Принят
	|					ИЛИ РаботникиОрганизации.ОбособленноеПодразделение <> ПредыдущиеНазначения.ОбособленноеПодразделение
	|					ИЛИ РаботникиОрганизации.СтруктурноеПодразделение <> ПредыдущиеНазначения.СтруктурноеПодразделение)
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|			И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|			И РаботникиОрганизации.Активность
	|				И РаботникиОрганизации.Сотрудник В (&МассивСотрудников)
	|			" + ?(ПоВсемПодразделениямОрганизации, "", " И " + УсловиеНаПодразделение) + "
	|";
	Запрос.Текст = СписокРаботниковТекст;
	Запрос.Выполнить();
	СписокРаботниковТекст = "ВТ_СписокРаботников1";
	
	// заполнение табличной части "Удержания"
	//Основной текст запроса
	УдержанияТекст = "
    | ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	РасчетЕдиногоПлатежа.Ссылка КАК Ссылка,
    |	РасчетЕдиногоПлатежа.Ссылка.Организация КАК Организация,
    |	РасчетЕдиногоПлатежа.ФизЛицо КАК ФизЛицо,
    |	РасчетЕдиногоПлатежа.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
    |	РасчетЕдиногоПлатежа.ДокументОснование КАК ДокументОснование,
    |   РасчетЕдиногоПлатежа.ВидРасчета КАК ВидРасчета 
    |ПОМЕСТИТЬ ВТ_РанееСделанныеУдержания
    |ИЗ
    |	Документ.РасчетЕдиногоПлатежа.Удержания КАК РасчетЕдиногоПлатежа
    |ГДЕ
    |	РасчетЕдиногоПлатежа.Ссылка <> &парамРегистратор
    |	И РасчетЕдиногоПлатежа.Ссылка.Проведен
    |	И РасчетЕдиногоПлатежа.Ссылка.ПериодРегистрации = &парамНачало
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка,
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка.Организация,
    |	РасчетУдержанийРаботниковОрганизаций.ФизЛицо,
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка.ПериодРегистрации,
    |	РасчетУдержанийРаботниковОрганизаций.ДокументОснование,
    |   РасчетУдержанийРаботниковОрганизаций.ВидРасчета КАК ВидРасчета 
    |ИЗ
    |	Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК РасчетУдержанийРаботниковОрганизаций
    |ГДЕ
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка <> &парамРегистратор
    |	И РасчетУдержанийРаботниковОрганизаций.Ссылка.Проведен
    |	И РасчетУдержанийРаботниковОрганизаций.Ссылка.ПериодРегистрации = &парамНачало
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыеУдержания.ФизЛицо,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ПлановыеУдержания.Размер КАК Размер,
	|
	|	ВЫБОР
	|		КОГДА ПлановыеУдержания.Период < &парамНачало ТОГДА &парамНачало
	|		ИНАЧЕ ПлановыеУдержания.Период
	|	КОНЕЦ КАК ДатаНачала,
	|
	|	ВЫБОР
	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеУдержания.ПериодЗавершения <= &парамКонец
	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец))
	|	КОНЕЦ КАК ДатаОкончания,
	|
	|	ПлановыеУдержания.ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДанныеПлановыхУдержаний
	|ИЗ
	|	" + СписокРаботниковТекст + " КАК Работники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
	|		ПО Работники.ФизЛицо = ПлановыеУдержания.ФизЛицо
	|			И ПлановыеУдержания.Активность
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
	|			И СледующиеПлановыеУдержания.Период <= &парамКонец
	|			И СледующиеПлановыеУдержания.Активность
	|
	|	// для предотвращения дублирования удержаний за один период регистрации в одном и том же ОбособленномПодразделении,
	|	// а для расчетов фиксированной суммой - один раз в целом по головной организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееСделанныеУдержания КАК РанееСделанныеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + УчетнаяПолитикаПоПерсоналуОрганизацииТекст + ") КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|			ПО РанееСделанныеУдержания.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ПО ВЫБОР
	|				КОГДА ПлановыеУдержания.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетовФиксированнойСуммой)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации = ИСТИНА ТОГДА
	|								ВЫБОР
	|									КОГДА РанееСделанныеУдержания.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|										ТОГДА РанееСделанныеУдержания.Организация
	|									ИНАЧЕ РанееСделанныеУдержания.Организация.ГоловнаяОрганизация
	|								КОНЕЦ
	|							ИНАЧЕ РанееСделанныеУдержания.Организация
	|						  КОНЕЦ = &парамГоловнаяОрганизация
	|				ИНАЧЕ РанееСделанныеУдержания.Организация = &парамОрганизация
	|			КОНЕЦ
	|			И РанееСделанныеУдержания.ФизЛицо = ПлановыеУдержания.ФизЛицо 
	|			И РанееСделанныеУдержания.ВидРасчета = ПлановыеУдержания.ВидРасчета 
	|			И ВЫБОР
	|				КОГДА НЕ (РанееСделанныеУдержания.ДокументОснование.Ссылка ЕСТЬ NULL)
	|					ТОГДА РанееСделанныеУдержания.ДокументОснование = ПлановыеУдержания.ДокументОснование
	|				ИНАЧЕ ИСТИНА
	|			  КОНЕЦ
	|
	|ГДЕ
	|	ПлановыеУдержания.Организация = &парамГоловнаяОрганизация
	|	И ПлановыеУдержания.Период <= &парамКонец
	|	И ВЫБОР
	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
	|				И ПлановыеУдержания.ПериодЗавершения < &парамНачало ТОГДА ПлановыеУдержания.ДействиеЗавершения
	|		ИНАЧЕ ПлановыеУдержания.Действие
	|	  КОНЕЦ <> &парамДействиеПрекратить
	|	И РанееСделанныеУдержания.ФизЛицо ЕСТЬ NULL
	|	" + ?(УсловиеНаВидРасчета <> "", " И " + УсловиеНаВидРасчета, "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержания.ФизЛицо,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.Размер,
	|
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.ПериодЗавершения,
	|	ПлановыеУдержания.ДокументОснование
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец)) >= &парамНачало
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеПлановыхУдержаний.ФизЛицо,
	|	ВТ_ДанныеПлановыхУдержаний.ВидРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.СпособРасчета,
	|	МАКСИМУМ(ВТ_ДанныеПлановыхУдержаний.ДатаНачала) КАК ДатаНачала,
	|	ВТ_ДанныеПлановыхУдержаний.ДокументОснование
	|ПОМЕСТИТЬ ВТ_ПериодыПлановыхУдержаний
	|ИЗ
	|	ВТ_ДанныеПлановыхУдержаний КАК ВТ_ДанныеПлановыхУдержаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеПлановыхУдержаний.ФизЛицо,
	|	ВТ_ДанныеПлановыхУдержаний.СпособРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.ВидРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПлановыхУдержаний.ФизЛицо,
	|	ДанныеПлановыхУдержаний.ВидРасчета,
	|	ДанныеПлановыхУдержаний.СпособРасчета,
	|	ДанныеПлановыхУдержаний.Размер,
	|	ДанныеПлановыхУдержаний.ДатаНачала,
	|	ДанныеПлановыхУдержаний.ДатаОкончания,
	|	ДанныеПлановыхУдержаний.ДокументОснование
	|ИЗ
	|	ВТ_ДанныеПлановыхУдержаний КАК ДанныеПлановыхУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПлановыхУдержаний КАК ВТ_ПериодыПлановыхУдержаний
	|		ПО ДанныеПлановыхУдержаний.ФизЛицо = ВТ_ПериодыПлановыхУдержаний.ФизЛицо
	|			И ДанныеПлановыхУдержаний.ВидРасчета = ВТ_ПериодыПлановыхУдержаний.ВидРасчета
	|			И ДанныеПлановыхУдержаний.СпособРасчета = ВТ_ПериодыПлановыхУдержаний.СпособРасчета
	|			И ДанныеПлановыхУдержаний.ДокументОснование = ВТ_ПериодыПлановыхУдержаний.ДокументОснование
	|			И ДанныеПлановыхУдержаний.ДатаНачала = ВТ_ПериодыПлановыхУдержаний.ДатаНачала
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПлановыхУдержаний.Физлицо.Наименование,
	|	ДанныеПлановыхУдержаний.ДокументОснование,
	|	ДанныеПлановыхУдержаний.ВидРасчета,
	|	ДанныеПлановыхУдержаний.ДатаНачала
	|";	
	
	Запрос.Текст = УдержанияТекст;
	ТЗУдержания = Запрос.Выполнить().Выгрузить();
	
	// Удалим из таблицы удержаний удержания почтового сбора, если для соответствующего документа-основания нет удержаний алиментов.
	// Такое может быть, если удержание по ИЛ фикс. суммой и уже было удержано в текущем месяце в другой обособленной организации.
	ТЗУдержания.Индексы.Добавить("ДокументОснование");
	ТЗУдержания.Индексы.Добавить("СпособРасчета");
	
	СтруктураПоиска = Новый Структура("СпособРасчета");
	СтруктураПоиска.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор;
	НайденныеСтрокиПочтовогоСбора = ТЗУдержания.НайтиСтроки(СтруктураПоиска);
	
	МассивУдаляемыхСтрок = Новый Массив();
	
	СтруктураПоиска.Очистить();
	СтруктураПоиска.Вставить("ДокументОснование");
	Для Каждого СтрокаПочтовогоСбора Из НайденныеСтрокиПочтовогоСбора Цикл
		СтруктураПоиска.ДокументОснование = СтрокаПочтовогоСбора.ДокументОснование;
		НайденныеСтрокиДокумента = ТЗУдержания.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиДокумента.Количество() = 1 Тогда // только одна строка с таким документом-основанием - сам почтовый сбор
			// запоминаем, что надо удалить такую строку из таблицы значений
			МассивУдаляемыхСтрок.Добавить(СтрокаПочтовогоСбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗначений Из ТЗУдержания Цикл
		Если СтрокаЗначений.ФизЛицо <> Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ФизЛицо", СтрокаЗначений.ФизЛицо);
			НайденныеСтрокиТабличнойЧасти  = Объект.Удержания.НайтиСтроки(ПараметрыОтбора);
			НайденныеСтрокиТЗУдержания = ТЗУдержания.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтрокиТабличнойЧасти <> Неопределено 
				И НайденныеСтрокиТабличнойЧасти[0].ВидРасчета = СтрокаЗначений.ВидРасчета Тогда
				Продолжить;
			ИначеЕсли НайденныеСтрокиТабличнойЧасти <> Неопределено 
				И НайденныеСтрокиТабличнойЧасти[0].ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка() Тогда
				НайденныеСтрокиТабличнойЧасти[0].ВидРасчета        = СтрокаЗначений.ВидРасчета;
				НайденныеСтрокиТабличнойЧасти[0].Размер            = СтрокаЗначений.Размер;
				
			Иначе
				НоваяСтрокаТабличнойЧасти            = Объект.Удержания.Добавить();
				НоваяСтрокаТабличнойЧасти.ФизЛицо    = СтрокаЗначений.ФизЛицо;
				НоваяСтрокаТабличнойЧасти.ВидРасчета = СтрокаЗначений.ВидРасчета;
				НоваяСтрокаТабличнойЧасти.Размер     = СтрокаЗначений.Размер;
				НоваяСтрокаТабличнойЧасти.ДокументОснование     = СтрокаЗначений.ДокументОснование;

				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидРасчета", ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка());
	НайденныеСтрокиТабличнойЧасти  = Объект.Удержания.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗначений Из НайденныеСтрокиТабличнойЧасти Цикл
		Объект.Удержания.Удалить(СтрокаЗначений);
	КонецЦикла;	
		
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПоПериодуРегистрации(Форма, ПериодРегистрации)
	
	ЭлементыФормы = Форма.Элементы;
	
	ПериодРегистрацииДо2018 = ПериодРегистрации < Дата(2018,1,1);
	
	ЭлементыФормы.ГруппаПрочиеВычеты.Видимость 	  = ПериодРегистрацииДо2018;	
	ЭлементыФормы.ФормаРассчитатьВычеты.Видимость = ПериодРегистрацииДо2018;	
	
	ПериодРегистрацииПосле2019 = ПериодРегистрации >= Дата(2019,1,1);
	ПериодРегистрацииПосле2021 = ПериодРегистрации >= Дата(2021,1,1);
	
	Если ПериодРегистрацииПосле2021 Тогда
		
		ЭлементыФормы.ИсчисленныйИПНПримененнаяЛьготаЗаМесяц.Заголовок = НСтр("ru = 'Сумма уменьшения облагаемого дохода'");
		
	ИначеЕсли ПериодРегистрацииПосле2019 Тогда
		
		ЭлементыФормы.ИсчисленныйИПНПримененнаяЛьготаЗаМесяц.Заголовок = НСтр("ru = 'Примененная корректировка дохода'");
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсчисленныйОПВФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
			
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковОПВСписокЗавершениеВыбора", ЭтотОбъект);
		
		Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
		Иначе
			
			ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
			
			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		КонецЕсли;		
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")));
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковОПВСписокЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОбработчикОповещения);
			
	КонецЕсли;

КонецПроцедуры

СинхронизируемыеТабличныеЧасти = Новый Соответствие;
СинхронизируемыеТабличныеЧасти["ИсчисленныйИПН"]  = Ложь;
СинхронизируемыеТабличныеЧасти["ИсчисленныйОПВ"]  = Ложь;
СинхронизируемыеТабличныеЧасти["ИсчисленныеВОСМС"]= Ложь;
СинхронизируемыеТабличныеЧасти["Удержания"]	   	  = Ложь;
СинхронизируемыеТабличныеЧасти["НалоговыеВычеты"] = Ложь;
ЭтоРедактированиеСтроки = Ложь;

