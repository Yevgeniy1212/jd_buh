#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ФизическиеЛица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ЭтотОбъект.ИсчисленныйИПН.Количество() > 0 
		ИЛИ ЭтотОбъект.ИсчисленныйОПВ.Количество() > 0
		ИЛИ ЭтотОбъект.ИсчисленныеВОСМС.Количество() > 0
		ИЛИ ЭтотОбъект.Удержания.Количество() > 0 
		ИЛИ ЭтотОбъект.НалоговыеВычеты.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныйИПН");
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныйОПВ");
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныеВОСМС");
		МассивНепроверяемыхРеквизитов.Добавить("Удержания");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговыеВычеты");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ИсчисленныйИПН);
	МассивТЧ.Добавить(ИсчисленныйОПВ);
 	МассивТЧ.Добавить(ИсчисленныеВОСМС);
	МассивТЧ.Добавить(Удержания);
	МассивТЧ.Добавить(НалоговыеВычеты);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РасчетУдержанийРаботниковОрганизаций.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	// ИПН
	ТаблицаИПНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																						ПараметрыПроведения.ИПНСведенияОДоходах, 
																						"Целиком", 
																						Движения.ИПНСведенияОДоходах.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИПНСведенияОДоходах,  	"ИПНСведенияОДоходах",	Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвиженияИПНРасчетыСБюджетом(Реквизиты, ПараметрыПроведения.ИсчисленныйИПН, Движения, Отказ, Реквизиты.УпрощенныйУчетИПНиОПВ);
	
	// ОПВ
	ТаблицаОПВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																						ПараметрыПроведения.ОПВСведенияОДоходах, 
																						"Целиком", 
																						Движения.ОПВСведенияОДоходах.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВСведенияОДоходах,  	"ОПВСведенияОДоходах",	Движения, Отказ);
	ТаблицаИсчисленныйОПВ = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчисленныйОПВ,
																						Движения.ОПВРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчисленныйОПВ,  	"ОПВРасчетыСФондами",  	Движения, Отказ);
	
	// ВОСМС
	ТаблицаВОСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																						ПараметрыПроведения.ВОСМССведенияОДоходах, 
																						"Целиком", 
																						Движения.ВОСМССведенияОДоходах.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВОСМССведенияОДоходах,  "ВОСМССведенияОДоходах",	Движения, Отказ);
	ТаблицаИсчисленныеВОСМС = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчисленныеВОСМС,
																						Движения.ВОСМСРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчисленныеВОСМС,  	"ВОСМСРасчетыСФондами",  	Движения, Отказ);
	
	
	Если Реквизиты.УпрощенныйУчетИПНиОПВ Тогда
		//ОПВ
		ОПВПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ОПВПодлежитПеречислениюВФонды,
																						Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ОПВПодлежитПеречислениюВФонды, "ОПВПодлежитПеречислениюВФонды", Движения, Отказ);
		
		//ВОСМС
		ВОСМСПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ВОСМСПодлежитПеречислениюВФонды,
																						Движения.ВОСМСПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ВОСМСПодлежитПеречислениюВФонды, "ВОСМСПодлежитПеречислениюВФонды", Движения, Отказ);
	ИначеЕсли Реквизиты.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		//ОПВ
		ОПВПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ОПВПодлежитПеречислениюВФонды,
																						Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ОПВПодлежитПеречислениюВФонды, "ОПВПодлежитПеречислениюВФонды", Движения, Отказ);
		
		//ВОСМС
		ВОСМСПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ВОСМСПодлежитПеречислениюВФонды,
																						Движения.ВОСМСПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ВОСМСПодлежитПеречислениюВФонды, "ВОСМСПодлежитПеречислениюВФонды", Движения, Отказ);
	КонецЕсли;

	// Взаиморасчеты с получателями ИЛ	
	ТаблицаВзаиморасчетыСПолучателямиИЛ = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыСПолучателямиИЛ,
																					Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСПолучателямиИЛ, 	"ВзаиморасчетыОрганизацийСПолучателямиИЛ",  Движения, Отказ);
	
	// Взаиморасчеты с работниками
	ТаблицаВзаиморасчетыСРаботниками = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыСРаботникамиОрганизаций,
																					Движения.ВзаиморасчетыСРаботникамиОрганизаций.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСРаботниками,	"ВзаиморасчетыСРаботникамиОрганизаций", Движения, Отказ);
	
	// Взаиморасчеты с контрагентами-физлицами
	ТаблицаВзаиморасчетыСКонтрагентами = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчетыСКонтрагентами(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами,
																					Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСКонтрагентами,	"ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами", Движения, Отказ);
	
	// Выплаченные доходы по НУ
	ТаблицаВыплаченныеДоходы = РасчетЗарплатыСервер.ПодготовитьТаблицуВыплаченныеДоходыНУ(Реквизиты,
																						ПараметрыПроведения.ВыплаченныеДоходыНУ,
																						Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.ВыгрузитьКолонки(),
																						ВидДвиженияНакопления.Приход,
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВыплаченныеДоходы,   		"ВыплаченныеДоходыРаботникамОрганизацийНУ",	Движения, Отказ);

	// Вычеты ИПН
	ТаблицаСведенияОбИсчисленииВычетовИПН = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОбИсчисленииВычетовИПН(Реквизиты, 
																						ПараметрыПроведения.СведенияОбИсчисленииВычетовИПН, 
																						Движения.СведенияОбИсчисленииВычетовИПН.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСведенияОбИсчисленииВычетовИПН,  "СведенияОбИсчисленииВычетовИПН",	Движения, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
