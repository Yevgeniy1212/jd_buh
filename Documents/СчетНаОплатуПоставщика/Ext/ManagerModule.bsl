#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПоставщикаУслуги.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
	|ГДЕ
	|	СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать счета на оплату
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетЗаказНаОплату",
			НСтр("ru = 'Счет на оплату'"),
			ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетНаОплатуПоставщика.ПФ_MXL_СчетЗаказ");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетЗаказНаОплату"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Контрагент КАК Поставщик,
	|	Организация КАК Руководители,
	|	Организация КАК Получатель,
	|	СтруктурнаяЕдиница,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|   КодНазначенияПлатежа,
	|	Ответственный
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В (&МассивОбъектов)";

	Шапка = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "СчетНаОплатуПоставщика_СчетЗаказ";
                   
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВложенныйЗапрос.Ссылка КАК Ссылка,
				   |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Товар,
				   |	ВложенныйЗапрос.КодАртикул,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
				   |	ВложенныйЗапрос.Цена,
				   |	ВложенныйЗапрос.Сумма,
				   |	ВложенныйЗапрос.СуммаНДС,
				   |	ВложенныйЗапрос.НомерСтроки,
				   |	ВложенныйЗапрос.ID
				   |ИЗ
				   |	(ВЫБРАТЬ 
	               |	ВложенныйЗапрос.Ссылка КАК Ссылка,
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	               |	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	               |	ВложенныйЗапрос.Количество,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.СуммаНДС,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	1 КАК ID
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказПокупателя.Ссылка КАК Ссылка,
	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	               |		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	               |		ЗаказПокупателя.Цена КАК Цена,
	               |		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	               |		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	               |		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
	               |		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.СчетНаОплатуПоставщика.Товары КАК ЗаказПокупателя
	               |	ГДЕ
	               |		ЗаказПокупателя.Ссылка В (&МассивОбъектов)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказПокупателя.Ссылка,
	               |		ЗаказПокупателя.Номенклатура,
	               |		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	               |		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка,
	               |	ЗаказПокупателя.Содержание,
	               |	ЗаказПокупателя.Содержание,
	               |	ЗаказПокупателя.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	               |	ЗаказПокупателя.Количество,
	               |	ЕСТЬNULL(ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование, ""--""),
	               |	ЗаказПокупателя.Цена,
	               |	ЗаказПокупателя.Сумма,
	               |	ЗаказПокупателя.СуммаНДС,
	               |	ЗаказПокупателя.НомерСтроки,
	               |	2
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика.Услуги КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка В (&МассивОбъектов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка,
	               |	ЗаказПокупателя.ОсновноеСредство,
	               |	ВЫРАЗИТЬ(ЗаказПокупателя.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
	               |	NULL,
	               |	1,
	               |	""шт"",
	               |	ЗаказПокупателя.Сумма,
	               |	ЗаказПокупателя.Сумма,
	               |	ЗаказПокупателя.СуммаНДС,
	               |	ЗаказПокупателя.НомерСтроки,
	               |	3
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика.ОС КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка В (&МассивОбъектов)) КАК ВложенныйЗапрос
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ID,
				   |	НомерСтроки
				   |
				   |ИТОГИ ПО
				   |	Ссылка";

	ВыборкаДанныхПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				   
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуПоставщика.ПФ_MXL_СчетЗаказ", КодЯзыка);

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Получатель, Шапка.СтруктурноеПодразделение); 
		СведенияОПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
		
		Если ТипЗнч(Шапка.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			
			Банк             = Шапка.СтруктурнаяЕдиница.Банк;
			РеквизитыБанка   = Справочники.Банки.ПолучитьРеквизитыБанка(Банк);
			БИК              = Справочники.Банки.ПолучитьБИКБанка(Шапка.Дата, РеквизитыБанка);
			ГородБанка       = РеквизитыБанка.Город;
			СтрокаГородБанка = ?(ПустаяСтрока(ГородБанка), "", НСтр("ru = ' г.'", КодЯзыка) + " " + ГородБанка);
			НомерСчета       = Шапка.СтруктурнаяЕдиница.НомерСчета;
						
		КонецЕсли;   			
				
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Счет на оплату'", КодЯзыка),,,,КодЯзыка);
		
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
		ОбластьМакетаПоставщик = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакетаПоставщик.Параметры.Заполнить(Шапка);
		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ИдентификационныйНомер,ПолноеНаименование,ЮридическийАдрес,Телефоны,",,Шапка.Дата,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаПоставщик);

		ОбластьМакетаПокупатель = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакетаПокупатель.Параметры.Заполнить(Шапка);
		ОбластьМакетаПокупатель.Параметры.ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "ИдентификационныйНомер,ПолноеНаименование,ЮридическийАдрес,Телефоны,",,Шапка.Дата,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаПокупатель);

		ОбластьМакетаДоговор = Макет.ПолучитьОбласть("Договор");
		ОбластьМакетаДоговор.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакетаДоговор);

		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьШапки + "|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьШапки + "|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть(ОбластьШапки + "|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьДанных.Параметры.Колонка = Колонка;
		КонецЕсли;	
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");

		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьСтроки + "|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьСтроки + "|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		СчетчикСтрок = 0;

		ВыборкаДанныхПоДокументам.Сбросить();
		ВыборкаДанныхПоДокументам.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка));
		ДанныеПоДокументу = ВыборкаДанныхПоДокументам.Выбрать();

		Пока ДанныеПоДокументу.Следующий() Цикл 

			СчетчикСтрок = СчетчикСтрок + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = СчетчикСтрок;
			ТабДокумент.Вывести(ОбластьНомера);

			ОбластьДанных.Параметры.Заполнить(ДанныеПоДокументу);
			ОбластьДанных.Параметры.Товар       = СокрЛП(ДанныеПоДокументу.Товар);
			ОбластьДанных.Параметры.Количество  = Формат(ДанныеПоДокументу.Количество, "ЧДЦ=3");
			Если ВыводитьКоды Тогда
				ОбластьДанных.Параметры.КодАртикул = ?(ДанныеПоДокументу.ID = 3, ДанныеПоДокументу.Номенклатура.Код, ДанныеПоДокументу.КодАртикул);				
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ДанныеПоДокументу);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ДанныеПоДокументу.Сумма;
			СуммаНДС       = СуммаНДС    + ДанныеПоДокументу.СуммаНДС;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		//Вывести ИтогоСНДС
		ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если Шапка.УчитыватьНДС Тогда
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'", КодЯзыка), НСтр("ru = 'Сумма НДС:'", КодЯзыка));
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС,, "-");    
			
			Если НЕ Шапка.СуммаВключаетНДС Тогда 
				ОбластьИтогоСНДС.Параметры.Всего = НСтр("ru = 'Всего:'", КодЯзыка);
				ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма + СуммаНДС);
			КонецЕсли;
		КонецЕсли;    
		
		ТабДокумент.Присоединить(ОбластьДанных);
		
		ТабДокумент.Присоединить(ОбластьСуммы);        
		
		ТабДокумент.Вывести(ОбластьИтогоСНДС);
		
		// Вывести Сумму прописью
		ОбластьМакетаСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакетаСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'", КодЯзыка), 
			ДанныеПоДокументу.Количество(), 
			ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
			
		ОбластьМакетаСуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыка);
			
		ТабДокумент.Вывести(ОбластьМакетаСуммаПрописью);

		// Вывести подписи
	   	ОбластьМакетаПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");  
		
		ОбластьМакетаПодвалЗаказа.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакетаПодвалЗаказа);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.СтруктурноеПодразделение КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ответственный КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ДанныеСопоставление	= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МассивНаименование	  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Наименование");
	МассивАртикул 		  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Артикул");
		
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Наименование");
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Артикул");
   	
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Наименование",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Артикул", 		     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивНаименование, 	  "Номенклатура_Наименование");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивАртикул, 		  "Номенклатура_Артикул");
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Номенклатура_Наименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Номенклатура_Артикул КАК ВнешнийАртикул, 
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Товары.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Товары.Ссылка КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Наименование = ЗагружаемыеДанные.ВнешнееНаименование)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнееНаименование <> """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор,
	|		Товары.Ссылка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Артикул = ЗагружаемыеДанные.ВнешнийАртикул)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийАртикул <> """") КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ЗагружаемыеДанные.ВнешнийАртикул КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) КАК КоличествоНоменклатуры
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНоменклатуры КАК Товары
	|		ПО (Товары.Идентификатор = ЗагружаемыеДанные.Идентификатор)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСопоставление, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(&ВнешнийАртикул <> """"
		|		И СпрНоменклатура.Артикул = &ВнешнийАртикул)
		|	ИЛИ (&ВнешнееНаименование <> """"
		|		И СпрНоменклатура.Наименование = &ВнешнееНаименование)
		|";
		
		Запрос.УстановитьПараметр("ВнешнийАртикул",		 ЗагружаемыеЗначенияСтрока.Номенклатура_Артикул);
		Запрос.УстановитьПараметр("ВнешнееНаименование", ЗагружаемыеЗначенияСтрока.Номенклатура_Наименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

Функция ОплаченнаяСуммаСчета(Организация, СчетНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаСчетовОбороты.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетовОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ОплатаСчетов.Обороты(, , , Организация = &Организация И СчетНаОплату = &СчетНаОплату) КАК ОплатаСчетовОбороты";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции  

Функция ТоварыУслугиПоСчету(СчетНаОплату) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СчетНаОплату);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	СчетНаОплатуПоставщикаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка  
	|
	|ОБЪЕДИНИТЬ ВСЕ  
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаУслуги.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаУслуги.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаУслуги.Содержание КАК Содержание,
	|	ИСТИНА КАК ЭтоУслуга,
	|	СчетНаОплатуПоставщикаУслуги.Количество КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
	|
	|ГДЕ
	|	СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка  
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";  
	
	Запрос.УстановитьПараметр("Ссылка", СчетНаОплату);
	
	ТаблицаТоварыУслуги = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоварыУслуги;
	
КонецФункции
	
#КонецЕсли
