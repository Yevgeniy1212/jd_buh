#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ОсновныеНачисления.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ОсновныеНачисления);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(ОсновныеНачисления, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	РасчетЗарплатыСервер.СформироватьДвижения(ПараметрыПроведения.ТаблицаОсновныеНачисления, "РеглУчетПлановыхНачисленийРаботниковОрганизаций", Движения, Отказ);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда

		Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ЗаполнитьПоПриемНаРаботуВОрганизацию(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") Тогда
		
		Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ЗаполнитьПоКадровоеПеремещениеОрганизаций(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете") Тогда
		
		Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ЗаполнитьПоОтражениеЗарплатыВРеглУчете(ЭтотОбъект, Основание);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ПроверяемаяТабличнаячасть);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Сотрудники"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ТекстСообщения = НСтр("ru='организация документа не соответствует организации, указанной в карточке сотрудника!'");
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Одинаковые строки
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='по сотруднику %1 обнаружено повторное назначение способа учета того же начисления в строке №%2!'"),
				ВыборкаПоСтрокамДокумента.СотрудникНаименование,
				ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки);
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Движения в регистре на дату из документа
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на дату %1 способ учета начисления уже зарегистрирован документом %2!'"),
				ВыборкаПоСтрокамДокумента.ДатаНачала,
				ВыборкаПоСтрокамДокумента.КонфликтныйДокумент);
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Работник организации 
		Если НЕ ВыборкаПоСтрокамДокумента.ЯвляетсяРаботникомОрганизации Тогда 
			ТекстСообщения = НСтр("ru=' не является сотрудником организации на дату указанную в строке!'");
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.СотрудникНаименование + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует запрос по таблице "РаботникиОрганизации" документа.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ПроверяемаяТабличнаячасть)
   
	Запрос = Новый Запрос;

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ПроверяемаяТабличнаячасть);

    // Описание текста запроса:
	//
    // 1. Выборка "Начисления": 
	//		Объединяются строки ТЧ Начисления. Сразу проверяем наличие строк-дублей.  
	// 2. Выборка "СуществующиеДвижения": 
	//		Проверяем на наличие существующих конфликтных движений в регистре сведений. 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧОсновныеНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|	""Основные начисления"" КАК ВидСтроки
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТЧОсновныеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧОсновныеНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|	МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтныйНомерСтроки,
	|	""Основные начисления"" КАК ВидСтроки
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ПовторяющиесяСтроки
	|		ПО ТЧОсновныеНачисления.НомерСтроки > ПовторяющиесяСтроки.НомерСтроки
	|			И ТЧОсновныеНачисления.Сотрудник = ПовторяющиесяСтроки.Сотрудник
	|			И ТЧОсновныеНачисления.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.Сотрудник,
	|	ТЧОсновныеНачисления.ВидРасчета,
	|	ТЧОсновныеНачисления.СпособОтраженияВБухучете,
	|	ТЧОсновныеНачисления.ДатаНачала,
	|	ТЧОсновныеНачисления.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	Начисления.ВидСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.СпособОтраженияВБухучете,
	|	Начисления.ДатаНачала,
	|	Начисления.КонфликтныйНомерСтроки,
	|	Начисления.НомерСтроки,
	|	СуществующиеДвижения.Регистратор.Представление КАК КонфликтныйДокумент,
	|	Начисления.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Период > Начисления.ДатаНачала
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЯвляетсяРаботникомОрганизации,
	|	ВЫБОР
	|		КОГДА Начисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|				ИЛИ Начисления.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	ВТ_ОсновныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК СуществующиеДвижения
	|		ПО Начисления.Сотрудник = СуществующиеДвижения.Сотрудник
	|			И Начисления.ВидРасчета = СуществующиеДвижения.ВидРасчета
	|			И Начисления.ДатаНачала = СуществующиеДвижения.Период
	|			И (СуществующиеДвижения.Организация = &ГоловнаяОрганизация)
	|			И (СуществующиеДвижения.Активность)
	|			И (СуществующиеДвижения.Регистратор <> &ДокументСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
	|		ПО Начисления.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции 

#КонецЕсли   