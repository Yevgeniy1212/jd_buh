#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетВозвратовПокупателя;  		
	Иначе
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаРасчетовСЭквайером(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Эквайрер, Объект.ДоговорВзаиморасчетовЭквайрера);
	Объект.СчетУчетаРасчетовСЭквайрером = СчетаУчета.СчетРасчетовПокупателя;

КонецПроцедуры 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ЗаполнитьПоДокументуОснования(Объект, ДокументОснование) Экспорт
	
	Если ДокументОснование = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	ВидДокументаОснования       = ДокументОснование.Метаданные().Имя;

	Объект.ДокументОснование = ПараметрыДокументаОснования.Ссылка;
		
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",     СчетаУчета.СчетАвансовПокупателя);
		
	КонецЕсли;

	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
		ИЛИ ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
		ИЛИ ВидДокументаОснования = "РеализацияУслугПоПереработке"
		ИЛИ ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 		
		ИЛИ ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
		КонецЕсли; 
		
		Объект.Контрагент 	  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Объект.Контрагент 	  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		
		Объект.ДоговорЭквайринга = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойДоговорЭквайринга");
		Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
			
			Объект.ДоговорВзаиморасчетовЭквайрера = Объект.ДоговорЭквайринга.ДоговорВзаиморасчетов;
			Объект.Эквайрер = Объект.ДоговорЭквайринга.Эквайрер;
			
			СчетаУчетаЭквайра = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
			                                                Объект.Эквайрер, Объект.ДоговорВзаиморасчетовЭквайрера);
															
			Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
				Объект.СчетУчетаРасчетовСЭквайрером = СчетаУчетаЭквайра.СчетВозвратовПокупателя;
			Иначе
				Объект.СчетУчетаРасчетовСЭквайрером = СчетаУчетаЭквайра.СчетРасчетовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(Объект.ДоговорВзаиморасчетовЭквайрера, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = Объект.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ");
		
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам");        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам");        			
		КонецЕсли;  
		
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ВидДокументаОснования = "РеализацияТоваровУслуг" Тогда
			ДокументОснованиеРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ТипЗнч(ДокументОснованиеРТУ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснованиеРТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента 	= Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда

		Объект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
		
		Объект.ВидОплаты 		   			  = ДокументОснование.ВидОплаты;
		Объект.ДоговорЭквайринга			  = ДокументОснование.ДоговорЭквайринга;
		Объект.ДоговорВзаиморасчетовЭквайрера = ДокументОснование.ДоговорВзаиморасчетовЭквайрера;
		Объект.Контрагент   				  = ДокументОснование.Контрагент;
		Объект.ПроцентТорговойУступки		  = ДокументОснование.ПроцентТорговойУступки;
        Объект.СуммаТорговойУступки		   	  = ДокументОснование.СуммаТорговойУступки;
		Объект.Эквайрер 					  = ДокументОснование.Эквайрер;
		Объект.СчетУчетаРасчетовСЭквайрером   = ДокументОснование.СчетУчетаРасчетовСЭквайрером;
		Объект.СуммаДокумента 				  = ДокументОснование.СуммаДокумента;
		
		Для Каждого СтрокаПлатежОснование Из ДокументОснование.РасшифровкаПлатежа Цикл
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтрокаПлатежОснование);
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	                                                        	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
			
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("ПереносЗадолженности", НСтр("ru = 'Перенос задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы ИЗ НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю)
	|			ТОГДА ""Выбытие""
	|		ИНАЧЕ ""Поступление""
	|	КОНЕЦ КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СчетУчетаРасчетовСЭквайрером КАК СчетУчетаРасчетовСЭквайрером,
	|	Реквизиты.ДоговорВзаиморасчетовЭквайрера КАК ДоговорВзаиморасчетовЭквайрера,
	|	Реквизиты.Эквайрер КАК Эквайрер,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Реквизиты.ДокументВРеглВалюте
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Реквизиты.ДокументВРеглВалюте
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСТенге,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	&ПереносЗадолженности КАК Содержание,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
		
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	Реквизиты.СчетУчетаРасчетовСЭквайрером КАК КорСчет,
		|	Реквизиты.Эквайрер КАК КорСубконто1,
		|	Реквизиты.ДоговорВзаиморасчетовЭквайрера КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК КорСчетНУ,
		|	Реквизиты.Эквайрер КАК КорСубконтоНУ1,
		|	Реквизиты.ДоговорВзаиморасчетовЭквайрера КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	"""" КАК Содержание,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетУчетаРасчетовСЭквайрером = Типовой.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
		
		НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если (Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСТенге КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = 
	    "ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|  
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";  
	
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
		|ГДЕ
		|	ОплатаОтПокупателяПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя)
		|	И ОплатаОтПокупателяПлатежнойКартой.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПокупателю 
		|	И НЕ ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|	И НЕ ОплатаОтПокупателяПлатежнойКартой.ДокументОснование ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ОплатаОтПокупателяПлатежнойКартой");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
			
			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла; 

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции, ВерсияФормата, СообщениеОбОшибке) Экспорт
	
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ДокументСсылка);
	
	РеквизитыПечатиЧека = ПараметрыПечатиЧека.РеквизитыПечатиЧека;
	Если РеквизитыПечатиЧека.Количество() = 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РеквизитыПечатиЧека[0]);
	
	ТипРасчета = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
	Реквизиты.Вставить("ТипРасчета",              ТипРасчета);
	Реквизиты.Вставить("НаименованиеВСтрокеЧека", НаименованиеВСтрокеЧека(Реквизиты));
	Реквизиты.Вставить("НомерСекции",             НомерСекции);
	Реквизиты.Вставить("ТипОплаты",               ?(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументСсылка.ВидОплаты, "МобильныйПлатеж") = Истина, 
													Перечисления.ТипыОплатыККТ.МобильныйПлатеж, 
													Перечисления.ТипыОплатыККТ.Электронно));
	Реквизиты.Вставить("ДокументОснование",       ДокументСсылка);
	
	ПараметрыОперацииФискализацииЧека = УправлениеДенежнымиСредствамиСервер.ПараметрыОперацииФискализацииЧека(Реквизиты, ПараметрыПечатиЧека, ВерсияФормата, СообщениеОбОшибке);

	Возврат ПараметрыОперацииФискализацииЧека;
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки)
	
	НаименованиеВСтрокеЧека = "";
	СведенияОПокупателе     = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктураШапки.Контрагент, СтруктураШапки.Дата);
	ПредставлениеПокупателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПокупателя) Тогда
		ПредставлениеПокупателя = СтруктураШапки.НаименованиеКонтрагент;
	КонецЕсли;	

	Если СтруктураШапки.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
		НаименованиеВСтрокеЧека = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплата от: %1'"), ПредставлениеПокупателя);
	ИначеЕсли СтруктураШапки.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
		НаименованиеВСтрокеЧека = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат: %1'"), ПредставлениеПокупателя);
	Иначе
		НаименованиеВСтрокеЧека = НСтр("ru = 'Оплата платежной картой'");
	КонецЕсли;
	
	Возврат НаименованиеВСтрокеЧека;

КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыПечатиЧека",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РасшифровкаПлатежа",       НомераТаблиц.Количество());
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка,
	|	ОплатаОтПокупателяПлатежнойКартой.Дата,
	|	ОплатаОтПокупателяПлатежнойКартой.Номер,
	|	ОплатаОтПокупателяПлатежнойКартой.Организация,
	|	ОплатаОтПокупателяПлатежнойКартой.ВидОперации,
	|	ОплатаОтПокупателяПлатежнойКартой.Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ОплатаОтПокупателяПлатежнойКартой.Контрагент) КАК НаименованиеКонтрагент,
	|	ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента,
	|	ОплатаОтПокупателяПлатежнойКартой.ВалютаДокумента,
	|	ОплатаОтПокупателяПлатежнойКартой.ДокументОснование КАК ДокументРасшифровкиПозиций,
	|	ОплатаОтПокупателяПлатежнойКартой.Контрагент.ИдентификационныйКодЛичности КАК ПолучательИИН
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка = &ОплатаОтПокупателяПлатежнойКартой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СуммаНДС,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ОплатаОтПокупателяПлатежнойКартой
	|";  	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПодготовитьПараметрыПечатиЧека(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОплатаОтПокупателяПлатежнойКартой", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц) ;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПечатиЧека = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
	
КонецФункции

#КонецЕсли
