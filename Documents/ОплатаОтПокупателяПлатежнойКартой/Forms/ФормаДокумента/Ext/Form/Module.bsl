
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если  СтрНайти(ЭтотОбъект.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0 Тогда
			// Это дополнительная форма редактирования табличной части.
			// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
			РасшифровкаПлатежа = ЭтотОбъект["РасшифровкаПлатежа"];
		Иначе
			// Это основная форма документа, у нее есть реквизит Объект.
			РасшифровкаПлатежа = ЭтотОбъект.Объект["РасшифровкаПлатежа"];
		КонецЕсли;
						
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""оплаты от покупателя платежными картами"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(НомерСтрокаПлатежа = Неопределено)

	Если НомерСтрокаПлатежа = Неопределено Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
		СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
		
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");			
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
	
	СтрокаПлатеж.Сделка = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	Объект.ПроцентТорговойУступки = ПолучитьПроцентТорговойУступки(Объект.ДоговорЭквайринга, Объект.ВидОплаты);
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Элементы.НадписьМобильныйПлатеж.Видимость = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидОплаты, "МобильныйПлатеж");
	Иначе
		Элементы.НадписьМобильныйПлатеж.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЭквайрингаПриИзменении(Элемент)
	
	ДоговорЭквайрингаПриИзмененииНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		ПослеЗакрытияВопросаДоговорЭквайрингаПриИзменении(КодВозвратаДиалога.Да,);
	Иначе
	
		ТекстВопроса = НСтр("ru='Пересчитать значение торговой уступки?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорЭквайрингаПриИзменении", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорЭквайрингаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	Объект.ПроцентТорговойУступки = ПолучитьПроцентТорговойУступки(Объект.ДоговорЭквайринга, Объект.ВидОплаты);
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентТорговойУступкиПриИзменении(Элемент)
	
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЭквайрингаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	//Отбор договоров эквайринга по выбранной организации
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация", СтруктурноеПодразделениеОрганизация); 
	
	ПараметрыФормы = Новый Структура("Отбор", СтруктураПараметров);
	ОткрытьФорму("Справочник.ДоговорыЭквайринга.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
		
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПересчитатьТорговуюУступку(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
		
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетДляОпределенияОстатков) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
		
	КонецЕсли;

	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если (СтрокаПлатеж.СуммаВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	ПересчитатьТорговуюУступку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента'")); 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация (Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда 
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя"));	
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ТекущаяДатаДокумента 	 = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	УстановитьКурсДокумента();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
			ДоговорЭквайринга = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойДоговорЭквайринга");
			ДоговорЭквайрингаПриИзмененииНаСервере();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСЭквайрером) Тогда
			Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСЭквайером(Объект);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ФискальнаяОперацияОбновитьСтатус();
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость = Объект.УчитыватьКПН;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет возвратов (БУ)'");
	Иначе
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов (БУ)'");
	КонецЕсли;
	
	Элементы.ВидОперации.ТолькоПросмотр = Форма.ТолькоПросмотр ИЛИ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	Элементы.НапечататьЧек.Доступность  = Не Форма.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	
	Элементы.СчетУчетаРасчетовСЭквайрером.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Если ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Элементы.НадписьМобильныйПлатеж.Видимость = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидОплаты, "МобильныйПлатеж");
	Иначе
		Элементы.НадписьМобильныйПлатеж.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;  
	
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя"));	
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументОснованиеПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();

	УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры
	
&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьПоДокументуОснования(Объект, Объект.ДокументОснование);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
	ОрганизацияПриИзмененииНаСервере(ПараметрыОбработки, Неопределено);

	ЗаполнитьДобавленныеКолонкиТаблиц();

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета,, Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	УстановитьКурсДокумента();
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	КонецЦикла;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);

	СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
									  СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
									  Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									  Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПлатежа(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
										СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
										Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
										Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	ПересчитатьТорговуюУступку(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
	КонецЕсли;
	
	ПересчитатьТорговуюУступку(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьТорговуюУступку(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;

	Объект.СуммаТорговойУступки = Объект.СуммаДокумента * Объект.ПроцентТорговойУступки / 100;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|	И Тарифы.ВидОплаты = &ВидОплаты
	|");
		
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", 		   ВидОплаты);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентТорговойУступки = Выборка.ПроцентТорговойУступки;
	Иначе
		ПроцентТорговойУступки = 0;
	КонецЕсли;

	Возврат ПроцентТорговойУступки;

КонецФункции

&НаСервере
Процедура ДоговорЭквайрингаПриИзмененииНаСервере()

	Объект.Эквайрер = Объект.ДоговорЭквайринга.Эквайрер;
	Объект.ДоговорВзаиморасчетовЭквайрера = Объект.ДоговорЭквайринга.ДоговорВзаиморасчетов;
	Объект.ВалютаДокумента = ?(ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовЭквайрера), Объект.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета);
	
	УстановитьКурсДокумента();
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда 	
		Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			РассчитатьСуммуПлатежа(СтрокаПлатеж, ЭтаФорма);
		КонецЦикла;
	КонецЕсли;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСЭквайером(Объект);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();  
	
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);	
	
	Если ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		
		Если НЕ (ЗначениеЗаполнено(ОсновнойДоговорКонтрагента)
			И ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда
			
			Если Объект.Организация.Пустая() Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());

	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
		
	КонецЕсли; 
	                                                             		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = Новый Массив();
	ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ КАССОВОГО ЧЕКА


&НаКлиенте
Процедура НапечататьЧекВыполнить(Команда)
	
	НапечататьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначенияБККлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");			
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент(МассивЧеков, ИдентификаторУстройства, ВерсияФормата)
	
	НомерСекции = 0;
	
	ЭтаФорма.Доступность = Ложь;
	Контекст = Новый Структура("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(ИдентификаторУстройства);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
		ЭтаФорма.Доступность = Истина;
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		ЭтаФорма.Доступность = Истина;
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ФискальнаяОперацияОбновитьСтатус();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(Знач НомерСекции, Знач ВерсияФормата, ОписаниеОшибки)
	
	Возврат Документы.ОплатаОтПокупателяПлатежнойКартой.СобратьДанныеЧеков(Объект.Ссылка, НомерСекции, ВерсияФормата, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБККлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Параметры.ИдентификаторУстройства);
		НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
		
		МассивЧеков = ПодготовитьДанныеДляПробитияЧека(НомерСекции, ВерсияФормата, ОписаниеОшибки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли Не Объект.ДанныеПереданыВБанк Тогда
		//выполнить эквайринг
		ПараметрыЭТ = ПолучитьПараметрыВидаОплаты(Объект.ДоговорЭквайринга);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ПодключаемоеОборудование);
		ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
		
		// Предварительно авторизуем операцию.
		ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
		ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
		Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
			ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
			ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	ИначеЕсли МассивЧеков.Количество() > 0 Тогда
		НапечататьЧекКлиент(МассивЧеков, Параметры.ИдентификаторУстройства, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры 

// ПРОЦЕДУРЫ ОПЕРАЦИЙ ПО ЭКВАЙРИНГУ

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Документ необходимо провести.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.ДанныеПереданыВБанк Тогда
		ТекстСообщения = НСтр("ru='Данные об оплате уже переданы в банк.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) Тогда
		ТекстСообщения = НСтр("ru='Не заполнена сумма документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыЭТ = ПолучитьПараметрыВидаОплаты(Объект.ДоговорЭквайринга);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Неопределено);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ПодключаемоеОборудование);
	ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
		ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		Если НЕ ДополнительныеПараметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя") Тогда
				ПараметрыОперации.ТипТранзакции = "AuthorizeSales";
			Иначе
				ПараметрыОперации.ТипТранзакции = "AuthorizeRefund";
			КонецЕсли;
			
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, Неопределено, ПараметрыОперации);
		Иначе
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.
			|Сумма операции: %1
			|
			|Операция оплаты на эквайринговом терминале прошла успешно?'"), РезультатОткрытияФормы.Сумма);
			
			ДополнительныеПараметры.Вставить("НомерКарты",          РезультатОткрытияФормы.НомерКарты);
			ДополнительныеПараметры.Вставить("СсылочныйНомер",      РезультатОткрытияФормы.СсылочныйНомер);
			ДополнительныеПараметры.Вставить("НомерЧекаЭТ",         РезультатОткрытияФормы.НомерЧека);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Объект.СсылочныйНомер      = РезультатВыполнения.СсылочныйНомер;
		Объект.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		Объект.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		Объект.ДанныеПереданыВБанк = Истина;
		
		//Записываем документ, чтобы сохранить информацию о банковской оплате
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			НапечататьЧекКлиент(Неопределено, ДополнительныеПараметры.ИдентификаторУстройства, "1.1.0.0");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
		ТекстСообщения = НСтр("ru = 'Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		Объект.СсылочныйНомер      = ДополнительныеПараметры.СсылочныйНомер;
		Объект.НомерПлатежнойКарты = ДополнительныеПараметры.НомерКарты;
		Объект.НомерЧекаЭТ         = ДополнительныеПараметры.НомерЧекаЭТ;
		Объект.ДанныеПереданыВБанк = Истина;
		
		//Записываем документ, чтобы сохранить информацию о банковской оплате
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			НапечататьЧекКлиент(Неопределено, ДополнительныеПараметры.ИдентификаторУстройства, "1.1.0.0");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВидаОплаты(ВидОплаты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты, "ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
КонецФункции

&НаСервере
Процедура ФискальнаяОперацияОбновитьСтатус()
	
	Строки = Новый Массив;
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = 'Пробит чек №%1'"),
					Объект.НомерЧекаККМ),,
				ЦветаСтиля.ЦветГиперссылки));
	Иначе
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Чек не пробит'"),,
				ЦветаСтиля.ЦветГиперссылки));
	КонецЕсли;
		
	ФискальнаяОперацияСтатус = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры
