#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ПомощникВводаНачальныхОстатков") Тогда
			ДанныеЗаполнения.Свойство("Дата", Дата);
			ДанныеЗаполнения.Свойство("Организация", Организация);
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ДанныеЗаполнения);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	Иначе
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если Не ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата) Или Не УчитыватьКПН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ОС.Количество() > 0 Тогда
		ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ);
	КонецЕсли; 
	
	УправлениеВнеоборотнымиАктивамиСервер.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ВводНачальныхОстатковОСЗабаланс.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если вдруг не удалось получить параметры проведения и не установлен флаг Отказ, то просто выйдем из проведения
	Если ПараметрыПроведения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	Если ПараметрыПроведения.ТаблицаВыработкаОС.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияВыработкаОС(ПараметрыПроведения.ТаблицаВыработкаОС,
												Движения, Отказ);
	КонецЕсли;
	
	Если ПараметрыПроведения.ТаблицаГрафикиАмортизацииОСБух.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияИзменениеГрафиковАмортизацииОС(ПараметрыПроведения.ТаблицаГрафикиАмортизацииОСБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаЗемельногоНалога.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияИзменениеЗемельногоНалога(ПараметрыПроведения.ТаблицаЗемельногоНалога, ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаИмущественногоНалога.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияОбъектыИмущественногоНалога(ПараметрыПроведения.ТаблицаИмущественногоНалога, ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаМестонахождениеОСБух.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияМестонахождениеОСБух(ПараметрыПроведения.ТаблицаМестонахождениеОСБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаНачислениеАмортизацииБух.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОС(ПараметрыПроведения.ТаблицаНачислениеАмортизацииБух, ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаОбъектыНалоговогоУчетаФА.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияОбъектыНалоговогоУчетаФА(ПараметрыПроведения.ТаблицаОбъектыНалоговогоУчетаФА,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаПараметрыАмортизацииБух.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияПараметрыАмортизацииОСБухгалтерскийУчет(ПараметрыПроведения.ТаблицаПараметрыАмортизацииБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаПервоначальныеСведенияОСБух.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияПервоначальныеСведенияОСБух(ПараметрыПроведения.ТаблицаПервоначальныеСведенияОСБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаПроводокБух.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияПроводокБух(ПараметрыПроведения.ТаблицаПроводокБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаПроводокНал.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияПроводокНал(ПараметрыПроведения.ТаблицаПроводокНал,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаСобытияОСОрганизаций.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияРегистрацияСобытияОС(ПараметрыПроведения.ТаблицаСобытияОСОрганизаций, 
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаСоставОС.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияСоставОС(ПараметрыПроведения.ТаблицаСоставОС, 
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаСостоянияОСБух.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОС.СформироватьДвиженияИзменениеСостоянияОС(ПараметрыПроведения.ТаблицаСостоянияОСБух, 
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаСпособыОтраженияБух.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ПараметрыПроведения.ТаблицаСпособыОтраженияБух,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаСчетовУчетаОСБух.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияСчетовУчетаОСБух(ПараметрыПроведения.ТаблицаСчетовУчетаОСБух,
												Движения, Отказ);
	КонецЕсли;
	
	Если ПараметрыПроведения.ТаблицаТранспортногоНалога.Количество() <> 0 Тогда 
		УчетОС.СформироватьДвиженияИзменениеТранспортногоНалога(ПараметрыПроведения.ТаблицаТранспортногоНалога, ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
	КонецЕсли;

	Если ПараметрыПроведения.ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Количество() <> 0 Тогда 
		Документы.ВводНачальныхОстатковОСЗабаланс.СформироватьДвиженияФиксированныеАктивыУчитываемыеОтдельно(ПараметрыПроведения.ТаблицаФиксированныеАктивыУчитываемыеОтдельно,
												Движения, Отказ);
	КонецЕсли;

	//Контротек начало
	УстановитьИнвНомера();
	//Контротек конец
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ)
	
	Для Каждого ТекСтрока Из ОС Цикл
		
		Если Не ТекСтрока.НачислятьАмортизациюБУ Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СрокПолезногоИспользованияБУ) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Срок полезного использования (БУ), мес.'"), ТекСтрока.НомерСтроки, "ОС");
			Поле = "ОС[" + Формат(ТекСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокПолезногоИспользованияБУ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СпособНачисленияАмортизацииБУ) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Способ начисления амортизации (БУ)'"), ТекСтрока.НомерСтроки, "ОС");
			Поле = "ОС[" + Формат(ТекСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНачисленияАмортизацииБУ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СпособОтраженияРасходовПоАмортизацииБУ) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Способ отражения расходов по амортизации (БУ)'"), ТекСтрока.НомерСтроки, "ОС");
			Поле = "ОС[" + Формат(ТекСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособОтраженияРасходовПоАмортизацииБУ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;  		
				
	КонецЦикла; 
	
КонецПроцедуры

////////////////Контротек
Процедура УстановитьИнвНомера()

	Для Каждого Стр Из ОС Цикл
		Если Не Стр.ОсновноеСредство.ЭтоГруппа Тогда
			Если СокрЛП(Стр.ОсновноеСредство.ИнвНомер) <> СокрЛП(Стр.ИнвентарныйНомерРегл) Тогда
				ПолучОС = Стр.ОсновноеСредство.ПолучитьОбъект();
				ПолучОС.ИнвНомер = Стр.ИнвентарныйНомерРегл;
				ПолучОС.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли



