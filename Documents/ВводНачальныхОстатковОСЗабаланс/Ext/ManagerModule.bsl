#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьПоГруппеОСНаСервере(Объект, Группа, СтруктураРеквизитовЗаполняемыхПоУмолчанию) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|
	|ГДЕ
	|	ОсновныеСредства.ГруппаОС = &Группа
	|	И НЕ ОсновныеСредства.ПометкаУдаления";;
	Запрос.УстановитьПараметр("Группа", Группа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Нет данных для заполнения!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	ТабОС = Новый ТаблицаЗначений();
	ТабОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		НоваяСтрока = ТабОС.Добавить();
		НоваяСтрока.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	КонецЦикла;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		Если Не ПроверкаДублированияОС(ТабОС, Обход.ОсновноеСредство) Тогда
			НоваяСтрока = Объект.ОС.Добавить();
			НоваяСтрока.ОсновноеСредство = Обход.ОсновноеСредство;
			НоваяСтрока.ИнвентарныйНомерРегл = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.ОсновноеСредство, "Код").Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураРеквизитовЗаполняемыхПоУмолчанию);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Запрос.УстановитьПараметр("СинонимОС", НСтр("ru = 'ОС'"));
	
	Налогоплательщик   = Реквизиты.Организация;
	СтруктурнаяЕдиница = Реквизиты.Организация;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.ПодразделениеОрганизации,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
																	
		СПДокумента 	   = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);				
		СтруктурнаяЕдиница = ?(Реквизиты.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,Реквизиты.ПодразделениеОрганизации, СПДокумента);
															
	КонецЕсли;	
	
	СписокПорядоковПогашенияСтоимостиНУ = Новый Массив;
	СписокПорядоковПогашенияСтоимостиНУ.Добавить(Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме);
	СписокПорядоковПогашенияСтоимостиНУ.Добавить(Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты);
	СписокПорядоковПогашенияСтоимостиНУ.Добавить(Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями);
	
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("СписокПорядоковПогашенияСтоимостиНУ", СписокПорядоковПогашенияСтоимостиНУ);
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаВводНачальныхОстатковОС(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты"				 , НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	""ВводНачальныхОстатковОС"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВводНачальныхОстатковОСЗабаланс КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ВидУчетаНУ,
	|	&ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
////////////////////////////////START Кибернетика//////////////////////////////////////// 
// Автор:Корыткин А.А.
// Дата: 04.07.2023
//
// Описание: Добавлен контрагент
//
//

	НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
 	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ВыработкаКоличествоБУ,
	|	ТаблицаОС.ГрафикАмортизацииБУ,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл,
	|	ТаблицаОС.ИнвентарныйНомерРегл,
	|	ТаблицаОС.КоэффициентАмортизацииБУ,
	|	ТаблицаОС.КоэффициентУскоренияБУ,
	|	ТаблицаОС.МОЛ,
	|	ТаблицаОС.Контрагент, 
	|	ТаблицаОС.НазваниеДокументаПринятияКУчетуРегл,
	|	ТаблицаОС.НакопленнаяАмортизацияБУ,
	|	ТаблицаОС.НачислятьАмортизациюБУ,
	|	ТаблицаОС.НомерДокументаПринятияКУчетуРегл,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ,
	|	ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.РодительскоеОС,
	|	ТаблицаОС.ПараметрВыработкиБУ,
	|	ТаблицаОС.ПервоначальнаяСтоимостьБУ,
	|	ТаблицаОС.СостояниеПринятияКУчетуРегл,
	|	ТаблицаОС.СпособНачисленияАмортизацииБУ,
	|	ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ,
	|	ТаблицаОС.СпособПоступленияРегл,
	|	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ,
	|	ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ,
	|	ТаблицаОС.СчетНачисленияАмортизацииБУ,
	|	ТаблицаОС.СчетУчетаБУ,
	|	ТаблицаОС.ТекущаяСтоимостьБУ,
	|	ТаблицаОС.СчетУчетаНДСПоПриобретению,
	|	ТаблицаОС.СчетУчетаНДСПоРеализации,
	|	ТаблицаОС.СчетУчетаЗатратПоМодернизацииБУ,
	|	ТаблицаОС.СчетДоходовОтРеализацииБУ,
	|	ТаблицаОС.СчетСебестоимостиПриРеализацииБУ,
	|	ТаблицаОС.ПризнакФиксированногоАктива,
	|	ТаблицаОС.ГруппаНУ,
	|	ТаблицаОС.ТекущаяСтоимостьНУ,
	|	ТаблицаОС.ТекущаяСтоимостьПР,
	|	ТаблицаОС.ПорядокПогашенияСтоимостиНУ,
	|	ТаблицаОС.ОбъектИмущественногоНалога,
	|	ТаблицаОС.ОбъектТранспортногоНалога,
	|	ТаблицаОС.ОбъектЗемельногоНалога,
	|	ТаблицаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	ТаблицаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.ВводНачальныхОстатковОСЗабаланс.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
////////////////////////////////FINISH Кибернетика/////////////////////////////////////// 
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВводНачальныхОстатковОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВыработкаОС"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПервоначальныеСведенияОСБух"			 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСостоянияОСБух"						 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМестонахождениеОСБух"					 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСоставОС"								 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаГрафикиАмортизацииОСБух"				 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаНачислениеАмортизацииБух"				 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПараметрыАмортизацииБух"				 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСпособыОтраженияБух"					 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСобытияОСОрганизаций"					 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСчетовУчетаОСБух"						 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаИмущественногоНалога"					 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаЗемельногоНалога"						 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаТранспортногоНалога"					 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПроводокБух"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПроводокНал"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА"				 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаФиксированныеАктивыУчитываемыеОтдельно", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТаблицаВыработкаОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ПараметрВыработкиБУ КАК ПараметрВыработки,
	|	ТаблицаОС.ВыработкаКоличествоБУ КАК Количество
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ
	|   ТаблицаОС.ПараметрВыработкиБУ <> ЗНАЧЕНИЕ(Справочник.ПараметрыВыработкиОС.ПустаяСсылка)
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаПервоначальныеСведенияОСБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ИнвентарныйНомерРегл КАК ИнвентарныйНомер,
	|	ТаблицаОС.СпособПоступленияРегл КАК СпособПоступления,
	|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	ТаблицаОС.СпособНачисленияАмортизацииБУ КАК СпособНачисленияАмортизации,
	|	ТаблицаОС.ПараметрВыработкиБУ КАК ПараметрВыработки
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаСостоянияОСБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК ДатаСостояния,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету) КАК СостояниеОС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаМестонахождениеОСБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.МОЛ КАК МОЛ,
	|	Реквизиты.ПодразделениеОрганизации КАК Местонахождение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаСоставОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.РодительскоеОС КАК ВСоставеОС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийВСоставеОС.ВключеноВСостав) КАК СостояниеВСоставеОС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ
	|   ТаблицаОС.РодительскоеОС <> ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаГрафикиАмортизацииОСБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ГрафикАмортизацииБУ КАК ГрафикАмортизации
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|   ТаблицаОС.ГрафикАмортизацииБУ <> ЗНАЧЕНИЕ(Справочник.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка)
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаНачислениеАмортизацииБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НачислятьАмортизациюБУ КАК НачислятьАмортизацию
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаПараметрыАмортизацииБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРабот,
	|	Выбор Когда ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ = 0 Тогда ТаблицаОС.СрокПолезногоИспользованияБУ Иначе ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ Конец КАК СрокИспользованияДляВычисленияАмортизации,
	|	Выбор Когда ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ = 0 Тогда ТаблицаОС.ТекущаяСтоимостьБУ Иначе ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ Конец КАК СтоимостьДляВычисленияАмортизации,
	|	Выбор Когда ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ = 0 Тогда 0 Иначе ТаблицаОС.ТекущаяСтоимостьБУ - ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ Конец КАК ЛиквидационнаяСтоимость,
	|	Выбор Когда ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0 Тогда ТаблицаОС.ОбъемПродукцииРаботБУ Иначе ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ Конец КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	|	ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаСпособыОтраженияБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ КАК СпособОтраженияРасходовПоАмортизации
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаСобытияОСОрганизаций"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СостояниеПринятияКУчетуРегл КАК СобытиеОС,
	|	ТаблицаОС.НомерДокументаПринятияКУчетуРегл КАК НомерДокумента,
	|	ТаблицаОС.НазваниеДокументаПринятияКУчетуРегл КАК НазваниеДокумента,
	|	0 КАК СуммаЗатратБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаСчетовУчетаОСБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ТаблицаОС.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	|	ТаблицаОС.СчетУчетаЗатратПоМодернизацииБУ КАК СчетУчетаЗатратПоМодернизацииБУ,
	|	ТаблицаОС.СчетУчетаНДСПоПриобретению КАК СчетУчетаНДСПоПриобретению,
	|	ТаблицаОС.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ТаблицаОС.СчетДоходовОтРеализацииБУ КАК СчетДоходовОтРеализацииБУ,
	|	ТаблицаОС.СчетСебестоимостиПриРеализацииБУ КАК СчетСебестоимостиПриРеализацииБУ,
	|	ТаблицаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	ТаблицаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаИмущественногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ИСТИНА КАК НачислятьНалог,
	|   ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК СтруктурнаяЕдиницаИмущественногоНалога,
	|   Реквизиты.ПодразделениеОрганизации КАК Местонахождение,
	|   &Налогоплательщик КАК Налогоплательщик,
	|   &СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|   ТаблицаОС.ОбъектИмущественногоНалога = ИСТИНА
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаЗемельногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ИСТИНА КАК НачислятьНалог,
	|   &Налогоплательщик КАК Налогоплательщик,
	|   &СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|   ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|   Реквизиты.ПодразделениеОрганизации КАК Местонахождение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|   ТаблицаОС.ОбъектЗемельногоНалога = ИСТИНА
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаТранспортногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ИСТИНА КАК НачислятьНалог,
	|   ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|   Реквизиты.ПодразделениеОрганизации КАК Местонахождение,
	|   &Налогоплательщик КАК Налогоплательщик,
	|   &СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|   ТаблицаОС.ОбъектТранспортногоНалога = ИСТИНА
	|   И Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаПроводокБух"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.МОЛ КАК МОЛ,
	|	ТаблицаОС.Контрагент КАК Контрагент,
	|	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ТаблицаОС.ТекущаяСтоимостьБУ КАК ТекущаяСтоимостьБУ,
	|	ТаблицаОС.НакопленнаяАмортизацияБУ КАК НакопленнаяАмортизацияБУ,
	|	ТаблицаОС.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ 
	|   Реквизиты.ОтражатьВБухгалтерскомУчете <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаПроводокНал"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР КОГДА ТаблицаОС.ПризнакФиксированногоАктива ТОГДА ВЫБОР КОГДА ТаблицаОС.ПризнакФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме) ИЛИ ТаблицаОС.ПризнакФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты) ИЛИ ТаблицаОС.ПризнакФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями) ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс) ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс) Конец ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеПодлежащиеАмортизации) КОНЕЦ КАК СчетУчетаНУ,
	|	ВЫБОР КОГДА ТаблицаОС.ПризнакФиксированногоАктива ТОГДА ТаблицаОС.ТекущаяСтоимостьНУ ИНАЧЕ ТаблицаОС.ТекущаяСтоимостьБУ - ТаблицаОС.НакопленнаяАмортизацияБУ - ТаблицаОС.ТекущаяСтоимостьПР КОНЕЦ КАК Стоимость,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ТекущаяСтоимостьПР КАК ТекущаяСтоимостьПР,
	|	(ТаблицаОС.ТекущаяСтоимостьБУ - ТаблицаОС.НакопленнаяАмортизацияБУ) - (ВЫБОР КОГДА ТаблицаОС.ПризнакФиксированногоАктива ТОГДА ТаблицаОС.ТекущаяСтоимостьНУ ИНАЧЕ ТаблицаОС.ТекущаяСтоимостьБУ - ТаблицаОС.НакопленнаяАмортизацияБУ - ТаблицаОС.ТекущаяСтоимостьПР КОНЕЦ) - ТаблицаОС.ТекущаяСтоимостьПР КАК ТекущаяСтоимостьВР
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	Реквизиты.УчитыватьКПН <> ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаОбъектыНалоговогоУчетаФА"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ФиксированныйАктив,
	|	ТаблицаОС.ГруппаНУ КАК ГруппаНУ,
	|	ТаблицаОС.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету) КАК СостояниеФиксированногоАктива
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|   Реквизиты.ВидУчетаНУ = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|   И ТаблицаОС.ПризнакФиксированногоАктива
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|ВЫБРАТЬ
	|	""ТаблицаФиксированныеАктивыУчитываемыеОтдельно"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ФиксированныйАктив,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету) КАК Событие,
	|	ВЫБОР КОГДА ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций) КОНЕЦ КАК ВидЛьготыФА
	|	
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|   Реквизиты.ВидУчетаНУ = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|   И ТаблицаОС.ПризнакФиксированногоАктива
	|   И ТаблицаОС.ПорядокПогашенияСтоимостиНУ В(&СписокПорядоковПогашенияСтоимостиНУ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверкаДублированияОС(ТабОС, ОбъектОС)
	
	СтруктПоиска = Новый Структура("ОсновноеСредство", ОбъектОС);
	Найдено = ТабОС.НайтиСтроки( СтруктПоиска);
	Возврат Найдено.Количество() <> 0;
	
КонецФункции

// РЕГИСТРАЦИЯ СОБЫТИЙ ОС

Процедура СформироватьДвиженияРегистрацияСобытияОС(ТаблицаОС, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            		  = СтрокаТаблицы.Период;
		Движение.ОсновноеСредство  		  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       		  = СтрокаТаблицы.Организация;
		Движение.Событие           		  = СтрокаТаблицы.СобытиеОС;
		Движение.НазваниеДокумента 		  = СтрокаТаблицы.НазваниеДокумента;
		Движение.НомерДокумента    		  = СтрокаТаблицы.НомерДокумента;
		Движение.СтруктурноеПодразделение = СтрокаТаблицы.СтруктурноеПодразделение;
		Движение.СуммаЗатратБУ     		  = СтрокаТаблицы.СуммаЗатратБУ;
	КонецЦикла;

	Движения.СобытияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 
	+ "НазваниеДокумента," 
	+ "СуммаЗатратБУ,"    
	+ "Период,"             	  
	+ "НомерДокумента,"              	  
	+ "Организация,"        	  
	+ "СтруктурноеПодразделение," 
	+ "СобытиеОС,"          	  
	+ "Регистратор";        	  

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОСТОЯНИЯ ОС

Процедура СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОС, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           		  = СтрокаТаблицы.Период;
		Движение.ДатаСостояния    		  = СтрокаТаблицы.Период;
		Движение.ОсновноеСредство 		  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      		  = СтрокаТаблицы.Организация;
		Движение.Состояние        		  = СтрокаТаблицы.СостояниеОС;
		Движение.СтруктурноеПодразделение = СтрокаТаблицы.СтруктурноеПодразделение;
	КонецЦикла;

	Движения.СостоянияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 		  // <СправочникСсылка.ОсновныеСредства>
	+ "СостояниеОС,"      		  // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить
	+ "Период,"           		  // <Дата>
	+ "Организация,"      		  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СОСТАВ ОС

Процедура СформироватьДвиженияСоставОС(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСоставОС(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		
		Движения.СоставОС.Загрузить(Параметры.ТаблицаОС);
		Движения.СоставОС.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоставОС(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       	 // <Число> - номер строки в списке
	+ "ОсновноеСредство,"    // <СправочникСсылка.ОсновныеСредства> - оприходуемый ОС
	+ "СостояниеВСоставеОС," // <ПеречислениеСсылка.ВидыСостоянийВСоставеОС>
	+ "Регистратор,"         // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"              // <Дата> - период движений - дата документа
	+ "ВСоставеОС";          // <СправочникСсылка.ОсновныеСредства>

	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));


	Возврат Параметры;

КонецФункции

// СПОСОБЫ ОТРАЖЕНИЯ РАСХОДОВ ПО АМОРТИЗАЦИИ ОС БУХГАЛТЕРСКИЙ УЧЕТ

Процедура СформироватьДвиженияСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		
		Проводка.Период       						  = СтрокаТаблицы.Период;
		Проводка.Организация 						  = СтрокаТаблицы.Организация;
		Проводка.ОсновноеСредство   				  = СтрокаТаблицы.ОсновноеСредство;
		Проводка.СпособОтраженияРасходовПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации;
		Проводка.СтруктурноеПодразделение 			  = СтрокаТаблицы.СтруктурноеПодразделение;
		 		
	КонецЦикла;
	
	Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       					  // <Число> - номер строки в списке
	+ "ОсновноеСредство,"      				  // <СправочникСсылка.ОсновныеСредства>
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 	  // <Дата> - период движений - дата документа
	+ "Организация,"                  	 	  // <СправочникСсылка.Организация> - организация
	+ "СтруктурноеПодразделение,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СпособОтраженияРасходовПоАмортизации"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - Способ отражения расходов по амортизации

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРВОНАЧАЛЬНЫЕ СВЕДЕНИЯ ОС БУХ 

Процедура СформироватьДвиженияПервоначальныеСведенияОСБух(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		
		Проводка.Период                      = СтрокаТаблицы.Период;
		Проводка.Организация                 = СтрокаТаблицы.Организация;
		Проводка.СтруктурноеПодразделение    = СтрокаТаблицы.СтруктурноеПодразделение;
		Проводка.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Проводка.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;
		Проводка.СпособПоступления			 = СтрокаТаблицы.СпособПоступления;
		Проводка.ПервоначальнаяСтоимость     = СтрокаТаблицы.ПервоначальнаяСтоимость;
		Проводка.СпособНачисленияАмортизации = СтрокаТаблицы.СпособНачисленияАмортизации;
		Проводка.ПараметрВыработки           = СтрокаТаблицы.ПараметрВыработки;
		 		
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       					  // <Число> - номер строки в списке
	+ "ОсновноеСредство,"      				  // <СправочникСсылка.ОсновныеСредства>
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 	  // <Дата> - период движений - дата документа
	+ "Организация,"                  	 	  // <СправочникСсылка.Организация> - организация
	+ "СтруктурноеПодразделение,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СпособПоступления,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПервоначальнаяСтоимость,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СпособНачисленияАмортизации,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПараметрВыработки,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ИнвентарныйНомер"; 				// <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - Способ отражения расходов по амортизации

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СЧЕТА УЧЕТА ОС БУХ

Процедура СформироватьДвиженияСчетовУчетаОСБух(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.СчетаУчетаОС.Добавить();
		
		Проводка.Период     	  = СтрокаТаблицы.Период;
		Проводка.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Проводка.Организация      = СтрокаТаблицы.Организация;
		Проводка.СчетУчетаБУ      = СтрокаТаблицы.СчетУчетаБУ;
		
		Проводка.СчетНачисленияАмортизацииБУ	  = СтрокаТаблицы.СчетНачисленияАмортизацииБУ;
		Проводка.СчетУчетаЗатратПоМодернизацииБУ  = СтрокаТаблицы.СчетУчетаЗатратПоМодернизацииБУ;
		Проводка.СчетУчетаНДСПоПриобретению 	  = СтрокаТаблицы.СчетУчетаНДСПоПриобретению;
		Проводка.СчетУчетаНДСПоРеализации   	  = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		Проводка.СчетДоходовОтРеализацииБУ    	  = СтрокаТаблицы.СчетДоходовОтРеализацииБУ;
		Проводка.СчетСебестоимостиПриРеализацииБУ = СтрокаТаблицы.СчетСебестоимостиПриРеализацииБУ;
		
		Проводка.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТаблицы.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		Проводка.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТаблицы.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		
		Проводка.СтруктурноеПодразделение = СтрокаТаблицы.СтруктурноеПодразделение;
	
	КонецЦикла;
	
	Движения.СчетаУчетаОС.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       					  
	+ "Период,"      				  
	+ "ОсновноеСредство,"                  	 	  
	+ "Организация,"                       	 	  
	+ "СчетУчетаБУ,"                  	 	  
	+ "СчетНачисленияАмортизацииБУ,"             
	+ "СчетУчетаЗатратПоМодернизацииБУ,"             
	+ "СчетУчетаНДСПоПриобретению,"             
	+ "СчетУчетаНДСПоРеализации,"             
	+ "СчетДоходовОтРеализацииБУ,"             
	+ "СчетСебестоимостиПриРеализацииБУ,"
	+ "СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,"
	+ "СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,"
	+ "СтруктурноеПодразделение"; 				

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОВОДКИ БУХ

Процедура СформироватьДвиженияПроводокБух(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПроводокБух(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.ТаблицаОС[0];

	Период = Реквизиты.Период;

	ВедетсяАналитическийУчетОСПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Период);
	ВедетсяАналитическийУчетОСПоМОЛ 		   = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Период);
	
	Операция = Движения.Типовой;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС  Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ) Тогда
			//И НЕ (СтрокаТаблицы.ТекущаяСтоимостьБУ = 0 )Тогда
			// Ввод балансовой стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание  = "Ввод остатков по ОС (текущая стоимость)";
			Проводка.Сумма       = СтрокаТаблицы.ТекущаяСтоимостьБУ;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаБУ;
			
			// TED
			Если СтрокаТаблицы.СчетУчетаБУ = ПланыСчетов.Типовой.НайтиПоКоду("9040") Тогда // добавим количество для забалансового счета
				Проводка.КоличествоДт = 1;
	        ////////////////////////////////START Кибернетика//////////////////////////////////////// 
			// Автор:Корыткин А.А.
			// Дата: 04.07.2023
			//
			// Описание: Добавлена поддержка счета 9011
			//
			//
						
			ИначеЕсли СтрокаТаблицы.СчетУчетаБУ = ПланыСчетов.Типовой.НайтиПоКоду("9011") Тогда
				Проводка.КоличествоДт = 1;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			
			////////////////////////////////FINISH Кибернетика/////////////////////////////////////// 
			Иначе
				Проводка.СчетКт = ПланыСчетов.Типовой.Вспомогательный;
			КонецЕсли;	
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			//Если ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			//КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.СтруктурноеПодразделение);

			//Если ВедетсяАналитическийУчетОСПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛ);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизацииБУ) И НЕ (СтрокаТаблицы.НакопленнаяАмортизацияБУ = 0) Тогда
			// Ввод начисленной амортизации.
			Проводка = Операция.Добавить();
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание  = "Ввод остатков по ОС (начисл. амортизация)";
			Проводка.Сумма       = СтрокаТаблицы.НакопленнаяАмортизацияБУ;
			
			Проводка.СчетДт = ПланыСчетов.Типовой.Вспомогательный;
			Проводка.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			Если ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.СтруктурноеПодразделение);

			Если ВедетсяАналитическийУчетОСПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Движения.Типовой.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроводокБух(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Период,"       					  
	+ "Организация,"      				  
	+ "ТекущаяСтоимостьБУ,"                  	 	  
	+ "СчетУчетаБУ,"                       	 	  
	+ "ОсновноеСредство,"                  	 	  
	+ "ПодразделениеОрганизации,"             
	+ "СтруктурноеПодразделение,"             
	+ "МОЛ," 
	+ "Контрагент,"
	+ "СчетНачисленияАмортизацииБУ,"             
	+ "НакопленнаяАмортизацияБУ"; 				

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Объекты налогового учета ФА

Процедура СформироватьДвиженияОбъектыНалоговогоУчетаФА(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыОбъектыНалоговогоУчетаФА(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
		
		Проводка.Период                      	= СтрокаТаблицы.Период;
		Проводка.Организация                 	= СтрокаТаблицы.Организация;
		Проводка.ФиксированныйАктив            	= СтрокаТаблицы.ФиксированныйАктив;
		Проводка.ГруппаНУ            			= СтрокаТаблицы.ГруппаНУ;
		Проводка.СостояниеФиксированногоАктива	= СтрокаТаблицы.СостояниеФиксированногоАктива;	
		Проводка.ПорядокПогашенияСтоимостиНУ    = СтрокаТаблицы.ПорядокПогашенияСтоимостиНУ;
	
	КонецЦикла;
	
	Движения.ОбъектыНалоговогоУчетаФА.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОбъектыНалоговогоУчетаФА(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Период,"       					  
	+ "Организация,"      				  
	+ "ФиксированныйАктив,"                  	 	  
	+ "ГруппаНУ,"                       	 	  
	+ "СостояниеФиксированногоАктива,"                  	 	  
	+ "ПорядокПогашенияСтоимостиНУ"; 				

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ФИКСИРОВАННЫЕ АКТИВЫ УЧИТЫВАЕМЫЕ ОТДЕЛЬНО

Процедура СформироватьДвиженияФиксированныеАктивыУчитываемыеОтдельно(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыФиксированныеАктивыУчитываемыеОтдельно(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
		
		Проводка.Период             = СтрокаТаблицы.Период;
		Проводка.Организация        = СтрокаТаблицы.Организация;
		Проводка.ФиксированныйАктив = СтрокаТаблицы.ФиксированныйАктив;
		Проводка.Событие            = СтрокаТаблицы.Событие;
		Проводка.ВидЛьготыФА	    = СтрокаТаблицы.ВидЛьготыФА;	
	
	КонецЦикла;
	
	Движения.ФиксированныеАктивыУчитываемыеОтдельно.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыФиксированныеАктивыУчитываемыеОтдельно(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Период,"       					  
	+ "Организация,"      				  
	+ "ФиксированныйАктив,"                  	 	  
	+ "Событие,"                       	 	  
	+ "ВидЛьготыФА"; 				

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОВОДКИ НАЛ

Процедура СформироватьДвиженияПроводокНал(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПроводокНал(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
			
		Если НЕ (СтрокаОС.Стоимость = 0) Тогда			
			// Ввод стоимости по налоговому учету.
			Проводка = Операция.Добавить();
			Проводка.Период      = СтрокаОС.Период;
			Проводка.Организация = СтрокаОС.Организация;
			Проводка.Содержание  = "Ввод остатков ОС";
			Проводка.Сумма       = СтрокаОС.Стоимость;
			
			Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			Проводка.ВидУчетаДт = СтрокаОС.ВидУчетаНУ;
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт  = СтрокаОС.ВидУчетаНУ;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,СтрокаОС.ВидУчетаНУ, Ложь); 
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОС.СтруктурноеПодразделение, СтрокаОС.СтруктурноеПодразделение);

		КонецЕсли;
		
		Если НЕ (СтрокаОС.ТекущаяСтоимостьПР = 0) Тогда				
			// Ввод постоянной разницы в оценке ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = СтрокаОС.Период;
			Проводка.Организация = СтрокаОС.Организация;
			Проводка.Содержание  = "Ввод остатков по ОС (постоянная разница)";
			Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьПР;
			Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
			Проводка.ВидУчетаДт  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);				
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОС.СтруктурноеПодразделение, СтрокаОС.СтруктурноеПодразделение);

		КонецЕсли;
		
		Если НЕ (СтрокаОС.ТекущаяСтоимостьВР = 0) Тогда
			// Ввод временной разницы в оценке ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = СтрокаОС.Период;
			Проводка.Организация = СтрокаОС.Организация;
			Проводка.Содержание  = "Ввод остатков по ОС (временная разница)";
			Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьВР;
			
			Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
			Проводка.ВидУчетаДт  = Справочники.ВидыУчетаНУ.ВР;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);							
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт  = Справочники.ВидыУчетаНУ.ВР;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОС.СтруктурноеПодразделение, СтрокаОС.СтруктурноеПодразделение);

		КонецЕсли;
	КонецЦикла;
	
	Движения.Налоговый.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПроводокНал(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Период,"       					  
	+ "Организация,"      				  
	+ "Стоимость,"                  	 	  
	+ "СчетУчетаНУ,"                       	 	  
	+ "ОсновноеСредство,"
	+ "ВидУчетаНУ,"
	+ "СтруктурноеПодразделение,"
	+ "ТекущаяСтоимостьПР,"
	+ "ТекущаяСтоимостьВР"; 				

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Опись ОС при вводе остатков
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьОпись";
	КомандаПечати.Представление = НСтр("ru = 'Опись ОС при вводе остатков'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	КомандаПечати.Обработчик = "Форма.ПечатьОпись";
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьОпись";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Обработчик = "Форма.ПечатьОпись";
	КомандаПечати.Порядок = 75;
	
	// Штрихкода ОС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБККлиент.ПечатьШтрихкодовОС";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ШтрихкодаОС";
	КомандаПечати.Представление = НСтр("ru = 'Штрихкоды ОС'");
	КомандаПечати.Порядок = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Опись ОС при вводе остатков
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьОпись");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьОпись",
			НСтр("ru = 'Опись ОС при вводе остатков'"),
			ПечатьОпись(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.ВводНачальныхОстатковОСЗабаланс.ПФ_MXL_ОписьОС");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОпись(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ВводНачальныхОстатковОСЗабаланс_Опись";
	ТабДокумент.ТолькоПросмотр       = Истина;
	
	Макет  = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводНачальныхОстатковОСЗабаланс.ПФ_MXL_ОписьОС");		
	МетаТЧ = МассивОбъектов[0].Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("СтрукутраПолей") И ПараметрыПечати.СтрукутраПолей <> Неопределено Тогда
		СтруктПолей = ПараметрыПечати.СтрукутраПолей;
		Для Каждого Колонка Из СтруктПолей Цикл
			СтруктРекв.Вставить(Колонка.Значение, МетаТЧ[Колонка.Значение]);
		КонецЦикла;
	Иначе
		Для Каждого Колонка Из МетаТЧ Цикл
			СтруктРекв.Вставить(Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заголовок = РаботаСДиалогами.СформироватьЗаголовокДокумента(Ссылка, НСтр("ru = 'Ввод начальных остатков по ОС (забаланс)'"));
		
		ТабДокумент.Вывести(Область);
		
		СтруктутрнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Ссылка.Организация, Ссылка.СтруктурноеПодразделение);
		
		Область = Макет.ПолучитьОбласть("ШапкаБух");
		Область.Параметры.Организация = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктутрнаяЕдиницаОрганизация, Ссылка.Дата), "ПолноеНаименование,");
		Область.Параметры.ПодразделениеОрганизации = Ссылка.ПодразделениеОрганизации;
		ТабДокумент.Вывести(Область);
				
		// Вывод заголовка таб части
		Область = Макет.ПолучитьОбласть("ТабШапка|Начало");
		ТабДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТабШапка|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
				Область.Параметры.КолЗаголовок = Колонка.Значение;
				ТабДокумент.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
		// Вывод данных
		Для Каждого СтрокаТЧ Из Ссылка.ОС Цикл
			Область = Макет.ПолучитьОбласть("ТабСтрока|Начало");
			Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
			Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
			ТабДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("ТабСтрока|Колонка");
			Для Каждого Колонка Из СтруктРекв Цикл
				Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
					Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
					Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
						Область.ТекущаяОбласть.Формат = "БЛ=Нет; БИ=Да";
					ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
						Область.ТекущаяОбласть.Формат = "ДЛФ=DD";
					ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Число") Тогда
						//Формат числового значения
						Разрядность = 0;
						РазрядностьДробнойЧасти = 0;
						Если Колонка.Значение.Тип.СодержитТип(Тип("Число")) тогда
							Разрядность = Колонка.Значение.Тип.КвалификаторыЧисла.Разрядность;
							РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						КонецЕсли;
						СтрокаФормата = ?(Разрядность=0,"","ЧЦ="+Разрядность+";")+?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти);				
						
						Область.ТекущаяОбласть.Формат = СтрокаФормата;
					КонецЕсли;
					ТабДокумент.Присоединить(Область);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Вывод итогов
		Область = Макет.ПолучитьОбласть("ТабИтог|Начало");
		ТабДокумент.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть("ТабИтог|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Колонка.Ключ = "ОсновноеСредство" Тогда
				Продолжить;
			КонецЕсли;
			Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") Тогда
				//Формат числового значения
				РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				СтрокаФормата = ?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти+";");				
				Область.Параметры.КолИтог = Ссылка.ОС.Итог(Колонка.Ключ);
				Область.ТекущаяОбласть.Формат = СтрокаФормата+"ЧРД=,; ЧРГ=; ЧГ=3,0";
			Иначе
				Область.Параметры.КолИтог = "";
			КонецЕсли;
			ТабДокумент.Присоединить(Область);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

#Область ПечатьШтрихкодовОС

Функция ДанныеДляПечатиШтрихкодовОС(МассивДокументов) Экспорт
		
	Возврат ПоместитьВоВременноеХранилище(ПодключаемоеОборудованиеБКВызовСервера.ПолучитьДанныеДляПечатиОС("ВводНачальныхОстатковОСЗабаланс", МассивДокументов));
	
КонецФункции	

#КонецОбласти

#КонецЕсли
