
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);

	РассчитатьДополнительныеСведенияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененПериод" Тогда
		ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС);
		ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если ЗначениеЗаполнено(Объект.СчетЗатрат)
				ИЛИ ЗначениеЗаполнено(Объект.СчетЗатратНУ) Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС);
	ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
	ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС);
	ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
	ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС); 
	ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС);
	ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;
	СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ ПоказыватьВДокументахСчетаУчета);

	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВалютаВзаиморасчетов, Владелец, Организация", ВалютаРегламентированногоУчета, Объект.Контрагент, Объект.Организация));
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПоступлениеДопРасходов.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СторонаСчета = 0;
	СтруктураПараметров.Вставить("СчетЗатрат"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета", СторонаСчета);
		
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОПВПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИПНПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСНПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВОСМСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатрат));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат,Объект.СчетЗатратНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт","СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ","СчетЗатратНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДт1, СубконтоДт2, СубконтоДт3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 1, Объект.СубконтоДт1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт",  1, "СчетЗатрат",  Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 2, Объект.СубконтоДт2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт",  2, "СчетЗатрат", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 3, Объект.СубконтоДт3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт",  3, "СчетЗатрат",Объект,  СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Объект.СчетЗатратНУ);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ",  1, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ",  2, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ",  3, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СОСчетЗатратПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатрат));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат,Объект.СчетЗатратНУ, , "СО");
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт","СчетЗатрат", ,"СО");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ","СчетЗатратНУ", ,"СО");

	
	ДанныеОбъекта = Новый Структура("Организация, УчитыватьКПН, СчетЗатрат, Контрагент, ДоговорКонтрагента, ДокументОснование,
									|СчетЗатратНУ, СубконтоДт1, СубконтоДт2, СубконтоДт3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьСубконтоКонтрагентыДоговоры(ДанныеОбъекта, Истина, ДанныеОбъекта.УчитыватьКПН);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СОСубконтоДт1ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 1, Объект.СубконтоДт1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат", ,"СО");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина, "СО");

КонецПроцедуры

&НаКлиенте
Процедура СОСубконтоДт2ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 2, Объект.СубконтоДт2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат", ,"СО");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина, "СО");

КонецПроцедуры

&НаКлиенте
Процедура СОСубконтоДт3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатрат, Объект.СчетЗатратНУ, 3, Объект.СубконтоДт3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат", ,"СО");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", Истина, "СО");

КонецПроцедуры

&НаКлиенте
Процедура СОСчетЗатратНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Объект.СчетЗатратНУ, ,"СО");

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", ,"СО");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта); 
	
КонецПроцедуры

&НаКлиенте
Процедура СОСубконтоДтНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ", , "СО");

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СОСубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ",  1, "СчетЗатратНУ", Объект, СтандартнаяОбработка);

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Расчет ОПВ

&НаКлиенте
Процедура ИсчисленныйОПВПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
		Элемент.ТекущиеДанные.ФизЛицо = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйОПВФизЛицоПриИзменении(Элемент)
	
	ИсчисленныйОПВИПНФизЛицоПриИзмененииНаСервере();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Расчет ИПН

&НаКлиенте
Процедура ИсчисленныйИПНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
		Элемент.ТекущиеДанные.ФизЛицо = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНФизЛицоПриИзменении(Элемент)
	
	ИсчисленныйОПВИПНФизЛицоПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсчисленныйИПН.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле.ГиперссылкаЯчейки Тогда
		ИсчисленныйИПНПримененныеВычетыИПННажатие(ТекущиеДанные);
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ИсчисленныйИПН.ТекущиеДанные <> Неопределено Тогда 
		ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо;
		ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйИПН.ТекущиеДанные.МесяцНалоговогоПериода;
	Иначе
		ТекущееФизЛицо_Контрагент 		= Неопределено;
		ТекущийМесяцНалоговогоПериода   = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПередУдалением(Элемент, Отказ)
	
	ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйИПН.ТекущиеДанные.ФизЛицо;
	ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйИПН.ТекущиеДанные.МесяцНалоговогоПериода;
	
	УдалитьСтрокиТаблицыВычетыИПН(ТекущееФизЛицо_Контрагент, ТекущийМесяцНалоговогоПериода, Объект.ВычетыИПН);
	
	ТекущееФизЛицо_Контрагент		= Неопределено;
	ТекущийМесяцНалоговогоПериода   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ТекущееФизЛицо_Контрагент <> Элемент.ТекущиеДанные.ФизЛицо
			ИЛИ ТекущийМесяцНалоговогоПериода <> Элемент.ТекущиеДанные.МесяцНалоговогоПериода Тогда

		УдалитьСтрокиТаблицыВычетыИПН(ТекущееФизЛицо_Контрагент, ТекущийМесяцНалоговогоПериода, Объект.ВычетыИПН);

		ТекущееФизЛицо_Контрагент		= Неопределено;
		ТекущийМесяцНалоговогоПериода   = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Расчет СН

&НаКлиенте
Процедура ИсчисленныйСНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные = Элементы.ИсчисленныйСН.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, Контрагент, ПериодРегистрации");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ИсчисленныйСНПриНачалеРедактированияНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Расчет ВОСМС

&НаКлиенте
Процедура ИсчисленныеВОСМСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
		Элемент.ТекущиеДанные.ФизЛицо = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеВОСМСФизЛицоПриИзменении(Элемент)
	
	ИсчисленныеВОСМСФизЛицоПриИзмененииНаСервере();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Расчет СО

&НаКлиенте
Процедура ИсчисленныеСОПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
		Элемент.ТекущиеДанные.ФизЛицо = Объект.Контрагент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныеСОФизЛицоПриИзменении(Элемент)
	
	ИсчисленныйОПВИПНФизЛицоПриИзмененииНаСервере();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед расчетом необходимо сохранить документ. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередРасчетом", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		 				
	Иначе
		
		РассчитатьНаСервере();

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Объект.Организация, Объект.Дата);

	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.УчитыватьОПВ = Истина;
		Объект.УчитыватьИПН = Истина;
		Объект.УчитыватьВОСМС = Истина;
		//Объект.УчитыватьСО = Истина;
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		ПроверитьНаличиеСтавокОСМС(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьВОСМС);
		ПроверитьНаличиеСтавокСО(Объект.ПериодРегистрации, ЕстьСтавкиОСМСЮрЛица, Объект.УчитыватьСО)
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетЗатратНУ"); 
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт","СчетЗатрат", ,"СО");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ","СчетЗатратНУ", ,"СО");
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Объект.СчетЗатратНУ);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат,Объект.СчетЗатратНУ, , "СО");
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Иначе 
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;

	Если Не ИПНПодробностиРасчетаПрочитаны Тогда
		РассчитатьДополнительныеСведенияНаСервере();
	КонецЕсли;	
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеСтавокОСМС(ДатаСреза, ЕстьСтавкиОСМСЮрЛица, УчитыватьВОСМС)
	
	Если ДатаСреза >= Дата('20200101') Тогда
		ЕстьСтавкиОСМСЮрЛица = Истина;
		УчитыватьВОСМС = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	СведенияОСтавкахОСМС.ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС.СрезПоследних(&ДатаСреза, ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)) КАК СведенияОСтавкахОСМС";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	ЕстьСтавкиОСМСЮрЛица  	= Ложь;
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ЕстьСтавкиОСМСЮрЛица = ВыборкаЗапроса.СтавкаВзносы <> 0;
	КонецЦикла;	
	
	УчитыватьВОСМС = ЕстьСтавкиОСМСЮрЛица;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеСтавокСО(ДатаСреза, ЕстьСтавкиОСМСЮрЛица, УчитыватьСО)
	
	УчитыватьСО  	= Ложь;
	
	Если ДатаСреза >= Дата('20250101') Тогда
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= "ВЫБРАТЬ
			|	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода КАК ВидДохода,
			|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
			|ИЗ
			|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений.СрезПоследних КАК СведенияОСтавкахНалоговСборовОтчислений
			|ГДЕ
			|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления)
			|	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|	И СведенияОСтавкахНалоговСборовОтчислений.Период >= &парамДата";
		
		Запрос.УстановитьПараметр("парамДата", Дата('20250101'));
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			УчитыватьСО = ВыборкаЗапроса.Ставка <> 0;
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Видимость закладки "Социальный налог" в зависимости от параметров настройки
	Элементы.ГруппаРасчетСН.Видимость = Форма.ОрганизацияЯвляетсяПлательщикомСН И Объект.УчитыватьСН;
	Элементы.УчитыватьСН.Видимость = Форма.ОрганизацияЯвляетсяПлательщикомСН;
	Элементы.УчитыватьКПН.Видимость = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
		
	Элементы.ГруппаРасчеты.Видимость 		= Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ГруппаРасчетСНПравая.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	// видимость реквизита для отражения постоянной  разницы
	Элементы.ВидУчетаНУ.Видимость 			= Объект.УчитыватьКПН И Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ДекорацияВидУчетаНУ.Видимость    = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ГруппаСчетАналитикаНУ.Видимость = Объект.УчитыватьКПН;
	
	// Видимость закладки "Пенсионные взносы" в зависимости от параметров настройки
	Элементы.ГруппаРасчетОПВ.Видимость = Объект.УчитыватьОПВ;
	
	// Видимость закладки "Индивидуальный подоходный налог" в зависимости от параметров настройки
	Элементы.ГруппаРасчетИПН.Видимость = Объект.УчитыватьИПН;	
	
	// Видимость закладки "Взносы ОСМС" в зависимости от параметров настройки
	Элементы.ГруппаРасчетВОСМС.Видимость = Объект.УчитыватьВОСМС;
	
	// Видимость закладки "Социальные отчисления" в зависимости от параметров настройки
	Элементы.ГруппаРасчетСО.Видимость = Объект.УчитыватьСО;
	Элементы.УчитыватьСО.Видимость = Объект.ПериодРегистрации >= Дата('20250101') ;
	
	СформироватьЗаголовокСчетаУчета(Форма);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	Если НЕ ОрганизацияЯвляетсяПлательщикомСН Тогда
		Объект.УчитыватьСН = Ложь 
	КонецЕсли;
	   
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт","СчетЗатрат");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ","СчетЗатратНУ");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить(""); 
	СписокАналитикиСчетовШапки.Добавить("НУ"); 
	
	СтруктураРеквизитов = Новый Структура("Объект, СписокАналитикиСчетовШапки, СуффиксСчета, СуффиксСубконто", Объект, СписокАналитикиСчетовШапки, "Затрат", "Дт");
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации, , СтруктураРеквизитов); 

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ПерезаполнитьСчетаУчета = Ложь;
	ТолькоСчетаРасчетов     = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = Истина;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	ИначеЕсли ПерезаполнитьСчетаУчета Тогда
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);

		Если Параметры <> Неопределено И Параметры.Свойство("ПерезаполнитьСчетаУчета") И Параметры.ПерезаполнитьСчетаУчета Тогда 
			ТолькоСчетаРасчетов = Параметры.Свойство("ТолькоСчетаРасчетов") И Параметры.ТолькоСчетаРасчетов;
			ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
			Если ПоказыватьВДокументахСчетаУчета Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;

	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаПослеИзмененияКонтрагента = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> ТекущийКонтрагент;
	ЗаполнитьСчетаПослеИзмененияДоговора    = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ИсходныйДоговор <> Объект.ДоговорКонтрагента;
	
	Если ЗаполнитьСчетаПослеИзмененияКонтрагента ИЛИ ЗаполнитьСчетаПослеИзмененияДоговора Тогда
		ЗаполнитьСчетаУчетаНаСервере();
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения)

	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураРезультатаВыполнения);
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	Если НЕ Справочники.Контрагенты.ВозможноИспользованиеКонтрагента(Объект.Контрагент, Объект) Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.ИсчисленныйИПН Цикл
		СтрокаТЧ.ФизЛицо = Объект.Контрагент;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ВычетыИПН Цикл
		СтрокаТЧ.ФизЛицо = Объект.Контрагент;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ИсчисленныеВОСМС Цикл
		СтрокаТЧ.ФизЛицо = Объект.Контрагент;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ИсчисленныеСО Цикл
		СтрокаТЧ.ФизЛицо = Объект.Контрагент;
	КонецЦикла;

	Если Справочники.ФизическиеЛица.ПроверитьИСоздатьФизЛицоПоКонтрагенту(Объект, Истина, Истина) Тогда 
		Для Каждого СтрокаТЧ Из Объект.ИсчисленныйСН Цикл
			СтрокаТЧ.ФизЛицо = Объект.Контрагент.ФизЛицо;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И (СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента) Тогда
		
		ЗаполнитьСчетаУчетаНаСервере();
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.Сделка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);

	Объект.Сделка = Неопределено;

	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
		
	// очистим договор если он валютный
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Если НЕ РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда 
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекстСообщения = НСтр("ru = 'Договор контрагента должен быть в валюте регламентированного учета!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДоговорКонтрагента", "Объект");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);

	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере()
	
	Документы.РасчетНалоговПриПоступленииАктивовУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	#Если Сервер Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаСервере
Процедура ИсчисленныйОПВИПНФизЛицоПриИзмененииНаСервере()
	
	Если НЕ Справочники.Контрагенты.ВозможноИспользованиеКонтрагента(Объект.Контрагент, Объект) Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИсчисленныеВОСМСФизЛицоПриИзмененииНаСервере()
	
	Если НЕ Справочники.Контрагенты.ВозможноИспользованиеКонтрагента(Объект.Контрагент, Объект) Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.ИсчисленныйИПН.Очистить();
	Объект.ИсчисленныеВОСМС.Очистить();
	Объект.ИсчисленныйСН.Очистить();
    Объект.ВычетыИПН.Очистить();
	  
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	КонтрагентОбработатьИзменение(Неопределено);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РасчетНалоговПриПоступленииАктивовУслуг.ЗаполнитьПоДокументуОснования(Объект, ДокументОснование);
		МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", 
											ДанныеОбъекта.СубконтоДт1, ДанныеОбъекта.СубконтоДт2, ДанныеОбъекта.СубконтоДт3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
											ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСубконтоКонтрагентыДоговоры(ДанныеОбъекта, Бух = Ложь, Нал = Ложь)

	Если Бух Тогда
	
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеОбъекта.СчетЗатрат);
		
		Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчета["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоДт" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.Контрагент;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.ДоговорКонтрагента;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.ДокументОснование;
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;
	
	Если Нал Тогда

		СвойстваСчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеОбъекта.СчетЗатратНУ);
		
		Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл

			ВидСубконто = СвойстваСчетаНУ["ВидСубконто" + Н];
			ИмяСубконто = "СубконтоДтНУ" + Н;

			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.Контрагент;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.ДоговорКонтрагента;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами
				И НЕ ЗначениеЗаполнено(ДанныеОбъекта[ИмяСубконто]) И ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование) Тогда
				ДанныеОбъекта[ИмяСубконто] = ДанныеОбъекта.ДокументОснование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  Форма.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", Форма.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь, Префикс = "")
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", Префикс + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СчетЗатрат, СчетЗатратНУ = Неопределено, ЭтоТаблица = Ложь, Префикс = "")
	  	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДт1",
		Префикс + "СубконтоДт2",
		Префикс + "СубконтоДт3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДтБУ1", "ЗаголовокСубконтоДтБУ2", "ЗаголовокСубконтоДтБУ3");
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетЗатрат, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетЗатратНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "Дт", "ДтНУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетЗатратНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИсчисленныйСНПриНачалеРедактированияНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта)

	ДанныеСтрокиТаблицы.МесяцНалоговогоПериода = НачалоМесяца(ПараметрыОбъекта.ПериодРегистрации);

	Если Справочники.ФизическиеЛица.ПроверитьИСоздатьФизЛицоПоКонтрагенту(ПараметрыОбъекта) Тогда
		
		ДанныеСтрокиТаблицы.ФизЛицо = ПараметрыОбъекта.Контрагент.ФизЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	РассчитатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	Если Объект.УчитыватьОПВ И Объект.ИсчисленныйОПВ.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИсчисленныйОПВ.Добавить();
		НоваяСтрока.ФизЛицо = Объект.Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	Если Объект.УчитыватьИПН И Объект.ИсчисленныйИПН.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИсчисленныйИПН.Добавить();
		НоваяСтрока.ФизЛицо = Объект.Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	Если Объект.УчитыватьСН И Объект.ИсчисленныйСН.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИсчисленныйСН.Добавить();
		НоваяСтрока.ФизЛицо = Объект.Контрагент.ФизЛицо;
		НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	Если Объект.УчитыватьВОСМС И Объект.ИсчисленныеВОСМС.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИсчисленныеВОСМС.Добавить();
		НоваяСтрока.ФизЛицо = Объект.Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
	КонецЕсли; 
	
	Если Объект.УчитыватьСО И Объект.ИсчисленныеСО.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИсчисленныеСО.Добавить();
		НоваяСтрока.ФизЛицо = Объект.Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	Документы.РасчетНалоговПриПоступленииАктивовУслуг.Рассчитать(Объект);	
	
	РассчитатьДополнительныеСведенияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйИПНПримененныеВычетыИПННажатие(ТекущиеДанные)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФизЛицо"					, ТекущиеДанные.ФизЛицо);
	ПараметрыОтбора.Вставить("МесяцНалоговогоПериода"	, ТекущиеДанные.МесяцНалоговогоПериода);
	
	ПараметрыФормы = ПолучитьПараметрыПодробноПримененныеВычетыИПН(ПараметрыОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПримененныеВычетыИПННажатие", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеИПН",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПодробноПримененныеВычетыИПН(ПараметрыОтбора)
	ПараметрыПодробноПримененныеВычетыИПН = Новый Структура;
	
	Запрос 		 = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВычетыИПН.ФизЛицо,
	|	ВычетыИПН.ВидВычета,
	|	ВычетыИПН.РазрешенныйВычет,
	|	ВычетыИПН.ПримененныйВычет,
	|	ВычетыИПН.МесяцНалоговогоПериода
	|ПОМЕСТИТЬ вт_ВычетыИПН
	|ИЗ
	|	&ТаблицаВычетыИПН КАК ВычетыИПН
	|ГДЕ
	|	ВычетыИПН.ФизЛицо = &ФизЛицо
	|	И ВычетыИПН.МесяцНалоговогоПериода = &МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВычетыИПН.ВидВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВычетыИПН.ФизЛицо,
	|	вт_ВычетыИПН.ВидВычета,
	|	СУММА(вт_ВычетыИПН.РазрешенныйВычет) КАК РазрешенныйВычет,
	|	СУММА(вт_ВычетыИПН.ПримененныйВычет) КАК ПримененныйВычет,
	|	вт_ВычетыИПН.МесяцНалоговогоПериода,
	|	ВычетыИПН.Приоритет КАК Приоритет
	|ИЗ
	|	вт_ВычетыИПН КАК вт_ВычетыИПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
	|		ПО вт_ВычетыИПН.ВидВычета = ВычетыИПН.Ссылка
	|ГДЕ
	|	ВычетыИПН.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_ВычетыИПН.ВидВычета
	|			ИЗ
	|				вт_ВычетыИПН КАК вт_ВычетыИПН)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ВычетыИПН.МесяцНалоговогоПериода,
	|	вт_ВычетыИПН.ФизЛицо,
	|	вт_ВычетыИПН.ВидВычета,
	|	ВычетыИПН.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
				   
	Запрос.УстановитьПараметр("ТаблицаВычетыИПН"		,Объект.ВычетыИПН.Выгрузить());
	Запрос.УстановитьПараметр("ФизЛицо"					,ПараметрыОтбора.ФизЛицо);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода"	,ПараметрыОтбора.МесяцНалоговогоПериода);
	
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("ФизЛицо"					, ПараметрыОтбора.ФизЛицо);
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("МесяцНалоговогоПериода"		, ПараметрыОтбора.МесяцНалоговогоПериода);
	ПараметрыПодробноПримененныеВычетыИПН.Вставить("АдресХранилищаВычетыИПН"	, ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(),УникальныйИдентификатор));
	
	Возврат ПараметрыПодробноПримененныеВычетыИПН;
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗакрытияПримененныеВычетыИПННажатие(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) 
			И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		МесяцНалоговогоПериода 	= ?(ВыбранноеЗначение.Свойство("МесяцНалоговогоПериода"), ВыбранноеЗначение.МесяцНалоговогоПериода, Неопределено);
		ФизЛицо 				= ?(ВыбранноеЗначение.Свойство("ФизЛицо")				, ВыбранноеЗначение.ФизЛицо				  , Неопределено);
		
		Если ЗначениеЗаполнено(МесяцНалоговогоПериода) 
				И ЗначениеЗаполнено(ФизЛицо) Тогда 
				
			УдалитьСтрокиТаблицыВычетыИПН(ФизЛицо, МесяцНалоговогоПериода, Объект.ВычетыИПН);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		ПослеЗакрытияПримененныеВычетыИПННажатиеНаСервере(ВыбранноеЗначение);	
		
		РассчитатьДополнительныеСведенияНаСервере();
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПослеЗакрытияПримененныеВычетыИПННажатиеНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Свойство("АдресХранилищаВычетыИПН") И
		ЭтоАдресВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВычетыИПН) Тогда	
		ТаблицаВычетыИПН 		= ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВычетыИПН);
		
		Если ТипЗнч(ТаблицаВычетыИПН) = Тип("ТаблицаЗначений") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВычетыИПН, Объект.ВычетыИПН);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиТаблицыВычетыИПН(ФизЛицо, МесяцНалоговогоПериода, ТаблицаВычетыИПН)
	
	УдаляемыеСтроки = ТаблицаВычетыИПН.НайтиСтроки(Новый Структура("ФизЛицо, МесяцНалоговогоПериода", ФизЛицо, МесяцНалоговогоПериода));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаВычетыИПН.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДополнительныеСведенияНаСервере()
	Запрос 		 = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВычетыИПН.ФизЛицо,
	|	ВычетыИПН.ПримененныйВычет,
	|	ВычетыИПН.МесяцНалоговогоПериода
	|ПОМЕСТИТЬ вт_ВычетыИПН
	|ИЗ
	|	&ТаблицаВычетыИПН КАК ВычетыИПН
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВычетыИПН.ФизЛицо,
	|	СУММА(вт_ВычетыИПН.ПримененныйВычет) КАК ПримененныеВычетыИПН,
	|	вт_ВычетыИПН.МесяцНалоговогоПериода
	|ИЗ
	|	вт_ВычетыИПН КАК вт_ВычетыИПН
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ВычетыИПН.МесяцНалоговогоПериода,
	|	вт_ВычетыИПН.ФизЛицо";
				   
	Запрос.УстановитьПараметр("ТаблицаВычетыИПН", Объект.ВычетыИПН.Выгрузить());
	
	ЗаполнитьДополнительныеДанные(Запрос.Выполнить().Выгрузить(), Объект.ИсчисленныйИПН);
	
	ИПНПодробностиРасчетаПрочитаны = Истина;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДополнительныеДанные(Источник,Приемник)

	Для Каждого СтрокаДанных Из Источник Цикл
		
		СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода", СтрокаДанных.ФизЛицо, СтрокаДанных.МесяцНалоговогоПериода); 
		Строки = Приемник.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = Приемник.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
		
	КонецЦикла;   
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры










