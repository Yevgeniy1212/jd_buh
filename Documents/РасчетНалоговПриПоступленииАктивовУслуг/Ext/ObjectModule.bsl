
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	ОрганизацияЯвляетсяПлательщикомСН               = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, Дата);

	Если НЕ НеобходимостьОтраженияВНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНУ");
	КонецЕсли;
		
	Если (НЕ УчитыватьСН И НЕ УчитыватьСО) ИЛИ (ИсчисленныеСО.Количество() = 0 И ИсчисленныйСН.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНУ");
	КонецЕсли;
	
	Если НЕ УчитыватьВОСМС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныеВОСМС");
	КонецЕсли;
	
	Если НЕ УчитыватьИПН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныйИПН");
    КонецЕсли;
    
    Если НЕ ВестиУчетПоДоговорам Тогда
        МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");    
    КонецЕсли;

	// УчитыватьИПН или УчитыватьСН
	Если ОрганизацияЯвляетсяПлательщикомСН Тогда // должен быть указан признак УчитыватьИПН или УчитыватьСН
		Если НЕ УчитыватьИПН И НЕ УчитыватьСН И НЕ УчитыватьВОСМС Тогда
			ТекстСообщения = НСтр("ru='Не указан вид налога, который необходимо рассчитать. Установите признак ""Учитывать ИПН"" или ""Учитывать СН"" или ""Учитывать ВОСМС""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
	Иначе // должен быть указан признак УчитыватьИПН
		Если НЕ УчитыватьИПН И НЕ УчитыватьВОСМС Тогда
			ТекстСообщения = НСтр("ru='Не указан вид налога, который необходимо рассчитать. Установите признак ""Учитывать ИПН"" или ""Учитывать ВОСМС""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// СчетЗатрат
	Если ИсчисленныйСН.Итог("Налог") <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
			ТекстСообщения = НСтр("ru='Не указан счет затрат для социального налога!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
		Если ВидРасчета.ОблагаетсяСН = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
			ТекстСообщения = НСтр("ru='Для выбранного вида расчета установлен способ обложения социальным налогом ""Не облагается"", необходимо очистить сумму СН!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ИсчисленныеСО.Итог("Отчисление") <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
			ТекстСообщения = НСтр("ru='Не указан счет затрат для социальных отчислений!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
		Если ВидРасчета.ОблагаетсяСО = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
			ТекстСообщения = НСтр("ru='Для выбранного вида расчета установлен способ обложения социальными отчислениями ""Не облагается"", необходимо очистить сумму СО!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Справочники.ФизическиеЛица.ПроверитьИСоздатьФизЛицоПоКонтрагенту(ЭтотОбъект, Ложь, Истина) Тогда
		ТекстСообщения = НСтр("ru='У контрагента не заполнен реквизит ""Физическое лицо""!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", );
	КонецЕсли;	

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РасчетНалоговПриПоступленииАктивовУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПогашенияЗадолженности   =  РасчетЗарплатыСервер.ЗаполнитьВТаблицахНалоговыйКомитет(ПараметрыПроведения.ТаблицаПогашенияЗадолженности,ПараметрыПроведения.РеквизитыПогашенияЗадолженности, "КорСубконто3");	
	ТаблицаПогашенияЗадолженности   =  РасчетЗарплатыСервер.ЗаполнитьВТаблицахНалоговыйКомитет(ПараметрыПроведения.ТаблицаПогашенияЗадолженности,ПараметрыПроведения.РеквизитыПогашенияЗадолженности, "КорСубконтоНУ3");	

	ТаблицаЗатратПоСоциальномуНалогу = РасчетЗарплатыСервер.ЗаполнитьВТаблицахНалоговыйКомитет(ПараметрыПроведения.ТаблицаЗатратПоСоциальномуНалогу,ПараметрыПроведения.РеквизитыПогашенияЗадолженности);
	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ТаблицаПогашенияЗадолженности, ПараметрыПроведения.РеквизитыПогашенияЗадолженности, Отказ);

	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если УчитыватьИПН Тогда
		
		ТаблицаИПНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ПараметрыПроведения.ИПНСведенияОДоходах, 
																				"Целиком", 
																				Движения.ИПНСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИПНСведенияОДоходах,   	"ИПНСведенияОДоходах",   					Движения, Отказ);
		
		
		РасчетЗарплатыСервер.СформироватьДвиженияИПНРасчетыСБюджетом(Реквизиты, ПараметрыПроведения.ИсчисленныйИПН, Движения, Отказ, Реквизиты.УпрощенныйУчетИПНиОПВ);
		
		ТаблицаСведенияОбИсчисленииВычетовИПН = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОбИсчисленииВычетовИПН(Реквизиты, 
																						ПараметрыПроведения.СведенияОбИсчисленииВычетовИПН, 
																						Движения.СведенияОбИсчисленииВычетовИПН.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСведенияОбИсчисленииВычетовИПН, "СведенияОбИсчисленииВычетовИПН", Движения, Отказ);

	КонецЕсли;
	
	Если УчитыватьОПВ Тогда
			
		Если Реквизиты.УпрощенныйУчетИПНиОПВ Тогда
			//ОПВ
			ОПВПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																							ПараметрыПроведения.ОПВПодлежитПеречислениюВФонды,
																							Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки(),
																							Отказ);
			РасчетЗарплатыСервер.СформироватьДвижения(ОПВПодлежитПеречислениюВФонды, "ОПВПодлежитПеречислениюВФонды", Движения, Отказ);
			
		КонецЕсли;

		ТаблицаОПВСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ПараметрыПроведения.ОПВСведенияОДоходах, 
																				"Целиком", 
																				Движения.ОПВСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаОПВСведенияОДоходах, "ОПВСведенияОДоходах", Движения, Отказ);
		
		
		ТаблицаИсчисленныйОПВ = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчисленныйОПВ,
																						Движения.ОПВРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
																						
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчисленныйОПВ,  	"ОПВРасчетыСФондами",  	Движения, Отказ);

	КонецЕсли;
	
	Если УчитыватьВОСМС Тогда
		
		ТаблицаВОСМССведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ПараметрыПроведения.ВОСМССведенияОДоходах, 
																				"Целиком", 
																				Движения.ВОСМССведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВОСМССведенияОДоходах,   	"ВОСМССведенияОДоходах",   					Движения, Отказ);
		
		
		РасчетЗарплатыСервер.СформироватьДвиженияВОСМСРасчетыСФондами(Реквизиты, ПараметрыПроведения.ИсчисленныеВОСМС, Движения, Отказ, Реквизиты.УпрощенныйУчетИПНиОПВ);

	КонецЕсли;
	
	ТаблицаВзаиморасчетыСКонтрагентами = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчетыСКонтрагентами(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами,
																					Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСКонтрагентами,	"ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами", Движения, Отказ);
		   	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.РеквизитыПогашенияЗадолженности, Движения, Отказ);

	Если УчитыватьСН И Реквизиты.ОрганизацияЯвляетсяПлательщикомСН  Тогда
		ТаблицаСНСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																						ПараметрыПроведения.СНСведенияОДоходах, 
																						"Целиком", 
																						Движения.СНСведенияОДоходах.ВыгрузитьКолонки(),
																						Отказ);
																						
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСНСведенияОДоходах,   		"СНСведенияОДоходах",   					Движения, Отказ);
		
		ТаблицаИсчисленныйСН = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчисленныйСН,
																						Движения.СНИсчисленный.ВыгрузитьКолонки(),
																						Отказ);

		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчисленныйСН,   			"СНИсчисленный",   							Движения, Отказ);
	КонецЕсли;
	
	Если УчитыватьСО Тогда
			
		ТаблицаСОСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																				ПараметрыПроведения.СОСведенияОДоходах, 
																				"Целиком", 
																				Движения.СОСведенияОДоходах.ВыгрузитьКолонки(),
																				Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаСОСведенияОДоходах, "СОСведенияОДоходах", Движения, Отказ);
		
		
		ТаблицаИсчисленныйСО = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчисленныеСО,
																						Движения.СОРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
																						
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчисленныйСО,  	"СОРасчетыСФондами",  	Движения, Отказ);

	КонецЕсли;
	РасчетЗарплатыСервер.СформироватьДвиженияОтраженияЗатратПоСНВРеглУчете(ТаблицаЗатратПоСоциальномуНалогу, Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвиженияОтраженияЗатратПоСОВРеглУчете(ПараметрыПроведения.ТаблицаЗатратПоСоциальнымОтчислениям, Движения, Отказ);

	
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РасчетНалоговПриПоступленииАктивовУслуг.ЗаполнитьПоДокументуОснования(ЭтотОбъект, Основание);
		
	КонецЕсли;

КонецПроцедуры

#КонецЕсли



