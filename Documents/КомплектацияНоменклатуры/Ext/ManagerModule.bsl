#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Комплектующие", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Комплектующие", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в шапке документа
//
Процедура ЗаполнитьСчетаУчетаВШапке(ДанныеОбъекта, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		ДанныеОбъекта.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		ДанныеОбъекта.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		БлокируемыеРеквизиты.Добавить("Количество");
		БлокируемыеРеквизиты.Добавить("Номенклатура");
		БлокируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Коэффициент");
		БлокируемыеРеквизиты.Добавить("НомерГТД");
		
		// таб. часть Комплектующие
		БлокируемыеРеквизиты.Добавить("Комплектующие; КомплектующиеГруппаЗаполнить, КомплектующиеПодбор,
			|КомплектующиеСкопироватьСтроки, КомплектующиеВставитьСтроки, КомплектующиеКонтекстноеМенюСкопироватьСтроки, КомплектующиеКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Комплектующие.Номенклатура; КомплектующиеНоменклатура");
		БлокируемыеРеквизиты.Добавить("Комплектующие.Количество; КомплектующиеКоличество");
		БлокируемыеРеквизиты.Добавить("Комплектующие.ЕдиницаИзмерения; КомплектующиеЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Комплектующие.ДоляСтоимости; КомплектующиеДоляСтоимости");
		БлокируемыеРеквизиты.Добавить("Комплектующие.Коэффициент; КомплектующиеКоэффициент");
		БлокируемыеРеквизиты.Добавить("Комплектующие.НомерГТД; КомплектующиеНомерГТД");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////////////////
// Подготовка параметров проведения документа

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НомераТаблиц = Новый Структура;
	 	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание",НСтр("ru = 'Комплектация ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
 		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
 		Отказ = Истина;
 	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

    ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	 
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

    Запрос.УстановитьПараметр("ВидОперации",			    Реквизиты.ВидОперации);
	Запрос.УстановитьПараметр("СинонимКомплектующие",	    НСтр("ru = 'Комплектующие'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
		
	НомераТаблиц = Новый Структура;
		
	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровКомплектация(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровРазукомплектация(НомераТаблиц)
					+ ТекстЗапросаТаблицаОприходованияТоварыОрганизаций(НомераТаблиц, Реквизиты)
					+ ТекстЗапросаТаблицаСписанияТоварыОрганизаций(НомераТаблиц, Реквизиты);
			   	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;    

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =	"ВЫБРАТЬ
	              	|	Реквизиты.Ссылка КАК Регистратор,
					|	Реквизиты.Ссылка КАК Ссылка,
	              	|	Реквизиты.Дата КАК Период,
	              	|	""Списание"" КАК ТипСписания,
	              	|	Реквизиты.Организация КАК Организация,
	              	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	              	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	              	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	              	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	              	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	              	|	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	              	|	&Содержание КАК Содержание,
	              	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	              	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	|	Реквизиты.ВидОперации,
	              	|	Реквизиты.Склад КАК Склад,
	              	|	Реквизиты.Количество * Реквизиты.Коэффициент КАК Количество,
	              	|	Реквизиты.Количество * Реквизиты.Коэффициент КАК КоличествоКомплектов,
	              	|	Реквизиты.Коэффициент КАК Коэффициент,
	              	|	Реквизиты.СчетУчетаБУ,
	              	|	Реквизиты.СчетУчетаНУ,
	              	|	Реквизиты.Номенклатура,
	              	|	Реквизиты.НомерГТД
	              	|ПОМЕСТИТЬ Реквизиты
	              	|ИЗ
	              	|	Документ.КомплектацияНоменклатуры КАК Реквизиты
	              	|ГДЕ
	              	|	Реквизиты.Ссылка = &Ссылка
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	Реквизиты.Регистратор,
	              	|	Реквизиты.Период,
	              	|	Реквизиты.ТипСписания,
	              	|	Реквизиты.Организация,
	              	|	Реквизиты.СтруктурноеПодразделение,
	              	|	Реквизиты.КорСтруктурноеПодразделение,
	              	|	Реквизиты.УчитыватьКПН,
	              	|	Реквизиты.ВидУчетаНУ,
	              	|	Реквизиты.Контрагент,
	              	|	Реквизиты.ВалютаВзаиморасчетов,
	              	|	Реквизиты.Содержание,
	              	|	Реквизиты.ВидОперации,
	              	|	Реквизиты.НеобходимостьОтраженияВНУ,
	              	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	|	Реквизиты.Склад,
	              	|	Реквизиты.СчетУчетаБУ,
	              	|	Реквизиты.СчетУчетаНУ,
	              	|	Реквизиты.Коэффициент,
	              	|	Реквизиты.Номенклатура,
	              	|	Реквизиты.КоличествоКомплектов,
	              	|	Реквизиты.Количество
	              	|ИЗ
	              	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Комплектующие.Ссылка,
	|	Комплектующие.НомерСтроки,
	|	Комплектующие.Номенклатура,
	|	Выразить(Комплектующие.Количество * Комплектующие.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
	|	Комплектующие.СчетУчетаБУ,
	|	Комплектующие.ДоляСтоимости,
	|	Комплектующие.СчетУчетаНУ,
	|	Комплектующие.НомерГТД,
	|	Комплектующие.КлючСвязи,
	|	Комплектующие.Коэффициент
	|ПОМЕСТИТЬ ТаблицаКомплектующие
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК Комплектующие
	|ГДЕ
	|	Комплектующие.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки,
	|	ТаблицаНомераГТД.Ссылка,
	|	ТаблицаНомераГТД.Количество КАК Количество,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаНомераГТД
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеТоваровКомплектация(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеТоваровКомплектацияТаблица", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Комплектующие"" КАК ИмяСписка,
	|	&СинонимКомплектующие КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаКомплектующие.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКомплектующие.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ТаблицаКомплектующие.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ТаблицаКомплектующие.Номенклатура КАК Номенклатура,
	|	ТаблицаКомплектующие.НомерГТД КАК НомерГТД,	
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаКомплектующие.Количество КАК Количество,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	Реквизиты.СчетУчетаБУ КАК КорСчетСписанияБУ,
	|	Реквизиты.Номенклатура КАК КорСубконтоБУ1,
	|	Реквизиты.Склад КАК КорСубконтоБУ2,
	|	Реквизиты.Регистратор КАК КорСубконтоБУ3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоБУ1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоБУ2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии) КАК ВидКорСубконтоБУ3,
	|	Реквизиты.СчетУчетаНУ КАК КорСчетСписанияНУ,
	|	Реквизиты.Номенклатура КАК КорСубконтоНУ1,
	|	Реквизиты.Склад КАК КорСубконтоНУ2,
	|	Реквизиты.Регистратор КАК КорСубконтоНУ3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоНУ1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоНУ2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии) КАК ВидКорСубконтоНУ3
	|ИЗ
	|	ТаблицаКомплектующие КАК ТаблицаКомплектующие
	|		Внутреннее СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.Комплектация))
	|			И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКомплектующие.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеТоваровРазукомплектация(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеТоваровРазукомплектацияТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Комплектующие"" КАК ИмяСписка,
	|	&СинонимКомплектующие КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаКомплектующие.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Реквизиты.СчетУчетаНУ КАК СчетУчетаНУ,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	Реквизиты.НомерГТД КАК НомерГТД,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаКомплектующие.Количество КАК КоличествоКомплектующих,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ТаблицаКомплектующие.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаКомплектующие.СчетУчетаБУ КАК КорСчетСписанияБУ,
	|	ТаблицаКомплектующие.Номенклатура КАК КорСубконтоБУ1,
	|	Реквизиты.Склад КАК КорСубконтоБУ2,
	|	Реквизиты.Регистратор КАК КорСубконтоБУ3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоБУ1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоБУ2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии) КАК ВидКорСубконтоБУ3,
	|	ТаблицаКомплектующие.СчетУчетаНУ КАК КорСчетСписанияНУ,
	|	ТаблицаКомплектующие.Номенклатура КАК КорСубконтоНУ1,
	|	Реквизиты.Склад КАК КорСубконтоНУ2,
	|	Реквизиты.Регистратор КАК КорСубконтоНУ3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоНУ1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоНУ2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии) КАК ВидКорСубконтоНУ3	
	|ИЗ
	|	ТаблицаКомплектующие КАК ТаблицаКомплектующие
	|		Внутреннее СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация))
	|			И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

	
КонецФункции

// Распределяет количество номенклатуры по комплектующим в зависимости от доли списания
Функция ПодготовитьТаблицуСписаниеТоваровРазукомплектация(СписаниеТоваровРазукомплектацияТаблица, ТаблицаРеквизиты) Экспорт

	Реквизиты	= ТаблицаРеквизиты[0];
	
	ТаблицаСписания	= СписаниеТоваровРазукомплектацияТаблица.Скопировать();
	ТаблицаСписания.Колонки.Добавить("Количество", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Если ТаблицаСписания.Количество() = 0
		ИЛИ Реквизиты.Количество = 0
		ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		Возврат ТаблицаСписания;
	КонецЕсли;
	
	МассивКоэффициентов	= ТаблицаСписания.ВыгрузитьКолонку("ДоляСтоимости");
	
	МассивРезультата = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(Реквизиты.Количество, МассивКоэффициентов, 3);
	Если МассивРезультата <> Неопределено Тогда
		ТаблицаСписания.ЗагрузитьКолонку(МассивРезультата, "Количество");
	КонецЕсли;
	
	Возврат ТаблицаСписания;

КонецФункции

Функция ТекстЗапросаТаблицаОприходованияТоварыОрганизаций(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда 
		НомераТаблиц.Вставить("ТаблицаОприходованияТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	"""" КАК ИмяСписка,
		|	Реквизиты.Номенклатура КАК Товар,
		|	Реквизиты.НомерГТД,
		|	Реквизиты.Склад,
		|	Реквизиты.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
	    |	НЕ Реквизиты.СчетУчетаБУ.Забалансовый 
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		 НомераТаблиц.Вставить("ТаблицаОприходованияТоварыОрганизаций"  , НомераТаблиц.Количество());
		 
		 ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Комплектующие"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаКомплектующие КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета(); 
				
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТаблицаСписанияТоварыОрганизаций(НомераТаблиц,  Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда 
		НомераТаблиц.Вставить("ТаблицаСписанияТоварыОрганизаций"  , НомераТаблиц.Количество());		
				
	ТекстЗапроса =
	 "ВЫБРАТЬ
	 |	НомераГТД.НомерГТД,
	 |	Выразить(НомераГТД.Количество * Товары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
	 |	НомераГТД.КлючСвязи,
	 |	Товары.Номенклатура КАК Товар,
	 |	Товары.Склад,
	 |	Товары.Коэффициент,
	 |	1 КАК НомерСтроки,
	 |	"""" КАК ИмяСписка,
	 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	 |ИЗ
	 |	ТаблицаНомераГТД КАК НомераГТД
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Товары
	 |		ПО НомераГТД.КлючСвязи = 1
	 | ГДЕ НЕ Товары.СчетУчетаБУ.Забалансовый
	 |			
	 |УПОРЯДОЧИТЬ ПО
	 |	НомерСтроки,
	 |	НомераГТД.КлючСвязи" 
	   + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	    				
	 Иначе 
		 НомераТаблиц.Вставить("ТаблицаСписанияТоварыОрганизаций"  , НомераТаблиц.Количество());
		 
		 ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход("Комплектующие", "ТаблицаКомплектующие");  
		
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции
	


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Комплектация номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомплектацияНоменклатуры_Комплектация";
	КомандаПечати.Представление = НСтр("ru = 'Комплектация номенклатуры'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомплектацияНоменклатуры_Комплектация";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать комплектации номенклатуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектацияНоменклатуры_Комплектация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КомплектацияНоменклатуры_Комплектация",
			НСтр("ru = 'Комплектация номенклатуры'"),
			ПечатьКомлектацияНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КомплектацияНоменклатуры.ПФ_MXL_Комплектация");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("КомплектацияНоменклатуры_Комплектация"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьКомлектацияНоменклатуры(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Регистратор,
	|	Номер,
	|	Дата,
	|	""" + ТекстКодАртикул + ":""        КАК ИмяКодАртикул,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Комплект,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Ответственный,
	|	Организация,
	|	ВидОперации
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка В (&МассивОбъектов)
	|";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	НомерСтроки,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	НомерСтроки
	|
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|
	|ИТОГИ ПО
	|   Ссылка
	|";

	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КомплектацияНоменклатуры.ПФ_MXL_Комплектация", КодЯзыка);
	
	ОбластьЗаголовок   = Макет.ПолучитьОбласть("Заголовок");
	ОбластьКомплект	   = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть(ОбластьШапки);
	ОбластьМакетСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	ОбластьПодписи 	   = Макет.ПолучитьОбласть("Подписи");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "КомплектацияНоменклатуры_Комплектация";

	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		// Выводим шапку накладной
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Регистратор,
			?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, НСтр("ru = 'Комплектация номенклатуры'", КодЯзыка), НСтр("ru = 'Разукомплектация номенклатуры'", КодЯзыка)));
		ТабДокумент.Вывести(ОбластьЗаголовок);

		Если ВыводитьКоды Тогда
			ОбластьКомплектКод = Макет.ПолучитьОбласть("КомплектКод");
			ОбластьКомплектКод.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабДокумент.Вывести(ОбластьКомплектКод);
		КонецЕсли;

		ОбластьКомплект.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьКомплект.Параметры.Комплект           = СокрЛП(ВыборкаПоДокументам.Комплект);
		ОбластьКомплект.Параметры.КоличествоНаПечать = "" + ВыборкаПоДокументам.Количество + " (" + ВыборкаПоДокументам.ЕдиницаИзмерения + ")";
		ТабДокумент.Вывести(ОбластьКомплект);

		Если ВыводитьКоды Тогда
			ОбластьМакетаШапка.Параметры.ИмяКодАртикул = ТекстКодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Регистратор) Тогда
			ВыборкаКомплектующие = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаКомплектующие = Неопределено;
		КонецЕсли;
		
		Если НЕ ВыборкаКомплектующие = Неопределено Тогда
		
			Пока ВыборкаКомплектующие.Следующий() Цикл

				Если НЕ ЗначениеЗаполнено(ВыборкаКомплектующие.Номенклатура) Тогда
					ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(НСтр("ru='В одной из строк не заполнено значение комплектующей - строка при печати пропущена.'", КодЯзыка));
					Продолжить;
				КонецЕсли;

				ОбластьМакетСтроки.Параметры.Заполнить(ВыборкаКомплектующие);
				ОбластьМакетСтроки.Параметры.НомерСтроки = ВыборкаКомплектующие.НомерСтроки;
				ОбластьМакетСтроки.Параметры.Товар       = СокрЛП(ВыборкаКомплектующие.Номенклатура);
				ТабДокумент.Вывести(ОбластьМакетСтроки);

			КонецЦикла;
			
		КонецЕсли;

		// Вывести подписи
		ОбластьПодписи.Параметры.ОтветственныйПредставление = "/" + ВыборкаПоДокументам.Ответственный + "/";
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Регистратор);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

#КонецЕсли