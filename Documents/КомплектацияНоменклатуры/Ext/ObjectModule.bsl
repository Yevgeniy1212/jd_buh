#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();

	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Комплектующие.ДоляСтоимости");	
	КонецЕсли;
	
	//ОрганизацияПлательщикНалогаНаПрибыль 			= ПолучитьФункциональнуюОпцию("ПлательщикКПН", Новый Структура("Организация, Период", Организация, Дата));	
	ОрганизацияПлательщикНалогаНаПрибыль           = УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	Если НЕ УчитыватьКПН ИЛИ (НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ НЕ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда 		
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Комплектующие.СчетУчетаНУ");
				
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	//проверка на балансовость счетов учета номенклатуры, из шапки и табличной части
	ПараметрыПроверки =  Новый Структура;
	ПараметрыПроверки.Вставить("СчетУчетаБУ", ЭтотОбъект.СчетУчетаБУ);
		
	ПроверитьЗаполнениеТабличнойЧастиПострочно(ЭтотОбъект.Комплектующие, "Комплектующие", НСтр("ru = 'Комплектующие'"), Отказ, ПараметрыПроверки);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);

	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнить табличную часть НомераГТД.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда 
		
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			
			ТаблицаДокумента = Новый ТаблицаЗначений;
			ТаблицаДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДокумента.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число"));
			ТаблицаДокумента.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число"));
			ТаблицаДокумента.Колонки.Добавить("Коэффициент",  Новый ОписаниеТипов("Число"));
			ТаблицаДокумента.Колонки.Добавить("КлючСвязи",	  Новый ОписаниеТипов("Число"));
			ТаблицаДокумента.Колонки.Добавить("Склад",		  Новый ОписаниеТипов("СправочникСсылка.Склады"));
			
			НоваяСтрока = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтотОбъект);
			НоваяСтрока.КлючСвязи = 1;
			НоваяСтрока.НомерСтроки = 1;
			
			ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
			НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект,ТаблицаДокумента, ТаблицаНомераГТД);
			
		Иначе 	
			
			ТаблицаДокумента = НомераГТДСервер.ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(Комплектующие, Истина, Склад);
			ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
			НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект,ТаблицаДокумента, ТаблицаНомераГТД);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.КомплектацияНоменклатуры.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Если ПараметрыПроведения.Реквизиты[0].ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		// Таблица списанных товаров - комплектация
		ТаблицаСписанныеТоварыКомплектация = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
				ПараметрыПроведения.СписаниеТоваровКомплектацияТаблица, ПараметрыПроведения.Реквизиты, Отказ);
		
		ТаблицаКомплектующиеКомплектация = УчетТоваров.ПодготовитьТаблицуКомплектующихКомплектация(
				ТаблицаСписанныеТоварыКомплектация, ПараметрыПроведения.Реквизиты, Отказ);
		
		//Формирование движений
		УчетТоваров.СформироватьДвиженияКомплектация(ТаблицаКомплектующиеКомплектация,
					ПараметрыПроведения.Реквизиты, Движения, Отказ);
					
	
		
	Иначе // разукомплетация
		
		// Таблица списанных товаров - разукомплектация
		СписаниеТоваровРазукомплектацияТаблица	=
		Документы.КомплектацияНоменклатуры.ПодготовитьТаблицуСписаниеТоваровРазукомплектация(
				ПараметрыПроведения.СписаниеТоваровРазукомплектацияТаблица, ПараметрыПроведения.Реквизиты);
				
		//При распределении, из-за правил округления,  возможно появление отрицательного количества необходимо осуществить проверку
		ПроверитьТаблицуСписанияНаОтрицательныеЗначения(СписаниеТоваровРазукомплектацияТаблица);
		
		ТаблицаСписанныеТоварыРазукомплектация = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
				СписаниеТоваровРазукомплектацияТаблица, ПараметрыПроведения.Реквизиты, Отказ);
		
		ТаблицаКомплектующиеРазукомплектация = УчетТоваров.ПодготовитьТаблицуКомплектующихРазукомплектация(
				СписаниеТоваровРазукомплектацияТаблица, ТаблицаСписанныеТоварыРазукомплектация, ПараметрыПроведения.Реквизиты, Отказ);
		
		//Формирование движений
		УчетТоваров.СформироватьДвиженияКомплектация(ТаблицаКомплектующиеРазукомплектация,
				ПараметрыПроведения.Реквизиты, Движения, Отказ);
				
				
	КонецЕсли;
	
	//КОНТРОЛЬ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ
	НомераГТДСервер.ВыполнитьКонтрольТоварыОрганизаций(ПараметрыПроведения.ТаблицаСписанияТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, , Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаОприходованияТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаСписанияТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);  	

	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Проверим таблицу списания на отрицательные значения, это приодит к некоректным данным, дальнейшую обрабоку не прерываем просто сообщим пользователю
//
Процедура ПроверитьТаблицуСписанияНаОтрицательныеЗначения(ТаблицаСписания)
	
	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяКорСубконто = Неопределено;
	
	Если ТипЗнч(ТаблицаСписания[0].КорСубконтоБУ1) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяКорСубконто = "КорСубконтоБУ1";
	ИначеЕсли ТипЗнч(ТаблицаСписания[0].КорСубконтоБУ3) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяКорСубконто = "КорСубконтоБУ2";
	ИначеЕсли ТипЗнч(ТаблицаСписания[0].КорСубконтоБУ3) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяКорСубконто = "КорСубконтоБУ3";
	КонецЕсли;	
		
		
	Для Каждого СтрокаТЧ Из ТаблицаСписания Цикл
		Если СтрокаТЧ.Количество < 0 Тогда
			
			Если ИмяКорСубконто = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'В документе ""%1"" при распределении количества, из-за правил округления, в строке %2 образовалось отрицательное количество.'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект, СтрокаТЧ.НомерСтроки);
			Иначе	
				ТекстСообщения = НСтр("ru = 'В документе ""%1"" при распределении количества, из-за правил округления, в строке %2 для номенклатуры ""%3"" образовалось отрицательное количество.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект, СтрокаТЧ.НомерСтроки, СтрокаТЧ[ИмяКорСубконто]);
			КонецЕсли;	
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(ТекстСообщения,УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	


// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ТабличнаяЧасть, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
	
	Если Не ПараметрыПроверки.Свойство("СчетУчетаБУ") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если  ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ)
					И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый <> 
					 ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыПроверки.СчетУчетаБУ).Забалансовый  Тогда
									
			ТекстСообщения = НСтр("ru = 'При комплектации (разукомплектации) ТМЗ не поддерживается корреспонденция между балансовыми и забалансовыми счетами.'");
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
				НСтр("ru = 'Счет учета (БУ)'"), СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти, ТекстСообщения);
			Поле =  ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1,"ЧН=0; ЧГ=" ) + "].СчетУчетаБУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);	
		КонецЕсли;  		
	КонецЦикла;     
	
КонецПроцедуры

#КонецЕсли


