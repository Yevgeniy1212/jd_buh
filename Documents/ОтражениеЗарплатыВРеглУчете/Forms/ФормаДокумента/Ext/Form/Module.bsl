
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""отражение зарплаты в регл. учете"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		ПриИзмененииЗначенияОрганизацииСервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтражениеВУчетеФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	СтрокаТаблицы.СчетДтНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДт));

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДтНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетДт", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ", "ОтражениеВУчете");	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	СтрокаТаблицы.СчетКтНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетКт));

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКтНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "СчетКт", "ОтражениеВУчете");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "СчетКтНУ", "ОтражениеВУчете");	

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетДтНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДтНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ", "ОтражениеВУчете");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСчетКтНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКтНУ, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "СчетКтНУ", "ОтражениеВУчете");

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДт, ТекущиеДанные.СчетДтНУ, 1, ТекущиеДанные.СубконтоДт1, "СубконтоДтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетДт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетДт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДт, ТекущиеДанные.СчетДтНУ, 2, ТекущиеДанные.СубконтоДт2, "СубконтоДтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетДт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетДт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДт, ТекущиеДанные.СчетДтНУ, 3, ТекущиеДанные.СубконтоДт3, "СубконтоДтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "СчетДт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "СчетДтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетДт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетКт, ТекущиеДанные.СчетКтНУ, 1, ТекущиеДанные.СубконтоКт1, "СубконтоКтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "СчетКт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "СчетКтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 1, "СчетКт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетКт, ТекущиеДанные.СчетКтНУ, 2, ТекущиеДанные.СубконтоКт2, "СубконтоКтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "СчетКт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "СчетКтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 2, "СчетКт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетКт, ТекущиеДанные.СчетКтНУ, 3, ТекущиеДанные.СубконтоКт3, "СубконтоКтНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "СчетКт", "ОтражениеВУчете");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ", "СчетКтНУ", "ОтражениеВУчете", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 3, "СчетКт", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетДтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетДтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетДтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетКтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетКтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчетеСубконтоКтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтражениеВУчете.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетКтНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Автозаполнение(Команда)
	
	Если Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличныйЧастей", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после его записи. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличныйЧастей", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПроводкиНУ(Команда)
	
	Если Объект.ОтражениеВУчете.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для формирования проводок по налоговому учете необходимо, чтобы уже были сформированы проводки по бухгалтерскому учету!'"));	
		Возврат;
	КонецЕсли;

	Если Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередФормированиемПроводкокНУ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Сформировать проводки можно только после записи документа. Записать документ?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередФормированиемПроводкокНУ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.СформироватьПроводкиНУ.Видимость = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);

	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
    ПоказыватьВДокументахСчетаУчета = Истина;
    
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

    УстановитьДоступностьСубконто();
	
	УправлениеФормой(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации);
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", "ОтражениеВУчете" + ИмяЭлементаСубконто + "%Индекс%", ПараметрыДокумента);	
		
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти, ЗаменаСубконтоНУ = Ложь)
		
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто(Автозаполнение = Ложь)
	
	Для Каждого СтрокаОтражениеВУчете Из Объект.ОтражениеВУчете Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		
		Если Автозаполнение Тогда
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаОтражениеВУчете.СчетДт, СтрокаОтражениеВУчете, ПоляОбъекта, Истина, Ложь);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаОтражениеВУчете.СчетДт, СтрокаОтражениеВУчете, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");
		
		Если Автозаполнение Тогда
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаОтражениеВУчете.СчетДтНУ, СтрокаОтражениеВУчете, ПоляОбъекта, Истина, Ложь);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаОтражениеВУчете.СчетДтНУ, СтрокаОтражениеВУчете, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		
		Если Автозаполнение Тогда
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаОтражениеВУчете.СчетКт, СтрокаОтражениеВУчете, ПоляОбъекта, Истина, Ложь);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаОтражениеВУчете.СчетКт, СтрокаОтражениеВУчете, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");
		
		Если Автозаполнение Тогда
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаОтражениеВУчете.СчетКтНУ, СтрокаОтражениеВУчете, ПоляОбъекта, Истина, Ложь);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаОтражениеВУчете.СчетКтНУ, СтрокаОтражениеВУчете, ПоляОбъекта, Ложь);
		
		// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаОтражениеВУчете, "СубконтоДт" + "%Индекс%", "СчетДт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаОтражениеВУчете, "СубконтоДт" + "%Индекс%", "ОтражениеВУчетеСубконтоДт" + "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаОтражениеВУчете, "СубконтоДтНУ" +"%Индекс%", "СчетДтНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаОтражениеВУчете, "СубконтоДтНУ" + "%Индекс%", "ОтражениеВУчетеСубконтоДтНУ" + "%Индекс%", ПараметрыДокумента);	

		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаОтражениеВУчете, "СубконтоКт" + "%Индекс%", "СчетКт");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаОтражениеВУчете, "СубконтоКт" + "%Индекс%", "ОтражениеВУчетеСубконтоКт" + "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаОтражениеВУчете, "СубконтоКтНУ" +"%Индекс%", "СчетКтНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаОтражениеВУчете, "СубконтоКтНУ" + "%Индекс%", "ОтражениеВУчетеСубконтоКтНУ" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередАвтоЗаполнениемТабличныйЧастей(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Если Объект.Проведен Тогда
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
	КонецЕсли;

	Если Объект.ОтражениеВУчете.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Очистить перед заполнением существующие данные?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьПередАвтоЗаполнением", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);
		
	Иначе
		
		АвтозаполнениеНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьПередАвтоЗаполнением(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Объект.ОтражениеВУчете.Очистить();
	ЭтотОбъект.Записать();
	
	АвтозаполнениеНаКлиенте();
		
КонецПроцедуры

&НаСервере
Функция АвтозаполнениеНаСервере() 
	
	Объект.ОтражениеВУчете.Очистить();
	
	//ДокОбъект = РеквизитФормыВЗначение("Объект");
	//
	//Если ДокОбъект.ЭтоНовый() ИЛИ ДокОбъект.Модифицированность() ИЛИ ДокОбъект.ПометкаУдаления Тогда
	//	ДокОбъект.ПометкаУдаления = Ложь;
	//	ДокОбъект.Записать();
	//КонецЕсли;
	//
	
	СтруктураПараметров = Новый Структура;	
				
	СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение); 
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	СтруктураПараметров.Вставить("ПериодРегистрации",Объект.ПериодРегистрации);
	СтруктураПараметров.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями",ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	СтруктураПараметров.Вставить("Дата",Объект.Дата);
	СтруктураПараметров.Вставить("парамНачалоМесяца", НачалоМесяца(Объект.ПериодРегистрации));
	СтруктураПараметров.Вставить("парамКонецМесяца", КонецМесяца(Объект.ПериодРегистрации));
	СтруктураПараметров.Вставить("парамОрганизация", Объект.Организация);
	СтруктураПараметров.Вставить("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	СтруктураПараметров.Вставить("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	СтруктураПараметров.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	СтруктураПараметров.Вставить("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	СтруктураПараметров.Вставить("парамПодразделение", Объект.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("парамПриход", ВидДвиженияНакопления.Приход);
	СтруктураПараметров.Вставить("парамИсчисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	СтруктураПараметров.Вставить("ТаблицаОтражениеВУчете", Объект.ОтражениеВУчете.Выгрузить());
				
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Отражение зарплаты в регл. учете»'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.ОтражениеЗарплатыВРеглУчете.Автозаполнение", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;
	
	//ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат РезультатВыполнения;  	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеВУчете = СтруктураДанных.ТаблицаОтражениеВУчете;
	Объект.ОтражениеВУчете.Загрузить(ТаблицаОтражениеВУчете);
	
	Если Объект.ОтражениеВУчете.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	Иначе
		УстановитьДоступностьСубконто(Истина);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеНаКлиенте() 
	
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""отражение зарплаты в регл. учете"" (заполнение)");
	
	РезультатВыполнения = АвтозаполнениеНаСервере();		
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередФормированиемПроводкокНУ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
	КонецЕсли;

	Если ПроверитьЗаполнениеСчетовНУ(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Текущие проводки по налоговому учету будут заменены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаменеПроводокНУ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		АвтозаполнениеПроводокНУ();
		УстановитьДоступностьСубконто();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаменеПроводокНУ(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	АвтозаполнениеПроводокНУ();
	УстановитьДоступностьСубконто();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеСчетовНУ(Ссылка) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамПустойСчетНУ", ПланыСчетов.Налоговый.ПустаяСсылка());
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОтражениеВУчете.СчетДтНУ,
		|	ОтражениеВУчете.СчетКтНУ
		|ИЗ
		|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеВУчете
		|ГДЕ
		|	ОтражениеВУчете.Ссылка = &парамСсылка
		|	И (ОтражениеВУчете.СчетДтНУ <> &парамПустойСчетНУ
		|		ИЛИ ОтражениеВУчете.СчетКтНУ <> &парамПустойСчетНУ)
		|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка.Следующий() И Выборка.Количество() > 0;

КонецФункции

&НаСервере
Процедура АвтозаполнениеПроводокНУ()
	
	Документы.ОтражениеЗарплатыВРеглУчете.АвтозаполнениеПроводокНУ(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ОтражениеВУчете.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ОтражениеВУчете.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ФизЛицо =ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры

