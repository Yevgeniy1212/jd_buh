

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ВывестиНадписи(ЭтаФорма);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""корректировка долга"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		
		Если НЕ Объект.КонтрагентДебитор = Объект.КонтрагентКредитор Тогда
			ТаблицаДолгов = Объект.СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская")));
			ПослеЗакрытияВопросаОчиститьСтрокиТабЧасти(КодВозвратаДиалога.Да, Новый Структура("ВидЗадолженности, ТаблицаДолгов", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"), ТаблицаДолгов)); 
		КонецЕсли; 
		
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
	ИначеЕсли (ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") 
			ИЛИ ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности")) Тогда
		
		Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") 
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности")) Тогда
			// По данным видам операции отборы по табличным частям совпадают. Допролнительная обработка  не требуется.
		Иначе
			// Необходимо установить контрагента кредитора равного дебитору,
			// тогда заполненные уже табличные части будут содержать корректную информацию.
			Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
		КонецЕсли;
		
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
		
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	ТекущийВидОперации = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
						
	КонецЕсли;
	
	// Запомним новую дату выписки документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ВалютаДокументаПриИзмененииНаСервере();
	
	Если НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		// Установить курс в табличной части, пересчитать тенговый эквивалент для договоров в валюте
		Для Каждого Строка Из Объект.СуммыДолга Цикл
			
			Строка.КурсВзаиморасчетов		= Объект.КурсДокумента;
			Строка.КратностьВзаиморасчетов	= Объект.КратностьДокумента;
			
			ПересчитатьСуммуПоСтроке(Строка, Ложь);
			
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Объект.ВалютаДокумента = ВыбранноеЗначение Тогда
		
		ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене валюты табличная часть будет очищена. Продолжить?'"), Истина, Неопределено,,, "ВалютаВзаиморасчетов");
		
		НовыйКурсВалютыВШапке = НЕ (ВыбранноеЗначение = ВалютаРегламентированногоУчета ИЛИ НЕ ЗначениеЗаполнено(ВыбранноеЗначение));
		
		Если КурсВалютыВШапке <> НовыйКурсВалютыВШапке Тогда
			КурсВалютыВШапке = НовыйКурсВалютыВШапке;
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	
	ПересчитатьСуммуДокументаПриИзмененииКурса();

КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Валюта", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("КурсВалюты", Объект.КурсДокумента);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.КурсДокумента      = Результат.КурсВалюты;
		Объект.КратностьДокумента = Результат.КратностьВалюты;
		
		ПересчитатьСуммуДокументаПриИзмененииКурса();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВспомогательныйСчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,, "Вспомогательный");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,, "Вспомогательный", Объект.СчетДтНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
	
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
			// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
			ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента информация о дебиторской задолженности в табличной части будет очищена. Продолжить?'"), Истина, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"), 
						Истина, Объект.КонтрагентДебитор, "ВладелецКонтрагентДебитор"); 
			
		Иначе
			
			ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента табличные части будут очищены. Продолжить?'"), Истина, Неопределено, 
									Истина, Объект.КонтрагентДебитор, "ВладелецКонтрагентДебитор");
									
		КонецЕсли;
								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		
		ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента информация о дебиторской задолженности в табличной части. Продолжить?'"),, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"), 
					Истина, ВыбранноеЗначение, "ВладелецКонтрагентДебитор");
					
	Иначе
	
		ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента табличные части будут очищены. Продолжить?'"),, Неопределено, 
					Истина, ВыбранноеЗначение, "ВладелецКонтрагентДебитор");
					
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
			// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
			ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента информация о кредиторской задолженности в табличной части будет очищена. Продолжить?'"), Истина, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"), 
						Истина, Объект.КонтрагентКредитор, "ВладелецКонтрагентКредитор"); 
						
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
		ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'При смене контрагента информация о кредиторской задолженности в табличной части будет очищена. Продолжить?'"),, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"), 
					Истина, ВыбранноеЗначение, "ВладелецКонтрагентКредитор"); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаДтБУПриИзменении(Элемент)
	
	Объект.СчетДтНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДт));
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
		
		ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДтНУ, Объект, ПоляФормы);

		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,,, Объект.СчетДтНУ);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");
		
		ДанныеОбъекта = Новый Структура("Организация, СубконтоДт1, СубконтоДт2, СубконтоДт3,
										|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
				
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
		СчетУчетаДтБУПриИзмененииНаСервере(ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПриИзменении(Элемент)
	
	ПроверкаВалютыДоговораИДокумента("СубконтоДт1");
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДт, Объект.СчетДтНУ, 1, Объект.СубконтоДт1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПриИзменении(Элемент)

	ПроверкаВалютыДоговораИДокумента("СубконтоДт2");
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДт, Объект.СчетДтНУ, 2, Объект.СубконтоДт2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПриИзменении(Элемент)
	
	ПроверкаВалютыДоговораИДокумента("СубконтоДт3");

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетДт, Объект.СчетДтНУ, 3, Объект.СубконтоДт3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетДт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетДт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетДт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаДтНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,,, Объект.СчетДтНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",,  "СчетДтНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаДтНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетДтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаКтБУПриИзменении(Элемент)
	
	Объект.СчетКтНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетКт));
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			
		ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3");

		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетКтНУ, Объект, ПоляФормы);

		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетКт,,, Объект.СчетКтНУ, "Кт");
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");
		
		ДанныеОбъекта = Новый Структура("Организация, СубконтоКт1, СубконтоКт2, СубконтоКт3,
										|СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
				
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
		СчетУчетаКтБУПриИзмененииНаСервере(ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1ПриИзменении(Элемент)
	
	ПроверкаВалютыДоговораИДокумента("СубконтоКт1");
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетКт, Объект.СчетКтНУ, 1, Объект.СубконтоКт1, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2ПриИзменении(Элемент)
	
	ПроверкаВалютыДоговораИДокумента("СубконтоКт2");

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетКт, Объект.СчетКтНУ, 2, Объект.СубконтоКт2, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3ПриИзменении(Элемент)
	
	ПроверкаВалютыДоговораИДокумента("СубконтоКт3");

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетКт, Объект.СчетКтНУ, 3, Объект.СубконтоКт3, "СубконтоКтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 1, "СчетКт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 2, "СчетКт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКт", 3, "СчетКт", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаКтНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетКт,,, Объект.СчетКтНУ, "Кт");
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",,  "СчетКтНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоКтНУ1, СубконтоКтНУ2, СубконтоКтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаКтНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",,  "СчетКтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",,  "СчетКтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 1, "СчетКтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 2, "СчетКтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоКтНУ", 3, "СчетКтНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВспомогательныйПриИзменении(Элемент)
	
	Объект.СчетДтНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДт));

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДтНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,, "Вспомогательный", Объект.СчетДтНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Вспомогательный", "СчетДт");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Вспомогательный", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВспомогательныйНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,, "Вспомогательный", Объект.СчетДтНУ);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Вспомогательный", "СчетДтНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СуммыДолга

&НаКлиенте
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		Элементы.СуммыДолга.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаПриИзменении(Элемент)
	
	ВывестиНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаПослеУдаления(Элемент)
	
	ВывестиНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
	
		ВывестиНадписи(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)
		
	СтрокаПлатеж = Элементы.СуммыДолга.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ДоговорКонтрагента, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов, ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаОрганизация, ДоговорКонтрагентаВладелец");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаПлатеж);
	
	ПараметрыОбъекта = Новый Структура("Организация, КонтрагентДебитор, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтрокиТаблицы);
	
	ПересчитатьСуммуПоСтроке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		
		СтандартнаяОбработка = Ложь;
		СтруктураПараметров = Новый Структура;
		ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
		
		Если ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
			Владелец = Объект.КонтрагентДебитор;
		Иначе
			Владелец = Объект.КонтрагентКредитор;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Организация", Владелец, Объект.Организация));
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ДоговорКонтрагента);
		
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораДокументаРасчетов("СуммыДолга", Элемент, СтандартнаяОбработка);
	 
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяСуммыДолга", "СуммыДолга");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратностиТЧ", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СуммыДолгаКД

&НаКлиенте
Процедура СуммыДолгаКредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяЗадолженностьПриИзменении(Элемент)
	
	ВывестиНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
	
		ВывестиНадписи(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяЗадолженностьПослеУдаления(Элемент)
	
	ВывестиНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяСуммыДолга", "СуммыДолгаКредиторскаяЗадолженность");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратностиТЧ", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДДоговорКонтрагентаПриИзменении(Элемент)
		
	СтрокаПлатеж = Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ДоговорКонтрагента, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов, ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаОрганизация, ДоговорКонтрагентаВладелец");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаПлатеж);
	
	ПараметрыОбъекта = Новый Структура("Организация, КонтрагентДебитор, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтрокиТаблицы);

	ПересчитатьСуммуПоСтроке(СтрокаПлатеж);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	НачалоВыбораДокументаРасчетов("СуммыДолгаКредиторскаяЗадолженность", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКДСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторскаяЗадолженность.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТекущиеДанные, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоВзаиморасчетамДебитор(Команда)
	
	Если НЕ ПроверкаПередЗаполнениемВыполнена() Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"),,?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета"), Неопределено, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская")),,,, "ЗаполнитьОстаткамиПоВзаиморасчетамДебитор"); 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоВзаиморасчетамКредитор(Команда)
	
	Если НЕ ПроверкаПередЗаполнениемВыполнена() Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьОчиститьСтрокиТабЧасти(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"),,?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета"), Неопределено, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская")),,,, "ЗаполнитьОстаткамиПоВзаиморасчетамКредитор"); 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПередЗаполнениемВыполнена()
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Заполнение возможно только в непроведенном документе'"), 60);
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаСообщения = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) И НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) тогда
			СтрокаСообщения = НСтр("ru = 'Не выбраны контрагенты (дебитор и кредитор)! Заполнение невозможно!");
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			СтрокаСообщения = НСтр("ru = 'Не выбран контрагент (дебитор)! Заполнение невозможно!'");
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			СтрокаСообщения = НСтр("ru = 'Не выбран контрагент (кредитор)! Заполнение невозможно!'");
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не выбран контрагент! Заполнение невозможно!'");
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(, СтрокаСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.СуммыДолга.ТолькоПросмотр       = Ложь;
	Элементы.СуммыДолга.ИзменятьСоставСтрок  = Ложь;
	Элементы.СуммыДолга.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.СуммыДолгаКредиторскаяЗадолженность.ТолькоПросмотр       = Ложь;
	Элементы.СуммыДолгаКредиторскаяЗадолженность.ИзменятьСоставСтрок  = Ложь;
	Элементы.СуммыДолгаКредиторскаяЗадолженность.ИзменятьПорядокСтрок = Ложь;

КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ТекущаяДатаДокумента	  = Объект.Дата;
	ТекущаяВалютаДокумента 	  = Объект.ВалютаДокумента;
	ТекущийКонтрагентДебитор  = Объект.КонтрагентДебитор;
	ТекущийКонтрагентКредитор = Объект.КонтрагентКредитор;
	ТекущийВидОперации		  = Объект.ВидОперации;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	//Управление доступностью курсом и кратностью расчетов
	КурсВалютыВШапке = НЕ (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента));
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСвязиПараметровВыбораДоговораСКонтрагентом();

	Если Параметры.Ключ.Пустая() Тогда
	
		УстановитьКурсДокумента();
	
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета И Объект.ИспользоватьВспомогательныйСчет Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Вспомогательный", "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Вспомогательный", "СчетДтНУ");	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,, "Вспомогательный", Объект.СчетДтНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		
		// Видимость реквизитов субконто
		Для Ном = 1 по 3 Цикл
			
			Элементы["ЗаголовокСубконтоДт"+Ном].Видимость = Ложь;
			Элементы["СубконтоДт"+Ном].Видимость          = Ложь;
			
			Элементы["ЗаголовокСубконтоКт"+Ном].Видимость = Ложь;
			Элементы["СубконтоКт"+Ном].Видимость          = Ложь;
			
		КонецЦикла;
		
		Элементы.ГруппаАналитикаДтНУ.Видимость = Ложь;
		Элементы.ГруппаАналитикаКтНУ.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,,, Объект.СчетДтНУ);
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетКт,,, Объект.СчетКтНУ, "Кт");
		
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ВывестиНадписи(ЭтаФорма);
	УправлениеФормой(ЭтотОбъект);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	                     
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));

	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.КурсДокумента.Видимость = Форма.КурсВалютыВШапке;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда

		Элементы.КонтрагентКредитор.Видимость		= Истина;
		Элементы.КонтрагентДебитор.Заголовок		= НСтр("ru = 'Дебитор'");
		Элементы.КонтрагентКредитор.Заголовок		= НСтр("ru = 'Кредитор'");
		Элементы.ГруппаУменьшениеДолга.Видимость	= Ложь;
		Элементы.ГруппаВзаиморасчеты.Заголовок		= НСтр("ru = 'Взаиморасчеты'");
		Элементы.ДоговорКонтрагента.Видимость		= Ложь;
		Элементы.СуммыДолга.ОтборСтрок				= Неопределено;
		Элементы.ИспользоватьВспомогательныйСчет.Видимость = Истина;
		
		Элементы.ГруппаВспомогательныйСчет.Видимость = Объект.ИспользоватьВспомогательныйСчет И Форма.ПоказыватьВДокументахСчетаУчета;
	
		Элементы.ГруппаСчетаУчета.Видимость = Ложь;
		
		Элементы.ГруппаСчетСубконтоНУВспомогательный.Видимость = Форма.ВидимостьНалоговогоУчета;
		
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
	Иначе

		Элементы.ИспользоватьВспомогательныйСчет.Видимость = Ложь;
		Элементы.ГруппаВспомогательныйСчет.Видимость = Ложь;
		Элементы.ГруппаСчетаУчета.Видимость          = Форма.ПоказыватьВДокументахСчетаУчета;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			Элементы.КонтрагентКредитор.Видимость  = Истина;
			Элементы.ДоговорКонтрагента.Видимость  = Истина;
			Элементы.КонтрагентКредитор.Заголовок  = НСтр("ru = 'Получатель'");
			Элементы.ГруппаАналитикаДтБУ.Заголовок = НСтр("ru = 'Счет переноса дебиторской задолженности'");
			Элементы.ГруппаАналитикаКтБУ.Заголовок = НСтр("ru = 'Счет переноса кредиторской задолженности'");			
		Иначе
			Элементы.КонтрагентКредитор.Видимость  = Ложь;
			Элементы.ДоговорКонтрагента.Видимость  = Ложь;
			Элементы.ГруппаАналитикаДтБУ.Заголовок = НСтр("ru = 'Счет списания дебиторской задолженности'");
			Элементы.ГруппаАналитикаКтБУ.Заголовок = НСтр("ru = 'Счет списания кредиторской задолженности'");			
		КонецЕсли;

		Элементы.КонтрагентДебитор.Заголовок 	 = НСтр("ru = 'Контрагент'");
		Элементы.ГруппаУменьшениеДолга.Видимость = Истина;
		Элементы.ГруппаВзаиморасчеты.Заголовок   = НСтр("ru = 'Дебиторская задолженность'");
		
		Элементы.СуммыДолга.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
		Элементы.СуммыДолгаКредиторскаяЗадолженность.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		
		Элементы.ГруппаАналитикаДтНУ.Видимость = Форма.ВидимостьНалоговогоУчета И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности");
		Элементы.ГруппаАналитикаКтНУ.Видимость = Форма.ВидимостьНалоговогоУчета И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности");
		
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс = "", ИмяСчета, ЗаменаСубконтоНУ = Ложь)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      = СтруктураКурса.Курс;
	Объект.КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, Сторона = "Дт")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто" + Сторона + "1" + Постфикс,
		Префикс + "Субконто" + Сторона + "2" + Постфикс,
		Префикс + "Субконто" + Сторона + "3" + Постфикс);
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Сторона + "1", "ЗаголовокСубконто" + Сторона + "2", "ЗаголовокСубконто" + Сторона + "3");
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		ПоляФормыНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
			Префикс + "Субконто" + Сторона + "НУ1" + Постфикс,
			Префикс + "Субконто" + Сторона + "НУ2" + Постфикс,
			Префикс + "Субконто" + Сторона + "НУ3" + Постфикс);
			
		ЗаголовкиПолейНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ЗаголовокСубконто" + Сторона + "НУ1", "ЗаголовокСубконто" + Сторона + "НУ2", "ЗаголовокСубконто" + Сторона + "НУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормыНУ, ЗаголовкиПолейНУ);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоговораСКонтрагентом()
	
	МассивСвязей = Новый Массив();
	СвязьВладелец = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	МассивСвязей.Добавить(СвязьВладелец);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Элементы.СуммыДолгаДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
		
	Иначе
		
		СвязьВладелец = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор");
		
		МассивСвязей.Добавить(СвязьВладелец);
		
		Элементы.СуммыДолгаДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных, ПересчетВалютнойСуммы = Истина)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагентаВалютаВзаиморасчетов;
	
	Если ПересчетВалютнойСуммы Тогда
		
		СтрокаДанных.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
				Объект.ВалютаДокумента, ВалютаДоговора,
				Объект.КурсДокумента, СтрокаДанных.КурсВзаиморасчетов,
				Объект.КратностьДокумента, СтрокаДанных.КратностьВзаиморасчетов);
				
	Иначе
		
		СтрокаДанных.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
				ВалютаДоговора, Объект.ВалютаДокумента,
				СтрокаДанных.КурсВзаиморасчетов, Объект.КурсДокумента, 
				СтрокаДанных.КратностьВзаиморасчетов, Объект.КратностьДокумента);
				
	КонецЕсли;  

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		СтрокаДанных.СуммаНУ = СтрокаДанных.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОчиститьСтрокиТабЧасти(ТекстВопроса, ЭтоОчисткаЗначения = Ложь, ВидЗадолженности = Неопределено,
				ПровестиСравнение = Ложь, ВыбранноеЗначение = Неопределено, ОбъектСравнения = Неопределено, ПроизвестиЗаполнение = "")
	
	Если ВидЗадолженности = Неопределено Тогда
		ТаблицаДолгов = Объект.СуммыДолга;
	Иначе
		ТаблицаДолгов = Объект.СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
	КонецЕсли;
	
	Если ОбъектСравнения = Неопределено Тогда
		ОбъектСравненияТекст = "";
	ИначеЕсли ОбъектСравнения = "ВладелецКонтрагентКредитор" ИЛИ ОбъектСравнения = "ВладелецКонтрагентДебитор" Тогда
		ОбъектСравненияТекст = "Владелец";
	Иначе
		ОбъектСравненияТекст = ОбъектСравнения;
	КонецЕсли;
		
	Если ТаблицаДолгов.Количество() > 0
	   И ?(ПровестиСравнение, ТаблицаДолгов[0]["ДоговорКонтрагента" + ОбъектСравненияТекст] <> ВыбранноеЗначение, Истина) Тогда

	   	СтруктураПараметров = Новый Структура("ТаблицаДолгов, ВидЗадолженности, ОбъектСравнения, ЭтоОчисткаЗначения, ПроизвестиЗаполнение", ТаблицаДолгов, ВидЗадолженности, ОбъектСравнения, ЭтоОчисткаЗначения, ПроизвестиЗаполнение);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьСтрокиТабЧасти", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли ПроизвестиЗаполнение <> "" Тогда
		
		КлючеваяОперация = "Документ ""корректировка долга"" (заполнение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентКредитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		ИначеЕсли ПроизвестиЗаполнение = "ЗаполнитьОстаткамиПоВзаиморасчетамДебитор" Тогда
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
		Иначе
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		КонецЕсли;
		
		ВывестиНадписи(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьСтрокиТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Если Параметры.Свойство("ЭтоОчисткаЗначения") И Параметры.ЭтоОчисткаЗначения Тогда
			
			Если Параметры.ОбъектСравнения = "ВалютаВзаиморасчетов" Тогда
				Объект.ВалютаДокумента = ТекущаяВалютаДокумента;
			ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентКредитор" Тогда
				Объект.КонтрагентКредитор = ТекущийКонтрагентКредитор;
			ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентДебитор" Тогда
				Объект.КонтрагентДебитор = ТекущийКонтрагентДебитор;
			КонецЕсли;
			
		Иначе
			
			Если Параметры.ОбъектСравнения = "ВалютаВзаиморасчетов" Тогда
				ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
			ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентКредитор" Тогда
				ТекущийКонтрагентКредитор = Объект.КонтрагентКредитор;
			ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентДебитор" Тогда
				ТекущийКонтрагентДебитор = Объект.КонтрагентДебитор;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВидЗадолженности") И Параметры.ВидЗадолженности = Неопределено Тогда
		
		Объект.СуммыДолга.Очистить();
		
	Иначе
		
		Для Каждого СтрокаКУдалению Из Параметры.ТаблицаДолгов Цикл
			Объект.СуммыДолга.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ОбъектСравнения") Тогда
		
		Если Параметры.ОбъектСравнения = "ВалютаВзаиморасчетов" Тогда
			ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
		ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентКредитор" Тогда
			ТекущийКонтрагентКредитор = Объект.КонтрагентКредитор;
		ИначеЕсли Параметры.ОбъектСравнения = "ВладелецКонтрагентДебитор" Тогда
			ТекущийКонтрагентДебитор = Объект.КонтрагентДебитор;
		КонецЕсли;
				
	КонецЕсли;
	
	Если Параметры.Свойство("ПроизвестиЗаполнение") И Параметры.ПроизвестиЗаполнение <> "" Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор,  ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентКредитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		ИначеЕсли Параметры.ПроизвестиЗаполнение = "ЗаполнитьОстаткамиПоВзаиморасчетамДебитор" Тогда
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
		Иначе
			ЗаполнитьОстаткамиВзаиморасчетов(Объект.КонтрагентДебитор, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		КонецЕсли;
		
		ВывестиНадписи(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаПлатеж Из Объект.СуммыДолга Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтруктураЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, Организация");
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов = СтруктураЗначений.ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаОрганизация 			= СтруктураЗначений.Организация;
			СтрокаПлатеж.ДоговорКонтрагентаВладелец 			= СтруктураЗначений.Владелец;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено;
			СтрокаПлатеж.ДоговорКонтрагентаОрганизация 			= Неопределено;
			СтрокаПлатеж.ДоговорКонтрагентаВладелец 			= Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиНадписи(Форма) 
	
	Объект 	 = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СуммаДеб  = 0;
	СуммаКред = 0;
	
	#Если НаСервере Тогда
	ТабСумм = Объект.СуммыДолга.Выгрузить();
	#КонецЕсли

	Если Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета 
		ИЛИ Объект.ВалютаДокумента = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
		
		#Если НаСервере Тогда
			ТабСумм.Свернуть("ВидЗадолженности", "Сумма");
		#Иначе
			Для Каждого Строка Из Объект.СуммыДолга Цикл
				Если Строка.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
					СуммаДеб  = СуммаДеб + Строка.Сумма;
				Иначе
					СуммаКред = СуммаКред + Строка.Сумма;
				КонецЕсли;
			КонецЦикла;
		#КонецЕсли
		
	Иначе
		#Если НаСервере Тогда
			ТабСумм.Свернуть("ВидЗадолженности", "СуммаВзаиморасчетов");
			ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
		#Иначе
			Для Каждого Строка Из Объект.СуммыДолга Цикл
				Если Строка.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
					СуммаДеб  = СуммаДеб + Строка.СуммаВзаиморасчетов;
				Иначе
					СуммаКред = СуммаКред + Строка.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЦикла;
		#КонецЕсли
		
	КонецЕсли; 
	
	#Если НаСервере Тогда

		Для Каждого СтрокаСумм Из ТабСумм Цикл
			
			Если СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
				СуммаДеб = СтрокаСумм.Сумма;
			ИначеЕсли  СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
				СуммаКред = СтрокаСумм.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецЕсли
	
	Разница = СуммаДеб - СуммаКред;
	
	Форма.НадписьДебиторскаяЗадолженность  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дебиторская задолженность: %1 %2'") , Формат(СуммаДеб , "ЧЦ=15; ЧДЦ=2; ЧН=-"), Строка(Объект.ВалютаДокумента));
	Форма.НадписьКредиторскаяЗадолженность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Кредиторская задолженность: %1 %2'"), Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2; ЧН=-"), Строка(Объект.ВалютаДокумента));
	
	Если Разница = 0 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		Форма.НадписьВзаимозачет = НСтр("ru = 'ВЗАИМОЗАЧЕТ'");
	Иначе
		Форма.НадписьВзаимозачет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Разница: %1 %2'"), Формат(Разница, "ЧЦ=15;ЧДЦ=2"), Строка(Объект.ВалютаДокумента));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета И Объект.ИспользоватьВспомогательныйСчет Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Вспомогательный", "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Вспомогательный", "СчетДтНУ");	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,,"Вспомогательный", Объект.СчетДтНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		// Видимость реквизитов субконто
		Для Ном = 1 по 3 Цикл
			
			Элементы["ЗаголовокСубконтоДт" + Ном].Видимость = Ложь;
			Элементы["СубконтоДт" + Ном].Видимость          = Ложь;
			
			Элементы["ЗаголовокСубконтоКт" + Ном].Видимость = Ложь;
			Элементы["СубконтоКт" + Ном].Видимость          = Ложь;
			
		КонецЦикла;
		
		Элементы.ГруппаАналитикаДтНУ.Видимость = Ложь;
		Элементы.ГруппаАналитикаКтНУ.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		// Видимость реквизитов субконто
		Для Ном = 1 по 3 Цикл
			
			Элементы["ЗаголовокСубконтоДт" + Ном].Видимость = Истина;
			Элементы["СубконтоДт" + Ном].Видимость          = Истина;
			
			Элементы["ЗаголовокСубконтоКт" + Ном].Видимость = Истина;
			Элементы["СубконтоКт" + Ном].Видимость          = Истина;
			
		КонецЦикла;
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДт,,, Объект.СчетДтНУ);
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетКт,,, Объект.СчетКтНУ, "Кт");
		
		Элементы.ГруппаАналитикаДтНУ.Видимость = Истина;
		Элементы.ГруппаАналитикаКтНУ.Видимость = Истина;
		
	КонецЕсли;

	УстановитьСвязиПараметровВыбораДоговораСКонтрагентом();
	
	// При ВО ПроведениеВзаимозачета не храним историю, т.к. в одной ТЧ выбираются договоры разных контрагентов
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	Иначе
		Элементы.СуммыДолгаДоговорКонтрагента.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	Для Каждого СтрокаТаблицы Из Объект.СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов;
			СтруктураВалюты                       = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
			СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
			СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
//	УстановитьКурсДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере()
	
	УстановитьКурсДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммыДолга.Очистить();
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	УстановитьФункциональныеОпцииФормы();
		
	УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров, "СуммыДолга");
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
    
	// получаем учетную политику для выбранной организации	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета И Объект.ИспользоватьВспомогательныйСчет Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Вспомогательный", "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Вспомогательный", "СчетДтНУ");	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт",, "СчетДт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт",, "СчетКт");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетДтНУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "КтНУ",, "СчетКтНУ");	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
        Возврат;
    КонецЕсли;
	
	СписокАналитикиСчетовШапки = Новый СписокЗначений;

	СписокАналитикиСчетовШапки.Добавить("Дт"); 		// СчетДт
	СписокАналитикиСчетовШапки.Добавить("Кт");  	// СчетКт
	СписокАналитикиСчетовШапки.Добавить("ДтНУ");	// СчетДтНУ
	СписокАналитикиСчетовШапки.Добавить("КтНУ");	// СчетКтНу

	СтруктураРеквизитов = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение,,, СтруктураРеквизитов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаДтБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДт1", "СубконтоДт2", "СубконтоДт3", 
	                                                        ДанныеОбъекта.СубконтоДт1, ДанныеОбъекта.СубконтоДт2, ДанныеОбъекта.СубконтоДт3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаКтНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаКтБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКт1", "СубконтоКт2", "СубконтоКт3", 
	                                                        ДанныеОбъекта.СубконтоКт1, ДанныеОбъекта.СубконтоКт2, ДанныеОбъекта.СубконтоКт3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоКтНУ1", "СубконтоКтНУ2", "СубконтоКтНУ3", 
	                                                        ДанныеОбъекта.СубконтоКтНУ1, ДанныеОбъекта.СубконтоКтНУ2, ДанныеОбъекта.СубконтоКтНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаДтНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПриИзмененииКурса()
	
	Если НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		// Установить курс в табличной части, пересчитать тенговый эквивалент для договоров в валюте
		Для Каждого Строка Из Объект.СуммыДолга Цикл
			
			Строка.КурсВзаиморасчетов		= Объект.КурсДокумента;
			Строка.КратностьВзаиморасчетов	= Объект.КратностьДокумента;
			
			ПересчитатьСуммуПоСтроке(Строка, Ложь);
			
		КонецЦикла;
		
		ВывестиНадписи(ЭтаФорма);

	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиВзаиморасчетов(ПоКонтрагенту, ВидЗадолженности) Экспорт
	
	СчетаРасчетов = УправлениеВзаиморасчетамиСервер.ПолучитьСписокСчетовВзаиморасчетов().ВыгрузитьКолонку("Ссылка");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 1
	|			ТОГДА Типовой.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетаПоДокументам,
	|	ВЫБОР
	|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 0
	|			ТОГДА Типовой.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетаБезДокументов,
	|	НаличиеНужныхСубконто.ЕстьДокументыРасчетов
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьКонтрагенты,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьДоговоры,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДокументыРасчетов
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьДокументыРасчетов
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойВидыСубконто.Ссылка) КАК НаличиеНужныхСубконто
	|		ПО Типовой.Ссылка = НаличиеНужныхСубконто.Ссылка
	|ГДЕ
	|	НаличиеНужныхСубконто.ЕстьКонтрагенты = 1
	|	И НаличиеНужныхСубконто.ЕстьДоговоры = 1
	|	И Типовой.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И Типовой.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", 	  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", 		  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументыРасчетов", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	СчетаУчетаРасчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СчетаРасчетовБезАналитикиПоДокументам = ОбщегоНазначенияБКВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаБезДокументов"), Истина);
	СчетаРасчетовСАналитикойПоДокументам  = ОбщегоНазначенияБКВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаПоДокументам"), Истина);

	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Если НЕ СчетаРасчетовБезАналитикиПоДокументам.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто2 КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовБезАналитикиПоДокументам),
		|		&ВидыСубконтоБезДокументов,
		|		Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
		|		    И Субконто1 = &Контрагент) КАК ТиповойОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ТиповойОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ТиповойОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ"
	КонецЕсли;
	
	Если НЕ СчетаРасчетовСАналитикойПоДокументам.Количество() = 0 Тогда
	
		Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст), "", Запрос.Текст + Символы.ПС + "Объединить ВСЕ" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто2 КАК Договор,
		|	ТиповойОстатки.Субконто3 КАК ДокументРасчетов,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовСАналитикойПоДокументам),
		|		&ВидыСубконтоСДокументами,
		|		Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
		|		    И Субконто1 = &Контрагент) КАК ТиповойОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ТиповойОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ТиповойОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ";
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",						  Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",				  Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", 				  ПоКонтрагенту);
	Запрос.УстановитьПараметр("ВидЗадолженности",			  ВидЗадолженности);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",  Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("ВидЗадолженностиКредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	
	ВалютыРеглУчета = Новый СписокЗначений;
	ВалютыРеглУчета.Добавить(ВалютаРегламентированногоУчета);
	ВалютыРеглУчета.Добавить(Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютыРеглУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
	Если ВалютыРеглУчета.НайтиПоЗначению(Объект.ВалютаДокумента) = Неопределено Тогда
		//Документ в иностранной валюте. Установим отбор только по договорам в нужной валюте
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И Валюта = &ВалютаДокумента");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетаРасчетовБезАналитикиПоДокументам", СчетаРасчетовБезАналитикиПоДокументам);
	Запрос.УстановитьПараметр("СчетаРасчетовСАналитикойПоДокументам",  СчетаРасчетовСАналитикойПоДокументам);
	
	ВидыСубконтоБезДокументов = Новый Массив();
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоБезДокументов", ВидыСубконтоБезДокументов);
	
	ВидыСубконтоСДокументами = Новый Массив();
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоСДокументами", ВидыСубконтоСДокументами);
	
	ТекущийРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Множитель = ?(ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 1, -1);
	
	Для Каждого СтрокаОстатков Из ТекущийРезультат Цикл
	    НоваяСтрока = Объект.СуммыДолга.Добавить();
		НоваяСтрока.ВидЗадолженности = ВидЗадолженности;
		НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
		НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
		НоваяСтрока.СчетУчетаРасчетов = СтрокаОстатков.Счет;
		Если ВалютыРеглУчета.НайтиПоЗначению(Объект.ВалютаДокумента) = Неопределено Тогда
			НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
			НоваяСтрока.КурсВзаиморасчетов = Объект.КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = Объект.КратностьДокумента;
			
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
		Иначе	
			
			Если ВалютыРеглУчета.НайтиПоЗначению(СтрокаОстатков.ВалютаВзаиморасчетов) = Неопределено Тогда
				// Это расчеты в у.е.
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
				КурсИКратностьРасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаОстатков.ВалютаВзаиморасчетов, Объект.Дата);
				
				НоваяСтрока.КратностьВзаиморасчетов = КурсИКратностьРасчетов.Кратность;
				НоваяСтрока.КурсВзаиморасчетов = ?(Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток=0,0,СтрокаОстатков.СуммаОстаток/СтрокаОстатков.ВалютнаяСуммаОстаток)/?(КурсИКратностьРасчетов.Кратность = 0,1,КурсИКратностьРасчетов.Кратность);
				
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.СуммаОстаток;	
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли; 
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.СуммаОстаток;
			
		КонецЕсли; 
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.Сделка = Неопределено;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, Организация, Владелец");
		
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата).Курс;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата).Кратность;
		СтрокаТабличнойЧасти.ДоговорКонтрагентаВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		СтрокаТабличнойЧасти.ДоговорКонтрагентаОрганизация = РеквизитыДоговора.Организация;
		СтрокаТабличнойЧасти.ДоговорКонтрагентаВладелец = РеквизитыДоговора.Владелец;
		
		Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораДокументаРасчетов(ТаблицаФормы, Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы[ТаблицаФормы].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран договор контрагента'"));
		Возврат;
	КонецЕсли; 
	
	МассивТипов = Новый Массив;
	
	ВидДоговорКонтрагента = ПолучитьЗначениеРеквизита(ТекущиеДанные.ДоговорКонтрагента, "ВидДоговора");
	
	Если ВидДоговорКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда

		МассивТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));

	ИначеЕсли ВидДоговорКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда

		МассивТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));

	Иначе // Прочее
		
		МассивТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));

	КонецЕсли;

	Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратностиТЧ(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
		ИмяСуммыДолга = "";
		ИмяПоля = "";
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ИмяСуммыДолга", ИмяСуммыДолга) Тогда
			Если ИмяСуммыДолга = "" Тогда
				Объект[Параметры.ИмяПоля] = Результат.КурсВалюты;
				ЗаполнятьКурсиКратностьРасшифровки = Ложь;
			Иначе				
				ТекущиеДанные = Элементы[ИмяСуммыДолга].ТекущиеДанные;
				Если Параметры.Свойство("ИмяПоля", ИмяПоля) Тогда
					ТекущиеДанные[ИмяПоля] = Результат.КурсВалюты;
					ЗаполнятьКурсиКратностьРасшифровки = Ложь;
				КонецЕсли;   		
			КонецЕсли;
		Иначе
			ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		КонецЕсли;
		
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			
			ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
			ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
			
			ПересчитатьСуммуПоСтроке(ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВалютыДоговораИДокумента(ИмяСубконто)
	
	Если ТипЗнч(Объект[ИмяСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ВалютаВзаиморасчетов = ПолучитьЗначениеРеквизита(Объект[ИмяСубконто], "ВалютаВзаиморасчетов");
		
		Если ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда 
			Объект[ИмяСубконто] = Неопределено;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Валюта договора не соответствует валюте документа, договор будет очищен'"));
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаВидЗадолженностиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СуммыДолга.ТекущиеДанные;
	Если ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") 
		И ТекущиеДанные.ДоговорКонтрагентаВладелец <> Объект.КонтрагентДебитор Тогда
		
		ТекущиеДанные.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент);
	КонецЕсли;	
	
	Если ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") 
		И ТекущиеДанные.ДоговорКонтрагентаВладелец <> Объект.КонтрагентКредитор Тогда
		
		ТекущиеДанные.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент);
	КонецЕсли;	
	
КонецПроцедуры
