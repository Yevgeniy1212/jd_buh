#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТЧ) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.КонтрагентДебитор, СтрокаТЧ.ДоговорКонтрагента);

	Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
	ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация; ПредставлениеСпискаСтруктурныхЕдиниц");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");		
		БлокируемыеРеквизиты.Добавить("КонтрагентДебитор");
		БлокируемыеРеквизиты.Добавить("КонтрагентКредитор");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КратностьДокумента");
		БлокируемыеРеквизиты.Добавить("КурсДокумента");
		
		// таб. часть СуммыДолга
		БлокируемыеРеквизиты.Добавить("СуммыДолга; Заполнить, ЗаполнитьКредиторскаяЗадолженность");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.ДоговорКонтрагента;
			|СуммыДолгаДоговорКонтрагента, СуммыДолгаДоговорКонтрагентаВалютаВзаиморасчетов,
			|СуммыДолгаКДДоговорКонтрагента, СуммыДолгаКДДоговорКонтрагентаВалютаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.Сумма; СуммыДолгаСумма, СуммыДолгаКДСумма");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.СуммаНУ; СуммыДолгаСуммаНУ, СуммыДолгаКДСуммаНУ");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.СуммаВзаиморасчетов; СуммыДолгаСуммаВзаиморасчетов, СуммыДолгаКДСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.КурсВзаиморасчетов; СуммыДолгаКурсВзаиморасчетов, СуммыДолгаКДКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.КратностьВзаиморасчетов; СуммыДолгаКратностьВзаиморасчетов, СуммыДолгаКДКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("СуммыДолга.ВидЗадолженности; СуммыДолгаВидЗадолженности");
					
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	//// Коэффициент пересчета сумм из валюты документа в тенге
	//Если Реквизиты.ДокументВРеглВалюте Тогда
	//	КоэффициентРеглВалюты = 1;
	//Иначе                                                                                                                                               
	//	СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
	//	
	//	Если СтруктураКурсаДокумента.Кратность = 0 Тогда
	//		Отказ           = Истина;	
	//		ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
	//			|Не задана кратность валюты %2 на дату %3'");
	//		ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
	//		
	//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
	//	КонецЕсли;
	//	
	//	КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	//КонецЕсли;
	//
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ПодразделениеДляРеглОпераций					= УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ); 	
	Реквизиты.Вставить("ПодразделениеДляРеглОпераций ", 			  	 ПодразделениеДляРеглОпераций);
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   ВедениеУчетаВременныхразницБалансовымМетодом);
				
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос.УстановитьПараметр("СодержаниеВзаимозачет", НСтр("ru = 'Взаимозачет'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеПереносЗадолженности", НСтр("ru = 'Перенос задолженности'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеСписаниеЗадолженности", НСтр("ru = 'Списание задолженности'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеСписаниеДтЗадолженностиНУ", НСтр("ru = 'Списание дебиторской задолженности'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеСписаниеКтЗадолженностиНУ", НСтр("ru = 'Списание кредиторской задолженности'", КодОсновногоЯзыка));
	
	НомераТаблиц = Новый Структура;	
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицы(НомераТаблиц)
		+ ТекстЗапросаТаблицаВзаимозачетЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаТаблицаВзаимозачетЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаРеквизитыДебиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаРеквизитыКредиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаТаблицаПереносЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаТаблицаПереносЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)
		+ ТекстЗапросаТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)
		;
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, 						"НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.КонтрагентДебитор КАК КонтрагентДебитор,
	|	Реквизиты.КонтрагентКредитор КАК КонтрагентКредитор,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СчетДт КАК СчетДт,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	Реквизиты.СчетКт КАК СчетКт,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.СчетДтНУ КАК СчетДтНУ,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.СчетКтНУ КАК СчетКтНУ,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ИспользоватьВспомогательныйСчет,
	|	Реквизиты.ДоговорКонтрагента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.КорректировкаДолга КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.КонтрагентДебитор КАК КонтрагентДебитор,
	|	Реквизиты.КонтрагентКредитор КАК КонтрагентКредитор,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СчетДт КАК СчетДт,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДтБУ1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДтБУ2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДтБУ3,
	|	Реквизиты.СчетКт КАК СчетКт,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКтБУ3,
	|	Реквизиты.СчетДтНУ КАК СчетДтНУ,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.СчетКтНУ КАК СчетКтНУ,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.ИспользоватьВспомогательныйСчет,
	|	Реквизиты.ДоговорКонтрагента
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицы(НомераТаблиц)

	НомераТаблиц.Вставить("ВТ_ДебиторскаяЗадолженность", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_КредиторскаяЗадолженность", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Реквизиты.Ссылка КАК Ссылка,
	               |	ТаблицаДебиторскаяЗадолженность.НомерСтроки КАК НомерСтроки,
	               |	НЕОПРЕДЕЛЕНО КАК Подразделение,
	               |	ТаблицаДебиторскаяЗадолженность.Ссылка.КонтрагентДебитор КАК КонтрагентДебитор,
	               |	ТаблицаДебиторскаяЗадолженность.Ссылка.КонтрагентКредитор КАК КонтрагентКредитор,
	               |	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	               |	ВЫБОР
	               |		КОГДА ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РасчетыВВалюте,
	               |	ВЫБОР
	               |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
	               |			ТОГДА Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |					ТОГДА Реквизиты.СубконтоДт2.ВалютаВзаиморасчетов
	               |				ИНАЧЕ ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	               |	ТаблицаДебиторскаяЗадолженность.Сделка КАК ДокументРасчетов,
	               |	ТаблицаДебиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетРасчетов,
	               |	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК СчетРасчетовНУ,
	               |	ТаблицаДебиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетАвансов,
	               |	Реквизиты.ИспользоватьВспомогательныйСчет КАК ИспользоватьВспомогательныйСчет,
	               |	Реквизиты.ДоговорКонтрагента КАК КорДоговорКонтрагента,
	               |	Реквизиты.СчетДт КАК СчетДт,
	               |	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	               |	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	               |	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	               |	Реквизиты.СчетКт КАК СчетКт,
	               |	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	               |	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	               |	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	               |	Реквизиты.СчетДтНУ КАК СчетДтНУ,
	               |	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	               |	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	               |	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	               |	Реквизиты.СчетКтНУ КАК СчетКтНУ,
	               |	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	               |	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	               |	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	               |	ТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	ВЫБОР
	               |		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	               |			ТОГДА ТаблицаДебиторскаяЗадолженность.Сумма
	               |		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДебиторскаяЗадолженность.Сумма * (Реквизиты.КурсДокумента / ВЫБОР
	               |					КОГДА Реквизиты.КратностьДокумента = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ Реквизиты.КратностьДокумента
	               |				КОНЕЦ) КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаРегл,
	               |	ВЫБОР
	               |		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	               |			ТОГДА ТаблицаДебиторскаяЗадолженность.СуммаНУ
	               |		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДебиторскаяЗадолженность.СуммаНУ * (ТаблицаДебиторскаяЗадолженность.КурсВзаиморасчетов / ВЫБОР
	               |					КОГДА ТаблицаДебиторскаяЗадолженность.КратностьВзаиморасчетов = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ ТаблицаДебиторскаяЗадолженность.КратностьВзаиморасчетов
	               |				КОНЕЦ) КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаНУ,
	               |	Реквизиты.ВидОперации КАК ВидОперации,
	               |	ТаблицаДебиторскаяЗадолженность.Сумма КАК СуммаВВалютеДокумента
	               |ПОМЕСТИТЬ ВТ_ДебиторскаяЗадолженность
	               |ИЗ
	               |	Документ.КорректировкаДолга.СуммыДолга КАК ТаблицаДебиторскаяЗадолженность
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	               |		ПО ТаблицаДебиторскаяЗадолженность.СчетУчетаРасчетов = Типовой.Ссылка
	               |ГДЕ
	               |	ТаблицаДебиторскаяЗадолженность.Ссылка = &Ссылка
	               |	И ТаблицаДебиторскаяЗадолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реквизиты.Ссылка КАК Ссылка,
	               |	ТаблицаКредиторскаяЗадолженность.НомерСтроки КАК НомерСтроки,
	               |	НЕОПРЕДЕЛЕНО КАК Подразделение,
	               |	ТаблицаКредиторскаяЗадолженность.Ссылка.КонтрагентДебитор КАК КонтрагентДебитор,
	               |	ТаблицаКредиторскаяЗадолженность.Ссылка.КонтрагентКредитор КАК КонтрагентКредитор,
	               |	ВЫБОР
	               |		КОГДА НЕ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета)
	               |			ТОГДА ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента.Владелец
	               |		ИНАЧЕ Реквизиты.КонтрагентКредитор
	               |	КОНЕЦ КАК Контрагент,
	               |	ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	               |	ВЫБОР
	               |		КОГДА ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РасчетыВВалюте,
				   |	ВЫБОР
	               |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
	               |			ТОГДА Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |					ТОГДА Реквизиты.СубконтоДт2.ВалютаВзаиморасчетов
	               |				ИНАЧЕ ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем, 
	               |	ТаблицаКредиторскаяЗадолженность.Сделка КАК ДокументРасчетов,
	               |	ТаблицаКредиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетРасчетов,
	               |	ТаблицаКредиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетАвансов,
	               |	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК СчетРасчетовНУ,
	               |	Реквизиты.ИспользоватьВспомогательныйСчет КАК ИспользоватьВспомогательныйСчет,
	               |	Реквизиты.ДоговорКонтрагента КАК КорДоговорКонтрагента,
	               |	Реквизиты.СчетДт КАК СчетДт,
	               |	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	               |	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	               |	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	               |	Реквизиты.СчетКт КАК СчетКт,
	               |	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	               |	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	               |	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	               |	Реквизиты.СчетДтНУ КАК СчетДтНУ,
	               |	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	               |	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	               |	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	               |	Реквизиты.СчетКтНУ КАК СчетКтНУ,
	               |	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	               |	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	               |	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	               |	ТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	ВЫБОР
	               |		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	               |			ТОГДА ТаблицаКредиторскаяЗадолженность.Сумма
	               |		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаКредиторскаяЗадолженность.Сумма * (Реквизиты.КурсДокумента / ВЫБОР
	               |					КОГДА Реквизиты.КратностьДокумента = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ Реквизиты.КратностьДокумента
	               |				КОНЕЦ) КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаРегл,
	               |	ВЫБОР
	               |		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	               |			ТОГДА ТаблицаКредиторскаяЗадолженность.Сумма
	               |		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаКредиторскаяЗадолженность.СуммаНУ * (ТаблицаКредиторскаяЗадолженность.КурсВзаиморасчетов / ВЫБОР
	               |					КОГДА ТаблицаКредиторскаяЗадолженность.КратностьВзаиморасчетов = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ ТаблицаКредиторскаяЗадолженность.КратностьВзаиморасчетов
	               |				КОНЕЦ) КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаНУ,
	               |	Реквизиты.ВидОперации КАК ВидОперации,
	               |	ТаблицаКредиторскаяЗадолженность.Сумма КАК СуммаВВалютеДокумента
	               |ПОМЕСТИТЬ ВТ_КредиторскаяЗадолженность
	               |ИЗ
	               |	Документ.КорректировкаДолга.СуммыДолга КАК ТаблицаКредиторскаяЗадолженность
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	               |		ПО ТаблицаКредиторскаяЗадолженность.СчетУчетаРасчетов = Типовой.Ссылка
	               |ГДЕ
	               |	ТаблицаКредиторскаяЗадолженность.Ссылка = &Ссылка
	               |	И ТаблицаКредиторскаяЗадолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)"
	                ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции


// Вид операции "Проведение взаимозачета".


// Вид операции "Перенос задолженности".

Функция ТекстЗапросаРеквизитыДебиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыДебиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ИспользоватьВспомогательныйСчет КАК ИспользоватьВспомогательныйСчет,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ИСТИНА КАК РасчетыПоРеализации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизитыКредиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыКредиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ИспользоватьВспомогательныйСчет КАК ИспользоватьВспомогательныйСчет,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ИСТИНА КАК РасчетыПоРеализации
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

//ПЕРЕНОС ЗАДОЛЖЕННОСТИ
Функция ТекстЗапросаТаблицаПереносЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаПереносЗадолженностиДебиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДебиторскаяЗадолженность.Ссылка,
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки,
	|	ТаблицаДебиторскаяЗадолженность.Контрагент,
	|	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаДебиторскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаДебиторскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаДебиторскаяЗадолженность.СчетАвансов,
	|	ТаблицаДебиторскаяЗадолженность.СчетДт КАК КорСчет,
	|	ТаблицаДебиторскаяЗадолженность.КонтрагентКредитор КАК КорСубконто1,
	|	ТаблицаДебиторскаяЗадолженность.КорДоговорКонтрагента КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.КонтрагентДебитор = ТаблицаДебиторскаяЗадолженность.КонтрагентКредитор
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.ДокументРасчетов
	|		ИНАЧЕ ТаблицаДебиторскаяЗадолженность.Ссылка
	|	КОНЕЦ КАК КорСубконто3,
	|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК КорСчетНУ,
	|	ТаблицаДебиторскаяЗадолженность.КонтрагентКредитор КАК КорСубконтоНУ1,
	|	ТаблицаДебиторскаяЗадолженность.КорДоговорКонтрагента КАК КорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
	|	ТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СуммаРегл,
	|	0 КАК СуммаНУ,
	|	&СодержаниеПереносЗадолженности КАК Содержание	
	|ИЗ
	|	ВТ_ДебиторскаяЗадолженность КАК ТаблицаДебиторскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаДебиторскаяЗадолженность.СчетДт = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаДебиторскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаПереносЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаПереносЗадолженностиКредиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКредиторскаяЗадолженность.Ссылка,
	|	ТаблицаКредиторскаяЗадолженность.НомерСтроки,
	|	ТаблицаКредиторскаяЗадолженность.Контрагент,
	|	ТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаКредиторскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаКредиторскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаКредиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаКредиторскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаКредиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаКредиторскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаКредиторскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаКредиторскаяЗадолженность.СчетРасчетов,
	|	ТаблицаКредиторскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаКредиторскаяЗадолженность.СчетАвансов,
	|	ТаблицаКредиторскаяЗадолженность.СчетКт КАК КорСчет,
	|	ТаблицаКредиторскаяЗадолженность.КонтрагентКредитор КАК КорСубконто1,
	|	ТаблицаКредиторскаяЗадолженность.КорДоговорКонтрагента КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА ТаблицаКредиторскаяЗадолженность.КонтрагентДебитор = ТаблицаКредиторскаяЗадолженность.КонтрагентКредитор
	|			ТОГДА ТаблицаКредиторскаяЗадолженность.ДокументРасчетов
	|		ИНАЧЕ ТаблицаКредиторскаяЗадолженность.Ссылка
	|	КОНЕЦ КАК КорСубконто3,
	|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК КорСчетНУ,
	|	ТаблицаКредиторскаяЗадолженность.КонтрагентКредитор КАК КорСубконтоНУ1,
	|	ТаблицаКредиторскаяЗадолженность.КорДоговорКонтрагента КАК КорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
	|	ТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаКредиторскаяЗадолженность.СуммаРегл,
	|	0 КАК СуммаНУ,
	|	&СодержаниеПереносЗадолженности КАК Содержание
	|ИЗ
	|	ВТ_КредиторскаяЗадолженность КАК ТаблицаКредиторскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаКредиторскаяЗадолженность.СчетДт = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаКредиторскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКредиторскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

//СПИСАНИЕ ЗАДОЛЖЕННОСТИ
Функция ТекстЗапросаТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДебиторскаяЗадолженность.Ссылка,
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки,
	|	ТаблицаДебиторскаяЗадолженность.Контрагент,
	|	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаДебиторскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаДебиторскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаДебиторскаяЗадолженность.СчетАвансов,
	|	ТаблицаДебиторскаяЗадолженность.СчетДт КАК КорСчет,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДт1 КАК КорСубконто1,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДт2 КАК КорСубконто2,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДт3 КАК КорСубконто3,
	|	ТаблицаДебиторскаяЗадолженность.СчетДтНУ КАК КорСчетНУ,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ1 КАК КорСубконтоНУ1,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ2 КАК КорСубконтоНУ2,
	|	ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ3 КАК КорСубконтоНУ3,
	|	ТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СуммаРегл,
	|	ТаблицаДебиторскаяЗадолженность.СуммаНУ,
	|	&СодержаниеСписаниеЗадолженности КАК Содержание	
	|ИЗ
	|	ВТ_ДебиторскаяЗадолженность КАК ТаблицаДебиторскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаДебиторскаяЗадолженность.СчетДт = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаДебиторскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКредитовскаяЗадолженность.Ссылка,
	|	ТаблицаКредитовскаяЗадолженность.НомерСтроки,
	|	ТаблицаКредитовскаяЗадолженность.Контрагент,
	|	ТаблицаКредитовскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаКредитовскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаКредитовскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаКредитовскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СчетРасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаКредитовскаяЗадолженность.СчетАвансов,
	|	ТаблицаКредитовскаяЗадолженность.СчетКт КАК КорСчет,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКт1 КАК КорСубконто1,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКт2 КАК КорСубконто2,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКт3 КАК КорСубконто3,
	|	ТаблицаКредитовскаяЗадолженность.СчетКтНУ КАК КорСчетНУ,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКтНУ1 КАК КорСубконтоНУ1,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКтНУ2 КАК КорСубконтоНУ2,
	|	ТаблицаКредитовскаяЗадолженность.СубконтоКтНУ3 КАК КорСубконтоНУ3,
	|	ТаблицаКредитовскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СуммаРегл,
	|	ТаблицаКредитовскаяЗадолженность.СуммаНУ,
	|	&СодержаниеСписаниеЗадолженности КАК Содержание	
	|ИЗ
	|	ВТ_КредиторскаяЗадолженность КАК ТаблицаКредитовскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТаблицаКредитовскаяЗадолженность.СчетДт = Типовой.Ссылка
	|ГДЕ
	|	ТаблицаКредитовскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКредитовскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ВЗАИМОЗАЧЕТ
Функция ТекстЗапросаТаблицаВзаимозачетЗадолженностиДебиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаВзаимозачетЗадолженностиДебиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДебиторскаяЗадолженность.Ссылка,
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки,
	|	ТаблицаДебиторскаяЗадолженность.Контрагент,
	|	ТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаДебиторскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаДебиторскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаДебиторскаяЗадолженность.СчетАвансов,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СчетДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто3,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СчетДтНУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчетНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаДебиторскаяЗадолженность.СубконтоДтНУ3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ3,
	|	ТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаДебиторскаяЗадолженность.СуммаРегл,
	|	ТаблицаДебиторскаяЗадолженность.СуммаНУ,
	|	&СодержаниеВзаимозачет КАК Содержание,
	|	ТаблицаДебиторскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|ИЗ
	|	ВТ_ДебиторскаяЗадолженность КАК ТаблицаДебиторскаяЗадолженность
	|ГДЕ
	|	ТаблицаДебиторскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДебиторскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаВзаимозачетЗадолженностиКредиторскаяЗадолженность(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаВзаимозачетЗадолженностиКредиторскаяЗадолженность", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКредитовскаяЗадолженность.Ссылка,
	|	ТаблицаКредитовскаяЗадолженность.НомерСтроки,
	|	ТаблицаКредитовскаяЗадолженность.Контрагент,
	|	ТаблицаКредитовскаяЗадолженность.ДоговорКонтрагента,
	|	ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетов,
	|	ТаблицаКредитовскаяЗадолженность.ВедениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем ЕСТЬ NULL 
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетов
	|		ИНАЧЕ ТаблицаКредитовскаяЗадолженность.ВалютаВзаиморасчетовСПолучателем
	|	КОНЕЦ КАК ВалютаВзаиморасчетовСПолучателем,
	|	ТаблицаКредитовскаяЗадолженность.РасчетыВВалюте,
	|	ТаблицаКредитовскаяЗадолженность.ДокументРасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СчетРасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СчетРасчетовНУ,
	|	ТаблицаКредитовскаяЗадолженность.СчетАвансов,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СчетДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто3,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СчетДтНУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчетНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДтНУ1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДтНУ2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|			ТОГДА ТаблицаКредитовскаяЗадолженность.СубконтоДтНУ3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконтоНУ3,
	|	ТаблицаКредитовскаяЗадолженность.СуммаВзаиморасчетов,
	|	ТаблицаКредитовскаяЗадолженность.СуммаРегл,
	|	ТаблицаКредитовскаяЗадолженность.СуммаНУ,
	|	&СодержаниеВзаимозачет КАК Содержание,
	|	ТаблицаКредитовскаяЗадолженность.ИспользоватьВспомогательныйСчет
	|ИЗ
	|	ВТ_КредиторскаяЗадолженность КАК ТаблицаКредитовскаяЗадолженность
	|ГДЕ
	|	ТаблицаКредитовскаяЗадолженность.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКредитовскаяЗадолженность.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежное поручение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьАктаВзаимозачета";
	КомандаПечати.Представление = НСтр("ru = 'Корректировка долга'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьАктаВзаимозачета";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьАктаВзаимозачета");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьАктаВзаимозачета",
			НСтр("ru = 'Корректировка долга'"),
			ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КорректировкаДолга.ПФ_MXL_Взаимозачет");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПечатьАктаВзаимозачета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторка", Перечисления.ВидыЗадолженности.Дебиторская);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Ссылка,
	|	КорректировкаДолга.Номер КАК Номер,
	|	КорректировкаДолга.Дата КАК Дата,
	|	КорректировкаДолга.ВидОперации КАК ВидОперации,
	|	КорректировкаДолга.КонтрагентДебитор КАК Дебитор,
	|	КорректировкаДолга.КонтрагентКредитор КАК Кредитор,
	|	КорректировкаДолга.Организация КАК Организация,
	|	КорректировкаДолга.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	КорректировкаДолга.ВалютаДокумента,
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента,
	|	КорректировкаДолгаСуммыДолга.СчетУчетаРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолгаСуммыДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолгаСуммыДолга.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолгаСуммыДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолгаСуммыДолга.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВалютнаяСуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолгаСуммыДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолгаСуммыДолга.Сумма
	|		КОНЕЦ) КАК СуммаКредиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолгаСуммыДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолгаСуммыДолга.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКредиторки
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
	|		ПО (КорректировкаДолгаСуммыДолга.Ссылка = КорректировкаДолга.Ссылка)
	|ГДЕ
	|	КорректировкаДолга.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолга.Ссылка,
	|	КорректировкаДолга.Номер,
	|	КорректировкаДолга.Дата,
	|	КорректировкаДолга.ВидОперации,
	|	КорректировкаДолга.КонтрагентДебитор,
	|	КорректировкаДолга.КонтрагентКредитор,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.СтруктурноеПодразделение,
	|	КорректировкаДолга.ВалютаДокумента,
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента,
	|	КорректировкаДолгаСуммыДолга.СчетУчетаРасчетов
	|ИТОГИ ПО
	|	КорректировкаДолга.Ссылка";
						
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_Акт";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаДолга.ПФ_MXL_Взаимозачет", КодЯзыка);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл 
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоДокументам);
		
		СведенияОбОрганизации 	 = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.Дата);
		СведенияОКредиторе 	   	 = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Кредитор, ВыборкаПоДокументам.Дата);
		СведенияОДебиторе 	  	 = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Дебитор, ВыборкаПоДокументам.Дата);
		
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Кредитор = ?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности, ВыборкаПоДокументам.Дебитор, ВыборкаПоДокументам.Кредитор);
		ПредставлениеКредитора   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Кредитор, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		
		ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
		Если ВыборкаПоДокументам.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоДокументам.ВалютаДокумента) Тогда
			КолонкаСуммы = "Сумма";
			ПредставлениеВалюты = Строка(ВалютарегламентированногоУчета);
		Иначе	
			КолонкаСуммы = "ВалютнаяСумма";
			ПредставлениеВалюты = Строка(ВыборкаПоДокументам.ВалютаДокумента);
		КонецЕсли; 
		
		ВыводитьИтогКонтрагентов = Истина;
		
		Если ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			СтрокаШапки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Акт взаимозачета № %1
			| от %2'", КодЯзыка), ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка), Формат(ВыборкаПоДокументам.Дата, "Л=" + КодЯзыка + "; ДЛФ=DD"));
		ИначеЕсли ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			СтрокаШапки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Акт списания задолженности № %1
			| от %2'", КодЯзыка), ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка), Формат(ВыборкаПоДокументам.Дата, "Л=" + КодЯзыка + "; ДЛФ=DD"));
			ВыводитьИтогКонтрагентов = Ложь;
		Иначе
			СтрокаШапки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Акт переноса задолженности № %1
			| от %2'", КодЯзыка), ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка), Формат(ВыборкаПоДокументам.Дата, "Л=" + КодЯзыка + "; ДЛФ=DD"));
		КонецЕсли;
		
		СтрокаКредиторки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1. Задолженность %1 перед %2 составляет %3 %4 по следующим договорам:'", КодЯзыка),
			ПредставлениеОрганизации,
			ПредставлениеКредитора,
			Формат(ВыборкаПоДокументам[КолонкаСуммы + "Кредиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль'")),
			ПредставлениеВалюты);
		
		ОбластьМакета.Параметры.СтрокаШапки = СтрокаШапки;
		ОбластьМакета.Параметры.СтрокаКредиторки = СтрокаКредиторки;
		
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКредиторки");
		
		ВыборкаПоДаннымДокумента = ВыборкаПоДокументам.Выбрать();

		Пока ВыборкаПоДаннымДокумента.Следующий() Цикл
			Если ВыборкаПоДаннымДокумента[КолонкаСуммы + "Кредиторки"] = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ОбластьМакета.Параметры.Договор = СокрЛП(ВыборкаПоДаннымДокумента.ДоговорКонтрагента);
			ОбластьМакета.Параметры.Счет    = ВыборкаПоДаннымДокумента.СчетУчетаРасчетов;
			ОбластьМакета.Параметры.Сумма   = Формат(ВыборкаПоДаннымДокумента[КолонкаСуммы + "Кредиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль'")) + " " + ПредставлениеВалюты;
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДебиторки");
		ПредставлениеДебитора  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОДебиторе , "ПолноеНаименование,");
		ПредставлениеКредитора = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОКредиторе, "ПолноеНаименование,");
		СтрокаДебиторки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2. Задолженность %1 перед %2 составляет %3 %4 по следующим договорам:'", КодЯзыка),
			ПредставлениеДебитора,
			ПредставлениеОрганизации,
			Формат(ВыборкаПоДокументам[КолонкаСуммы + "Дебиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль'")),
			ПредставлениеВалюты);
		
		ОбластьМакета.Параметры.СтрокаДебиторки = СтрокаДебиторки;
		
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДебиторки");
		
		ВыборкаПоДаннымДокумента.Сбросить();
		
		Пока ВыборкаПоДаннымДокумента.Следующий() Цикл
			Если ВыборкаПоДаннымДокумента[КолонкаСуммы + "Дебиторки"] = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ОбластьМакета.Параметры.Договор = СокрЛП(ВыборкаПоДаннымДокумента.ДоговорКонтрагента);
			ОбластьМакета.Параметры.Счет    = ВыборкаПоДаннымДокумента.СчетУчетаРасчетов;
			ОбластьМакета.Параметры.Сумма   = Формат(ВыборкаПоДаннымДокумента[КолонкаСуммы+"Дебиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль'")) + " " + ПредставлениеВалюты;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьИтого 	   = Макет.ПолучитьОбласть("ИтоговаяСумма");
		ОбластьПодвала     = Макет.ПолучитьОбласть("Подвал|Организация");
		
		СуммаДебиторки     = ВыборкаПоДокументам[КолонкаСуммы + "Дебиторки"];
		СуммаКредиторки    = ВыборкаПоДокументам[КолонкаСуммы + "Кредиторки"];
		СуммаЗадолженности = ?(СуммаДебиторки = 0, СуммаКредиторки, СуммаДебиторки);
		
		Если ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			ТекстСуммы = НСтр("ru = 'Взаимозачет производится на сумму %1 %2'", КодЯзыка);
		ИначеЕсли ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			ТекстСуммы = НСтр("ru = 'Списание задолженности производится на сумму %1 %2'", КодЯзыка);
		Иначе
			ТекстСуммы = НСтр("ru = 'Перенос задолженности производится на сумму %1 %2'", КодЯзыка);
		КонецЕсли;
		СтрокаВзаимозачета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСуммы, Формат(СуммаЗадолженности, НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль'")), ПредставлениеВалюты);
		ОбластьИтого.Параметры.СтрокаВзаимозачета       = СтрокаВзаимозачета;
		ТабДокумент.Вывести(ОбластьИтого);
		
		//выводим подвал
		ОбластьПодвала.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;	
		ОбластьПодвала.Параметры.РНН_БИНОрганизации 	  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоДокументам.Дата);
		ОбластьПодвала.Параметры.АдресОрганизации 		  = СведенияОбОрганизации.ЮридическийАдрес;
		ТабДокумент.Вывести(ОбластьПодвала);
		
		РНН_БИНКредитора = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОКредиторе, ВыборкаПоДокументам.Дата);
		
		//в случае списания выводить контрагентов не нужно
		Если ВыводитьИтогКонтрагентов И ВыборкаПоДокументам.Кредитор <> ВыборкаПоДокументам.Дебитор Тогда
			ОбластьПодвалаКонтрагентов = Макет.ПолучитьОбласть("ПодвалКонтрагентов");	
			
			ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
			ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНКредитора 		  = РНН_БИНКредитора;
			ОбластьПодвалаКонтрагентов.Параметры.АдресКредитора 		  = СведенияОКредиторе.ЮридическийАдрес;
			
			ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеДебитора    = ПредставлениеДебитора;
			ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНДебитора 		  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОДебиторе, ВыборкаПоДокументам.Дата);
			ОбластьПодвалаКонтрагентов.Параметры.АдресДебитора 			  = СведенияОДебиторе.ЮридическийАдрес;
			
			ТабДокумент.Вывести(ОбластьПодвалаКонтрагентов);
		ИначеЕсли  ВыводитьИтогКонтрагентов И ВыборкаПоДокументам.Кредитор = ВыборкаПоДокументам.Дебитор Тогда
			ОбластьПодвалаКонтрагентов = Макет.ПолучитьОбласть("Подвал|Кредитор");	
			ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
			ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНКредитора 		  = РНН_БИНКредитора;
			ОбластьПодвалаКонтрагентов.Параметры.АдресКредитора 		  = СведенияОКредиторе.ЮридическийАдрес;
			
			ТабДокумент.Присоединить(ОбластьПодвалаКонтрагентов);  
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
		               	
	Возврат ТабДокумент;

КонецФункции

#КонецЕсли