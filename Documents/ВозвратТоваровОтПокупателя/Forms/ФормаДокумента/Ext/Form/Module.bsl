////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(НСтр("ru = 'продажа'"), Объект.Ссылка, ЭтаФорма);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
			
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УправлениеФормой(ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(НСтр("ru = 'продажа'"), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(НСтр("ru = 'продажа'"), Объект.Ссылка, ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураВыданный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДатаПодписания") Тогда
		ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
	КонецЕсли;

	// СНТ
	 СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);
    // Конец СНТ
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_СчетФактура" Тогда   //При создании СФ из СНТ
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	//СсылкаНаСНТ +
	ИначеЕсли ИмяСобытия = "Запись_СНТ" Тогда
		ОбработкаОповещенияЗаписиСНТНаСервере();
	//СсылкаНаСНТ -
	
	ИначеЕсли ИмяСобытия = "Запись_РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС" Тогда
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
		
	Иначе
		
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;

	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_АктПриемаПередачи" 
		Или ИмяСобытия = "Запись_УведомлениеОВводеВОборот" Тогда
		//ИСМПТ
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_АктПриемаПередачиИСЦЭДМ" 
		Или ИмяСобытия = "Запись_УведомлениеОВводеВОборотИСЦЭДМ" Тогда
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры                                                                   

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Модифицированность = Истина;
		КонецЕсли;  	
				
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""возврат тмз от покупателя"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
		Если Объект.Проведен Тогда
			ПараметрыЗаписи.Вставить("ЭтоПерепроведение", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") 
		И Объект.Проведен И НЕ ПараметрыЗаписи.Свойство("ЭтоПерепроведение") Тогда
		
		ПроверкаСозданияДополнительныхДокументов(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ПринудительнаяОтменаПроведения") И ПараметрыЗаписи.ПринудительнаяОтменаПроведения Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяОтменаПроведения", ПараметрыЗаписи["ПринудительнаяОтменаПроведения"]);
	КонецЕсли;
	
	Если Объект.ОтложитьНачислениеНДС Тогда
		Если ТекущийОбъект.ЭтоНовый() И НачалоДня(ТекущийОбъект.Дата) = НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ДатаПодписанияПоДаннымРегистра = ТекущийОбъект.Дата;
		КонецЕсли;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаПодписания", ДатаПодписанияПоДаннымРегистра);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
				Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
					СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
				Иначе
					СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если НЕ СтруктураРезультатаВыполнения = Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта();
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	СтруктураРезультатаВыполнения = Новый Структура;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СделкаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ВозвратТоваровОтПокупателя.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	
	СтруктураПараметров.Вставить("СчетУчета"   , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиентСервер.ОбработатьИзмененияПоКнопкеЦеныИВалюты(ЭтаФорма, , ПараметрыОткрытияФормыЦеныИВалюта());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = Объект.Склад;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		//ИзмененПризнакУчетаАкциза = Результат.ЗначенияПриЗакрытии.УчитыватьАкциз <> Результат.ЗначенияПриОткрытии.УчитыватьАкциз;
		//ИзмененПризнакУчетаНДС    = Результат.ЗначенияПриЗакрытии.УчитыватьНДС   <> Результат.ЗначенияПриОткрытии.УчитыватьНДС;
		//ПричиныИзмененияСчетовУчета = Новый Массив;
		//ПричиныИзмененияСчетовУчета.Добавить("УчитыватьАкциз");
		//
		//ПричиныИзмененияСчетовУчета.Добавить("УчитыватьНДС");
		//ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "УчитыватьАкциз");
	КонецЕсли;
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоОснованию", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить текущий документ данными документа-основания?'"), Режим, 0);
	Иначе 
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоОснованию(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.НомераГТД.Очистить();
	Объект.Услуги.Очистить();

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ДокументОснованиеПриИзмененииНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	ПриИзмененииЗначенияКонтрагентаНаСервере(Неопределено);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	УстановитьДоступностьСубконто();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
			
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Иначе 		
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписанияПоДаннымРегистраПриИзменении(Элемент)
	//ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере();
	
	Если СписокРегистрацийПоНДС.Количество() = 1
		И ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
		
		ДатаРегистрацииНДС = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(СписокРегистрацийПоНДС[0].Значение, "Дата");
		
		//Если ДатаРегистрацииНДС <> ДатаПодписанияПоДаннымРегистра Тогда
		Если НачалоДня(ДатаРегистрацииНДС) <> НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстВопроса = НСтр("ru = 'НДС зарегистрирован <%ДатаРегистрацииНДС%>. При изменении даты подписания будет скорректирована дата и в документе регистрации НДС. Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДатаРегистрацииНДС%", Формат(ДатаРегистрацииНДС, "ДЛФ=ДВ"));
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			Модифицированность = Истина;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Объект.ОтложитьНачислениеНДС Тогда
		ТекстСообщения = НСтр("ru='Невозможно добавитьть строки в Товары, так как в документе установлен признак отложенного начисления НДС, который применим только для услуг'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Объект.Товары.Очистить();
		Возврат;	
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
		
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, НДСВидОперацииРеализации, АкцизВидОперацииРеализации, СчетУчетаНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Товары.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент) 	
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
		
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, СтавкаАкциза, СуммаАкциза,
		|СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации,
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность,
		|ВидСубконтоСписанияСебестоимостиБУ1, ВидСубконтоСписанияСебестоимостиБУ2, ВидСубконтоСписанияСебестоимостиБУ3, 
		|ВидСубконтоСписанияСебестоимостиНУ1, ВидСубконтоСписанияСебестоимостиНУ2, ВидСубконтоСписанияСебестоимостиНУ3,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3, 
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СубконтоСписанияСебестоимостиБУ1Доступность, СубконтоСписанияСебестоимостиБУ2Доступность, СубконтоСписанияСебестоимостиБУ3Доступность,
		|СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3,
		|СубконтоСписанияСебестоимостиНУ1Доступность, СубконтоСписанияСебестоимостиНУ2Доступность, СубконтоСписанияСебестоимостиНУ3Доступность,
		|НДСВидОперацииРеализации, АкцизВидОперацииРеализации, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Склад, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, УчитыватьАкциз, СуммаВключаетАкциз, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		Элементы.Товары.ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	НомераГТДКлиент.ИзменитьНомераГТДПриИзмененииКоличествоТовара(ЭтаФорма, "Товары", Элементы.Товары.ТекущаяСтрока);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетСписанияСебестоимостиБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	СтрокаТаблицы.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетСписанияСебестоимостиБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиБУ, СчетСписанияСебестоимостиНУ, 
		|СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетСебестоимостиБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетСписанияСебестоимостиНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетСебестоимостиНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 1, ТекущиеДанные.СубконтоДоходовБУ1, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 2, ТекущиеДанные.СубконтоДоходовБУ2, "СубконтоДоходовНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 3, ТекущиеДанные.СубконтоДоходовБУ3, "СубконтоДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 1, "СчетДоходовБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 2, "СчетДоходовБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 3, "СчетДоходовБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 1, "СчетДоходовНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  2, "СчетДоходовНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  3, "СчетДоходовНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 1, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ1, "СубконтоСписанияСебестоимостиНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 2, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ2, "СубконтоСписанияСебестоимостиНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 3, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ3, "СубконтоСписанияСебестоимостиНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ", 1, "СчетСписанияСебестоимостиБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ", 2, "СчетСписанияСебестоимостиБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ", 3, "СчетСписанияСебестоимостиБУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ", 1, "СчетСписанияСебестоимостиНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ", 2, "СчетСписанияСебестоимостиНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ", 3, "СчетСписанияСебестоимостиНУ", "Товары", СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УСЛУГИ

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОперацииРеализации, СчетУчетаНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Содержание,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаНДСПоРеализации,
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3, 
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СчетУчетаНДС, НДСВидОперацииРеализации,
		|Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Склад, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, УчитыватьАкциз, СуммаВключаетАкциз, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		Элементы.Услуги.ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 1, ТекущиеДанные.СубконтоДоходовБУ1, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 2, ТекущиеДанные.СубконтоДоходовБУ2, "СубконтоДоходовНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 3, ТекущиеДанные.СубконтоДоходовБУ3, "СубконтоДоходовНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 1, "СчетДоходовБУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 2, "СчетДоходовБУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ", 3, "СчетДоходовБУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 1, "СчетДоходовНУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 2, "СчетДоходовНУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ", 3, "СчетДоходовНУ", "Услуги", СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru = 'Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги", НСтр("ru = 'Услуги'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОтгрузки(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокументаОтгрузки(Команда)

	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОтгрузкиУслуги(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Услуги", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокументаОтгрузкиУслуги(Команда)

	ЗаполнитьТабличнуюЧастьПоРеализации("Услуги", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураВыданный");
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураВыданный");
	    
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	ОткрытьРеквизитыПечатиРеализации();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	ПараметрыФормы.ЗаполнятьОстатки = Ложь;  
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
		
	ПараметрыФормы = НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма);
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		ПараметрыФормы.ТолькоПросмотр = Объект.Проведен;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПолучитьРозничногоКонтрагента();
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорРозничногоКонтрагента(Объект.Контрагент, Объект.Организация);
		ТекущийКонтрагент         = Объект.Контрагент;
		ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
		ДокументОснование = Неопределено;
	КонецЕсли;
		
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	ТекущийВидОперации   = Объект.ВидОперации;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.Касса.Видимость                 = ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи");
	Элементы.Контрагент.Доступность 		 = ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров");
	Элементы.ДоговорКонтрагента.Доступность  = ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров");
	
	Форма.ТекущийВидОперации 				 = ТекущийВидОперации;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	УказанаПартия = ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный");

	Элементы.ТоварыСебестоимость.Видимость = НЕ УказанаПартия;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	Элементы.ТоварыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
	//Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Доступность = ЗначениеЗаполнено(Форма.ДатаПодписанияПоДаннымРегистра) ИЛИ Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	//Если НЕ Объект.ОтложитьНачислениеНДС Тогда
	//	Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	//Иначе
	//	Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Истина;
	//КонецЕсли;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
    
    //Видимость счетов учета
    Элементы.ТоварыГруппаСубконтоСчетаБУ.Видимость                  = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ТоварыГруппаСубконтоСписанияСебестоимостиБУ.Видимость  = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ТоварыГруппаСубконтоСчетаНУ.Видимость                  = Форма.ПоказыватьВДокументахСчетаУчета И Объект.УчитыватьКПН;
    Элементы.ТоварыГруппаСубконтоСписанияСебестоимостиНУ.Видимость  = Форма.ПоказыватьВДокументахСчетаУчета И Объект.УчитыватьКПН;
    Элементы.УслугиГруппаСубконтоСчетаБУ.Видимость                  = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость                  = Форма.ПоказыватьВДокументахСчетаУчета И Объект.УчитыватьКПН;
    Элементы.ГруппаРасчеты.Видимость               		  		    = Форма.ПоказыватьВДокументахСчетаУчета;
	
	СформироватьЗаголовокСчетаУчета(Форма);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Элементы.КнопкаУСД.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
		
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	Форма.Элементы.ГруппаИтогиАкциз.Видимость = Объект.УчитыватьАкциз;

	Если Форма.Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;
	
	Если Форма.Объект.СуммаВключаетАкциз Тогда
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (сверху)'");
	КонецЕсли;
	              
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС   = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсегоАкциз = Объект.Товары.Итог("СуммаАкциза");
	Форма.ИтогиВсего      = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
	Если Объект.УчитыватьАкциз
	   И НЕ Объект.СуммаВключаетАкциз Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоАкциз;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ТекущийДокументОснование  = Объект.ДокументОснование;
	ТекущийСклад              = Объект.Склад;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		// Счет-фактура
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
		
		ДатаПодписанияПоДаннымРегистра = УчетНДСИАкциза.ПолучитьДатуПодписанияПоАктамВыполненныхРабот(Объект.Ссылка);
		ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
	Иначе
		ДатаПодписанияПоДаннымРегистра = Объект.Дата;
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
	
	НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();

	// СНТ
	 СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);
    // Конец СНТ

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	УстановитьДоступностьСубконто();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	УправлениеФормой(ЭтаФорма);

	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	
	//Скроем меню ввода Акта приёмки маркированной продукции
	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКСоздатьАППИсход", "Видимость", Ложь);
	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСЦЭДМСоздатьАППИсход", "Видимость", Ложь);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто(ИмяТабличнойЧасти = "")
	
	Если ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "" Тогда
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл		
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетДоходовБУ, СтрокаТовары, ПоляОбъекта);
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетДоходовНУ, СтрокаТовары, ПоляОбъекта);		
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетСписанияСебестоимостиБУ, СтрокаТовары, ПоляОбъекта);		
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетСписанияСебестоимостиНУ, СтрокаТовары, ПоляОбъекта);		
			
			// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, "СубконтоДоходовБУ" + "%Индекс%", "СчетДоходовБУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, "СубконтоДоходовБУ" + "%Индекс%", "ТоварыСубконтоДоходовБУ" + "%Индекс%", ПараметрыДокумента);	
			
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, "СубконтоДоходовНУ" + "%Индекс%", "СчетДоходовНУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, "СубконтоДоходовНУ" + "%Индекс%", "ТоварыСубконтоДоходовНУ" + "%Индекс%", ПараметрыДокумента);	
			
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, "СубконтоСписанияСебестоимостиБУ" + "%Индекс%", "СчетСписанияСебестоимостиБУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, "СубконтоСписанияСебестоимостиБУ" + "%Индекс%", "ТоварыСубконтоСписанияСебестоимостиБУ" + "%Индекс%", ПараметрыДокумента);	
			
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, "СубконтоСписанияСебестоимостиНУ" + "%Индекс%", "СчетСписанияСебестоимостиНУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, "СубконтоСписанияСебестоимостиНУ" + "%Индекс%", "ТоварыСубконтоСписанияСебестоимостиНУ" + "%Индекс%", ПараметрыДокумента);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" ИЛИ ИмяТабличнойЧасти = "" Тогда
	
		Для Каждого СтрокаУслуги Из Объект.Услуги Цикл		
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаУслуги.СчетДоходовБУ, СтрокаУслуги, ПоляОбъекта);
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаУслуги.СчетДоходовНУ, СтрокаУслуги, ПоляОбъекта);
			
			// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаУслуги, "СубконтоДоходовБУ" +"%Индекс%", "СчетДоходовБУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаУслуги, "СубконтоДоходовБУ" + "%Индекс%", "УслугиСубконтоДоходовБУ" + "%Индекс%", ПараметрыДокумента);	
			
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаУслуги, "СубконтоДоходовНУ" +"%Индекс%", "СчетДоходовНУ");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаУслуги, "СубконтоДоходовНУ" + "%Индекс%", "УслугиСубконтоДоходовНУ" + "%Индекс%", ПараметрыДокумента);	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, ИмяТаблицы, СтандартнаяОбработка)	
	
	ТекущиеДанные      = Элементы[ИмяТаблицы].ТекущиеДанные;
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекущиеДанные, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТаблицы, ЗаменаСубконтоНУ = Ложь)
	
	Если Не Форма.ПоказыватьВДокументахСчетаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы[ИмяТаблицы].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(Форма.Элементы[ИмяТаблицы].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТаблицы + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ВозвратТоваровОтПокупателя, Истина);

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Расход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары"       , ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке"     , Ложь);
	ПараметрыОбработки.Вставить("ДокументСсылка"             , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"               , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация"        , Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументТипЦен"             , Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументВалюта"             , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"               , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"          , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"   , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетАкциз" , Объект.СуммаВключаетАкциз);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"       , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьАкциз"     , Объект.УчитыватьАкциз);
	ПараметрыОбработки.Вставить("ДокументСклад"              , Объект.Склад);
	
	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
		
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	                             
	СписокСвойств = Неопределено;
	  
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе        		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	ЕстьЦена = (ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, СуммаВключаетНДС, СуммаВключаетАкциз, ВалютаДокумента, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// При копировании всегда добавляем новые строки, если это вставка из буфера
		СтрокаТабличнойЧасти = Неопределено;
		
		Если Не ЭтоВставкаИзБуфера Тогда
			СтруктураОтбора = Новый Структура();
			
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			Если ИмяТаблицы =  "Товары" Тогда
				СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
			КонецЕсли;
							
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
						
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьЦена Тогда
				Цена = СтрокаТовара.Цена;
			КонецЕсли;
						
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, "Товары", МетаданныеДокумента);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(СтрокаТабличнойЧасти, "Товары", МетаданныеДокумента);
				
				// Рассчитываем реквизиты табличной части. 
				Если ЭтоВставкаИзБуфера Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);
					
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				СтрокаТабличнойЧасти.Содержание		   = СведенияОНоменклатуре.НаименованиеПолное;
				СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
				
				Если ЭтоВставкаИзБуфера Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);
					
			КонецЕсли;
			
		КонецЕсли;
		
			
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ВозвратТоваровОтПокупателя);
	
	УстановитьДоступностьСубконто(ИмяТаблицы);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
 	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетовТовары = Новый СписокЗначений;
	СписокАналитикиСчетовУслуги = Новый СписокЗначений;
	
	// ТЧ Услуги
	СписокАналитикиСчетовТовары.Добавить("ДоходовБУ");
	СписокАналитикиСчетовТовары.Добавить("ДоходовНУ");
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиБУ");
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиНУ");	

	// ТЧ Услуги
	СписокАналитикиСчетовУслуги.Добавить("ДоходовБУ");
	СписокАналитикиСчетовУслуги.Добавить("ДоходовНУ");
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетовТовары); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетовУслуги);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;     
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);
			
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	//ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
	//	И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда 
	//	ТолькоСчетаРасчетов = СтруктураРезультатаВыполнения.Свойство("ТолькоСчетаРасчетов") И СтруктураРезультатаВыполнения.ТолькоСчетаРасчетов;
	//	ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
	//	Если ПоказыватьВДокументахСчетаУчета Тогда
	//		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
	//	Иначе
	//		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
	//	КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, ТипЦен, ДоговорСовместнойДеятельности, ВедениеВзаиморасчетов");
	
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		
	Объект.УчастникиСовместнойДеятельности.Очистить();
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
		
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СделкаПриИзмененииНаСервере()
	
	МетаданныеДокумента = Объект.Сделка.Метаданные();
	
	КонтрагентИзменен = Ложь;
	
	Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) = Неопределено И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Объект.Сделка.Контрагент;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) = Неопределено И КонтрагентИзменен Тогда
		Объект.ДоговорКонтрагента = Объект.Сделка.ДоговорКонтрагента;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоРеализацииТоваровУслуг(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоОтчетуОРозничныхПродажах(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоЧекККМ(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоСчетФактураВыданный(Объект, Объект.ДокументОснование);
					
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена              = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтавкаАкциза      = СведенияОНоменклатуре.СтавкаАкциза;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровОтПокупателя,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);

	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		   = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);

	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровОтПокупателя,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	// Заполнение колонок "Всего", "КоэффициентАкциза" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаАкциза), СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) + ?(Объект.СуммаВключаетАкциз, 0, СтрокаТаблицы.СуммаАкциза);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)
	
	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран договор контрагента!'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана валюта взаиморасчетов по договору!'"));
		Возврат;
	КонецЕсли; 
	
	ПараметрыВопроса = Новый Структура("ТабличнаяЧасть, СпособЗаполнения, ОчищатьТабличнуюЧасть", ТабличнаяЧасть, СпособЗаполнения, СпособЗаполнения = "Заполнить" И Объект[ТабличнаяЧасть].Количество() > 0);
	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоРеализации", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоРеализации(КодВозвратаДиалога.Да, ПараметрыВопроса);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоРеализации(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Если Параметры.ОчищатьТабличнуюЧасть Тогда
		Объект[Параметры.ТабличнаяЧасть].Очистить();
		Если Параметры.ТабличнаяЧасть = "Товары" Тогда
			//очистить нужно и Номера ГТД
			Объект.НомераГТД.Очистить();
		КонецЕсли; 		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ДоговорКонтрагента, Проведен", Объект.ДоговорКонтрагента, Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеВыбораРеализацияТоваровУслуг", ЭтотОбъект, Параметры);
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии);
		
	Иначе
		
		ДокументРеализации = Объект.ДокументОснование;
		
		ЭтаФорма.Модифицированность = Истина;
		
		// Вызываем процедуру заполнения.
		Если Параметры.СпособЗаполнения = "Заполнить" Тогда
			
			ЗаполнитьПоОснованию(ДокументРеализации, Параметры.ТабличнаяЧасть);
			
		Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору
			
			ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, Параметры.ТабличнаяЧасть);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораРеализацияТоваровУслуг(Результат, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	// Вызываем процедуру заполнения.
	Если Параметры.СпособЗаполнения = "Заполнить" Тогда
		
		ЗаполнитьПоОснованию(Результат, Параметры.ТабличнаяЧасть);
		
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору
		
		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(Результат, Параметры.ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию(Знач ДокументОснование, ТабличнаяЧасть)
	
	Если ТабличнаяЧасть = "Товары" Тогда
		ДанныеПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументОснование);
	Иначе
		ДанныеПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.УслугиПоДаннымОснования(Объект, ДокументОснование);
	КонецЕсли;

	Если ДанныеПоДаннымОснования.Количество() > 0 Тогда
		Объект[ТабличнаяЧасть].Загрузить(ДанныеПоДаннымОснования);
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ТабличнаяЧасть, Объект, Документы.ВозвратТоваровОтПокупателя);
	
	УстановитьДоступностьСубконто();

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, ТабличнаяЧасть)
	
	Если ТабличнаяЧасть = "Товары" Тогда
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументРеализации);
	Иначе
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.УслугиПоДаннымОснования(Объект, ДокументРеализации);
	КонецЕсли;
	
	Если ТаблицаРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ПоляОбъектаСубконтоДоходов		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	ПоляОбъектаСубконтоСебестоимости	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаРеализации Из ТаблицаРеализации Цикл
		
		// Ищем текущую позицию основания в табличной части документа возврата.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", СтрокаРеализации.Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаРеализации.Количество;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаРеализации);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ТабличнаяЧасть, Объект, Документы.ВозвратТоваровОтПокупателя);
	
	УстановитьДоступностьСубконто();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьСчетаУчетаНаСервере(ЗаполнятьСчетаРасчетов = Ложь, ЗаполнятьСчетаТабЧастей = Ложь, ИмяТабличнойЧасти = "")

//	Если ЗаполнятьСчетаРасчетов Тогда
//		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(Объект);	
//	КонецЕсли;
//	
//	Если ЗаполнятьСчетаТабЧастей И ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
//		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
//	КонецЕсли;
//	
//	Если ЗаполнятьСчетаТабЧастей И ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
//		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
//	КонецЕсли;
//	
//	Если ЗаполнятьСчетаТабЧастей Тогда
//		ЗаполнитьДобавленныеКолонкиТаблиц();
//		УстановитьДоступностьСубконто(ИмяТабличнойЧасти);		
//	КонецЕсли;
//	
//КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;

	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровОтПокупателя,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетСебестоимостиБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1,
								 |СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетСебестоимостиНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0; 
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Установить счета учета в соответствии со значениями по умолчанию?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоверенностьВыдана",              Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",                Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",               Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("УдалитьДоверенность",             Объект.УдалитьДоверенность);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                  ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("Контрагент",                      Объект.Контрагент);
	СтруктураПараметров.Вставить("ТипОбъекта",                      "ВозвратТоваровОтПокупателя");
		     
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Объект.Проведен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");
	
	СтруктураРеквизитов.Вставить("СчетДоходовБУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ3");
	
	СтруктураРеквизитов.Вставить("СчетДоходовНУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ3");
	
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовБУ", "СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовНУ", "СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Услуги.ТолькоПросмотр       = Ложь;
	Элементы.Услуги.ИзменятьСоставСтрок  = Ложь;
	Элементы.Услуги.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПараметрыОткрытия = Неопределено; 

	Если Объект.Услуги.Количество() = 0 ИЛИ Объект.Товары.Количество() <> 0 Тогда
		
		ОграничениеДоступности = Новый Соответствие;
		ОграничениеДоступности.Вставить("Видимость", Ложь);
		
		НедоступныеРеквизиты   = Новый Структура;
		НедоступныеРеквизиты.Вставить("ОтложитьНачислениеНДС", ОграничениеДоступности);
		
		ПараметрыОткрытия = Новый Структура("НедоступныеРеквизиты", НедоступныеРеквизиты);
		
	КонецЕсли; 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиДокументРегистрацииНДСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС, СписокРегистрацийПоНДС);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере()

	Отказ = Ложь;
	ОбновитьРегистрациюНДС(Отказ);
	Если Отказ Тогда
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьРегистрациюНДС(Отказ)
	
	ДокументРегистрацииНДСОбъект = СписокРегистрацийПоНДС[0].Значение.ПолучитьОбъект();
	ДокументРегистрацииНДСОбъект.Дата = ДатаПодписанияПоДаннымРегистра;
	
	Попытка
		ДокументРегистрацииНДСОбъект.Записать(РежимЗаписиДокумента.Запись);
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
	Исключение
		Отказ = Истина;
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ регистрации НДС по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать и провести документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере();
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");		
		СписокСвойств.Добавить("СтавкаАкциза");
		СписокСвойств.Добавить("АкцизВидОперацииРеализации");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");
			СписокСвойств.Добавить("СчетУчетаНУ");
			СписокСвойств.Добавить("СчетУчетаАкцизаПоРеализации");
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
				СписокСвойств.Добавить("СчетДоходовБУ");
				СписокСвойств.Добавить("СчетДоходовНУ");
				СписокСвойств.Добавить("СчетСписанияСебестоимостиБУ");
				СписокСвойств.Добавить("СчетСписанияСебестоимостиНУ");
				СписокСвойств.Добавить("СубконтоДоходовБУ1"); 
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");			
				СписокСвойств.Добавить("СубконтоДоходовНУ1"); 
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ1"); 
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ2"); 
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ3"); 			
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ1"); 
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ2"); 
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ3"); 			
				
			КонецЕсли;
		КонецЕсли;
		
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");				
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 				
				
				СписокСвойств.Добавить("СчетДоходовБУ");
				СписокСвойств.Добавить("СчетДоходовНУ");
				СписокСвойств.Добавить("СубконтоДоходовБУ1"); 
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");			
				СписокСвойств.Добавить("СубконтоДоходовНУ1"); 
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
			КонецЕсли;  		
			
		КонецЕсли; 
	КонецЕсли;
	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаАкцизаПоРеализации");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходовБУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетСписанияСебестоимостиБУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСписанияСебестоимостиБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходовНУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСчетСписанияСебестоимостиНУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСписанияСебестоимостиНУ");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("УслугиСчетДоходовБУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаБУ");
	ЭлементыСчетов.Добавить("УслугиСчетДоходовНУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаНУ");
	ЭлементыСчетов.Добавить("ГруппаРасчеты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВозвратТоваровОтПокупателя",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОперацииРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.АкцизВидОперацииРеализации");
	КонецЕсли;
	
	// НоваяСтрокаУслуги
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаУслуги") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОперацииРеализации");
	КонецЕсли;
	
	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаАкцизаПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаАкцизаПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ3");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаАкцизаПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// УчитыватьАкциз
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьАкциз") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаАкцизаПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.АкцизВидОперацииРеализации");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОперацииРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОперацииРеализации");
	КонецЕсли;

	// Товары.СчетДоходовБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
	КонецЕсли;

	// Товары.СчетСписанияСебестоимостиБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
	КонецЕсли;

	// Товары.СчетСписанияСебестоимостиНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ3");
	КонецЕсли;

	// Товары.СубконтоСписанияСебестоимостиБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ1");
	КонецЕсли;

	// Товары.СубконтоСписанияСебестоимостиБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ2");
	КонецЕсли;

	// Товары.СубконтоСписанияСебестоимостиБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиНУ3");
	КонецЕсли;

	// Товары.СчетДоходовНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ3");
	КонецЕсли;

	// Товары.СубконтоДоходовБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ1");
	КонецЕсли;

	// Товары.СубконтоДоходовБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ2");
	КонецЕсли;

	// Товары.СубконтоДоходовБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовНУ3");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Услуги.СчетДоходовБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
	КонецЕсли;

	// Услуги.СчетДоходовНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ3");
	КонецЕсли;

	// Услуги.СубконтоДоходовБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ1");
	КонецЕсли;

	// Услуги.СубконтоДоходовБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ2");
	КонецЕсли;

	// Услуги.СубконтоДоходовБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовНУ3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаАкцизаПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьАкциз");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаАкцизаПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьАкциз");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаАкцизаПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьАкциз");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
		КонецЕсли;

		// УчитыватьАкциз
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьАкциз") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьАкциз");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаАкцизаПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "АкцизВидОперацииРеализации");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Товары.СчетДоходовБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

		// Товары.СчетСписанияСебестоимостиБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
		КонецЕсли;

		// Товары.СчетСписанияСебестоимостиНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
		КонецЕсли;

		// Товары.СубконтоСписанияСебестоимостиБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.СубконтоСписанияСебестоимостиБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.СубконтоСписанияСебестоимостиБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоСписанияСебестоимостиБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.СчетДоходовНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

		// Товары.СубконтоДоходовБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.СубконтоДоходовБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.СубконтоДоходовБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СубконтоДоходовБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
		КонецЕсли;

		// Услуги.СчетДоходовБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

		// Услуги.СчетДоходовНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

		// Услуги.СубконтоДоходовБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.СубконтоДоходовБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.СубконтоДоходовБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоДоходовБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СформироватьЗаголовокСчетаУчета(ЭтаФорма);
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
			
			Если ИмяТабличнойЧасти = "Товары" Тогда
				
				ПоляОбъектаДоходБУ  = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				ПоляОбъектаДоходНУ  = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
				ПоляОбъектаСебестБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
				ПоляОбъектаСебестНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
				
				ТоварыСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетДоходовБУ") <> Неопределено;
				ТоварыСчетДоходовНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетДоходовНУ") <> Неопределено;
				ТоварыСчетСебестБУ  = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено;
				ТоварыСчетСебестНУ  = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетСписанияСебестоимостиНУ") <> Неопределено;
				
				Если НЕ (ТоварыСчетДоходовБУ ИЛИ ТоварыСчетДоходовНУ ИЛИ ТоварыСчетСебестБУ ИЛИ ТоварыСчетСебестНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
					Если ТоварыСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
					Если ТоварыСчетДоходовНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходНУ, Истина);
					КонецЕсли;
					Если ТоварыСчетСебестБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСебестБУ, Истина);
					КонецЕсли;
					Если ТоварыСчетСебестНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСебестНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				
				ПоляОбъектаДоходБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				ПоляОбъектаДоходНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
				УслугиСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетДоходовБУ") <> Неопределено;
				УслугиСчетДоходовНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетДоходовНУ") <> Неопределено;
				
				Если НЕ (УслугиСчетДоходовБУ ИЛИ УслугиСчетДоходовНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
					Если УслугиСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
					Если УслугиСчетДоходовНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчастникиСовместнойДеятельности",  	Объект.УчастникиСовместнойДеятельности);
	СтруктураПараметров.Вставить("ТипОбъекта",                      	"ВозвратТоваровОтПокупателя");
	СтруктураПараметров.Вставить("Договор",                      		Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУчастникиСовместнойДеятельности", СтруктураПараметров, ЭтаФорма);
	

КонецПроцедуры

&НаСервере
Процедура ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта()
	
	СведенияОбУчетнойПолитикеОрганизации = УправлениеЦенообразованиемВызовСервера.ПолучитьСведенияОбУчетнойПолитикеОрганизации(Объект.Организация, Объект.Дата);
	ЯвляетсяПлательщикомНДС    = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомНДС;
	ЯвляетсяПлательщикомАкциза = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомАкциза;
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	                                                                                                     
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда                    
		ВалютаВзаиморасчетов = УправлениеЦенообразованиемВызовСервера.ПолучитьВалютуВзаиморасчетов(Объект.ДоговорКонтрагента);
	Иначе
		ВалютаВзаиморасчетов = ЭтотОбъект.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если Не ЯвляетсяПлательщикомАкциза И Не ИспользоватьТипыЦен И (Не ИспользоватьВалютныйУчет 
		ИЛИ (ИспользоватьВалютныйУчет И ВалютаВзаиморасчетов = ЭтотОбъект.ВалютаРегламентированногоУчета)) Тогда
		Объект.СуммаВключаетАкциз = Ложь;
		Объект.УчитыватьАкциз = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыДвиженияДенежныхСредств

&НаКлиенте
Процедура ПроверкаСозданияДополнительныхДокументов(ПараметрыЗаписи)
	
	// проверка необходимости создания РКО
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи")
		И ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		
		ЕстьПодходящиеДокументыРКО = ЕстьПодходящиеДокументыРКО();
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("СоздатьДокумент", НСтр("ru = 'Создать документ'"));
		
		ТекстВопроса = НСтр("ru = 'При проведении документа Возврат ТМЗ от покупателя с видом операции Возврат розничной продажи
		|необходимо оформить документ Расходный кассовый ордер и пробить чек ККМ.'") + Символы.ПС + Символы.ПС;
		Если ЕстьПодходящиеДокументыРКО() Тогда
			СписокКнопок.Добавить("ВыбратьДокумент", НСтр("ru = 'Выбрать документ'"));
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Создать документ РКО и пробить чек, или выбрать существующий документ?'");
		Иначе
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Создать документ РКО и пробить чек?'");
		КонецЕсли;
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить проведение'"));
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданиеРозничныхДокументов", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, , НСтр("ru = 'Создание связанных документов'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПодходящиеДокументыРКО()
	
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = &ВидОперации
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.Контрагент = &Контрагент
	|	И РасходныйКассовыйОрдер.СуммаДокумента = &Сумма
	|	И РасходныйКассовыйОрдер.ДокументОснование В (&МассивДокументов)";
	
	МассивДокументовОснования = Новый Массив;
	МассивДокументовОснования.Добавить(Неопределено);
	МассивДокументовОснования.Добавить(Объект.Ссылка);
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Сумма", Объект.СуммаДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументовОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаСозданиеРозничныхДокументов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ОтменитьПроведениеДокумента();
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли Результат = "СоздатьДокумент" Тогда
		ПараметрыРКО = СоздатьДокументРКО();
		Если ПараметрыРКО.Ссылка <> ПредопределенноеЗначение("Документ.РасходныйКассовыйОрдер.ПустаяСсылка") Тогда
			
			НапечататьЧекДокументаРКО(ПараметрыРКО);
			
		Иначе
			ТекстОшибки = НСтр("ru='Не удалось создать документ Расходный кассовый ордер. Проведение отменено.'");
			ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			ОтменитьПроведениеДокумента();
		КонецЕсли;
	ИначеЕсли Результат = "ВыбратьДокумент" Тогда
		
		//открываем форму выбора рко с отбором
		МассивДокументовОснования = Новый Массив;
		МассивДокументовОснования.Добавить(Неопределено);
		МассивДокументовОснования.Добавить(Объект.Ссылка);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю"));
		ПараметрыОтбора.Вставить("Организация",   Объект.Организация);
		ПараметрыОтбора.Вставить("Контрагент",   Объект.Контрагент);
		ПараметрыОтбора.Вставить("СуммаДокумента",   Объект.СуммаДокумента);
		ПараметрыОтбора.Вставить("ДокументОснование",   МассивДокументовОснования);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
		
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаРКОЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаВыбора", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаРКОЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыРКО = ПолучитьПараметрыРКО(Результат);
		
		//уже пробит чек - просто записываем
		Если ПараметрыРКО.НомерЧекаККМ <> 0 И ПараметрыРКО.Проведен Тогда
			РеквизитыДляЗаписи = Новый Структура("ДокументОснование", Объект.Ссылка);
			Если НЕ ЗаписатьДокументРКО(Результат, РеквизитыДляЗаписи) Тогда
				ОтменитьПроведениеДокумента();
			КонецЕсли;
		Иначе
			НапечататьЧекДокументаРКО(ПараметрыРКО);
		КонецЕсли;
		
	Иначе
		ПроверкаСозданияДополнительныхДокументов(Новый Структура());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыРКО(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Проведен КАК Проведен,
	|	ИСТИНА КАК Записан,
	|	РасходныйКассовыйОрдер.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	Результат.Вставить("НомерЧекаККМ", 0);
	Результат.Вставить("Записан", Ложь);
	Результат.Вставить("Проведен", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьДокументРКО()
	
	ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДокументРКО, Объект);
	ДокументРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
	ДокументРКО.Комментарий = НСтр("ru='Создан автоматически при проведении документа Возврат товаров от покупателя.'", ОбщегоНазначения.КодОсновногоЯзыка()) ;
	
	ДоговорКонтрагента	  = Объект.ДоговорКонтрагента;
	ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
		ДокументРКО.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументРКО.Дата);
	
	ТаблицаПлатежей = ДокументРКО.РасшифровкаПлатежа.Выгрузить();
	
	СуммаДокументаОснования = ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Объект);
	СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
	
	ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
	
	Если ТаблицаПлатежей.Количество() = 0 тогда
		ТаблицаПлатежей.Добавить();
	КонецЕсли;
	
	ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс, "КурсВзаиморасчетов");
	ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
	
	ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
	
	Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	КонецЦикла; 
	
	ДокументРКО.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
	ДокументРКО.СуммаДокумента = ДокументРКО.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СтрокаПлатеж   = ДокументРКО.РасшифровкаПлатежа[0];
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(ДокументРКО.ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ДокументРКО.ВидОперации);
	
	ДокументРКО.Ответственный = Пользователи.ТекущийПользователь();

	Если ДокументРКО.Выдать = "" И ЗначениеЗаполнено(ДокументРКО.Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ДокументРКО.Выдать = ?(ДокументРКО.Контрагент.НаименованиеПолное="", ДокументРКО.Контрагент.Наименование, ДокументРКО.Контрагент.НаименованиеПолное);

		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДокументРКО);
	
	ДокументРКО.Записать(РежимЗаписиДокумента.Запись);
	
	ПараметрыРКО = Новый Структура();
	ПараметрыРКО.Вставить("Ссылка",ДокументРКО.Ссылка);
	ПараметрыРКО.Вставить("НомерЧекаККМ",ДокументРКО.НомерЧекаККМ);
	ПараметрыРКО.Вставить("Записан",ДокументРКО.Ссылка <> Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	
	Возврат ПараметрыРКО;
	
КонецФункции

&НаСервере
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено)

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	
	ТипЧисло15_2 = ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	СуммаДокументаПоСтавкам = Новый ТаблицаЗначений();
	СуммаДокументаПоСтавкам.Колонки.Добавить("Сумма",     ТипЧисло15_2);
	СуммаДокументаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СуммаНДС",  ТипЧисло15_2);
	
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТЧОбъекта.Имя;
		
		ЕстьАкциз = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И ДокументОбъект.УчитыватьАкциз
		И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) И НЕ ДокументОбъект.СуммаВключаетАкциз
		И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти);
		
		Для каждого СтрокаДокумента  Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СтрокаДокумента.Сумма;
			Иначе
				СуммаДокумента = 0;
			КонецЕсли;
			
			СуммаНДС  = 0;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				И ДокументОбъект.УчитыватьНДС Тогда
				
				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СуммаНДС = СтрокаДокумента.СуммаНДС;
				КонецЕсли;
				
				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента+СуммаНДС;
			КонецЕсли;
			
			Если ЕстьАкциз тогда
				СуммаАкциза = СтрокаДокумента.СуммаАкциза;
			Иначе
				СуммаАкциза = 0;
			КонецЕсли;
			
			СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");
			
			Если СтрокаТаблицыИтогов = Неопределено Тогда
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
				СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
			КонецЕсли;
			
			СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента + СуммаАкциза;
			СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;
			
		КонецЦикла;
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТаблицы Из СуммаДокументаПоСтавкам Цикл
		Если СтрокаТаблицы.Сумма = 0 и СтрокаТаблицы.СуммаНДС = 0  Тогда
			СтрокиКУдалению.Добавить( СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 1 По СтрокиКУдалению.Количество() Цикл
		СуммаДокументаПоСтавкам.Удалить(СтрокиКУдалению[НомерСтроки-1]);
	КонецЦикла; 

	Возврат СуммаДокументаПоСтавкам;

КонецФункции // УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС()

&НаКлиенте
Процедура НапечататьЧекДокументаРКО(ПараметрыДокументаРКО)
	
	Если ПараметрыДокументаРКО.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОтменитьПроведениеДокумента();
		Возврат;
	КонецЕсли;
		
	Если ПараметрыДокументаРКО.Записан Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			Контекст.Вставить("ДокументРКО", ПараметрыДокументаРКО.Ссылка);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ОтменитьПроведениеДокумента();
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение( , НСтр("ru = 'Операция возможна только после записи документа'"));
		ОтменитьПроведениеДокумента();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ОтменитьПроведениеДокумента();
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБККлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ОтменитьПроведениеДокумента();
	Иначе
		НапечататьЧекКлиент(Параметры, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент(Параметры, ВерсияФормата)
	
	НомерСекции = 0;
	
	ЭтаФорма.Доступность = Ложь;
	Контекст = Новый Структура("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
	Контекст.Вставить("ДокументРКО", Параметры.ДокументРКО);
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(Параметры.ИдентификаторУстройства);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Параметры.ДокументРКО);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
		ЭтаФорма.Доступность = Истина;
		ОтменитьПроведениеДокумента();
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		ЭтаФорма.Доступность = Истина;
		
		РеквизитыДляЗаписи = Новый Структура;
		РеквизитыДляЗаписи.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);
		РеквизитыДляЗаписи.Вставить("ДокументОснование", Объект.Ссылка);
		Если НЕ ЗаписатьДокументРКО(ПараметрыОперации.ДокументРКО, РеквизитыДляЗаписи) Тогда
			ОтменитьПроведениеДокумента();
		КонецЕсли;
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОтменитьПроведениеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьДокументРКО(ДокументСсылка, РеквизитыДляЗаписи)
	
	ЗаписьПрошлаУспешно = Ложь;
	Попытка
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДляЗаписи);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьПрошлаУспешно = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создан документ: %1'"), ДокументОбъект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки;
	
	Возврат ЗаписьПрошлаУспешно;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьПроведениеДокумента()
	
	//Отменяем проведение, в случае ошибок при создании связанных документов
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	ПараметрыЗаписи.Вставить("ПринудительнаяОтменаПроведения", Истина);
	ЭтотОбъект.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СНТ

&НаКлиенте
Процедура НадписьСНТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СНТКлиент.ОткрытьСНТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеСНТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСНТНаСервере()

	ЭтаФорма.СНТ = Неопределено;
	
	СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаРегистрацияПрочихОперацийПоНДСНажатие(Элемент)
	
	Если СписокРегистрацийПоНДС.Количество() = 0 Тогда
	
		Если НЕ ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена Дата подписания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'НДС нельзя зарегистрировать на основании документа, помеченного на удаление.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если Объект.Услуги.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена таб. часть Услуги.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "";
		Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'НДС нельзя зарегистрировать на основании не записанного документа. Записать документ?'");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли СписокРегистрацийПоНДС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокРегистрацийПоНДС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокРегистрацийПоНДС[0].Значение);
	КонецЕсли;

КонецПроцедуры
  
#КонецОбласти

//ИнтеграцияИСМПТК
#Область ИСМПТ

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК
