#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоВозвратам", "РасчетыПоПретензиям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаАкцизаПоРеализации", "Акциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "АкцизВидОперацииРеализации", "АкцизВидОперацииРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаАкциза", "СтавкаАкциза");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УчитыватьАкциз");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации_ВозвратТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовБУ", "ВыручкаВозврат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиБУ", "СебестоимостьРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетСписанияСебестоимостиНУ", "СебестоимостьРеализацииНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияСебестоимостиНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоСписанияСебестоимостиБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходовНУ", "ВыручкаВозвратНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовБУ", "ВыручкаВозврат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовБУ3", "СубконтоДоходов3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходовНУ", "ВыручкаВозвратНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ1", "СубконтоДоходов1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ2", "СубконтоДоходов2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходовНУ3", "СубконтоДоходов3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДоходовБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДСПоРеализации", "РеализацияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОперацииРеализации", "НДСВидОперацииРеализации_ВозвратТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьАкциз");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов", "ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Тогда
		
		ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные =  Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли; 
			
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовПриВозвратеБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовПриВозвратеБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовПриВозвратеБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовПриВозвратеНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовПриВозвратеНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаАкцизаПоРеализации) Тогда
			
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаАкцизаПоРеализации) Тогда
				СтрокаТабличнойЧасти.СчетУчетаАкцизаПоРеализации = СчетаУчета.СчетУчетаАкцизаПоРеализации;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовПриВозвратеБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовПриВозвратеБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовПриВозвратеБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовПриВозвратеНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовПриВозвратеНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовПриВозвратеНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
		КонецЕсли;   		
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, ТекущийПользователь);
	ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, ТекущийПользователь);

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратовПокупателя;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Функция ТоварыПоДаннымОснования(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ОснованиеРеализацияТоваров	 = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ОснованиеРозничнаяПродажа	 = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекККМ"));
	ДокументОснованиеИмя       = ДокументОснование.Метаданные().Имя;
	
	ТаблицаЗначенийТовары = ДанныеОбъекта.Товары.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДанныеОбъекта.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,";
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,
		|	КлючСвязи КАК КлючСвязи,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,";
	Если Не ОснованиеРозничнаяПродажа Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.УчитыватьАкциз,
		|	Док.Ссылка.СуммаВключаетАкциз,
		|	Док.СтавкаАкциза,
		|	Док.СуммаАкциза,
		|	Док.КлючСвязи,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Цена";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование и (Док.Номенклатура.Услуга = Ложь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗначенийТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		//ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары");
		//
		//СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
		//ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);				
	КонецЦикла;
	
	Если ОснованиеРеализацияТоваров Тогда
		ДанныеОбъекта.НомераГТД.Загрузить(ДокументОснование.НомераГТД.Выгрузить());
	КонецЕсли;
	
	Возврат ТаблицаЗначенийТовары;
	
КонецФункции // ТоварыПоДаннымОснования()

// Процедура выполняет заполнение табличной части Услуги по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Функция УслугиПоДаннымОснования(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ДокументОснованиеИмя       = ДокументОснование.Метаданные().Имя;
	
	ТаблицаЗначенийУслуги = ДанныеОбъекта.Услуги.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДанныеОбъекта.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,";
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.Содержание,
	|	Док.Количество,
	|	Док.СтавкаНДС,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Цена";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Услуги КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование и (Док.Номенклатура.Услуга = Истина)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = ТаблицаЗначенийУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	КонецЦикла;		
	
	Возврат ТаблицаЗначенийУслуги;
	
КонецФункции // УслугиПоДаннымОснования()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Касса");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Сделка");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.Себестоимость; ТоварыСебестоимость");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; УслугиЗаполнить, УслугиПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	МассивСсылокНаОснования = Новый Массив;
	Для Каждого ТекущийДокументОснование Из ДокументСсылка.Метаданные().ВводитсяНаОсновании Цикл
		МассивСсылокНаОснования.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийДокументОснование.ПолноеИмя()).ПустаяСсылка());
	КонецЦикла;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Возврат ТМЗ от покупателя'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("ПустыеСсылкиОснований", МассивСсылокНаОснования);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом = Ложь;
	Если Реквизиты.УказанДокументОснование Тогда 
		ВедениеУчетаВременныхРазницБалансовымМетодомВДокуменетеОснования = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.ОрганизацияОснования, Реквизиты.ПериодОснования);
		ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
		Если НЕ ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе Тогда 
			ВедениеУчетаВременныхРазницБалансовымМетодом = ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе;
		Иначе 
			ВедениеУчетаВременныхРазницБалансовымМетодом = ВедениеУчетаВременныхРазницБалансовымМетодомВДокуменетеОснования;
		КонецЕсли;
	Иначе 
		ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	КонецЕсли;
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик 		= Реквизиты.Организация;
	НалогоплательщикАкциза  = Реквизиты.Организация;

	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		
		НалогоплательщикАкциза = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.Акциз);
																	
		Налогоплательщик	   = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("НалогоплательщикАкциза", НалогоплательщикАкциза);
	Реквизиты.Вставить("Налогоплательщик",		 Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом  , "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 					  , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НалогоплательщикАкциза	 					  , "НалогоплательщикАкциза");

	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	                + ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("СинонимТовары",	           НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимУслуги",	           НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru='Возврат суммы НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеОтложенНДС",      НСтр("ru = 'НДС (отложен)'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеВыделенАкциз",    НСтр("ru='Возврат суммы акциза'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетВыручки",    НСтр("ru='Зачет сумм возврата: выручка'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетНДС",        НСтр("ru='Зачет сумм возврата: НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетАкциза",     НСтр("ru='Зачет сумм возврата: акциз'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СчетУчетаНДСОтложенный",    ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары И Реквизиты.УказанДокументОтгрузки Тогда
		СписаниеТоваровСписокНоменклатуры = ПараметрыПроведения.ТаблицаТовары.Скопировать( , "Номенклатура");
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", СписаниеТоваровСписокНоменклатуры);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда
		СписаниеТоваровСчетаУчета = ПараметрыПроведения.ТаблицаТовары.Скопировать( , "СчетУчетаБУ, СчетУчетаНУ");
		СписаниеТоваровСчетаУчета.Свернуть("СчетУчетаБУ, СчетУчетаНУ");
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", СписаниеТоваровСчетаУчета);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности ,
	|	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности,
	|		ЛОЖЬ КАК ЕстьНомераГТД
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.НомераГТД КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.УчастникСРП, НЕОПРЕДЕЛЕНО) КАК ПризнакУчастникСРП,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ(Реквизиты.ДокументОснование = НЕОПРЕДЕЛЕНО
	|					ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.ДокументОснование) = ТИП(Документ.СчетФактураВыданный)
	|					ИЛИ Реквизиты.ДокументОснование В (&ПустыеСсылкиОснований))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА НЕ(Реквизиты.ДокументОснование = НЕОПРЕДЕЛЕНО
	|					ИЛИ Реквизиты.ДокументОснование В (&ПустыеСсылкиОснований))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОснование,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанСчетВозвратов,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ПризнакУчастникСРП,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьАкциз,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДокументОснование КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОснование
	|			ТОГДА Реквизиты.ДокументОснование.Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОрганизацияОснования,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОснование
	|			ТОГДА Реквизиты.ДокументОснование.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПериодОснования,
	|	Реквизиты.УказанДокументОтгрузки,
	|	Реквизиты.УказанДокументОснование,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД,
	|	Реквизиты.УказанСчетВозвратов,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	ТаблицаТовары.Себестоимость КАК Себестоимость,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетАкциз
		|			ТОГДА ТаблицаТовары.СуммаАкциза
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаАкциза КАК ЧИСЛО(15, 2)) КАК СуммаАкциза,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаАкциза КАК ЧИСЛО(15, 2)) КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкцизаПоРеализации КАК СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиНУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ3,
		|	ТаблицаТовары.КлючСвязи,
		|	ТаблицаТовары.Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьНомераГТД Тогда 
		
		НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + 
		"	ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаНомераГТД.Количество  КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
		|	ТаблицаНомераГТД.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.НомераГТД КАК ТаблицаНомераГТД
		|ГДЕ
		|	ТаблицаНомераГТД.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Услуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.КлючСвязи,
		|	ВременнаяТаблицаТовары.Коэффициент,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаАкциза,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаАкциза
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаАкцизаВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	СуммыТаблицыТовары.СуммаАкциза
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.КлючСвязи,
	|	ВременнаяТаблицаТовары.Коэффициент,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаАкцизаВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	СуммыТаблицыТовары.СуммаАкциза,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СтавкаАкциза,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаАкциза,
	|	ВременнаяТаблицаТовары.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаТовары.АкцизВидОперацииРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходовБУ,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаТовары.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаТовары.СчетДоходовНУ,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаТовары.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаТовары.СчетСписанияСебестоимостиБУ,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиБУ1,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиБУ2,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиБУ3,
	|	ВременнаяТаблицаТовары.СчетСписанияСебестоимостиНУ,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиНУ1,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиНУ2,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимостиНУ3
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаУслуги.СчетДоходовБУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаУслуги.СчетДоходовНУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ3
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Себестоимость КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанДокументОтгрузки
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.Ссылка
		|	КОНЕЦ КАК Партия,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВал,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтавкаАкциза,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ КАК КорСчетСписанияБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1 КАК КорСубконтоБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2 КАК КорСубконтоБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3 КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиНУ КАК КорСчетСписанияНУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ1 КАК КорСубконтоНУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ2 КАК КорСубконтоНУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ3 КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	Реквизиты.ВалютаВзаиморасчетов,
		|	&СодержаниеСписаныТМЗ КАК Содержание,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	ВЫБОР 
		|		КОГДА ТаблицаТовары.Сумма = 0 
		|			ТОГДА ТаблицаТовары.Себестоимость
		|		ИНАЧЕ ТаблицаТовары.Себестоимость * ТаблицаТовары.СуммаВзаиморасчетов / ТаблицаТовары.Сумма
		|	КОНЕЦ КАК СуммаСписанияВал
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги Тогда 
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкцизаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаАкциза КАК СчетУчетаАкциза,
		|	ТаблицаТовары.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаТовары.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаТовары.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаТовары.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаТовары.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаТовары.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаТовары.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаТовары.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиБУ КАК СчетЗатратБУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоЗатратБУ3,
		|	ТаблицаТовары.СчетСписанияСебестоимостиНУ КАК СчетЗатратНУ,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ1 КАК СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ2 КАК СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоСписанияСебестоимостиНУ3 КАК СубконтоЗатратНУ3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанДокументОтгрузки
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.Ссылка
		|	КОНЕЦ КАК Партия,
		|	ЛОЖЬ КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	0 КАК СуммаАкцизаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
		|	ТаблицаУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчетаАкциза,
		|	ТаблицаУслуги.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ИСТИНА КАК ЭтоУслуга
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаРеализация.Сумма КАК Сумма,
	|	ВременнаяТаблицаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаРеализация.СуммаАкциза КАК СуммаАкциза,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаРеализация.СчетУчетаАкциза КАК СчетУчетаАкциза,
	|	ВременнаяТаблицаРеализация.Партия КАК Партия,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаРеализация.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВременнаяТаблицаРеализация.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаАкцизаВзаиморасчетов) КАК СуммаАкцизаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаАкциза) КАК СуммаАкциза
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК СуммаАкцизаВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС,
	|		0 КАК СуммаАкциза
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.СуммаНДСВзаиморасчетов,
		|		ТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|		ТаблицаТовары.Сумма КАК Сумма,
		|		ТаблицаТовары.СуммаНДС,
		|		ТаблицаТовары.СуммаАкциза
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаУслуги.СуммаВзаиморасчетов,
		|		ТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|		0 КАК СуммаАкцизаВзаиморасчетов,
		|		ТаблицаУслуги.Сумма,
		|		ТаблицаУслуги.СуммаНДС,
		|		0 КАК СуммаАкциза
		|	ИЗ
		|		ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл,
	|	&СодержаниеЗачетВыручки КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаНДС КАК СуммаРегл,
	|	&СодержаниеЗачетНДС КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов ЕСТЬ НЕ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаАкцизаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаАкциза КАК СуммаРегл,
	|	&СодержаниеЗачетАкциза КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаАкцизаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС И НЕ (Реквизиты.ЕстьТовары И Реквизиты.УчитыватьАкциз) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Результаты запросов ниже будут использоваться для формирования движений по регистру КорректировкаНДС.
	// В регистре КорректировкаНДС предполагается, что ресурсы СуммаКорректировкиОборота заполняются
	// суммой, включающей акциз. Поле ТаблицаТовары.Сумма не содержит акциза и НДС,
	// поэтому при определении СуммаКорректировкиОборота к сумме прибавляется акциз. 

	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаАкциза КАК СуммаКорректировкиОборота,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	НЕОПРЕДЕЛЕНО КАК СтавкаАкциза,
		|	ТаблицаТовары.НДСВидОперацииРеализации КАК ВидОперацииКорректировки,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК КорСчет,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ТоварыАкциз"",
		|	&СинонимТовары,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	0,
		|	0,
		|	ТаблицаТовары.СуммаАкциза,
		|	0,
		|	ТаблицаТовары.СуммаАкцизаВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаТовары.СтавкаАкциза,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаТовары.АкцизВидОперацииРеализации,
		|	ТаблицаТовары.СчетУчетаАкциза,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.Акциз),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог),
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Ссылка,
		|	&СодержаниеВыделенАкциз,
		|	ИСТИНА,
		|	ТаблицаТовары.Количество,
		|	СправочникНоменклатура.КоэффициентРасчетаОблагаемойБазыАкциза,
		|	НЕОПРЕДЕЛЕНО,
		|	1
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Реквизиты.УчитыватьАкциз
		|	И НЕ ТаблицаТовары.СтавкаАкциза = ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяССылка)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма КАК СуммаКорректировкиОборота,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаАкциза,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	0 КАК СуммаАкцизаВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	НЕОПРЕДЕЛЕНО КАК СтавкаАкциза,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииКорректировки,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	ТаблицаУслуги.СчетУчетаНДС КАК Счет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК КорСчет,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ЛОЖЬ КАК ЭтоАкциз,
		|	0 КАК Количество,
		|	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Реквизиты.УчитыватьНДС";
		
		Если Реквизиты.ОтложитьНачислениеНДС Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.СчетУчетаНДС КАК Счет,", "&СчетУчетаНДСОтложенный КАК Счет,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,", "Реквизиты.Контрагент КАК Субконто1,");
			Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
				ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,", "Реквизиты.ДокументОснование КАК Субконто2,");
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,", "Реквизиты.Ссылка КАК Субконто2,");
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СодержаниеВыделенНДС КАК Содержание,", "&СодержаниеОтложенНДС КАК Содержание,");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПроставитьСторноТаблиц(ТаблицаСписанныеТовары, ТаблицаНДС, ТаблицаРеквизиты) Экспорт

	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания, СуммаСписанияНУ,
		|СуммаСписанияВР");
	
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, СуммаНалога, СуммаНалогаВал");
	Если ТаблицаНДС <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаНДС, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Возврат выручки от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РаспределитьТаблицуЗачетаАвансовПоТаблицеВзаиморасчетов(ТаблицаТоварыУслуги, ТаблицаЗачетАвансов, ТаблицаДокумента, ТаблицаРеквизиты) Экспорт
	
	СписокОбязательныхКолонок = "ИмяСписка, НомерСтроки, СчетУчетаНДС, СчетУчетаАкциза";
	КопияТаблицыДокумента = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок);
	
	ТаблицаРезультат = ТаблицаТоварыУслуги.СкопироватьКолонки();
	СтрокаКолонокДоходов = "СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3";
	КолонкиДоходов = Новый Структура(СтрокаКолонокДоходов + ",КорСубконто3");
	Для Каждого Колонка Из КолонкиДоходов Цикл
		ТаблицаРезультат.Колонки.Удалить(Колонка.Ключ);
		ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРезультат, "Содержание", "");
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРезультат, "СодержаниеНУ", "");
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРезультат, "ЗнакПроводкиНУ", 1);
	
	СтрокаПоказателей = "СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов, СуммаАкцизаВзаиморасчетов, Сумма, СуммаНДС, СуммаАкциза";
	СтруктураПоказателей = Новый Структура("СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов, СуммаАкцизаВзаиморасчетов", "Сумма", "СуммаНДС", "СуммаАкциза");
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		
		// сначала пытаемся распределить сумму 
		Для Каждого СтрокаДокумента Из ТаблицаТоварыУслуги Цикл
			
			ОсталосьПогаситьВал  = СтрокаДокумента[Показатель.Ключ];
			ОсталосьПогаситьРегл = СтрокаДокумента[Показатель.Значение];
			Если ОсталосьПогаситьВал = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаАванса Из ТаблицаЗачетАвансов Цикл
				Если СтрокаАванса.ОстатокВзаиморасчетов <= 0 ИЛИ СтрокаАванса.СуммаВзаиморасчетов <= 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ОсталосьПогаситьВал = 0 И ОсталосьПогаситьРегл = 0 Тогда
					Прервать;
				КонецЕсли;
				
				СуммаКПогашениюВал  = Мин(СтрокаАванса.ОстатокВзаиморасчетов, ОсталосьПогаситьВал);
				СуммаКПогашениюРегл = СтрокаАванса.СуммаРегл * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов;
				СуммаКПогашениюРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов;
				
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, , СтрокаПоказателей + "," + СтрокаКолонокДоходов + ",КорСубконто3");
				
				// все суммы будем относить на данные ресурсы
				СтрокаРезультат.СуммаВзаиморасчетов = СуммаКПогашениюВал;
				СтрокаРезультат.Сумма               = СуммаКПогашениюРеглПоКурсуАванса;
				
				СтрокаРезультат.ЗнакПроводкиНУ      = 0;
				
				СтрокаАванса.ОстатокВзаиморасчетов  = СтрокаАванса.ОстатокВзаиморасчетов  - СуммаКПогашениюВал;
				СтрокаАванса.СуммаВзаиморасчетов    = СтрокаАванса.СуммаВзаиморасчетов    - СуммаКПогашениюВал;
				СтрокаАванса.СуммаРегл              = СтрокаАванса.СуммаРегл              - СуммаКПогашениюРегл;
				СтрокаАванса.СуммаРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса - СуммаКПогашениюРеглПоКурсуАванса;
				
				ОсталосьПогаситьВал  = ОсталосьПогаситьВал  - СуммаКПогашениюВал;
				ОсталосьПогаситьРегл = ОсталосьПогаситьРегл - СуммаКПогашениюРеглПоКурсуАванса;
				
				Суффикс = Сред(Показатель.Значение, 6);
				Если Суффикс = "НДС" Тогда 
					СтрокаРезультат.Содержание     = НСтр("ru = 'Зачет сумм возврата: НДС'", КодОсновногоЯзыка);
					СтрокаРезультат.СодержаниеНУ   = НСтр("ru = 'Возврат суммы НДС'", КодОсновногоЯзыка);
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, НайденныеСтроки[0].СчетУчетаНДС, ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
						СтрокаРезультат.СубконтоДоходовБУ1 = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						Если Реквизиты.ОтложитьНачислениеНДС Тогда
							Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
								СтрокаРезультат.СубконтоДоходовБУ2 = Реквизиты.ДокументОтгрузки; 
							Иначе
								СтрокаРезультат.СубконтоДоходовБУ2 = Реквизиты.Регистратор; 
							КонецЕсли; 
						Иначе
							СтрокаРезультат.СубконтоДоходовБУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог; 
						КонецЕсли;
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(НайденныеСтроки[0].СчетУчетаНДС, Реквизиты.Период), ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаРезультат.СчетДоходовБУ, Реквизиты.Период));
						СтрокаРезультат.СубконтоДоходовНУ1 = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						Если Реквизиты.ОтложитьНачислениеНДС Тогда
							Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
								СтрокаРезультат.СубконтоДоходовНУ2 = Реквизиты.ДокументОтгрузки; 
							Иначе
								СтрокаРезультат.СубконтоДоходовНУ2 = Реквизиты.Регистратор; 
							КонецЕсли; 
						Иначе
							СтрокаРезультат.СубконтоДоходовНУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог; 
						КонецЕсли;

						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;
						
						СтрокаРезультат.КорСубконто3 = СтрокаАванса.ДокументРасчетов;
						
					КонецЕсли;
				ИначеЕсли Суффикс = "Акциза" Тогда 
					СтрокаРезультат.Содержание     = НСтр("ru = 'Зачет сумм возврата: акциз'", КодОсновногоЯзыка);
					СтрокаРезультат.СодержаниеНУ   = НСтр("ru = 'Возврат суммы акциза'", КодОсновногоЯзыка);
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = НайденныеСтроки[0].СчетУчетаАкциза;
						СтрокаРезультат.СубконтоДоходовБУ1 = Справочники.НалогиСборыОтчисления.Акциз;
						СтрокаРезультат.СубконтоДоходовБУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаАкцизаНУ(НайденныеСтроки[0].СчетУчетаАкциза, Реквизиты.Период);
						СтрокаРезультат.СубконтоДоходовНУ1 = Справочники.НалогиСборыОтчисления.Акциз;
						СтрокаРезультат.СубконтоДоходовНУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;
						
						СтрокаРезультат.КорСубконто3 = СтрокаАванса.ДокументРасчетов;
					КонецЕсли;
				Иначе 
					СтрокаРезультат.Содержание = НСтр("ru = 'Зачет сумм возврата: выручка'", КодОсновногоЯзыка);
					
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, СтрокаКолонокДоходов);
					СтрокаРезультат.КорСубконто3 = СтрокаАванса.ДокументРасчетов;
				КонецЕсли;
				
			КонецЦикла;
			
			// если после распределения осталась сумма, то добавим строку задолженности
			Если ОсталосьПогаситьВал <> 0 ИЛИ ОсталосьПогаситьРегл <> 0 Тогда 
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, , СтрокаПоказателей + ",КорСубконто3");
				
				// все суммы будем относить на данные ресурсы
				СтрокаРезультат.СуммаВзаиморасчетов = ОсталосьПогаситьВал;
				СтрокаРезультат.Сумма               = ОсталосьПогаситьРегл;
				
				СтрокаРезультат.ЗнакПроводкиНУ      = 1;

				Суффикс = Сред(Показатель.Значение, 6);
				Если Суффикс = "НДС" Тогда 
					СтрокаРезультат.Содержание = НСтр("ru = 'Возврат суммы НДС'", КодОсновногоЯзыка);
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, НайденныеСтроки[0].СчетУчетаНДС, ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
						СтрокаРезультат.СубконтоДоходовБУ1 = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						Если Реквизиты.ОтложитьНачислениеНДС Тогда
							Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
								СтрокаРезультат.СубконтоДоходовБУ2 = Реквизиты.ДокументОтгрузки; 
							Иначе
								СтрокаРезультат.СубконтоДоходовБУ2 = Реквизиты.Регистратор; 
							КонецЕсли; 
						Иначе
							СтрокаРезультат.СубконтоДоходовБУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог; 
						КонецЕсли;
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(НайденныеСтроки[0].СчетУчетаНДС, Реквизиты.Период), ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаРезультат.СчетДоходовБУ, Реквизиты.Период));
						СтрокаРезультат.СубконтоДоходовНУ1 = ?(НЕ Реквизиты.ОтложитьНачислениеНДС, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						Если Реквизиты.ОтложитьНачислениеНДС Тогда
							Если ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
								ИЛИ ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
								СтрокаРезультат.СубконтоДоходовНУ2 = Реквизиты.ДокументОтгрузки; 
							Иначе
								СтрокаРезультат.СубконтоДоходовНУ2 = Реквизиты.Регистратор; 
							КонецЕсли; 
						Иначе
							СтрокаРезультат.СубконтоДоходовНУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог; 
						КонецЕсли;

						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;						
						
						СтрокаРезультат.КорСубконто3 = Реквизиты.Регистратор;

					КонецЕсли;
				ИначеЕсли Суффикс = "Акциза" Тогда 
					СтрокаРезультат.Содержание = НСтр("ru = 'Возврат суммы акциза'", КодОсновногоЯзыка);
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = НайденныеСтроки[0].СчетУчетаАкциза;
						СтрокаРезультат.СубконтоДоходовБУ1 = Справочники.НалогиСборыОтчисления.Акциз;
						СтрокаРезультат.СубконтоДоходовБУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаАкцизаНУ(НайденныеСтроки[0].СчетУчетаАкциза, Реквизиты.Период);
						СтрокаРезультат.СубконтоДоходовНУ1 = Справочники.НалогиСборыОтчисления.Акциз;
						СтрокаРезультат.СубконтоДоходовНУ2 = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;
						
						СтрокаРезультат.КорСубконто3 = Реквизиты.Регистратор;

					КонецЕсли;
				Иначе 
					Если НЕ Реквизиты.УказанСчетВозвратов Тогда
						СтрокаРезультат.Стоимость      = 0;
						СтрокаРезультат.ЗнакПроводкиНУ = 1;
					КонецЕсли;
					
					СтрокаРезультат.Содержание = НСтр("ru = 'Возврат выручки от реализации'", КодОсновногоЯзыка);
					
					Если ОсталосьПогаситьВал < 0 ИЛИ ОсталосьПогаситьРегл < 0 Тогда 
						СтрокаРезультат.ЗнакПроводкиНУ = 0;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, СтрокаКолонокДоходов);
					Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3   = Неопределено;
					ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3   = СтрокаДокумента.Партия;
					Иначе 
						СтрокаРезультат.КорСубконто3   = Реквизиты.Регистратор;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПоказателей, ",", , Истина);
	МассивПоказателей.Добавить("Количество");
	МассивПоказателей.Добавить("НомерСтроки");
	
	КолонкиГруппировки = "";
	Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
		Если МассивПоказателей.Найти(Колонка.Имя) = Неопределено Тогда 
			КолонкиГруппировки = КолонкиГруппировки + ", " + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	КолонкиГруппировки = "НомерСтроки" + КолонкиГруппировки;
	
	ТаблицаРезультат.Свернуть(КолонкиГруппировки, СтрокаПоказателей + ", Количество");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура СвернутьДвиженияРегистровБухгалтерии(Движения, Отказ) Экспорт
	
	Если НЕ Движения.Типовой.Записывать И НЕ Движения.Налоговый.Записывать Тогда 
		Возврат;
	КонецЕсли;
	
	Если Движения.Типовой.Записывать Тогда 
		ТаблицаДвижений = Движения.Типовой.Выгрузить();
		КолонкиСуммирования = "Сумма,КоличествоДт,КоличествоКт,ВалютнаяСуммаДт,ВалютнаяСуммаКт";
		МассивКолонокСуммирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСуммирования, ",", Истина, Истина);
		КолонкиГруппировки = "Период";
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			Если МассивКолонокСуммирования.Найти(Колонка.Имя) <> Неопределено ИЛИ Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Период" Тогда 
				Продолжить;
			КонецЕсли;
			КолонкиГруппировки = КолонкиГруппировки + "," + Колонка.Имя;
		КонецЦикла;
		ТаблицаДвижений.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
		// удалим проводки с нулевыми показателями, могли образоваться при свертке
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.КоличествоДт = 0 И СтрокаТаблицы.КоличествоКт = 0 И СтрокаТаблицы.Сумма = 0 И НЕ
				((ЗначениеЗаполнено(СтрокаТаблицы.ВалютаДт) И СтрокаТаблицы.ВалютнаяСуммаДт <> 0)
					ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВалютаКт) И СтрокаТаблицы.ВалютнаяСуммаКт <> 0)) Тогда 
				ТаблицаДвижений.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Движения.Типовой.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
	Если Движения.Налоговый.Записывать Тогда 
		ТаблицаДвижений = Движения.Налоговый.Выгрузить();
		КолонкиСуммирования = "Сумма,КоличествоДт,КоличествоКт";
		МассивКолонокСуммирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСуммирования, ",", Истина, Истина);
		КолонкиГруппировки = "Период";
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			Если МассивКолонокСуммирования.Найти(Колонка.Имя) <> Неопределено ИЛИ Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Период" Тогда 
				Продолжить;
			КонецЕсли;
			КолонкиГруппировки = КолонкиГруппировки + "," + Колонка.Имя;
		КонецЦикла;
		ТаблицаДвижений.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
		// удалим проводки с нулевой суммой, могли образоваться при свертке
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.КоличествоДт = 0 И СтрокаТаблицы.КоличествоКт = 0 И СтрокаТаблицы.Сумма = 0 Тогда 
				ТаблицаДвижений.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Движения.Налоговый.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если  Реквизиты.ЕстьНомераГТД Тогда  
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийПриход();
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);  		
				
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеОбъекта, ДанныеЗаполнения) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаДокумента) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") ИЛИ 
			ТипЗнч(ДанныеЗаполнения) = Тип("ДанныеФормыСтруктура") Тогда 
			МетаданныеДокументаОснования  = ДанныеЗаполнения.Ссылка.Метаданные();
		Иначе 
			МетаданныеДокументаОснования  = ДанныеЗаполнения.Метаданные();
		КонецЕсли;
	
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда
			ДанныеОбъекта.ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеОбъекта.Склад = ДанныеЗаполнения.Склад;
	
	ДанныеОбъекта.ДокументОснование = ДанныеЗаполнения;
	
	Если ДанныеЗаполнения.Проведен Тогда
		
		// Скопируем табличные части из документа основания.
		ТоварыПоДаннымОснования = ТоварыПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Товары.Загрузить(ТоварыПоДаннымОснования);
		КонецЕсли;

		УслугиПоДаннымОснования = УслугиПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если УслугиПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Услуги.Загрузить(УслугиПоДаннымОснования);
		КонецЕсли;
		
		ДанныеОбъекта.УчастникиСовместнойДеятельности.Загрузить(ДанныеЗаполнения.УчастникиСовместнойДеятельности.Выгрузить());
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуОРозничныхПродажах(ДанныеОбъекта, ДанныеЗаполнения) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДанныеЗаполнения);
	
	ДанныеОбъекта.Склад = ДанныеЗаполнения.Склад;
	
	ДанныеОбъекта.ДокументОснование = ДанныеЗаполнения;
	ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи;
	
	Если ДанныеЗаполнения.Проведен Тогда
		
		// Скопируем табличные части из документа основания.
		ТоварыПоДаннымОснования = ТоварыПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Товары.Загрузить(ТоварыПоДаннымОснования);
		КонецЕсли;

		УслугиПоДаннымОснования = УслугиПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если УслугиПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Услуги.Загрузить(УслугиПоДаннымОснования);
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьПоЧекККМ(ДанныеОбъекта, ДанныеЗаполнения) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДанныеЗаполнения);
	
	ДанныеОбъекта.Склад = ДанныеЗаполнения.Склад;
	ДанныеОбъекта.Касса = ДанныеЗаполнения.Касса;
	
	ДанныеОбъекта.ДокументОснование = ДанныеЗаполнения.ОтчетОРозничныхПродажах;
	
	ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи;
	
	Если ДанныеЗаполнения.Проведен Тогда
		
		// Скопируем табличные части из документа основания.
		ТоварыПоДаннымОснования = ТоварыПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Товары.Загрузить(ТоварыПоДаннымОснования);
		КонецЕсли;

		УслугиПоДаннымОснования = УслугиПоДаннымОснования(ДанныеОбъекта, ДанныеЗаполнения);
		Если УслугиПоДаннымОснования.Количество() > 0 Тогда
			ДанныеОбъекта.Услуги.Загрузить(УслугиПоДаннымОснования);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПоТоварам.Номенклатура КАК Номенклатура,
	|	ДанныеПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДанныеПоТоварам.Количество КАК Количество,
	|	ДанныеПоТоварам.Коэффициент КАК Коэффициент,
	|	ДанныеПоТоварам.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПоТоварам.Сумма КАК Сумма,
	|	ДанныеПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ДанныеПоТоварам.Цена КАК Цена,
	|	ДанныеПоТоварам.НомерСтроки КАК КлючСвязи
	|ПОМЕСТИТЬ ДанныеТоваров
	|ИЗ
	|	&ДанныеПоТоварам КАК ДанныеПоТоварам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ НоменклатураКлюч
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ДанныеТоваров.Номенклатура
	|			ИЗ
	|				ДанныеТоваров КАК ДанныеТоваров)
	|	И ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТоваров.Номенклатура КАК Номенклатура,
	|	ДанныеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДанныеТоваров.Количество КАК Количество,
	|	ДанныеТоваров.Коэффициент КАК Коэффициент,
	|	ДанныеТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеТоваров.Сумма КАК Сумма,
	|	ДанныеТоваров.СуммаНДС КАК СуммаНДС,
	|	ДанныеТоваров.Цена КАК Цена,
	|	ДанныеТоваров.КлючСвязи КАК КлючСвязи,
	|	НоменклатураКлюч.КлючСвязи КАК КлючСвязиГТД
	|ПОМЕСТИТЬ НоменклатураВозвратКлюч
	|ИЗ
	|	ДанныеТоваров КАК ДанныеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураКлюч КАК НоменклатураКлюч
	|		ПО ДанныеТоваров.Номенклатура = НоменклатураКлюч.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахНомераГТД.НомерГТД КАК НомерГТД,
	|	НоменклатураВозвратКлюч.Количество КАК Количество,
	|	НоменклатураВозвратКлюч.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	НоменклатураВозвратКлюч КАК НоменклатураВозвратКлюч
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.НомераГТД КАК ОтчетОРозничныхПродажахНомераГТД
	|		ПО НоменклатураВозвратКлюч.КлючСвязиГТД = ОтчетОРозничныхПродажахНомераГТД.КлючСвязи
	|ГДЕ
	|	ОтчетОРозничныхПродажахНомераГТД.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахНомераГТД.КлючСвязи В
	|			(ВЫБРАТЬ
	|				НоменклатураКлюч.КлючСвязи
	|			ИЗ
	|				НоменклатураКлюч КАК НоменклатураКлюч)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.ОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("ДанныеПоТоварам", ДанныеОбъекта.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ДанныеОбъекта.Товары.Загрузить(Запрос.МенеджерВременныхТаблиц.Таблицы[2].ПолучитьДанные().Выгрузить());
		ДанныеОбъекта.НомераГТД.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетФактураВыданный(ДанныеОбъекта, ДанныеЗаполнения) Экспорт
	
	ДанныеОбъекта.ДокументОснование = ДанныеЗаполнения;
	
	Если ДанныеЗаполнения.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  	
	
	ДанныеОбъекта.Дата = ДанныеЗаполнения.ДатаСовершенияОборотаПоРеализации;
	
	// Заполним реквизиты шапки по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДанныеЗаполнения);
	
	ДанныеОбъекта.ДоверенностьНомер		     = ДанныеЗаполнения.ДоверенностьНомер;
	ДанныеОбъекта.ДоверенностьДата  		 = ДанныеЗаполнения.ДоверенностьДата;
	ДанныеОбъекта.ДоверенностьЛицо  		 = ДанныеЗаполнения.ДоверенностьЛицо;
	ДанныеОбъекта.ДоверенностьВыдана  		 = ДанныеЗаполнения.ДоверенностьВыдана;

	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ДанныеОбъекта, ДанныеЗаполнения.Ссылка);
	
	ДанныеОбъектаСтруктура = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъектаСтруктура, ДанныеОбъекта);

	ДанныеОбъекта.УчастникиСовместнойДеятельности.Загрузить(ДанныеЗаполнения.УчастникиСовместнойДеятельности.Выгрузить());
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратОтПокупателя_Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Возврат от покупателя (накладная)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечатиСчетаФактуры";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Счет-фактура в валюте регл. учета
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (в валюте регл. учета)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечатиСчетаФактуры";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";

	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратОтПокупателя_Накладная,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратОтПокупателя_Накладная,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратОтПокупателя_Накладная,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать накладной
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВозвратОтПокупателя_Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВозвратОтПокупателя_Накладная",
			НСтр("ru = 'Возврат от покупателя (накладная)'"),
			ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ВозвратОтПокупателя_Накладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданный") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданный",
			НСтр("ru = 'Счет-фактура'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Ложь, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданный"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданныйВВалютеРеглУчета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданныйВВалютеРеглУчета",
			НСтр("ru = 'Счет-фактура (в валюте регл. учета)'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Истина, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданныйВВалютеРеглУчета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВозвратТоваровОтПокупателя.Ссылка,
	              |	ВозвратТоваровОтПокупателя.Номер,
	              |	ВозвратТоваровОтПокупателя.Дата,
	              |	ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК Основание,
	              |	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	              |	ВозвратТоваровОтПокупателя.Организация,
	              |	ВозвратТоваровОтПокупателя.СтруктурноеПодразделение,
	              |	ВозвратТоваровОтПокупателя.СуммаДокумента,
	              |	ВозвратТоваровОтПокупателя.ВалютаДокумента,
	              |	ВозвратТоваровОтПокупателя.УчитыватьНДС,
	              |	ВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	              |	ВозвратТоваровОтПокупателя.Склад,
	              |	ВозвратТоваровОтПокупателя.ДоверенностьНомер,
	              |	ВозвратТоваровОтПокупателя.ДоверенностьДата,
	              |	ВозвратТоваровОтПокупателя.ДоверенностьВыдана,
	              |	ВозвратТоваровОтПокупателя.ДоверенностьЛицо
	              |ПОМЕСТИТЬ ВТ_ДокументыВозвратТоваровОтПокупателя
	              |ИЗ
	              |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	              |ГДЕ
	              |	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	ВозвратТоваровОтПокупателя.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВозвратТоваровОтПокупателя.Ссылка,
	              |	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо,
	              |	ВЫБОР
	              |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	              |			ТОГДА ОтветственныеЛицаПоДокументам.ФизическоеЛицо.Наименование
	              |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	              |				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	              |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	              |				ИНАЧЕ """"
	              |			КОНЕЦ + ВЫБОР
	              |				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	              |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	              |				ИНАЧЕ """"
	              |			КОНЕЦ
	              |	КОНЕЦ КАК ПредставлениеМОЛ
	              |ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	              |ИЗ
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	              |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	              |			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	              |		ИЗ
	              |			(ВЫБРАТЬ
	              |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	              |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	              |				ВТ_ДокументыОприходованиеТоваров.Ссылка КАК Ссылка
	              |			ИЗ
	              |				ВТ_ДокументыВозвратТоваровОтПокупателя КАК ВТ_ДокументыОприходованиеТоваров
	              |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	              |					ПО ВТ_ДокументыОприходованиеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	              |						И ВТ_ДокументыОприходованиеТоваров.Дата >= ОтветственныеЛица.Период
	              |			
	              |			СГРУППИРОВАТЬ ПО
	              |				ОтветственныеЛица.СтруктурнаяЕдиница,
	              |				ВТ_ДокументыОприходованиеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	              |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	              |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	              |					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	              |				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	              |					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	              |					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			ПериодыОтвественныеЛица.Ссылка,
	              |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	              |			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	              |				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	              |		ПО ВозвратТоваровОтПокупателя.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	              |ГДЕ
	              |	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	ВозвратТоваровОтПокупателя.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Ссылка,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Номер,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Дата,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Основание,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Контрагент,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Организация,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.СтруктурноеПодразделение,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.СуммаДокумента,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.ВалютаДокумента,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.УчитыватьНДС,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.Склад,
	              |	ОтветственныеЛица.ОтветственноеЛицо КАК МОЛ,
	              |	ОтветственныеЛица.ПредставлениеМОЛ,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.ДоверенностьНомер,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.ДоверенностьДата,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.ДоверенностьВыдана,
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя.ДоверенностьЛицо
	              |ИЗ
	              |	ВТ_ДокументыВозвратТоваровОтПокупателя КАК ВТ_ДокументыВозвратТоваровОтПокупателя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	              |		ПО ВТ_ДокументыВозвратТоваровОтПокупателя.Ссылка = ОтветственныеЛица.Ссылка";

	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
				  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
	               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	               |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	               |	ВозвратТоваровОтПокупателяТовары.КодАртикул,
	               |	ВозвратТоваровОтПокупателяТовары.Количество,
	               |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	               |	ВозвратТоваровОтПокупателяТовары.Цена,
	               |	ВозвратТоваровОтПокупателяТовары.Сумма,
	               |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	               |	ВозвратТоваровОтПокупателяТовары.Метка КАК Метка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
	               |		ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
	               |		ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	               |		ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	               |		ВозвратТоваровОтПокупателяТовары.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	               |		ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
	               |		ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |		ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	               |		ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	               |		ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	               |		0 КАК Метка
	               |	ИЗ
	               |		Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	               |	ГДЕ
	               |		ВозвратТоваровОтПокупателяТовары.Ссылка В (&МассивОбъектов)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВозвратТоваровОтПокупателяУслуги.Ссылка,
	               |		ВозвратТоваровОтПокупателяУслуги.НомерСтроки,
	               |		ВозвратТоваровОтПокупателяУслуги.Номенклатура,
	               |		ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |		ВозвратТоваровОтПокупателяУслуги.Номенклатура." + ТекстКодАртикул + ",
	               |		ВозвратТоваровОтПокупателяУслуги.Количество,
	               |		0,
	               |		ВозвратТоваровОтПокупателяУслуги.Цена,
	               |		ВозвратТоваровОтПокупателяУслуги.Сумма,
	               |		ВозвратТоваровОтПокупателяУслуги.СуммаНДС,
	               |		2
	               |	ИЗ
	               |		Документ.ВозвратТоваровОтПокупателя.Услуги КАК ВозвратТоваровОтПокупателяУслуги
	               |	ГДЕ
	               |		ВозвратТоваровОтПокупателяУслуги.Ссылка В (&МассивОбъектов)) КАК ВозвратТоваровОтПокупателяТовары
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	Метка,
	               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки
				   |
	               |ИТОГИ ПО
	               |	Ссылка";

	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная", КодЯзыка);
	
	ОбластьМакетаЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаПоставщик 		= Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакетаПокупатель 	= Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакетаДоверенность	= Макет.ПолучитьОбласть("Доверенность");
	ОбластьМакетаОснование 		= Макет.ПолучитьОбласть("Основание");
	ОбластьИтогоНДС 			= Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьИтогоСНДС 			= Макет.ПолучитьОбласть("ИтогоСНДС");
	ОбластьИтого 				= Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодписи		= Макет.ПолучитьОбласть("Подписи");
	ОбластьМакетаСуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьСтроки 				= Макет.ПолучитьОбласть(ОбластьСтроки);
	ОбластьШапки 			    = Макет.ПолучитьОбласть(ОбластьШапки);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		// Выводим шапку накладной
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Ссылка, НСтр("ru = 'Возврат от покупателя'", КодЯзыка));
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ПредставлениеКонтрагента = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Контрагент, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		
		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеКонтрагента);
		ОбластьМакетаПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Контрагент;
		ТабДокумент.Вывести(ОбластьМакетаПоставщик);
		
		ОбластьМакетаПокупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеОрганизации);
		ОбластьМакетаПокупатель.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакетаПокупатель);
				
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ВыборкаПоДокументам);
		
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности,ОбластьМакетаДоверенность,,,,,Истина);
		Если ЗначениеЗаполнено(ОбластьМакетаДоверенность.Параметры.Доверенность) Тогда
			ТабДокумент.Вывести(ОбластьМакетаДоверенность); 
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Основание) Тогда 
			ОбластьМакетаОснование.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабДокумент.Вывести(ОбластьМакетаОснование);
		КонецЕсли;
		              		
		Если ВыводитьКоды Тогда
			ОбластьШапки.Параметры.Колонка = Колонка;			
		КонецЕсли;    
		
		ТабДокумент.Вывести(ОбластьШапки);
		
		НомПП    = 0;
		Сумма    = 0;
		СуммаНДС = 0;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			ВсегоНаименований = ВыборкаСтрокТовары.Количество();
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				НомПП = НомПП + 1;
				ОбластьСтроки.Параметры.НомерСтроки = НомПП;
				
				ОбластьСтроки.Параметры.Товар = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар),СокрЛП(ВыборкаСтрокТовары.Товар),ВыборкаСтрокТовары.Номенклатура);
				
				Если ВыводитьКоды Тогда
					ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;				
				КонецЕсли;    
				
				ТабДокумент.Вывести(ОбластьСтроки);
				
				Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		ОбластьИтого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьИтого);
		
		// Вывести ИтогоНДС
		Если ВыборкаПоДокументам.УчитыватьНДС Тогда
			
			ОбластьИтогоНДС.Параметры.НДС = ?(ВыборкаПоДокументам.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'", КодЯзыка), НСтр("ru = 'Сумма НДС:'", КодЯзыка));
			ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			
			ТабДокумент.Вывести(ОбластьИтогоНДС);
			Если НЕ ВыборкаПоДокументам.СуммаВключаетНДС ТОгда
				ОбластьИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
				ТабДокумент.Вывести(ОбластьИтогоСНДС);
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ВыборкаПоДокументам.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакетаСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'", КодЯзыка),
			ВсегоНаименований,
			ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ВыборкаПоДокументам.ВалютаДокумента));
		
		ОбластьМакетаСуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ВыборкаПоДокументам.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаСуммаПрописью);
		
		// Вывести подписи
		
		// заполняем МОЛ
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛ, ВыборкаПоДокументам.Дата);
			ОбластьМакетаПодписи.Параметры.ПолучилПредставление = ДанныеМОЛ.Представление;
		КонецЕсли;	
		
		ОбластьМакетаПодписи.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабДокумент.Вывести(ОбластьМакетаПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, ВВалютеРеглУчета = Ложь, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ТЧ_Документов.Ссылка) КАК СчетФактура,
	|	ТЧ_Документов.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_Документов
	|ГДЕ
	|	ТЧ_Документов.ДокументОснование В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ_Документов.ДокументОснование";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	Возврат ?(ВВалютеРеглУчета, 
				Документы.СчетФактураВыданный.ПечатьСчетФактураВВалютеРеглУчета(МассивСчетовФактур, ОбъектыПечати, КодЯзыка), 
				Документы.СчетФактураВыданный.ПечатьСчетФактура(МассивСчетовФактур, ОбъектыПечати, , КодЯзыка));
	
КонецФункции

#КонецЕсли