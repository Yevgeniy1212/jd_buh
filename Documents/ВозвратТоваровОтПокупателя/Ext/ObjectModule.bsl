
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;

		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения.Основание);
		
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;

		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);

	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	

	ОтложитьНачислениеНДС = Ложь;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтотОбъект.Услуги.Количество() = 0 Тогда
		ОтложитьНачислениеНДС = Ложь;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
	//РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
    
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ);
	
	РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УчетНДСИАкциза.ДобавитьОбновитьСведенияПоАктамВыполненныхРабот(ЭтотОбъект, ,Истина); 		

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНУ, ПользовательУправляетСчетамиУчета", Товары.Количество() > 0, ПользовательУправляетСчетамиУчета);
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если Товары.Количество() > 0 
		ИЛИ Услуги.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		
    КонецЕсли;
    
	//Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	//КонецЕсли;
	
	//ОрганизацияПлательщикНалогаНаПрибыль 			= ПолучитьФункциональнуюОпцию("ПлательщикКПН", Новый Структура("Организация, Период", Организация, Дата));
	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	
	
	Если НЕ (УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ)) Тогда
		ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ = Ложь;	
	КонецЕсли;

	Если НЕ ОрганизацияПлательщикНалогаНаПрибыль ИЛИ НЕ УчитыватьКПН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетДоходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетСписанияСебестоимостиНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетДоходовНУ");
	КонецЕсли;

	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		
	КонецЕсли;

	Если ОтложитьНачислениеНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОперацииРеализации");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратРозничнойПродажи Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, ПараметрыПострочнойПроверки);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, ПараметрыПострочнойПроверки);
	ПроверитьЗаполнениеТабличнойЧастиНомераГТД(Отказ);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВозвратТоваровОтПокупателя.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаВозвращенныеСписанныеТовары = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
		ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.СписаниеТоваровСчетаУчета,
		ПараметрыПроведения.СписаниеТоваровСписокНоменклатуры, ПараметрыПроведения.Реквизиты, Отказ);
		
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	// Таблицы выручки от реализации: собственных товаров и услуг
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	Если НЕ ПараметрыПроведения.Реквизиты[0].УказанСчетВозвратов Тогда 
		ТаблицаСобственныеТоварыУслуги = Документы.ВозвратТоваровОтПокупателя.РаспределитьТаблицуЗачетаАвансовПоТаблицеВзаиморасчетов(ТаблицыРеализация.СобственныеТоварыУслуги, ТаблицаВзаиморасчеты, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.Реквизиты);
		ТаблицаВзаиморасчеты = Неопределено;
	Иначе 
		ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
		Документы.ВозвратТоваровОтПокупателя.ДобавитьКолонкуСодержание(ТаблицаСобственныеТоварыУслуги);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Сумма, Стоимость, СуммаВзаиморасчетов");
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСобственныеТоварыУслуги, СтруктураПолейДляСторно, -1);
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", "");
	
	ТаблицаРеализацияТМЗ = УчетТоваров.ПодготовитьТаблицуРеализацияТМЗ(
		ТаблицаВозвращенныеСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	СтруктураПолейДляСторно = Новый Структура("Сумма, НДС, Стоимость, Количество, Акциз");
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаРеализацияТМЗ, СтруктураПолейДляСторно, -1);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетТоваров.СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаВозвращенныеСписанныеТовары,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияВозвратТоваровОтПокупателя(
		ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияРеализацияТМЗ(ТаблицаРеализацияТМЗ, Движения, Отказ);
	
	УчетНДСИАкциза.СформироватьДвиженияВозвратТоваровОтПокупателя(ПараметрыПроведения.ТаблицаНДС, 
		ПараметрыПроведения.ТаблицаУчастникиСовместнойДеятельности, ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Свернем проводки в регистрах бухгалтерии
	Документы.ВозвратТоваровОтПокупателя.СвернутьДвиженияРегистровБухгалтерии(Движения, Отказ);
	
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоРеализацииТоваровУслуг(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоОтчетуОРозничныхПродажах(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоЧекККМ(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоСчетФактураВыданный(ЭтотОбъект, Основание);
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, ПараметрыПострочнойПроверки)
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		
		ПутьКСтрокеТЧ = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]";
		Если ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
			И ПараметрыПострочнойПроверки.ПользовательУправляетСчетамиУчета 
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, НСтр("ru = 'ТМЗ'"));
			Поле = ПутьКСтрокеТЧ + ".СчетУчетаНУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЭтотОбъект.УчитыватьНДС И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) <> 0
			И ПараметрыПострочнойПроверки.ПользовательУправляетСчетамиУчета 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки, НСтр("ru = 'ТМЗ'"));
			Поле = ПутьКСтрокеТЧ + ".СчетУчетаНДСПоРеализации";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;         	
	
	Если УчитыватьАкциз Тогда 
		ВыполнитьПроверкиСвязанныеСАкцизомВТабличнойЧасти(Товары, "Товары", НСтр("ru = 'ТМЗ'"), Отказ, ПараметрыПострочнойПроверки.ПользовательУправляетСчетамиУчета);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, ПараметрыПострочнойПроверки)
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Услуги Цикл

		Если УчитыватьНДС И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) <> 0 И НЕ ОтложитьНачислениеНДС
			И ПараметрыПострочнойПроверки.ПользовательУправляетСчетамиУчета 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки, НСтр("ru = 'Услуги'"));
			Поле = "Услуги[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчетаНДСПоРеализации";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ВыполнитьПроверкиСвязанныеСАкцизомВТабличнойЧасти(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, Отказ, ПользовательУправляетСчетамиУчета)
	
	Если ПроверяемаяТабличнаячасть.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокумента", ПроверяемаяТабличнаячасть);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.СтавкаАкциза,
	|	ТаблицаДокумента.СуммаАкциза,
	|	ТаблицаДокумента.АкцизВидОперацииРеализации,
	|	ТаблицаДокумента.СчетУчетаАкцизаПоРеализации
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НомерСтроки,
	|	ВТ_ТаблицаДокумента.Номенклатура,
	|	ВТ_ТаблицаДокумента.СтавкаАкциза,
	|	ЕстьNULL(ВТ_ТаблицаДокумента.СуммаАкциза, 0) КАК СуммаАкциза,
	|	ВТ_ТаблицаДокумента.АкцизВидОперацииРеализации,
	|	ВТ_ТаблицаДокумента.СчетУчетаАкцизаПоРеализации,
	|	СправочникНоменклатура.ВидПодакцизногоТМЗ,
	|	ЕстьNULL(СтавкиАкциза.Ставка, 0) КАК Ставка
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ТаблицаДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиАкциза КАК СтавкиАкциза
	|		ПО ВТ_ТаблицаДокумента.СтавкаАкциза = СтавкиАкциза.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПутьКСтрокеТЧ = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]";
		Если (ЗначениеЗаполнено(Выборка.ВидПодакцизногоТМЗ) ИЛИ Выборка.СуммаАкциза <> 0) И НЕ ЗначениеЗаполнено(Выборка.СтавкаАкциза) Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Ставка акциза'"),
				Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ПутьКСтрокеТЧ + ".СтавкаАкциза";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидПодакцизногоТМЗ) И ЗначениеЗаполнено(Выборка.СтавкаАкциза) Тогда 
			ТекстСообщения = НСтр("ru='Необходимо очистить ставку акциза или указать ""Вид подакцизного товара"" у номенклатуры'");
			Поле = ПутьКСтрокеТЧ + ".СтавкаАкциза";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СтавкаАкциза) И НЕ ЗначениеЗаполнено(Выборка.АкцизВидОперацииРеализации) Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Вид реализации (Акциз)'"),
				Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ПутьКСтрокеТЧ + ".АкцизВидОперацииРеализации";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СтавкаАкциза)
			И ПользовательУправляетСчетамиУчета
			И НЕ ЗначениеЗаполнено(Выборка.СчетУчетаАкцизаПоРеализации) Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет акциза'"),
				Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ПутьКСтрокеТЧ + ".СчетУчетаАкцизаПоРеализации";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНомераГТД(Отказ)
	
	Если НЕ НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоРахождениямТоваровИНомеровГТД = НомераГТДСервер.ИзмениласьТЧТоварыОтносительноТЧНомеровГТД(Товары, НомераГТД);
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоРахождениямТоваровИНомеровГТД Цикл
		СтрокаТоваров = Товары.Найти(СтрокаТабличнойЧасти.НомерСтроки, "НомерСтроки");
		Если СтрокаТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Поле = "Товары[" + Формат(СтрокаТоваров.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
		
		//значит недостает
		Если СтрокаТабличнойЧасти.Количество > 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Для номенклатуры %1 не заполнен Источник происхождения для %2 %3.'");
			КоличествоРазницы = СтрокаТабличнойЧасти.Количество;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для номенклатуры %1 количество, указанное в Источниках происхождениях, превышает на %2 %3. '");
			КоличествоРазницы = -1*(СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура,КоличествоРазницы, СтрокаТоваров.ЕдиницаИзмерения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);		
		
	КонецЦикла;

КонецПроцедуры 

Функция ИзмениласьТЧТоварыОтносительноТЧНомеровГТД(Товары, НомераГТД) Экспорт
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		                      |	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
		                      |	ТаблицаТоваров.Количество * ТаблицаТоваров.Коэффициент КАК Количество
		                      |ПОМЕСТИТЬ ВТ_Товары
		                      |ИЗ
		                      |	&Товары КАК ТаблицаТоваров
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ТаблицаНомераГТД.КлючСвязи,
		                      |	ТаблицаНомераГТД.Количество * ТаблицаНомераГТД.Коэффициент КАК Количество
		                      |ПОМЕСТИТЬ ВТ_НомераГТД
		                      |ИЗ
		                      |	&НомераГТД КАК ТаблицаНомераГТД
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ТаблицаТоваров.НомерСтроки,
		                      |	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
		                      |	ЕСТЬNULL(ТаблицаТоваров.Количество, 0) - ЕСТЬNULL(ТаблицаНомераГТД.Количество, 0) КАК Количество
		                      |ИЗ
		                      |	ВТ_Товары КАК ТаблицаТоваров
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТаблицаНомераГТД.КлючСвязи КАК КлючСвязи,
		                      |			СУММА(ТаблицаНомераГТД.Количество) КАК Количество
		                      |		ИЗ
		                      |			ВТ_НомераГТД КАК ТаблицаНомераГТД
		                      |		
		                      |		СГРУППИРОВАТЬ ПО
		                      |			ТаблицаНомераГТД.КлючСвязи) КАК ТаблицаНомераГТД
		                      |		ПО ТаблицаТоваров.КлючСвязи = ТаблицаНомераГТД.КлючСвязи
		                      |ГДЕ
		                      |	ЕСТЬNULL(ТаблицаТоваров.Количество, 0) - ЕСТЬNULL(ТаблицаНомераГТД.Количество, 0) <> 0")
							  ;

	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//                      |	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
	//                      |	ТаблицаТоваров.Количество * ТаблицаТоваров.Коэффициент КАК Количество
	//                      |ПОМЕСТИТЬ ВТ_Товары
	//                      |ИЗ
	//                      |	&Товары КАК ТаблицаТоваров
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ТаблицаНомераГТД.Номенклатура,
	//                      |	ТаблицаНомераГТД.КлючСвязи,
	//                      |	-ТаблицаНомераГТД.Количество * ТаблицаНомераГТД.Коэффициент КАК Количество
	//                      |ПОМЕСТИТЬ ВТ_НомераГТД
	//                      |ИЗ
	//                      |	&НомераГТД КАК ТаблицаНомераГТД
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//                      |	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
	//                      |	ТаблицаТоваров.Количество
	//                      |ИЗ
	//                      |	(ВЫБРАТЬ
	//                      |		ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//                      |		ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
	//                      |		ТаблицаТоваров.Количество КАК Количество
	//                      |	ИЗ
	//                      |		ВТ_Товары КАК ТаблицаТоваров
	//                      |	
	//                      |	ОБЪЕДИНИТЬ ВСЕ
	//                      |	
	//                      |	ВЫБРАТЬ
	//                      |		ТаблицаНомераГТД.Номенклатура,
	//                      |		ТаблицаНомераГТД.КлючСвязи,
	//                      |		-ТаблицаНомераГТД.Количество
	//                      |	ИЗ
	//                      |		ВТ_НомераГТД КАК ТаблицаНомераГТД) КАК ТаблицаТоваров
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ТаблицаТоваров.Номенклатура,
	//                      |	ТаблицаТоваров.КлючСвязи,
	//                      |	ТаблицаТоваров.Количество
	//                      |
	//                      |ИМЕЮЩИЕ
	//                      |	СУММА(ТаблицаТоваров.Количество) <> 0");
	
	Запрос.УстановитьПараметр("Товары", ЭтотОбъект.Товары); 
	Запрос.УстановитьПараметр("НомераГТД", ЭтотОбъект.НомераГТД); 

	ТаблицаПоРахождениямТоваровИНомеровГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПоРахождениямТоваровИНомеровГТД;
	
КонецФункции

#КонецЕсли
