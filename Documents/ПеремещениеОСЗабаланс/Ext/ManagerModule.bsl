#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьТабличнуюЧастьДляСпискаОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт 
	
	СписокОС = Объект.ОС.Выгрузить(,"ОсновноеСредство");
	
	МоментДокумента = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	
	ТЗ = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуОС(Объект.Организация, СписокОС, МоментДокумента, КонецМесяца(Объект.Дата));
	
	// определим текущее местонахождение ОС
	ТабТекМестонахождение = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьТекущееМестонахождениеДляСпискаОС(КонецДня(Объект.Дата), Объект.Организация, СписокОС);
	
	ТаблицаАмортизацииБУ = Новый ТаблицаЗначений();

	Если ТЗ.Количество() > 0 Тогда

		// Построение списка ОС, по которым начисляется амортизация, и расчет амортизации по ним для БУ
		СписокОС_НачислениеАмортизацииБУ = Новый Массив();
		
		Для Каждого СтрокаОС Из ТЗ Цикл
			СписокОС_НачислениеАмортизацииБУ.Добавить(СтрокаОС.ОС_БУ);
		КонецЦикла;	
		
		Если СписокОС_НачислениеАмортизацииБУ.Количество() > 0 Тогда
			ТаблицаАмортизацииБУ = УчетОС.ПодготовитьТаблицуАмортизацияОС(Объект.Дата, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СписокОС_НачислениеАмортизацииБУ);
		КонецЕсли;
		
		Для Каждого Строка Из Объект.ОС Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство, "ОС_БУ");
			
			Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета) Тогда
				
				Если СтрокаТЗ = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> не отражалось в учете по указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект");
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> снято с учета в указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект");
				КонецЕсли;

				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;

				Строка.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Строка.МОЛОрганизации 			= Справочники.ФизическиеЛица.ПустаяСсылка();
				
			Иначе
				
				Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				СтрокаТаблицаАмортизацииБУ  = ТаблицаАмортизацииБУ.Найти(Строка.ОсновноеСредство, "ОС");
				Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБУ = Неопределено, 0, СтрокаТаблицаАмортизацииБУ.Бух);

				Строка.ОстаточнаяСтоимостьБУ = Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ;

				СтрокаМестонахождение = ТабТекМестонахождение.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
				Если СтрокаМестонахождение <> Неопределено Тогда
					Строка.ПодразделениеОрганизации = СтрокаМестонахождение.ПодразделениеОрганизации;
					Строка.МОЛОрганизации 			= СтрокаМестонахождение.МОЛОрганизации;
				КонецЕсли;	
				
			КонецЕсли; //Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета)...
 		КонецЦикла;

	Иначе

		ТекстСообщения = НСтр("ru = 'Данные для заполнения стоимости отсутствуют.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект");
	
	КонецЕсли; //Если ТЗ.Количество() > 0 Тогда...

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на перемещение 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на перемещение ОС (Забаланс)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// ДА-4 (Накладная на внутреннее перемещение)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьДА4";
	КомандаПечати.Представление = НСтр("ru = 'ДА-4 (Накладная на внутреннее перемещение)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА4";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;

	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА4";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА4";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Накладная на перемещение ОС
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьНакладная");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьНакладная",
			НСтр("ru = 'Накладная на перемещение ОС'"),
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеОСЗабаланс.ПФ_MXL_Накладная");
	КонецЕсли;
	
	// Накладная на перемещение ОС
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьДА4");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьДА4",
			НСтр("ru = 'ДА-4 (Накладная на внутреннее перемещение)'"),
			ПечатьДА4(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеОСЗабаланс.ПФ_MXL_ДА4");
	КонецЕсли;
	 
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ПеремещениеОС.Номер,
	              |	ПеремещениеОС.Дата,
	              |	ПеремещениеОС.Ссылка,
	              |	ПеремещениеОС.Организация,
	              |	ПеремещениеОС.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	              |	ПеремещениеОС.Ответственный,
	              |	ПеремещениеОС.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС
	              |ИЗ
	              |	Документ.ПеремещениеОСЗабаланс КАК ПеремещениеОС
	              |ГДЕ
	              |	ПеремещениеОС.Ссылка В(&Ссылка)
	              |АВТОУПОРЯДОЧИВАНИЕ";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	ЗапросПоОС = Новый Запрос();
	ЗапросПоОС.УстановитьПараметр("Ссылка", МассивОбъектов);
	ЗапросПоОС.УстановитьПараметр("Дата", 			 ШапкаДокумента.Дата);
	ЗапросПоОС.УстановитьПараметр("Организация", 	 ШапкаДокумента.Организация);
	ЗапросПоОС.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеОСОС.НомерСтроки КАК НомерСтроки,
	|	ПеремещениеОСОС.ОсновноеСредство КАК Наименование,
	|	ПеремещениеОСОС.ПодразделениеОрганизации КАК Подразделение,
	|	ПеремещениеОСОС.МОЛОрганизации КАК МОЛ,
	|	ПеремещениеОСОС.НовыйПодразделениеОрганизации КАК ПодразделениеПолучатель,
	|	ПеремещениеОСОС.НовыйМОЛОрганизации КАК МОЛПолучатель,
	|	ПеремещениеОСОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеОСЗабаланс.ОС КАК ПеремещениеОСОС
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = ЗапросПоОС.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПеремещениеОСЗабаланс_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеОСЗабаланс.ПФ_MXL_Накладная");

	Пока ШапкаДокумента.Следующий() Цикл
			
		Если ШапкаДокумента.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
			
			Макет.УдалитьОбласть(Макет.Область("Подписи|Отпустил"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Макет.УдалитьОбласть(Макет.Область("Отправитель"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		КонецЕсли;
		
		ОбластьМакетаЗаголовок	  = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрока		  = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтого		  = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаПодписи	  = Макет.ПолучитьОбласть("Подписи");
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокОС = Неопределено;
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);

		// Выводим шапку накладной
		ОбластьМакетаЗаголовок.Параметры.Заполнить(ШапкаДокумента);

		
		ТекстНакладнаяНаПеремещениеОС 							 = НСтр("ru = 'Накладная на перемещение ОС'");
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовок 		 = РаботаСДиалогами.СформироватьЗаголовокДокумента(ШапкаДокумента.Ссылка, ТекстНакладнаяНаПеремещениеОС);
		ПредставлениеОрганизации 								 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата), "ПолноеНаименование,");
		ОбластьМакетаЗаголовок.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		// Вывести табличную часть
		ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);

		Если ВыборкаСтрокОС <> Неопределено Тогда
		
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				СчетаУчета 		 = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(ШапкаДокумента.Организация, ВыборкаСтрокОС.Наименование, ШапкаДокумента.Дата);
				ИнвентарныйНомер = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.Наименование, ШапкаДокумента.Организация, ШапкаДокумента.Дата);
								
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокОС);
				ОбластьМакетаСтрока.Параметры.Наименование 	   = СокрЛП(ВыборкаСтрокОС.Наименование);
				ОбластьМакетаСтрока.Параметры.ИнвентарныйНомер = ИнвентарныйНомер.ИнвентарныйНомер;
				ОбластьМакетаСтрока.Параметры.СчетУчета 	   = СчетаУчета.СчетУчетаБУ;
				
				Если ШапкаДокумента.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					
					ОбластьМакетаСтрока.Параметры.ПодразделениеПолучатель = ВыборкаСтрокОС.Подразделение;
					ОбластьМакетаСтрока.Параметры.МОЛПолучатель 	      = ВыборкаСтрокОС.МОЛ;
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаСтрока);

			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		ТабДокумент.Вывести(ОбластьМакетаИтого);
		
		// Вывести подписи
		ОбластьМакетаПодписи.Параметры.Заполнить(ШапкаДокумента);
		ТабДокумент.Вывести(ОбластьМакетаПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;	
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДА4(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеОС.Номер,
	               |	ПеремещениеОС.Дата КАК ДатаДокумента,
	               |	ПеремещениеОС.Организация,
	               |	ПеремещениеОС.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	               |	ПеремещениеОС.СтруктурноеПодразделениеПолучатель,
	               |	ПеремещениеОС.Ответственный.ФизЛицо КАК Ответственный,
	               |	ПеремещениеОС.Ссылка,
	               |	ПеремещениеОС.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС
	               |ИЗ
	               |	Документ.ПеремещениеОСЗабаланс КАК ПеремещениеОС
	               |ГДЕ
	               |	ПеремещениеОС.Ссылка В(&Ссылка)
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1 КАК Количество,
	|	ПеремещениеОСОС.НомерСтроки КАК НомерПП,
	|	ВЫРАЗИТЬ(ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
	|	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПОДСТРОКА(ПеремещениеОСОС.ОсновноеСредство.ЗаводскойНомер, 1, 250) КАК ЗаводскойНомер,
	|	ПОДСТРОКА(ПеремещениеОСОС.ОсновноеСредство.НомерПаспорта, 1, 250) КАК НомерПаспорта,
	|	ПеремещениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ПеремещениеОСОС.ПодразделениеОрганизации КАК Сдатчик,
	|	ПеремещениеОСОС.МОЛОрганизации КАК МОЛСдатчик,
	|	ПеремещениеОСОС.НовыйПодразделениеОрганизации КАК Получатель,
	|	ПеремещениеОСОС.НовыйМОЛОрганизации КАК МОЛПринял,
	|	ПеремещениеОСОС.СтоимостьБУ КАК НачальнаяСтоимость,
	|	ПеремещениеОСОС.АмортизацияБУ КАК СуммаАмортизации,
	|	ПеремещениеОСОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеОСЗабаланс.ОС КАК ПеремещениеОСОС
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка В (&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПП,
	|	ОсновноеСредство
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;			   
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеОСЗабаланс.ПФ_MXL_ДА4");

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 10;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 10;
	ТабДокумент.ПолеСправа         = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб		   = Истина;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПеремещениеОС_ДА4";
	
	// получим области макета
	Шапка 			 		  = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 		  = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 		  = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ИтогоТаблицы              = Макет.ПолучитьОбласть("ИтогоТаблицы");
	Итого 			 		  = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона		  = Макет.ПолучитьОбласть("ОборотнаяСторона");
	МОЛ				 		  = Макет.ПолучитьОбласть("МОЛ");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");

	Пока ШапкаДокумента.Следующий() Цикл

		
		ВедетсяАналитическийУчет = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(ШапкаДокумента.ДатаДокумента) 
			Или УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(ШапкаДокумента.ДатаДокумента);
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно сформировать печатную форму ""ДА-4"" документа ""%1"", так как табличная часть ""ОС"" в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШапкаДокумента.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ШапкаДокумента.Ссылка);
			Продолжить;			
		КонецЕсли;

		СтруктурноеПодразделениеОтправительДляПечати = ШапкаДокумента.СтруктурноеПодразделение;
		СтруктурноеПодразделениеПолучательДляПечати  = ШапкаДокумента.СтруктурноеПодразделениеПолучатель;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);

		//вывод шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.ДатаДокумента);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.ДатаДокумента);
		
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.ДатаДокумента, "ru");
		Шапка.Параметры.НомерДокумента		     = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		

		Стр 						  = """_____"""+"________________________ 20_____"+НСтр("ru = 'года'");
		Шапка.Параметры.ДатаДокумента = ?(ЗначениеЗаполнено(ШапкаДокумента.ДатаДокумента), Формат(ШапкаДокумента.ДатаДокумента, "ДФ=""дд ММММ гггг 'года'"""), Стр);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	    		
		ТЧОСДопДанные = Новый ТаблицаЗначений;
		ТЧОСДопДанные.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов(МассивТипов),"ОсновноеСредство");
		ТЧОСДопДанные.Колонки.Добавить("Получатель"		 ,,"Получатель");
		ТЧОСДопДанные.Колонки.Добавить("Сдатчик"		 ,,"Сдатчик");
		ТЧОСДопДанные.Колонки.Добавить("МОЛПринял"		 ,,"МОЛПринял");
		ТЧОСДопДанные.Колонки.Добавить("МОЛСдатчик"		 ,,"МОЛСдатчик");
				
		Если НЕ ВыборкаСтрокОС = Неопределено Тогда
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				Стр = ТЧОСДопДанные.Добавить();
				Стр.ОсновноеСредство = ВыборкаСтрокОС.ОсновноеСредство;
				Стр.Получатель 		 = ВыборкаСтрокОС.Получатель;
				Стр.Сдатчик 		 = ВыборкаСтрокОС.Сдатчик;
				Стр.МОЛПринял 		 = ВыборкаСтрокОС.МОЛПринял;
				Стр.МОЛСдатчик 		 = ВыборкаСтрокОС.МОЛСдатчик;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыборкаСтрокОС.Сбросить();
				
		Если ВедетсяАналитическийУчет Тогда 
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Дата"		   , ШапкаДокумента.ДатаДокумента);
			Запрос.УстановитьПараметр("СчетОс"		   , ПланыСчетов.Типовой.ОсновныеСредства);
			Запрос.УстановитьПараметр("СчетАмортизации", ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
			Запрос.УстановитьПараметр("МассивОС"       , ТЧОСДопДанные.ВыгрузитьКолонку("ОсновноеСредство"));
			
			ВидыСубконтоОС = Новый Массив;
			ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
			Запрос.УстановитьПараметр("ВидыСубконтоОС" , ВидыСубконтоОС);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТиповойОстатки.Субконто1 КАК ОсновноеСредство,
			               |	ТиповойОстатки.СуммаОстатокДт КАК НачальнаяСтоимость,
			               |	0 КАК СуммаАмортизации
			               |ПОМЕСТИТЬ ВТ_Остатки
			               |ИЗ
			               |	РегистрБухгалтерии.Типовой.Остатки(&Дата, Счет = &СчетОС, &ВидыСубконтоОС, Субконто1 В (&МассивОС)) КАК ТиповойОстатки
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	ТиповойОстатки.Субконто1,
			               |	0,
			               |	ТиповойОстатки.СуммаОстатокКт
			               |ИЗ
			               |	РегистрБухгалтерии.Типовой.Остатки(&Дата, Счет = &СчетАмортизации, &ВидыСубконтоОС, Субконто1 В (&МассивОС)) КАК ТиповойОстатки
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_Остатки.ОсновноеСредство КАК ОсновноеСредство,
			               |	СУММА(ВТ_Остатки.НачальнаяСтоимость) КАК НачальнаяСтоимость,
			               |	СУММА(ВТ_Остатки.СуммаАмортизации) КАК СуммаАмортизации
			               |ИЗ
			               |	ВТ_Остатки КАК ВТ_Остатки
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВТ_Остатки.ОсновноеСредство
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ОсновноеСредство
			               |АВТОУПОРЯДОЧИВАНИЕ";
			
			ТаблицаОССуммы = Запрос.Выполнить().Выгрузить();
						
		КонецЕсли;
				
		Если ШапкаДокумента.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
			
			КолонкаПолучатель     = ТЧОСДопДанные.Колонки.Найти("Получатель");
			КолонкаСдатчик        = ТЧОСДопДанные.Колонки.Найти("Сдатчик");
			КолонкаСдатчик.Имя    = "";
			КолонкаПолучатель.Имя = "Сдатчик";
			КолонкаСдатчик.Имя    = "Получатель";
			
			КолонкаМОЛПолучатель     = ТЧОСДопДанные.Колонки.Найти("МОЛПринял");
			КолонкаМОЛ               = ТЧОСДопДанные.Колонки.Найти("МОЛСдатчик");
			КолонкаМОЛ.Имя           = "";
			КолонкаМОЛПолучатель.Имя = "МОЛСдатчик";
			КолонкаМОЛ.Имя           = "МОЛПринял";
			
		КонецЕсли;
		
		// сформируем список Подразделений сдатчиков
		ТаблицаСдатчик = ТЧОСДопДанные.Скопировать();
		ТаблицаСдатчик.Свернуть("Сдатчик");
		
		СтрокаСдатчик = "";
		Для Каждого Стр Из ТаблицаСдатчик Цикл
			Если СтрокаСдатчик = "" Тогда
				СтрокаСдатчик = СтрокаСдатчик + Стр.Сдатчик;
			Иначе	
				СтрокаСдатчик = СтрокаСдатчик + ", " + Стр.Сдатчик;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТаблицаСдатчик.Количество() <> 1 Тогда
			Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеОтправительДляПечати Тогда
				СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправительДляПечати.Пустая(), СтруктурноеПодразделениеОтправительДляПечати.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик); 
			КонецЕсли;					
		Иначе
			Если Стр.Сдатчик <> СтруктурноеПодразделениеОтправительДляПечати Тогда
				СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправительДляПечати.Пустая(), СтруктурноеПодразделениеОтправительДляПечати.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик)
			КонецЕсли;
		КонецЕсли;
		
		Шапка.Параметры.Сдатчик = СтрокаСдатчик;
        	
		
		// сформируем список Подразделений получателей
		ТаблицаПолучатель = ТЧОСДопДанные.Скопировать();
		ТаблицаПолучатель.Свернуть("Получатель");
		
		СтрокаПолучатель = "";
		
		Для Каждого Стр Из ТаблицаПолучатель Цикл
			Если СтрокаПолучатель = "" Тогда
				СтрокаПолучатель = СтрокаПолучатель + Стр.Получатель;
			Иначе	
				СтрокаПолучатель = СтрокаПолучатель + ", " + Стр.Получатель;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТаблицаПолучатель.Количество() <> 1 Тогда
			Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеПолучательДляПечати Тогда
				СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучательДляПечати.Пустая(), СтруктурноеПодразделениеПолучательДляПечати.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель); 
			КонецЕсли;					
		Иначе
			Если Стр.Получатель <> СтруктурноеПодразделениеПолучательДляПечати Тогда
				СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучательДляПечати.Пустая(), СтруктурноеПодразделениеПолучательДляПечати.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель);
			КонецЕсли;
		КонецЕсли;
		
		Шапка.Параметры.Получатель = СтрокаПолучатель;
		
		ДанныеОтветственный			  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ШапкаДокумента.Ответственный, ШапкаДокумента.ДатаДокумента);
		Шапка.Параметры.Ответственный = ДанныеОтветственный.Представление;
		
		ТабДокумент.Вывести(Шапка);
				
		//вывод заголовка таблицы
		Валюта							  = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы.Параметры.Валюта = Валюта;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ДокументПриобретенияБУ = Неопределено;
		ДатаПриобретения 	   = '00010101';
		ИтогоПоДокументу 	   = 0;

		//Для Каждого СтрокаОС ИЗ ТаблицаОС Цикл
		Пока ВыборкаСтрокОС.Следующий() Цикл
	
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;	
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокОС);
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокОС.НаименованиеОС) Тогда 
				
				СтрокаТаблицы.Параметры.НаименованиеОС = ВыборкаСтрокОС.ОсновноеСредство;
				
			КонецЕсли;
			
			СтрокаТаблицы.Параметры.ЕдиницаИзмерения = НСтр("ru = 'шт'");
			СтрокаТаблицы.Параметры.Количество 		 = 1;
			
			Если ВедетсяАналитическийУчет Тогда 
				
				Стоимость = 0;
				НайденнаяСтрока = ТаблицаОССуммы.Найти(ВыборкаСтрокОС.ОсновноеСредство, "ОсновноеСредство");
				Если НайденнаяСтрока <> Неопределено Тогда

					Стоимость 					  = НайденнаяСтрока.НачальнаяСтоимость - НайденнаяСтрока.СуммаАмортизации;
					СтрокаТаблицы.Параметры.Цена  = Стоимость;
					СтрокаТаблицы.Параметры.Всего = Стоимость;
					
				КонецЕсли;
								
			Иначе 
				
				Стоимость 								 = ВыборкаСтрокОС.НачальнаяСтоимость - ВыборкаСтрокОС.СуммаАмортизации;
				СтрокаТаблицы.Параметры.Цена             = Стоимость;
				СтрокаТаблицы.Параметры.Всего            = Стоимость;
				
			КонецЕсли;
			
			СтрокаТаблицы.Параметры.ИнвНомер		 = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, ШапкаДокумента.ДатаДокумента).ИнвентарныйНомер;
			
			ИтогоПоДокументу = ИтогоПоДокументу + Стоимость;
			
			УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.Поступило, ШапкаДокумента.ДатаДокумента, ДокументПриобретенияБУ,  ДатаПриобретения);
			Если ДатаПриобретения = '00010101' Тогда
				//если не приобретали, может тогда сами выпускали, в этом случае выводим дату выпуска из карточки ОС
				СтрокаТаблицы.Параметры.ДатаПриобретения = ВыборкаСтрокОС.ДатаВыпуска; 
			Иначе	
				СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения; 
			КонецЕсли;	
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;	
		
		// выведем итоговую строку
		Итого.Параметры.Валюта = Валюта;
		
		КоличествоСтрокОС = ВыборкаСтрокОС.Количество();
		Если КоличествоСтрокОС <> 0 Тогда
			Итого.Параметры.КоличествоНаименований = СтрЗаменить(ЧислоПрописью(КоличествоСтрокОС, "L=ru" ,",,,,,,,,0"), "00", "");
			Итого.Параметры.ИтогоВсегоПрописью     = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоПоДокументу, Валюта);
		Иначе
			Итого.Параметры.КоличествоНаименований = "";
			Итого.Параметры.ИтогоВсегоПрописью     = "";
		КонецЕсли;
		
		ИтогоТаблицы.Параметры.ИтогоКоличество = КоличествоСтрокОС;
		ИтогоТаблицы.Параметры.ИтогоВсего	   = ИтогоПоДокументу;
		
		ТабДокумент.Вывести(ИтогоТаблицы);
		
		ТабДокумент.Вывести(Итого);
       		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОборотнаяСторона);
		
		// вывод МОЛ
		СписокМОЛСдатчик = ТЧОСДопДанные.Скопировать();
		СписокМОЛСдатчик.Свернуть("МОЛСдатчик");
		
		СписокМОЛ = СписокМОЛСдатчик.ВыгрузитьКолонку("МОЛСдатчик");
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.ДатаДокумента);
		
		ВыводитьЗаголовок = Истина;
		
		Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			МОЛ.Параметры.ЗаголовокМОЛ		 = ?(ВыводитьЗаголовок, НСтр("ru = 'Сдал:'"), "");
			МОЛ.Параметры.Должность			 = СтрокаМОЛ.Должность;
			МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
			
			ТабДокумент.Вывести(МОЛ);
			
			ВыводитьЗаголовок = Ложь;
		КонецЦикла;	
		
		// Выведем материално-оветственного лица, принявшего ОС
		СписокМОЛПринял = ТЧОСДопДанные.Скопировать();
		СписокМОЛПринял.Свернуть("МОЛПринял");
		
		СписокМОЛ = СписокМОЛПринял.ВыгрузитьКолонку("МОЛПринял");
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.ДатаДокумента);
		
		ВыводитьЗаголовок = Истина;
		
		Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			МОЛ.Параметры.ЗаголовокМОЛ		 = ?(ВыводитьЗаголовок, НСтр("ru = 'Принял:'"), "");
			МОЛ.Параметры.Должность			 = СтрокаМОЛ.Должность;
			МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
			
			ТабДокумент.Вывести(МОЛ);
			
			ВыводитьЗаголовок = Ложь;
		КонецЦикла;	
		// Выведем подпись бухгалтера
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.ДатаДокумента);
		
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"						  , ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	ВедетсяАналитическийУчетОСПоМОЛ 				= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитическийУчетОСПоПодразделениям 		= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
	РанееВедетсяАналитическийУчетОСПоМОЛ 			= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(НачалоДня(Реквизиты.Период) - 1);
	РанееВедетсяАналитическийУчетОСПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(НачалоДня(Реквизиты.Период) - 1);

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль ИЛИ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаРаботыСоСтруктурнымиПодразделениями    = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитическийУчетОСПоМОЛ				   , "ВедетсяАналитическийУчетОСПоМОЛ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитическийУчетОСПоПодразделениям	   , "ВедетсяАналитическийУчетОСПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(РанееВедетсяАналитическийУчетОСПоМОЛ		   , "РанееВедетсяАналитическийУчетОСПоМОЛ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(РанееВедетсяАналитическийУчетОСПоПодразделениям, "РанееВедетсяАналитическийУчетОСПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					   , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом   , "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаРаботыСоСтруктурнымиПодразделениями   , "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ВедетсяАналитическийУчетОС = ВедетсяАналитическийУчетОСПоМОЛ ИЛИ ВедетсяАналитическийУчетОСПоПодразделениям;
	
	РазныеСП = ?(Реквизиты.СтруктурноеПодразделениеОтправитель <> Реквизиты.СтруктурноеПодразделениеПолучатель, Истина, Ложь);
	
	Налогоплательщик = Реквизиты.Организация;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделениеОтправитель,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("СинонимОС"  				  , НСтр("ru = 'ОС'"));
	Запрос.УстановитьПараметр("Организация"				  , Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период"   				  , Реквизиты.Период);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"  , Реквизиты.СтруктурноеПодразделениеОтправитель); 
	Запрос.УстановитьПараметр("СчетРезерваПереоценки"	  , ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств);
	Запрос.УстановитьПараметр("Налогоплательщик"		  , Налогоплательщик);
	Запрос.УстановитьПараметр("РазныеСП"				  , РазныеСП);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОС", ВедетсяАналитическийУчетОС);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);	
	Запрос.УстановитьПараметр("СостоянияФА", СостоянияФА);		
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаМестонахождениеОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц)
					+ ТекстЗапросаГрафикиАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаПараметрыАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаПервоначальныеСведенияОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц)
					+ ТекстЗапросаСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаСчетаУчетаОС(НомераТаблиц)
					+ ТекстЗапросаРезервыПоПереоценкеОС(НомераТаблиц)
					+ ТекстЗапросаОстаткиПереоценокВА(НомераТаблиц)
					+ ТекстЗапросаОбъектыЗемельногоНалога(НомераТаблиц)
					+ ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц)
					+ ТекстЗапросаОбъектыТранспортногоНалога(НомераТаблиц)
					+ ТекстЗапросаСтоимостьОСБУ(НомераТаблиц)
					+ ТекстЗапросаНакопленнаяАмортизацияОСБУ(НомераТаблиц)
					+ УчетОС.ТекстЗапросаРаспределениеАмортизацииПоНаправлениямРегл(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
		
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл.ЗаполнитьЗначения(Реквизиты.СтруктурноеПодразделениеОтправитель, "СтруктурноеПодразделение");
	ПараметрыПроведения.ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл.ЗаполнитьЗначения(Реквизиты.СтруктурноеПодразделениеОтправитель, "КорСтруктурноеПодразделение");
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты"				 , НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""ПеремещениеОС"" КАК ВидДокумента,
	               |	Реквизиты.Ссылка КАК Регистратор,
				   |	Реквизиты.Ссылка КАК Ссылка,
	               |	Реквизиты.Дата КАК Период,
				   |	Реквизиты.Дата КАК Дата,
	               |	Реквизиты.Номер КАК Номер,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СобытиеОС КАК СобытиеОС,
	               |	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
	               |	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС КАК НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,
	               |	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	               |	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоМОЛ,
	               |	ЛОЖЬ КАК РанееВедетсяАналитическийУчетОСПоПодразделениям,
	               |	ЛОЖЬ КАК РанееВедетсяАналитическийУчетОСПоМОЛ,
	               |	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	               |	НЕОПРЕДЕЛЕНО КАК ВидРегламентнойОперации,
	               |	""ОС"" КАК НомерЖурнала,
	               |	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	               |	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	               |	НЕОПРЕДЕЛЕНО КАК Содержание
	               |ПОМЕСТИТЬ Реквизиты
	               |ИЗ
	               |	Документ.ПеремещениеОСЗабаланс КАК Реквизиты
	               |ГДЕ
	               |	Реквизиты.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реквизиты.ВидДокумента,
	               |	Реквизиты.Регистратор,
	               |	Реквизиты.Период,
	               |	Реквизиты.Номер,
	               |	Реквизиты.Организация,
	               |	Реквизиты.СобытиеОС,
	               |	Реквизиты.СтруктурноеПодразделениеОтправитель,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель,
	               |	Реквизиты.СтруктурноеПодразделение,
	               |	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,
	               |	Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям,
	               |	Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ,
	               |	Реквизиты.РанееВедетсяАналитическийУчетОСПоПодразделениям,
	               |	Реквизиты.РанееВедетсяАналитическийУчетОСПоМОЛ,
	               |	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	               |	Реквизиты.ВидРегламентнойОперации,
	               |	Реквизиты.НомерЖурнала,
	               |	Реквизиты.НеобходимостьОтраженияВНУ,
	               |	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом,
	               |	Реквизиты.Содержание
	               |ИЗ
	               |	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
 	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.АмортизацияБУ,
	|	ТаблицаОС.АмортизацияЗаМесяцБУ,
	|	ТаблицаОС.МОЛОрганизации,
	|	ТаблицаОС.НовыйМОЛОрганизации,
	|	ТаблицаОС.НовыйПодразделениеОрганизации,
	|	ТаблицаОС.ПодразделениеОрганизации,
	|	ТаблицаОС.СтоимостьБУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.ПеремещениеОСЗабаланс.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаМестонахождениеОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСМестонахождениеОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МестонахождениеОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС КАК НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НовыйМОЛОрганизации КАК МОЛ,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК Местонахождение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ 
	|	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОССобытияОСОрганизаций", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СобытияОСОрганизаций"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.Номер КАК НомерДокумента,
	|	0 КАК СуммаЗатратБУ,
	|	Реквизиты.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаГрафикиАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСГрафикиАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ГрафикиАмортизацииОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСНачислениеАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""НачислениеАмортизацииОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаПараметрыАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСПараметрыАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПараметрыАмортизацииОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаПервоначальныеСведенияОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСПервоначальныеСведенияОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПервоначальныеСведенияОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Активность,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОССостоянияОСОрганизаций", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СостоянияОСОрганизаций"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	СостоянияОСОрганизацийСрезПоследних.Регистратор,
	|	СостоянияОСОрганизацийСрезПоследних.НомерСтроки,
	|	СостоянияОСОрганизацийСрезПоследних.Активность,
	|	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство,
	|	СостоянияОСОрганизацийСрезПоследних.Организация,
	|	СостоянияОСОрганизацийСрезПоследних.ДатаСостояния,
	|	СостоянияОСОрганизацийСрезПоследних.Состояние КАК СостояниеОС,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СостоянияОСОрганизацийСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОССпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки КАК Номер,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСчетаУчетаОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОССчетаУчетаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СчетаУчетаОС"" КАК ИмяСписка,
	|	Реквизиты.Период КАК Период,
	|	СчетаУчетаОССрезПоследних.Регистратор,
	|	СчетаУчетаОССрезПоследних.НомерСтроки,
	|	СчетаУчетаОССрезПоследних.Активность,
	|	СчетаУчетаОССрезПоследних.ОсновноеСредство,
	|	СчетаУчетаОССрезПоследних.Организация,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоПриобретению,
	|	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоРеализации,
	|	СчетаУчетаОССрезПоследних.СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииБУ,
	|	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаЗатратПоМодернизацииБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаНУ,
	|	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииНУ,
	|	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииНУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииНУ,
	|	СчетаУчетаОССрезПоследних.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	СчетаУчетаОССрезПоследних.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОССрезПоследних,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	| 	ГДЕ &РазныеСП = ИСТИНА";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаРезервыПоПереоценкеОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСРезервыПоПереоценкеОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РезервыПоПереоценкеОС"" КАК ИмяСписка,
	|	ТиповойОстатки.Субконто1,
	|	ТиповойОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|		&Период,
	|		Счет = &СчетРезерваПереоценки,
	|		,
	|		Организация = &Организация И СтруктурноеПодразделение  = &СтруктурноеПодразделение
	|			И Субконто1 В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ТиповойОстатки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаОстаткиПереоценокВА(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСОстаткиПереоценокВА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ОстаткиПереоценокВА"" КАК ИмяСписка,
	|	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	|	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	|	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	|		&Период,
	|		ВнеоборотныйАктив В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)
	|		    И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаОбъектыЗемельногоНалога(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСОбъектыЗемельногоНалога", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ОбъектыЗемельногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК Местонахождение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	ЕСТЬNULL(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьНалог
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	|				&Период,
	|				Налогоплательщик = &Налогоплательщик 
	|					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	|					И ОбъектНалогообложения В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ОбъектыЗемельногоНалогаСрезПоследних
	|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСОбъектыИмущественногоНалога", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ОбъектыИмущественногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК Местонахождение,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК СтруктурнаяЕдиницаИмущественногоНалога,
	|	ЕСТЬNULL(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьНалог
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	|				&Период,
	|				Налогоплательщик = &Налогоплательщик 
	|					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	|					И ОбъектНалогообложения В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаОбъектыТранспортногоНалога(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСОбъектыТранспортногоНалога", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ОбъектыТранспортногоНалога"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК Местонахождение,
	|	ТаблицаОС.НовыйПодразделениеОрганизации КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ЕСТЬNULL(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьНалог
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	|				&Период,
	|				Налогоплательщик = &Налогоплательщик 
	|					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	|					И ОбъектНалогообложения В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ОбъектыТранспортногоНалогаСрезПоследних
	|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСтоимостьОСБУ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОССтоимостьОСБУ", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СтоимостьОСБУ"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаОС.ПодразделениеОрганизации,
    |	ТаблицаОС.МОЛОрганизации,
    |	ТаблицаОС.НовыйПодразделениеОрганизации,
	|	ТаблицаОС.НовыйМОЛОрганизации,
	|	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ,
	|	Реквизиты.РанееВедетсяАналитическийУчетОСПоПодразделениям,
	|	Реквизиты.РанееВедетсяАналитическийУчетОСПоМОЛ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
    |				&Период,
    |				Организация = &Организация
    |					И ОсновноеСредство В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОССрезПоследних
    |		ПО ТаблицаОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаНакопленнаяАмортизацияОСБУ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПеремещениеОСНакопленнаяАмортизацияОСБУ", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""НакопленнаяАмортизацияОСБУ"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаОС.АмортизацияБУ КАК АмортизацияБУ,
	|	ТаблицаОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ,
	|	ТаблицаОС.ПодразделениеОрганизации,
    |	ТаблицаОС.МОЛОрганизации,
    |	ТаблицаОС.НовыйПодразделениеОрганизации,
	|	ТаблицаОС.НовыйМОЛОрганизации,
	|	Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ,
	|	Реквизиты.РанееВедетсяАналитическийУчетОСПоПодразделениям,
	|	Реквизиты.РанееВедетсяАналитическийУчетОСПоМОЛ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
    |				&Период,
    |				Организация = &Организация
    |					И ОсновноеСредство В (ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОССрезПоследних
    |		ПО ТаблицаОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции


#КонецЕсли

