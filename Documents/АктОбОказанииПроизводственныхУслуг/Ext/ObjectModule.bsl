#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Если Не ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРабот) Тогда		
		СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;		
	КонецЕсли;                                                                                              	
	
	СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
	СчетЗатратНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетЗатратБУ, Дата, ПланыСчетов.Налоговый.ОсновноеПроизводство);	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура();
	
	Если Услуги.Количество() > 0 Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");				
	КонецЕсли;
    
    Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
    
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата)
		ИЛИ НЕ УчитыватьКПН Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетДоходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетСписанияСебестоимостиНУ");
			
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		
	КонецЕсли;
	
	Если ОтложитьНачислениеНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОперацииРеализации");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если УчитыватьНДС Тогда
		ПараметрыПострочнойПроверки.Очистить();
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНДС", Истина);
		ПроверитьЗаполнениеТабличнойЧастиПострочно(Услуги, "Услуги", Отказ, ПараметрыПострочнойПроверки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРабот) Тогда		
		СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если СпособВыпискиАктовВыполненныхРабот <> Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа 
		И СпособВыпискиАктовВыполненныхРабот <> Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ Тогда
		ДатаПодписанияГЗ = Дата;
	КонецЕсли;
	
	Если ОтложитьНачислениеНДС Тогда
		ДатаПодписанияГЗ = Дата;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Свойство ЗакрыватьФорму используется при проведении из формы документа
	Если ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ДополнительныеСвойства.Удалить("ЗакрыватьФорму");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПодписанияГЗ) И СпособВыпискиАктовВыполненныхРабот <> Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
			
			Если СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ Тогда
				Если ОтложитьНачислениеНДС Тогда
					ТекстСообщения = НСтр("ru = 'Проведение документа, выставленного на портале ИС ЭСФ возможно только после заполнения ""Даты дохода"". Документ будет записан без проведения'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Проведение документа, выставленного на портале ИС ЭСФ возможно только после заполнения ""Даты подписания"". Документ будет записан без проведения'");
				КонецЕсли;
			ИначеЕсли СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа Тогда
				Если ОтложитьНачислениеНДС Тогда
					ТекстСообщения = НСтр("ru = 'Проведение документа, выставленного на портале Гос.закупа возможно только после заполнения ""Даты дохода"". Документ будет записан без проведения'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Проведение документа, выставленного на портале Гос.закупа возможно только после заполнения ""Даты подписания"". Документ будет записан без проведения'");
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаПодписанияГЗ", "Объект", Ложь);
			ДополнительныеСвойства.Вставить("ЗакрыватьФорму", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);
	
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УчетНДСИАкциза.ДобавитьОбновитьСведенияПоАктамВыполненныхРабот(ЭтотОбъект); 		

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.АктОбОказанииПроизводственныхУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	// Таблицы выручки от реализации: собственных товаров и услуг
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
						
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", "АВ");
	Документы.АктОбОказанииПроизводственныхУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);
	
	ОпределятьДоходОтРеализацииПоКурсуАванса = УчетнаяПолитикаСервер.ОпределятьДоходОтРеализацииПоКурсуАванса(ПараметрыПроведения.Реквизиты[0].Организация, ПараметрыПроведения.Реквизиты[0].Период);
	Если ОпределятьДоходОтРеализацииПоКурсуАванса Тогда
		ТаблицаРеализацияТМЗ = УчетТоваров.ПодготовитьТаблицуРеализацияТМЗ(
			Неопределено, ТаблицыРеализация.СобственныеТоварыУслуги,
			ПараметрыПроведения.Реквизиты, Отказ);
	Иначе
		ТаблицаРеализацияТМЗ = УчетТоваров.ПодготовитьТаблицуРеализацияТМЗ(
			Неопределено, ПараметрыПроведения.РеализацияТаблицаДокумента,
			ПараметрыПроведения.Реквизиты, Отказ);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияРеализацияТМЗ(ТаблицаРеализацияТМЗ, Движения, Отказ);
		
	УчетНДСИАкциза.СформироватьДвиженияРеализацияАктивовУслуг(ПараметрыПроведения.ТаблицаНДС, ПараметрыПроведения.ТаблицаУчастникиСовместнойДеятельности,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(
		ПараметрыПроведения.ПлановаяСтоимостьУслугТаблица, 
		ПараметрыПроведения.ПлановаяСтоимостьУслугРеквизиты, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускУслугТаблицаБУ,"БухгалтерскийУчет", 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускУслугТаблицаНУ,"НалоговыйУчет", 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");

		// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаПодписанияГЗ) Тогда
		ДатаПодписанияГЗ = Дата(1,1,1);
	КонецЕсли; 
	
	ОтложитьНачислениеНДС = Ложь;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьДокументПоСчетуНаОплатуПокупателю(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьДокументПоСчетФактураВыданный(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьДокументПоАктОбОказанииПроизводственныхУслуг(ЭтотОбъект, Основание);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , Основание);
	
	Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаРасчетовСКонтрагентом(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ПараметрыПроверки)
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНДС") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНДС И НЕ ОтложитьНачислениеНДС
			И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) <> 0 И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧасти);
			Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчетаНДСПоРеализации";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
		КонецЕсли;	
		
		// Проверка на наличие услуг в таблице.
		Если  ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "Услуга") Тогда
			ТекстСообщения = НСтр("ru = 'Указана номенклатура, не являющаяся услугой.'");
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность",
			НСтр("ru = 'Номенклатура'"), СтрокаТабличнойЧасти.НомерСтроки, , ТекстСообщения);
			Поле = ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецЕсли

