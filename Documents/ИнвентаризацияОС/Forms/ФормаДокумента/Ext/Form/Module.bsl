////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	Иначе 
		ЗаполнитьИнвентарныеНомераОС();
		ЗаполнитьМОЛОС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьИнвентарныеНомераОС();
	ЗаполнитьМОЛОС();
	
	Для каждого Строка Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда 
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ФизЛицо", ВыбранноеЗначение);
		
		СтрокаТабличнойЧасти = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаТабличнойЧасти.Количество() <> 0 Тогда
			
			ТекстСообщения = НСтр("ru='Физическое лицо <%1> уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранноеЗначение);
		
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ИнвентаризационнаяКомиссия[" + Элементы.ИнвентаризационнаяКомиссия.ТекущаяСтрока + "].ФизЛицо", "Объект");
			
		Иначе
			
			НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
			
			НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
			Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
				НоваяСтрока.Председатель = Истина;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ИнвентаризацияОС", ПараметрыЗаписи, Объект.Ссылка); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "ТерминалСбораДанных";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Евгений+
	СолМол();
	//Евгений-
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""инвентаризация ос"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ 						= Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство 				= СтрокаТЧ.ОсновноеСредство;
	СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;

	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
		СтрокаТЧ.МОЛ			  = "";
	Иначе
		
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
		
		СтруктураСведений 					= СведенияОбМОЛОС(ОсновноеСредство, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Дата, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		СтрокаТЧ.МОЛ 						= СтруктураСведений.МОЛ;
		МаксПериодПервоначальныхСведенийМОЛ	= Макс(МаксПериодПервоначальныхСведенийМОЛ, СтруктураСведений.Период);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование = Истина Тогда
		СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеФактическоеПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеФактическое Тогда
		ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьФактическая = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеПоДаннымУчетаПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета Тогда
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	Если Элементы.ОС.ТекущиеДанные <> Неопределено Тогда
		РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Физическое лицо %1 уже включено в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны!'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	Объект.ОС.Очистить();

	КлючеваяОперация = "Документ ""инвентаризация ос"" (заполнение по остаткам)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	

	ЗаполнитьПоОстаткамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчета(Команда)
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "Документ ""инвентаризация ос"" (заполнение данными учета)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	ЗаполнитьДанныеУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанные(Команда)
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл
		
		СтрокаОС.СтоимостьФактическая = СтрокаОС.СтоимостьПоДаннымУчета;
		СтрокаОС.НаличиеФактическое   = СтрокаОС.НаличиеПоДаннымУчета;
		СтрокаОС.НедостачаКоличество  = 0;
		СтрокаОС.НедостачаСумма       = 0;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора",,ЭтаФорма,Истина);
	ФормаВыбора.Открыть();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗагрузитьДанныеИзТСД", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Документ был изменен, записать изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Результат")
			И Результат.Результат 
			И Результат.Свойство("ТаблицаТоваров")  Тогда
		
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСДЗавершение(Результат, Параметры) Экспорт
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередВыгрузитьДанныеВТСДЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Документ был изменен, записать изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе

		МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(
			Новый ОписаниеОповещения("ВыгрузитьДанныеВТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор,  МассивОсновныхСредств(), , Истина);
			
		КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция МассивОсновныхСредств()
	
	МассивВыгрузки = Новый Массив();
	
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		
		Если СтрокаТЧ.НаличиеПоДаннымУчета Тогда
			ВыгружаемоеОсновноеСредство = Новый Структура;
			ИнформацияОС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ОсновноеСредство, "Штрихкод, Наименование");
			
			Если Не ЗначениеЗаполнено(ИнформацияОС.Штрихкод) Тогда
				ТекстСообщения = НСтр("ru='В строке %1 у основного средства ""%2"" не заполнен штрихкод. Основное средство не будет выгружено!!!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				Продолжить;
			КонецЕсли;	
			ВыгружаемоеОсновноеСредство.Вставить("Штрихкод"			, ИнформацияОС.Штрихкод);
			ВыгружаемоеОсновноеСредство.Вставить("Наименование"		, ИнформацияОС.Наименование);
			
			МассивВыгрузки.Добавить(ВыгружаемоеОсновноеСредство);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыгрузки;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Результат = ОбработатьШтрихкодыСервер(ДанныеШтрихкодов);
	
	ОбработатьНеНайденыеОС(Результат.МассивНенайденыхОС);
	ОбработатьНайденыеОС(Результат.МассивНайденыхОС);
	ОбработатьДобавлениеОС(Результат.МассивДобавляемыхОС);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОС(МассивДобавляемыхОС)
	
	Для Индекс = 0 по МассивДобавляемыхОС.ВГраница() Цикл
		Элемент = МассивДобавляемыхОС[Индекс];
		
		СтрокаТЧ = Объект.ОС.Добавить();
		
		СтрокаТЧ.ОсновноеСредство 		= Элемент;
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;
		СтрокаТЧ.НаличиеФактическое		= Истина;
		
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(Элемент, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;

		СтруктураСведений 					= СведенияОбМОЛОС(Элемент, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Дата, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
		СтрокаТЧ.МОЛ 						= СтруктураСведений.МОЛ;
		
		РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ);
		
		ТекстСообщения = НСтр("ru='В документ добавлена строка с основным средством: ""%1"" !!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент); 
		Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНеНайденыеОС(МассивНенайденыхОС)
	
	Для Индекс = 0 по МассивНенайденыхОС.ВГраница() Цикл
		Элемент = МассивНенайденыхОС[Индекс];
		ТекстСообщения = НСтр("ru='Основное средство со штрихкодом: %1 не найдено!!!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНайденыеОС(МассивНайденыхОС)
	
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		Если МассивНайденыхОС.Найти(СтрокаТЧ.НомерСтроки) = Неопределено 
				И СтрокаТЧ.НаличиеФактическое Тогда
				
			СтрокаТЧ.НаличиеФактическое 	= Ложь;	
			СтрокаТЧ.СтоимостьФактическая 	= 0;
			РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ);
			
			ТекстСообщения = НСтр("ru='В строке %1 у основного средства: ""%2"" снято фактическое наличие!!!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ОсновноеСредство); 
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", СтрокаТЧ.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
	
		ИначеЕсли МассивНайденыхОС.Найти(СтрокаТЧ.НомерСтроки) <> Неопределено Тогда
			СтрокаТЧ.НаличиеФактическое		= Истина;
			СтрокаТЧ.СтоимостьФактическая 	= СтрокаТЧ.СтоимостьПоДаннымУчета;
			
			РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВремТаб(МенеджерВремТаб,ИмяВремтаб ="") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВремТаб КАК ВремТаб";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВремТаб",ИмяВремтаб); 

	ТЗ = Запрос.Выполнить().Выгрузить(); 

	Возврат ТЗ; 

КонецФункции

&НаСервере
Функция ОбработатьШтрихкодыСервер(ДанныеШтрихкодов)
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТчШтрихкодов.Штрихкод
	|ПОМЕСТИТЬ вт_Штрихкода
	|ИЗ
	|	&ТчШтрихкодов КАК ТчШтрихкодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОСОС.ОсновноеСредство,
	|	ИнвентаризацияОСОС.ОсновноеСредство.Штрихкод КАК Штрихкод,
	|	ИнвентаризацияОСОС.НомерСтроки
	|ПОМЕСТИТЬ вт_ОСДокумента
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вт_ОС.Штрихкод, """") КАК Штрихкод,
	|	ЕСТЬNULL(ОсновныеСредства.Ссылка, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК ОсновноеСредствоФакт,
	|	ЕСТЬNULL(вт_ОСДокумента.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК ОсновноеСредствоУчет,
	|	ЕСТЬNULL(вт_ОСДокумента.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	вт_Штрихкода КАК вт_ОС
	|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ОСДокумента КАК вт_ОСДокумента
	|		ПО вт_ОС.Штрихкод = вт_ОСДокумента.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО вт_ОС.Штрихкод = ОсновныеСредства.Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументСсылка"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("ТчШтрихкодов"	, ПолучитьТаблицуШтрихкодов(ДанныеШтрихкодов));
	
	Результат = Запрос.Выполнить();
	ВыборкаЗапроса = Результат.Выбрать();
	
	МассивДобавляемыхОС = Новый Массив;
	МассивНенайденыхОС	= Новый Массив;
	МассивНайденыхОС	= Новый Массив;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.НомерСтроки = 0 и ЗначениеЗаполнено(ВыборкаЗапроса.ОсновноеСредствоФакт) Тогда
			МассивДобавляемыхОС.Добавить(ВыборкаЗапроса.ОсновноеСредствоФакт);
		ИначеЕсли ВыборкаЗапроса.НомерСтроки = 0 Тогда
			МассивНенайденыхОС.Добавить(ВыборкаЗапроса.Штрихкод);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапроса.ОсновноеСредствоФакт) Тогда
			МассивНайденыхОС.Добавить(ВыборкаЗапроса.НомерСтроки);//ВыборкаЗапроса.ОсновноеСредствоФакт);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Результат = Новый Структура;
	Результат.Вставить("МассивДобавляемыхОС", МассивДобавляемыхОС);
	Результат.Вставить("МассивНенайденыхОС"	, МассивНенайденыхОС);
	Результат.Вставить("МассивНайденыхОС"	, МассивНайденыхОС);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуШтрихкодов(ДанныеШтрихкодов)
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихКод", ОбщегоНазначения.ОписаниеТипаСтрока(13));
	
	Для Каждого СтрокаМассива Из ДанныеШтрихкодов Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("Структура") 
				И СтрокаМассива.Свойство("Штрихкод") 
				И ЗначениеЗаполнено(СтрокаМассива.ШтрихКод) Тогда
			НоваяСтрокаТаблицаШтрихкодов = ТаблицаШтрихкодов.Добавить();
			НоваяСтрокаТаблицаШтрихкодов.ШтрихКод = СтрокаМассива.ШтрихКод;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаШтрихкодов;
	
КонецФункции	

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru = 'ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям");
	
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = НЕ НастройкиПользователя.УчетПоВсемОрганизациям;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущаяДатаДокумента = Объект.Дата;

	Для каждого Строка Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();
					
	ТаблицаНомеров = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьТаблицуИнвентарныхНомеровОС(
		ТаблицаОС,
		Объект.Организация,
		Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМОЛОС()

	ТаблицаОС = Объект.ОС.Выгрузить();
					
	ТаблицаМОЛ = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьТаблицуМОЛ(
		ТаблицаОС,
		Объект.Организация,
		Объект.СтруктурноеПодразделение,
		Объект.Дата,
		ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ"), "МОЛ");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений МОЛ
	ТаблицаМОЛ.Сортировать("Период");
	Если ТаблицаМОЛ.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийМОЛ = ТаблицаМОЛ[ТаблицаМОЛ.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийМОЛ = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)
	
	Возврат УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОбМОЛОС(ОсновноеСредство, Организация, СтруктурноеПодразделение, Дата, ПоддержкаРаботыСоСтруктурнымиПодразделениями)
	
	Возврат УправлениеВнеоборотнымиАктивамиСервер.СведенияОбМОЛОСЗ(ОсновноеСредство, Организация, СтруктурноеПодразделение, Дата, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеУчетаНаСервере()
	
	Документы.ИнвентаризацияОС.ЗаполнитьТабличнуюЧастьОС(Объект,ПоддержкаРаботыСоСтруктурнымиПодразделениями, "ПоДаннымУчета");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Документы.ИнвентаризацияОС.ЗаполнитьТабличнуюЧастьОС(Объект,ПоддержкаРаботыСоСтруктурнымиПодразделениями, "ПоОстаткам");
	
	ЗаполнитьИнвентарныеНомераОС();
	
	ЗаполнитьМОЛОС();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Местонахождение", 			Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство - %1 уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "ОС[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение,Объект.ПодразделениеОрганизации);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)
	
	РазницаПоНаличию   = Число(Строка.НаличиеФактическое) - Число(Строка.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = Строка.СтоимостьФактическая - Строка.СтоимостьПоДаннымУчета;

	Строка.ИзлишекКоличество = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
	Строка.НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
	Строка.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	Строка.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаличиеПоДаннымУчета");
	СтруктураРеквизитов.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СтоимостьПоДаннымУчета");
	СтруктураРеквизитов.Вставить("НаличиеФактическое");
	СтруктураРеквизитов.Вставить("СтоимостьФактическая");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	
	Для Каждого СтрокаОС Из Объект[ИмяТабличнойЧасти] Цикл
		Если СтрокаОС.НаличиеФактическое Тогда
			СтрокаОС.СтоимостьФактическая = СтрокаОС.СтоимостьПоДаннымУчета;
		Иначе
			СтрокаОС.СтоимостьФактическая = 0;
		КонецЕсли;
	КонецЦикла;
		
	Модифицированность = Истина;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗагрузитьДанныеИзТСД(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараментрыЗаписи = Новый Структура;
	ПараментрыЗаписи.Вставить("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЭтотОбъект.Записать(ПараментрыЗаписи);
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередВыгрузитьДанныеВТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараментрыЗаписи = Новый Структура;
	ПараментрыЗаписи.Вставить("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЭтотОбъект.Записать(ПараментрыЗаписи);
	
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(
		Новый ОписаниеОповещения("ВыгрузитьДанныеВТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор,  МассивОсновныхСредств(), , Истина);
	
КонецПроцедуры


//Евгений+
&НаКлиенте
Процедура СолидарноеМолСтрокаПриИзменении(Элемент)
	
	Объект.СолидарныеМол.Очистить();
	Для каждого текЗначение из СолидарноеМолСтрока цикл
		новСтрока = Объект.СолидарныеМол.Добавить();
		новСтрока.ФизЛицо=текЗначение.Значение;
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СолМол()
	
	СолидарноеМолСтрока.Очистить();
	Для каждого текСтрока из Объект.СолидарныеМол цикл
		СолидарноеМолСтрока.Добавить(текстрока.ФизЛицо);	
	Конеццикла;  
	
КонецПроцедуры

//Евгений-



