&НаКлиенте
Перем СинхронизируемыеТабличныеЧасти, ЭтоРедактированиеСтроки;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
	
	ПредупреждатьОРедактированияКомпонент = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
    ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец РедактированиеДокументовПользователей

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""расчет удержаний сотрудников организаций"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	РассчитатьДополнительныеСведенияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			
			Если Объект.ИсчисленныйЕП.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.ИсчисленныйЕП.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				НоваяСтрока.МесяцНалоговогоПериода = Объект.ПериодРегистрации;						
			КонецЕсли;
            
   			Если Объект.Удержания.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.Удержания.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
				МассивСотрудников = Новый Массив;
				МассивСотрудников.Добавить(ВыбранноеЗначение);
				
			КонецЕсли;

		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.ИсчисленныйЕП.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					НоваяСтрока 						= Объект.ИсчисленныйЕП.Добавить();	
					НоваяСтрока.ФизЛицо 				= СтрокаМассива;
					НоваяСтрока.МесяцНалоговогоПериода 	= Объект.ПериодРегистрации;						
				КонецЕсли;
				
            КонецЦикла;
            
            Если Объект.Удержания.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
                НоваяСтрока 						= Объект.Удержания.Добавить();	
                НоваяСтрока.ФизЛицо 				= СтрокаМассива;
                МассивСотрудников = Новый Массив;
                МассивСотрудников.Добавить(ВыбранноеЗначение);
            КонецЕсли;
            
        КонецЕсли;
        Если МассивСотрудников <> Неопределено Тогда
            ПолучитьПлановыеУдержанияСотрудникаНаСервере(МассивСотрудников);
        КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Объект.Дата);
	
	Если Формат(Объект.Дата, "ДФ = 'дд.ММ.гг'") < Формат(ПоследнийРабочийДеньМесяца, "ДФ = 'дд.ММ.гг'") 
		И Месяц(Объект.Дата) = Месяц(Объект.ПериодРегистрации) Тогда
		
		ТекстВопроса = НСтр("ru = 'Расчет единого платежа производится не последним рабочим днем месяца. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьДату", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоВсемСотрудникам(Команда)
	
	Если Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Автоматически заполнить документ можно только после его записи. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
						
	Иначе
	   ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением(КодВозвратаДиалога.Да, Неопределено);
   	КонецЕсли;
   	
КонецПроцедуры

&НаКлиенте
Процедура ПодборомСотрудников(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры

&НаКлиенте
Процедура ПодробноЕП(Команда)
	
	ОтображатьПодробностиРасчетаЕП = НЕ ОтображатьПодробностиРасчетаЕП;
	
	ОбработкаИзмененияПереключенияПодробностейРасчета(ЭтаФорма);
	Если ЕППодробностиРасчетаПрочитаны Тогда
		Возврат;
	Иначе
		РассчитатьДополнительныеСведенияНаСервере("ПодробноЕП");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Команда)
	
	ТеущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	ФизЛицоЕП = ?(ТеущиеДанные <> Неопределено, ТеущиеДанные.ФизЛицо, Неопределено);
	ПараметрыРасчета = Новый Структура("ФизЛицо, КомандаРасчета", ФизЛицоЕП, "РассчитатьРаботникаНаСервере(Параметры.ФизЛицо)");

	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьРаботникаНаСервере(ФизЛицоЕП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьУдержания(Команда)
	
	ПараметрыРасчета = Новый Структура("КомандаРасчета", "РассчитатьУдержанияНаСервере()");
	Если ПроверитьПроведениеИМодифицированность(ПараметрыРасчета) Тогда
		РассчитатьУдержанияНаСервере();
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИсчисленныйЕП

&НаКлиенте
Процедура ИсчисленныйЕПФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.ИсчисленныйЕП 
		// это открытие формы
		И НЕ ЭтаФорма.ТекущийЭлемент = Элементы.Дата Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ИсчисленныйЕП.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.ИсчисленныйЕП.ТекущиеДанные.ФизЛицо) И ТипЗнч(Элементы.ИсчисленныйЕП.ТекущиеДанные.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковЕПСписокЗавершениеВыбора", ЭтотОбъект);
		
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
				
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковЕПСписокЗавершениеВыбора", ЭтотОбъект);
		
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППриАктивизацииПоля(Элемент)
	
	Если ЭтоРедактированиеСтроки И ПредупреждатьОРедактированияКомпонент И СтрНайти(Элемент.ТекущийЭлемент.Имя, "Сумма") > 0 Тогда
		
		Элемент.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ИсчисленныйЕП.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйЕП.ТекущиеДанные.ФизЛицо;
		ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйЕП.ТекущиеДанные.МесяцНалоговогоПериода;
		
		Если СтрНайти(Элементы.ИсчисленныйЕП.ТекущийЭлемент.Имя, "Сумма") > 0 Тогда
			
			Если ПредупреждатьОРедактированияКомпонент Тогда
				
				Отказ = Истина;
			
				ТекстВопроса = НСтр("ru='Редактирование сумм в документе не рекомендуется. Ручные корректировки могут привести к отличиям при распределении суммы единого платежа на стороне Госкорпорации с данными учета информационной базы. Продолжить редактирование сумм документа?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРедактированиеСуммДокумента", ЭтотОбъект);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекущееФизЛицо_Контрагент 		= Неопределено;
		ТекущийМесяцНалоговогоПериода   = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППередУдалением(Элемент, Отказ)
	
	ТекущееФизЛицо_Контрагент		= Элементы.ИсчисленныйЕП.ТекущиеДанные.ФизЛицо;
	ТекущийМесяцНалоговогоПериода   = Элементы.ИсчисленныйЕП.ТекущиеДанные.МесяцНалоговогоПериода;
	
	ТекущееФизЛицо_Контрагент		= Неопределено;
	ТекущийМесяцНалоговогоПериода   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕППриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаОПВПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаВОСМСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаИПНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаСОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаООСМСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсчисленныйЕПСуммаОПВРПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	
	РассчитатьСуммыПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Удержания

&НаКлиенте
Процедура УдержанияФизЛицоПриИзменении(Элемент)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтаФорма.ТекущийЭлемент = Элементы.Удержания Тогда
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭтоРедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковУдержанияСписокЗавершениеВыбора", ЭтотОбъект);

	Если ЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);			
	Иначе
		
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоРедактированиеСтроки Тогда
		ЭтоРедактированиеСтроки = Ложь;
		ПодключитьОбработчикОжидания("УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
 // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

Процедура РассчитатьЕПДополнительныеДанные(Объект, ЕПДанныеДляРасчета = Неопределено, РасчетЕПДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕПДанныеДляРасчета", ЕПДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ?(РеквизитыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, РеквизитыОрганизации.ИндивидуальныйПредприниматель, Неопределено));

    ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);

	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕПДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ЕПДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕПДанныеДляРасчета.СуммаПлатежа КАК СуммаПлатежа,
	|	ЕПДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ЕПДанныеДляРасчета КАК ЕПДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	РасчетныеПоказатели.РазмерМЗП КАК РазмерМЗП
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезОСМС
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезСО
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо
	|ПОМЕСТИТЬ ВТФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОбИнвалидностиФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОбИнвалидностиФизлиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОбИнвалидностиФизлиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаБезСО.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезСО,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаБезОСМС.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезОСМС,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаИнвалидыБессрочно.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезПраваНаПенсию КАК ФизлицаБезПраваНаПенсию
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаБезПраваНаПенсию.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезСО КАК ФизЛицаБезСО
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизЛицаБезСО.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезОСМС КАК ФизЛицаБезОСМС
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизЛицаБезОСМС.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаИнвалиды КАК ФизлицаИнвалидыБессрочно
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаИнвалидыБессрочно.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ЕПСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ЕПСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ЕПСведенияОДоходахОбороты.СуммаДоходаОборот) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА ЕПСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ЕПСведенияОДоходахОбороты.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемыйДоход 
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации <= &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ЕПСведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ЕПСведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЕПСведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ЕПСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (ЕПСведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	СУММА(ВТДанныеДляРасчета.ОблагаемаяБаза),
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕПРасчетыСФондами.СуммаПлатежа КАК ЕПЗаМесяц,
	|	ЕПРасчетыСФондами.СуммаПлатежа КАК РанееИсчисленныйЕП
	|ПОМЕСТИТЬ ВТДанныеОбОтчислениях
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ЕПРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ЕПРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ЕПРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ЕПРасчетыСФондами.Регистратор <> &Регистратор
	|	И ЕПРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ЕПРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеДляРасчета.СуммаПлатежа),
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОбОтчислениях.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОбОтчислениях.ЕПЗаМесяц) КАК ЕПЗаМесяц,
	|	СУММА(ВТДанныеОбОтчислениях.РанееИсчисленныйЕП) КАК РанееИсчисленныйЕП
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
	|ИЗ
	|	ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОбОтчислениях.ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяИП,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.ЕПЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕПЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.РанееИсчисленныйЕП
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныйЕП,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида КАК ПризнакФизЛицаИнвалида,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСО КАК ПризнакФизЛицаБезСО,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезОСМС КАК ПризнакФизЛицаБезОСМС
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо";

	ДанныеЕП = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеЕП.Следующий() Цикл
		
		РасчетЕПДополнительныеДанныеСтрока = РасчетЕПДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетЕПДополнительныеДанныеСтрока, ДанныеЕП);
		
		Если ДанныеЕП.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на пенсию. '");
		КонецЕсли;
		Если ДанныеЕП.ПризнакФизЛицаБезСО <> 0 Тогда                                                             
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит соц. страхованию. '");
		КонецЕсли;
		Если ДанныеЕП.ПризнакФизЛицаБезОСМС <> 0 Тогда                                                             
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит мед. страхованию. '");
		КонецЕсли;
		Если ДанныеЕП.ЯвляетсяИП Тогда
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринемателем. '");
		КонецЕсли;
		Если ДанныеЕП.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;
		Если ДанныеЕП.ПризнакФизЛицаИнвалида <> 0 Тогда
			РасчетЕПДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является лицом с инвалидностью. '");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РасчетЕПДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетЕПДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетЕПДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетЕПДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетЕПДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	//РасчетЕПДополнительныеДанные.Колонки.Добавить("ЕПЗаМесяц");     
	
	//РасчетЕПДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	//РасчетЕПДополнительныеДанные.Колонки.Добавить("РанееИсчисленныйЕП");
	//РасчетЕПДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	//РасчетЕПДополнительныеДанные.Колонки.Добавить("МаксимальноеОграничение");
	РасчетЕПДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");
	РасчетЕПДополнительныеДанные.Колонки.Добавить("СуммаЗаСчетРаботника");
	РасчетЕПДополнительныеДанные.Колонки.Добавить("СуммаЗаСчетРаботодателя");

	Возврат РасчетЕПДополнительныеДанные;	

КонецФункции 
 
&НаСервере
Процедура РассчитатьДополнительныеСведенияНаСервере(ИмяКоманды = Неопределено) Экспорт
	
	ЕПДанныеДляРасчета = Объект.ИсчисленныйЕП.Выгрузить();
	РасчетЕПДополнительныеДанные = РасчетЕПДополнительныеДанныеОписаниеТаблицыЗначений();
	РассчитатьЕПДополнительныеДанные(Объект, ЕПДанныеДляРасчета, РасчетЕПДополнительныеДанные);
	
	ЗаполнитьДополнительныеДанные(РасчетЕПДополнительныеДанные, Объект.ИсчисленныйЕП);
	ЕППодробностиРасчетаПрочитаны = Истина;
	
	Для Каждого СтрокаТаблица Из Объект.ИсчисленныйЕП Цикл
		СтрокаТаблица.СуммаЗаСчетРаботника    = СтрокаТаблица.СуммаОПВ + СтрокаТаблица.СуммаИПН + СтрокаТаблица.СуммаВОСМС;	
		СтрокаТаблица.СуммаЗаСчетРаботодателя = СтрокаТаблица.СуммаСО + СтрокаТаблица.СуммаООСМС + СтрокаТаблица.СуммаОПВР;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРедактированиеСуммДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// на время открытия документа
	ПредупреждатьОРедактированияКомпонент = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыПоСтроке(ТекущиеДанные) Экспорт

	ТекущиеДанные.СуммаЗаСчетРаботника = ТекущиеДанные.СуммаОПВ + ТекущиеДанные.СуммаВОСМС + ТекущиеДанные.СуммаИПН;
	ТекущиеДанные.СуммаЗаСчетРаботодателя = ТекущиеДанные.СуммаООСМС + ТекущиеДанные.СуммаСО + ТекущиеДанные.СуммаОПВР;
	
	ТекущиеДанные.СуммаПлатежа = ТекущиеДанные.СуммаЗаСчетРаботника + ТекущиеДанные.СуммаЗаСчетРаботодателя;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПереключенияПодробностейрасчета(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПодробноЕП.Пометка 	= Форма.ОтображатьПодробностиРасчетаЕП;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанные(Источник, Приемник)

	Для Каждого СтрокаДанных Из Источник Цикл
		
		СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода", СтрокаДанных.ФизЛицо, СтрокаДанных.МесяцНалоговогоПериода); 
		Строки = Приемник.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;   
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект,,,, Параметры.ЗначениеКопирования);
		КонецЕсли;
		Объект.Дата = КонецМесяца(Объект.Дата);
	КонецЕсли;
		
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
    ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

	РассчитатьДополнительныеСведенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаЗаполнитьПоВсемСотрудникам(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ИсчисленныйЕП.Очистить();
	Объект.Удержания.Очистить();

	АвтозаполнениеНаСервере();
	
    Если Объект.ИсчисленныйЕП.Количество() = 0
        И Объект.Удержания.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтменыПроведенияПередЗаполнением(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
    Если Объект.ИсчисленныйЕП.Количество() > 0
        ИЛИ Объект.Удержания.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличные части будет полностью перезаполнены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоВсемСотрудникам", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		АвтозаполнениеНаСервере();
        Если Объект.ИсчисленныйЕП.Количество()  = 0
            И Объект.Удержания.Количество()  = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ИсчисленныйЕП.Очистить();
	Объект.Удержания.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеНаСервере() 
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет единого платежа"" (заполнение)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетЕдиногоПлатежа.Автозаполнение(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет единого платежа"" (расчет)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетЕдиногоПлатежа.Рассчитать(Объект);
	Модифицированность = Истина;
	
	РассчитатьДополнительныеСведенияНаСервере();
	ЕППодробностиРасчетаПрочитаны = Истина;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРаботникаНаСервере(ФизЛицо)
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет единого платежа"" (расчет сотрудника)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	ФизлицоДляРасчета = ?(ТекущееФизЛицо <> Неопределено, ТекущееФизЛицо, ФизЛицо);	
	Документы.РасчетЕдиногоПлатежа.Рассчитать(Объект, ФизлицоДляРасчета);
	
	РассчитатьДополнительныеСведенияНаСервере();
	
	Модифицированность = Истина;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьУдержанияНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""расчет удержаний сотрудников организаций"" (расчет удержания)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.РасчетЕдиногоПлатежа.РассчитатьУдержания(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПроведениеИМодифицированность(ПараметрыРасчета)
	
	ОбъектТребуетЗапись = Ложь;
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		ОбъектТребуетЗапись = Истина;
	ИначеЕсли Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru= 'Автоматически рассчитать документ можно только после его записи. Записать?'");
		ОбъектТребуетЗапись = Истина;
	КонецЕсли;
	
	Если ОбъектТребуетЗапись Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьПередРасчетом", ЭтотОбъект, ПараметрыРасчета);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	Возврат НЕ ОбъектТребуетЗапись;		

КонецФункции

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);		
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьДату(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Дата = ТекущаяДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
    Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции

&НаКлиенте  
Процедура ПослеЗакрытияВопросаЗаписатьПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		Выполнить(Параметры.КомандаРасчета);
		
	#Иначе
		
		ВыполнитьНаСервере(Параметры);
				
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере(Параметры) 
	
	Выполнить(Параметры.КомандаРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковЕПСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.ИсчисленныйЕП.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковУдержанияСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.Удержания.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФамилияИнициалыФизЛица(ФизЛицо) 
	
	Возврат ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ФизЛицо);
	
КонецФункции

&НаКлиенте
Процедура УстановитьИмяКнопкиСинхронизироватьТабличныеЧасти()
	
	Если ЭтоРедактированиеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаРассчитатьРаботника = Элементы.ФормаРассчитатьСотрудника;
	Если КнопкаРассчитатьРаботника = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетЕП Тогда
		ТекущиеДанные	= Элементы.ИсчисленныйЕП.ТекущиеДанные;
		ИмяТЧ = Элементы.ИсчисленныйЕП.Имя;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочиеУдержания Тогда  
		ТекущиеДанные	= Элементы.Удержания.ТекущиеДанные;
		ИмяТЧ = Элементы.Удержания.Имя;
    КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда 
		ФизЛицоСтроки = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		ФизЛицоСтроки = ТекущиеДанные.ФизЛицо;
	КонецЕсли;
	
	Если ФизЛицоСтроки = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка")
		ИЛИ ФизЛицоСтроки = Неопределено Тогда
		
		Если НЕ КнопкаРассчитатьРаботника = Неопределено Тогда
			КнопкаРассчитатьРаботника.Заголовок = НСтр("ru = 'Рассчитать сотрудника'");
		КонецЕсли;
		
		ТекущееФизЛицо = ФизЛицоСтроки;
		
	Иначе
		
		Если ТекущееФизЛицо <> ФизЛицоСтроки Тогда
			ФИО = ФамилияИнициалыФизЛица(ФизЛицоСтроки);
			НовыйЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Рассчитать %1'"), ФИО);
			Если ВРег(КнопкаРассчитатьРаботника.Заголовок) <> ВРег(НовыйЗаголовок) Тогда 
				КнопкаРассчитатьРаботника.Заголовок = НовыйЗаголовок;
			КонецЕсли;
			ТекущееФизЛицо = ФизЛицоСтроки;
		КонецЕсли;
		
    КонецЕсли; 
    
   	Если ЗначениеЗаполнено(ФизЛицоСтроки) И НЕ ИмяТЧ = "" Тогда
		СинхронизироватьСтроки(ЭтаФорма, Объект, Элементы[ИмяТЧ], СинхронизируемыеТабличныеЧасти, "ФизЛицо");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			МассивСтрок = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		Исключение
			МассивСтрок = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]));
		КонецПопытки;

		Если МассивСтрок.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;
	                            
КонецПроцедуры

&НаСервере
Процедура ПолучитьПлановыеУдержанияСотрудникаНаСервере (МассивСотрудников)
	
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.СтруктурноеПодразделение,
		Объект.Организация,
		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	РасчетДляИП = (Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	// узнаем учетную политику по налоговому учету
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Объект.Организация, Объект.Дата);
	
	// При автозаполнении будем исключать физлицо, если организация является ИП на основе СНР
	ИсключитьДанныеИП = (РасчетДляИП И НЕ ОрганизацияЯвляетсяПлательщикомСН);
	
	// При заполнении СО будем учитывать требуется ли ежемесячный расчет
	ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Объект.Организация, Объект.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Объект.Организация);
	Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПодразделение" , Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамДействиеПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("парамРегистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетовФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = УчетнаяПолитикаСервер.ПолучитьТекстЗапросаУчетнойПолитикиПоПерсоналу();
	УчетнаяПолитикаПоПерсоналуОрганизацииТекст = СтрЗаменить(УчетнаяПолитикаПоПерсоналуОрганизацииТекст,"РАЗРЕШЕННЫЕ","");
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Объект.ПодразделениеОрганизации = ПустоеПодразделение Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация";
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
		
	//СписокРаботниковТекст
	//Описание:
	//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и принятых за месяц,
	//  а также переведенных в середине месяца из других обособленных подразделений
	СписокРаботниковТекст = "
	|		// срез работников на начало месяца
	|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|			РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо
	|		ПОМЕСТИТЬ ВТ_СписокРаботников1
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(РаботникиОрганизацийСрезПоследних.Регистратор) = ТИП(Документ.ПриемНаРаботуВОрганизацию)
	|						ТОГДА РаботникиОрганизацийСрезПоследних.Регистратор
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК Регистратор,
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизацийСрезПоследних.Организация КАК Организация
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизацийСрезПоследних
	|
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
	|				РаботникиОрганизацийСрезПоследних.Организация) КАК АктуальныйСписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&парамНачало, 
	|					Организация = &парамГоловнаяОрганизация 
	|					И (Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)) КАК РаботникиОрганизации
	|				ПО АктуальныйСписокРаботников.Физлицо = РаботникиОрганизации.Сотрудник.Физлицо
	|					И АктуальныйСписокРаботников.Организация = РаботникиОрганизации.Организация
	|					И (ВЫБОР
	|						КОГДА АктуальныйСписокРаботников.Регистратор <> ЛОЖЬ
	|							ТОГДА РаботникиОрганизации.Регистратор = АктуальныйСписокРаботников.Регистратор
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ)
	|		ГДЕ
	|			РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
	|			И ФизЛицо В (&МассивСотрудников)
	
	|		" + ?(ПоВсемПодразделениямОрганизации, "", " И " + УсловиеНаПодразделение) + "
	|		
	|		ОБЪЕДИНИТЬ
	|
	|		// движения работников за месяц
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки,
	|									МАКСИМУМ(ПредыдущееНазначение.Период) КАК ДатаПредыдущегоНазначения
	|								ИЗ
	|									РегистрСведений.РаботникиОрганизаций КАК ТекущееНазначение
	|									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущееНазначение
	|										ПО ТекущееНазначение.Сотрудник = ПредыдущееНазначение.Сотрудник
	|											И ПредыдущееНазначение.Организация = &парамГоловнаяОрганизация
	|											И ПредыдущееНазначение.Период < ТекущееНазначение.Период
	|											И ПредыдущееНазначение.Активность
	|								ГДЕ
	|									ТекущееНазначение.Период > &парамНачало
	|									И ТекущееНазначение.Период <= &парамКонец
	|									И ТекущееНазначение.Организация = &парамГоловнаяОрганизация
	|									И ТекущееНазначение.ОбособленноеПодразделение = &парамОрганизация
	|									И ТекущееНазначение.Активность
	|								СГРУППИРОВАТЬ ПО
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки) КАК ДатыПредыдущихНазначений
	|				ПО РаботникиОрганизации.Регистратор = ДатыПредыдущихНазначений.Регистратор
	|					И РаботникиОрганизации.НомерСтроки = ДатыПредыдущихНазначений.НомерСтроки
	|					
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущиеНазначения
	|				ПО РаботникиОрганизации.Сотрудник = ПредыдущиеНазначения.Сотрудник
	|					И ПредыдущиеНазначения.Организация = &парамГоловнаяОрганизация
	|					И ДатыПредыдущихНазначений.ДатаПредыдущегоНазначения = ПредыдущиеНазначения.Период
	|					И ПредыдущиеНазначения.Активность
	|		
	|		ГДЕ
	|			РаботникиОрганизации.Период > &парамНачало
	|			И РаботникиОрганизации.Период <= &парамКонец
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния = &Принят
	|					ИЛИ РаботникиОрганизации.ОбособленноеПодразделение <> ПредыдущиеНазначения.ОбособленноеПодразделение
	|					ИЛИ РаботникиОрганизации.СтруктурноеПодразделение <> ПредыдущиеНазначения.СтруктурноеПодразделение)
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|			И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
	|			И РаботникиОрганизации.Активность
	|				И РаботникиОрганизации.Сотрудник В (&МассивСотрудников)
	|			" + ?(ПоВсемПодразделениямОрганизации, "", " И " + УсловиеНаПодразделение) + "
	|";
	Запрос.Текст = СписокРаботниковТекст;
	Запрос.Выполнить();
	СписокРаботниковТекст = "ВТ_СписокРаботников1";
	
	// заполнение табличной части "Удержания"
	//Основной текст запроса
	УдержанияТекст = "
    | ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	РасчетЕдиногоПлатежа.Ссылка КАК Ссылка,
    |	РасчетЕдиногоПлатежа.Ссылка.Организация КАК Организация,
    |	РасчетЕдиногоПлатежа.ФизЛицо КАК ФизЛицо,
    |	РасчетЕдиногоПлатежа.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
    |	РасчетЕдиногоПлатежа.ДокументОснование КАК ДокументОснование,
    |   РасчетЕдиногоПлатежа.ВидРасчета КАК ВидРасчета 
    |ПОМЕСТИТЬ ВТ_РанееСделанныеУдержания
    |ИЗ
    |	Документ.РасчетЕдиногоПлатежа.Удержания КАК РасчетЕдиногоПлатежа
    |ГДЕ
    |	РасчетЕдиногоПлатежа.Ссылка <> &парамРегистратор
    |	И РасчетЕдиногоПлатежа.Ссылка.Проведен
    |	И РасчетЕдиногоПлатежа.Ссылка.ПериодРегистрации = &парамНачало
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка,
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка.Организация,
    |	РасчетУдержанийРаботниковОрганизаций.ФизЛицо,
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка.ПериодРегистрации,
    |	РасчетУдержанийРаботниковОрганизаций.ДокументОснование,
    |   РасчетУдержанийРаботниковОрганизаций.ВидРасчета КАК ВидРасчета 
    |ИЗ
    |	Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК РасчетУдержанийРаботниковОрганизаций
    |ГДЕ
    |	РасчетУдержанийРаботниковОрганизаций.Ссылка <> &парамРегистратор
    |	И РасчетУдержанийРаботниковОрганизаций.Ссылка.Проведен
    |	И РасчетУдержанийРаботниковОрганизаций.Ссылка.ПериодРегистрации = &парамНачало
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыеУдержания.ФизЛицо,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ПлановыеУдержания.Размер КАК Размер,
	|
	|	ВЫБОР
	|		КОГДА ПлановыеУдержания.Период < &парамНачало ТОГДА &парамНачало
	|		ИНАЧЕ ПлановыеУдержания.Период
	|	КОНЕЦ КАК ДатаНачала,
	|
	|	ВЫБОР
	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеУдержания.ПериодЗавершения <= &парамКонец
	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец))
	|	КОНЕЦ КАК ДатаОкончания,
	|
	|	ПлановыеУдержания.ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДанныеПлановыхУдержаний
	|ИЗ
	|	" + СписокРаботниковТекст + " КАК Работники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
	|		ПО Работники.ФизЛицо = ПлановыеУдержания.ФизЛицо
	|			И ПлановыеУдержания.Активность
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
	|			И СледующиеПлановыеУдержания.Период <= &парамКонец
	|			И СледующиеПлановыеУдержания.Активность
	|
	|	// для предотвращения дублирования удержаний за один период регистрации в одном и том же ОбособленномПодразделении,
	|	// а для расчетов фиксированной суммой - один раз в целом по головной организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееСделанныеУдержания КАК РанееСделанныеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + УчетнаяПолитикаПоПерсоналуОрганизацииТекст + ") КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|			ПО РанееСделанныеУдержания.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ПО ВЫБОР
	|				КОГДА ПлановыеУдержания.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетовФиксированнойСуммой)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации = ИСТИНА ТОГДА
	|								ВЫБОР
	|									КОГДА РанееСделанныеУдержания.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|										ТОГДА РанееСделанныеУдержания.Организация
	|									ИНАЧЕ РанееСделанныеУдержания.Организация.ГоловнаяОрганизация
	|								КОНЕЦ
	|							ИНАЧЕ РанееСделанныеУдержания.Организация
	|						  КОНЕЦ = &парамГоловнаяОрганизация
	|				ИНАЧЕ РанееСделанныеУдержания.Организация = &парамОрганизация
	|			КОНЕЦ
	|			И РанееСделанныеУдержания.ФизЛицо = ПлановыеУдержания.ФизЛицо 
	|			И РанееСделанныеУдержания.ВидРасчета = ПлановыеУдержания.ВидРасчета 
	|			И ВЫБОР
	|				КОГДА НЕ (РанееСделанныеУдержания.ДокументОснование.Ссылка ЕСТЬ NULL)
	|					ТОГДА РанееСделанныеУдержания.ДокументОснование = ПлановыеУдержания.ДокументОснование
	|				ИНАЧЕ ИСТИНА
	|			  КОНЕЦ
	|
	|ГДЕ
	|	ПлановыеУдержания.Организация = &парамГоловнаяОрганизация
	|	И ПлановыеУдержания.Период <= &парамКонец
	|	И ВЫБОР
	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
	|				И ПлановыеУдержания.ПериодЗавершения < &парамНачало ТОГДА ПлановыеУдержания.ДействиеЗавершения
	|		ИНАЧЕ ПлановыеУдержания.Действие
	|	  КОНЕЦ <> &парамДействиеПрекратить
	|	И РанееСделанныеУдержания.ФизЛицо ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержания.ФизЛицо,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.Размер,
	|
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.ПериодЗавершения,
	|	ПлановыеУдержания.ДокументОснование
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец)) >= &парамНачало
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеПлановыхУдержаний.ФизЛицо,
	|	ВТ_ДанныеПлановыхУдержаний.ВидРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.СпособРасчета,
	|	МАКСИМУМ(ВТ_ДанныеПлановыхУдержаний.ДатаНачала) КАК ДатаНачала,
	|	ВТ_ДанныеПлановыхУдержаний.ДокументОснование
	|ПОМЕСТИТЬ ВТ_ПериодыПлановыхУдержаний
	|ИЗ
	|	ВТ_ДанныеПлановыхУдержаний КАК ВТ_ДанныеПлановыхУдержаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеПлановыхУдержаний.ФизЛицо,
	|	ВТ_ДанныеПлановыхУдержаний.СпособРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.ВидРасчета,
	|	ВТ_ДанныеПлановыхУдержаний.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПлановыхУдержаний.ФизЛицо,
	|	ДанныеПлановыхУдержаний.ВидРасчета,
	|	ДанныеПлановыхУдержаний.СпособРасчета,
	|	ДанныеПлановыхУдержаний.Размер,
	|	ДанныеПлановыхУдержаний.ДатаНачала,
	|	ДанныеПлановыхУдержаний.ДатаОкончания,
	|	ДанныеПлановыхУдержаний.ДокументОснование
	|ИЗ
	|	ВТ_ДанныеПлановыхУдержаний КАК ДанныеПлановыхУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПлановыхУдержаний КАК ВТ_ПериодыПлановыхУдержаний
	|		ПО ДанныеПлановыхУдержаний.ФизЛицо = ВТ_ПериодыПлановыхУдержаний.ФизЛицо
	|			И ДанныеПлановыхУдержаний.ВидРасчета = ВТ_ПериодыПлановыхУдержаний.ВидРасчета
	|			И ДанныеПлановыхУдержаний.СпособРасчета = ВТ_ПериодыПлановыхУдержаний.СпособРасчета
	|			И ДанныеПлановыхУдержаний.ДокументОснование = ВТ_ПериодыПлановыхУдержаний.ДокументОснование
	|			И ДанныеПлановыхУдержаний.ДатаНачала = ВТ_ПериодыПлановыхУдержаний.ДатаНачала
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПлановыхУдержаний.Физлицо.Наименование,
	|	ДанныеПлановыхУдержаний.ДокументОснование,
	|	ДанныеПлановыхУдержаний.ВидРасчета,
	|	ДанныеПлановыхУдержаний.ДатаНачала
	|";	
	
	Запрос.Текст = УдержанияТекст;
	ТЗУдержания = Запрос.Выполнить().Выгрузить();
	
	// Удалим из таблицы удержаний удержания почтового сбора, если для соответствующего документа-основания нет удержаний алиментов.
	// Такое может быть, если удержание по ИЛ фикс. суммой и уже было удержано в текущем месяце в другой обособленной организации.
	ТЗУдержания.Индексы.Добавить("ДокументОснование");
	ТЗУдержания.Индексы.Добавить("СпособРасчета");
	
	СтруктураПоиска = Новый Структура("СпособРасчета");
	СтруктураПоиска.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор;
	НайденныеСтрокиПочтовогоСбора = ТЗУдержания.НайтиСтроки(СтруктураПоиска);
	
	МассивУдаляемыхСтрок = Новый Массив();
	
	СтруктураПоиска.Очистить();
	СтруктураПоиска.Вставить("ДокументОснование");
	Для Каждого СтрокаПочтовогоСбора Из НайденныеСтрокиПочтовогоСбора Цикл
		СтруктураПоиска.ДокументОснование = СтрокаПочтовогоСбора.ДокументОснование;
		НайденныеСтрокиДокумента = ТЗУдержания.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиДокумента.Количество() = 1 Тогда // только одна строка с таким документом-основанием - сам почтовый сбор
			// запоминаем, что надо удалить такую строку из таблицы значений
			МассивУдаляемыхСтрок.Добавить(СтрокаПочтовогоСбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗначений Из ТЗУдержания Цикл
		Если СтрокаЗначений.ФизЛицо <> Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ФизЛицо", СтрокаЗначений.ФизЛицо);
			НайденныеСтрокиТабличнойЧасти  = Объект.Удержания.НайтиСтроки(ПараметрыОтбора);
			НайденныеСтрокиТЗУдержания = ТЗУдержания.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтрокиТабличнойЧасти <> Неопределено 
				И НайденныеСтрокиТабличнойЧасти[0].ВидРасчета = СтрокаЗначений.ВидРасчета Тогда
				Продолжить;
			ИначеЕсли НайденныеСтрокиТабличнойЧасти <> Неопределено 
				И НайденныеСтрокиТабличнойЧасти[0].ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка() Тогда
				НайденныеСтрокиТабличнойЧасти[0].ВидРасчета        = СтрокаЗначений.ВидРасчета;
				НайденныеСтрокиТабличнойЧасти[0].Размер            = СтрокаЗначений.Размер;
				
			Иначе
				НоваяСтрокаТабличнойЧасти            = Объект.Удержания.Добавить();
				НоваяСтрокаТабличнойЧасти.ФизЛицо    = СтрокаЗначений.ФизЛицо;
				НоваяСтрокаТабличнойЧасти.ВидРасчета = СтрокаЗначений.ВидРасчета;
				НоваяСтрокаТабличнойЧасти.Размер     = СтрокаЗначений.Размер;
				НоваяСтрокаТабличнойЧасти.ДокументОснование     = СтрокаЗначений.ДокументОснование;

				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидРасчета", ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка());
	НайденныеСтрокиТабличнойЧасти  = Объект.Удержания.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗначений Из НайденныеСтрокиТабличнойЧасти Цикл
		Объект.Удержания.Удалить(СтрокаЗначений);
	КонецЦикла;	
		
		
КонецПроцедуры

ЭтоРедактированиеСтроки = Ложь;   
СинхронизируемыеТабличныеЧасти = Новый Соответствие;
СинхронизируемыеТабличныеЧасти["ИсчисленныйЕП"]  = Ложь;
СинхронизируемыеТабличныеЧасти["Удержания"] 	 = Ложь;
