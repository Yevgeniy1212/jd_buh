#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ИсчисленныйЕП.ВыгрузитьКолонку("ФизЛицо");
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
    Если ЭтотОбъект.ИсчисленныйЕП.Количество() > 0 
        ИЛИ ЭтотОбъект.Удержания.Количество() > 0 Тогда
	
		МассивНепроверяемыхРеквизитов.Добавить("ИсчисленныйЕП");
		МассивНепроверяемыхРеквизитов.Добавить("Удержания");

    КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ИсчисленныйЕП);
	МассивТЧ.Добавить(Удержания);

    КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РасчетЕдиногоПлатежа.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	// ЕП
	ТаблицаЕПСведенияОДоходах = РасчетЗарплатыСервер.ПодготовитьТаблицуСведенияОДоходах(Реквизиты, 
																						ПараметрыПроведения.ЕПСведенияОДоходах, 
																						"Целиком", 
																						Движения.ЕПСведенияОДоходах.ВыгрузитьКолонки(),
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаЕПСведенияОДоходах,  	"ЕПСведенияОДоходах",	Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвиженияЕПРасчетыСФондами(Реквизиты, ПараметрыПроведения.ИсчисленныйЕП, Движения, Отказ);
	
	// Взаиморасчеты с работниками
	ТаблицаВзаиморасчетыСРаботниками = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыСРаботникамиОрганизаций,
																					Движения.ВзаиморасчетыСРаботникамиОрганизаций.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСРаботниками,	"ВзаиморасчетыСРаботникамиОрганизаций", Движения, Отказ);

	// Взаиморасчеты с получателями ИЛ	
	ТаблицаВзаиморасчетыСПолучателямиИЛ = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(Реквизиты,
																					ПараметрыПроведения.ВзаиморасчетыСПолучателямиИЛ,
																					Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.ВыгрузитьКолонки(),
																					ВидДвиженияНакопления.Приход,
																					Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВзаиморасчетыСПолучателямиИЛ, 	"ВзаиморасчетыОрганизацийСПолучателямиИЛ",  Движения, Отказ);
    
    // Выплаченные доходы по НУ
	ТаблицаВыплаченныеДоходы = РасчетЗарплатыСервер.ПодготовитьТаблицуВыплаченныеДоходыНУ(Реквизиты,
																						ПараметрыПроведения.ВыплаченныеДоходыНУ,
																						Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.ВыгрузитьКолонки(),
																						ВидДвиженияНакопления.Приход,
																						Отказ);
	РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаВыплаченныеДоходы,   		"ВыплаченныеДоходыРаботникамОрганизацийНУ",	Движения, Отказ);

	РасчетЗарплатыСервер.СформироватьДвиженияЕПКомпонентыПлатежа(Реквизиты, ПараметрыПроведения.ЕПКомпоненты, Движения, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
