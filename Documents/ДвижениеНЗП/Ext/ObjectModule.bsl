Перем мПроведениеОперацииИзвне Экспорт; // (Регл)
Перем мУдалениеИзвне Экспорт; // (Регл)


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	// Проверка заполнения табличной части "Товары"
	Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикКПН", Новый Структура("Организация, Период", Организация, Дата)) 
		ИЛИ НЕ УчитыватьКПН  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Состав.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Состав.СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Состав.СуммаНУ");
	КонецЕсли;
	
	Если  НЕ ОтражатьВБухгалтерскомУчете  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Состав.СчетЗатратБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Состав.Сумма");
	КонецЕсли;
	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ДвижениеНЗП.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетПроизводства.СформироватьДвиженияНЗПБУ(ПараметрыПроведения.ТаблицаНЗПБУ, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетПроизводства.СформироватьДвиженияНЗПНУ(ПараметрыПроведения.ТаблицаНЗПНУ, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если (мПроведениеОперацииИзвне = Неопределено) И (ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП) И
			ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
			ТекстСообщения = НСтр("ru = 'У текущего документа существует документ переноса из НЗП на счета производственного учета
			|""[ДокументОснование]"". 
			|Он так же будет проведен.'");
			ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, Новый Структура("ДокументОснование", ДокументОснование)));
			ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
			ТекущийДокументОснование.мПроведениеОперацииИзвне = Истина;
			ТекущийДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				Если мУдалениеИзвне = Неопределено Тогда
					Если мПроведениеОперацииИзвне = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'У текущего документа существует документ-основание ""[ДокументОснование]"". 
						|Отмена проведения текущего документа возможна только посредством отмены проведения документа-основания.'");
						ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, Новый Структура("ДокументОснование", ДокументОснование)), Ссылка, , , Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
				
				ТекстСообщения = НСтр("ru = 'У текущего документа существует документ переноса из НЗП ""[ДокументОснование]"". 
				|Он так же будет снят с проведения.'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, Новый Структура("ДокументОснование", ДокументОснование)), Ссылка);
				
				ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
				ТекущийДокументОснование.мПроведениеОперацииИзвне = Истина;
				ТекущийДокументОснование.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления  <> Ссылка.ПометкаУдаления  Тогда
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
					Если мУдалениеИзвне = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'У текущего документа существует документ-основание 
						|""[ДокументОснование]"".'") + Символы.ПС +
						?(Ссылка.ПометкаУдаления = Ложь,
						НСтр("ru = 'Удаление текущего документа возможно только посредством удаления документа-основания.'"),
						НСтр("ru = 'Снятие пометки на удаление текущего документа возможно только посредством снятия пометки удаления документа-основания.'"));
						ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, Новый Структура("ДокументОснование", ДокументОснование)), Ссылка, , , Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
					ТекстСообщения = НСтр("ru = 'У текущего документа существует документ переноса из НЗП
					|""[ДокументОснование]"".'")+ Символы.ПС +
					?(Ссылка.ПометкаУдаления = Ложь,
					НСтр("ru = 'Он также будет удален.'"),
					НСтр("ru = 'С него также будет снята пометка удаления.'"));
					
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, Новый Структура("ДокументОснование", ДокументОснование)), Ссылка);
					ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
					ТекущийДокументОснование.мУдалениеИзвне = Истина;
					ТекущийДокументОснование.УстановитьПометкуУдаления(?(Ссылка.ПометкаУдаления = Ложь, Истина, Ложь));
				КонецЕсли;		 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли