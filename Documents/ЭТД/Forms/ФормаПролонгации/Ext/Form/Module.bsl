
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнениеФормыПриСозданииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СрокДействияПролонгацииПриИзменении(Элемент)
	
	Если СрокДействияПролонгации = "1" Тогда
		ДатаОкончанияПролонгации = Дата('00010101');
		Элементы.ДатаОкончанияПролонгации.Доступность = Ложь;
	Иначе
		Элементы.ДатаОкончанияПролонгации.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПодписать(Команда)
	
	Если НЕ ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ВызовФормыПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнениеФормыПриСозданииНаСервере()
	
	ВидОперации = Параметры.ВидОперации;
	ИИНРаботника = Параметры.ИИНРаботника;
	ФИОРаботника = Параметры.ФИОРаботника;
	НомерДоговора = Параметры.НомерДоговора;
	ДатаЗаключения = Формат(Параметры.ДатаЗаключения, "ДЛФ=D");
	БИНОрганизации = Параметры.БИНОрганизации;
	Идентификатор = Параметры.Идентификатор;
	КодРегиона = Параметры.КодРегиона;
	Организация = Параметры.Организация;
	СрокДействияПролонгации = Параметры.СрокДействия;
	ДатаДоговора = Параметры.ДатаЗаключения;
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	ТипРаботодателя = Параметры.ТипРаботодателя;
	
	УстановитьДатыПролонгации(ДатаНачала, ДатаОкончания);
	
	ШаблонЗаголовка = НСтр("ru = 'Пролонгация трудового договора № %1 от %2'");
	ЭтаФорма.Заголовок = СтрШаблон(ШаблонЗаголовка, НомерДоговора, ДатаЗаключения);
	
	СписокСроковДействия = ЭТДСервер.СписокВыборкаСрокиДействия(Истина);
	ЗаполняемыйСписокВыбора = Элементы.СрокДействияПролонгации.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокСроковДействия Цикл
		Если ЭлементСписка.Значение = "1" ИЛИ ЭлементСписка.Значение = СрокДействияПролонгации Тогда
			ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатыПролонгации(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ)) КАК ДатаДляРасчетаДнейПролонгации,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ) - 1) КАК ДатаДляРасчетаДнейПролонгацииНеполныйМесяц,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ) + 1), МЕСЯЦ) КАК ДатаДляРасчетаДнейПролонгацииНачалоСледующегоМесяца,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ) - 1), МЕСЯЦ) КАК ДатаДляРасчетаДнейПролонгацииКонецМесяца,
		|	ДОБАВИТЬКДАТЕ(&ДатаОкончания, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ)) КАК ДатаОкончанияПролонгацииБезДобавленныхДней,
		|	ДОБАВИТЬКДАТЕ(&ДатаОкончания, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ) - 1) КАК ДатаОкончанияПролонгацииБезДобавленныхДнейНеполныйМесяц,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОкончания, МЕСЯЦ, РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МЕСЯЦ) + 1), МЕСЯЦ) КАК ДатаОкончанияПролонгацииБезДобавленныхДнейНачалоСледующегоМесяца
		|ПОМЕСТИТЬ ВТ_ДатыПролонгации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ) < 0
		|				И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
		|				И МЕСЯЦ(&ДатаНачала) = 2
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДнейНеполныйМесяц, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгацииКонецМесяца, &ДатаОкончания, ДЕНЬ))
		|		КОГДА РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ) < 0
		|				И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДней, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ))
		|		КОГДА РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ) < 0
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДнейНеполныйМесяц, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгацииНеполныйМесяц, &ДатаОкончания, ДЕНЬ))
		|		КОГДА КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
		|				И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ) <> КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДнейНачалоСледующегоМесяца, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ))
		|		КОГДА КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
		|				И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДнейНачалоСледующегоМесяца, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгацииНачалоСледующегоМесяца, &ДатаОкончания, ДЕНЬ))
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_ДатыПролонгации.ДатаОкончанияПролонгацииБезДобавленныхДней, ДЕНЬ, РАЗНОСТЬДАТ(ВТ_ДатыПролонгации.ДатаДляРасчетаДнейПролонгации, &ДатаОкончания, ДЕНЬ))
		|	КОНЕЦ КАК ДатаОкончанияПролонгации
		|ИЗ
		|	ВТ_ДатыПролонгации КАК ВТ_ДатыПролонгации";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаНачалаПролонгации = ДатаОкончания;
		ДатаОкончанияПролонгации = ВыборкаДетальныеЗаписи.ДатаОкончанияПролонгации;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФормы()
	
	ДанныеФормы = Новый Структура("ДатаПролонгации,
	|СрокДействияПролонгации,
	|ДатаОкончанияПролонгации");
	
	ЗаполнитьЗначенияСвойств(ДанныеФормы, ЭтаФорма);
	ДанныеФормы.ДатаПролонгации = ДатаНачалаПролонгации;
	
	Возврат ДанныеФормы;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ДатаОкончанияПролонгации <> Дата('00010101') И ДатаОкончанияПролонгации < ДатаНачалаПролонгации Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата окончания пролонгации не должна быть раньше даты начала %1 (определяется автоматически)'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(ДатаНачалаПролонгации, "ДЛФ=D"));
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаОкончанияПролонгации);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, ЭлементФормы)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле = ЭлементФормы.Имя;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовФормыПодписи()
	
	ПараметрыПролонгации = ПараметрыРегистрацииПролонгации();
	СтруктураДанныхДляПодписи = ПолучитьДанныеДляРегистрацииПролонгации(ПараметрыПролонгации);
	
	ДанныеДляПодписи = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписи;
	КонецЕсли;
	
	ПараметрыИмпорта = Новый Структура("bin, dateFrom, dateTo",
		БИНОрганизации,
		Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"),
		Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"));
	
	СтруктураДанныхДляПодписи = ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыИмпорта);
	ДанныеДляПодписиЗапросДоговора = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписиЗапросДоговора;
	КонецЕсли;
	
	ДанныеДляПодписиМассив = Новый Массив;
	ДанныеДляПодписиМассив.Добавить(ДанныеДляПодписи);
	ДанныеДляПодписиМассив.Добавить(ДанныеДляПодписиЗапросДоговора);
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", ДанныеДляПодписиМассив);
	Если ЗапросСертификатаТребуется Тогда
		ПродолжитьОтправкуПослеВводаДанныхЭЦП = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеВводаДанныхЭЦП", ЭтаФорма, ПараметрыЗаписи);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуПослеВводаДанныхЭЦП, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ДанныеДляПодписиМассив, БИНОрганизации);
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРегистрацииПролонгации()
	
	ПараметрыПролонгации = Новый Структура();
	ПараметрыПролонгации.Вставить("employerData", Новый Структура("bin,kato,employerType", БИНОрганизации, КодРегиона, ТипРаботодателя));
	ПараметрыПролонгации.Вставить("contractId", Идентификатор);
	ПараметрыПролонгации.Вставить("prolongationDate", ДатаНачалаПролонгации);
	Если ЗначениеЗаполнено(ДатаОкончанияПролонгации) Тогда
		ПараметрыПролонгации.Вставить("endDate", ДатаОкончанияПролонгации);
	КонецЕсли;
	ПараметрыПролонгации.Вставить("dContractDate", СрокДействияПролонгации);
	
	Возврат ПараметрыПролонгации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляРегистрацииПролонгации(ПараметрыПролонгации)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляРегистрацииПролонгацииЭТД(ПараметрыПролонгации);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыДоговора)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляИмпортаЭТД(ПараметрыДоговора);
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОтправкуПослеВводаДанныхЭЦП(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		КонецЕсли;
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, ПараметрыЗаписи);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
		Результат = Новый Массив;
		Результат.Добавить(ТекстСообщения);
		
		ОбработкаРезультатаЗапроса(Результат, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗапроса(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи пролонгации: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	ИначеЕсли Результат[0] = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи пролонгации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	ИначеЕсли Лев(Результат[0], 1) <> "<" Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи пролонгации: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат[0]);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаЗапросаНаСервере(Результат, ПараметрыЗаписи);
	
	ОбработкаРезультатаЗапросаЗавершение();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗапросаНаСервере(Результат, ПараметрыЗаписи)
	
	ДанныеАутентификации = ЭТДСервер.ПолучитьДанныеАутентификации(БИНОрганизации);
	
	Если ВидОперации = "Добавление" Тогда
		МетодЭТД = "create";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 2 Тогда
		ДанныеОперации = Результат[0];
		ЗапросДоговора = Результат[1];
	Иначе
		ДанныеОперации = Результат[0];
		ЗапросДоговора = "";
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписаннуюОперациюЭТД(
		ДанныеАутентификации,
		ЗапросДоговора,
		ДанныеОперации,
		Идентификатор,
		"prolongation",
		МетодЭТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗапросаЗавершение()
	
	ДанныеФормы = ПолучитьДанныеФормы();
	
	ЭтаФорма.Закрыть(ДанныеФормы);
	
КонецПроцедуры

#КонецОбласти
