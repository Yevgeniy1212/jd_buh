
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнениеФормыПриСозданииНаСервере();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПодразделениеНаРусскомЯзыкеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"ПодразделениеНаРусскомЯзыке", 
		НСтр("ru = 'Наименование подразделения (рус.)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНаКазахскомЯзыкеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"ПодразделениеНаКазахскомЯзыке", 
		НСтр("ru = 'Наименование подразделения (каз.)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КодСоциальногоОтпускаПриИзменении(Элемент)
	
	Если КодСоциальногоОтпуска = "2" Тогда
		ДатаПервогоРабочегоДня = Дата('00010101');
		ВыходныеДниЗаПериодНетрудоспособности = 0;
		НомерТабеля = "";
		ПодразделениеНаРусскомЯзыке = "";
		ПодразделениеНаКазахскомЯзыке = "";
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НеРаботалПоПриИзменении(Элемент)
	
	РасчитанныеВыходныеДниЗаПериод = 0;
	Если Элементы.ВыходныеДниЗаПериодНетрудоспособности.Видимость Тогда
		РасчитанныеВыходныеДниЗаПериод = ЭТДВызовСервера.ПолучитьКоличествоВыходныхДнейЗаПериод(Сотрудник, НеРаботалС, НеРаботалПо);
	КонецЕсли;
	
	Если РасчитанныеВыходныеДниЗаПериод <> 0 Тогда
		ВыходныеДниЗаПериодНетрудоспособности = РасчитанныеВыходныеДниЗаПериод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеРаботалСПриИзменении(Элемент)
	
	РасчитанныеВыходныеДниЗаПериод = 0;
	Если Элементы.ВыходныеДниЗаПериодНетрудоспособности.Видимость Тогда
		РасчитанныеВыходныеДниЗаПериод = ЭТДВызовСервера.ПолучитьКоличествоВыходныхДнейЗаПериод(Сотрудник, НеРаботалС, НеРаботалПо);
	КонецЕсли;
	
	Если РасчитанныеВыходныеДниЗаПериод <> 0 Тогда
		ВыходныеДниЗаПериодНетрудоспособности = РасчитанныеВыходныеДниЗаПериод;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если НЕ ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФормы = Неопределено;
	Если Модифицированность Тогда
		ДанныеФормы = ПолучитьДанныеФормы(ВидОперации);
	КонецЕсли;
	
	ЭтаФорма.Закрыть(ДанныеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПодписать(Команда)
	
	Если НЕ ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.Подписан") Тогда
		// редактирование не описано в документации
		ТекстСообщения = НСтр("ru = 'В текущей версии редактирование подписанных отпусков недоступно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВызовФормыПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ВидОперации = "Редактирование";
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	ШаблонВопроса = НСтр("ru = 'Вы уверены, что хотите удалить соц. отпуск № %1 к договору %2 от %3 без возможности восстановления?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, НомерТабеля, НомерДоговора, ДатаЗаключения);
	Оповещение = Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект);
	Кнопки = Новый СписокЗначений;
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.ОжидаетПодписи") Тогда
		ТекстЗаголовка = НСтр("ru = 'Социальный отпуск будет удален'");
		Кнопки.Добавить("Удалить", НСтр("ru = 'Да, удалить'"));
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.Подписан") Тогда
		ТекстЗаголовка = НСтр("ru = 'Социальный отпуск будет удален из вашего кабинета'");
		Кнопки.Добавить("ПодписатьИУдалить", НСтр("ru = 'Да, подписать ЭЦП и удалить'"));
	КонецЕсли;
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,,, ТекстЗаголовка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнениеФормыПриСозданииНаСервере()
	
	ВидОперации = Параметры.ВидОперации;
	ИИНРаботника = Параметры.ИИНРаботника;
	ФИОРаботника = Параметры.ФИОРаботника;
	НомерДоговора = Параметры.НомерДоговора;
	ДатаЗаключения = Формат(Параметры.ДатаЗаключения, "ДЛФ=D");
	БИНОрганизации = Параметры.БИНОрганизации;
	Идентификатор = Параметры.Идентификатор;
	КодРегиона = Параметры.КодРегиона;
	Организация = Параметры.Организация;
	Сотрудник = Параметры.Сотрудник;
	ДатаДоговора = Параметры.ДатаЗаключения;
	ТипРаботодателя = Параметры.ТипРаботодателя;
	
	Если Параметры.Свойство("ВыходныеДниЗаПериодНетрудоспособности") Тогда
		ВыходныеДниЗаПериодНетрудоспособности = Параметры.ВыходныеДниЗаПериодНетрудоспособности;
	КонецЕсли;
	Если Параметры.Свойство("ДатаПервогоРабочегоДня") Тогда
		ДатаПервогоРабочегоДня = Параметры.ДатаПервогоРабочегоДня;
	КонецЕсли;
	Если Параметры.Свойство("КодСоциальногоОтпуска") Тогда
		КодСоциальногоОтпуска = Параметры.КодСоциальногоОтпуска;
	КонецЕсли;
	Если Параметры.Свойство("НеРаботалПо") Тогда
		НеРаботалПо = Параметры.НеРаботалПо;
	КонецЕсли;
	Если Параметры.Свойство("НеРаботалС") Тогда
		НеРаботалС = Параметры.НеРаботалС;
	КонецЕсли;
	Если Параметры.Свойство("НомерТабеля") Тогда
		НомерТабеля = Параметры.НомерТабеля;
	КонецЕсли;
	Если Параметры.Свойство("ПодразделениеНаКазахскомЯзыке") Тогда
		ПодразделениеНаКазахскомЯзыке = Параметры.ПодразделениеНаКазахскомЯзыке;
	КонецЕсли;
	Если Параметры.Свойство("ПодразделениеНаРусскомЯзыке") Тогда
		ПодразделениеНаРусскомЯзыке = Параметры.ПодразделениеНаРусскомЯзыке;
	КонецЕсли;
	Если Параметры.Свойство("ДатаРегистрации") Тогда
		ДатаРегистрации = Параметры.ДатаРегистрации;
	КонецЕсли;
	Если Параметры.Свойство("Статус") Тогда
		Статус = Параметры.Статус;
	КонецЕсли;
	Если Параметры.Свойство("ИдентификаторСоциальногоОтпуска") Тогда
		ИдентификаторСоциальногоОтпуска = Параметры.ИдентификаторСоциальногоОтпуска;
	КонецЕсли;
	
	Если ВидОперации = "Добавление" Тогда
		ШаблонЗаголовка = НСтр("ru = 'Регистрация социального отпуска к договору № %1 от %2'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Социальный отпуск к договору № %1 от %2'");
	КонецЕсли;
	ЭтаФорма.Заголовок = СтрШаблон(ШаблонЗаголовка, НомерДоговора, ДатаЗаключения);
	
	СписокТиповСоциальногоОтпуска = ЭТДСервер.СписокВыборкаТипыСоциальногоОтпуска();
	ЗаполняемыйСписокВыбора = Элементы.КодСоциальногоОтпуска.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокТиповСоциальногоОтпуска Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Если ВидОперации = "Просмотр" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.ФормаСохранить.Видимость = Ложь;
		Элементы.ФормаСохранитьИПодписать.Видимость = Ложь;
		Элементы.ФормаУдалить.Видимость = Ложь;
	ИначеЕсли ВидОперации = "ТолькоПросмотр" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.ФормаСохранить.Видимость = Ложь;
		Элементы.ФормаСохранитьИПодписать.Видимость = Ложь;
		Элементы.ФормаУдалить.Видимость = Ложь;
		Элементы.ФормаРедактировать.Видимость = Ложь;
	ИначеЕсли ВидОперации = "Добавление" Тогда
		Элементы.ФормаРедактировать.Видимость = Ложь;
		Элементы.ФормаУдалить.Видимость = Ложь;
	ИначеЕсли ВидОперации = "Редактирование" И Статус = Перечисления.СтатусыДополнительныхДокументовЭТД.ОжидаетПодписи Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Элементы.ФормаСохранить.Видимость = Истина;
		Элементы.ФормаСохранитьИПодписать.Видимость = Истина;
		Элементы.ФормаРедактировать.Видимость = Ложь;
		Элементы.ФормаУдалить.Видимость = Ложь;
	ИначеЕсли ВидОперации = "Редактирование" И Статус = Перечисления.СтатусыДополнительныхДокументовЭТД.Подписан Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Элементы.ФормаСохранить.Видимость = Ложь;
		Элементы.ФормаСохранитьИПодписать.Видимость = Истина;
		Элементы.ФормаРедактировать.Видимость = Ложь;
		Элементы.ФормаУдалить.Видимость = Ложь;
	ИначеЕсли ВидОперации = "Удаление" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСохранить.Видимость = Ложь;
		Элементы.ФормаСохранитьИПодписать.Видимость = Ложь;
		Элементы.ФормаРедактировать.Видимость = Ложь;
	КонецЕсли;
	
	Если КодСоциальногоОтпуска = "2" Тогда
		Элементы.ДатаПервогоРабочегоДня.Видимость = Ложь;
		Элементы.ВыходныеДниЗаПериодНетрудоспособности.Видимость = Ложь;
		Элементы.НомерТабеля.Видимость = Ложь;
		Элементы.ПодразделениеНаРусскомЯзыке.Видимость = Ложь;
		Элементы.ПодразделениеНаКазахскомЯзыке.Видимость = Ложь;
	ИначеЕсли КодСоциальногоОтпуска = "1" Тогда
		Элементы.ДатаПервогоРабочегоДня.Видимость = Истина;
		Элементы.ВыходныеДниЗаПериодНетрудоспособности.Видимость = Истина;
		Элементы.НомерТабеля.Видимость = Истина;
		Элементы.ПодразделениеНаРусскомЯзыке.Видимость = Истина;
		Элементы.ПодразделениеНаКазахскомЯзыке.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФормы(ВидОперации)
	
	ДанныеФормы = Новый Структура("ВыходныеДниЗаПериодНетрудоспособности,
	|ДатаПервогоРабочегоДня,
	|КодСоциальногоОтпуска,
	|НеРаботалПо,
	|НеРаботалС,
	|НомерТабеля,
	|ПодразделениеНаКазахскомЯзыке,
	|ПодразделениеНаРусскомЯзыке,
	|ДатаРегистрации,
	|Статус,
	|ИдентификаторСоциальногоОтпуска");
	
	ЗаполнитьЗначенияСвойств(ДанныеФормы, ЭтаФорма);
	Если ВидОперации = "Добавление" Тогда
		ДанныеФормы.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.ОжидаетПодписи");
	КонецЕсли;
	
	Возврат ДанныеФормы;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Удалить" Тогда
		СтруктураОтвета = Новый Структура("ПодтверждениеУдаления", Истина);
		
		ЭтаФорма.Закрыть(СтруктураОтвета);
	ИначеЕсли Результат = "ПодписатьИУдалить" Тогда
		ВызовФормыПодписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НеРаботалС > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала отпуска не должна быть позже текущего дня'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НеРаботалС);
	КонецЕсли;
	
	Если ДатаПервогоРабочегоДня <> '00010101' И НачалоДня(НеРаботалПо) > ДатаПервогоРабочегоДня Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата первого рабочего дня не должна быть раньше даты окончания отпуска'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаПервогоРабочегоДня);
	КонецЕсли;
	
	Если НеРаботалПо <> '00010101' И НеРаботалС > НеРаботалПо Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала отпуска не должна быть позже даты окончания'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НеРаботалС);
	КонецЕсли;
	
	Если КодСоциальногоОтпуска = "1" Тогда
		Если ДатаПервогоРабочегоДня = Дата('00010101') Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Поле ""Дата первого рабочего дня"" не заполнено'");
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаПервогоРабочегоДня);
		КонецЕсли;
		
		Если НомерТабеля = "" Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Поле ""Номер табеля"" не заполнено'");
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НомерТабеля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, ЭлементФормы)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле = ЭлементФормы.Имя;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовФормыПодписи()
	
	Если ВидОперации = "Удаление" Тогда
		ПараметрыСоциальногоОтпуска = ПараметрыУдаленияСоциальногоОтпуска();
		СтруктураДанныхДляПодписи = ПолучитьДанныеДляУдаленияСоциальногоОтпуска(ПараметрыСоциальногоОтпуска);
	Иначе
		ПараметрыСоциальногоОтпуска = ПараметрыРегистрацииСоциальногоОтпуска();
		СтруктураДанныхДляПодписи = ПолучитьДанныеДляРегистрацииСоциальногоОтпуска(ПараметрыСоциальногоОтпуска);
	КонецЕсли;
	
	ДанныеДляПодписи = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписи;
	КонецЕсли;
	
	ПараметрыИмпорта = Новый Структура("bin, dateFrom, dateTo",
		БИНОрганизации,
		Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"),
		Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"));
	
	СтруктураДанныхДляПодписи = ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыИмпорта);
	ДанныеДляПодписиЗапросДоговора = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписиЗапросДоговора;
	КонецЕсли;
	
	ДанныеДляПодписиМассив = Новый Массив;
	ДанныеДляПодписиМассив.Добавить(ДанныеДляПодписи);
	ДанныеДляПодписиМассив.Добавить(ДанныеДляПодписиЗапросДоговора);
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", ДанныеДляПодписиМассив);
	Если ЗапросСертификатаТребуется Тогда
		ПродолжитьОтправкуПослеВводаДанныхЭЦП = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеВводаДанныхЭЦП", ЭтаФорма, ПараметрыЗаписи);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуПослеВводаДанныхЭЦП, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ДанныеДляПодписиМассив, БИНОрганизации);
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРегистрацииСоциальногоОтпуска()
	
	ПараметрыСоциальногоОтпуска = Новый Структура();
	ПараметрыСоциальногоОтпуска.Вставить("employerData", Новый Структура("bin,kato,employerType", БИНОрганизации, КодРегиона, ТипРаботодателя));
	ПараметрыСоциальногоОтпуска.Вставить("contractId", Идентификатор);
	ПараметрыСоциальногоОтпуска.Вставить("beginDate", НеРаботалС);
	ПараметрыСоциальногоОтпуска.Вставить("endDate", НеРаботалПо);
	ПараметрыСоциальногоОтпуска.Вставить("dSocialLeaveTypeId", КодСоциальногоОтпуска);
	Если КодСоциальногоОтпуска = "1" Тогда
		ПараметрыСоциальногоОтпуска.Вставить("sheetNumber", НомерТабеля);
		ПараметрыСоциальногоОтпуска.Вставить("daysOffCount", Строка(ВыходныеДниЗаПериодНетрудоспособности));
		ПараметрыСоциальногоОтпуска.Вставить("workDate", ДатаПервогоРабочегоДня);
		ПараметрыСоциальногоОтпуска.Вставить("departmentNameRu", ПодразделениеНаРусскомЯзыке);
		ПараметрыСоциальногоОтпуска.Вставить("departmentNameKz", ПодразделениеНаКазахскомЯзыке);
	КонецЕсли;
	
	Возврат ПараметрыСоциальногоОтпуска;
	
КонецФункции

&НаКлиенте
Функция ПараметрыУдаленияСоциальногоОтпуска()
	
	ПараметрыСоциальногоОтпуска = Новый Структура();
	ПараметрыСоциальногоОтпуска.Вставить("employerData", Новый Структура("bin,kato,employerType", БИНОрганизации, КодРегиона, ТипРаботодателя));
	ПараметрыСоциальногоОтпуска.Вставить("employeeData", Новый Структура("iin", ИИНРаботника));
	ПараметрыСоциальногоОтпуска.Вставить("socialLeaveId", ИдентификаторСоциальногоОтпуска);
	
	Возврат ПараметрыСоциальногоОтпуска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляРегистрацииСоциальногоОтпуска(ПараметрыСоциальногоОтпуска)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляРегистрацииСоциальногоОтпускаЭТД(ПараметрыСоциальногоОтпуска);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляУдаленияСоциальногоОтпуска(ПараметрыСоциальногоОтпуска)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляУдаленияСоциальногоОтпускаЭТД(ПараметрыСоциальногоОтпуска);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыДоговора)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляИмпортаЭТД(ПараметрыДоговора);
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОтправкуПослеВводаДанныхЭЦП(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_КриптопровайдерДляСписка(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		КонецЕсли;
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, ПараметрыЗаписи);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
		Результат = Новый Массив;
		Результат.Добавить(ТекстСообщения);
		
		ОбработкаРезультатаЗапроса(Результат, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗапроса(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи социального отпуска: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	ИначеЕсли Результат[0] = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи социального отпуска.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	ИначеЕсли Лев(Результат[0], 1) <> "<" Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи социального отпуска: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат[0]);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаЗапросаНаСервере(Результат, ПараметрыЗаписи);
	
	ОбработкаРезультатаЗапросаЗавершение();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗапросаНаСервере(Результат, ПараметрыЗаписи)
	
	БИНОрганизацииДляСервиса = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		БИНОрганизацииДляСервиса = ЭТДСервер.БИНОрганизации(Организация);
	КонецЕсли;
	
	ДанныеАутентификации = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеАутентификацииЭТД(БИНОрганизацииДляСервиса);
	
	Если ВидОперации = "Удаление" Тогда
		МетодЭТД = "remove";
	ИначеЕсли ВидОперации = "Добавление" ИЛИ Статус = Перечисления.СтатусыДополнительныхДокументовЭТД.ОжидаетПодписи Тогда
		МетодЭТД = "create";
	Иначе
		// редактирование не описано в документации
		//МетодЭТД = "edit";
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 2 Тогда
		ДанныеОперации = Результат[0];
		ЗапросДоговора = Результат[1];
	Иначе
		ДанныеОперации = Результат[0];
		ЗапросДоговора = "";
	КонецЕсли;
	
	ИдентификаторСоциальногоОтпуска = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписаннуюОперациюЭТД(
		ДанныеАутентификации,
		ЗапросДоговора,
		ДанныеОперации,
		Идентификатор,
		"socialleave",
		МетодЭТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗапросаЗавершение()
	
	ДанныеФормы = Неопределено;
	Если ВидОперации <> "Удаление"
		И (Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.ОжидаетПодписи")
		ИЛИ ЗначениеЗаполнено(МетодЭТД)) Тогда
		ДанныеФормы = ПолучитьДанныеФормы(ВидОперации);
		Если ЗначениеЗаполнено(ИдентификаторСоциальногоОтпуска) Тогда
			ДанныеФормы.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.Подписан");
			Если МетодЭТД = "create" Тогда
				ДанныеФормы.ДатаРегистрации = ОбщегоНазначенияКлиент.ДатаСеанса();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперации = "Удаление" Тогда
		ДанныеФормы = Новый Структура("ПодтверждениеУдаления", Истина);
	КонецЕсли;
	
	ЭтаФорма.Закрыть(ДанныеФормы);
	
КонецПроцедуры

#КонецОбласти
