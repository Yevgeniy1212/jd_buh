#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЭТДСервер.ПриЧтенииНаСервереЭТД(ЭтаФорма, ТекущийОбъект);
	
	ЗаполнениеРеквизитовПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭТДСервер.ПослеЗаписиНаСервереЭТД(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	ЗаполнитьТипСоциальногоОтпуска();
	ЗаполнитьНаименованиеСрокаДействияПролонгации();
	ЗаполнитьНаименованиеГосударственногоОргана();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнениеРеквизитовПриЧтенииНаСервере();
	КонецЕсли;
	
	Если Объект.ЗагруженИзЕСУТД Тогда
		Элементы.ЗагруженИзЕСУТДНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗагруженИзЕСУТДНадпись.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоДополнительноеСоглашение Тогда
		Элементы.ЯвляетсяЭТДФлажок.Видимость = Истина;
	Иначе
		Элементы.ЯвляетсяЭТДФлажок.Видимость = Ложь;
	КонецЕсли;
	
	ЭТДСервер.ПриСозданииНаСервереЭТД(ЭтотОбъект);
	
	ЗаполнитьСпискиВыбораФормы();
	
	ЗаполнитьДополнительныеСоглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Сформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");
	ДоступноРедактирование = (Объект.Ссылка.Пустая() ИЛИ Объект.Статус = Сформирован);
	УстановитьЗаголовок(ЭтаФорма);
	УстановитьВидимостьИДоступностьЭлементов(ДоступноРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЭТД_ЗаписьЭТД", , ЭтаФорма);
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НазначитьПрофессиональнуюВыплату Тогда
		ПроверитьЗаполнениеПрофессиональнойВыплаты(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
	
	Если ПараметрыЗаписи.количество()<2 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФоновоеЗаданиеЭТД_ОбновлениеСтатусов" Тогда
		ЭтаФорма.Прочитать();
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован") Тогда
			УстановитьВидимостьИДоступностьЭлементов(Ложь);
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован") Тогда
			УстановитьВидимостьИДоступностьЭлементов(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ПерезаполнитьРеквизитыДолжности();
	
	ТекстВопроса = НСтр("ru='Перезаполнить таблицы навыков?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПерезаполненияТаблицыНавыков", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	Объект.Должность = ПолучитьДолжностьОрганизации(Объект.ДолжностьПоШтатномуРасписанию);
	
	ПерезаполнитьРеквизитыДолжности();
	
	ТекстВопроса = НСтр("ru='Перезаполнить таблицы навыков?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПерезаполненияТаблицыНавыков", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполненияТаблицыНавыков(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНавыкиПоНастройкамНаСервере();
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеУвольненияПриИзменении(Элемент)
	 ПерезаполнитьРеквизитыПричиныРасторжения();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПерезаполнитьРеквизитыОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодДолжностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ПрофессийXML");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор профессий'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.КодДолжности);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораКодаПрофессии",
	ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура КодПричиныРасторженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОснованияУвольнения");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Основания увольнения'"));
	ПараметрыФормы.Вставить("Уровень",     2);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.КодПричиныРасторжения);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПодобратьИзКлассификатораКодПричиныРасторженияЗавершение",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеНавыкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ПрофессиональныеНавыки");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Специальные навыки'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Истина);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПодобратьИзКлассификатораЗавершениеСпец",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеНавыкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьЗначенияСвойств(Объект.СпециальныеНавыки.Добавить(), НавыкСтрокой(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНавыкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОбщиеНавыки");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Общие навыки'"));
	ПараметрыФормы.Вставить("Уровень",     3);
	ПараметрыФормы.Вставить("ВыборГруппы", Истина);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
		ПараметрыФормы,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ПодобратьИзКлассификатораЗавершениеОбщ",
		ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораЗавершениеСпец(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодобратьИзКлассификатораЗавершениеСпецНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзКлассификатораЗавершениеСпецНаСервере(Результат, ДополнительныеПараметры)
	
	ТаблицаНавыков = ПолучитьИзВременногоХранилища(Результат);
	Если ТипЗнч(ТаблицаНавыков) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНавыков Цикл
			НоваяСтрока = Объект.СпециальныеНавыки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		УдалитьИзВременногоХранилища(Результат);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораЗавершениеОбщ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодобратьИзКлассификатораЗавершениеОбщНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзКлассификатораЗавершениеОбщНаСервере(Результат, ДополнительныеПараметры)
	
	ТаблицаНавыков = ПолучитьИзВременногоХранилища(Результат);
	Если ТипЗнч(ТаблицаНавыков) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНавыков Цикл
			НоваяСтрока = Объект.ОбщиеНавыки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		УдалитьИзВременногоХранилища(Результат);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНавыкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьЗначенияСвойств(Объект.ОбщиеНавыки.Добавить(), НавыкСтрокой(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Функция НавыкСтрокой(ВыбранноеЗначение)
	
	СтрокаНавыков = Новый Структура;
	СтрокаНавыков.Вставить("КодНавыка",   ВыбранноеЗначение.Код);
	СтрокаНавыков.Вставить("Наименование",ВыбранноеЗначение.Наименование);
	
	Возврат СтрокаНавыков;
	
КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования
		, ЭтотОбъект
		, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныйНомерПриИзменении(Элемент)
	
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключенияПриИзменении(Элемент)
	
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ПерезаполнитьРеквизитыРаботника(Истина);
	УстановитьВидимостьИДоступностьЭлементов(Истина);
	ОпределениеНеполногоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРабочегоВремениПриИзменении(Элемент)
	
	ОпределениеНеполногоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.МестоРаботы", 
		НСтр("ru = 'Место работы'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИныеИзмененияУсловийТрудаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.ИныеИзмененияУсловийТруда", 
		НСтр("ru = 'Иные изменения условий труда'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ЭТДКлиент.ПолучитьСписокВыбораДокументОснованиеЭТД();
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыВыбораДокументаОснования", ЭтотОбъект);
	
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа документа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораСотрудника(Объект.Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЭТД = Элемент.ТекущиеДанные.Значение;
	ПараметрыФормы = Новый Структура("Ключ", ЭТД);
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоРабочегоВремениПриИзменении(Элемент)
	
	Объект.ДоляНеполногоРабочегоВремени = Строка(ДоляНеполногоРабочегоВремениЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура КодДолжностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.КодДолжности = Текст;
	Объект.НаименованиеДолжности = ЭТДВызовСервера.ПолучитьНаименованиеДолжности(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияТрудаПриИзменении(Элемент)
	
	ЭТДКлиентСервер.ЗаполнитьУсловияТруда(Объект.УсловияТруда, УсловияТрудаСтрока);
	
	ОпределениеТяжелыхУсловийТруда();
	
	ОчиститьРеквизитыПрофвыплатыДляОсновныхДоговоров = (УсловияТрудаСтрока = "0") И НЕ Объект.ЭтоДополнительноеСоглашение;
	ОчиститьРеквизитыПрофвыплатыДляДопсоглашений = (УсловияТрудаСтрока <> "0") И Объект.ЭтоДополнительноеСоглашение
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован");
	Если ОчиститьРеквизитыПрофвыплатыДляОсновныхДоговоров ИЛИ ОчиститьРеквизитыПрофвыплатыДляДопсоглашений Тогда
		НазначитьПрофессиональнуюВыплату = Ложь;
		НазначитьПрофессиональнуюВыплатуПриИзменении(Неопределено);
	Иначе
		ПроверитьДоступностьПрофессиональнойВыплаты();
		Сформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");
		ЗапрещеноРедактированиеОсновныхРеквизитов = НЕ (Объект.Ссылка.Пустая() ИЛИ Объект.Статус = Сформирован);
		УстановитьВидимостьИДоступностьЭлементов(Истина, ЗапрещеноРедактированиеОсновныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТяжелыхУсловийТрудаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ВредныхУсловийТруда");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор вредных условий труда'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.КодТяжелыхУсловийТруда);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораКодаВредныхУсловийТруда",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодТяжелыхУсловийТрудаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.КодТяжелыхУсловийТруда = Текст;
	Объект.НаименованиеТяжелыхУсловийТруда = ЭТДВызовСервера.ПолучитьНаименованиеТяжелыхУсловийТруда(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразованиеИностранцаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОбразованияИностранцев");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор образования иностранцев'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.ОбразованиеИностранца);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораОбразованияИностранца",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразованиеИностранцаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.ОбразованиеИностранца = Текст;
	Объект.НаименованиеОбразованияИностранца = ЭТДВызовСервера.ПолучитьНаименованиеОбразованияИностранца(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПривлеченияИностранцаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОснованияДляПривлеченияИностранца");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор основания для привлечения иностранца'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.ОснованиеПривлеченияИностранца);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораОснованияДляПривлеченияИностранца",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПривлеченияИностранцаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.ОснованиеПривлеченияИностранца = Текст;
	Объект.НаименованиеОснованияПривлеченияИностранца = ЭТДВызовСервера.ПолучитьНаименованиеОснованияПривлеченияИностранца(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаРасторженияЦифровизацияФлажокПриИзменении(Элемент)
	
	Если ПричинаРасторженияЦифровизацияФлажок = Истина Тогда
		Объект.ПричинаРасторженияЦифровизация = "true";
	Иначе
		Объект.ПричинаРасторженияЦифровизация = "false";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеЗаявленияРаботникаФлажокПриИзменении(Элемент)
	
	Если НаличиеЗаявленияРаботникаФлажок = Истина Тогда
		Объект.НаличиеЗаявленияРаботника = "1";
	Иначе
		Объект.НаличиеЗаявленияРаботника = "0";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласиеРаботникаФлажокПриИзменении(Элемент)
	
	Если СогласиеРаботникаФлажок = Истина Тогда
		Объект.СогласиеРаботника = "1";
	Иначе
		Объект.СогласиеРаботника = "0";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласиеРаботодателяФлажокПриИзменении(Элемент)
	
	Если СогласиеРаботодателяФлажок = Истина Тогда
		Объект.СогласиеРаботодателя = "1";
	Иначе
		Объект.СогласиеРаботодателя = "0";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяЭТДФлажокПриИзменении(Элемент)
	
	Если ЯвляетсяЭТДФлажок = Истина Тогда
		Объект.ЯвляетсяЭТД = "true";
	Иначе
		Объект.ЯвляетсяЭТД = "false";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПрофессиональнуюВыплатуПриИзменении(Элемент)
	
	Если НЕ НазначитьПрофессиональнуюВыплату Тогда
		НаличиеЗаявленияРаботникаФлажок = Ложь;
		СогласиеРаботникаФлажок = Ложь;
		СогласиеРаботодателяФлажок = Ложь;
		Объект.НаличиеЗаявленияРаботника = "";
		Объект.СогласиеРаботника = "";
		Объект.СогласиеРаботодателя = "";
		Объект.НомерТелефонаРаботника = "";
		Объект.НомерТелефонаМенеджера = "";
		Объект.НаименованиеБанка = "";
		Объект.БИКБанка = "";
		Объект.БанковскийСчетРаботника = "";
		
		Если Элементы.ГруппаПрофессиональнаяВыплата.Видимость Тогда
			ТекстСообщения = НСтр("ru = 'Реквизиты вкладки ""Профессиональная выплата"" были очищены.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Элемент = Неопределено Тогда
			Элементы.НазначитьПрофессиональнуюВыплату.Доступность = Ложь;
			Элементы.НазначитьПрофессиональнуюВыплатуДоп.Доступность = Ложь;
		КонецЕсли;
		Элементы.ГруппаПрофессиональнаяВыплата.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПрофессиональнаяВыплата.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПрофессиональнуюВыплатуДопПриИзменении(Элемент)
	
	НазначитьПрофессиональнуюВыплатуПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДСсылкаНаФайлНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Для добавления файла необходимо предварительно записать документ.
		|Записать этот документ?'");
		Оповещение = Новый ОписаниеОповещения("ПрисоединенныеФайлыЭТДСсылкаНаФайлНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	Иначе
		ПрисоединенныеФайлыЭТДСсылкаНаФайлНачалоВыбораЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПрисоединенныеФайлыЭТДТекущиеДанные = Элементы.ПрисоединенныеФайлыЭТД.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ПрисоединенныеФайлыЭТДТекущиеДанные.ТипДокумента) Тогда
			ПрисоединенныеФайлыЭТДТекущиеДанные.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасторженияПриИзменении(Элемент)
	
	НазначитьПрофессиональнуюВыплату = СотрудникПодходитДляПрофессиональнойВыплаты;
	НазначитьПрофессиональнуюВыплатуПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПричиныРасторженияПриИзменении(Элемент)
	
	НазначитьПрофессиональнуюВыплату = СотрудникПодходитДляПрофессиональнойВыплаты;
	НазначитьПрофессиональнуюВыплатуПриИзменении(Неопределено);
	
	// согласно документации веб-сервиса 1С ЭТД значение отправляется только при данном коде причины расторжения
	ДоступнаПричинаРасторженияЦифровизация = (Объект.КодПричиныРасторжения = "03-002");
	Если ДоступнаПричинаРасторженияЦифровизация Тогда
		Элементы.ПричинаРасторженияЦифровизацияФлажок.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ПричинаРасторженияЦифровизацияФлажок.ТолькоПросмотр = Истина;
		ПричинаРасторженияЦифровизацияФлажок = Ложь;
		Объект.ПричинаРасторженияЦифровизация = "false";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПричиныРасторженияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.КодПричиныРасторжения = Текст;
	Объект.НаименованиеПричиныРасторжения = ЭТДВызовСервера.ПолучитьНаименованиеПричиныРасторжения(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТолькоПросмотр И Поле.Имя = "ПодтверждающиеДокументыСсылкаНаФайл" Тогда
		СтандартнаяОбработка = Ложь;
		СсылкаНаФайл = Элемент.ТекущиеДанные.СсылкаНаФайл;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаФайл) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", СсылкаНаФайл);
		
		ОткрытьФорму("Справочник.ЭТДПрисоединенныеФайлы.ФормаОбъекта",
				СтруктураПараметров,
				Поле,
				Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоциальныеОтпускаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьСоциальныйОтпуск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановленияНаРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВосстановлениеДоговора(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ПроверкаПройдена = ?(Объект.ЭтоДополнительноеСоглашение,
		ПроверитьЗаполнениеПриОтправкеДопСоглашения(),
		ПроверитьЗаполнениеПриОтправкеЭТД());
	
	Если НЕ ПроверкаПройдена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		ВидОперации = "СозданиеИзменениеДопСоглашения";
	Иначе
		ВидОперации = "СозданиеИзменениеДоговора";
	КонецЕсли;
	
	Если ВидОперации = "СозданиеИзменениеДопСоглашения" И Объект.СогласиеРаботодателя = "1" Тогда
		ТекстВопроса = НСтр("ru = 'Исправление данного соглашения будет недоступно в связи с назначением профессиональной выплаты.
		|Продолжить отправку?'");
		Оповещение = Новый ОписаниеОповещения("ПодписатьИОтправитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	Иначе
		ПодписатьИОтправитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расторгнуть(Команда)
	
	Если НЕ ПроверитьЗаполнениеПриРасторженииЭТД() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВидОперации = "РасторжениеДоговора";
	
	ПараметрыЗаписи = ЗаписатьПараметрыСертификата();
	ПродолжитьОтправку(ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура Исправить(Команда)
	
	УстановитьВидимостьИДоступностьЭлементов(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПараметрыСертификата()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ВидОперации", ВидОперации);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОтправку(ПараметрыЗаписи)
	
	ПередЗаписьюНаСервереНачало(ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ДанныеДляПодписи") Тогда
		ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
		
		Если ЗапросСертификатаТребуется Тогда
			ПродолжитьОтправкуПослеВводаДанныхЭЦП = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеВводаДанныхЭЦП", ЭтаФорма, ПараметрыЗаписи);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Объект.Организация);
			ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуПослеВводаДанныхЭЦП, ДополнительныеПараметры);
		Иначе
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации);
			
			ОбработатьПодписьЭЦП(ПодписанныеДанные, ПараметрыЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодписьЭЦП(Результат, ПараметрыЗаписи) Экспорт
	
	Если Лев(Результат, 1) = "<" Тогда
		ПередЗаписьюНаСервереПродолжение(ПараметрыЗаписи, Результат);	
		
		ПроверитьДоступностьПрофессиональнойВыплаты();
		УстановитьВидимостьИДоступностьЭлементов(Ложь);
		Записать();
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи договора, договор не подписан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка подписи договора: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавыкиПоПрофилю(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНавыкиПоПрофилюЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПрофилиНавыковЭТД.ФормаВыбора",,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавыкиПоПрофилюЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНавыкиПоПрофилюНаСервере(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеЭТД(Команда)
	
	Если НЕ Объект.ЗагруженИзЕСУТД Тогда
		ТекстСообщения = НСтр("ru = 'Редактирование доступно только для ЭТД, загруженных из ЕСУТД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Расторгнут") Тогда
		ТекстСообщения = НСтр("ru = 'Редактирование доступно только для ЭТД, не расторгнутых в ЕСУТД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ДокументЗаблокирован Тогда
		ТекстСообщения = НСтр("ru = 'Редактирование доступно только для ЭТД без назначенной профессиональной выплаты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	РедактироватьДанныеЭТД = Истина;
	УстановитьВидимостьИДоступностьЭлементов(РедактироватьДанныеЭТД);
	
	Элементы.РедактироватьДанныеЭТД.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЭТДПоДаннымЕСУТД(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета") Тогда
		ТекстСообщения = НСтр("ru = 'Перезаполнение доступно только для ЭТД, зарегистрированных в ЕСУТД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		РеквизитыОсновногоЭТД = ПолучитьРеквизитыОсновногоЭТД(Объект.ОсновнойЭТД, "ДатаЗаключения,БИНОрганизации");
		ДатаЗаключения = РеквизитыОсновногоЭТД.ДатаЗаключения;
		БИНОрганизации = РеквизитыОсновногоЭТД.БИНОрганизации;
	Иначе
		ДатаЗаключения = Объект.ДатаЗаключения;
		БИНОрганизации = Объект.БИНОрганизации;
	КонецЕсли;
	
	ПараметрыИмпорта = Новый Структура("bin, dateFrom, dateTo",
		БИНОрганизации,
		Формат(ДатаЗаключения, "ДФ=yyyy-MM-dd"),
		Формат(ДатаЗаключения, "ДФ=yyyy-MM-dd"));
	
	СтруктураДанныхДляПодписи = ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыИмпорта);
	ДанныеДляПодписи = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписи;
	КонецЕсли;
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ВидОперации", "ПерезаполнениеДоговора");
	Если ЗапросСертификатаТребуется Тогда
		ПродолжитьОтправкуПослеВводаДанныхЭЦП = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеВводаДанныхЭЦП", ЭтаФорма, ПараметрыЗаписи);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Объект.Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуПослеВводаДанныхЭЦП, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ДанныеДляПодписи, БИНОрганизации);
		
		ОбработатьПодписьЭЦП(ПодписанныеДанные, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоциальныйОтпуск(Команда)
	
	ОткрытьФормуСоциальногоОтпуска("Добавление");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПролонгацию(Команда)
	
	ОткрытьФормуПролонгации("Добавление");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВосстановлениеДоговора(Команда)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Расторгнут") Тогда
		ТекстСообщения = НСтр("ru = 'Восстановление договора доступно только для ЭТД со статусом ""Расторгнут в ЕСУТД"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Для отмены ошибочного расторжения необходимо обратиться с официальным письмом в МТСЗН РК'");
	ТекстЗаголовка = НСтр("ru = 'Восстановление договора'");
	Оповещение = Новый ОписаниеОповещения("ДобавитьВосстановлениеДоговораПродолжение", ЭтотОбъект);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Восстановить договор'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,,, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоциальныйОтпуск(Команда)
	
	ОткрытьФормуСоциальногоОтпуска("Редактирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоциальныйОтпуск(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован") Тогда
		ОткрытьФормуСоциальногоОтпуска("Просмотр");
	Иначе
		ОткрытьФормуСоциальногоОтпуска("ТолькоПросмотр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВосстановлениеДоговора(Команда)
	
	ОткрытьФормуВосстановления("ТолькоПросмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСоциальныйОтпуск(Команда)
	
	ОткрытьФормуСоциальногоОтпуска("Удаление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЭТД(Команда)
	
	ОчиститьСообщения();
	
	РезультатРаботыЗадания = ОбновитьСтатусЭТДНаСервере(НЕ Объект.ЭтоДополнительноеСоглашение, Объект.Ссылка, УникальныйИдентификатор);
	
	Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
		РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Обновление статусов отправленных ЭТД'"));
		
		СтруктураОповещений = Новый Структура("ФоновоеЗаданиеЭТД_ОбновлениеСтатусов");
		РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
	КонецЕсли;
	
	ЭТДКлиент.ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуПослеВводаДанныхЭЦП(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Объект.Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации, ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации, ПараметрыКлюча);
		КонецЕсли;
		
		ОбработатьПодписьЭЦП(ПодписанныеДанные, ПараметрыЗаписи);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
		
		ОбработатьПодписьЭЦП(ТекстСообщения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеРеквизитов

&НаСервере
Процедура ЗаполнитьСпискиВыбораФормы()
	
	СписокСрокиДействия = ЭТДСервер.СписокВыборкаСрокиДействия(Объект.ЭтоДополнительноеСоглашение);
	ЗаполняемыйСписокВыбора = Элементы.СрокДействия.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокСрокиДействия Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокОтношенияКВоинскойСлужбе = СписокВыборкаОтношениеКВоинскойСлужбе();
	ЗаполняемыйСписокВыбора = Элементы.ОтношениеКВоинскойСлужбе.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокОтношенияКВоинскойСлужбе Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокРежимРабочегоВремени = СписокВыборкаРежимРабочегоВремени();
	ЗаполняемыйСписокВыбора = Элементы.РежимРабочегоВремени.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокРежимРабочегоВремени Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокУсловияТруда = СписокВыборкаУсловияТруда();
	ЗаполняемыйСписокВыбора = Элементы.УсловияТруда.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокУсловияТруда Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокДистанционнаяРабота = СписокВыборкаДистанционнаяРабота();
	ЗаполняемыйСписокВыбора = Элементы.ДистанционнаяРабота.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокДистанционнаяРабота Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокТипыРаботодателя = СписокВыборкаТипыРаботодателя();
	ЗаполняемыйСписокВыбора = Элементы.ТипРаботодателя.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокТипыРаботодателя Цикл
		ЗаполняемыйСписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ПерезаполнитьРеквизитыОрганизации();
	ПерезаполнитьРеквизитыРаботника();
	ПерезаполнитьРеквизитыПричиныРасторжения();
	ЗаполнитьНавыкиПоНастройкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыОрганизации()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаЗаключения), Объект.ДатаЗаключения, ТекущаяДатаСеанса());
	ДанныеДляАвтозаполненияЭТД = ЭТДСервер.ПолучитьДанныеДляАвтозаполненияЭТД(Объект.Организация, ПериодДанных);
	Если НЕ Элементы.РеквизитыРаботодателя.ТолькоПросмотр Тогда
		Объект.БИНОрганизации = ?(Объект.Организация.Пустая(), "", ЭТДСервер.БИНОрганизации(Объект.Организация));
		Объект.КодРегиона = ДанныеДляАвтозаполненияЭТД.КодРегиона;
		Объект.ТипРаботодателя = ДанныеДляАвтозаполненияЭТД.ТипРаботодателя;
	КонецЕсли;
	Объект.МестоРаботы = ДанныеДляАвтозаполненияЭТД.МестоРаботы;
	Объект.КодРегионаРабочегоМеста = ДанныеДляАвтозаполненияЭТД.КодРегиона;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыРаботника(ЗаменитьЗначения = Ложь)
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
	ДополнительныеДанныеСотрудника = ЭТДСервер.ПолучитьДанныеСотрудника(ПериодДанных, Объект.Сотрудник);
	ПерезаполняемыеДанныеСотрудника = ЭТДСервер.ПолучитьПерезаполняемыеДанныеСотрудника();
	ГражданинРК = ЭТДСервер.ПолучитьПризнакГражданстваРК(Объект.Сотрудник, ПериодДанных);
	ЗаполненыРеквизитыИностранца = ЗаполненностьРеквизитовИностранца();
	
	ПроверитьДоступностьПрофессиональнойВыплаты();
	
	Если ДополнительныеДанныеСотрудника.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанныхСотрудника Из ДополнительныеДанныеСотрудника Цикл
			
			Если ТипЗнч(СтрокаДанныхСотрудника.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Если СтрокаДанныхСотрудника.Ключ = "ОбщиеНавыки" Тогда
					Объект.ОбщиеНавыки.Загрузить(СтрокаДанныхСотрудника.Значение);
				ИначеЕсли СтрокаДанныхСотрудника.Ключ = "СпециальныеНавыки" Тогда
					Объект.СпециальныеНавыки.Загрузить(СтрокаДанныхСотрудника.Значение);
				КонецЕсли;
				
			ИначеЕсли ЗаменитьЗначения ИЛИ (ПерезаполняемыеДанныеСотрудника.Свойство(СтрокаДанныхСотрудника.Ключ) <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанныхСотрудника.Значение)) ИЛИ НЕ ЗначениеЗаполнено(Объект[СтрокаДанныхСотрудника.Ключ]) Тогда
				
				Объект[СтрокаДанныхСотрудника.Ключ] = СтрокаДанныхСотрудника.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьПрофессиональнойВыплаты()
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		ОсновнойЭТД = Объект.ОсновнойЭТД;
		ВредныеУсловияТруда = ОсновнойЭТД.УсловияТруда.Количество() > 0 И ОсновнойЭТД.УсловияТруда[0].УсловиеТруда <> "0" И УсловияТрудаСтрока = "0";
	Иначе
		ВредныеУсловияТруда = (УсловияТрудаСтрока <> "0");
	КонецЕсли;
	Если ВредныеУсловияТруда Тогда
		Если Объект.ЭтоДополнительноеСоглашение И (Объект.Статус = Перечисления.СтатусыЭТД.Сформирован ИЛИ Объект.Статус = Перечисления.СтатусыЭТД.ПустаяСсылка())
			ИЛИ НЕ Объект.ЭтоДополнительноеСоглашение И Объект.Статус = Перечисления.СтатусыЭТД.Зарегистрирован Тогда
			ПериодДанных = ?(Объект.ЭтоДополнительноеСоглашение, Объект.ДатаНачала, Объект.ДатаРасторжения);
			Если НЕ ЗначениеЗаполнено(ПериодДанных) Тогда
				ПериодДанных = ТекущаяДатаСеанса();
			КонецЕсли;
			СотрудникПодходитДляПрофессиональнойВыплаты = ЭТДСервер.СотрудникПодходитДляПрофессиональнойВыплаты(Объект.Сотрудник, ПериодДанных);
			НазначитьПрофессиональнуюВыплату = (Объект.СогласиеРаботодателя = "1");
		Иначе // документ не подходит для назначения профессиональной выплаты, проверяем имеющиеся данные
			Если Объект.СогласиеРаботодателя = "1" Тогда
				ПрофессиональнаяВыплатаНазначена = 1;
			Иначе
				ПрофессиональнаяВыплатаНазначена = 2;
			КонецЕсли;
			СотрудникПодходитДляПрофессиональнойВыплаты = (ПрофессиональнаяВыплатаНазначена = 1);
			НазначитьПрофессиональнуюВыплату = (ПрофессиональнаяВыплатаНазначена = 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыДолжности()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
	ИнформацияОКодеДолжности = ЭТДСервер.ПолучитьИнформациюОКодеДолжности(ПериодДанных, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, Объект.Организация);
	Объект.КодДолжности = ИнформацияОКодеДолжности.КодДолжности;
	Объект.НаименованиеДолжности = ИнформацияОКодеДолжности.НаименованиеДолжности;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыПричиныРасторжения()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаРасторжения), Объект.ДатаРасторжения, ТекущаяДатаСеанса());
	ИнформацияОПричинеРасторжения = ЭТДСервер.ПолучитьИнформациюОПричинеРасторжения(ПериодДанных, Объект.Организация, Объект.ОснованиеУвольнения);
	Объект.КодПричиныРасторжения = ИнформацияОПричинеРасторжения.КодПричиныРасторженияЭТД;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеСоглашения()
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭТД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭТД КАК ЭТД
	|ГДЕ
	|	ЭТД.Сотрудник = &Сотрудник
	|	И ЭТД.ЭтоДополнительноеСоглашение";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДополнительныеСоглашения.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеРеквизитовПриЧтенииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоляНеполногоРабочегоВремени) Тогда
		ДоляНеполногоРабочегоВремениЧисло = Число(Объект.ДоляНеполногоРабочегоВремени);
	КонецЕсли;
	
	Если Объект.УсловияТруда.Количество() > 0 Тогда
		УсловияТрудаСтрока = Объект.УсловияТруда[0].УсловиеТруда;
	КонецЕсли;
	
	ПричинаРасторженияЦифровизацияФлажок = (Объект.ПричинаРасторженияЦифровизация = "true");
	НаличиеЗаявленияРаботникаФлажок = (Объект.НаличиеЗаявленияРаботника = "1");
	СогласиеРаботникаФлажок = (Объект.СогласиеРаботника = "1");
	СогласиеРаботодателяФлажок = (Объект.СогласиеРаботодателя = "1");
	ЯвляетсяЭТДФлажок = (Объект.ЯвляетсяЭТД = "true");
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
	ГражданинРК = ЭТДСервер.ПолучитьПризнакГражданстваРК(Объект.Сотрудник, ПериодДанных);
	ЗаполненыРеквизитыИностранца = ЗаполненностьРеквизитовИностранца();
	
	ПроверитьДоступностьПрофессиональнойВыплаты();
	
	ЗаполнитьТипСоциальногоОтпуска();
	ЗаполнитьНаименованиеСрокаДействияПролонгации();
	ЗаполнитьНаименованиеГосударственногоОргана();
	
	РежимОтладки = ОбщегоНазначения.РежимОтладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДСсылкаНаФайлПриИзменении()
	
	Модифицированность = Истина;
	
	ПрисоединенныеФайлыЭТДТекущиеДанные = Элементы.ПрисоединенныеФайлыЭТД.ТекущиеДанные;
	Если ЗначениеЗаполнено(ПрисоединенныеФайлыЭТДТекущиеДанные.СсылкаНаФайл) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ПрисоединенныеФайлыЭТДТекущиеДанные.СсылкаНаФайл);
	Иначе
		ПрисоединенныеФайлыЭТДТекущиеДанные.НаименованиеФайла = "";
		ПрисоединенныеФайлыЭТДТекущиеДанные.ФорматФайла = "";
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыЭТДТекущиеДанные.НаименованиеФайла = ДанныеФайла.Наименование;
	ПрисоединенныеФайлыЭТДТекущиеДанные.ФорматФайла = ДанныеФайла.Расширение;
	
	ПараметрыОтбора = Новый Структура("НаименованиеФайла,ФорматФайла", ДанныеФайла.Наименование, ДанныеФайла.Расширение);
	СтрокиПрисоединяемыхДокументов = Объект.ПрисоединенныеФайлыЭТД.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиПрисоединяемыхДокументов.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Отправка нескольких файлов с одинаковым наименованием не поддерживается.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ПрисоединенныеФайлыЭТДТекущиеДанные.СсылкаНаФайл = Неопределено;
		ПрисоединенныеФайлыЭТДТекущиеДанные.НаименованиеФайла = "";
		ПрисоединенныеФайлыЭТДТекущиеДанные.ФорматФайла = "";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипСоциальногоОтпуска(НомерСтрокиОтпуска = 0)
	
	ТипыСоциальногоОтпуска = ЭТДСервер.СписокВыборкаТипыСоциальногоОтпуска();
	
	Если НомерСтрокиОтпуска > 0 Тогда
		СтрокаОтпуска = Объект.СоциальныеОтпуска.Получить(НомерСтрокиОтпуска - 1);
		СтрокаОтпуска.ТипОтпуска = ТипыСоциальногоОтпуска.НайтиПоЗначению(СтрокаОтпуска.КодСоциальногоОтпуска);
	Иначе
		Для Каждого СтрокаОтпуска Из Объект.СоциальныеОтпуска Цикл
			СтрокаОтпуска.ТипОтпуска = ТипыСоциальногоОтпуска.НайтиПоЗначению(СтрокаОтпуска.КодСоциальногоОтпуска);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеСрокаДействияПролонгации(НомерСтрокиПролонгации = 0)
	
	СрокиДействияПролонгации = ЭТДСервер.СписокВыборкаСрокиДействия(Истина);
	
	Если НомерСтрокиПролонгации > 0 Тогда
		СтрокаПролонгации = Объект.ПролонгацияДоговора.Получить(НомерСтрокиПролонгации - 1);
		СтрокаПролонгации.НаименованиеСрокаДействия = СрокиДействияПролонгации.НайтиПоЗначению(СтрокаПролонгации.СрокДействияПролонгации);
	Иначе
		Для Каждого СтрокаПролонгации Из Объект.ПролонгацияДоговора Цикл
			СтрокаПролонгации.НаименованиеСрокаДействия = СрокиДействияПролонгации.НайтиПоЗначению(СтрокаПролонгации.СрокДействияПролонгации);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеГосударственногоОргана(НомерСтрокиВосстановления = 0)
	
	ТипыГосударственногоОргана = ЭТДСервер.СписокВыборкаТипыГосударственногоОргана();
	
	Если НомерСтрокиВосстановления > 0 Тогда
		СтрокаВосстановления = Объект.ВосстановленияНаРаботе.Получить(НомерСтрокиВосстановления - 1);
		СтрокаВосстановления.НаименованиеГосударственногоОргана = ТипыГосударственногоОргана.НайтиПоЗначению(СтрокаВосстановления.КодГосударственногоОргана);
	Иначе
		Для Каждого СтрокаВосстановления Из Объект.ВосстановленияНаРаботе Цикл
			СтрокаВосстановления.НаименованиеГосударственногоОргана = ТипыГосударственногоОргана.НайтиПоЗначению(СтрокаВосстановления.КодГосударственногоОргана);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеВыбораКодаПрофессии(ДанныеДолжности, Параметры) Экспорт
	
	Если ДанныеДолжности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДолжности.Код <> Объект.КодДолжности Тогда
		Объект.КодДолжности = ДанныеДолжности.Код;
		Объект.НаименованиеДолжности = ДанныеДолжности.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеЭТД()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения договора не должна быть позже текущего дня'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	
	Если Объект.ДатаНачала > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала не должна быть позже текущего дня'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения договора не должна быть позже даты начала договора'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	 
	Если Объект.ДатаОкончания <> '00010101' И Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала не должна быть позже даты окончания'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
		
	Если Объект.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Срок действия"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СрокДействия);
	КонецЕсли;
	
	Если Объект.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код должности"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодДолжности);
	КонецЕсли;
	
	Если Объект.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	ИначеЕсли СтрДлина(Объект.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина кода КАТО должна быть 9 символов'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	КонецЕсли;
	
	Если Объект.КодРегионаРабочегоМеста = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО места работы"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегионаРабочегоМеста);
	ИначеЕсли СтрДлина(Объект.КодРегионаРабочегоМеста) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина кода КАТО должна быть 9 символов'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегионаРабочегоМеста);
	КонецЕсли;
	
	Если Объект.МестоРаботы = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Место работы"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.МестоРаботы);
	КонецЕсли;
	
	Если Объект.СрокДействия = "2" ИЛИ Объект.СрокДействия = "3" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Для срока действия ""На определенный срок не менее одного года"" и ""На определенный срок менее одного года (для субъектов малого предпринимательства)"" должно быть заполнено поле ""Дата окончания""'");
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.НомерДоговора = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Номер договора"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НомерДоговора);
	КонецЕсли;
	
	Если Объект.ИИНРаботника = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""ИИН"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ИИНРаботника);
	КонецЕсли;
	
	Если Объект.БИНОрганизации = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""БИН/ИИН"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.БИНОрганизации);
	КонецЕсли;
	
	Если Элементы.ДолжностьПоШтатномуРасписанию.Видимость Тогда
		ДолжностьЗначение = Объект.ДолжностьПоШтатномуРасписанию;
		ДолжностьЭлемент = Элементы.ДолжностьПоШтатномуРасписанию;
	Иначе
		ДолжностьЗначение = Объект.Должность;
		ДолжностьЭлемент = Элементы.Должность;
	КонецЕсли;
	
	Если ДолжностьЗначение = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Штатная должность"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, ДолжностьЭлемент);
	КонецЕсли;
	
	Если Объект.УсловияТруда.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Условия труда"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.УсловияТруда);
	КонецЕсли;
	
	Если УсловияТрудаСтрока <> "0" И Объект.КодТяжелыхУсловийТруда = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код тяжелых условий труда"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодТяжелыхУсловийТруда);
	КонецЕсли;
	
	Если УсловияТрудаСтрока <> "0" И Объект.ПрисоединенныеФайлыЭТД.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Таблица ""Присоединенные файлы ЭТД"" не заполнена'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ПрисоединенныеФайлыЭТД);
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого ПрисоединенныйФайл Из Объект.ПрисоединенныеФайлыЭТД Цикл
		Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл.СсылкаНаФайл) Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Ссылка на файл"" в строке %1 списка ""Присоединенные файлы ЭТД""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтроки);
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ПрисоединенныеФайлыЭТД);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеДопСоглашения()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения дополнительного соглашения не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойЭТД) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Основной ЭТД"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ОсновнойЭТД);
	КонецЕсли;
	
	Если Объект.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Срок действия"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СрокДействия);
	КонецЕсли;
	
	Если Объект.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код должности"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодДолжности);
	КонецЕсли;
	
	Если Объект.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	ИначеЕсли СтрДлина(Объект.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина поля ""Код КАТО"" должна быть 9 символов.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	КонецЕсли;
	
	Если Объект.КодРегионаРабочегоМеста = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО места работы"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегионаРабочегоМеста);
	ИначеЕсли СтрДлина(Объект.КодРегионаРабочегоМеста) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина кода КАТО должна быть 9 символов'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегионаРабочегоМеста);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала договора не должна быть раньше даты заключения договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
	
	Если НазначитьПрофессиональнуюВыплату Тогда
		ПроверитьЗаполнениеПрофессиональнойВыплаты(ЕстьОшибки);
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого ПрисоединенныйФайл Из Объект.ПрисоединенныеФайлыЭТД Цикл
		Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл.СсылкаНаФайл) Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Ссылка на файл"" в строке %1 списка ""Присоединенные файлы ЭТД""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтроки);
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ПрисоединенныеФайлыЭТД);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеПрофессиональнойВыплаты(ЕстьОшибки)
	
	Если Объект.НаличиеЗаявленияРаботника <> "1" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Наличие заявления работника"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НаличиеЗаявленияРаботникаФлажок);
	КонецЕсли;
	
	Если Объект.СогласиеРаботника <> "1" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Согласие работника на обработку персональных данных"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СогласиеРаботникаФлажок);
	КонецЕсли;
	
	Если Объект.СогласиеРаботодателя <> "1" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Согласие работодателя на социальную выплату"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СогласиеРаботодателяФлажок);
	КонецЕсли;
	
	Если Объект.НомерТелефонаРаботника = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Номер телефона работника"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НомерТелефонаРаботника);
	КонецЕсли;
	
	Если Объект.НомерТелефонаМенеджера = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Номер телефона сотрудника отдела кадров"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НомерТелефонаМенеджера);
	КонецЕсли;
	
	Если Объект.НаименованиеБанка = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Наименование банка"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НаименованиеБанка);
	КонецЕсли;
	
	Если Объект.БИКБанка = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""БИК банка"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.БИКБанка);
	КонецЕсли;
	
	Если Объект.БанковскийСчетРаботника = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Банковский счет работника"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.БанковскийСчетРаботника);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопСоглашенияДоговора(ОсновнойЭТД, Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.ОсновнойЭТД = &ОсновнойЭТД
		|	И ЭТД.ЭтоДополнительноеСоглашение
		|	И ЭТД.Статус = &Статус
		|	И НЕ ЭТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОсновнойЭТД", ОсновнойЭТД);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриРасторженииЭТД()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Объект.КодПричиныРасторжения = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Код причины расторжения не заполнен.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодПричиныРасторжения);
	КонецЕсли;
	
	Если Объект.ДатаРасторжения = '00010101' Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения не заполнена.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	ИначеЕсли Объект.ДатаРасторжения < Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения договора не должна быть раньше даты начала договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаРасторжения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения договора не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	КонецЕсли;
	
	Если НазначитьПрофессиональнуюВыплату Тогда
		ПроверитьЗаполнениеПрофессиональнойВыплаты(ЕстьОшибки);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Ограничивает доступность и видимость на основании входных параметров и текущего статуса документа.
// Если документ сформирован, тогда пользователь:
//  - не может видеть реквизиты расторжения.
//  - Может редактировать все остальные реквизиты.
//  - Может использовать команды "Отправить" 
// Если документ зарегистрирован, тогда пользователь:
//  - Может редактировать реквизиты расторжения (но не у доп. соглашений).
//  - Может использовать команды "Исправить" и "Расторгнуть".
// Если документ расторгнут, тогда пользователь:
//  - Не может его редактировать.
// Параметры:
//  ДоступноРедактирование                    - Булево - Изначальное разрешение на редактирование реквизитов.
//	  При отправке договора на сервер устанавливается в ложь.
//  ЗапрещеноРедактированиеОсновныхРеквизитов - Булево - Доступ к редактированию сотрудника и организации.
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов(Знач ДоступноРедактирование
		, ЗапрещеноРедактированиеОсновныхРеквизитов = Ложь)
	
	ДокументРасторгнут      = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Расторгнут"));
	ДокументЗарегистрирован = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован"));
	ДокументСформирован     = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован"));
	ДокументОжидаетОтвет    = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета"));
	ДокументНовый           = Параметры.Ключ.Пустая();
	ДоступноИсправление     = (ДокументЗарегистрирован И НЕ ДоступноРедактирование);
	ЭтоДополнительноеСоглашение = Объект.ЭтоДополнительноеСоглашение;
	ДоступноРасторжение     = (ДоступноИсправление И НЕ ЭтоДополнительноеСоглашение);
	ДокументЗаблокирован    = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован"))
								И Объект.ЭтоДополнительноеСоглашение И Объект.СогласиеРаботодателя = "1";
	Если ДокументЗаблокирован Тогда
		// назначение профвыплаты запрещает исправления
		ДоступноРедактирование = Ложь;
		ДоступноИсправление = Ложь;
	КонецЕсли;
	
	Элементы.РеквизитыДоговора1.ТолькоПросмотр   = НЕ ДоступноРедактирование;
	Элементы.РеквизитыДоговора2.ТолькоПросмотр   = НЕ ДоступноРедактирование;
	Элементы.ОсновнойЭТД.ТолькоПросмотр          = НЕ ДоступноРедактирование;
	Элементы.ДокументОснование.ТолькоПросмотр    = НЕ ДоступноРедактирование;
	Элементы.НомерДоговора.ТолькоПросмотр        = НЕ ДоступноРедактирование;
	Элементы.ИдентификаторОсновногоЭТД.ТолькоПросмотр = НЕ ДоступноРедактирование;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость     = ДокументСформирован ИЛИ ДокументНовый ИЛИ РедактироватьДанныеЭТД;
	Элементы.ФормаЗаписать.Видимость             = ДокументСформирован ИЛИ ДокументНовый ИЛИ РедактироватьДанныеЭТД;
	Элементы.Отправить.Видимость                 = ДоступноРедактирование И НЕ РедактироватьДанныеЭТД;
	Элементы.Перезаполнить.Видимость             = ДоступноРедактирование;
	Элементы.ЗаполнитьНавыкиПоПрофилю.Видимость  = ДоступноРедактирование;
	Элементы.Исправить.Видимость                 = ДоступноИсправление;
	Элементы.Расторгнуть.Видимость               = ДоступноРасторжение;
	Элементы.ОбновитьСтатусЭТД.Видимость         = ДокументОжидаетОтвет;
	Элементы.РасторжениеДоговора.Видимость       = (ДоступноРасторжение ИЛИ ДокументРасторгнут) И НЕ ЭтоДополнительноеСоглашение;
	Элементы.РасторжениеДоговора.ТолькоПросмотр  = ДокументРасторгнут ИЛИ ДокументЗаблокирован;
	Элементы.ОсновнойЭТД.Видимость               = ЭтоДополнительноеСоглашение;
	Элементы.ИдентификаторОсновногоЭТД.Видимость = ЭтоДополнительноеСоглашение;
	Элементы.ДополнительныеСведения.Видимость    = НЕ ЭтоДополнительноеСоглашение;
	Элементы.РеквизитыРаботодателя.ТолькоПросмотр = ЗапрещеноРедактированиеОсновныхРеквизитов ИЛИ НЕ ДоступноРедактирование;
	Элементы.РеквизитыРаботника.ТолькоПросмотр    = ЗапрещеноРедактированиеОсновныхРеквизитов ИЛИ НЕ ДоступноРедактирование;
	Элементы.НавыкиРаботника.ТолькоПросмотр       = НЕ ДоступноРедактирование;
	Элементы.СлужебныеРеквизиты.Видимость         = РежимОтладки;
	Элементы.СлужебныеРеквизиты.ТолькоПросмотр    = НЕ ДоступноРедактирование;
	Элементы.ГруппаРеквизитыИностранца.Видимость  = (НЕ ГражданинРК ИЛИ ЗаполненыРеквизитыИностранца) И НЕ ЭтоДополнительноеСоглашение;
	Элементы.ТаблицыОсновныхДоговоров.Видимость   = НЕ ЭтоДополнительноеСоглашение;
	Элементы.ПрисоединенныеФайлыЭТД.ТолькоПросмотр = НЕ ДоступноРедактирование;
	Элементы.ГруппаРеквизитыИностранца.ТолькоПросмотр = НЕ ДоступноРедактирование;
	Элементы.ОсобенностиУсловийТруда.ТолькоПросмотр   = НЕ ДоступноРедактирование;
	Элементы.ЯвляетсяЭТДФлажок.ТолькоПросмотр     = НЕ ДоступноРедактирование;
	Элементы.СоциальныеОтпуска.Видимость          = (ДокументЗарегистрирован ИЛИ ДокументРасторгнут) И НЕ ЭтоДополнительноеСоглашение;
	Элементы.ПролонгацияДоговора.Видимость        = (ДокументЗарегистрирован ИЛИ ДокументРасторгнут) И НЕ ЭтоДополнительноеСоглашение;
	Элементы.ВосстановлениеДоговора.Видимость     = (ДокументЗарегистрирован ИЛИ ДокументРасторгнут) И НЕ ЭтоДополнительноеСоглашение;
	// согласно документации веб-сервиса 1С ЭТД значение отправляется только при данном коде причины расторжения
	Элементы.ПричинаРасторженияЦифровизацияФлажок.ТолькоПросмотр = Объект.КодПричиныРасторжения <> "03-002" ИЛИ ДокументЗаблокирован;
	
	// реквизиты передаются только у доп соглашений
	Элементы.ДатаОкончанияДоговора.Видимость = ЭтоДополнительноеСоглашение;
	Элементы.ИныеИзмененияУсловийТруда.Видимость = ЭтоДополнительноеСоглашение;
	
	Элементы.ДоляНеполногоРабочегоВремени.Видимость = (Объект.РежимРабочегоВремени = "3");
	ТяжелыеУсловияТруда = (УсловияТрудаСтрока <> "0");
	Элементы.ГруппаДанныеТяжелыхУсловийТруда.Видимость = ТяжелыеУсловияТруда;
	Элементы.ПрисоединенныеФайлыЭТД.Видимость = ТяжелыеУсловияТруда;
	ВидимостьПрофессиональнойВыплаты = СотрудникПодходитДляПрофессиональнойВыплаты ИЛИ ПрофессиональнаяВыплатаНазначена = 2;
	Элементы.ГруппаПрофессиональнаяВыплата.Видимость = ВидимостьПрофессиональнойВыплаты И НазначитьПрофессиональнуюВыплату;
	Элементы.НазначитьПрофессиональнуюВыплату.Видимость = ВидимостьПрофессиональнойВыплаты;
	Элементы.НазначитьПрофессиональнуюВыплатуДоп.Видимость = ВидимостьПрофессиональнойВыплаты И ЭтоДополнительноеСоглашение;
	ПрофессиональнаяВыплатаТолькоПросмотр = (ПрофессиональнаяВыплатаНазначена <> 0);
	Элементы.ГруппаПрофессиональнаяВыплата.ТолькоПросмотр = ПрофессиональнаяВыплатаТолькоПросмотр;
	Элементы.НазначитьПрофессиональнуюВыплату.ТолькоПросмотр = ПрофессиональнаяВыплатаТолькоПросмотр;
	Элементы.НазначитьПрофессиональнуюВыплатуДоп.ТолькоПросмотр = ПрофессиональнаяВыплатаТолькоПросмотр;
	
	Элементы.СоциальныеОтпускаДобавитьСоциальныйОтпуск.Доступность = ДокументЗарегистрирован;
	Элементы.СоциальныеОтпускаРедактироватьСоциальныйОтпуск.Доступность = ДокументЗарегистрирован;
	Элементы.СоциальныеОтпускаУдалитьСоциальныйОтпуск.Доступность = ДокументЗарегистрирован;
	Элементы.ПролонгацияДоговораДобавитьПролонгацию.Доступность = ДокументЗарегистрирован;
	Элементы.ВосстановленияНаРаботеДобавитьВосстановлениеДоговора.Доступность = ДокументРасторгнут;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовок(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	
	Префикс = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Дополнительное соглашение'"), НСтр("ru='Электронный трудовой договор'"));
	
	Элементы.РеквизитыДоговора1.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Реквизиты допсоглашения'"), НСтр("ru='Реквизиты договора'"));
	
	Элементы.НомерДоговора.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Номер соглашения'"), НСтр("ru='Номер договора'"));
	
	Элементы.ИнформацияОДоговоре.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Информация о дополнительном соглашении'"), НСтр("ru='Информация о трудовом договоре'"));
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Заголовок = Префикс + ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru = ' (Новое)'"), НСтр("ru = ' (Новый)'"));
		Возврат;
	КонецЕсли;
	
	Шаблон = НСтр("ru = '%1 № %2 от %3'");
	
	ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон, Префикс, Объект.НомерДоговора, Формат(Объект.ДатаЗаключения, "ДЛФ=D"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, ЭлементФормы, ЭтоРеквизитОбъекта = Истина)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле = ?(ЭтоРеквизитОбъекта, "Объект.", "") + ЭлементФормы.Имя;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект);
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДоговорПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ЭтоИзменениеДоговора = (Объект.Идентификатор <> "");
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"contract",
		?(ЭтоИзменениеДоговора, "edit", "create"));
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Зарегистрирован;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект, "Соглашение");
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДопСоглашениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ЭтоИзменениеДоговора = (Объект.Идентификатор <> "");
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"supply",
		?(ЭтоИзменениеДоговора, "edit", "create"));
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Зарегистрирован;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереПерезаполнениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ЗапросДоговора)
	
	Если ТекущийОбъект.ЭтоДополнительноеСоглашение Тогда
		Идентификатор = ТекущийОбъект.ИдентификаторОсновногоЭТД;
	Иначе
		Идентификатор = ТекущийОбъект.Идентификатор;
	КонецЕсли;
	ЭТДСервер.ПерезаполнитьЭТДПоДаннымЕСУТД(ТекущийОбъект, ДанныеАутентификации, ЗапросДоговора, Идентификатор);
	
	ТекстСообщения = НСтр("ru = 'Данные текущего ЭТД успешно загружены из ЕСУТД.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереНачало(ПараметрыЗаписи)  
    
    ТекущийОбъект = Объект; 
	
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
		
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереПродолжение(ПараметрыЗаписи, ПодписанныйДоговор)  
    
    ТекущийОбъект = Объект; 
    
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
		
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
    БИНОрганизацииДляСервиса = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		БИНОрганизацииДляСервиса = ЭТДСервер.БИНОрганизации(Объект.Организация);		
	КонецЕсли;

	ДанныеАутентификации = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеАутентификацииЭТД(БИНОрганизацииДляСервиса);
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговорПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "ПерезаполнениеДоговора" Тогда
		ПередЗаписьюНаСервереПерезаполнениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	Иначе
		Возврат;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект, "Расторжение");
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереРасторжениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"contract",
		"remove");
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Расторгнут;
	
	ПоменятьСтатусСвязанныхДопсоглашений(Объект.Ссылка, "Расторжение");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыборкаОтношениеКВоинскойСлужбе()
		
	Результат = Новый СписокЗначений;
	Результат.Добавить("0", НСтр("ru = 'Невоеннообязанный'"));
	Результат.Добавить("1", НСтр("ru = 'Военнообязанный'"));
	Результат.Добавить("2", НСтр("ru = 'Призывник'"));
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаРежимРабочегоВремени()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'Нормальный'"));
	Результат.Добавить("2", НСтр("ru = 'Сокращенный'"));
	Результат.Добавить("3", НСтр("ru = 'Неполный'"));
	Результат.Добавить("4", НСтр("ru = 'Меньшая продолжительность'"));
	Результат.Добавить("5", НСтр("ru = 'Гибкий'"));
	Результат.Добавить("6", НСтр("ru = 'Совместное трудоустройство'"));
	Результат.Добавить("7", НСтр("ru = 'Скользящий график работы'"));
	Результат.Добавить("8", НСтр("ru = 'Четырехдневная рабочая неделя'"));
	Результат.Добавить("9", НСтр("ru = 'Платформенная занятость'"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаУсловияТруда()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("0", НСтр("ru = 'Нормальные'"));
	Результат.Добавить("1", НСтр("ru = 'Вредные/Опасные/Тяжелые согласно постановления 1930 (списки 1, 2)'"));
	Результат.Добавить("2", НСтр("ru = 'Вредные/Опасные/Тяжелые согласно приказа 170 (список ОППВ)'"));
	Результат.Добавить("3", НСтр("ru = 'Вредные/Опасные/Тяжелые согласно приказа 1053'"));
	Результат.Добавить("4", НСтр("ru = 'Вредные/Опасные/Тяжелые согласно аттестации рабочих мест'"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаДистанционнаяРабота()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'Дистанционная работа'"));
	Результат.Добавить("2", НСтр("ru = 'Комбинированная дистанционная работа'"));
	Результат.Добавить("3", НСтр("ru = 'Работа по месту нахождения работодателя'"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаТипыРаботодателя()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'Юридическое лицо'"));
	Результат.Добавить("2", НСтр("ru = 'Индивидуальный предприниматель/Крестьянское хозяйство'"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекстВопроса = НСтр("ru='Для заполнения по данным учета необходимо заполнить дату начала'");
		СообщитьОбОшибкеЗаполнения(ТекстВопроса,  Элементы.ДатаНачала);
	Иначе
		ЗаполнитьРеквизитыФормы();
		Сформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");
		ЗапрещеноРедактированиеОсновныхРеквизитов = НЕ (Объект.Ссылка.Пустая() ИЛИ Объект.Статус = Сформирован);
		УстановитьВидимостьИДоступностьЭлементов(Истина, ЗапрещеноРедактированиеОсновныхРеквизитов);
		ОпределениеНеполногоВремени();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавыкиПоНастройкамНаСервере()
	
	НавыкиПоВидам = ЭТДСервер.ПолучитьДанныеПрофилейПоНастройкам(Объект.ДатаНачала, Объект.Сотрудник, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, Объект.Организация);
	
	Если НавыкиПоВидам.ОбщиеНавыки.Количество() > 0 Тогда
		Объект.ОбщиеНавыки.Загрузить(НавыкиПоВидам.ОбщиеНавыки);	
	КонецЕсли;
	
	Если НавыкиПоВидам.ПрофессиональныеНавыки.Количество() > 0 Тогда
		Объект.СпециальныеНавыки.Загрузить(НавыкиПоВидам.ПрофессиональныеНавыки);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавыкиПоПрофилюНаСервере(ПрофильНавыков)
	
	Если ПрофильНавыков.ОбщиеНавыки.Количество() > 0 Тогда
		Объект.ОбщиеНавыки.Загрузить(ПрофильНавыков.ОбщиеНавыки.Выгрузить());	
	КонецЕсли;
	
	Если ПрофильНавыков.ПрофессиональныеНавыки.Количество() > 0 Тогда
		Объект.СпециальныеНавыки.Загрузить(ПрофильНавыков.ПрофессиональныеНавыки.Выгрузить());	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию)
	
	Возврат ЭТДСервер.ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию);
	
КонецФункции

&НаКлиенте
Процедура ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ЭТДКлиент.ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, Объект.Организация, Объект.Сотрудник, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДокументаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Объект.ДокументОснование = РезультатЗакрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКодаВредныхУсловийТруда(ДанныеУсловийТруда, Параметры) Экспорт
	
	Если ДанныеУсловийТруда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеУсловийТруда.Код <> Объект.КодТяжелыхУсловийТруда Тогда
		Объект.КодТяжелыхУсловийТруда = ДанныеУсловийТруда.Код;
		Объект.НаименованиеТяжелыхУсловийТруда = ДанныеУсловийТруда.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораОбразованияИностранца(ДанныеОбразованияИностранца, Параметры) Экспорт
	
	Если ДанныеОбразованияИностранца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбразованияИностранца.Код <> Объект.ОбразованиеИностранца Тогда
		Объект.ОбразованиеИностранца = ДанныеОбразованияИностранца.Код;
		Объект.НаименованиеОбразованияИностранца = ДанныеОбразованияИностранца.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОснованияДляПривлеченияИностранца(ДанныеОснованияДляПривлеченияИностранца, Параметры) Экспорт
	
	Если ДанныеОснованияДляПривлеченияИностранца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОснованияДляПривлеченияИностранца.Код <> Объект.ОснованиеПривлеченияИностранца Тогда
		Объект.ОснованиеПривлеченияИностранца = ДанныеОснованияДляПривлеченияИностранца.Код;
		Объект.НаименованиеОснованияПривлеченияИностранца = ДанныеОснованияДляПривлеченияИностранца.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеНеполногоВремени()
	
	НеполноеВремя = (Объект.РежимРабочегоВремени = "3");
	Элементы.ДоляНеполногоРабочегоВремени.Видимость = НеполноеВремя;
	Если НЕ НеполноеВремя Тогда
		Объект.ДоляНеполногоРабочегоВремени = "1";
		ДоляНеполногоРабочегоВремениЧисло = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеТяжелыхУсловийТруда()
	
	ТяжелыеУсловияТруда = (УсловияТрудаСтрока <> "0");
	Элементы.ГруппаДанныеТяжелыхУсловийТруда.Видимость = ТяжелыеУсловияТруда;
	Элементы.ПрисоединенныеФайлыЭТД.Видимость = ТяжелыеУсловияТруда;
	Если НЕ ТяжелыеУсловияТруда Тогда
		Объект.КодТяжелыхУсловийТруда = "";
		Объект.НаименованиеТяжелыхУсловийТруда = "";
		Объект.ПрисоединенныеФайлыЭТД.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = ЗаписатьПараметрыСертификата();
	ПродолжитьОтправку(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДСсылкаНаФайлНачалоВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("ВладелецФайла", Объект.Ссылка);
	СтруктураПараметровВыбора.Вставить("РежимВыбора", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ПрисоединенныеФайлыЭТДСсылкаНаФайлВыбор", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ЭТДПрисоединенныеФайлы.ФормаСписка",
			СтруктураПараметровВыбора,
			ДополнительныеПараметры.Элемент,
			ДополнительныеПараметры.Элемент,,,
			Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыЭТДСсылкаНаФайлВыбор(Результат, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныеФайлыЭТДТекущиеДанные = Элементы.ПрисоединенныеФайлыЭТД.ТекущиеДанные;
	ПрисоединенныеФайлыЭТДТекущиеДанные.СсылкаНаФайл = Результат;
	
	ПрисоединенныеФайлыЭТДСсылкаНаФайлПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСоциальногоОтпуска(ВидОперации)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован")
		И ВидОперации <> "Просмотр" И ВидОперации <> "ТолькоПросмотр" Тогда
		ТекстСообщения = НСтр("ru = 'Работа с социальными отпуска доступна только для ЭТД со статусом ""Зарегистрирован в ЕСУТД"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьОбязательныеПараметрыФормыСоциальногоОтпуска();
	ПараметрыФормы.Вставить("ВидОперации", ВидОперации);
	Если ВидОперации <> "Добавление" Тогда
		Если Объект.СоциальныеОтпуска.Количество() > 0 Тогда
			ДобавитьРеквизитыСохраненногоСоциальногоОтпуска(ПараметрыФормы);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВидОперации", ВидОперации);
	Оповещение = Новый ОписаниеОповещения("ФормаСоциальногоОтпускаОбработкаЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаСоциальногоОтпуска",
			ПараметрыФормы,
			ЭтаФорма,
			ЭтаФорма,,,
			Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПролонгации(ВидОперации)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован") Тогда
		ТекстСообщения = НСтр("ru = 'Пролонгация доступна только для ЭТД со статусом ""Зарегистрирован в ЕСУТД"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьОбязательныеПараметрыФормыПролонгации();
	ПараметрыФормы.Вставить("ВидОперации", ВидОперации);
	
	ДополнительныеПараметры = Новый Структура("ВидОперации", ВидОперации);
	Оповещение = Новый ОписаниеОповещения("ФормаПролонгацииОбработкаЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаПролонгации",
			ПараметрыФормы,
			ЭтаФорма,
			ЭтаФорма,,,
			Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВосстановления(ВидОперации)
	
	ПараметрыФормы = ПолучитьОбязательныеПараметрыФормыВосстановления();
	ПараметрыФормы.Вставить("ВидОперации", ВидОперации);
	Если ВидОперации <> "Добавление" Тогда
		Если Объект.ВосстановленияНаРаботе.Количество() > 0 Тогда
			ДобавитьРеквизитыСохраненногоВосстановленияДоговора(ПараметрыФормы);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВидОперации", ВидОперации);
	Оповещение = Новый ОписаниеОповещения("ФормаВосстановленияОбработкаЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаВосстановления",
			ПараметрыФормы,
			ЭтаФорма,
			ЭтаФорма,,,
			Оповещение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбязательныеПараметрыФормыСоциальногоОтпуска()
	
	ПараметрыСотрудника = ЭТДВызовСервера.ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Объект.Сотрудник);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НомерДоговора", Объект.НомерДоговора);
	ПараметрыФормы.Вставить("ДатаЗаключения", Объект.ДатаЗаключения);
	ПараметрыФормы.Вставить("ИИНРаботника", Объект.ИИНРаботника);
	ПараметрыФормы.Вставить("ФИОРаботника", ПараметрыСотрудника.ФИОРаботника);
	ПараметрыФормы.Вставить("БИНОрганизации", Объект.БИНОрганизации);
	ПараметрыФормы.Вставить("КодРегиона", Объект.КодРегиона);
	ПараметрыФормы.Вставить("Идентификатор", Объект.Идентификатор);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Сотрудник", Объект.Сотрудник);
	ПараметрыФормы.Вставить("ПодразделениеНаКазахскомЯзыке", ПараметрыСотрудника.ПодразделениеНаКазахскомЯзыке);
	ПараметрыФормы.Вставить("ПодразделениеНаРусскомЯзыке", ПараметрыСотрудника.ПодразделениеНаРусскомЯзыке);
	ПараметрыФормы.Вставить("ТипРаботодателя", Объект.ТипРаботодателя);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьРеквизитыСохраненногоСоциальногоОтпуска(ПараметрыФормы)
	
	СтрокаСоциальногоОтпуска = Элементы.СоциальныеОтпуска.ТекущиеДанные;
	Если СтрокаСоциальногоОтпуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НомерТабеля", СтрокаСоциальногоОтпуска.НомерТабеля);
	ПараметрыФормы.Вставить("НеРаботалС", СтрокаСоциальногоОтпуска.НеРаботалС);
	ПараметрыФормы.Вставить("НеРаботалПо", СтрокаСоциальногоОтпуска.НеРаботалПо);
	ПараметрыФормы.Вставить("ВыходныеДниЗаПериодНетрудоспособности", СтрокаСоциальногоОтпуска.ВыходныеДниЗаПериодНетрудоспособности);
	ПараметрыФормы.Вставить("ДатаПервогоРабочегоДня", СтрокаСоциальногоОтпуска.ДатаПервогоРабочегоДня);
	ПараметрыФормы.Вставить("КодСоциальногоОтпуска", СтрокаСоциальногоОтпуска.КодСоциальногоОтпуска);
	ПараметрыФормы.Вставить("ПодразделениеНаРусскомЯзыке", СтрокаСоциальногоОтпуска.ПодразделениеНаРусскомЯзыке);
	ПараметрыФормы.Вставить("ПодразделениеНаКазахскомЯзыке", СтрокаСоциальногоОтпуска.ПодразделениеНаКазахскомЯзыке);
	ПараметрыФормы.Вставить("ДатаРегистрации", СтрокаСоциальногоОтпуска.ДатаРегистрации);
	ПараметрыФормы.Вставить("Статус", СтрокаСоциальногоОтпуска.Статус);
	ПараметрыФормы.Вставить("ИдентификаторСоциальногоОтпуска", СтрокаСоциальногоОтпуска.ИдентификаторСоциальногоОтпуска);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбязательныеПараметрыФормыПролонгации()
	
	ПараметрыСотрудника = ЭТДСервер.ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Объект.Сотрудник);
	
	АктуальныйСрокДействия = ЭТДСервер.ПолучитьАктуальныйСрокДействияЭТД(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НомерДоговора", Объект.НомерДоговора);
	ПараметрыФормы.Вставить("ДатаЗаключения", Объект.ДатаЗаключения);
	ПараметрыФормы.Вставить("ИИНРаботника", Объект.ИИНРаботника);
	ПараметрыФормы.Вставить("ФИОРаботника", ПараметрыСотрудника.ФИОРаботника);
	ПараметрыФормы.Вставить("БИНОрганизации", Объект.БИНОрганизации);
	ПараметрыФормы.Вставить("КодРегиона", Объект.КодРегиона);
	ПараметрыФормы.Вставить("Идентификатор", Объект.Идентификатор);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СрокДействия", АктуальныйСрокДействия.СрокДействия);
	ПараметрыФормы.Вставить("ДатаНачала", АктуальныйСрокДействия.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", АктуальныйСрокДействия.ДатаОкончания);
	ПараметрыФормы.Вставить("ТипРаботодателя", Объект.ТипРаботодателя);
	
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьОбязательныеПараметрыФормыВосстановления()
	
	ПараметрыСотрудника = ЭТДСервер.ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Объект.Сотрудник);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НомерДоговора", Объект.НомерДоговора);
	ПараметрыФормы.Вставить("ДатаЗаключения", Объект.ДатаЗаключения);
	ПараметрыФормы.Вставить("ИИНРаботника", Объект.ИИНРаботника);
	ПараметрыФормы.Вставить("ФИОРаботника", ПараметрыСотрудника.ФИОРаботника);
	ПараметрыФормы.Вставить("БИНОрганизации", Объект.БИНОрганизации);
	ПараметрыФормы.Вставить("КодРегиона", Объект.КодРегиона);
	ПараметрыФормы.Вставить("Идентификатор", Объект.Идентификатор);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДатаРасторжения", Объект.ДатаРасторжения);
	ПараметрыФормы.Вставить("КодПричиныРасторжения", Объект.КодПричиныРасторжения);
	ПараметрыФормы.Вставить("ТипРаботодателя", Объект.ТипРаботодателя);
	
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьРеквизитыСохраненногоВосстановленияДоговора(ПараметрыФормы)
	
	СтрокаВосстановления = Элементы.ВосстановленияНаРаботе.ТекущиеДанные;
	Если СтрокаВосстановления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДатаРасторжения", СтрокаВосстановления.ДатаРасторжения);
	ПараметрыФормы.Вставить("КодПричиныРасторжения", СтрокаВосстановления.КодПричиныРасторжения);
	ПараметрыФормы.Вставить("ДатаВосстановления", СтрокаВосстановления.ДатаВосстановления);
	ПараметрыФормы.Вставить("НомерПриказа", СтрокаВосстановления.НомерПриказа);
	ПараметрыФормы.Вставить("КомментарийОшибочногоРасторжения", СтрокаВосстановления.КомментарийОшибочногоРасторжения);
	ПараметрыФормы.Вставить("КодГосударственногоОргана", СтрокаВосстановления.КодГосударственногоОргана);
	ПараметрыФормы.Вставить("КодСуда", СтрокаВосстановления.КодСуда);
	ПараметрыФормы.Вставить("НаименованиеСуда", СтрокаВосстановления.НаименованиеСуда);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСоциальногоОтпускаОбработкаЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ВидОперации = "Добавление" И ТипЗнч(Результат) = Тип("Структура") Тогда
		НоваяСтрокаСоциальногоОтпуска = Объект.СоциальныеОтпуска.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСоциальногоОтпуска, Результат);
		ЗаполнитьТипСоциальногоОтпуска(НоваяСтрокаСоциальногоОтпуска.НомерСтроки);
		
		ЭтаФорма.Записать();
	ИначеЕсли (ДополнительныеПараметры.ВидОперации = "Редактирование"
		ИЛИ ДополнительныеПараметры.ВидОперации = "Просмотр") И ТипЗнч(Результат) = Тип("Структура") Тогда // решили отредактировать
		СтрокаСоциальногоОтпуска = Элементы.СоциальныеОтпуска.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаСоциальногоОтпуска, Результат);
		ЗаполнитьТипСоциальногоОтпуска(СтрокаСоциальногоОтпуска.НомерСтроки);
		
		ЭтаФорма.Записать();
	ИначеЕсли ДополнительныеПараметры.ВидОперации = "Удаление" И ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ПодтверждениеУдаления <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаСоциальногоОтпуска = Элементы.СоциальныеОтпуска.ТекущиеДанные;
		Объект.СоциальныеОтпуска.Удалить(СтрокаСоциальногоОтпуска);
		
		ЭтаФорма.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПролонгацииОбработкаЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		НоваяСтрокаПролонгации = Объект.ПролонгацияДоговора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПролонгации, Результат);
		
		ЭтаФорма.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВосстановленияОбработкаЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован");
		Объект.ДатаРасторжения = Дата('00010101');
		Объект.ОснованиеУвольнения = Неопределено;
		Объект.КодПричиныРасторжения = "";
		Объект.НаименованиеПричиныРасторжения = "";
		Объект.ПричинаРасторженияЦифровизация = "";
		
		НоваяСтрокаВосстановления = Объект.ВосстановленияНаРаботе.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, Результат);
		
		УстановитьВидимостьИДоступностьЭлементов(Ложь);
		
		ЭтаФорма.Записать();
		
		ПоменятьСтатусСвязанныхДопсоглашений(Объект.Ссылка, "Восстановление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораКодПричиныРасторженияЗавершение(ДанныеПричиныРасторжения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеПричиныРасторжения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПричиныРасторжения.Код <> Объект.КодПричиныРасторжения Тогда
		Объект.КодПричиныРасторжения = ДанныеПричиныРасторжения.Код;
		Объект.НаименованиеПричиныРасторжения = ДанныеПричиныРасторжения.Наименование;
		
		КодПричиныРасторженияПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСтатусЭТДНаСервере(ОсновнойДоговор, Ссылка, УникальныйИдентификатор)
	
	ПараметрыЭТД = ЭТДСерверПовтИсп.ПолучитьПараметрыЭТД();
	
	Если ОсновнойДоговор Тогда
		
		Адрес = ПараметрыЭТД.АдресГрупповогоПолученияДоговоров;
		
	Иначе
		
		Адрес = ПараметрыЭТД.АдресГрупповогоПолученияДопСоглашений;
		
	КонецЕсли;
	
	МассивЭТД = Новый Массив();
	МассивЭТД.Добавить(Ссылка);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("МассивЭТД", МассивЭТД);
	ПараметрыЗадания.Вставить("ЭтоОсновнойДоговор", ОсновнойДоговор);
	ПараметрыЗадания.Вставить("Адрес", Адрес);
	
	РезультатРаботыЗадания = Неопределено;
	
	ИмяПроцедурыОбновленияСтатусов = "ЭлектронноеВзаимодействиеССервисами.ОбновитьСтатусЭТД";
	
	СтруктураВыполненияЗадания = ЭТДСервер.ФоновоеЗаданиеЗапущено(ИмяПроцедурыОбновленияСтатусов);
	
	Если НЕ СтруктураВыполненияЗадания.ЗаданиеАктивно Тогда
		
		ПараметрыВыполнения = ЭТДСервер.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		НаименованиеЗадания = НСтр("ru = 'Обновление статусов отправленных ЭТД (дополнительных соглашений)'");
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		РезультатРаботыЗадания = ЭТДСервер.ВыполнитьВФоне(ИмяПроцедурыОбновленияСтатусов, ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс обновления статусов ЭТД (дополнительных соглашений)");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗагрузкиДоговора(ПараметрыДоговора)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляИмпортаЭТД(ПараметрыДоговора);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОсновногоЭТД(ОсновнойЭТД, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойЭТД, Реквизиты);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВосстановлениеДоговораПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОткрытьФормуВосстановления("Добавление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоменятьСтатусСвязанныхДопсоглашений(Ссылка, ВидОперации)
	
	Если ВидОперации = "Расторжение" Тогда
		Статус = Перечисления.СтатусыЭТД.Зарегистрирован;
		НовыйСтатус = Перечисления.СтатусыЭТД.Расторгнут;
		ТекстСообщения = НСтр("ru = 'Дополнительное соглашение № %1 расторгнуто'");
	ИначеЕсли ВидОперации = "Восстановление" Тогда
		Статус = Перечисления.СтатусыЭТД.Расторгнут;
		НовыйСтатус = Перечисления.СтатусыЭТД.Зарегистрирован;
		ТекстСообщения = НСтр("ru = 'Дополнительное соглашение № %1 восстановлено'");
	Иначе
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ДопСоглашения = ПолучитьДопСоглашенияДоговора(Ссылка, Статус);
		
		Для Каждого ДопСоглашение Из ДопСоглашения Цикл
			ДопСоглашениеОбъект = ДопСоглашение.Ссылка.ПолучитьОбъект();
			ДопСоглашениеОбъект.Заблокировать();
			
			ДопСоглашениеОбъект.Статус = НовыйСтатус;
			
			ДопСоглашениеОбъект.Записать();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДопСоглашение.НомерДоговора));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Смена статуса допсоглашений ЭТД'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЭТД,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЗаполненностьРеквизитовИностранца()
	
	Возврат ЗначениеЗаполнено(Объект.ОснованиеПривлеченияИностранца)
			ИЛИ ЗначениеЗаполнено(Объект.НомерРазрешенияИностранца)
			ИЛИ ЗначениеЗаполнено(Объект.ДатаРазрешенияИностранца)
			ИЛИ ЗначениеЗаполнено(Объект.ДатаНачалаРазрешенияИностранца)
			ИЛИ ЗначениеЗаполнено(Объект.ДатаОкончанияРазрешенияИностранца)
			ИЛИ ЗначениеЗаполнено(Объект.ОбразованиеИностранца);
			
КонецФункции

#КонецОбласти
