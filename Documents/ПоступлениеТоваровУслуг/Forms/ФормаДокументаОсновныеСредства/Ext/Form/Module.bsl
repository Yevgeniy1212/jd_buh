
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка); 
	
	//ИнтеграцияИСМПТК
    //Скроем меню ввода Акта приёмки маркированной продукции
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСМПТК", "Видимость", Ложь);
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСЦЭДМ", "Видимость", Ложь);
    //Конец ИнтеграцияИСМПТК
	
КонецПроцедуры
	
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	//Каспийсофт
	Если Объект.ВидОперацииМН = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.Оценочные") Тогда		
		МН.ОбработатьСторнирование(ТекущийОбъект);
	КонецЕсли;	
	//Каспийсофт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи); 
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	
		Если ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) Тогда
			ОповеститьОбИзменении(Объект.СчетНаОплатуПоставщика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Параметр;
		УправлениеФормой(ЭтаФорма);		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		
		ПоступлениеТоваровУслугФормыКлиент.ОбработкаУчастниковСовместнойДеятельности(ЭтаФорма, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьШтрихкода(Команда)
	
	СформироватьШтрихкодаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ПоступлениеТоваровУслугФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ТипыНачислений = Объект.ВидОперацииМН;
	МетодНачисленияОбновитьЭлементы(ТипыНачислений);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//++ Кибернетика Кубасов Е 30.09.2024
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
		Если НадписьСчетФактура <> "" ИЛИ НомерСчетаФактурыПолученного <> "" Тогда //проверка на заполненость Счета-фактуры
	 
			ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);

		Иначе
					Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Внимание! Нет счет-Фактуры, заполните вручную номер и дату или Создайте на основании: Счета-Фактуры(полученный), текущего документа";
			Сообщение.Сообщить();   
		КонецЕсли;	
	КонецЕсли;
	//-- Кибернетика Кубасов Е 30.09.2024
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПоступлениеТоваровУслугФормыКлиент.ПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоступлениеТоваровУслугФормыКлиент.СделкаНачалоВыбора(ЭтаФорма,ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
	//Каспийсофт
	Если
		Объект.ВидОперацииМН = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеДоТО") Тогда
		Объект.ДатаНУ = Объект.Дата;
		Объект.УчитыватьКПН = Истина;
		Элементы.ПодразделениеМН.Видимость = Ложь;
		Элементы.СтатьяБюджета.Видимость = Ложь;
	Иначе
		Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
	КонецЕсли;
	//Каспийсофт
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;

	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.НадписьСчетФактураНажатие(ЭтаФорма,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ВидВходящегоДокументаНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаПриИзменении(Элемент)
	
	Если Объект.СчетНаОплатуПоставщика = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование)) Тогда
					
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными из счета на оплату?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаНаОплату", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);     
		
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, НДСВидОборота, 
										|НДСВидПоступления, ПодразделениеОрганизации, МОЛОрганизации, СуммаНУ, СуммаПР, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		Элементы.ОС.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения") И Объект.УчитыватьКПН Тогда		
		СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока И НЕ Копирование Тогда		
		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, 
											|НДСВидПоступления, СчетУчетаНУ, ПодразделениеОрганизации, МОЛОрганизации, СуммаНУ, СуммаПР");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "ОС", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаСервере
Функция ПодготовитьПараметрыФормы(ИмяТабличнойЧасти)  	
	
	АдресХранилищаТабличнойЧасти = ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти);
	
	ПараметрыФормы = ПоступлениеТоваровУслугФормы.ПолучитьПараметрыОбработкиТабличнойЧасти(ЭтаФорма,ИмяТабличнойЧасти,ИмяТабличнойЧасти,АдресХранилищаТабличнойЧасти,УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ПараметрыФормы = ПодготовитьПараметрыФормы("ОС");
	
	ПоступлениеТоваровУслугФормыКлиент.ИзменитьТабличнуюЧасть(ЭтаФорма,ПараметрыФормы,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

 &НаКлиенте
Процедура ОСЗаполнитьПоСчету(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗаполнитьТабличнуюЧастьПоСчету(ЭтаФорма,"ОС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт

	ПоступлениеТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Счет-фактура
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	Если НЕ Параметры.Ключ.Пустая() И ТребуетсяСчетФактура Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Основание = Неопределено;
	Параметры.Свойство("Основание", Основание);
	Если Основание = Неопределено И Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("Основание", Основание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание)
		И   ((ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг"))
		ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.ПередачаОС"))
		ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой"))) Тогда
			 
		ВводНаОснованииРеализацииТМЗПередачиОС = Истина;
		
	КонецЕсли;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		ПричиныИзмененияСчетовУчета = Новый Массив;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета.Добавить("КопированиеДокумента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ВводНаОснованииРеализацииТМЗПередачиОС)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			ПоступлениеТоваровУслугФормы.ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, , ПричиныИзмененияСчетовУчета);
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров(Объект.ВидОперации));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено, ПричиныИзмененияСчетовУчета);
		Иначе
			Элементы.Сделка.Доступность = Ложь;
			Элементы.КнопкаУСД.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		КонецЕсли;
			
		Если НЕ ВводНаОснованииРеализацииТМЗПередачиОС И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПричиныИзмененияСчетовУчета.Количество() = 0 Тогда
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
		КонецЕсли;
		
		Если ПричиныИзмененияСчетовУчета.Количество() <> 0 Тогда
			ПоступлениеТоваровУслугФормы.ЗаполнитьСчетаУчета(ЭтаФорма, ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента Тогда
			Объект.УчитыватьНДС     = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Объект.УчитыватьКПН	= Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СобытиеОС) Тогда
			Объект.СобытиеОС = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Поступление);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");		
			Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);			
			Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
		Иначе                                                                                                                                             			
			Элементы.Сделка.Доступность = Ложь;
			Элементы.КнопкаУСД.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ТекущийСчетНаОплату = Объект.СчетНаОплатуПоставщика;
	
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ПолучитьФункциональнуюОпцию("ШтрихкодУстанавливаетсяВГлавномУзлеРИБ") Тогда // В подчиненных узлах РИБ не выполняется
			Элементы.ОССформироватьШтрихкода.Доступность 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
		
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ГруппаИтогиНДС.Видимость        = Объект.УчитыватьНДС;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
		
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
	ОбновитьИтоги(Форма);
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	//СформироватьНадписьЦеныИВалюта(Форма);
	
	ВПереработку = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");

	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость = Форма.ПоказыватьВДокументахСчетаУчета
		И Объект.ВидОперации <> ВПереработку;
		
	// Настройка видимости в форме по виду операции
	Элементы.УчитыватьКПН.Доступность = Форма.ТребуетсяСчетФактура;
	
	Элементы.ОСПодразделениеОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям;
	Элементы.ОСМОЛОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ;
																			
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;

	Элементы.ОСНДСВидПоступления.АвтоОтметкаНезаполненного  = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.АвтоОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету; 	
	Элементы.ОСНДСВидПоступления.ОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.ОтметкаНезаполненного          = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	 	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма);   	
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()Экспорт

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт

	// Заполнение колонок "Всего" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()Экспорт
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма) Экспорт

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС = Объект.ОС.Итог("СуммаНДС");
	Форма.ИтогиВсего    = Объект.ОС.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// При изменении реквизитов (на клиенте)

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.ОС.Количество() > 0; 
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСчетФактуру()

	ТребуетсяСчетФактура = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	Если  НЕ ТребуетсяСчетФактура И ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'При записи документа с видом операции ""В переработку"" будет очищен документ счет-фактура.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПоступлениеТоваровУслугФормы.УчитыватьКПНПриИзмененииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма,СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ПоступлениеТоваровУслугФормы.КонтрагентПриИзмененииНаСервере(ЭтаФорма,СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	ПоступлениеТоваровУслугФормы.СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(ЭтаФорма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	ПоступлениеТоваровУслугФормы.ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению);
	
КонецПроцедуры

// Цены и валюта

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПоступлениеТоваровУслугФормыКлиент.ПараметрыОткрытияФормыЦеныИВалюта()
	
КонецФункции

// Подбор товаров

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()  Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПоступлениеТоваровУслугФормы.ПриИзмененииЗначенияОрганизацииСервер(ЭтаФорма,ПараметрыОбработки, Неопределено); 
	ПоступлениеТоваровУслугФормы.КонтрагентОбработатьИзменение(ЭтаФорма,Неопределено,Новый Массив);
		
	ТекущийВидОперации = Объект.ВидОперации;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		//СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПоступлениеТоваровУслугФормыКлиент.ПараметрыОткрытияФормыЦеныИВалюта(ЭтаФорма));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСчетаНаОплату(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущийСчетНаОплату      = Объект.СчетНаОплатуПоставщика;
	Объект.ДокументОснование = Объект.СчетНаОплатуПоставщика;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Доверенность") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоДоверенности(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСправочникуОС(Объект, ДокументОснование);
	
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоРеализации(Объект, ДокументОснование);
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС"))
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.ПередачаОС")) Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоПередачеОС(Объект, ДокументОснование);
	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСчетФактураПолученный(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоОплатаОтПокупателяПлатежнойКартой(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСчетуНаОплатуПоставщика(Объект, Объект.ДокументОснование);			
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, , , , ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ПоступлениеТоваровУслугФормы.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчетаКЗаполнению);
	
КонецПроцедуры

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто()Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаЗатрат = "СубконтоЗатрат";
	ИмяСчетаЗатрат    = "СчетЗатрат";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета);
	
КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	
	ПоступлениеТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета);
	
КонецПроцедуры

// Служебные процедуры и функции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ДоговорКонтрагента, ОтказОтВыбранного = Неопределено, ПричиныИзмененияСчетовУчета = Неопределено) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтказОтВыбранного = Истина;
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
						ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Поступление от структурного подразделения"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	ПоступлениеТоваровУслугФормы.ОпределитьСписокДоступныхВидовДоговоровПоОперации(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияЗаписиСчетаФактурыНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров(ВидОперации)
        
    СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы,МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура СформироватьШтрихкодаНаСервере()
	
	ПоступлениеТоваровУслугФормы.СформироватьШтрихкодаНаСервере(ЭтаФорма.Объект);
	
КонецПроцедуры	

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

#Область АВР

&НаСервере
Процедура НайтиАВРИЗаполнитьСсылкуНаСервере() Экспорт

КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()Экспорт
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ОССчетУчетаБУ");
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОССчетУчетаНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьУчастникиСД(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуДополнительно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	ПоступлениеТоваровУслугФормы.РазблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции

#Область ЗаполнениеПоСчету

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоСчету(Объект, ТабличнаяЧасть, ВыбранноеЗначение);

	УстановитьДоступностьСубконто();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиПриЗаполненииПоСчету(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ТабличнаяЧасть].Очистить();
		
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура МетодНачисленияОбновитьЭлементы(Элемент, плТипыНачислений = Ложь)
	Если ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.Оценочные") Тогда
		Объект.ДатаНУ = Дата("00010101000000");
		Элементы.ДатаНУ.Доступность = Ложь;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
 		Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Ложь;
		КонецЕсли;
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеПослеТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
       	Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Истина;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеДоТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	Иначе
		Элементы.ДатаНУ.Доступность = Ложь;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если плТипыНачислений Тогда
		Объект.ВидОперацииМН = ТипыНачислений; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипыНачисленийПриИзменении(Элемент)
	МетодНачисленияОбновитьЭлементы(Элемент, Истина);
КонецПроцедуры


//Евгений+
&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Объект.Склад;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Объект.Дата, Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Объект.МОЛ = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Объект.МОЛ = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры


//Евгений-
