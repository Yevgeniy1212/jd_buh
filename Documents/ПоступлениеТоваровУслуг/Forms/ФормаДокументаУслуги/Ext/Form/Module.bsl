
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ДобавитьКомандуВводаКорректировки();
	ОбновитьДанныеОВведенныхКорректировках();  
	
	//ИнтеграцияИСМПТК
    //Скроем меню ввода Акта приёмки маркированной продукции
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСМПТК", "Видимость", Ложь);
    ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСЦЭДМ", "Видимость", Ложь);
    //Конец ИнтеграцияИСМПТК
	
КонецПроцедуры
	
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	//Каспийсофт
	Если Объект.ВидОперацииМН = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.Оценочные") Тогда		
		МН.ОбработатьСторнирование(ТекущийОбъект);
	КонецЕсли;	
	//Каспийсофт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи); 
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения  Тогда	
		Если ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) Тогда
			ОповеститьОбИзменении(Объект.СчетНаОплатуПоставщика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Параметр;
		УправлениеФормой(ЭтаФорма);		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда		
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
	//АВР	
	ИначеЕсли ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР() Тогда
		ОбработкаОповщенияАВРНаСервере();  	
	//Конец АВР   
	
	ИначеЕсли ИмяСобытия = "Запись_Операция" Или ИмяСобытия = "Запись_Сторнирование" Тогда
		ОбновитьДанныеОВведенныхКорректировках();
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		
		ПоступлениеТоваровУслугФормыКлиент.ОбработкаУчастниковСовместнойДеятельности(ЭтаФорма, ВыбранноеЗначение); 
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьШтрихкода(Команда)
	
	СформироватьШтрихкодаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ПоступлениеТоваровУслугФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ТипыНачислений = Объект.ВидОперацииМН;
	МетодНачисленияОбновитьЭлементы(ТипыНачислений);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//++ Кибернетика Кубасов Е 30.09.2024
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
		Если НадписьСчетФактура <> "" ИЛИ НомерСчетаФактурыПолученного <> "" Тогда //проверка на заполненость Счета-фактуры
	 
			ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);

		Иначе
					Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Внимание! Нет счет-Фактуры, заполните вручную номер и дату или Создайте на основании: Счета-Фактуры(полученный), текущего документа";
			Сообщение.Сообщить();   
		КонецЕсли;	
	КонецЕсли;
	//-- Кибернетика Кубасов Е 30.09.2024

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПоступлениеТоваровУслугФормыКлиент.ПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоступлениеТоваровУслугФормыКлиент.СделкаНачалоВыбора(ЭтаФорма,ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;

	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ВидОперацииДокументаОснования = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидОперации");
			Если ВидОперацииДокументаОснования <> Объект.ВидОперации Или ВидОперацииДокументаОснования <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги") Тогда
				Объект.ДокументОснование = ТекущийДокументОснование;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет данных для заполнения. Ввод на основании поступления ТМЗ и услуг доступен только для документов с видом операции ""%1""'"), 
																							ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
				Сообщение.Сообщить();
				Возврат
			КонецЕсли;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.НадписьСчетФактураНажатие(ЭтаФорма,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ВидВходящегоДокументаНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаПриИзменении(Элемент)
		
	Если Объект.СчетНаОплатуПоставщика = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование)) Тогда
					
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными из счета на оплату?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаНаОплату", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);     
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
		|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
		|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, Всего,
		|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
		|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
		|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
		|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента, ДокументОснование");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		Элементы.Услуги.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетЗатратБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ2, "СубконтоЗатратНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  2, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  3, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетЗатратНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  1, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  2, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  3, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда, УникальныйИдентификатор);

	//ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	//Если ПараметрыПодбора <> Неопределено Тогда
	//	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
	//		ЭтаФорма, УникальныйИдентификатор);
	//КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ПараметрыФормы = ПодготовитьПараметрыФормы("Услуги");
	
	ПоступлениеТоваровУслугФормыКлиент.ИзменитьТабличнуюЧасть(ЭтаФорма,ПараметрыФормы,УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормы(ИмяТабличнойЧасти)  	
	
	АдресХранилищаТабличнойЧасти = ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти);
	
	ПараметрыФормы = ПоступлениеТоваровУслугФормы.ПолучитьПараметрыОбработкиТабличнойЧасти(ЭтаФорма,ИмяТабличнойЧасти,ИмяТабличнойЧасти,АдресХранилищаТабличнойЧасти,УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода",,
		ЭтотОбъект,,,,
		ОписаниеОповещенияПоискПоШтрихкоду,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуУслуги(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ЗаполнитьТабличнуюЧастьПоСчету(ЭтаФорма,"Услуги");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт

	ПоступлениеТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Счет-фактура
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	Если НЕ Параметры.Ключ.Пустая() И ТребуетсяСчетФактура Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Основание = Неопределено;
	Параметры.Свойство("Основание", Основание);
	Если Основание = Неопределено И Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("Основание", Основание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание)
		И   ((ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг"))
		ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.ПередачаОС"))
		ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") 
		ИЛИ  ТипЗнч(Основание) = Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой"))) Тогда
			 
		ВводНаОснованииРеализацииТМЗПередачиОС = Истина;
		
	КонецЕсли;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		ПричиныИзмененияСчетовУчета = Новый Массив;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета.Добавить("КопированиеДокумента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ВводНаОснованииРеализацииТМЗПередачиОС)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			ПоступлениеТоваровУслугФормы.ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, , ПричиныИзмененияСчетовУчета);
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров(Объект.ВидОперации));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено, ПричиныИзмененияСчетовУчета);
		Иначе
			Элементы.Сделка.Доступность = Ложь;
			Элементы.КнопкаУСД.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		КонецЕсли;
			
		Если НЕ ВводНаОснованииРеализацииТМЗПередачиОС И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПричиныИзмененияСчетовУчета.Количество() = 0 Тогда
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
		КонецЕсли;
		
		Если ПричиныИзмененияСчетовУчета.Количество() <> 0 Тогда
			ПоступлениеТоваровУслугФормы.ЗаполнитьСчетаУчета(ЭтаФорма, ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента Тогда
			Объект.УчитыватьНДС     = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Объект.УчитыватьКПН	= Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СобытиеОС) Тогда
			Объект.СобытиеОС = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Поступление);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");		
			Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);			
			Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
		Иначе                                                                                                                                             			
			Элементы.Сделка.Доступность = Ложь;
			Элементы.КнопкаУСД.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование; 
	
	ТекущийСчетНаОплату = Объект.СчетНаОплатуПоставщика;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
		
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ГруппаИтогиНДС.Видимость        = Объект.УчитыватьНДС;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
		
	Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
	ОбновитьИтоги(Форма);
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	//СформироватьНадписьЦеныИВалюта(Форма);
	
	ВПереработку = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");

	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость = Форма.ПоказыватьВДокументахСчетаУчета
		И Объект.ВидОперации <> ВПереработку;
		
	// Настройка видимости в форме по виду операции
	Элементы.УчитыватьКПН.Доступность = Форма.ТребуетсяСчетФактура;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;

	Элементы.УслугиНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма); 
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()Экспорт

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт

	// Заполнение колонок "Всего" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()Экспорт
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма) Экспорт

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// При изменении реквизитов (на клиенте)

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Услуги.Количество() > 0; 
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСчетФактуру()

	ТребуетсяСчетФактура = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	Если  НЕ ТребуетсяСчетФактура И ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'При записи документа с видом операции ""В переработку"" будет очищен документ счет-фактура.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПоступлениеТоваровУслугФормы.УчитыватьКПНПриИзмененииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма,СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ПоступлениеТоваровУслугФормы.КонтрагентПриИзмененииНаСервере(ЭтаФорма,СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	ПоступлениеТоваровУслугФормы.СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(ЭтаФорма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	ПоступлениеТоваровУслугФормы.УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УслугиСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПоступлениеТоваровУслугФормы.УслугиСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПоступлениеТоваровУслугФормы.УслугиСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

// Цены и валюта

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПоступлениеТоваровУслугФормыКлиент.ПараметрыОткрытияФормыЦеныИВалюта()
	
КонецФункции

// Подбор товаров

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	Если ИмяТаблицы <> "Услуги" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборНаСервере(ЭтаФорма,ЭтоВставкаИзБуфера, ВыбранноеЗначение,ИмяТаблицы);
	
	Если ИмяТаблицы = "Услуги" Тогда
		УстановитьДоступностьСубконто();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()  Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПоступлениеТоваровУслугФормы.ПриИзмененииЗначенияОрганизацииСервер(ЭтаФорма,ПараметрыОбработки, Неопределено); 
	ПоступлениеТоваровУслугФормы.КонтрагентОбработатьИзменение(ЭтаФорма,Неопределено,Новый Массив);
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		//СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПоступлениеТоваровУслугФормыКлиент.ПараметрыОткрытияФормыЦеныИВалюта(ЭтаФорма));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСчетаНаОплату(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущийСчетНаОплату      = Объект.СчетНаОплатуПоставщика;
	Объект.ДокументОснование = Объект.СчетНаОплатуПоставщика;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
		
КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Доверенность") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоДоверенности(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСправочникуОС(Объект, ДокументОснование);
	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоПоступлениеТоваровУслуг(Объект, ДокументОснование);
	
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоРеализации(Объект, ДокументОснование);
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС"))
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.ПередачаОС")) Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоПередачеОС(Объект, ДокументОснование);
	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСчетФактураПолученный(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоОплатаОтПокупателяПлатежнойКартой(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоСчетуНаОплатуПоставщика(Объект, Объект.ДокументОснование);			
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, , , , ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ПоступлениеТоваровУслугФормы.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчетаКЗаполнению);
	
КонецПроцедуры

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто()Экспорт
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, "Услуги");
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаЗатрат = "СубконтоЗатрат";
	ИмяСчетаЗатрат    = "СчетЗатрат";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета);
	
КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = ПоступлениеТоваровУслугФормыКлиентСервер.СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПоступлениеТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ);
	
КонецПроцедуры

// Служебные процедуры и функции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ДоговорКонтрагента, ОтказОтВыбранного = Неопределено, ПричиныИзмененияСчетовУчета = Неопределено) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтказОтВыбранного = Истина;
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
						ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Поступление от структурного подразделения"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	ПоступлениеТоваровУслугФормы.ОпределитьСписокДоступныхВидовДоговоровПоОперации(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияЗаписиСчетаФактурыНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров(ВидОперации)
        
    СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы,МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура СформироватьШтрихкодаНаСервере()
	
	ПоступлениеТоваровУслугФормы.СформироватьШтрихкодаНаСервере(ЭтаФорма.Объект);
	
КонецПроцедуры	

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	Если ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления"); 		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетЗатратБУ");				
				СписокСвойств.Добавить("СчетЗатратНУ");				
				СписокСвойств.Добавить("СубконтоЗатратБУ1");				
				СписокСвойств.Добавить("СубконтоЗатратБУ2");				
				СписокСвойств.Добавить("СубконтоЗатратБУ3");				
				СписокСвойств.Добавить("СубконтоЗатратНУ1");				
				СписокСвойств.Добавить("СубконтоЗатратНУ2");				
				СписокСвойств.Добавить("СубконтоЗатратНУ3");		
			КонецЕсли;   	
			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

#Область АВР

&НаКлиенте
Процедура СсылкаНаЭлектронныеАВРНажатие(Элемент)
	
	Если СписокЭлектронныхАВР.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Документ.ЭлектронныйАктВыполненныхРабот.Форма.ПросмотрСпискаДокументовЭАВР",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭлектронныхАВР,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПоказатьЗначение( ,СписокЭлектронныхАВР[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповщенияАВРНаСервере()
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура НайтиАВРИЗаполнитьСсылкуНаСервере() Экспорт
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()Экспорт
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("УслугиСчетЗатратБУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаБУ");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратНУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаНУ");
	ЭлементыСчетов.Добавить("ГруппаРасчеты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьУчастникиСД(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуДополнительно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	ПоступлениеТоваровУслугФормы.РазблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции

#Область ОперацияКорректировки

&НаСервере
Процедура ДобавитьКомандуВводаКорректировки()
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ОперацияБух) Тогда
		Возврат
	КонецЕсли;
	
	ИмяКнопкиСоздатьОперацию = "ФормаДокументОперацияКорректировкаСоздатьНаОсновании";
	КнопкаСоздатьОперацию = Элементы.Найти(ИмяКнопкиСоздатьОперацию);
	
	Если КнопкаСоздатьОперацию = Неопределено Тогда
		ГруппаФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
		Если ГруппаФормаСоздатьНаОсновании <> Неопределено Тогда
			ВставитьПередКнопкой = Неопределено;
			ИндексПоследнейКнопки = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Количество() - 1;
			Для ИндексВГруппе = 0 По ИндексПоследнейКнопки Цикл
				ТекущаяКнопка = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Получить(ИндексВГруппе);
				Если ТекущаяКнопка.Имя > ИмяКнопкиСоздатьОперацию Тогда
					ВставитьПередКнопкой = ТекущаяКнопка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			КнопкаСоздатьОперацию = Элементы.Вставить(ИмяКнопкиСоздатьОперацию, Тип("КнопкаФормы"), ГруппаФормаСоздатьНаОсновании, ВставитьПередКнопкой);
			КнопкаСоздатьОперацию.ИмяКоманды = "ВвестиНовуюКорректировку";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовуюКорректировку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФормуОперации();
	Иначе
		ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения("ПослеВопросаОЗаписиПередКорректировкой", ЭтотОбъект);
		ТекстВопроса =
		НСтр("ru='Данные еще не записаны.
		|Выполнение действия ""Операция (Корректировка документа): создать на основании"" возможно только после записи данных
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаписиПередКорректировкой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации()
	
	ПараметрыОперации = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКорректировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокКорректировок.Получить(0).Значение);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Выберите документ корректировки'");
		ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокКорректировок, ЗаголовокФормы);
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокКорректировок(Документ)
	
	МассивКорректировок = Новый Массив;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОперацияБух.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.СторнируемыйДокумент = &Документ
		|	И НЕ ОперацияБух.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &Документ
		|	И НЕ Сторнирование.ПометкаУдаления";
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОперацияБух) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОперацияБух.Ссылка", "ПРЕДСТАВЛЕНИЕ(ОперацияБух.Ссылка)");
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.Сторнирование) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сторнирование.Ссылка", "ПРЕДСТАВЛЕНИЕ(Сторнирование.Ссылка)");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивКорректировок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат МассивКорректировок
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОВведенныхКорректировках()
	
	СписокКорректировок.ЗагрузитьЗначения(ВернутьСписокКорректировок(Объект.Ссылка));
	
	Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость = (СписокКорректировок.Количество() > 0);
	
	Если Не Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость Тогда
		ТекстКорректировки = "";
	ИначеЕсли СписокКорректировок.Количество() = 1 Тогда
		ТекстКорректировки = СписокКорректировок.Получить(0).Значение;
	Иначе
		ТекстКорректировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть список введенных корректировок (%1)'"), СписокКорректировок.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или НЕ ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;                                                                                     
	
	ИмяТЧ = "Товары";
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных,ИмяТЧ);
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных, ИмяТЧ)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	НоменклатураБезЦены = ЗагруженныеДанные.Скопировать(Новый Структура("Цена", 0), "Номенклатура");
	Если НоменклатураБезЦены.Количество() > 0 Тогда 
		
		СписокНоменклатуры = НоменклатураБезЦены.ВыгрузитьКолонку("Номенклатура");
		Если ИспользоватьТипыЦен И ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, Объект.ТипЦен, Объект.Дата, Объект.Организация);
		Иначе
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатурыДокументов(
				СписокНоменклатуры, Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ИсключаемыеДанные = Новый Массив;
	
	Для Каждого ЗагруженнаяСтрока Из ЗагруженныеДанные Цикл
		
		НоменклатураСсылка = ЗагруженнаяСтрока.Номенклатура;
		
		Если ИмяТЧ="Услуги" И НЕ НоменклатураСсылка.Услуга Тогда	
			ИсключаемыеДанные.Добавить(НоменклатураСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ЗагруженнаяСтрока.Цена = 0 Тогда 
			СведенияОЦенеНоменклатуры = ЦеныНоменклатуры.Найти(ЗагруженнаяСтрока.Номенклатура, "Номенклатура");
			Если СведенияОЦенеНоменклатуры <> Неопределено Тогда
				ЗагруженнаяСтрока.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
					СведенияОЦенеНоменклатуры.Цена,
					СведенияОЦенеНоменклатуры.Валюта, Объект.ВалютаДокумента,
					СведенияОЦенеНоменклатуры.Курс, Объект.КурсВзаиморасчетов,
					СведенияОЦенеНоменклатуры.Кратность, Объект.КратностьВзаиморасчетов);
				
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ЗагруженнаяСтрока);
			
	КонецЦикла; 
	
	ТекстИсключаемыеЭлементы = "";
	
	Для Каждого ИсключаемыйЭлемент Из ИсключаемыеДанные Цикл 	
		
		ИсключаемаяСтрокаТаблицы = ЗагруженныеДанные.Найти(ИсключаемыйЭлемент, "Номенклатура");
		
		Если ИсключаемаяСтрокаТаблицы <> Неопределено Тогда
			ЗагруженныеДанные.Удалить(ИсключаемаяСтрокаТаблицы); 
			ТекстИсключаемыеЭлементы = ТекстИсключаемыеЭлементы + Символы.ПС + ИсключаемыйЭлемент.Наименование;
		Иначе
			ИсключаемыйИндекс = ИсключаемыеДанные.Найти(ИсключаемыйЭлемент);
			ИсключаемыеДанные.Удалить(ИсключаемыйИндекс);
		КонецЕсли; 
				
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
		ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(СтруктураЗагруженныхДанных, ИмяТЧ);
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ИмяТЧ="Товары" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""ТМЗ"" добавлено товаров: %1, исключено услуг: %2'"),  
																			ЗагруженныеДанные.Количество(), 
																			ИсключаемыеДанные.Количество());	
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличную часть ""Услуги"" добавлено услуг: %1, исключено товаров: %2'"),  
																		ЗагруженныеДанные.Количество(), 
																		ИсключаемыеДанные.Количество());	
	КонецЕсли;
	
	Если ИсключаемыеДанные.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ":";
		ТекстСообщения = ТекстСообщения + ТекстИсключаемыеЭлементы; 
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаУслуги(Команда)
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетНаОплатуПокупателю.Услуги";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка услуг из файла'");
	
	ДополнительныеПараметры = Новый Структура();     
	ДополнительныеПараметры.Вставить("ИмяТЧ", "Услуги");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);
КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеПоСчету    

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоСчету(Объект, ТабличнаяЧасть, ВыбранноеЗначение);

	УстановитьДоступностьСубконто();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиПриЗаполненииПоСчету(Результат, ДопПараметры) Экспорт
		
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ТабличнаяЧасть].Очистить();
		
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Процедура МетодНачисленияОбновитьЭлементы(Элемент, плТипыНачислений = Ложь)
	Если ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.Оценочные") Тогда
		Объект.ДатаНУ = Дата("00010101000000");
		Элементы.ДатаНУ.Доступность = Ложь;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
 		Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Ложь;
		КонецЕсли;
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеПослеТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
       	Элементы.ПодразделениеМН.Видимость = Истина;
		Элементы.СтатьяБюджета.Видимость = Истина;
       	Элементы.ПодразделениеМН.Доступность = Истина;
		Элементы.СтатьяБюджета.Доступность = Истина;
		Элементы.НачислениеИсполнено.Видимость = Истина;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	ИначеЕсли ТипыНачислений = ПредопределенноеЗначение("Перечисление.ВидыОперацийМН.ОсновныеДоТО") Тогда
		Элементы.ДатаНУ.Доступность = Истина;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	Иначе
		Элементы.ДатаНУ.Доступность = Ложь;
		Элементы.ПодразделениеМН.Доступность = Ложь;
		Элементы.СтатьяБюджета.Доступность = Ложь;
		Элементы.НачислениеИсполнено.Видимость = Ложь;
		Если НЕ Объект.Проведен Тогда
			Объект.УчитыватьКПН = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если плТипыНачислений Тогда
		Объект.ВидОперацииМН = ТипыНачислений; 
	КонецЕсли;
КонецПроцедуры


//Евгений+

&НаКлиенте
Процедура ТипыНачисленийПриИзменении(Элемент)
	МетодНачисленияОбновитьЭлементы(Элемент, Истина);
КонецПроцедуры


//Евгений-
