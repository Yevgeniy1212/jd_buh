#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетАвансов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "ЗапасыКромеПринятыхВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ",      "ЗапасыКромеПринятыхВПереработкуНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "МатериалыПринятыеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота",   "ВидОборотаНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления",   "ВидПоступленияНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления", "ВидПоступленияНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратБУ",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДС",     "ПредъявленныйНДС_Расходы");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДС",             "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОборота",     "ВидОборотаНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота",             "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидПоступления",     "ВидПоступленияНДСПредъявленного_Расходы");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления",         "ВидПоступленияНДСПредъявленного_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратНУ",     "ЗатратыНУ");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ",     "ЗатратыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	//СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1",  "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2",  "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3",  "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ3");
	
	// Табличная часть ОсновныеСредства
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаБУ", "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНУ", "ОсновныеСредстваНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДС", "ПредъявленныйНДС_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "МатериалыПереработчика", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов",  "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетАвансов",   "ВидОперации, ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МатериалыПереработчика") Тогда
		
		ДанныеЗаполнения.МатериалыПереработчика = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Или ДанныеЗаполнения.Свойство("ТребуетсяУчетАвансов") Тогда
		
		ОсобенностиДокумента = ОсобенностиУчетаРасчетов(ДанныеЗаполнения.ВидОперации, ДанныеЗаполнения.ДоговорКонтрагента);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ОсновныеСредства") Тогда
		
		ДанныеЗаполнения.ОсновныеСредства = (ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	КолонкаНоменклатура = ?(ИмяТабличнойЧасти = "ОС", "ОсновноеСредство", "Номенклатура");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(
				ДанныеОбъекта.Организация, СтрокаТабличнойЧасти[КолонкаНоменклатура], ДанныеОбъекта.Дата);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	Иначе
		
		СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, КолонкаНоменклатура, Истина), ДанныеОбъекта.Дата);
			
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[КолонкаНоменклатура]);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
			
	ВидОперации  = ДанныеОбъекта.ВидОперации;
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	 
		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		ИначеЕсли НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетаУчета.СчетУчетаБУ));
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетЗатратБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Товары" Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаДавСырья) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья;
			Иначе
				СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
				//СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку; // 9021 "Материалы на складе"
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
					СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда
					СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;  		
	КонецЕсли;

КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);

КонецПроцедуры

// Заполняет счета расчетов с контрагентом в документе
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ОсобенностиУчетаРасчетов(ВидОперации, ДоговорКонтрагента) Экспорт
	
	ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Если Не ОсобенностиДокумента.ТребуетсяУчетРасчетов Тогда
		ОсобенностиДокумента.ТребуетсяУчетАвансов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Возврат ОсобенностиДокумента;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Сумма");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Номенклатура");
		БлокируемыеРеквизиты.Добавить("СпособРаспределения; ФормаРаспределить");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыПодборТовары, ТоварыИзменитьТовары, ТоварыСкопироватьСтроки, ТоварыВставитьСтроки,
			|ТоварыДобавитьПоШтрихкоду, ТоварыКонтекстноеМенюВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		
		// таб. часть НМА
		БлокируемыеРеквизиты.Добавить("Услуги; ТоварыПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			//ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
			ВидОперации = Неопределено;
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыПоступлениеТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыПоступлениеТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия;

	Если ЗначениеЗаполнено(Основание)
		И ТипЗнч(Основание) = Тип("ДокументСсылка.Доверенность") Тогда
		
		Результат = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьДокументПоДоверенности(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если Объект.ВидОперации = Неопределено ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПустаяСсылка() Тогда

		Объект.ВидОперации  = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
		
	КонецЕсли;
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт);
	ЗаполнятьОС 	= (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);		
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
		Контрагент = Объект.Контрагент;
		Если ЗначениеЗаполнено(Контрагент) И НЕ ПоступлениеТоваровУслугФормы.КонтрагентКакОрганизация(Контрагент) Тогда
			ТекстСообщения  = НСтр("ru = 'Для вида операции ""Поступление от структурного подразделения""
										 |в документе-основании должен быть выбран контрагент,
										 |соответствующий какому-либо структурному подразделению.
										 |Документ ""Поступление ТМЗ и услуг"" не создан.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Объект.ВалютаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");				
	КонецЕсли;
		
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Основание);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоверенностьТовары.НаименованиеТовара,
	|	ДоверенностьТовары.Количество,
	|	ВЫБОР
	|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
	|				И НЕ ДоверенностьТовары.НаименованиеТовара.Услуга
	|			ТОГДА ДоверенностьТовары.ЕдиницаПоКлассификатору
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК ЕдиницаПоКлассификатору,
	|	ВЫБОР
	|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
	|				И НЕ ДоверенностьТовары.НаименованиеТовара.Услуга
	|			ТОГДА ""Товар""
	|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
	|				И ДоверенностьТовары.НаименованиеТовара.Услуга
	|			ТОГДА ""Услуга""
	|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.ОсновныеСредства
	|			ТОГДА ""ОС""
	|	КОНЕЦ КАК ВидТовара,
	|	ВЫБОР
	|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ДоверенностьТовары.НаименованиеТовара.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНДС
	|ИЗ
	|	Документ.Доверенность.Товары КАК ДоверенностьТовары
	|ГДЕ
	|	(ДоверенностьТовары.Ссылка = &ДокументСсылка
	|				И (ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
	|			ИЛИ ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.ОсновныеСредства))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоверенностьТовары.НомерСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидТовара = "Товар" И ЗаполнятьТовары Тогда
			СтрокаТабличнойЧасти                  = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.НаименованиеТовара;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаПоКлассификатору;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			ИмяТабЧасти = "Товары";
		ИначеЕсли Выборка.ВидТовара = "Услуга" И ЗаполнятьУслуги Тогда
			СтрокаТабличнойЧасти              = Объект.Услуги.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.НаименованиеТовара;
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			ИмяТабЧасти = "Услуги";
		ИначеЕсли Выборка.ВидТовара = "ОС" и ЗаполнятьОС Тогда
			СтрокаТабличнойЧасти                  = Объект.ОС.Добавить();
			СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.НаименованиеТовара;
			ИмяТабЧасти = "ОС";
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;
		
		Если ИмяТабЧасти = "ОС" Тогда
			
			СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.ОсновноеСредство, ДанныеОбъекта.Дата);
			   	
		Иначе	
			СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(
				ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ДокументОснование = Основание.Ссылка; 
	
	Если ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Объект.СчетНаОплатуПоставщика = Основание.ДокументОснование;
		
	КонецЕсли;
	
	Объект.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);	
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСправочникуОС(Объект, ЭлементОснование, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если ЭлементОснование.ЭтоГруппа Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя принять к учету группу основных средств.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
	Объект.ВидОперации  = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтрокаТабличнойЧасти                  = Объект.ОС.Добавить();
	СтрокаТабличнойЧасти.ОсновноеСредство = ЭлементОснование.Ссылка;
	ИмяТабЧасти = "ОС";
	
	СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоРеализации(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.ВидОперации,
		|	СобственныеКонтрагентыОрганизация.Организация КАК ОрганизацияДокумента,
		|	ЕСТЬNULL(СобственныеКонтрагентыКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
		|	РеализацияТоваровУслуг.УчитыватьКПН,
		|	РеализацияТоваровУслуг.ВидУчетаНУ,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ОбщиеРеквизиты
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыОрганизация
		|		ПО РеализацияТоваровУслуг.Контрагент = СобственныеКонтрагентыОрганизация.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыКонтрагент
		|		ПО РеализацияТоваровУслуг.Организация = СобственныеКонтрагентыКонтрагент.Организация
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК ДоговорДокумента,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.ТипЦен, ДоговорыКонтрагентов.ТипЦен) КАК ТипЦен
		|ПОМЕСТИТЬ ВТ_ДоговорДокумента
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовОсн
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентовОсн.Ссылка
		|			И (ДоговорыКонтрагентовОсн.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентовОсн.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентовОсн.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента = ДоговорыКонтрагентов.Владелец
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентов.Организация
		|			И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяТаблицы,
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
		|	"""" КАК Содержание,
		|	ЕСТЬNULL(РеализацияТоваровНомераГТД.Количество, РеализацияТоваровУслугТовары.Количество) КАК Количество,
		|	РеализацияТоваровУслугТовары.Коэффициент,
		|	РеализацияТоваровУслугТовары.Цена,
		|	ЕСТЬNULL(РеализацияТоваровНомераГТД.Количество, РеализацияТоваровУслугТовары.Количество) * РеализацияТоваровУслугТовары.Цена КАК Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровНомераГТД.НомерГТД
		|ПОМЕСТИТЬ ВТ_ТабличныеЧасти
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.НомераГТД КАК РеализацияТоваровНомераГТД
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровНомераГТД.Ссылка
		|			И РеализацияТоваровУслугТовары.КлючСвязи = РеализацияТоваровНомераГТД.КлючСвязи
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"",
		|	РеализацияТоваровУслугУслуги.Ссылка,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	NULL,
		|	РеализацияТоваровУслугУслуги.Содержание,
		|	РеализацияТоваровУслугУслуги.Количество,
		|	0,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	NULL
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ВТ_ОбщиеРеквизиты.ВидОперации КАК ВидОперации,
		|	ВТ_ОбщиеРеквизиты.ОрганизацияДокумента КАК ОрганизацияДокумента,
		|	ВТ_ОбщиеРеквизиты.КонтрагентДокумента КАК КонтрагентДокумента,
		|	ВТ_ТабличныеЧасти.ИмяТаблицы КАК ИмяТаблицы,
		|	ВТ_ОбщиеРеквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	ВТ_ОбщиеРеквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	ВТ_ОбщиеРеквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	ВТ_ОбщиеРеквизиты.УчитыватьНДС КАК УчитыватьНДС,
		|	ВТ_ОбщиеРеквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВТ_ДоговорДокумента.ДоговорДокумента КАК ДоговорДокумента,
		|	ВТ_ДоговорДокумента.ТипЦен КАК ТипЦен,
		|	ВТ_ТабличныеЧасти.Номенклатура,
		|	ВТ_ТабличныеЧасти.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТабличныеЧасти.ЕдиницаИзмерения,
		|	ВТ_ТабличныеЧасти.Содержание,
		|	ВТ_ТабличныеЧасти.Количество,
		|	ВТ_ТабличныеЧасти.Коэффициент,
		|	ВТ_ТабличныеЧасти.Цена,
		|	ВТ_ТабличныеЧасти.Сумма,
		|	ВТ_ТабличныеЧасти.СтавкаНДС,
		|	ВТ_ТабличныеЧасти.СуммаНДС,
		|	ВТ_ТабличныеЧасти.Ссылка КАК СсылкаТабЧасти,
		|	ВТ_ТабличныеЧасти.НомерГТД
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорДокумента КАК ВТ_ДоговорДокумента
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ДоговорДокумента.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабличныеЧасти КАК ВТ_ТабличныеЧасти
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ТабличныеЧасти.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТаблицы,
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(ВалютаДокумента),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(УчитыватьКПН),
		|	МАКСИМУМ(ВидУчетаНУ),
		|	МАКСИМУМ(УчитыватьНДС),
		|	МАКСИМУМ(СуммаВключаетНДС),
		|	МАКСИМУМ(ТипЦен),
		|	КОЛИЧЕСТВО(СсылкаТабЧасти)
		|ПО
		|	ВидОперации,
		|	ОрганизацияДокумента,
		|	КонтрагентДокумента,
		|	ДоговорДокумента,
		|	ИмяТаблицы";

	Запрос.УстановитьПараметр("Ссылка", Основание);
		
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТекстСообщения        = "";
	ТекстСозданияДоговора = "";
	
	Пока ВыборкаВидОперации.Следующий() Цикл
		Если ВыборкаВидОперации.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			ТекстСообщения  = НСтр("ru = 'Для ввода на основании вид операции документа-основания должен быть ""Передача структурному подразделению"".'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаВидОперации.СсылкаТабЧасти) Тогда
			ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
			                 + НСтр("ru = '- Табличные части не заполнены, нет информации для ввода на основании.'");
		КонецЕсли;

		ВыборкаОрганизацияДокумента = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизацияДокумента.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрганизацияДокумента.ОрганизацияДокумента) Тогда
				ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
				                 + НСтр("ru = '- Нет организации, соответствующей контрагенту документа-основания.'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстЗаголовкаСообщения = НСтр("ru = 'Обнаружены ошибки в документе-основании:'");
				ВызватьИсключение(ТекстЗаголовкаСообщения + Символы.ПС + ТекстСообщения);
			КонецЕсли;
			
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
			
			Объект.Организация      = ВыборкаОрганизацияДокумента.ОрганизацияДокумента;
			Объект.ВалютаДокумента  = ВыборкаОрганизацияДокумента.ВалютаДокумента;
			Объект.СуммаВключаетНДС = ВыборкаОрганизацияДокумента.СуммаВключаетНДС;
			Объект.УчитыватьНДС     = ВыборкаОрганизацияДокумента.УчитыватьНДС;
			Объект.УчитыватьКПН     = ВыборкаОрганизацияДокумента.УчитыватьКПН;
			Объект.ВидУчетаНУ       = ВыборкаОрганизацияДокумента.ВидУчетаНУ;
			Объект.ВидОперации      = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, ВыбранныйВидОперации);
			Объект.Склад            = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

			ВыборкаКонтрагентДокумента = ВыборкаОрганизацияДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагентДокумента.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагентДокумента.КонтрагентДокумента) Тогда
					ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект");
				Иначе
					Объект.Контрагент              = ВыборкаКонтрагентДокумента.КонтрагентДокумента;
					Объект.КурсВзаиморасчетов      = ВыборкаКонтрагентДокумента.КурсВзаиморасчетов;
					Объект.КратностьВзаиморасчетов = ВыборкаКонтрагентДокумента.КратностьВзаиморасчетов;
				КонецЕсли;
				
				ВыборкаДоговорДокумента = ВыборкаКонтрагентДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДоговорДокумента.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговорДокумента.ДоговорДокумента) Тогда
						Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
							ТекстСозданияДоговора  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСозданияДоговора, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							
							ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
							ДоговорКонтрагентаДокумента.Владелец     = Объект.Контрагент;
							ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Объект.Организация) + ", " + СокрЛП(Объект.ВалютаДокумента) + ")"; 
							ДоговорКонтрагентаДокумента.Организация  = Объект.Организация;
							ДоговорКонтрагентаДокумента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
							ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов  = Объект.ВалютаДокумента;
							ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
							Попытка
								ДоговорКонтрагентаДокумента.Записать();
							Исключение
								Информация = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Новый договор не создан. %1'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							КонецПопытки;
							Объект.ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						КонецЕсли;
					Иначе
						Объект.ДоговорКонтрагента = ВыборкаДоговорДокумента.ДоговорДокумента;
						Если ЗначениеЗаполнено(ВыборкаДоговорДокумента.ТипЦен) Тогда
							Объект.ТипЦен = ВыборкаДоговорДокумента.ТипЦен;
						КонецЕсли;
						
						Объект.УчастникиСовместнойДеятельности.Очистить();
						ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);						
					КонецЕсли;

					ВыборкаИмяТаблицы = ВыборкаДоговорДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИмяТаблицы.Следующий() Цикл
						ИмяТаблицы = ВыборкаИмяТаблицы.ИмяТаблицы;

						Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
							ВыборкаДетальныеЗаписи = ВыборкаИмяТаблицы.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								НоваяСтрока = Объект[ИмяТаблицы].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Объект.ДокументОснование = Основание.Ссылка;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоПередачеОС(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПередачаОС.Ссылка,
		|	ПередачаОС.ВидОперации,
		|	СобственныеКонтрагентыОрганизация.Организация КАК ОрганизацияДокумента,
		|	ЕСТЬNULL(СобственныеКонтрагентыКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДокумента,
		|	ПередачаОС.ВалютаДокумента,
		|	ПередачаОС.КурсВзаиморасчетов,
		|	ПередачаОС.КратностьВзаиморасчетов,
		|	ПередачаОС.УчитыватьКПН,
		|	ПередачаОС.ВидУчетаНУ,
		|	ПередачаОС.УчитыватьНДС,
		|	ПередачаОС.СуммаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ОбщиеРеквизиты
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыОрганизация
		|		ПО ПередачаОС.Контрагент = СобственныеКонтрагентыОрганизация.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыКонтрагент
		|		ПО ПередачаОС.Организация = СобственныеКонтрагентыКонтрагент.Организация
		|ГДЕ
		|	ПередачаОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК ДоговорДокумента,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.ТипЦен, ДоговорыКонтрагентов.ТипЦен) КАК ТипЦен
		|ПОМЕСТИТЬ ВТ_ДоговорДокумента
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовОсн
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентовОсн.Ссылка
		|			И (ДоговорыКонтрагентовОсн.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентовОсн.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентовОсн.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента = ДоговорыКонтрагентов.Владелец
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентов.Организация
		|			И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйДвиженияССубконто.ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|				ТОГДА НалоговыйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНУ,
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйДвиженияССубконто.ВидУчетаКт <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|					И НалоговыйДвиженияССубконто.ВидУчетаКт <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)
		|				ТОГДА НалоговыйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПР,
		|	НалоговыйДвиженияССубконто.СубконтоКт1 КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВТ_СтоимостьОС
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор = &Ссылка
		|				И СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВнеоборотныеАктивы))
		|				И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты)),
		|			,
		|			) КАК НалоговыйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйДвиженияССубконто.СубконтоКт1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяТаблицы,
		|	ПередачаОСОС.Ссылка,
		|	ПередачаОСОС.НомерСтроки,
		|	ПередачаОСОС.ОсновноеСредство,
		|	ПередачаОСОС.Сумма,
		|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаНУ, 0) КАК СуммаНУ,
		|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаПР, 0) КАК СуммаПР,
		|	ПередачаОСОС.СтавкаНДС,
		|	ПередачаОСОС.СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТабличныеЧасти
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьОС КАК ВТ_СтоимостьОС
		|		ПО ПередачаОСОС.ОсновноеСредство = ВТ_СтоимостьОС.ОсновноеСредство
		|ГДЕ
		|	ПередачаОСОС.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ВТ_ОбщиеРеквизиты.ВидОперации КАК ВидОперации,
		|	ВТ_ОбщиеРеквизиты.ОрганизацияДокумента КАК ОрганизацияДокумента,
		|	ВТ_ОбщиеРеквизиты.КонтрагентДокумента КАК КонтрагентДокумента,
		|	ВТ_ТабличныеЧасти.ИмяТаблицы КАК ИмяТаблицы,
		|	ВТ_ОбщиеРеквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	ВТ_ОбщиеРеквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	ВТ_ОбщиеРеквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	ВТ_ОбщиеРеквизиты.УчитыватьНДС КАК УчитыватьНДС,
		|	ВТ_ОбщиеРеквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВТ_ДоговорДокумента.ДоговорДокумента КАК ДоговорДокумента,
		|	ВТ_ДоговорДокумента.ТипЦен КАК ТипЦен,
		|	ВТ_ТабличныеЧасти.ОсновноеСредство,
		|	ВТ_ТабличныеЧасти.Сумма,
		|	ВТ_ТабличныеЧасти.СуммаНУ,
		|	ВТ_ТабличныеЧасти.СуммаПР,
		|	ВТ_ТабличныеЧасти.СтавкаНДС,
		|	ВТ_ТабличныеЧасти.СуммаНДС,
		|	ВТ_ТабличныеЧасти.Ссылка КАК СсылкаТабЧасти,
		|	ВТ_ТабличныеЧасти.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорДокумента КАК ВТ_ДоговорДокумента
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ДоговорДокумента.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабличныеЧасти КАК ВТ_ТабличныеЧасти
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ТабличныеЧасти.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТаблицы,
		|	НомерСтроки
		|
		|ИТОГИ
		|	МАКСИМУМ(ВалютаДокумента),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(УчитыватьКПН),
		|	МАКСИМУМ(ВидУчетаНУ),
		|	МАКСИМУМ(УчитыватьНДС),
		|	МАКСИМУМ(СуммаВключаетНДС),
		|	МАКСИМУМ(ТипЦен),
		|	КОЛИЧЕСТВО(СсылкаТабЧасти)
		|ПО
		|	ВидОперации,
		|	ОрганизацияДокумента,
		|	КонтрагентДокумента,
		|	ДоговорДокумента,
		|	ИмяТаблицы";

	Запрос.УстановитьПараметр("Ссылка", Основание);
		
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТекстСообщения        = "";
	ТекстСозданияДоговора = "";
	
	Пока ВыборкаВидОперации.Следующий() Цикл
		Если ВыборкаВидОперации.ВидОперации <> Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
			ТекстСообщения  = НСтр("ru = 'Для ввода на основании вид операции должен быть ""Передача структурному подразделению"".'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаВидОперации.СсылкаТабЧасти) Тогда
			ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
							 + НСтр("ru = '- Табличная часть не заполнена, нет информации для ввода на основании.'");
		КонецЕсли;

		ВыборкаОрганизацияДокумента = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизацияДокумента.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрганизацияДокумента.ОрганизацияДокумента) Тогда
				ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
								 + НСтр("ru = '- Нет организации, соответствующей контрагенту документа-основания.'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстЗаголовкаСообщения = НСтр("ru = 'Обнаружены ошибки в документе-основании:'");
				ВызватьИсключение(ТекстЗаголовкаСообщения + Символы.ПС + ТекстСообщения);
			КонецЕсли;
			
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
			
			Объект.Организация      = ВыборкаОрганизацияДокумента.ОрганизацияДокумента;
			Объект.ВалютаДокумента  = ВыборкаОрганизацияДокумента.ВалютаДокумента;
			Объект.СуммаВключаетНДС = ВыборкаОрганизацияДокумента.СуммаВключаетНДС;
			Объект.УчитыватьНДС     = ВыборкаОрганизацияДокумента.УчитыватьНДС;
			Объект.УчитыватьКПН     = ВыборкаОрганизацияДокумента.УчитыватьКПН;
			Объект.ВидОперации      = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, ВыбранныйВидОперации);
			Объект.ВидУчетаНУ       = ВыборкаОрганизацияДокумента.ВидУчетаНУ;
			Объект.Склад            = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

			ВыборкаКонтрагентДокумента = ВыборкаОрганизацияДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагентДокумента.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагентДокумента.КонтрагентДокумента) Тогда
					ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект");
				Иначе
					Объект.Контрагент              = ВыборкаКонтрагентДокумента.КонтрагентДокумента;
					Объект.КурсВзаиморасчетов      = ВыборкаКонтрагентДокумента.КурсВзаиморасчетов;
					Объект.КратностьВзаиморасчетов = ВыборкаКонтрагентДокумента.КратностьВзаиморасчетов;
				КонецЕсли;
				
				ВыборкаДоговорДокумента = ВыборкаКонтрагентДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДоговорДокумента.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговорДокумента.ДоговорДокумента) Тогда
						Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
							ТекстСозданияДоговора  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСозданияДоговора, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							
							ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
							ДоговорКонтрагентаДокумента.Владелец     = Объект.Контрагент;
							ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Объект.Организация) + ", " + СокрЛП(Объект.ВалютаДокумента) + ")"; 
							ДоговорКонтрагентаДокумента.Организация  = Объект.Организация;
							ДоговорКонтрагентаДокумента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
							ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов  = Объект.ВалютаДокумента;
							ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
							Попытка
								ДоговорКонтрагентаДокумента.Записать();
							Исключение
								Информация = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Новый договор не создан. %1'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							КонецПопытки;
							Объект.ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						КонецЕсли;
					Иначе
						Объект.ДоговорКонтрагента = ВыборкаДоговорДокумента.ДоговорДокумента;
						Если ЗначениеЗаполнено(ВыборкаДоговорДокумента.ТипЦен) Тогда
							Объект.ТипЦен = ВыборкаДоговорДокумента.ТипЦен;
						КонецЕсли;
						
						Объект.УчастникиСовместнойДеятельности.Очистить();
						ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
						
					КонецЕсли;

					ВыборкаИмяТаблицы = ВыборкаДоговорДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИмяТаблицы.Следующий() Цикл
						ИмяТаблицы = ВыборкаИмяТаблицы.ИмяТаблицы;

						Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
							ВыборкаДетальныеЗаписи = ВыборкаИмяТаблицы.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								НоваяСтрока = Объект[ИмяТаблицы].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Объект.ДокументОснование = Основание.Ссылка;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСчетФактураПолученный(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьОС = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	
	Если Основание.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  
	
	Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ВидОперации = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();

	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка,,ЗаполнятьТовары,ЗаполнятьУслуги,ЗаполнятьОС);
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
		УчестьСуммуНДС = Истина;
	Иначе
		УчестьСуммуНДС = Ложь;
	КонецЕсли;
		
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДокументОснование = Основание;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОплатаОтПокупателяПлатежнойКартой(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ВидОперации = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Основание);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Эквайрер,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетовПоДоговору,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОплатаОтПокупателяПлатежнойКартой.СуммаТорговойУступки
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка = &ДокументСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Контрагент = Выборка.Эквайрер;
		Объект.ДоговорКонтрагента = Выборка.ДоговорВзаиморасчетовЭквайрера;
	
		ВалютаРеглУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(Выборка.ДоговорВзаиморасчетовЭквайрера, ВалютаРеглУчета);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Объект.Дата);
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		Если Выборка.ВедениеВзаиморасчетовПоДоговору = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Объект.Сделка = Основание;
		КонецЕсли;
		
		СтрокаТабличнойЧасти            = Объект.Услуги.Добавить();
		СтрокаТабличнойЧасти.Цена       = Основание.СуммаТорговойУступки;
		СтрокаТабличнойЧасти.Сумма      = Основание.СуммаТорговойУступки;
		СтрокаТабличнойЧасти.Количество = 1;	
		СтрокаТабличнойЧасти.СтавкаНДС  = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		
		Структура = Новый Структура("ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС, НДСВключенВСтоимость");
		ЗаполнитьЗначенияСвойств(Структура, Объект);
		
		СтруктураСтрокиТабЧасти = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
			|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
			|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
			|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, Всего,
			|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
			|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
			|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
			|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТабЧасти, СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтруктураСтрокиТабЧасти, Структура);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтруктураСтрокиТабЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтрокиТабЧасти);
		
		Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
		
		Объект.ДокументОснование = Основание;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыПоступлениеТоваровУслуг = Новый Соответствие;
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары, "ФормаДокументаТовары");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги, "ФормаДокументаУслуги");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, "ФормаДокументаОбщая");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку, "ФормаДокументаОбщая");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт, "ФормаДокументаОбщая");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, "ФормаДокументаОбщая");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента, "ФормаДокументаОбщая");
	ФормыПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства, "ФормаДокументаОсновныеСредства");
	
	Возврат ФормыПоступлениеТоваровУслуг;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ОпределятьСтоимостьПриобретенияПоКурсуАванса    = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);

	ВедетсяАналитУчетОсПоМОЛ 						= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитУчетОсПоПодразделениям 			= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОпределятьСтоимостьПриобретенияПоКурсуАванса  , "ОпределятьСтоимостьПриобретенияПоКурсуАванса");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоПодразделениям  		  , "ВедетсяАналитУчетОсПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоМОЛ					  , "ВедетсяАналитУчетОсПоМОЛ");
		
	Налогоплательщик = Реквизиты.Организация;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПроверкиСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступлениеПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги",	      НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимОС",	      	  НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеТовары",     НСтр("ru='Оприходованы ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеОС",     	  НСтр("ru='Поступление ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС", НСтр("ru='Выделен НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ОпределятьСтоимостьПриобретенияПоКурсуАванса", ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаТовары",                   ПараметрыПроведения.ТаблицаТовары);
	СтруктураТаблицДокумента.Вставить("ТаблицаУслуги",                   ПараметрыПроведения.ТаблицаУслуги);
	СтруктураТаблицДокумента.Вставить("ТаблицаОС",                 	     ПараметрыПроведения.ТаблицаОС);
	
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьОС,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоступлениеВПереработку,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоМОЛ,
	|	Реквизиты.СобытиеОС,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету,
	|	Реквизиты.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедетсяАналитУчетОсПоПодразделениям КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	Реквизиты.ВедетсяАналитУчетОсПоМОЛ КАК ВедетсяАналитУчетОсПоМОЛ,
	|	Реквизиты.СобытиеОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОС, ЛОЖЬ) КАК ЕстьОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету,
	|	Реквизиты.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.НомерГТД  КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Содержание,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	1 КАК Количество,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаОС.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаОС.СуммаНДС
		|	КОНЕЦ КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СуммаПР,
		|	ТаблицаОС.СуммаНУ,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаОС.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
		
		
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		СуммыТаблицыОС = Результат[НомераТаблиц["СуммыТаблицыОС"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыОС, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыОС", СуммыТаблицыОС);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаОС", "ПОМЕСТИТЬ ВременнаяТаблицаОС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.Ссылка = &Ссылка", "ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыОС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки,
		|	ВременнаяТаблицаОС.СтавкаНДС,
		|	ВременнаяТаблицаОС.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаОС.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаОС.Сумма,
		|	ВременнаяТаблицаОС.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыОС.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыОС
	|ИЗ
	|	&СуммыТаблицыОС КАК СуммыТаблицыОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОС.Ссылка,
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.ОсновноеСредство,
	|	ВременнаяТаблицаОС.Количество,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма КАК Сумма,
	|	ВременнаяТаблицаОС.СуммаПР,
	|	ВременнаяТаблицаОС.СуммаНУ,
	|	СуммыТаблицыОС.СуммаНДС,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаБУ,
	|	ВременнаяТаблицаОС.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаОС.СчетУчетаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаНУ,
	|	ВременнаяТаблицаОС.НДСВидОборота,
	|	ВременнаяТаблицаОС.НДСВидПоступления,
	|	ВременнаяТаблицаОС.ПодразделениеОрганизации,
	|	ВременнаяТаблицаОС.МОЛОрганизации
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыОС КАК СуммыТаблицыОС
	|		ПО ВременнаяТаблицаОС.НомерСтроки = СуммыТаблицыОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма КАК Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.НДСВидОборота,
	|	ВременнаяТаблицаТовары.НДСВидПоступления,
	|	ВременнаяТаблицаТовары.НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Содержание,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма КАК Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.СчетЗатратБУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаУслуги.СчетЗатратНУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ3,
	|	ВременнаяТаблицаУслуги.НДСВидОборота,
	|	ВременнаяТаблицаУслуги.НДСВидПоступления
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС"
	+ ?(Реквизиты.ЕстьТовары, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаТовары.СуммаНДСВзаиморасчетов,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары", "")
	+ ?(Реквизиты.ЕстьОС, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаОС.СуммаНДСВзаиморасчетов,
	|		ТаблицаОС.Сумма КАК Сумма,
	|		ТаблицаОС.СуммаНДС
	|	ИЗ
	|		ТаблицаОС КАК ТаблицаОС", "")
	+ ?(Реквизиты.ЕстьУслуги, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуги.СуммаВзаиморасчетов,
	|		ТаблицаУслуги.СуммаНДСВзаиморасчетов,
	|		ТаблицаУслуги.Сумма,
	|		ТаблицаУслуги.СуммаНДС
	|	ИЗ
	|		ТаблицаУслуги КАК ТаблицаУслуги", "") + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.Сумма + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДС
	|	КОНЕЦ КАК СуммаРегл,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	&СодержаниеТовары КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОС", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.Количество КАК Количество,
		|	ТаблицаОС.Сумма КАК Сумма,
		|	ТаблицаОС.СуммаПР КАК СуммаПР,
		|	ТаблицаОС.СуммаНУ КАК СуммаНУ,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаОС.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	&СодержаниеОС КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаОС.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Если НЕ Реквизиты.ЕстьУслуги
		ИЛИ (Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаУслуги", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры) КАК ВидКорСубконто2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления,
		|	ТаблицаУслуги.Содержание КАК Содержание
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента
		ИЛИ НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииПоступления,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ТоварыОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаОС.НДСВидОборота КАК ВидОборота,
		|	ТаблицаОС.НДСВидПоступления КАК ВидОперацииПоступления,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаОС.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаУслуги.НДСВидОборота КАК ВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления КАК ВидОперацииПоступления,
		|   Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОССобытияОСОрганизаций", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""ТаблицаОССобытияОСОрганизаций"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство,
		|	0 КАК СуммаЗатратБУ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаОССобытияОСОрганизаций", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОССостоянияОСОрганизаций", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""СостоянияОСОрганизацийТаблицаОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Дата КАК ДатаСостояния,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ТаблицаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило) КАК СостояниеОС
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаОССостоянияОСОрганизаций", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПроверкиСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОСДляПроверки"  , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("РеквизитыДляПроверкиОС", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""ТаблицаОСДляПроверки"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""РеквизитыДляПроверкиОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило) КАК Состояние
		|ИЗ
		|	Реквизиты КАК Реквизиты" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		
		ПараметрыПроведения.Вставить("ТаблицаОСДляПроверки"	 , Неопределено);
		ПараметрыПроведения.Вставить("РеквизитыДляПроверкиОС", Неопределено);
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары
		И НЕ (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
		  ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) Тогда
			  
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Реквизиты.Склад КАК Склад
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|ГДЕ НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый       
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);   
		
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// З-1 (приходный ордер запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'З-1 (приходный ордер запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 52;
	КонецЕсли;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная,НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная,НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная,НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
	// Штрихкода ОС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик 		= "УправлениеПечатьюБККлиент.ПечатьШтрихкодовОС";
	КомандаПечати.МенеджерПечати 	= "";
	КомандаПечати.Идентификатор 	= "ШтрихкодаОС";
	КомандаПечати.Представление 	= НСтр("ru = 'Штрихкоды ОС'");
	КомандаПечати.Порядок 			= 100;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать приходной накладной
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПриходнаяНакладная",
			НСтр("ru = 'Приходная накладная'"),
			ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПоступлениеТоваровУслуг.ПФ_MXL_Накладная");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПриходнаяНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;		
			
	КонецЕсли;

	// Печать формы З-1
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяЗ1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяЗ1",
			НСтр("ru = 'З-1 (приходный ордер запасов)'"),
			//Евгений+
			//ПечатьЗ1(МассивОбъектов, ОбъектыПечати),  
			ПечатьЗ3(МассивОбъектов, ОбъектыПечати),
			//Евгений-
			,
			"ОбщийМакет.ПФ_MXL_З1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодОС = Ложь;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС			= Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Склад
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.Номер,
	|	ВТ_Доки.Дата,
	|	ВТ_Доки.Основание,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента,
	|	ВТ_Доки.ВалютаДокумента,
	|	ВТ_Доки.УчитыватьНДС,
	|	ВТ_Доки.СуммаВключаетНДС,
	|	ВТ_Доки.Склад,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.КоличествоПоДокументу,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.КодАртикул КАК КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаНаименование,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	|		Товары.Цена КАК Цена,
	|		СУММА(Товары.Сумма) КАК Сумма,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	|		СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В(&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Ссылка,
	|		Товары.Цена,
	|		Товары.Номенклатура,
	|		Товары.Номенклатура."+ ТекстКодАртикул + ",
	|		Товары.ЕдиницаИзмерения.Представление) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Ссылка,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	ВЫРАЗИТЬ(Услуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	Услуги.Номенклатура."+ ТекстКодАртикул + ",
	|	""ед."",
	|	Услуги.СуммаНДС,
	|	Услуги.НомерСтроки,
	|	1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОС.Ссылка,
	|	1,
	|	ОС.Сумма,
	|	ОС.Сумма,
	|	ВЫРАЗИТЬ(ОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
	|	" + ?(КодОС,"ОС.ОсновноеСредство.Код", """""") + ",
	|	""ед."",
	|	ОС.СуммаНДС,
	|	ОС.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Метка,
	|	ВложенныйЗапрос.НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровУслуг.ПФ_MXL_Накладная", КодЯзыка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеТоваровУслуг_Накладная";
	
	ЗаголовокШапка = Макет.ПолучитьОбласть("Заголовок");
	Поставщик      = Макет.ПолучитьОбласть("Поставщик");
	Покупатель     = Макет.ПолучитьОбласть("Покупатель");
	Основание      = Макет.ПолучитьОбласть("Основание");
	Склад 		   = Макет.ПолучитьОбласть("Склад");
	Итого          = Макет.ПолучитьОбласть("Итого");
	ИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ИтогоСНДС      = Макет.ПолучитьОбласть("ИтогоСНДС");
	СуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	Подписи        = Макет.ПолучитьОбласть("Подписи");
	ШапкаТаблицы   = Макет.ПолучитьОбласть(ОбластьШапки);
	Строка         = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
	
		// Выводим шапку накладной

		ЗаголовокШапка.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru='Приходная накладная'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ЗаголовокШапка);

		Поставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,"));
		Поставщик.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(Поставщик);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		Покупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"));
		Покупатель.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(Покупатель);
		
		Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
			Основание.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(Основание);
		КонецЕсли;

		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			Склад.Параметры.ПредставлениеСклада = Шапка.Склад;
			ТабДокумент.Вывести(Склад);
		КонецЕсли;
	
		// Вывести табличную часть
		Если ВыводитьКоды Тогда
			ШапкаТаблицы.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(ШапкаТаблицы);

		Сумма    = 0;
		СуммаНДС = 0;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Строка.Параметры.Заполнить(ВыборкаСтрокТовары);
				Строка.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
				Если ВыводитьКоды Тогда
					Строка.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;   
				ТабДокумент.Вывести(Строка);
				
				Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		Итого.Параметры.ИтогСумма = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(Итого);

		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ИтогоНДС.Параметры.ИтогСуммаНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ИтогоНДС.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'", КодЯзыка), НСтр("ru = 'Сумма НДС:'", КодЯзыка));
			ТабДокумент.Вывести(ИтогоНДС);
			
			Если НЕ Шапка.СуммаВключаетНДС ТОгда
				ИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
				ТабДокумент.Вывести(ИтогоСНДС);
			КонецЕсли;
			
		КонецЕсли;

		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %1, на сумму %2'",КодЯзыка);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИтоговаяСтрока, ?(ВыборкаСтрокТовары = Неопределено, 0, ВыборкаСтрокТовары.Количество()), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
		СуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		СуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(СуммаПрописью);

		// Вывести подписи
		Подписи.Параметры.Заполнить(Шапка);
	
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.Дата);
			Подписи.Параметры.Получил = ДанныеМОЛ.Представление;
		КонецЕсли;	
	
		ТабДокумент.Вывести(Подписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК КорреспондентскийСчет,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.НомерДокумента,
	|	ВТ_Доки.ДатаДокумента,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента,
	|	ВТ_Доки.ВалютаДокумента,
	|	ВТ_Доки.ВалютаПредставление,
	|	ВТ_Доки.УчитыватьНДС,
	|	ВТ_Доки.СуммаВключаетНДС,
	|	ВТ_Доки.Склад,
	|	ВТ_Доки.КорреспондентскийСчет,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ,
	|	ВТ_Доки.НомерСопроводительногоДокумента
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
			  
	Шапка = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	Товары.Ссылка КАК Ссылка,
	                        |	СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	                        |	Товары.Цена КАК Цена,
	                        |	СУММА(Товары.Сумма) КАК ВсегоСНДС,
	                        |	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	                        |	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	                        |	Товары.Номенклатура.Код КАК ТоварКод,
	                        |	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаКод,
	                        |	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	Товары.НомерСтроки КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	                        |ГДЕ
	                        |	Товары.Ссылка В(&МассивОбъектов)
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	Товары.Ссылка,
	                        |	Товары.Цена,
	                        |	Товары.Номенклатура.Наименование,
	                        |	Товары.Номенклатура.Код,
	                        |	Товары.ЕдиницаИзмерения.Код,
	                        |	Товары.ЕдиницаИзмерения.Представление,
	                        |	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	                        |	Товары.НомерСтроки
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки,
	                        |	ТоварНаименование
	                        |ИТОГИ
	                        |	СУММА(КоличествоПоДокументу),
	                        |	СУММА(ВсегоСНДС),
	                        |	СУММА(СуммаНДС)
	                        |ПО
	                        |	Ссылка
	                        |АВТОУПОРЯДОЧИВАНИЕ";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З1");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеТоваровУслуг_З1";
	
	ЗаголовокШапка     = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы      = Макет.ПолучитьОбласть("Строка");
	Итого 			   = Макет.ПолучитьОбласть("Итого");
	Подвал             = Макет.ПолучитьОбласть("Подвал");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		// Выводим шапку накладной
		ЗаголовокШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ЗаголовокШапка.Параметры.ПредставлениеСклада      = Шапка.Склад.Наименование;
		ЗаголовокШапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ТабДокумент.Вывести(ЗаголовокШапка);

		ЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ЗаголовокДокумента.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента), "ПолноеНаименование,");
		ЗаголовокДокумента.Параметры.НомерДокумента          = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ТабДокумент.Вывести(ЗаголовокДокумента);
	
		ЗаголовокТаблицы.Параметры.ВалютаПредставление = Шапка.ВалютаПредставление;
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		Количество    = 0;
		Сумма    	  = 0;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
				ТабДокумент.Вывести(СтрокаТаблицы);

				Сумма      = Сумма      + ВыборкаСтрокТовары.ВсегоСНДС;
				Количество = Количество + ВыборкаСтрокТовары.КоличествоПоДокументу;

			КонецЦикла;
			
		КонецЕсли;

		// Вывести Итого
		Итого.Параметры.ИтогВсегоСНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		
		Итого.Параметры.ИтогКоличествоПоДокументу = Количество;
		ТабДокумент.Вывести(Итого);
	
		// Вывести подвал
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			
			ДанныеМОЛ            = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
			Подвал.Параметры.МОЛ = ДанныеМОЛ.Представление;
			
		КонецЕсли;	
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.СтруктурноеПодразделение КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ответственный КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПечатьШтрихкодовОС

Функция ДанныеДляПечатиШтрихкодовОС(МассивДокументов) Экспорт
	
	СтруктураДанных = ПодключаемоеОборудованиеБКВызовСервера.ПолучитьДанныеДляПечатиОС("ПоступлениеТоваровУслуг", МассивДокументов);
	
	Если СтруктураДанных.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для печати. Не заполнена табличная часть ""ОС""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе	
		Возврат ПоместитьВоВременноеХранилище(СтруктураДанных);
	КонецЕсли;	
	
КонецФункции	

//+[ДОРАБОТКА] Автор: Байбакиров А.У. Дата: 30.04.2024  
Функция ДанныеДляПечатиШтрихкодовНоменклатуры(МассивДокументов) Экспорт
	
	СтруктураДанных = ПодключаемоеОборудованиеБКВызовСервера.ПолучитьДанныеДляПечатиНоменклатуры("ПоступлениеТоваровУслуг", МассивДокументов);
	
	Если СтруктураДанных.Номенклатура.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для печати. Не заполнена табличная часть ""Товары""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе	
		Возврат ПоместитьВоВременноеХранилище(СтруктураДанных);
	КонецЕсли;	
	
КонецФункции
//-[ДОРАБОТКА] Автор: Байбакиров А.У. Дата: 30.04.2024

#КонецОбласти

// Возвращает список доступных видов операций, в зависимости от настроек информационной базы
//
Функция ДоступныеВидыОпераций() Экспорт
	
	ДоступныеОперации   = Новый Массив;
	ИсключаемыеОперации = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда 
		ИсключаемыеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения);
	КонецЕсли;
	
	Для Каждого ВидОперации Из Перечисления.ВидыОперацийПоступлениеТоваровУслуг Цикл
		Если ИсключаемыеОперации.Найти(ВидОперации) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ДоступныеОперации.Добавить(ВидОперации);
	КонецЦикла;
	
	Возврат ДоступныеОперации;
	
КонецФункции

Функция ВозвратСуммыНДС(СтавкаНДС, Сумма, Объект, СуммаВключаетАкциз = Ложь, СуммаАкциза = 0)
	
	Если НЕ СуммаВключаетАкциз Тогда
		СуммаДляРасчетаНДС = Сумма + СуммаАкциза;
	Иначе
		СуммаДляРасчетаНДС = Сумма;  
	КонецЕсли;
	
	Если (Объект.УчитыватьНДС) И (Объект.СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * СуммаДляРасчетаНДС / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = СуммаДляРасчетаНДС;
	КонецЕсли;
	
	Если Объект.УчитыватьНДС Тогда 
		Если НЕ Объект.СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции

//< <Контротек Артем 21.10.2020
Процедура ЗаполнитьДокументПоВедомостьТалоновНаСпецПитание(Объект, Основание) Экспорт

	Если Не Основание.Проведен Тогда
		Сообщить("Сначала документ необходимо провести!");
		Возврат;
	КонецЕсли;	
	
	Если Основание.ОтраженВУчете Тогда 			
		Сообщить("Этот документ уже отражен в учете.");
	 КонецЕсли; 

	 
	 		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоПодразделениям.Номенклатура КАК Номенклатура,
		|	ПоПодразделениям.ВидПоступления КАК ВидПоступления,
		|	ПоПодразделениям.Субконто1 КАК Субконто1,
		|	ПоПодразделениям.Субконто2 КАК Субконто2,
		|	ПоПодразделениям.Субконто3 КАК Субконто3,
		|	ПоПодразделениям.Счет КАК Счет,
		|	ПоПодразделениям.Подразделение КАК ПодразделениеФизЛицо,
		|	ПоПодразделениям.Договорник КАК Договорник,
		|	NULL КАК ФизЛицоДоговорника,
		|	ПоПодразделениям.КоличествоЗавтрак КАК КоличествоЗавтрак,
		|	ПоПодразделениям.ЦенаЗавтрак КАК ЦенаЗавтрак,
		|	ПоПодразделениям.КоличествоОбед КАК КоличествоОбед,
		|	ПоПодразделениям.ЦенаОбед КАК ЦенаОбед,
		|	ПоПодразделениям.КоличествоУжин КАК КоличествоУжин,
		|	ПоПодразделениям.ЦенаУжин КАК ЦенаУжин,
		|	ПоПодразделениям.КоличествоНочное КАК КоличествоНочное,
		|	ПоПодразделениям.ЦенаНочное КАК ЦенаНочное
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(Спецпитание.Номенклатура) КАК Номенклатура,
		|		СУММА(Спецпитание.КоличествоЗавтрак) КАК КоличествоЗавтрак,
		|		МАКСИМУМ(Спецпитание.ЦенаЗавтрак) КАК ЦенаЗавтрак,
		|		МАКСИМУМ(Спецпитание.ВидПоступления) КАК ВидПоступления,
		|		МАКСИМУМ(СчетаУчетаСпецпитание.Субконто2) КАК Субконто2,
		|		МАКСИМУМ(СчетаУчетаСпецпитание.Субконто3) КАК Субконто3,
		|		МАКСИМУМ(СчетаУчетаСпецпитание.Счет) КАК Счет,
		|		МАКСИМУМ(СчетаУчетаСпецпитание.Субконто1) КАК Субконто1,
		|		Спецпитание.Подразделение КАК Подразделение,
		|		ЛОЖЬ КАК Договорник,
		|		СУММА(Спецпитание.КоличествоОбед) КАК КоличествоОбед,
		|		СУММА(Спецпитание.КоличествоУжин) КАК КоличествоУжин,
		|		СУММА(Спецпитание.КоличествоНочное) КАК КоличествоНочное,
		|		МАКСИМУМ(Спецпитание.ЦенаОбед) КАК ЦенаОбед,
		|		МАКСИМУМ(Спецпитание.ЦенаУжин) КАК ЦенаУжин,
		|		МАКСИМУМ(Спецпитание.ЦенаНочное) КАК ЦенаНочное
		|	ИЗ
		|		РегистрСведений.Спецпитание КАК Спецпитание
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаСпецпитание КАК СчетаУчетаСпецпитание
		|			ПО Спецпитание.Подразделение = СчетаУчетаСпецпитание.Подразделение
		|	ГДЕ
		|		НЕ Спецпитание.Командировка
		|		И Спецпитание.Регистратор = &ВыбранныйДокумент
		|		И НЕ Спецпитание.Договорник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Спецпитание.Подразделение) КАК ПоПодразделениям
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Договорники.Номенклатура,
		|	Договорники.ВидПоступления,
		|	Договорники.Субконто1,
		|	Договорники.Субконто2,
		|	Договорники.Субконто3,
		|	Договорники.Счет,
		|	Договорники.Подразделение,
		|	Договорники.Договорник,
		|	Договорники.ФизЛицо,
		|	Договорники.КоличествоЗавтрак,
		|	Договорники.ЦенаЗавтрак,
		|	Договорники.КоличествоОбед,
		|	Договорники.ЦенаОбед,
		|	Договорники.КоличествоУжин,
		|	Договорники.ЦенаУжин,
		|	Договорники.КоличествоНочное,
		|	Договорники.ЦенаНочное
		|ИЗ
		|	(ВЫБРАТЬ
		|		Спецпитание.Подразделение КАК Подразделение,
		|		Спецпитание.Номенклатура КАК Номенклатура,
		|		Спецпитание.КоличествоЗавтрак КАК КоличествоЗавтрак,
		|		Спецпитание.ЦенаЗавтрак КАК ЦенаЗавтрак,
		|		Спецпитание.ВидПоступления КАК ВидПоступления,
		|		СчетаУчетаСпецпитание.Счет КАК Счет,
		|		СчетаУчетаСпецпитание.Субконто1 КАК Субконто1,
		|		СчетаУчетаСпецпитание.Субконто2 КАК Субконто2,
		|		СчетаУчетаСпецпитание.Субконто3 КАК Субконто3,
		|		Спецпитание.ФизЛицо КАК ФизЛицо,
		|		Спецпитание.Договорник КАК Договорник,
		|		Спецпитание.КоличествоОбед КАК КоличествоОбед,
		|		Спецпитание.КоличествоУжин КАК КоличествоУжин,
		|		Спецпитание.КоличествоНочное КАК КоличествоНочное,
		|		Спецпитание.ЦенаОбед КАК ЦенаОбед,
		|		Спецпитание.ЦенаУжин КАК ЦенаУжин,
		|		Спецпитание.ЦенаНочное КАК ЦенаНочное
		|	ИЗ
		|		РегистрСведений.Спецпитание КАК Спецпитание
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаСпецпитание КАК СчетаУчетаСпецпитание
		|			ПО Спецпитание.Подразделение = СчетаУчетаСпецпитание.Подразделение
		|	ГДЕ
		|		НЕ Спецпитание.Командировка
		|		И Спецпитание.Договорник
		|		И Спецпитание.Регистратор = &ВыбранныйДокумент) КАК Договорники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Командировачные.Номенклатура,
		|	Командировачные.ВидПоступления,
		|	Командировачные.Субконто1,
		|	Командировачные.Субконто2,
		|	Командировачные.Субконто3,
		|	Командировачные.Счет,
		|	Командировачные.ФизЛицо,
		|	Командировачные.Договорник,
		|	NULL,
		|	Командировачные.КоличествоЗавтрак,
		|	Командировачные.ЦенаЗавтрак,
		|	Командировачные.КоличествоОбед,
		|	Командировачные.ЦенаОбед,
		|	Командировачные.КоличествоУжин,
		|	Командировачные.ЦенаУжин,
		|	Командировачные.КоличествоНочное,
		|	Командировачные.ЦенаНочное
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(Спецпитание.Номенклатура) КАК Номенклатура,
		|		СУММА(Спецпитание.КоличествоЗавтрак) КАК КоличествоЗавтрак,
		|		МАКСИМУМ(Спецпитание.ЦенаЗавтрак) КАК ЦенаЗавтрак,
		|		МАКСИМУМ(Спецпитание.ВидПоступления) КАК ВидПоступления,
		|		МАКСИМУМ(НЕОПРЕДЕЛЕНО) КАК Субконто1,
		|		МАКСИМУМ(НЕОПРЕДЕЛЕНО) КАК Субконто2,
		|		МАКСИМУМ(НЕОПРЕДЕЛЕНО) КАК Субконто3,
		|		МАКСИМУМ(&Счет) КАК Счет,
		|		Спецпитание.ФизЛицо КАК ФизЛицо,
		|		ЛОЖЬ КАК Договорник,
		|		СУММА(Спецпитание.КоличествоОбед) КАК КоличествоОбед,
		|		СУММА(Спецпитание.КоличествоУжин) КАК КоличествоУжин,
		|		СУММА(Спецпитание.КоличествоНочное) КАК КоличествоНочное,
		|		МАКСИМУМ(Спецпитание.ЦенаОбед) КАК ЦенаОбед,
		|		МАКСИМУМ(Спецпитание.ЦенаУжин) КАК ЦенаУжин,
		|		МАКСИМУМ(Спецпитание.ЦенаНочное) КАК ЦенаНочное
		|	ИЗ
		|		РегистрСведений.Спецпитание КАК Спецпитание
		|	ГДЕ
		|		Спецпитание.Командировка
		|		И Спецпитание.Регистратор = &ВыбранныйДокумент
		|		И НЕ Спецпитание.Договорник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Спецпитание.ФизЛицо) КАК Командировачные";
		
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
		Запрос.УстановитьПараметр("ВыбранныйДокумент", Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоЗавтрак <> 0 Тогда  
				ДобавлениеСтрокиДляСпецпитанияСРазбивкойПоЦенам(Объект,Выборка, Выборка.КоличествоЗавтрак, Выборка.ЦенаЗавтрак);
			КонецЕсли;
			
			Если Выборка.КоличествоОбед <> 0 Тогда  
				ДобавлениеСтрокиДляСпецпитанияСРазбивкойПоЦенам(Объект,Выборка, Выборка.КоличествоОбед, Выборка.ЦенаОбед);
			КонецЕсли;
			
			Если Выборка.КоличествоУжин <> 0 Тогда  
				ДобавлениеСтрокиДляСпецпитанияСРазбивкойПоЦенам(Объект,Выборка, Выборка.КоличествоУжин, Выборка.ЦенаУжин);
			КонецЕсли;
			
			Если Выборка.КоличествоНочное <> 0 Тогда  
				ДобавлениеСтрокиДляСпецпитанияСРазбивкойПоЦенам(Объект,Выборка, Выборка.КоличествоНочное, Выборка.ЦенаНочное);
			КонецЕсли;
			
			//НоваяСтрока = Объект.Услуги.Добавить();
			//
			//НоваяСтрока.СчетЗатратБУ = Выборка.Счет;
			//
			//// заполним субконто на счетах
			//КолСубконтоНаСчете = НоваяСтрока.СчетЗатратБУ.ВидыСубконто.Количество();
			//
			//// цикл по субконто таб части
			//Для сч = 1 По КолСубконтоНаСчете Цикл
			//	Если (НЕ ЗначениеЗаполнено(Выборка["Субконто" + сч]))  И
			//		НоваяСтрока.СчетЗатратБУ.ВидыСубконто[сч -1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Выборка.ПодразделениеФизЛицо)) Тогда 
			//		НоваяСтрока["СубконтоЗатратБУ" + Сч] = Выборка.ПодразделениеФизЛицо;
			//	ИначеЕсли НоваяСтрока.СчетЗатратБУ.ВидыСубконто[Сч -1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Выборка["Субконто" + сч])) Тогда 
			//		НоваяСтрока["СубконтоЗатратБУ" + Сч] = Выборка["Субконто" + сч];
			//	КонецЕсли;
			//	
			//КонецЦикла;// по субконто таб части
			//
			//Если Выборка.Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц Тогда 
			//	НоваяСтрока.СубконтоЗатратБУ2 = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные;
			//КонецЕсли;	
			//
			//НоваяСтрока.Количество = Выборка.Количество;
			//НоваяСтрока.Цена = Выборка.Цена;
			//НоваяСтрока.НДСВидПоступления = Выборка.ВидПоступления;
			//НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			//НоваяСтрока.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий;
			//НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
			//НоваяСтрока.Сумма = Выборка.Цена*Выборка.Количество;
			//НоваяСтрока.СтавкаНДС =  Выборка.Номенклатура.СтавкаНДС;
			//НоваяСтрока.СуммаНДС = (НоваяСтрока.Сумма * НоваяСтрока.СтавкаНДС.Ставка) /100;

			//Если Выборка.Договорник Тогда 
			//	НоваяСтрока.Содержание = "" + Выборка.ФизЛицоДоговорника;
			//Иначе 	
			//	НоваяСтрока.Содержание = "" + Выборка.ПодразделениеФизЛицо;
			//КонецЕсли;
			//
			//
			//
			//// заполним счета налогового учета    
			//Отбор = Новый Структура;
			//Отбор.Вставить("СчетБу", Выборка.Счет);
			//НоваяСтрока.СчетЗатратНУ = РегистрыСведений.СоответствиеСчетовБУиНУ.ПолучитьПоследнее(Объект.Дата, Отбор).СчетНУ;
			//ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 3, НоваяСтрока.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
			//ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 2, НоваяСтрока.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
			//ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 1, НоваяСтрока.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
						
		КонецЦикла;
		
КонецПроцедуры


Процедура ДобавлениеСтрокиДляСпецпитанияСРазбивкойПоЦенам(Объект,Выборка, КоличествоНужное, ЦенаНужная)
	
			НоваяСтрока = Объект.Услуги.Добавить();
			
			НоваяСтрока.СчетЗатратБУ = Выборка.Счет;
			
			// заполним субконто на счетах
			КолСубконтоНаСчете = НоваяСтрока.СчетЗатратБУ.ВидыСубконто.Количество();
			
			// цикл по субконто таб части
			Для сч = 1 По КолСубконтоНаСчете Цикл
				Если (НЕ ЗначениеЗаполнено(Выборка["Субконто" + сч]))  И
					НоваяСтрока.СчетЗатратБУ.ВидыСубконто[сч -1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Выборка.ПодразделениеФизЛицо)) Тогда 
					НоваяСтрока["СубконтоЗатратБУ" + Сч] = Выборка.ПодразделениеФизЛицо;
				ИначеЕсли НоваяСтрока.СчетЗатратБУ.ВидыСубконто[Сч -1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Выборка["Субконто" + сч])) Тогда 
					НоваяСтрока["СубконтоЗатратБУ" + Сч] = Выборка["Субконто" + сч];
				КонецЕсли;
				
			КонецЦикла;// по субконто таб части
			
			Если Выборка.Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц Тогда 
				НоваяСтрока.СубконтоЗатратБУ2 = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные;
			КонецЕсли;	
			
			НоваяСтрока.Количество = КоличествоНужное;
			НоваяСтрока.Цена = ЦенаНужная;
			НоваяСтрока.НДСВидПоступления = Выборка.ВидПоступления;
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий;
			НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
			НоваяСтрока.Сумма = ЦенаНужная*КоличествоНужное;
			НоваяСтрока.СтавкаНДС =  Выборка.Номенклатура.СтавкаНДС;
			НоваяСтрока.СуммаНДС = (НоваяСтрока.Сумма * НоваяСтрока.СтавкаНДС.Ставка) /100;

			Если Выборка.Договорник Тогда 
				НоваяСтрока.Содержание = "" + Выборка.ФизЛицоДоговорника;
			Иначе 	
				НоваяСтрока.Содержание = "" + Выборка.ПодразделениеФизЛицо;
			КонецЕсли;
			
			
			
			// заполним счета налогового учета    
			Отбор = Новый Структура;
			Отбор.Вставить("СчетБу", Выборка.Счет);
			НоваяСтрока.СчетЗатратНУ = РегистрыСведений.СоответствиеСчетовБУиНУ.ПолучитьПоследнее(Объект.Дата, Отбор).СчетНУ;
			ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 3, НоваяСтрока.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
			ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 2, НоваяСтрока.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
			ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 1, НоваяСтрока.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
	
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоПоступлениеТоваровУслуг(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		ЗаполнитьЗначенияСвойств(Объект, Основание,
			"ВидОперации,
			|НомерВходящегоДокумента,
			|ДатаВходящегоДокумента,
			|ВидВходящегоДокумента,
			|НДСВключенВСтоимость,
			|Сделка,
			|СобытиеОС,
			|СуммаДокумента,
			|СчетУчетаРасчетовПоАвансам,
			|СчетУчетаРасчетовСКонтрагентом,
			|ОтложитьПринятиеНДСКЗачету");
		
		Объект.ДокументОснование = Основание;
		
		Для Каждого ТабличнаяЧасть Из Основание.Метаданные().ТабличныеЧасти Цикл
			Объект[ТабличнаяЧасть.Имя].Очистить();
			Для Каждого СтрокаТабличнойЧасти Из Основание[ТабличнаяЧасть.Имя] Цикл
				ЗаполнитьЗначенияСвойств(Объект[ТабличнаяЧасть.Имя].Добавить(), СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСчетуНаОплатуПоставщика(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт  
	
	Если Объект.ВидОперации = Неопределено ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПустаяСсылка() Тогда

		Объект.ВидОперации  = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
		
	КонецЕсли;
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт);
	ЗаполнятьОС 	= (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ВидОперации = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();

	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка,,ЗаполнятьТовары,ЗаполнятьУслуги,ЗаполнятьОС);
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
		УчестьСуммуНДС = Истина;
	Иначе
		УчестьСуммуНДС = Ложь;
	КонецЕсли;
		
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла;
		
	Объект.ДокументОснование = Основание; 
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда  
		
		Объект.СчетНаОплатуПоставщика = Основание;
			
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
КонецПроцедуры

Процедура ЗаполнитьПоСчету(Объект, ИмяТабЧасти, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;   
		
	ТабличнаяЧасть = Объект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		СкопироватьТовары(Объект, Счет);
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СкопироватьУслуги(Объект, Счет);
	ИначеЕсли ИмяТабЧасти = "ОС" Тогда
		СкопироватьОС(Объект, Счет);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);  	
	
КонецПроцедуры

Процедура СкопироватьТовары(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщикаТовары.Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС,
	|	СчетНаОплатуПоставщикаТовары.Коэффициент,
	|	СчетНаОплатуПоставщикаТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,
									|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ФлагиНалоговОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "УчитыватьНДС, СуммаВключаетНДС");

	ПересчитыватьНДС   = ФлагиНалоговОснования.УчитыватьНДС <> ДанныеОбъекта.УчитыватьНДС
						ИЛИ ФлагиНалоговОснования.СуммаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС;
						
	ПересчитыватьЦенуПоФлагамНалогов = ПересчитыватьНДС;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СтрокаТЧ.Коэффициент = ?(СтрокаТЧ.Коэффициент = 0, 1, СтрокаТЧ.Коэффициент);
				
		Если ПересчитыватьЦенуПоФлагамНалогов Тогда
			СтрокаТЧ.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена, 
																	Неопределено,
																	ФлагиНалоговОснования.СуммаВключаетНДС,
																	ДанныеОбъекта.УчитыватьНДС,
																	ДанныеОбъекта.СуммаВключаетНДС, 
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ПересчитыватьНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьУслуги(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаУслуги.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаУслуги.Содержание,
	|	СчетНаОплатуПоставщикаУслуги.Количество,
	|	СчетНаОплатуПоставщикаУслуги.Цена,
	|	СчетНаОплатуПоставщикаУслуги.Сумма,
	|	СчетНаОплатуПоставщикаУслуги.СтавкаНДС,
	|	СчетНаОплатуПоставщикаУслуги.СуммаНДС,
	|	СчетНаОплатуПоставщикаУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
	|ГДЕ
	|	СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,
									|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ФлагиНалоговОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "УчитыватьНДС, СуммаВключаетНДС");

	ПересчитыватьНДС = ФлагиНалоговОснования.УчитыватьНДС <> ДанныеОбъекта.УчитыватьНДС
						ИЛИ ФлагиНалоговОснования.СуммаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС;
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если ПересчитыватьНДС Тогда
			СтрокаТЧ.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена, 
																	Неопределено,
																	ФлагиНалоговОснования.СуммаВключаетНДС,
																	ДанныеОбъекта.УчитыватьНДС,
																	ДанныеОбъекта.СуммаВключаетНДС, 
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
																	
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьОС(Объект, Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаОС.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетНаОплатуПоставщикаОС.Сумма,
	|	СчетНаОплатуПоставщикаОС.СтавкаНДС,
	|	СчетНаОплатуПоставщикаОС.СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ОС КАК СчетНаОплатуПоставщикаОС
	|
	|ГДЕ
	|	СчетНаОплатуПоставщикаОС.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Объект.ОС.Загрузить(Запрос.Выполнить().Выгрузить());

	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, Склад, ВидОперации, УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,
									|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ФлагиНалоговОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "УчитыватьНДС, СуммаВключаетНДС");

	ПересчитыватьНДС   = ФлагиНалоговОснования.УчитыватьНДС <> ДанныеОбъекта.УчитыватьНДС
						ИЛИ ФлагиНалоговОснования.СуммаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС;
						
	ПересчитыватьЦенуПоФлагамНалогов = ПересчитыватьНДС;
	
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
						
		Если ПересчитыватьЦенуПоФлагамНалогов Тогда
			СтрокаТЧ.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена, 
																	Неопределено,
																	ФлагиНалоговОснования.СуммаВключаетНДС,
																	ДанныеОбъекта.УчитыватьНДС,
																	ДанныеОбъекта.СуммаВключаетНДС, 
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС),);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ПересчитыватьНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
//Евгений-

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	2 КАК ПорядокТабличныхЧастей,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура КАК Товар,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	1,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование,
	|	ОбрабатываемаяТаблица.Сумма,
	|	ОбрабатываемаяТаблица.СуммаНДС,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	3,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.ОсновноеСредство,
	|	ОбрабатываемаяТаблица.ОсновноеСредство.Наименование,
	|	ОбрабатываемаяТаблица.Сумма,
	|	ОбрабатываемаяТаблица.СуммаНДС,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокТабличныхЧастей,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

// Заполнение реквизита СчетНаОплатуПоставщика по документу-основанию при обновлении ИБ
Процедура ЗаполнитьРеквизитСчетНаОплатуПоставщикаПоступлениеТоваровУслуг(Параметры) Экспорт
	
	Запрос 			= Новый Запрос; 
	
	Запрос.Текст 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ 
	|	ПоступлениеТоваровУслуг.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПоставщика
	|	И НЕ ПоступлениеТоваровУслуг.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	И НЕ ПоступлениеТоваровУслуг.ДокументОснование ЕСТЬ NULL 
	|	И ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеТоваровУслуг");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();   
						
			ДокументОбъект.СчетНаОплатуПоставщика = ДокументОбъект.ДокументОснование;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры   

//Евгений+
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ3(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК КорреспондентскийСчет,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	ПоступлениеТоваровУслуг.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад КАК Склад,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка КАК Ссылка,
	|	ВТ_Доки.НомерДокумента КАК НомерДокумента,
	|	ВТ_Доки.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_Доки.Контрагент КАК Контрагент,
	|	ВТ_Доки.Организация КАК Организация,
	|	ВТ_Доки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_Доки.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_Доки.ВалютаПредставление КАК ВалютаПредставление,
	|	ВТ_Доки.УчитыватьНДС КАК УчитыватьНДС,
	|	ВТ_Доки.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_Доки.Склад КАК Склад,
	|	ВТ_Доки.КорреспондентскийСчет КАК КорреспондентскийСчет,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ,
	|	ВТ_Доки.НомерСопроводительногоДокумента КАК НомерСопроводительногоДокумента,
	|	ВТ_Доки.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
			  
	Шапка = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	Товары.НомерСтроки КАК НомерСтроки,
	                        |	Товары.Ссылка КАК Ссылка,
	                        |	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	                        |	Товары.Цена КАК Цена,
	                        |	Товары.Количество КАК КоличествоПоДокументу,
	                        |	Товары.Сумма КАК ВсегоСНДС,
	                        |	Товары.СуммаНДС КАК СуммаНДС,
	                        |	Товары.Номенклатура.Код КАК ТоварКод,
	                        |	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаКод
	                        |ПОМЕСТИТЬ ВТ
	                        |ИЗ
	                        |	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	                        |ГДЕ
	                        |	Товары.Ссылка В(&МассивОбъектов)
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	ВТ.ТоварКод КАК ТоварКод,
	                        |	ВТ.ТоварНаименование КАК ТоварНаименование,
	                        |	ВТ.ЕдиницаНаименование КАК ЕдиницаНаименование,
	                        |	ВТ.ЕдиницаКод КАК ЕдиницаКод,
	                        |	СУММА(ВТ.КоличествоПоДокументу) КАК КоличествоПоДокументу,
	                        |	ВТ.Цена КАК Цена,
	                        |	СУММА(ВТ.ВсегоСНДС) КАК ВсегоСНДС,
	                        |	СУММА(ВТ.СуммаНДС) КАК СуммаНДС,
	                        |	ВТ.Ссылка КАК Ссылка
	                        |ИЗ
	                        |	ВТ КАК ВТ
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ВТ.Цена,
	                        |	ВТ.ЕдиницаНаименование,
	                        |	ВТ.ТоварКод,
	                        |	ВТ.ЕдиницаКод,
	                        |	ВТ.ТоварНаименование,
	                        |	ВТ.Ссылка";

	//ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровУслуг.З3");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеТоваровУслуг_З3";
	
	ЗаголовокШапка     = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы      = Макет.ПолучитьОбласть("Строка");
	Итого 			   = Макет.ПолучитьОбласть("Итого");
	Подвал             = Макет.ПолучитьОбласть("Подвал");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		//Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
		//	ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		//Иначе
		//	ВыборкаСтрокТовары = Неопределено;
		//КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		// Выводим шапку накладной
		ЗаголовокШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Представление,");
		ЗаголовокШапка.Параметры.ПредставлениеСклада      = Шапка.Склад.Наименование;
		ЗаголовокШапка.Параметры.ОрганизацияРНН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ЗаголовокШапка.Параметры.ОрганизацияПоОКПО       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОкпо,", Ложь, Шапка.ДатаДокумента, "ru");
		ТабДокумент.Вывести(ЗаголовокШапка);

		ЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ЗаголовокДокумента.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента), "ПолноеНаименование,");
		ЗаголовокДокумента.Параметры.НомерДокумента          = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ТабДокумент.Вывести(ЗаголовокДокумента);
	
		ЗаголовокТаблицы.Параметры.ВалютаПредставление = Шапка.ВалютаПредставление;
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		Количество    = 0;
		Сумма    	  = 0;
		
		Если ВыборкаСтрок <> Неопределено Тогда
			
			Пока ВыборкаСтрок.Следующий() Цикл
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрок);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
				ТабДокумент.Вывести(СтрокаТаблицы);
				
				Сумма      = Сумма      + ВыборкаСтрок.ВсегоСНДС;
				Количество = Количество + ВыборкаСтрок.КоличествоПоДокументу;
				
			КонецЦикла;
			
		КонецЕсли;

		// Вывести Итого
		Итого.Параметры.ИтогВсегоСНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		
		Итого.Параметры.ИтогКоличествоПоДокументу = Количество;
		ТабДокумент.Вывести(Итого);
	
		// Вывести подвал
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			
			ДанныеМОЛ            = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
			Подвал.Параметры.МОЛ = ДанныеМОЛ.Представление;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
			Если ЗначениеЗаполнено(Шапка.ДокументОснование.ФизЛицо) Тогда
				ДанныеФизЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ДокументОснование.ФизЛицо, Шапка.ДатаДокумента);
				Подвал.Параметры.ОтветственныйПредставление = ДанныеФизЛица.Представление;	
			КонецЕсли; 
		КонецЕсли;
		
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
//   Объект - строка табличной части, либо ссылка на обект, в случае, если реквизиты налогового учета находятся в шапке
Процедура ЗаменитьСубконтоНУВСтроке(Объект, СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, ИмяРеквизитаСубконтоНУ = "Субконто") Экспорт

	Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СчетБУ.ВидыСубконто.Количество() < НомерСубконто Тогда
		Возврат;
	КонецЕсли;
	
	// найдем аналогичный ВидСубконто для счета НУ
	НомерСубконтоНУ = СчетНУ.ВидыСубконто.Найти(СчетБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто);
	
	Если НомерСубконтоНУ = Неопределено Тогда
		// по типу
		Для Счетчик = 1 по 3 Цикл			
			Если СчетНУ.ВидыСубконто.Количество() >= Счетчик Тогда
				Если СчетНУ.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СубконтоБУ)) Тогда						
					Объект[ИмяРеквизитаСубконтоНУ + Счетчик]= СубконтоБУ;						
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
	Иначе
		Объект[ИмяРеквизитаСубконтоНУ + НомерСубконтоНУ.НомерСтроки]= СубконтоБУ;						
	КонецЕсли;
	
КонецПроцедуры // ЗаменитьСубконтоНУВСтроке()

#Область ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ДанныеСопоставление	= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МассивНаименование	  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Наименование");
	МассивАртикул 		  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Артикул");
		
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Наименование");
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Артикул");
   	
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Наименование",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Артикул", 		     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивНаименование, 	  "Номенклатура_Наименование");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивАртикул, 		  "Номенклатура_Артикул");
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Номенклатура_Наименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Номенклатура_Артикул КАК ВнешнийАртикул, 
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Товары.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Товары.Ссылка КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Наименование = ЗагружаемыеДанные.ВнешнееНаименование)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнееНаименование <> """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор,
	|		Товары.Ссылка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Артикул = ЗагружаемыеДанные.ВнешнийАртикул)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийАртикул <> """") КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ЗагружаемыеДанные.ВнешнийАртикул КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Количество КАК Количество,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(Товары.Номенклатура.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения 
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНоменклатуры КАК Товары
	|		ПО (Товары.Идентификатор = ЗагружаемыеДанные.Идентификатор)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСопоставление, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(&ВнешнийАртикул <> """"
		|		И СпрНоменклатура.Артикул = &ВнешнийАртикул)
		|	ИЛИ (&ВнешнееНаименование <> """"
		|		И СпрНоменклатура.Наименование = &ВнешнееНаименование)
		|";
		
		Запрос.УстановитьПараметр("ВнешнийАртикул",		 ЗагружаемыеЗначенияСтрока.Номенклатура_Артикул);
		Запрос.УстановитьПараметр("ВнешнееНаименование", ЗагружаемыеЗначенияСтрока.Номенклатура_Наименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СтатусыСчетовПоставщика

Функция ПоступленияПоСчету(СчетНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СчетНаОплату", СчетНаОплату);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&СчетНаОплату) КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПоступлениеТоваровУслуг).Проведен";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ТоварыУслугиКПоступлениюПоСчету(СчетНаОплату, ПоступленияПоСчету, Регистратор=Неопределено) Экспорт
	
	ТоварыУслуги = Новый ТаблицаЗначений;
	ТоварыУслуги.Колонки.Добавить("ЭтоУслуга",     Новый ОписаниеТипов("Булево"));
	ТоварыУслуги.Колонки.Добавить("Номенклатура",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыУслуги.Колонки.Добавить("Содержание",    ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТоварыУслуги.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТоварыУслуги.Колонки.Добавить("Коэффициент",   ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ТоварыУслуги.Колонки.Добавить("Количество",    ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ТоварыУслуги.Колонки.Добавить("Цена",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыУслуги.Колонки.Добавить("Сумма",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыУслуги.Колонки.Добавить("СтавкаНДС",     Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТоварыУслуги.Колонки.Добавить("СуммаНДС",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыУслуги.Колонки.Добавить("НомерГТД",      Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	ТоварыУслуги.Колонки.Добавить("СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату",       СчетНаОплату);
	Запрос.УстановитьПараметр("ПоступленияПоСчету", ПоступленияПоСчету);
	
	НомераТаблиц = Новый Массив;
	
	Запрос.Текст = ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
		+ ТекстЗапросаПоступившаяНоменклатура(НомераТаблиц)
		+ ТекстЗапросаТоварыУслугиКПоступлениюПоСчету(НомераТаблиц);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для НомерТаблицы = 0 По НомераТаблиц.Количество() - 1 Цикл
		Результат.Вставить(НомераТаблиц[НомерТаблицы], РезультатЗапроса[НомерТаблицы].Выгрузить());
	КонецЦикла;
	
	ПоступившаяНоменклатура = Результат.ПоступившаяНоменклатура;
		
	РеквизитыСчета = Новый Структура("СуммаВключаетНДС,ЭтоКомиссия", Истина, Ложь);
	Если Результат.РеквизитыСчета.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчета, Результат.РеквизитыСчета[0]);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(Результат.ТоварыУслуги, ТоварыУслуги);
		
	СписокПолейОтбора = Новый Массив;
	СписокПолейОтбора.Добавить("ЭтоУслуга, Номенклатура, Содержание, Цена");
	СписокПолейОтбора.Добавить("ЭтоУслуга, Номенклатура, Содержание");
		
	Для каждого ПоляОтбора Из СписокПолейОтбора Цикл
		
		ПолученныеПолностью = Новый Массив;
		
		ПоступившаяНоменклатура.Свернуть(ПоляОтбора, "Количество");
		ПоступившаяНоменклатура.Индексы.Добавить(ПоляОтбора);
		
		Отбор = Новый Структура(ПоляОтбора);
		
		Для каждого СтрокаСчета Из ТоварыУслуги Цикл
			
			// Если количество не указано, считаем, что услуга получается один раз.
			КоличествоВСчете = ?(СтрокаСчета.ЭтоУслуга И СтрокаСчета.Количество = 0, 1, СтрокаСчета.Количество);
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСчета);

			НайденныеСтроки = ПоступившаяНоменклатура.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				
				ПолученоРанее = НайденныеСтроки[0].Количество;
				
				Если ПолученоРанее < КоличествоВСчете Тогда
					// Товар получен частично.
					Количество = Макс(КоличествоВСчете - ПолученоРанее, 0);
					СтрокаСчета.Количество = Количество;
					
					ДанныеСтрокиКПоступлению = Новый Структура(
					"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, 
					|СтавкаНДС, СуммаНДС, ЭтоУслуга, КодТНВЭД, КоличествоКПоступлению");
					
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиКПоступлению, СтрокаСчета); 
					
					ДанныеОбъекта = Новый Структура(
					"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
					|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС, 
					|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
					
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Регистратор); 
										
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиКПоступлению);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиКПоступлению, ДанныеОбъекта);  
					
					ЗаполнитьЗначенияСвойств(СтрокаСчета, ДанныеСтрокиКПоступлению);
				Иначе
					ПолученныеПолностью.Добавить(СтрокаСчета);
				КонецЕсли;
				
				НайденныеСтроки[0].Количество = Макс(ПолученоРанее - КоличествоВСчете, 0);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВГраница = ПолученныеПолностью.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл
			ТоварыУслуги.Удалить(ПолученныеПолностью[ВГраница - Индекс]);
		КонецЦикла;
	
	КонецЦикла; 
		
	Возврат ТоварыУслуги;
	
КонецФункции

Функция ТекстЗапросаПоступлениеПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.СчетНаОплатуПоставщика) Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТоваровУслугПоСчету",   Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеОсновныхСредствПоСчету", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары 
		ИЛИ Реквизиты.ЕстьУслуги Тогда
		
		НомераТаблиц.Вставить("ПоступлениеТоваровУслугПоСчету", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.ЭтоУслуга,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Содержание,
			|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
			|ИЗ
			|	(";
		Если Реквизиты.ЕстьТовары Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|		ЛОЖЬ КАК ЭтоУслуга,
			|		ТаблицаТовары.Номенклатура КАК Номенклатура,
			|		"""" КАК Содержание,
			|		ТаблицаТовары.Количество КАК Количество
			|	ИЗ
			|		ТаблицаТовары КАК ТаблицаТовары";
		КонецЕсли;
		Если Реквизиты.ЕстьУслуги Тогда
			Если Реквизиты.ЕстьТовары Тогда
				ТекстЗапроса = ТекстЗапроса +" ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЭтоУслуга,
			|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
			|	ТаблицаУслуги.Содержание КАК Содержание,
			|	ВЫБОР
			|		КОГДА ТаблицаУслуги.Количество = 0
			|			ТОГДА 1
			|		ИНАЧЕ ТаблицаУслуги.Количество
			|	КОНЕЦ КАК Количество
			|ИЗ
			|	ТаблицаУслуги КАК ТаблицаУслуги";
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + ") КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ЭтоУслуга,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Содержание" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеТоваровУслугПоСчету", Неопределено);
	КонецЕсли; 
	
	Если Реквизиты.ЕстьОС Тогда
		НомераТаблиц.Вставить("ПоступлениеОсновныхСредствПоСчету", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
			|	СУММА(ТаблицаОС.Количество) КАК Количество
			|ИЗ
			|	ТаблицаОС КАК ТаблицаОС
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаОС.ОсновноеСредство" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета(); 
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеОсновныхСредствПоСчету", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеквизитыСчета(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_ПоступленияПоСчету");
	ИменаТаблиц.Добавить("РеквизитыСчета");
	ИменаТаблиц.Добавить("ТоварыУслуги");
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваров,
	|	ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_ПоступленияПоСчету
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&ПоступленияПоСчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСчета.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК РеквизитыСчета
	|ГДЕ
	|	РеквизитыСчета.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	"""" КАК Содержание,
	|	1 КАК Коэффициент,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &СчетНаОплату  
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоУслуга,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
	|	Услуги.Содержание КАК Содержание,
	|	1 КАК Коэффициент,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаПоступившаяНоменклатура(ИменаТаблиц) Экспорт
	ИменаТаблиц.Добавить("ВТ_ПоступившаяНоменклатура");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетНаОплату КАК СчетНаОплату,
	|	ВложенныйЗапрос.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|	ВложенныйЗапрос.ЭтоУслуга КАК ЭтоУслуга,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ПоступившаяНоменклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПоступленияПоСчету.СчетНаОплату КАК СчетНаОплату,
	|		ВТ_ПоступленияПоСчету.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|		ЛОЖЬ КАК ЭтоУслуга,
	|		ПолученныеТовары.Номенклатура КАК Номенклатура,
	|		"""" КАК Содержание,
	|		ПолученныеТовары.Количество КАК Количество,
	|		ПолученныеТовары.Цена КАК Цена,
	|		ПолученныеТовары.Сумма КАК Сумма,
	|		ПолученныеТовары.СтавкаНДС КАК СтавкаНДС,
	|		ПолученныеТовары.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		ВТ_ПоступленияПоСчету КАК ВТ_ПоступленияПоСчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПолученныеТовары
	|			ПО ВТ_ПоступленияПоСчету.ПоступлениеТоваров = ПолученныеТовары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПоступленияПоСчету.СчетНаОплату,
	|		ВТ_ПоступленияПоСчету.ПоступлениеТоваров,
	|		ИСТИНА,
	|		ПолученныеУслуги.Номенклатура,
	|		ПолученныеУслуги.Содержание,
	|		ВЫБОР
	|			КОГДА ПолученныеУслуги.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПолученныеУслуги.Количество
	|		КОНЕЦ,
	|		ПолученныеУслуги.Цена,
	|		ПолученныеУслуги.Сумма,
	|		ПолученныеУслуги.СтавкаНДС,
	|		ПолученныеУслуги.СуммаНДС
	|	ИЗ
	|		ВТ_ПоступленияПоСчету КАК ВТ_ПоступленияПоСчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПолученныеУслуги
	|			ПО ВТ_ПоступленияПоСчету.ПоступлениеТоваров = ПолученныеУслуги.Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетНаОплату,
	|	ВложенныйЗапрос.ПоступлениеТоваров,
	|	ВложенныйЗапрос.ЭтоУслуга,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.СтавкаНДС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаТоварыУслугиКПоступлениюПоСчету(ИменаТаблиц)
	ИменаТаблиц.Добавить("ПоступившаяНоменклатура");
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПоступившаяНоменклатура.СчетНаОплату КАК СчетНаОплату,
	|	ВТ_ПоступившаяНоменклатура.ЭтоУслуга КАК ЭтоУслуга,
	|	ВТ_ПоступившаяНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТ_ПоступившаяНоменклатура.Содержание КАК Содержание,
	|	ВТ_ПоступившаяНоменклатура.Количество КАК Количество,
	|	ВТ_ПоступившаяНоменклатура.Цена КАК Цена
	|ИЗ
	|	ВТ_ПоступившаяНоменклатура КАК ВТ_ПоступившаяНоменклатура";
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ОсновныеСредстваКПоступлениюПоСчету(СчетНаОплату, ПоступленияПоСчету) Экспорт
	
	ОсновныеСредства = Новый ТаблицаЗначений;
	ОсновныеСредства.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ОсновныеСредства.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ОсновныеСредства.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ПоступленияПоСчету", ПоступленияПоСчету);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОС.ОсновноеСредство КАК ОсновноеСредство,
	|	КОЛИЧЕСТВО(ОС.ОсновноеСредство) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка В(&ПоступленияПоСчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОС.ОсновноеСредство,
	|	1 КАК Количество,
	|	ОС.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка = &СчетНаОплату";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПолученноеОС = Результат[0].Выгрузить();
	
	ПоляОтбора = "ОсновноеСредство";
	ПолученноеОС.Индексы.Добавить(ПоляОтбора);
	Отбор = Новый Структура(ПоляОтбора);
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		НайденныеСтроки = ПолученноеОС.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		Иначе
			
			ПолученоРанее = НайденныеСтроки[0].Количество;
			НайденныеСтроки[0].Количество = Макс(ПолученоРанее - Выборка.Количество, 0);
			
			Если ПолученоРанее < Выборка.Количество Тогда
				НоваяСтрока = ОсновныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = Выборка.Количество - ПолученоРанее;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновныеСредства;
	
КонецФункции

#КонецОбласти


