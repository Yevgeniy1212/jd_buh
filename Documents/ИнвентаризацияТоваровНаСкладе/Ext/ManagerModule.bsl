#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьПоОстаткамНаСкладе(СтруктураПараметров, АдресХранилища) Экспорт
	
	// Подготовим таблицу, по которой отберем остатки
	ОтборОстатков = Новый ТаблицаЗначений();
	ОтборОстатков.Колонки.Добавить("СчетУчетаБУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтборОстатков.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", СтруктураПараметров.Склад);
	ТекстЗапросаИнвентаризация = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Типовой.Ссылка КАК СчетУчетаБУ,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки КАК ТиповойОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО ТиповойОстатки.Счет = Типовой.Ссылка
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
	|	Номенклатура.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	Контрагенты.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	&Склад";
	Запрос.Текст =ТекстЗапросаИнвентаризация;

	ОтборОстатков   = Запрос.Выполнить().Выгрузить();
	
	// Получим остатки
	ТаблицаОстатки = УчетТоваров.ПолучитьОстаткиТоваров(
		Новый Граница(СтруктураПараметров.Дата, ВидГраницы.Включая),
		СтруктураПараметров.Организация,
		СтруктураПараметров.СтруктурноеПодразделение,
		ОтборОстатков);
		
	ТаблицаОстатки.Индексы.Добавить("Номенклатура, СчетУчетаБУ");

	СчетаССуммовымУчетомПоСкладам = Новый Соответствие;
	
	ТаблицаОстатки.Свернуть("СчетУчетаБУ,Номенклатура", "Стоимость,Количество,КоличествоПоСкладу");
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатки Цикл
		
		Если СтрокаТаблицы.Количество = NULL Тогда
			Продолжить;
		КонецЕсли; 
		
		//Евгений+
		Если СтрокаТаблицы.КоличествоПоСкладу <= 0 Тогда
		//Если СтрокаТаблицы.Количество <= 0 Тогда 
		//Евгений-
		
			Продолжить;
		КонецЕсли; 
		
		Если СчетаССуммовымУчетомПоСкладам.Получить(СтрокаТаблицы.СчетУчетаБУ) = Неопределено Тогда
			
			СчетаССуммовымУчетомПоСкладам.Вставить(СтрокаТаблицы.СчетУчетаБУ, ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетУчетаБУ));
			
		КонецЕсли;
		
		ВедетсяСуммовойУчет = СчетаССуммовымУчетомПоСкладам.Получить(СтрокаТаблицы.СчетУчетаБУ);
		
		СтрокаТабличнойЧасти = СтруктураПараметров.Товары.Добавить();
		
		Количество = ?(НЕ ВедетсяСуммовойУчет И ЗначениеЗаполнено(СтруктураПараметров.Склад), СтрокаТаблицы.КоличествоПоСкладу, СтрокаТаблицы.Количество);

		СтрокаТабличнойЧасти.Номенклатура     = СтрокаТаблицы.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = СтрокаТаблицы.СчетУчетаБУ;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.КоличествоУчет   = Количество;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "БазоваяЕдиницаИзмерения");
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		
		Если ВедетсяСуммовойУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет    = СтрокаТаблицы.Стоимость;
			СтрокаТабличнойЧасти.Сумма        = СтрокаТабличнойЧасти.СуммаУчет;
			СтрокаТабличнойЧасти.Цена         = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	
	КонецЦикла; 
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("Товары", СтруктураПараметров.Товары);
	СтруктураДанныхЗаполнения.Вставить("ЗаполнитьДобавленныеКолонкиТаблиц", Истина);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьПоОстаткамОрганизации(СтруктураПараметров, АдресХранилища) Экспорт
	
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",        СтруктураПараметров.Склад);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(СтруктураПараметров.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если СтруктураПараметров.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураПараметров.СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	ТекстЗапросаИнвентаризация = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.Счет              КАК Счет,
	|	ТиповойОстатки.Субконто1         КАК Номенклатура,
	|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
	|	ТиповойОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
	|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|														Типовой.Ссылка
	|													ИЗ
	|														ПланСчетов.Типовой КАК Типовой
	|													ГДЕ
	|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
	|											&ВидСубконто,
	|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТиповойОстатки.Счет.Порядок";
	
	Запрос.Текст = ТекстЗапросаИнвентаризация;

	Выборка   = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = СтруктураПараметров.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.Счет;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоУчет   = СтрокаТабличнойЧасти.Количество;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;

		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("Товары", СтруктураПараметров.Товары);
	СтруктураДанныхЗаполнения.Вставить("ЗаполнитьДобавленныеКолонкиТаблиц", Истина);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПерезаполнитьУчетныеКоличестваИСуммы(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийИнвентаризация.ПоСкладу Тогда
		
		// Подготовим таблицу, по которой отберем остатки
		ОтборОстатков = Новый ТаблицаЗначений();
		ОтборОстатков.Колонки.Добавить("СчетУчетаБУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
		ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ОтборОстатков.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад", СтруктураПараметров.Склад);
		ТекстЗапросаИнвентаризация = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Типовой.Ссылка КАК СчетУчетаБУ,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки КАК ТиповойОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТиповойОстатки.Счет = Типовой.Ссылка
		|ГДЕ
		|	Типовой.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	Контрагенты.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	&Склад";
		Запрос.Текст =ТекстЗапросаИнвентаризация;
		
		ОтборОстатков   = Запрос.Выполнить().Выгрузить();
		
		// Получим остатки
		ТаблицаОстатков = УчетТоваров.ПолучитьОстаткиТоваров(
			Новый Граница(СтруктураПараметров.Дата, ВидГраницы.Включая),
			СтруктураПараметров.Организация,
			СтруктураПараметров.СтруктурноеПодразделение,
			ОтборОстатков);
		
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, СчетУчетаБУ");
		
		ТаблицаОстатков.Свернуть("СчетУчетаБУ,Номенклатура", "Стоимость,Количество,КоличествоПоСкладу");
		
		СчетаССуммовымУчетомПоСкладам = Новый Соответствие;
		
		Для Каждого СтрокаТабличнойЧасти ИЗ СтруктураПараметров.Товары Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПоиска.Вставить("СчетУчетаБУ",  СтрокаТабличнойЧасти.СчетУчетаБУ);
			
			Если СчетаССуммовымУчетомПоСкладам.Получить(СтрокаТабличнойЧасти.СчетУчетаБУ) = Неопределено Тогда
				
				СчетаССуммовымУчетомПоСкладам.Вставить(СтрокаТабличнойЧасти.СчетУчетаБУ, ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТабличнойЧасти.СчетУчетаБУ));
				
			КонецЕсли;
			
			ВедетсяСуммовойУчет = СчетаССуммовымУчетомПоСкладам.Получить(СтрокаТабличнойЧасти.СчетУчетаБУ);
			
			ТаблицаСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
			Если НЕ (ТаблицаСтрок.Количество()>0) Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
				Продолжить;
			КонецЕсли;
			
			Количество = ?(НЕ ВедетсяСуммовойУчет И ЗначениеЗаполнено(СтруктураПараметров.Склад), ТаблицаСтрок[0].КоличествоПоСкладу, ТаблицаСтрок[0].Количество);
			
			СтрокаТабличнойЧасти.КоличествоУчет = Количество;
			СтрокаТабличнойЧасти.СуммаУчет      = ТаблицаСтрок[0].Стоимость;
		КонецЦикла;  		
		
	Иначе
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",        СтруктураПараметров.Склад);
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(СтруктураПараметров.Дата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		
		Если СтруктураПараметров.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураПараметров.СтруктурноеПодразделение);
		Иначе 
			УсловиеСтруктурноеПодразделение = "";
		КонецЕсли;
		
		ТекстЗапросаИнвентаризация = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|														Типовой.Ссылка
		|													ИЗ
		|														ПланСчетов.Типовой КАК Типовой
		|													ГДЕ
		|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
		|											&ВидСубконто,
		|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТиповойОстатки.Счет.Порядок";

		Запрос.Текст = ТекстЗапросаИнвентаризация;
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		ТаблицаОстатков.Свернуть("Счет,Номенклатура,БазоваяЕдиницаИзмерения", "Сумма,Количество");
		
		Для Каждого СтрокаТабличнойЧасти ИЗ СтруктураПараметров.Товары Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПоиска.Вставить("Счет", СтрокаТабличнойЧасти.СчетУчетаБУ);
			
			ТаблицаСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
			Если НЕ (ТаблицаСтрок.Количество()>0) Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.КоличествоУчет = ТаблицаСтрок[0].Количество;
			СтрокаТабличнойЧасти.СуммаУчет      = ТаблицаСтрок[0].Сумма;
		КонецЦикла;  		
		
	КонецЕсли;
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("Товары", СтруктураПараметров.Товары);
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Заполняет счета учета номенклатуры в строке табличной части документа
//
//Параметры:
// ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//						 вид договора контрагента, признак комиссионной торговли и т.п.)
// СтрокаТабличнойЧасти  - строка табличной части документа
// ИмяТабличнойЧасти     - имя табличной части документа
// СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "", СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Инвентаризация товаров на складе
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризация товаров на складе'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// ИНВ-10 (Инвентаризационная опись запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе_ИНВ10";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-10 (Инвентаризационная опись запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// ИНВ-18 (Сличительная ведомость)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе_ИНВ18";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-18 (Сличительная ведомость)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе,ИнвентаризацияТоваровНаСкладе_ИНВ10,ИнвентаризацияТоваровНаСкладе_ИНВ18";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе,ИнвентаризацияТоваровНаСкладе_ИНВ10,ИнвентаризацияТоваровНаСкладе_ИНВ18";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе,ИнвентаризацияТоваровНаСкладе_ИНВ10,ИнвентаризацияТоваровНаСкладе_ИНВ18";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Инвентаризация товаров на складе
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияТоваровНаСкладе") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИнвентаризацияТоваровНаСкладе",
			НСтр("ru = 'Инвентаризация товаров на складе'"),
			ПечатьИнвентаризацияТоваровНаСкладе(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ИнвентаризацияТоваровНаСкладе"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Печать ИНВ-10 (Инвентаризационная опись запасов)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияТоваровНаСкладе_ИНВ10") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИнвентаризацияТоваровНаСкладе_ИНВ10",
			НСтр("ru = 'ИНВ-10 (Инвентаризационная опись запасов)'"),
			//Евгений+
			//ПечатьИНВ10(МассивОбъектов, ОбъектыПечати),
			ПечатьИНВ4(МассивОбъектов, ОбъектыПечати),
			//Евгений-
			,
			"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ10");
	КонецЕсли;
	
	// Печать ИНВ-18 (Сличительная ведомость)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияТоваровНаСкладе_ИНВ18") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИнвентаризацияТоваровНаСкладе_ИНВ18",
			НСтр("ru = 'ИНВ-18 (Сличительная ведомость)'"),
			ПечатьИНВ18(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ18");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьИнвентаризацияТоваровНаСкладе(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	ВалютаПечати = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ИнвентаризацияТоваровНаСкладе.Номер,
	              |	ИнвентаризацияТоваровНаСкладе.Дата КАК ДатаДокумента,
	              |	ИнвентаризацияТоваровНаСкладе.Организация,
	              |	ИнвентаризацияТоваровНаСкладе.Склад.Представление КАК ПредставлениеСклада,
	              |	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация1,
	              |	ИнвентаризацияТоваровНаСкладе.СтруктурноеПодразделение,
	              |	ИнвентаризацияТоваровНаСкладе.Склад,
	              |	ИнвентаризацияТоваровНаСкладе.Ссылка
	              |ИЗ
	              |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	              |ГДЕ
	              |	ИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)";
	Шапка = Запрос.Выполнить().Выбрать();

	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки 					КАК НомерСтроки,
					|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка 							КАК Ссылка,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет 					КАК КоличествоПоУчету,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,					
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма 							КАК Сумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет 						КАК СуммаПоУчету,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка В (&МассивОбъектов)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерСтроки
					|
					|ИТОГИ ПО
					|	Ссылка
					|";
					
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе", КодЯзыка);

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru='Инвентаризация товаров на складе'"),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		// Выводим данные об организации и складе
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.Организация  	   		 = СтруктурнаяЕдиницаОрганизация;
		ОбластьМакета.Параметры.ВалютаНаименование 		 = ВалютаПечати.Наименование;
		ОбластьМакета.Параметры.Валюта             		 = ВалютаПечати;
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку таблицы
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогСуммы        = 0;
		ИтогСуммыПоУчету = 0;

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);				
				ОбластьМакета.Параметры.Товар = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар),СокрЛП(ВыборкаСтрокТовары.Товар),ВыборкаСтрокТовары.Номенклатура);
		
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;

				ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
				ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
				ТабДокумент.Вывести(ОбластьМакета);

			КонецЦикла;
		КонецЕсли;
		
		// Вывести Итого
		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего        = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогСуммы);
		ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогСуммыПоУчету);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьИНВ10(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'", КодЯзыка));
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии"       , НСтр("ru = 'Члены комиссии'", КодЯзыка));
    
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИнвентаризацияТоваровНаСкладе.Номер КАК НомерДокумента,
	               |	ИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка,
	               |	ИнвентаризацияТоваровНаСкладе.Дата КАК ДатаДокумента,
	               |	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	               |	ИнвентаризацияТоваровНаСкладе.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ИнвентаризацияТоваровНаСкладе.Ответственный,
	               |	ИнвентаризацияТоваровНаСкладе.Склад КАК Склад,
	               |	ИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	               |	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ВЫБОР
	               |		КОГДА ИнвентаризацияТоваровНаСкладе.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |			ТОГДА ИнвентаризацияТоваровНаСкладе.Ответственный.ФизЛицо
	               |		ИНАЧЕ ИнвентаризацияТоваровНаСкладе.Ответственный
	               |	КОНЕЦ КАК ОтветственныйЗаДокумент
	               |ПОМЕСТИТЬ ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |ИЗ
	               |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	               |ГДЕ
	               |	ИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка,
	               |	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	               |ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	               |ИЗ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |					ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |						И ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаДокумента >= ОтветственныеЛица.Период
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОтветственныеЛица.СтруктурнаяЕдиница,
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка) КАК ПериодыОтвественныеЛица
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	               |					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПериодыОтвественныеЛица.Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	               |		ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.НомерДокумента,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаДокумента,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Склад.Представление КАК Склад,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ОтветственныйЗаДокумент,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка.ИнвентаризационнаяКомиссия.(
	               |		ФизЛицо КАК ФизЛицо,
	               |		Председатель КАК Председатель
	               |	) КАК ИнвентаризационнаяКомиссия,
	               |	ОтветственныеЛица.ОтветственноеЛицо
	               |ИЗ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	               |		ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка = ОтветственныеЛица.Ссылка
	               |ГДЕ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)";

	Шапка = Запрос.Выполнить().Выбрать();
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК ТоварНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК ФактСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК БухСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ КАК СубСчет,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка КАК Ссылка
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка В(&МассивОбъектов)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номер
	                |ИТОГИ
	                |	СУММА(ФактСумма),
	                |	СУММА(БухСумма)
	                |ПО
	                |	Ссылка
	                |АВТОУПОРЯДОЧИВАНИЕ";
				 
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ОриентацияСтраницы 	 = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.КлючПараметровПечати = "ИнвентаризацияТоваровНаСкладе_ИНВ10";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ10");
	
	Макет.КодЯзыка =  КодЯзыка;

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;

		// Выводим шапку накладной
		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ОбластьМакета.Параметры.ДатаДокумента			 = Шапка.ДатаДокумента;

		// выведем  данные приказа об инвентаризации
		ОбластьМакета.Параметры.ДокументОснованиеВид        = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеВид),Шапка.ДокументОснованиеВид, НСтр("ru = ' приказа(распоряжения) '", КодЯзыка));
		ДокОснованиеДата 									= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДокументОснованиеДата, "Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy"));   
		ОбластьМакета.Параметры.ДокументОснованиеДата       = ?(ЗначениеЗаполнено(ДокОснованиеДата), ДокОснованиеДата, НСтр("ru = '""____""_______________20____года'", КодЯзыка));
		ОбластьМакета.Параметры.ДокументОснованиеНомер		= ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеНомер), Шапка.ДокументОснованиеНомер, "________");
		ОбластьМакета.Параметры.ДатаНачалаИнвентаризации    = ?(ЗначениеЗаполнено(Шапка.ДатаНачалаИнвентаризации)   , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДатаНачалаИнвентаризации   , "Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy")), НСтр("ru = '""____""_______________20____года.'", КодЯзыка));
		ОбластьМакета.Параметры.ДатаОкончанияИнвентаризации = ?(ЗначениеЗаполнено(Шапка.ДатаОкончанияИнвентаризации), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДатаОкончанияИнвентаризации, "Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy")), НСтр("ru = '""____""_______________20____года.'", КодЯзыка));
		ОбластьМакета.Параметры.ДатаДок						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДатаДокумента,"Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy"));
		
		// заполним МОЛ склада
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныМОЛ 							 = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.МОЛ 		 = ДанныМОЛ.Представление;
			ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
		КонецЕсли;
		
		// определим все счета учета, и запишем в одну строку
		ТаблицаСчетовУчета.Свернуть("СубСчет");
		СписокСчетов = "";
		Для Каждого Счет Из ТаблицаСчетовУчета Цикл
			Если СписокСчетов = "" Тогда
				СписокСчетов = СписокСчетов + Счет.СубСчет;	
			Иначе
				СписокСчетов = СписокСчетов + ", " + Счет.СубСчет;	
			КонецЕсли;	
		КонецЦикла;	
		ОбластьМакета.Параметры.СписокСчетов = СписокСчетов;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		СтрокНаСтранице = 24;
		НомерСтраницы   = 1;
		Ном             = 0;

		ИтогФактКоличество = 0;
		ИтогФактСумма      = 0;
		ИтогБухКоличество  = 0;
		ИтогБухСумма       = 0;
		ИтогФактСуммаВсего = 0;      
		
		ИтогФактКоличествоПоТаблице = 0;
		ИтогФактСуммаПоТаблице      = 0;
		ИтогБухКоличествоПоТаблице  = 0;
		ИтогБухСуммаПоТаблице       = 0;

		КолвоСтрокПоСтранице		  = 0;
		КолвоПостранице      		  = 0;
		СуммаЛиста           		  = 0;
		ИтогоКолво          		  = 0;
		ИтогоФактСуммаНаВсехСтраницах = 0;

		// Выводим заголовок таблицы
		ОбластьМакетаНомерСтроки 						 = Макет.ПолучитьОбласть("НомерСтраницы");
		ОбластьМакетаПерваяСтрока						 = Макет.ПолучитьОбласть("ПерваяСтрокаОборотнойСтороны");
		ЗаголовокТаблицы								 = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.Валюта				 = Валюта;
		ОбластьМакетаНомерСтроки.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотная сторона формы Инв-10
		|Страница %1'", КодЯзыка), НомерСтраницы);
		ТабДокумент.Вывести(ОбластьМакетаНомерСтроки);
		ТабДокумент.Вывести(ОбластьМакетаПерваяСтрока);
		ТабДокумент.Вывести(ЗаголовокТаблицы);

			
		ОбластьМакета 			= Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы"); 
		ОбластьИтоговПоТаблице  = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПустаяСтрока 	= Макет.ПолучитьОбласть("ПустаяСтрока");
	
		МассивОбластей = Новый Массив;
	
		МассивОбластей.Добавить(ОбластьМакета);
		МассивОбластей.Добавить(ОбластьИтоговПоСтранице);
		МассивОбластей.Добавить(ОбластьПустаяСтрока);
	
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда 
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();

			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Ном = Ном + 1;
		
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
			
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивОбластей, Истина) Тогда
				
					//ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
					ОбластьМакетаНомерСтроки.Параметры.НомерСтраницы =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотная сторона формы Инв-10
					|Страница %1'", КодЯзыка), НомерСтраницы);
					ТабДокумент.Вывести(ОбластьМакетаНомерСтроки);
					ТабДокумент.Вывести(ЗаголовокТаблицы);
			
					ИтогФактКоличество = 0;
					ИтогФактСумма      = 0;
					ИтогБухКоличество  = 0;
					ИтогБухСумма       = 0;
			
					КолвоСтрокПоСтранице = 0;
					КолвоПостранице      = 0;
					СуммаЛиста           = 0;
			
					Ном = 1; 			
				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);				
				ОбластьМакета.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименование),СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),ВыборкаСтрокТовары.Номенклатура);

				ТабДокумент.Вывести(ОбластьМакета);

				ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
				ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
				ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
				ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
				ИтогоФактСуммаНаВсехСтраницах = ИтогоФактСуммаНаВсехСтраницах + ВыборкаСтрокТовары.ФактСумма;
		
				ИтогФактСуммаВсего = ИтогФактСуммаВсего + ВыборкаСтрокТовары.БухСумма; 
				ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
      	
				КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
				КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
				СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;  
						
				ИтогФактКоличествоПоТаблице = ИтогФактКоличествоПоТаблице + ВыборкаСтрокТовары.ФактКоличество;
				ИтогФактСуммаПоТаблице      = ИтогФактСуммаПоТаблице + ВыборкаСтрокТовары.ФактСумма;
				ИтогБухКоличествоПоТаблице  = ИтогБухКоличествоПоТаблице + ВыборкаСтрокТовары.БухКоличество;
				ИтогБухСуммаПоТаблице       = ИтогБухСуммаПоТаблице + ВыборкаСтрокТовары.БухСумма;
				
			КонецЦикла;
		КонецЕсли;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице 							  = Макет.ПолучитьОбласть("ПодвалСтраницы");
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
		//ТабДокумент.Вывести(ОбластьИтоговПоСтранице);  
		
		// Выводим итоги по таблице 
		ОбластьИтоговПоТаблице.Параметры.ИтогоВсегоФактКоличество = ИтогФактКоличествоПоТаблице;
		ОбластьИтоговПоТаблице.Параметры.ИтогоВсегоФактСумма      = ИтогФактСуммаПоТаблице;
		ОбластьИтоговПоТаблице.Параметры.ИтогоВсегоБухКоличество  = ИтогБухКоличествоПоТаблице;
		ОбластьИтоговПоТаблице.Параметры.ИтогоВсегоБухСумма       = ИтогБухСуммаПоТаблице;
		ТабДокумент.Вывести(ОбластьИтоговПоТаблице);

		// Выводим итоги документа
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		МассивОбластей.Очистить();
		МассивОбластей.Добавить(ОбластьИтоговПоСтранице);
		МассивОбластей.Добавить(ОбластьМакета);
	
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивОбластей, Истина) Тогда	
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ОбластьМакета.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотная сторона формы Инв-10
			|Страница %1'", КодЯзыка), (НомерСтраницы + 1));
		КонецЕсли;
		
		ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ИтогоКолво, КодЯзыка);
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = СтрЗаменить(ЧислоПрописью(?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаСтрокТовары.Количество(), 0), "L=ru",",,,,,,,,0"), "00", "");
		ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоФактСуммаНаВсехСтраницах, Валюта, КодЯзыка);
	
		ОбластьМакета.Параметры.Валюта = Валюта;
	
		ТабДокумент.Вывести(ОбластьМакета);
    	
		ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
		ТаблицаИнвентаризационнаяКомиссия = Шапка.ИнвентаризационнаяКомиссия.Выгрузить();
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.ДатаДокумента);
				
			ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьМакета.Параметры.ДолжностьКомиссии = ДанныеПредседателя.Должность;
			ОбластьМакета.Параметры.ФИОКомиссии       = ДанныеПредседателя.Представление;
		
		Иначе
		
			ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьМакета.Параметры.ДолжностьКомиссии = "";
			ОбластьМакета.Параметры.ФИОКомиссии       = "";
		
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
	
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
	
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
	
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета, Истина) Тогда
			
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
			КонецЕсли;
		
			ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   "");
			ОбластьМакета.Параметры.ДолжностьКомиссии = ЧленКомиссии.Должность;
			ОбластьМакета.Параметры.ФИОКомиссии       = ЧленКомиссии.Представление;
		
			ТабДокумент.Вывести(ОбластьМакета);
		
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
		КонецЦикла;
	
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета, Истина) Тогда
			
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
			КонецЕсли;
		
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
				ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
				ОбластьМакета.Параметры.ДолжностьКомиссии = "";
				ОбластьМакета.Параметры.ФИОКомиссии 	  = "";
			
				ТабДокумент.Вывести(ОбластьМакета);
			
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
			КонецЦикла;
	
		КонецЕсли;
	
		//выводим подвал
	    ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
		ОбластьМакета.Параметры.НомерКонца              = ?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаСтрокТовары.Количество(), 0);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьИНВ18(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'"));
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии"       , НСтр("ru = 'Члены комиссии'"));
    
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИнвентаризацияТоваровНаСкладе.Номер КАК НомерДокумента,
	               |	ИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка,
	               |	ИнвентаризацияТоваровНаСкладе.Дата КАК ДатаДокумента,
	               |	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	               |	ИнвентаризацияТоваровНаСкладе.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ИнвентаризацияТоваровНаСкладе.Ответственный,
	               |	ИнвентаризацияТоваровНаСкладе.Склад КАК Склад,
	               |	ИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	               |	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ВЫБОР
	               |		КОГДА ИнвентаризацияТоваровНаСкладе.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |			ТОГДА ИнвентаризацияТоваровНаСкладе.Ответственный.ФизЛицо
	               |		ИНАЧЕ ИнвентаризацияТоваровНаСкладе.Ответственный
	               |	КОНЕЦ КАК ОтветственныйЗаДокумент
	               |ПОМЕСТИТЬ ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |ИЗ
	               |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	               |ГДЕ
	               |	ИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка,
	               |	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	               |ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	               |ИЗ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |					ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |						И ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаДокумента >= ОтветственныеЛица.Период
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОтветственныеЛица.СтруктурнаяЕдиница,
	               |				ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка) КАК ПериодыОтвественныеЛица
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	               |					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПериодыОтвественныеЛица.Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	               |		ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.НомерДокумента,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаДокумента,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Склад.Представление КАК Склад,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.ОтветственныйЗаДокумент,
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка.ИнвентаризационнаяКомиссия.(
	               |		ФизЛицо КАК ФизЛицо,
	               |		Председатель КАК Председатель
	               |	) КАК ИнвентаризационнаяКомиссия,
	               |	ОтветственныеЛица.ОтветственноеЛицо
	               |ИЗ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе КАК ВТ_ДокументыИнвентаризацияТоваровНаСкладе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	               |		ПО ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка = ОтветственныеЛица.Ссылка
	               |ГДЕ
	               |	ВТ_ДокументыИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)";

	Шапка = Запрос.Выполнить().Выбрать();
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК ТоварНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК ФактСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК БухСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ КАК СубСчет,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка КАК Ссылка
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка В(&МассивОбъектов)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номер
	                |ИТОГИ
	                |	СУММА(ФактСумма),
	                |	СУММА(БухСумма)
	                |ПО
	                |	Ссылка
	                |АВТОУПОРЯДОЧИВАНИЕ";
				 
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ОриентацияСтраницы 	 = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.КлючПараметровПечати = "ИнвентаризацияТоваровНаСкладе_ИНВ18";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ18");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;

		// Выводим шапку накладной
		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ОбластьМакета.Параметры.ДатаДокумента			 = Шапка.ДатаДокумента;

		// выведем  данные приказа об инвентаризации
		ОбластьМакета.Параметры.ДокументОснованиеВид     = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеВид),Шапка.ДокументОснованиеВид, НСтр("ru = ' приказа(распоряжения) '", КодЯзыка));
		ДокОснованиеДата 								 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДокументОснованиеДата, "Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy"));
		ОбластьМакета.Параметры.ДокументОснованиеДата    = ?(ЗначениеЗаполнено(ДокОснованиеДата), ДокОснованиеДата, НСтр("ru = '""____""_______________20____года'", КодЯзыка));
		ОбластьМакета.Параметры.ДатаДок					 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(Шапка.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ=dd MMMM yyyy"));
	
		ФИОМОЛ 		 = "";
		ДолжностьМОЛ = "";

		// заполним МОЛ склада
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныМОЛ 							 = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.МОЛ 		 = ДанныМОЛ.Представление;
			ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		СтрокНаСтранице = 19;
		СтрокШапки      = 5;
		СтрокПодвала    = 5;
		НомерСтраницы   = 1;
		Ном             = 0;

		ИтогоРезультатИзлишекКолво   = 0;
		ИтогоРезультатИзлишекСумма   = 0;
		ИтогоРезультатНедостачаКолво = 0;
		ИтогоРезультатНедостачаСумма = 0;


		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотная сторона формы Инв-18
		|Страница %1'", КодЯзыка), НомерСтраницы);
		ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаСтрокТовары.Количество(), 0);

		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;

		// Выводим многострочную часть докмента
		ОбластьМакета 			= Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы");
	
		МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьМакета);
		МассивОбластей.Добавить(ОбластьИтоговПоСтранице);

		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда 
						
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивОбластей, Истина) Тогда	
			
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

					ЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотная сторона формы Инв-18
					|Страница %1'", КодЯзыка), НомерСтраницы);
					ТабДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);				
				ОбластьМакета.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименование),СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),ВыборкаСтрокТовары.Номенклатура);

				Разница     = 0;
				РазницаСумм = 0;

				Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
				РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
				Если Разница = 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Разница < 0 Тогда
					ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
					ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСумм;
					ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
					ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

					ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
					ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСумм);
					ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + 0;
					ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + 0;
				Иначе
					ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
					ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
					ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
					ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСумм;

					ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + 0;
					ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + 0;
					ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
					ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСумм;
				КонецЕсли;

				ТабДокумент.Вывести(ОбластьМакета);

				Ном = Ном + 1;

			КонецЦикла;
		КонецЕсли;
		
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы");
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		МассивОбластей.Очистить();
		МассивОбластей.Добавить(ОбластьМакета);
	
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивОбластей, Истина) Тогда	
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		// Выведем подпись бухгалтера
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		ОбластьМакета.Параметры.ФИОБухгалтера = Руководители.ГлавныйБухгалтер;
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ДанныМОЛ 							 = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.МОЛ 		 = ДанныМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
			
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

//Евгений+
Функция ПечатьИНВ4(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияТоваровНаСкладе.Номер КАК НомерДокумента,
	|	ИнвентаризацияТоваровНаСкладе.Дата КАК ДатаДокумента,
	|	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	|	ИнвентаризацияТоваровНаСкладе.Склад КАК Склад,
	|	ИнвентаризацияТоваровНаСкладе.Ответственный КАК Ответственный,
	|	ИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ЕСТЬNULL(ИнвентаризацияТоваровНаСкладе.МОЛ.Ссылка, ОтветственныеЛицаСклад.ФизическоеЛицо) КАК МОЛ,
	|	ИнвентаризацияТоваровНаСкладе.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ИнвентаризацияТоваровНаСкладе.СолидарныеМол.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ФизЛицо КАК ФизЛицо
	|	) КАК СолидарныеМол,
	|	ИнвентаризацияТоваровНаСкладе.СолидарноеМолДата КАК СолидарноеМолДата,
	|	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации1
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО ИнвентаризацияТоваровНаСкладе.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка В(&Ссылка)";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ТаблицаИнвентаризационнаяКомиссия  = Шапка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	|	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) ТоварНаименование,	                
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК ФактСумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК БухСумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ КАК СубСчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ КАК СчетРодитель,
	|	ИнвентаризацияТоваровНаСкладеТовары.Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка В (&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	РезультатТовары = Запрос.Выполнить();
	ВыборкаСтрокТовары = РезультатТовары.Выбрать();
	ТаблицаСчетовУчета = РезультатТовары.Выгрузить();
	ТаблицаСчетРодитель = РезультатТовары.Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ10";
	//2013.06.03 Контротек, Трунов К.
	ТабДокумент.ПолеСверху = 20;
	ТабДокумент.ПолеСлева = 10;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ПолеСнизу = 10;
	ТабДокумент.АвтоМасштаб = Истина;
	//2013.06.03 Контротек, Трунов К.
	Макет       = ПолучитьМакет("ИНВ10");
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка_1");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Представление,");
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	//ОбластьМакета.Параметры.ОрганизацияРНН           = СведенияОбОрганизации.РНН;
	ОбластьМакета.Параметры.ОрганизацияРНН           = Шапка.Организация.ИдентификационныйНомер;
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = Шапка.НомерДокумента;
	
	// Контротек 17.09.2015
	тхтВидЗапасов = "";
	ТаблицаСчетРодитель.Свернуть("СчетРодитель",);
	Для каждого Стр Из ТаблицаСчетРодитель Цикл
		тхтВидЗапасов = тхтВидЗапасов+", "+СокрЛП(Стр.СчетРодитель.Наименование);
	КонецЦикла;
	ОбластьМакета.Параметры.ВидЗапасов = Сред(тхтВидЗапасов, 3);
	// Контротек 17.09.2015
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка_Мол");
	// заполним МОЛ склада
	ТекМол = "";
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ВидМол = "Материально-ответственное (ые) лицо (а):";
		ОбластьМакета.Параметры.МОЛ = ДанныМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
		ТекМол = ДанныМОЛ.Представление;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета.Параметры.ВидМол = "На основании Договора о солидарной материальной ответственности от "+Формат(Шапка.СолидарноеМолДата, "ДФ='д ММММ гггг'");
	СолидарныеМол = Шапка.СолидарныеМол.Выгрузить();
	Для каждого Стр Из СолидарныеМол Цикл
		ДанныМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Стр.ФизЛицо, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.МОЛ = ДанныМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.ВидМол = "";
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка_2");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	// выведем  данные приказа об инвентаризации
	//ОбластьМакета.Параметры.ДокументОснованиеВид        = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеВид),Шапка.ДокументОснованиеВид," приказа(распоряжения) ");
	ДокОснованиеДата 									= Формат(Шапка.ДокументОснованиеДата,"ДЛФ=DD");
	ОбластьМакета.Параметры.ДокументОснованиеДата       = ?(ЗначениеЗаполнено(ДокОснованиеДата), ДокОснованиеДата, """____""_______________20____года");
	ОбластьМакета.Параметры.ДокументОснованиеНомер		= ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеНомер), Шапка.ДокументОснованиеНомер, "________");
	ОбластьМакета.Параметры.ДатаНачалаИнвентаризации    = Формат(Шапка.ДатаНачалаИнвентаризации,"ДЛФ=DD");
	ОбластьМакета.Параметры.ДатаОкончанияИнвентаризации = Формат(Шапка.ДатаОкончанияИнвентаризации,"ДЛФ=DD");
	ОбластьМакета.Параметры.ДатаДок=Формат(Шапка.ДатаДокумента,"ДЛФ=DD");
	// определим все счета учета, и запишем в одну строку
	ТаблицаСчетовУчета.Свернуть("СубСчет");
	СписокСчетов = "";
	Для Каждого Счет Из ТаблицаСчетовУчета Цикл
		Если СписокСчетов = "" Тогда
			СписокСчетов = СписокСчетов + Счет.СубСчет;	
		Иначе
			СписокСчетов = СписокСчетов + ", " + Счет.СубСчет;	
		КонецЕсли;	
	КонецЦикла;	
	ОбластьМакета.Параметры.СписокСчетов = СписокСчетов;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	СтрокНаСтранице = 24;
	СтрокШапки      = 3;
	СтрокПодвала    = 2;
	НомерСтраницы   = 2;
	Ном             = 0;
	
	ИтогФактКоличество = 0;
	ИтогФактСумма      = 0;
	ИтогБухКоличество  = 0;
	ИтогБухСумма       = 0;
	ИтогФактСуммаВсего = 0;
	ИтогБухКоличествоВсего = 0;
	
	КолвоСтрокПоСтранице = 0;
	КолвоПостранице      = 0;
	СуммаЛиста           = 0;
	ИтогоКолво           = 0;
	ИтогоФактСуммаНаВсехСтраницах =0;
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	//ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ЗаголовокТаблицы.Параметры.Валюта = мВалютаРегламентированногоУчета;
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименование) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Строка"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалСтраницы"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалСтраницы"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалСтраницыВсего"));
		
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			//Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
			// или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
			
			ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
			ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
			
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			//ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
			ИтогФактКоличество = 0;
			ИтогФактСумма      = 0;
			ИтогБухКоличество  = 0;
			ИтогБухСумма       = 0;
			
			КолвоСтрокПоСтранице = 0;
			КолвоПостранице      = 0;
			СуммаЛиста           = 0;
			
			Ном = 1;
			СтрокШапки = СтрокШапки + СтрокНаСтранице;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
		ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
		ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
		ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
		ИтогоФактСуммаНаВсехСтраницах = ИтогоФактСуммаНаВсехСтраницах + ВыборкаСтрокТовары.ФактСумма;
		
		ИтогФактСуммаВсего = ИтогФактСуммаВсего + ВыборкаСтрокТовары.БухСумма; 
		ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
		ИтогБухКоличествоВсего = ИтогБухКоличествоВсего + ВыборкаСтрокТовары.БухКоличество;
		
		КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
		КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
		СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	Если НомерСтраницы>2 Тогда
		ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницыВсего");
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогоКолво;
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогоФактСуммаНаВсехСтраницах;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличествоВсего;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогФактСуммаВсего;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	КонецЕсли;
	// Выводим итоги документа
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	//ОбластьМакета.Параметры.НомерСтраницы = "Страница " + (НомерСтраницы + 1); 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ИтогоКолво);
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоФактСуммаНаВсехСтраницах, мВалютаРегламентированногоУчета);
	
	ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.ДатаДокумента);
		
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.ДолжностьКомиссии = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.ФИОКомиссии       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.ДолжностьКомиссии = "";
		ОбластьМакета.Параметры.ФИОКомиссии       = "";
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ ТабДокумент.ПроверитьВывод(ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
		ЗаголовокРазделаКомиссии.ЧленыКомиссии,
		"");
		ОбластьМакета.Параметры.ДолжностьКомиссии = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.ФИОКомиссии       = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ ТабДокумент.ПроверитьВывод(ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
			ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			"");
			ОбластьМакета.Параметры.ДолжностьКомиссии          = "";
			ОбластьМакета.Параметры.ФИОКомиссии = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
	КонецЕсли;
	
	//выводим подвал
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
	ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
	ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
	ОбластьМакета.Параметры.ДатаОкончанияИнвентаризации = Формат(Шапка.ДатаОкончанияИнвентаризации, "ДФ='д ММММ гггг'");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалМол");
	ОбластьМакета.Параметры.ФИО_МОЛ = ТекМол;
	ТабДокумент.Вывести(ОбластьМакета);
	// Выводим солидарных МОЛ
	Если СолидарныеМол.Количество()>0 тогда
		СписокМОЛ = СолидарныеМол.ВыгрузитьКолонку("ФизЛицо");
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(Шапка.Организация, СписокМОЛ, Шапка.ДатаДокумента);
		Для каждого СтрокаМОЛ из ДанныеМОЛ цикл
			ОбластьМакета.Параметры.ФИО_МОЛ = СтрокаМОЛ.Представление;
			ТабДокумент.Вывести(ОбластьМакета);
		Конеццикла;
	Конецесли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ4()

//Евгений-


#КонецЕсли