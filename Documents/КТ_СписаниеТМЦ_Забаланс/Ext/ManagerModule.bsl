#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСБУ", "ПрочиеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "КорректировкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПлательщикНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСНУ", "ПрочиеРасходыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "КорректировкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПлательщикНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ3");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления", "ВидПоступленияНДС_СписаниеТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетЗатратБУ", "ПрочиеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3", "СубконтоЗатрат3");

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетЗатратНУ", "ПрочиеРасходыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ3");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "КорректировкаНДС", "КорректироватьНДС");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("КорректировкаНДС") Тогда
		
		ДанныеЗаполнения.КорректировкаНДС = ДанныеЗаполнения.КорректироватьНДС;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;                                                                    		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
		
		Если СтрокаТабличнойЧасти.СчетЗатратБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
		
		Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;

		СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Склад");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыГруппаЗаполнить, ТоварыПодборТовары, ТоварыОчиститьТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru='Списание ТМЗ'"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= Ложь;
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= Ложь;
	
	НеобходимостьОтраженияВНУ 						= Ложь;
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 Ложь);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", Ложь);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 Ложь);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТоварыНДС",	НСтр("ru = 'ТоварыНДС'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	
	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =	  "ВЫБРАТЬ
	              	  |	Реквизиты.Ссылка КАК Регистратор,
	              	  |	Реквизиты.Ссылка КАК Ссылка,
	              	  |	Реквизиты.Дата КАК Период,
	              	  |	""Списание"" КАК ТипСписания,
	              	  |	Реквизиты.Ссылка КАК ДокументРеализации,
	              	  |	Реквизиты.Организация КАК Организация,
	              	  |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	              	  |	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	              	  |	ЛОЖЬ КАК УчитыватьКПН,
	              	  |	ЛОЖЬ КАК ВидУчетаНУ,
	              	  |	Реквизиты.Контрагент КАК Контрагент,
	              	  |	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	              	  |	&Содержание КАК Содержание,
	              	  |	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	              	  |	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	  |	НЕОПРЕДЕЛЕНО КАК Налогоплательщик,
	              	  |	Реквизиты.Склад КАК Склад
	              	  |ПОМЕСТИТЬ Реквизиты
	              	  |ИЗ
	              	  |	Документ.КТ_СписаниеТМЦ_Забаланс КАК Реквизиты
	              	  |ГДЕ
	              	  |	Реквизиты.Ссылка = &Ссылка
	              	  |;
	              	  |
	              	  |////////////////////////////////////////////////////////////////////////////////
	              	  |ВЫБРАТЬ
	              	  |	Реквизиты.Регистратор КАК Регистратор,
	              	  |	Реквизиты.Период КАК Период,
	              	  |	Реквизиты.ТипСписания КАК ТипСписания,
	              	  |	Реквизиты.ДокументРеализации КАК ДокументРеализации,
	              	  |	Реквизиты.Организация КАК Организация,
	              	  |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	              	  |	Реквизиты.КорСтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	              	  |	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	              	  |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	              	  |	Реквизиты.Контрагент КАК Контрагент,
	              	  |	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	              	  |	Реквизиты.Содержание КАК Содержание,
	              	  |	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	              	  |	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	  |	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	              	  |	Реквизиты.Склад КАК Склад
	              	  |ИЗ
	              	  |	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.КТ_СписаниеТМЦ_Забаланс.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());		
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки,
	|	ТаблицаНомераГТД.Количество Количество,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаНомераГТД
	|ИЗ
	|	Документ.СписаниеТоваров.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса ;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|   ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования
	|ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА ПО ОСНОВАНИЮ
   
// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.НДСВидОборота,
	|	ПоступлениеТоваровУслугТовары.НДСВидПоступления,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка";

	ВыборкаОсновная = Запрос.Выполнить().Выбрать();
	  	          
	Склад = ДокументОснование.Склад;
	
	СтруктураПоиска = Новый Структура;
	
	Пока ВыборкаОсновная.Следующий() Цикл
		                                             
		СтруктураПоиска.Вставить("Номенклатура",     ВыборкаОсновная.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыборкаОсновная.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        ВыборкаОсновная.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    ВыборкаОсновная.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",ВыборкаОсновная.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ВыборкаОсновная, ДанныеОбъекта.Товары, ДанныеОбъекта.НомераГТД);

	КонецЦикла;
	
	//ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Списание товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаСписание";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на вн. перемещение'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Списание товаров
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаСписание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяНаСписание",
			НСтр("ru = 'Накладная на вн. перемещение'"),
			ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.КТ_СписаниеТМЦ_Забаланс.ПФ_MXL_Накладная");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросКТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Ссылка КАК Ссылка,
	|	СписаниеТоваров.Номер КАК Номер,
	|	СписаниеТоваров.Дата КАК Дата,
	|	СписаниеТоваров.Организация КАК Организация,
	|	СписаниеТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад КАК Склад,
	|	СписаниеТоваров.Получил КАК Получил
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.КТ_СписаниеТМЦ_Забаланс КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ОтветственныеЛицаПоДокументам.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Получил КАК ФЛ_Получил,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ВТ_ДокументыСписаниеТоваров.Получил.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеПолучил
	|ПОМЕСТИТЬ ВТ_Получил
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ВТ_ДокументыСписаниеТоваров.Получил = ФИОФизЛиц.ФизЛицо
	|			И ВТ_ДокументыСписаниеТоваров.Ссылка.Дата >= ФИОФизЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер КАК НомерДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация КАК Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК ПредставлениеСклада,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК Поле1,
	|		Председатель КАК Поле2
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК Ответственный,
	|	ОтветственныеЛица.ПредставлениеОтветственный КАК ПредставлениеОтветственный,
	|	ВТ_ДокументыСписаниеТоваров.Получил КАК Получил,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	ВТ_Получил.ФЛ_Получил КАК ФЛ_Получил,
	|	ВТ_Получил.ПредставлениеПолучил КАК ПредставлениеПолучил
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Получил КАК ВТ_Получил
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ВТ_Получил.Ссылка,
	|	Константы КАК Константы
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |	СписаниеТоваров.Ссылка,
						   |	СписаниеТоваров.Номенклатура,
						   |	СписаниеТоваров.НомерСтроки КАК НомерСтроки,
						   |	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
						   |	СписаниеТоваров.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
						   |	СписаниеТоваров.Количество КАК Количество
						   |ИЗ
						   |	(ВЫБРАТЬ
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
						   |		СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
						   |		МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
						   |		СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
						   |		СписаниеТоваровТовары.Ссылка КАК Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатураКод,
						   |		СписаниеТоваровТовары.Номенклатура.Представление КАК НоменклатураПредставление,
						   |		СписаниеТоваровТовары.Коэффициент КАК Коэффициент,
						   |		СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ
						   |	ИЗ
						   |		Документ.КТ_СписаниеТМЦ_Забаланс.Товары КАК СписаниеТоваровТовары
						   |	
						   |	СГРУППИРОВАТЬ ПО
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура,
						   |		СписаниеТоваровТовары.ЕдиницаИзмерения,
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура.Код,
						   |		СписаниеТоваровТовары.Номенклатура.Представление,
						   |		СписаниеТоваровТовары.Коэффициент,
						   |		СписаниеТоваровТовары.СчетУчетаБУ) КАК СписаниеТоваров
						   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						   |			ТиповойДвиженияССубконто.Регистратор,
						   |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
						   |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
						   |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
						   |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
						   |		ИЗ
						   |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов)) КАК ТиповойДвиженияССубконто
						   |		
						   |		СГРУППИРОВАТЬ ПО
						   |			ТиповойДвиженияССубконто.Регистратор,
						   |			ТиповойДвиженияССубконто.СчетКт,
						   |			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
						   |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
						   |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
						   |			И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
						   |ГДЕ
						   |	СписаниеТоваров.Ссылка В (&МассивОбъектов)
						   |
						   |УПОРЯДОЧИТЬ ПО
						   |	НомерСтроки
						   |
						   |ИТОГИ ПО
						   |	Ссылка
						   |";
						   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ВыборкаПоРегистратору = ЗапросКТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КТ_СписаниеТМЦ_Забаланс.ПФ_MXL_Накладная");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРевизитыОрганизации = Макет.ПолучитьОбласть("РевизитыОрганизации");
	ОбластьНомераШапка 	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанныхШапка	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	//ОбластьДанныхНДСШапка	= Макет.ПолучитьОбласть("ШапкаТаблицы|ДанныеНДС");
	ОбластьНомераСтрока 	= Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  	= Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанныхСтрока 	= Макет.ПолучитьОбласть("Строка|Данные");
	//ОбластьДанныхНДССтрока 	= Макет.ПолучитьОбласть("Строка|ДанныеНДС");
	ОбластьНомераСтрока 	= Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  	= Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанныхСтрока 	= Макет.ПолучитьОбласть("Строка|Данные");
	//ОбластьДанныхНДССтрока 	= Макет.ПолучитьОбласть("Строка|ДанныеНДС");
	ОбластьНомераИтого 		= Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодовИтого  		= Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанныхИтого 		= Макет.ПолучитьОбласть("Итого|Данные");
	//ОбластьДанныхНДСИтого 	= Макет.ПолучитьОбласть("Итого|ДанныеНДС");
	//ОбластьКолонкаТовар 	= Макет.Область("Товар");
	//ОбластьСуммаПрописьюНДС = Макет.ПолучитьОбласть("СуммаПрописьюНДС");
	ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Ссылка, "Накладная на вн.перемещение");

		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьРевизитыОрганизации.Параметры.Заполнить(ВыборкаПоДокументам);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьРевизитыОрганизации.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		ОбластьРевизитыОрганизации.Параметры.Организация 			  = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьРевизитыОрганизации);

		ТабДокумент.Вывести(ОбластьНомераШапка);
		Если ВыводитьКоды Тогда
			ОбластьКодовШапка.Параметры.Колонка = Колонка;
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;

		ТабДокумент.Присоединить(ОбластьДанныхШапка);
		//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
		//	ТабДокумент.Присоединить(ОбластьДанныхНДСШапка);
		//КонецЕсли;	

		//Если НЕ ВыводитьКоды Тогда
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//										Макет.Область("КолонкаКодов").ШиринаКолонки;
		//КонецЕсли;

		ИтогоСумма = 0;
		ИтогоСуммаНДС = 0;
		
		Всего = 0;
				 
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
				
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
						
				ТабДокумент.Вывести(ОбластьНомераСтрока);

				Если ВыводитьКоды Тогда
					ОбластьКодовСтрока.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
					ТабДокумент.Присоединить(ОбластьКодовСтрока);
				КонецЕсли;

				ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьДанныхСтрока.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);		
				ТабДокумент.Присоединить(ОбластьДанныхСтрока);		
				
				//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
				//	ОбластьДанныхНДССтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				//	ТабДокумент.Присоединить(ОбластьДанныхНДССтрока);
				//КонецЕсли;
				
				//ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
				//ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
				
				Всего = Всего + ВыборкаСтрокТовары.Количество;
			КонецЦикла;
			
		КонецЕсли;

		// Вывести Итого
		ОбластьНомераИтого 		= Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодовИтого  		= Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанныхИтого 		= Макет.ПолучитьОбласть("Итого|Данные");
		//ОбластьДанныхНДСИтого 	= Макет.ПолучитьОбласть("Итого|ДанныеНДС");

		ТабДокумент.Вывести(ОбластьНомераИтого);
		
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовИтого);
		КонецЕсли;
		
		ОбластьДанныхИтого.Параметры.Всего = Всего;
		ТабДокумент.Присоединить(ОбластьДанныхИтого);
		
		//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
		//	ОбластьДанныхНДСИтого.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСуммаНДС);
		//	ТабДокумент.Присоединить(ОбластьДанныхНДСИтого);
		//КонецЕсли;	

		//// Вывести Сумму прописью
		//ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		//ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = "Всего наименований " + ?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаСтрокТовары.Количество(), 0) 
		//										 + ", на сумму " + ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСумма, ?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаПоДокументам.ВалютаДокумента, ""));
		//										 
		//ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСумма, ВыборкаПоДокументам.ВалютаДокумента);
		//ТабДокумент.Вывести(ОбластьСуммаПрописью);

		//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
		//	ОбластьСуммаПрописьюНДС.Параметры.ИтоговаяСтрока = "Корректировка НДС в сумме " + ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСуммаНДС, ВыборкаПоДокументам.ВалютаДокумента);
		//	ТабДокумент.Вывести(ОбластьСуммаПрописьюНДС);
		//КонецЕсли;	

		// Варианты заголовков разделов с подписями печатной формы	
		//ЗаголовокРазделаКомиссии = Новый Структура();
		//ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
		//ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
		
		// Выведем подпись председателя инвентаризационной комиссии
		//ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		//
		//Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		//	
		//	ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
		//		
		//	ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	ОбластьКомиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		//	ОбластьКомиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		//	
		//Иначе
		//	
		//	ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	ОбластьКомиссия.Параметры.Должность                = "";
		//	ОбластьКомиссия.Параметры.РасшифровкаПодписи       = "";
		//	
		//КонецЕсли;
		
		ОбластьКомиссия.Параметры.Заполнить(ВыборкаПоДокументам);
		//ОбластьКомиссия.Параметры.Получил = Объект.;
		
		ТабДокумент.Вывести(ОбластьКомиссия);
		
		//// Выведем подписи членов комиссии
		//ВыводитьЗаголовок = Истина;
		//
		//// Сформируем список членов комиссии
		//СписокЧленовКомиссии = Новый Массив();
		//
		//Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		//	Если НЕ Строка.Председатель Тогда
		//		СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		//	КонецЕсли;
		//КонецЦикла;
		//
		//ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		//
		//// Сначала выведем членов комиссии из выборки
		//Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		//	
		//	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
		//		
		//		// Выведем разрыв страницы
		//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//		ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		//	
		//	КонецЕсли;
		//	
		//	ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		//												   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
		//												   		 "");
		//	ОбластьКомиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		//	ОбластьКомиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		//	
		//	ТабДокумент.Вывести(ОбластьКомиссия);
		//	
		//	ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		//	
		//КонецЦикла;
		//
		//// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		//Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		//	
		//	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
		//		
		//		// Выведем разрыв страницы
		//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//		ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		//		
		//	КонецЕсли;
		//	
		//	Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
		//		
		//		ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		//													   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
		//													   "");
		//		ОбластьКомиссия.Параметры.Должность          = "";
		//		ОбластьКомиссия.Параметры.РасшифровкаПодписи = "";
		//		
		//		ТабДокумент.Вывести(ОбластьКомиссия);
		//		
		//		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		//		
		//	КонецЦикла; 
		//	
		//КонецЕсли;
		//
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

#КонецЕсли