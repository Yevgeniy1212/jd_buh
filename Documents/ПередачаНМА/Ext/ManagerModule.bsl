#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета расчетов с контрагентом в шапке документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам 	  = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры

// Заполняет счета учета значениями по умолчанию 
//
Процедура ЗаполнитьСчетаУчета(ЗаполнятьБУ, ЗаполнятьНУ, Объект, Форма) Экспорт

	Если ЗаполнятьБУ Тогда  
		Объект.СчетДоходовБУ	 		= ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов;
		Объект.СчетРасходовБУ 			= ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;
		Объект.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	КонецЕсли;
    	
	ЗаполнитьАналитикуСчета("СчетДоходовБУ", "СубконтоДоходовБУ", Объект);
	ЗаполнитьАналитикуСчета("СчетРасходовБУ", "СубконтоРасходовБУ", Объект);
	
	ПоляФормы	   = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовБУ1", "ЗаголовокСубконтоДоходовБУ2", "ЗаголовокСубконтоДоходовБУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовБУ, Объект, ПоляФормы);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетДоходовБУ, Форма, ПоляФормы, ЗаголовкиПолей);

	ПоляФормы	   = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовБУ1", "ЗаголовокСубконтоРасходовБУ2", "ЗаголовокСубконтоРасходовБУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовБУ, Объект, ПоляФормы);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетРасходовБУ, Форма, ПоляФормы, ЗаголовкиПолей);

	Если ЗаполнятьНУ Тогда
		
		Объект.СчетДоходовНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетДоходовБУ));
	    Объект.СчетРасходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетРасходовБУ));
	
		ЗаполнитьАналитикуСчета("СчетДоходовНУ", "СубконтоДоходовНУ", Объект);
		ЗаполнитьАналитикуСчета("СчетРасходовНУ", "СубконтоРасходовНУ", Объект);		
		
		ПоляФормы	   = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
		
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДоходовНУ1", "ЗаголовокСубконтоДоходовНУ2", "ЗаголовокСубконтоДоходовНУ3"); 
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовНУ, Объект, ПоляФормы);
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетДоходовНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
		ПоляФормы	   = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
		
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоРасходовНУ1", "ЗаголовокСубконтоРасходовНУ2", "ЗаголовокСубконтоРасходовНУ3"); 
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовНУ, Объект, ПоляФормы);
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Объект.СчетРасходовНУ, Форма, ПоляФормы, ЗаголовкиПолей);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчета

Процедура ЗаполнитьАналитикуСчета(ИмяСчета, ИмяАналитикиСчета, Объект) Экспорт
	
	Для Счетчик = 1  По  3 Цикл			
		
		Если Объект[ИмяСчета].ВидыСубконто.Количество() >= Счетчик Тогда		
			// Заполняем значения аналитики НМА
			Если Объект[ИмяСчета].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				Объект[ИмяАналитикиСчета + Счетчик]= Объект.НематериальныйАктив;
			КонецЕсли;											
		Иначе
			Объект[ИмяАналитикиСчета + Счетчик] = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Объект, Основание) Экспорт
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		   		
		Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
			ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;  	
		
		Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
				
		Объект.ДокументОснование = Основание.Ссылка;
		
		СписокНМА		  = Новый СписокЗначений;
		СтруктурапоСуммам = Новый Соответствие;
				
		СтруктураОстатков = УчетНДСИАкциза.ПолучитьСписокТоваровПодтвержденныхОтгрузками(Основание, Ложь);
		
		Объект.НДСВидОперацииРеализации = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойВидОперацииРеализации");
						
		//Проверим отстаток по НМА для ввода на основании
		Для Каждого НМА Из Основание.НМА Цикл
			ОстатокСумма = УчетНДСИАкциза.ПолучитьОстатокИзСФ(НМА, "НМА", СтруктураОстатков,Ложь,Ложь);
			Если ОстатокСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			СписокНМА.Добавить(НМА.НематериальныйАктив);
			СтруктурапоСуммам.Вставить(НМА.НематериальныйАктив, ОстатокСумма.Сумма);
		КонецЦикла;
			 		
		Если СписокНМА.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		 		
		Объект.НематериальныйАктив = СписокНМА[0].Значение;			
		
		СтрокаСОснование = Основание.НМА.Найти(Объект.НематериальныйАктив, "НематериальныйАктив");
				   				
		Если  Не СтрокаСОснование = Неопределено  Тогда				
			
			Объект.Сумма     = СтруктураПоСуммам[Объект.НематериальныйАктив];
			Объект.СтавкаНДС = СтрокаСОснование.СтавкаНДС;
			Объект.СуммаНДС  = УчетНДСИАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
			
		КонецЕсли;
				
	КонецЕсли;                       
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"						  , ДокументСсылка);
	Запрос.УстановитьПараметр("НМА",		 	ДокументСсылка.НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",	ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ДокументСсылка.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Период",  	   				 ДокументСсылка.Дата);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);  	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);	
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;           	
		
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	  		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);	
	ВедетсяАналитическийУчетОСПоМОЛ 				= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитическийУчетОСПоПодразделениям 		= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	Налогоплательщик       = Реквизиты.Организация;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");	
	ТаблицаРеквизитыРеализация = ПараметрыПроведения.Реквизиты.Скопировать();
	ПараметрыПроведения.Вставить("РеквизитыРеализация", ТаблицаРеквизитыРеализация);               	
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
		
	Запрос.УстановитьПараметр("СинонимНМА",	               НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеНМА",             НСтр("ru = 'Списана амортизация'", ОбщегоНазначения.КодОсновногоЯзыка()));	
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Запрос.УстановитьПараметр("Налогоплательщик",       Налогоплательщик);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями",       ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",                    НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоМОЛ",              ВедетсяАналитическийУчетОСПоМОЛ);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоПодразделениям",   ВедетсяАналитическийУчетОСПоПодразделениям);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхразницБалансовымМетодом", ВедениеУчетаВременныхразницБалансовымМетодом);
	
    Запрос.УстановитьПараметр("НачалоГода",    				 НачалоГода(Реквизиты.Период));
    Запрос.УстановитьПараметр("НачалоПериода", 				 НачалоМесяца(Реквизиты.Период));
    Запрос.УстановитьПараметр("КонецПериода",  				 КонецМесяца(Реквизиты.Период));
    Запрос.УстановитьПараметр("СубконтоНМА", 				 ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
    Запрос.УстановитьПараметр("СнятоСУчета", 				 Перечисления.ВидыСостоянийНМА.Списан); 
		
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = 	ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		 			+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияНМА(НомераТаблиц)
					+ ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц,ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеСтоимостиНМА(НомераТаблиц)
					+ ТекстЗапросаРеквизитыРаспределениеАмортизации(НомераТаблиц)
					;
	         	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("СоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПередачаНМА.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК НематериальныйАктив,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакФА,
	|	ВЫБОР
	|		КОГДА НЕ ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ФиксированныйАктив = &НМА) КАК ОбъектыНалоговогоУчетаФА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ФиксированныйАктив = &НМА) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
	|			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	|			И (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПередачаНМА"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НематериальныйАктив,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	ЕСТЬNULL(ОбъектыНалоговогоУчетаФА.ПризнакФА, ЛОЖЬ) КАК ПризнакОбъектаФА,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ПризнакОтдельногоУчетаФА
	|	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПередачаНМА КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	Реквизиты.ПризнакОбъектаФА,
	|	Реквизиты.ПризнакОтдельногоУчетаФА,
	|	Реквизиты.НематериальныйАктив,
	|	Реквизиты.ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	СуммыТаблицыНМА = Результат[НомераТаблиц["СуммыТаблицыНМА"]].Выгрузить();
	УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыНМА, Реквизиты);
	Запрос.УстановитьПараметр("СуммыТаблицыНМА", СуммыТаблицыНМА);
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты);
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаНМА", "ПОМЕСТИТЬ ВременнаяТаблицаНМА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПередачаНМА.Ссылка = &Ссылка", "ПередачаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|НомерСтроки");
	НомераТаблиц.Вставить("СуммыТаблицыНМА", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВременнаяТаблицаНМА.НомерСтроки,
	|	ВременнаяТаблицаНМА.СтавкаНДС,
	|	ВременнаяТаблицаНМА.СуммаВзаиморасчетов,
	|	ВременнаяТаблицаНМА.СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаНМА.Сумма,
	|	ВременнаяТаблицаНМА.СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыНМА.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыНМА.Сумма,
	|	СуммыТаблицыНМА.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыНМА
	|ИЗ
	|	&СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНМА.НематериальныйАктив,
	|	ВременнаяТаблицаНМА.Код,
	|	СуммыТаблицыНМА.Сумма,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДС,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаНМА.СтавкаНДС,
	|	ВременнаяТаблицаНМА.СчетДоходовБУ,
	|	ВременнаяТаблицаНМА.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаНМА.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаНМА.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаНМА.СчетРасходовБУ,
	|	ВременнаяТаблицаНМА.СубконтоРасходовБУ1,
	|	ВременнаяТаблицаНМА.СубконтоРасходовБУ2,
	|	ВременнаяТаблицаНМА.СубконтоРасходовБУ3,
	|	ВременнаяТаблицаНМА.СчетУчетаНДС,
	|	ВременнаяТаблицаНМА.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаНМА.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаНМА.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаНМА.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаНМА.СубконтоРасходовНУ1,
	|	ВременнаяТаблицаНМА.СубконтоРасходовНУ2,
	|	ВременнаяТаблицаНМА.СубконтоРасходовНУ3,
	|	ВременнаяТаблицаНМА.СчетДоходовНУ,
	|	ВременнаяТаблицаНМА.СчетРасходовНУ,
	|	ВременнаяТаблицаНМА.Состояние,
	|	ВременнаяТаблицаНМА.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|		ПО ВременнаяТаблицаНМА.НомерСтроки = СуммыТаблицыНМА.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ВременнаяТаблицаНМА", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ПередачаНМА.НематериальныйАктив,
	|	ПередачаНМА.НематериальныйАктив.Код КАК Код,
	|	ПередачаНМА.Сумма - ВЫБОР
	|		КОГДА ПередачаНМА.СуммаВключаетНДС
	|			ТОГДА ПередачаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ПередачаНМА.Сумма - ВЫБОР
	|		КОГДА ПередачаНМА.СуммаВключаетНДС
	|			ТОГДА ПередачаНМА.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ПередачаНМА.СуммаНДС,
	|	ПередачаНМА.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ПередачаНМА.СтавкаНДС,
	|	ПередачаНМА.СчетДоходовБУ,
	|	ПередачаНМА.СубконтоДоходовБУ1,
	|	ПередачаНМА.СубконтоДоходовБУ2,
	|	ПередачаНМА.СубконтоДоходовБУ3,
	|	ПередачаНМА.СчетРасходовБУ,
	|	ПередачаНМА.СубконтоРасходовБУ1,
	|	ПередачаНМА.СубконтоРасходовБУ2,
	|	ПередачаНМА.СубконтоРасходовБУ3,
	|	ПередачаНМА.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
	|	ПередачаНМА.НДСВидОперацииРеализации,
	|	ПередачаНМА.СубконтоДоходовНУ1,
	|	ПередачаНМА.СубконтоДоходовНУ2,
	|	ПередачаНМА.СубконтоДоходовНУ3,
	|	ПередачаНМА.СубконтоРасходовНУ1,
	|	ПередачаНМА.СубконтоРасходовНУ2,
	|	ПередачаНМА.СубконтоРасходовНУ3,
	|	ПередачаНМА.СчетДоходовНУ,
	|	ПередачаНМА.СчетРасходовНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан) КАК Состояние
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|ГДЕ
	|	ПередачаНМА.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПередачаНМА.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	//НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""НМА"" КАК ИмяСписка,
	               |	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	               |	ТаблицаНМА.НематериальныйАктив КАК Номенклатура,
	               |	0 КАК Стоимость,
	               |	1 КАК Количество,
	               |	ТаблицаНМА.Сумма КАК Сумма,
	               |	ТаблицаНМА.СуммаНДС КАК СуммаНДС,
	               |	0 КАК СуммаАкциза,
	               |	ТаблицаНМА.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	               |	ТаблицаНМА.СуммаНДС КАК СуммаАкцизаВзаиморасчетов,
	               |	ТаблицаНМА.СчетДоходовБУ КАК СчетДоходовБУ,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
	               |	ТаблицаНМА.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	               |	ТаблицаНМА.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	               |	ТаблицаНМА.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	               |	ТаблицаНМА.СчетДоходовНУ КАК СчетДоходовНУ,
	               |	ТаблицаНМА.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	               |	ТаблицаНМА.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	               |	ТаблицаНМА.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	               |	ТаблицаНМА.СчетРасходовБУ КАК СчетЗатратБУ,
	               |	ТаблицаНМА.СубконтоРасходовБУ1 КАК СубконтоЗатратБУ1,
	               |	ТаблицаНМА.СубконтоРасходовБУ2 КАК СубконтоЗатратБУ2,
	               |	ТаблицаНМА.СубконтоРасходовБУ3 КАК СубконтоЗатратБУ3,
	               |	ТаблицаНМА.СчетРасходовНУ КАК СчетЗатратНУ,
	               |	ТаблицаНМА.СубконтоРасходовНУ1 КАК СубконтоЗатратНУ1,
	               |	ТаблицаНМА.СубконтоРасходовНУ2 КАК СубконтоЗатратНУ2,
	               |	ТаблицаНМА.СубконтоРасходовНУ3 КАК СубконтоЗатратНУ3,
	               |	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	НЕОПРЕДЕЛЕНО КАК Склад,
	               |	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	               |	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	               |	Реквизиты.Контрагент КАК КорСубконто1,
	               |	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	               |	Реквизиты.Ссылка КАК КорСубконто3,
	               |	ЛОЖЬ КАК ЭтоУслуга
	               |ИЗ
	               |	ТаблицаНМА КАК ТаблицаНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)";			
			
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНМА.СуммаВзаиморасчетов + ТаблицаНМА.СуммаНДСВзаиморасчетов,
	|		ТаблицаНМА.Сумма + ТаблицаНМА.СуммаНДС
	|	ИЗ
	|		ТаблицаНМА КАК ТаблицаНМА) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	""НМАНДС"" КАК ИмяСписка,
		               |	&СинонимНМА КАК СинонимСписка,
		               |	ТаблицаНМА.НомерСтроки,
		               |	ТаблицаНМА.НематериальныйАктив КАК ТМЗ,
		               |	ТаблицаНМА.Сумма КАК СуммаБезНДС,
		               |	ТаблицаНМА.Сумма КАК ОборотПоРеализации,
		               |	ТаблицаНМА.СуммаНДС КАК СуммаНДС,
		               |	0 КАК СуммаАкциза,
		               |	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		               |	0 КАК СуммаАкцизаВал,
		               |	ТаблицаНМА.СтавкаНДС КАК СтавкаНДС,
		               |	0 КАК СтавкаАкциза,
		               |	ТаблицаНМА.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		               |	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		               |	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК Счет,
		               |	Реквизиты.Контрагент КАК Субконто1,
		               |	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		               |	Реквизиты.Ссылка КАК Субконто3,
		               |	ТаблицаНМА.СчетУчетаНДС КАК КорСчет,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		               |	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		               |	&СодержаниеВыделенНДС КАК Содержание,
		               |	ЛОЖЬ КАК ЭтоАкциз,
		               |	0 КАК Количество,
		               |	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС
		               |ИЗ
		               |	ТаблицаНМА КАК ТаблицаНМА
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               |		ПО (ИСТИНА)
		               |ГДЕ
		               |	Реквизиты.УчитыватьНДС
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаНМА.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
				
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
					
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияНМА(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСостоянийНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ТаблицаНМА.Состояние КАК Состояние,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ (Реквизиты.ПризнакОбъектаФА И Реквизиты.НеобходимостьОтраженияВНУ) Тогда		
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", Неопределено);		
	Иначе
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	ОбъектыНалоговогоУчетаФА.НематериальныйАктив КАК ФиксированныйАктив,
		               	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
		               	|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
		               	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.Выбыл) КАК СостояниеФиксированногоАктива
		               	|ИЗ
		               	|	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА"
						+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц,ПараметрыПроведения,Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ (Реквизиты.ПризнакОтдельногоУчетаФА И Реквизиты.НеобходимостьОтраженияВНУ) Тогда		
		ПараметрыПроведения.Вставить("ТаблицаФАУчитываемыеОтдельно", Неопределено);		
	Иначе   		
		НомераТаблиц.Вставить("ТаблицаФАУчитываемыеОтдельно", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	ОбъектыНалоговогоУчетаФА.НематериальныйАктив КАК ФиксированныйАктив,
		               	|	ОбъектыНалоговогоУчетаФА.ВидЛьготыФА,
		               	|	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.Выбытие) КАК Событие
		               	|ИЗ
		               	|	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("РеквизитыОбъектыИмущественногоНалога", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОбъектыИмущественногоНалога", НомераТаблиц.Количество());
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	&ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ЛОЖЬ КАК НачислятьНалог,
	|	Реквизиты.Организация КАК Местонахождение,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	|				&Период,
	|				ОбъектНалогообложения В
	|						(ВЫБРАТЬ
	|							ТаблицаНМА.НематериальныйАктив
	|						ИЗ
	|							ТаблицаНМА КАК ТаблицаНМА)
	|					И Налогоплательщик = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ПО ТаблицаНМА.НематериальныйАктив = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки"	
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;	      	

КонецФункции

Функция ТекстЗапросаСписаниеСтоимостиНМА(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыСтоимостьНМА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСтоимостьНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =  "ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ПризнакОбъектаФА,
	|	Реквизиты.ВидУчетаНУ,
	|	&СодержаниеНМА КАК Содержание,  
	|   СчетУчетаРасчетовСКонтрагентом,   
	|   &НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|   &ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НМА_БУ.НематериальныйАктив КАК НематериальныйАктив,
	|	НМА_БУ.СчетУчетаБУ КАК СчетКт,
	|	НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетДт,
	|	ЕстьNull(СтоимостьНМА_БУ.СуммаОстатокДт,0) КАК СтоимостьБУ,
	|	ЕстьNull(АмортизацияНМА_БУ.СуммаОстатокКт,0) КАК АмортизацияБУ,
	|	ТаблицаНМА.СчетРасходовБУ КАК СчетРасходовБУ,		
	|	ТаблицаНМА.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	|	ТаблицаНМА.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	|	ТаблицаНМА.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3,
	|	ТаблицаНМА.СчетРасходовНУ КАК СчетРасходовНУ,
	|	ТаблицаНМА.СубконтоРасходовНУ1 КАК СубконтоРасходовНУ1,
	|	ТаблицаНМА.СубконтоРасходовНУ2 КАК СубконтоРасходовНУ2,
	|	ТаблицаНМА.СубконтоРасходовНУ3 КАК СубконтоРасходовНУ3,
	|	ТаблицаНМА.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ТаблицаНМА.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ТаблицаНМА.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ТаблицаНМА.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ТаблицаНМА.Сумма КАК СуммаБезНДС,	
	|	0 КАК ОстаточнаяСтоимостьНМА                 
	|ИЗ
	|	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК НМА_БУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&Период,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И Субконто1 В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК СтоимостьНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	|			И НМА_БУ.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&Период,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И Субконто1 В (Выбрать НематериальныйАктив ИЗ ТаблицаНМА)) КАК АмортизацияНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	|			И НМА_БУ.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	|   ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНМА КАК  ТаблицаНМА
	|		ПО (ИСТИНА) 
	|";
			
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизитыРаспределениеАмортизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыРаспределениеАмортизации", НомераТаблиц.Количество());
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	&НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	&ВедетсяАналитическийУчетОСПоПодразделениям КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	|	&ВедетсяАналитическийУчетОСПоМОЛ КАК ВедетсяАналитическийУчетОСПоМОЛ,
	|	НЕОПРЕДЕЛЕНО КАК ВидРегламентнойОперации,
	|	"""" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации НМА'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ДА-1 (Акт премки-передачи)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'ДА-1 (Акт приемки-передачи)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 51;
	КонецЕсли;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// ДА-1 (Акт премки-передачи)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьДА1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьДА1",
			НСтр("ru = 'ДА-1 (Акт приемки-передачи)'"),
			ПечатьДА1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_ДА1");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьДА1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'", КодЯзыка));
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'", КодЯзыка));
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПередачаНМА.Дата КАК Дата,
	               |	ПередачаНМА.Номер КАК Номер,
	               |	ПередачаНМА.Организация КАК Организация,
	               |	ПередачаНМА.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ПередачаНМА.Контрагент КАК Контрагент,
	               |	ПередачаНМА.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	               |	ПередачаНМА.СчетДоходовБУ КАК СчетДоходовБУ,
	               |	ПередачаНМА.ДокументОснование КАК ДокументОснование,
	               |	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК НематериальныйАктивНаименованиеПолное,
	               |	ПередачаНМА.НематериальныйАктив.Код КАК ИнвентарныйНомер,
	               |	ПередачаНМА.НематериальныйАктив КАК НематериальныйАктивНаименование,
	               |	ПередачаНМА.Ответственный КАК Ответственный,
	               |	ПередачаНМА.Ссылка КАК Ссылка,
	               |	ПередачаНМА.ВалютаДокумента КАК ВалютаДокумента,
	               |	ПередачаНМА.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	ПередачаНМА.ДоверенностьДата КАК ДоверенностьДата,
	               |	ПередачаНМА.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	ПередачаНМА.УдалитьДоверенность КАК УдалитьДоверенность,
	               |	ПередачаНМА.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	ПередачаНМА.СуммаНДС КАК СуммаНДС,
	               |	ПередачаНМА.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ПередачаНМА.СуммаДокумента КАК СуммаДокумента,
	               |	ПередачаНМА.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ПередачаНМА.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ПередачаНМА.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ПередачаНМА.ИнвентаризационнаяКомиссия.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ФизЛицо КАК ФизЛицо,
	               |		Председатель КАК Председатель
	               |	) КАК ИнвентаризационнаяКомиссия
	               |ИЗ
	               |	Документ.ПередачаНМА КАК ПередачаНМА
	               |ГДЕ
	               |	ПередачаНМА.Ссылка В(&Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";	
				   
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	//формирование печатной формы документа

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ДА1");
	
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПередачаНМА_ДА1";
	
	Пока ШапкаДокумента.Следующий() Цикл

		// Получаем области макета для вывода в табличный документ
		Шапка             	  	  = Макет.ПолучитьОбласть("Шапка");
		Таблица1		  	 	  = Макет.ПолучитьОбласть("Таблица1");
		СтрокаТаблицы1    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		ЗаголовокТаблицы2 	 	  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
		СтрокаТаблицы2    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
		ИтогоСтрокаТаблицы2  	  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
		Приказ			  	 	  = Макет.ПолучитьОбласть("Приказ");
		Подвал            	 	  = Макет.ПолучитьОбласть("Подвал");	
		ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
		ОССдал			     	  = Макет.ПолучитьОбласть("ОССдал|Сдал");
		ПодвалВерх	      	  	  = Макет.ПолучитьОбласть("ПодвалВерх");
		ПодвалНиз	      	  	  = Макет.ПолучитьОбласть("ПодвалНиз");
		ПодвалДата        	  	  = Макет.ПолучитьОбласть("ПодвалДата");
		ОСПринял		  		  = Макет.ПолучитьОбласть("ОССдал|Принял");
		Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
		ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");

		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	
		МассивНМАДляЗапроса = Новый ТаблицаЗначений;
		МассивНМАДляЗапроса.Колонки.Добавить("НематериальныйАктив",Новый ОписаниеТипов(МассивТипов),"НематериальныйАктив");
		
		Стр = МассивНМАДляЗапроса.Добавить();
		Стр.НематериальныйАктив = ШапкаДокумента.НематериальныйАктивНаименование;
		
		МассивНМА = Новый Массив;
		МассивНМА.Добавить(ШапкаДокумента.НематериальныйАктивНаименование);
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос.УстановитьПараметр("ДатаДок"		, ШапкаДокумента.Дата);
		Запрос.УстановитьПараметр("Организация"	, ШапкаДокумента.Организация);
		Запрос.УстановитьПараметр("Поступил"	, Перечисления.ВидыСостоянийНМА.Поступил);
		Запрос.УстановитьПараметр("НМА"			, МассивНМАДляЗапроса);
		Запрос.УстановитьПараметр("массНМА"     , МассивНМА);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НМА.НематериальныйАктив КАК НематериальныйАктив
		               |ПОМЕСТИТЬ ВТ_НМА
		               |ИЗ
		               |	&НМА КАК НМА
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_НМА.НематериальныйАктив КАК НематериальныйАктив,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		               |	СостоянияНМАОрганизацийСрезПоследних.Период КАК ДатаПриобретения,
		               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
		               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
		               |ИЗ
		               |	ВТ_НМА КАК ВТ_НМА
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		               |				&ДатаДок,
		               |				Организация = &Организация
		               |					И НематериальныйАктив В (&массНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		               |		ПО ВТ_НМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		               |				&ДатаДок,
		               |				Организация = &Организация
		               |					И Состояние = &Поступил
		               |					И НематериальныйАктив В (&массНМА)) КАК СостоянияНМАОрганизацийСрезПоследних
		               |		ПО ВТ_НМА.НематериальныйАктив = СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНМА.СрезПоследних(
		               |				&ДатаДок,
		               |				Организация = &Организация
		               |					И НематериальныйАктив В (&массНМА)) КАК СчетаУчетаНМАСрезПоследних
		               |		ПО ВТ_НМА.НематериальныйАктив = СчетаУчетаНМАСрезПоследних.НематериальныйАктив";
		
		ДанныеНМА = Запрос.Выполнить().Выбрать();
		ДанныеНМА.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СчетДт"         , ДанныеНМА.СчетНачисленияАмортизацииБУ);
		Запрос.УстановитьПараметр("Период"         , ШапкаДокумента.Дата);
		Запрос.УстановитьПараметр("Организация"    , ШапкаДокумента.Организация);	
		
		ВидыСубконтоНМА = Новый Массив;
		ВидыСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
		Запрос.УстановитьПараметр("ВидыСубконтоНМА", ВидыСубконтоНМА);
		Запрос.УстановитьПараметр("массНМА"        , МассивНМА);
		
		Запрос.Текст="ВЫБРАТЬ
		             |	ЕСТЬNULL(ТиповойОборотыДтКт.СуммаОборот, 0) КАК Сумма
		             |ИЗ
		             |	РегистрБухгалтерии.Типовой.ОборотыДтКт(
		             |			&Период,
		             |			&Период,
		             |			,
		             |			СчетДт = &СчетДт,
		             |			&ВидыСубконтоНМА,
		             |			,
		             |			,
		             |			Организация = &Организация
		             |				И СубконтоДт1 В (&массНМА)) КАК ТиповойОборотыДтКт";
					 
		РезультатАморт = Запрос.Выполнить();
		
		Если НЕ РезультатАморт.Пустой() Тогда 
			Аморт = РезультатАморт.Выбрать();
			Аморт.Следующий();
			СуммаАмортизации = Аморт.Сумма;
		Иначе 
			СуммаАмортизации = 0;
		КонецЕсли;	  
		
		ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
	
		////////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		
		////////////////////////////////////////////////////////////////////////
		// 1-я страница формы
				
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		
		// Организация-сдатчик
		ПредставлениеОрганизацииСдатчик 				= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
		Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		
		// Организация-получатель
		СведенияОбОрганизацииПолучателе					   = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ШапкаДокумента.Контрагент, ШапкаДокумента.Дата);
		ПредставлениеОрганизацииПолучатель				   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииПолучатель = ПредставлениеОрганизацииПолучатель;
		Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		
		Шапка.Параметры.НомерДок           	   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ДатаДок            	   = Формат(ШапкаДокумента.Дата,"ДЛФ=Д");
		Шапка.Параметры.РасшифровкаПодписиСдал = Руководители.Руководитель;
		Шапка.Параметры.ДолжностьСдал          = Руководители.РуководительДолжность;
		
		ТабДокумент.Вывести(Шапка);
		
		ТабДокумент.Вывести(Таблица1);
		
		//Заполняем раздел "Основание"
		Если ШапкаДокумента.ДокументОснование <> Неопределено И ЗначениеЗаполнено(ШапкаДокумента.ДокументОснование) Тогда
			
			Если ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				НаименованиеДокОснования = НСтр("ru='Счет-фактура (выданный)'", КодЯзыка);
			Иначе
				НаименованиеДокОснования = ШапкаДокумента.ДокументОснование.Метаданные().Синоним;
			КонецЕсли;	
			
			СтрокаТаблицы1.Параметры.НаимДокОсн  = НаименованиеДокОснования;
			СтрокаТаблицы1.Параметры.НомерДокОсн = ШапкаДокумента.ДокументОснование.Номер;
			СтрокаТаблицы1.Параметры.ДатаДокОсн  = ШапкаДокумента.ДокументОснование.Дата;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ШапкаДокумента.Ответственный.ФизЛицо) Тогда 
			СтрокаТаблицы1.Параметры.СписокМОЛ = ШапкаДокумента.Ответственный.ФизЛицо;
		Иначе
			СтрокаТаблицы1.Параметры.СписокМОЛ = ШапкаДокумента.Ответственный;
		КонецЕсли;
		
		Получатель = "";
		Сдатчик    = "";
		СчетДт     = "";
		СчетКт     = "";
		
		Сдатчик    = ПредставлениеОрганизацииСдатчик; 
		Получатель = ПредставлениеОрганизацииПолучатель;
		СчетДт 	   = ШапкаДокумента.СчетУчетаРасчетовСКонтрагентом;
		
		СтрокаТаблицы1.Параметры.НаименованиеОС 	     = ?(ЗначениеЗаполнено(ШапкаДокумента.НематериальныйАктивНаименованиеПолное), СокрЛП(ШапкаДокумента.НематериальныйАктивНаименованиеПолное), СокрЛП(ШапкаДокумента.НематериальныйАктивНаименование));
		СтрокаТаблицы1.Параметры.ДатаВыпуска 		     = Формат(ДанныеНМА.ДатаПриобретения, "Л=" + КодЯзыка + "; ДЛФ=Д");
		СтрокаТаблицы1.Параметры.ПервоначальнаяСтоимость = ДанныеНМА.ПервоначальнаяСтоимость;
		
		ТабДокумент.Вывести(СтрокаТаблицы1);
		
		// выводим вторую часть таблицы
		ЗаголовокТаблицы2.Параметры.Валюта = ШапкаДокумента.ВалютаДокумента;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ЗаголовокТаблицы2);
		
		// Выведем строку таблицы
		СтрокаТаблицы2.Параметры.СчетДт				= СчетДт;
		СтрокаТаблицы2.Параметры.СчетКт				= ШапкаДокумента.СчетДоходовБУ;
		СтрокаТаблицы2.Параметры.СрокСлужбыПолезной = ДанныеНМА.СрокПолезногоИспользования;
		СтрокаТаблицы2.Параметры.ИнвентарныйНомер 	= ШапкаДокумента.ИнвентарныйНомер;
		СтрокаТаблицы2.Параметры.ЗаводскойНомер 	= "";  
		СтрокаТаблицы2.Параметры.НомерПаспорта 	    = "";  
		СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС = ШапкаДокумента.СуммаДокумента;
		
		Если НЕ ЗначениеЗаполнено(ДанныеНМА.СрокПолезногоИспользования) ИЛИ ДанныеНМА.СрокПолезногоИспользования = 0 Тогда
			КоэффициентАмортизацииБУ = 0;	
		Иначе
			КоэффициентАмортизацииБУ = Окр((12/ДанныеНМА.СрокПолезногоИспользования) * 100, 2);	
		КонецЕсли;
		
		СтрокаТаблицы2.Параметры.СуммаАмортизации 	 = СуммаАмортизации;
		СтрокаТаблицы2.Параметры.БалансоваяСтоимость = ?(ЗначениеЗаполнено(ДанныеНМА.ПервоначальнаяСтоимость), ДанныеНМА.ПервоначальнаяСтоимость, 0) - ?(ЗначениеЗаполнено(СуммаАмортизации), СуммаАмортизации, 0);
		
		ИтогоСуммаАмортизации	 = 0;
		ИтогоБалансоваяСтоимость = 0;
		ИтогоСтоимостьРеализацииСНДС = 0;
		
		ТабДокумент.Вывести(СтрокаТаблицы2);
		
		ИтогоСуммаАмортизации								   = ИтогоСуммаАмортизации + СуммаАмортизации;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоСуммаАмортизации	   = ИтогоСуммаАмортизации;
		ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
		ИтогоСтоимостьРеализацииСНДС                           = ИтогоСтоимостьРеализацииСНДС + СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоСтоимостьРеализацииСНДС = ИтогоСтоимостьРеализацииСНДС;
	
		ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);
		
		Если ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеВид) Тогда
			Если ШапкаДокумента.ДокументОснованиеВид = "приказа" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'приказа'", КодЯзыка);
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "постановления" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'постановления'", КодЯзыка);
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "распоряжения" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'распоряжения'", КодЯзыка);
			КонецЕсли;	
		Иначе
			Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'приказа (распоряжения)'", КодЯзыка);
		КонецЕсли;
		
		Стр 									= """_____"""+"________________________ 20_____"+НСтр("ru = 'года'", КодЯзыка);
		Приказ.Параметры.ДокументОснованиеДата 	= ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеДата), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ШапкаДокумента.ДокументОснованиеДата, "Л=" + КодЯзыка + "; ДФ=дд ММММ гггг")) , Стр);
		Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеНомер),ШапкаДокумента.ДокументОснованиеНомер,"__________ ");

		Приказ.Параметры.НаименованиеОбъекта 	= ?(ЗначениеЗаполнено(ШапкаДокумента.НематериальныйАктивНаименованиеПолное), СокрЛП(ШапкаДокумента.НематериальныйАктивНаименованиеПолное), СокрЛП(ШапкаДокумента.НематериальныйАктивНаименование));
		ТабДокумент.Вывести(Приказ);
		
		ТабДокумент.Вывести(Подвал);
		 		
		//выводим комиссию
		
		//сначала председатель   
		
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.Дата);
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		Иначе
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = "";
			Комиссия.Параметры.РасшифровкаПодписи       = "";
		КонецЕсли; 	
		
		ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина; 
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокЧленовКомиссии, ШапкаДокумента.Дата);
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ТаблицаИнвентаризационнаяКомиссия.Количество() < 1 Тогда
			Для Итератор = 1 По 3 Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				"");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;  
		Иначе
			// Сначала выведем членов комиссии из выборки
			Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				"");
				Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		КонецЕсли;	
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
		ТабДокумент.Вывести(ШапкаОборотнойСтороны);
				
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОССдал) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТекстОбъектОсновныхСредств = НСтр("ru = 'Долгосрочный актив'", КодЯзыка);
		ТекстСдал 				   = НСтр("ru = 'Сдал'", КодЯзыка);
		
		ОССдал.Параметры.ОбъектОсновныхСредств = ТекстОбъектОсновныхСредств;
		ОССдал.Параметры.Сдал				   = ТекстСдал;
		
		Если ЗначениеЗаполнено(ШапкаДокумента.Ответственный.ФизЛицо) Тогда 
			ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ШапкаДокумента.Ответственный.ФизЛицо, ШапкаДокумента.Дата);
			ОССдал.Параметры.Должность          = ДанныеОФизЛице.Должность;
			ОССдал.Параметры.РасшифровкаПодписи = ДанныеОФизЛице.Представление;
		Иначе
			ОССдал.Параметры.Должность          = "";
			ОССдал.Параметры.РасшифровкаПодписи = ШапкаДокумента.Ответственный;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОССдал);
		
		ТекстПринял = НСтр("ru = 'Принял'", КодЯзыка);
		
		ОСПринял.Параметры.Принял = ТекстПринял;
		ТабДокумент.Присоединить(ОСПринял);
		
		ТабДокумент.Вывести(ПодвалДата);
		
		//////////////////////////
		
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ШапкаДокумента);
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ПодвалВерх,,,"ДоверенностьЛицоВыдана", Истина);	
				
		ТабДокумент.Вывести(ПодвалВерх);
		ТабДокумент.Вывести(ПодвалНиз);
		
		// Выведем подпись бухгалтера
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиСдал = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;
 
	Возврат ТабДокумент;
	
КонецФункции // ПечатьДА1()

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС,
	|	ДанныеОбрабатываемогоДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеОбрабатываемогоДокумента.Сумма КАК Сумма,
	|	ДанныеОбрабатываемогоДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеОбрабатываемогоДокумента.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПередачаНМА КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
	|	1 КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.НематериальныйАктив КАК Товар,
	|	ОбрабатываемаяТаблица.НематериальныйАктив.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ОбрабатываемаяТаблица.КурсВзаиморасчетов/ОбрабатываемаяТаблица.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ОбрабатываемаяТаблица.КурсВзаиморасчетов/ОбрабатываемаяТаблица.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ОбрабатываемаяТаблица.УчНДС))*ОбрабатываемаяТаблица.КурсВзаиморасчетов/ОбрабатываемаяТаблица.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ОбрабатываемаяТаблица
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

#КонецЕсли
