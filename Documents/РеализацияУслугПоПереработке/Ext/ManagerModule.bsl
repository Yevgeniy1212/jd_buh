#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоСписанияСебестоимостиНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовБУ <> СчетаУчета.СчетДоходовОтРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовБУ = СчетаУчета.СчетДоходовОтРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходовОтРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетДоходовНУ <> СчетаУчета.СчетДоходовОтРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетДоходовНУ = СчетаУчета.СчетДоходовОтРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда	
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
			КонецЕсли;  			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
			ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
			
			ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
			ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиНУ);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "МатериалыЗаказчика" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда	
				СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетПередачиЗаб;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом 	= СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам   	= СчетаУчета.СчетАвансовПокупателя;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА

// Заполняет табличную часть МатериалыЗаказчика на основании данных табличной части Услуги.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
//
// Параметры:
//  МатериалыЗаказчика - ДокументТабличнаяЧасть.РеализацияУслугПоПереработке.МатериалыЗаказчика - заполняемая табличная часть.
//              Допускается передавать соответствующие данные формы 
//              или таблицу значений со совпадающей структурой.
//  Услуги - ТаблицаЗначений - структура таблицы совпадает со структурой одноименной табличной части
// 
Процедура ЗаполнитьМатериалыПоПродукции(МатериалыЗаказчика, Услуги, Организация = Неопределено, Дата = Неопределено) Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Услуги", Услуги);
	
	Запрос.Текст = 
	// Исходные данные
	"ВЫБРАТЬ
	|	Услуги.Спецификация,
	|	Услуги.Количество КАК КоличествоПродукции
	|ПОМЕСТИТЬ Выпуск
	|ИЗ
	|	&Услуги КАК Услуги
	|;"
	// Данные о расходе сырья
	+ УправлениеПроизводствомСервер.ТекстЗапросаВременнаяТаблицаЗатратыСырья()
	// Преобразуем в формат получателя
	+ 
	"ВЫБРАТЬ
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Представление КАК НоменклатураПредставление,
	|	СУММА(ЗатратыСырья.Количество) КАК Количество
	|ИЗ
	|	ЗатратыСырья КАК ЗатратыСырья
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПредставление";
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация");
	ДанныеОбъекта.Дата			= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	ДанныеОбъекта.Организация	= Организация;
	ДанныеОбъекта.Реализация	= Истина;
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаМатериала Из ТаблицаМатериалов Цикл
		
		СтрокаТабличнойЧасти = МатериалыЗаказчика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаМатериала);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаМатериала.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "МатериалыЗаказчика", СведенияОНоменклатуре);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УслугиПоДаннымОВыпускеПродукции(ДокументРеализацииУслуг, ДокументыВыпуска) Экспорт
	
	Услуги = Новый ТаблицаЗначений;
	Для Каждого ОписаниеКолонки Из Метаданные.Документы.РеализацияУслугПоПереработке.ТабличныеЧасти.Услуги.Реквизиты Цикл
		Услуги.Колонки.Добавить(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументыВыпуска);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
	               |	ОтчетПроизводстваЗаСменуПродукция.СчетБУ КАК СчетУчетаБУ,
	               |	ОтчетПроизводстваЗаСменуПродукция.Спецификация,
	               |	СУММА(ОтчетПроизводстваЗаСменуПродукция.Количество) КАК Количество,
	               |	СУММА(ОтчетПроизводстваЗаСменуПродукция.СуммаПлановая) КАК СуммаПлановая,
	               |	ОтчетПроизводстваЗаСменуПродукция.ПлановаяСтоимость
	               |ИЗ
	               |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	               |ГДЕ
	               |	ОтчетПроизводстваЗаСменуПродукция.СчетБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПроизводствоИзДавальческогоСырья)
	               |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
	               |	ОтчетПроизводстваЗаСменуПродукция.СчетБУ,
	               |	ОтчетПроизводстваЗаСменуПродукция.Спецификация,
	               |	ОтчетПроизводстваЗаСменуПродукция.ПлановаяСтоимость";

	НовыеСтрокиТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Дата");
	ДанныеОбъекта.Вставить("Организация");
	ДанныеОбъекта.Вставить("СуммаВключаетНДС");
	ДанныеОбъекта.Вставить("ТипЦен");
	ДанныеОбъекта.Вставить("ВалютаДокумента");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов");
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов");
	ДанныеОбъекта.Вставить("Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументРеализацииУслуг);
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	СоответствиеСведенийОНоменклатуре	= ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(НовыеСтрокиТабличнойЧасти, "Номенклатура", Истина), ДанныеОбъекта);

	Для Каждого СтрокаТабличнойЧасти Из НовыеСтрокиТабличнойЧасти Цикл
		
		
		НоваяСтрока = Услуги.Добавить();
			
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОНоменклатуре);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, НоваяСтрока, "Услуги", СведенияОНоменклатуре);
		
		НоваяСтрока.СчетУчетаБУ = СтрокаТабличнойЧасти.СчетУчетаБУ;
		
		Документы.РеализацияУслугПоПереработке.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, НоваяСтрока, "Услуги");
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПлановаяСтоимость) Тогда
			НоваяСтрока.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить(), ДанныеОбъекта.Дата,
			ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 1,, ДанныеОбъекта.Организация);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Услуги;
	
КонецФункции

Процедура ЗаполнитьПоДокументуОснованию(Объект, Основание)  Экспорт

	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);	
	
	Объект.ДокументОснование = Основание.Ссылка;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда

		Если Основание.МатериалыЗаказчика.Количество() = 0  Тогда
			ТекстСообщения = НСтр("ru = 'Требование накладная №%1 не отражает перемещение давальческого сырья в производство'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Основание.Номер);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;

		СуммаВключаетНДС = Истина;

		Для Каждого СтрокаОснование ИЗ Основание.МатериалыЗаказчика Цикл

			Строка = Объект.МатериалыЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,СтрокаОснование);
			Строка.СчетУчета    = СтрокаОснование.СчетПередачи;

		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда

		СуммаВключаетНДС = Истина;
		УслугиПоДаннымОВыпускеПродукции = УслугиПоДаннымОВыпускеПродукции(Объект, Основание);
		Объект.Услуги.Загрузить(УслугиПоДаннымОВыпускеПродукции);
		 
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Основание,
			"АдресДоставки,
			|БанковскийСчетОрганизации,
			|Грузополучатель,
			|Сделка,
			|СуммаДокумента,
			|СчетУчетаРасчетовПоАвансам,
			|СчетУчетаРасчетовСКонтрагентом,
			|ДатаНачалаОтчетногоПериода,
			|ДатаОкончанияОтчетногоПериода,
			|ПереченьДокументации,
			|НомерДокументаГЗ,
			|ДатаДокументаГЗ,
			//|ДатаПодписанияГЗ,
			|СпособВыпискиАктовВыполненныхРабот");
		
		Для Каждого ТабличнаяЧасть Из Основание.Метаданные().ТабличныеЧасти Цикл
			Объект[ТабличнаяЧасть.Имя].Очистить();
			Для Каждого СтрокаТабличнойЧасти Из Основание[ТабличнаяЧасть.Имя] Цикл
				ЗаполнитьЗначенияСвойств(Объект[ТабличнаяЧасть.Имя].Добавить(), СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЦикла;
		
	 ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		 
		 Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
				 Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					 
					 ТекстСообщения = НСтр("ru='Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
					 
					 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Основание.Номер);
					 ВызватьИсключение(ТекстСообщения);
				 КонецЕсли;
			Возврат;       		
		КонецЕсли;  	
		
		Объект.СуммаВключаетНДС = Истина;

		Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		Объект.Грузополучатель             = Основание.Контрагент;	 	
		Объект.БанковскийСчетОрганизации   = Основание.СчетОрганизации;
		Объект.АдресДоставки			   = Основание.ПунктНазначения;
		
		Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);	
		
		ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();				  
		
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка);
		ДанныеОбъекта = Новый Структура(
			"Дата, Организация, СтруктурноеПодразделение,
			|УчитыватьКПН, ВидУчетаНУ, Ссылка, ТипЦен");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", ТипЦенПлановойСебестоимости);
		ДанныеОбъекта.Вставить("ЗаполнятьСпецификацию", Истина);

		
		СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина), ДанныеОбъекта);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
			Если СведенияОНоменклатуре = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
			
			ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги");
			СтрокаТабличнойЧасти.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
																ТипЦенПлановойСебестоимости, Объект.Дата,
																ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 1,, Объект.Организация);
																ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		КонецЦикла;        	  
		
		Объект.СпособВыпискиАктовВыполненныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот"); 
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда 
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
				Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа");	
			Иначе
				Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");		
			КонецЕсли; 			
		КонецЕсли;
	      	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Отчет о продукции
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОПродукции";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о продукции'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Отчет о материалах
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОМатериалах";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о материалах'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Р1
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетР1";
	КомандаПечати.Представление = НСтр("ru = 'Р-1 (акт выполненных работ)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 53;
	
	// Р1 с колонками НДС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетР1_НДС";
	КомандаПечати.Представление = НСтр("ru = 'Р-1 (акт выполненных работ, с НДС)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 54;

	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 55;
	
	// Счет-фактура в валюте регл. учета
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (в валюте регл. учета)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 56;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 57;
	КонецЕсли;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг,ОтчетОПродукции,ОтчетОМатериалах,ОтчетР1,ОтчетР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг,ОтчетОПродукции,ОтчетОМатериалах,ОтчетР1,ОтчетР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг,ОтчетОПродукции,ОтчетОМатериалах,ОтчетР1,ОтчетР1_НДС,СчетФактураВыданный,СчетФактураВыданныйВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать акта об оказании услуг
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктОбОказанииУслуг",
			НСтр("ru = 'Акт об оказании услуг'"),
			ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("АктОбОказанииУслуг"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
			
	КонецЕсли;
		
	// Печать отчета о продукции
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОПродукции") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОПродукции",
			НСтр("ru = 'Отчет о продукции'"),
			ПечатьОтчета("Услуги",МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ОтчетОПродукции"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
		
	КонецЕсли;

	// Печать отчета о материалах
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОМатериалах") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОМатериалах",
			НСтр("ru = 'Отчет о материалах'"),
			ПечатьОтчета("МатериалыЗаказчика",МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ОтчетОМатериалах"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	

	КонецЕсли;

	// Печать формы Р-1
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетР1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетР1",
			НСтр("ru = 'Р-1 (акт об оказании производственных услуг)'"),
			ПечатьР1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_Р1");
	КонецЕсли;
		
	// Печать формы Р-1 с колонками НДС
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетР1_НДС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетР1_НДС",
			НСтр("ru = 'Р-1 (акт об оказании производственных услуг, с НДС)'"),
			ПечатьР1(МассивОбъектов, ОбъектыПечати, Истина),
			,
			"ОбщийМакет.ПФ_MXL_Р1");
	КонецЕсли;
		
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданный") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданный",
			НСтр("ru = 'Счет-фактура'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Ложь, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданный"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданныйВВалютеРеглУчета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВыданныйВВалютеРеглУчета",
			НСтр("ru = 'Счет-фактура (в валюте регл. учета)'"),
			ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, Истина, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВыданныйВВалютеРеглУчета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт", КодЯзыка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_Акт";

	ЗапросДанныеДокументов = Новый Запрос;
	ЗапросДанныеДокументов.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДанныеДокументов.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента КАК Основание,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)";
	
	ДанныеДокументов = ЗапросДанныеДокументов.Выполнить().Выбрать();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросУслуги.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработке.Содержание КАК Товар,
	|	РеализацияУслугПоПереработке.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|   РеализацияУслугПоПереработке.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработке.Количество КАК Количество,
	|	ЕстьNull(РеализацияУслугПоПереработке.Цена, 0) КАК Цена,
	|	ЕстьNull(РеализацияУслугПоПереработке.Сумма, 0) КАК Сумма,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	ЕстьNull(РеализацияУслугПоПереработке.СуммаНДС, 0) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)
	|
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";

	ВыборкаПоУслугам = ЗапросУслуги.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		НазваниеДокумента = НСтр("ru='Акт оказания услуг по переработке '", КодЯзыка);
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДанныеДокументов.Ссылка, НСтр("ru='Акт'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
		ОбластьМакета.Параметры.Поставщик 				= СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Получатель, ДанныеДокументов.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
		ОбластьМакета.Параметры.Получатель 				= ДанныеДокументов.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеДокументов.Основание) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Основание");
			ОбластьМакета.Параметры.Заполнить(ДанныеДокументов);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;	
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		ТабДокумент.Вывести(ОбластьМакета);

		ВыборкаПоУслугам.Сбросить();
		
		Если ВыборкаПоУслугам.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокУслуги = ВыборкаПоУслугам.Выбрать();
		Иначе
			ВыборкаСтрокУслуги = Неопределено;
		КонецЕсли;
		
		Сумма    = 0;
		СуммаНДС = 0;
		НомерСтроки = 0;
		
		Если ВыборкаСтрокУслуги <> Неопределено Тогда 
			
			Пока ВыборкаСтрокУслуги.Следующий() Цикл

				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
				ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицы.Параметры.КодАртикул = ВыборкаСтрокУслуги.КодАртикул;				
				КонецЕсли;       
				
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);

				Сумма    = Сумма + ВыборкаСтрокУслуги.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокУслуги.СуммаНДС;

			КонецЦикла;
						
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ДанныеДокументов.УчитыватьНДС Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(ДанныеДокументов.СуммаВключаетНДС, НСтр("ru='В том числе НДС'", КодЯзыка), НСтр("ru=' Сумма НДС'", КодЯзыка));
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(ДанныеДокументов.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего оказано услуг %1, на сумму %2'", КодЯзыка),
														НомерСтроки,
														ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента));
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
					
					СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			СуммаКПрописи,
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг текста заголовка
						ТабДокумент.Область(2, 2, 2, 34).Разъединить();
						ТабДокумент.Область(2, 2, 2, 29).Объединить();
						ТабДокумент.Область(2,31, 2, 34).Обвести();
						// сдвиг предлставления поставщика
						ТабДокумент.Область(4, 6, 4, 34).Разъединить();
						ТабДокумент.Область(4, 6, 4, 29).Объединить();
						// сдвиг представления получателя
						ТабДокумент.Область(6, 6, 6, 34).Разъединить();
						ТабДокумент.Область(6, 6, 6, 29).Объединить();
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции
	
// Функция формирует табличный документ с печатной формой отчета о
// продукции, произведенной из давальческого сырья и переданной давальцу
//
// Возвращаемое значение:
//  Табличный документ - печатная форма отчета
//
Функция ПечатьОтчета(ТабЧасть,МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ЗапросДанныеДокументов = Новый Запрос;
	ЗапросДанныеДокументов.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДанныеДокументов.Текст =
	"ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	РеализацияУслугПоПереработке.Номер,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента КАК Основание,
	|	РеализацияУслугПоПереработке.Контрагент КАК Получатель,
	|	РеализацияУслугПоПереработке.Организация КАК Поставщик,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.СтруктурноеПодразделение,
	|	РеализацияУслугПоПереработке.СуммаДокумента,
	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	|	РеализацияУслугПоПереработке.УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)";
	ДанныеДокументов = ЗапросДанныеДокументов.Выполнить().Выбрать();
	
	ЗапросПродукция = Новый Запрос;
	ЗапросПродукция.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПродукция.Текст = "
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	Ссылка,
	|   НомерСтроки,
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	|	Номенклатура КАК Товар,
	|	Количество,
	|   Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения";
	Если ТабЧасть = "Услуги" Тогда
		ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
		|	,
		|	Цена,
		|	Сумма";
	КонецЕсли;
	ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
	|ИТОГИ
	|	СУММА(НомерСтроки)
	|ПО
	|	Ссылка";
	
	ВыборкаПоУслугам = ЗапросПродукция.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	

	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт", КодЯзыка);
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ТабЧасть = "Услуги" Тогда
		ТабДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_АктУслуги";
	Иначе
		ТабДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_АктПродукция";
	КонецЕсли;

	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если ТабЧасть = "Услуги" Тогда
			НазваниеДокумента = НСтр("ru='Отчет о продукции, произведенной из сырья заказчика'", КодЯзыка);
		Иначе
			НазваниеДокумента = НСтр("ru='Отчет о переработанном сырье '", КодЯзыка);
		КонецЕсли;
		
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ДанныеДокументов.Ссылка, НазваниеДокумента,,,,КодЯзыка);	
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
		ОбластьМакета.Параметры.Поставщик 				= СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.Получатель, ДанныеДокументов.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
		ОбластьМакета.Параметры.Получатель 				= ДанныеДокументов.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеДокументов.Основание) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Основание");
			ОбластьМакета.Параметры.Основание = ДанныеДокументов.Основание;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести табличную часть
		Если ВыводитьКоды Тогда
			ОбластьМакета  = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТабЧасть + "СКодом");
			ОбластьСтроки  = Макет.ПолучитьОбласть("Строка" + ТабЧасть + "СКодом");
			ОбластьМакета.Параметры.Колонка = Колонка;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТабЧасть);
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ТабЧасть);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		ВыборкаПоУслугам.Сбросить();
		
		Если ВыборкаПоУслугам.НайтиСледующий(ДанныеДокументов.Ссылка) Тогда
			ВыборкаСтрокУслуги = ВыборкаПоУслугам.Выбрать();
		Иначе
			ВыборкаСтрокУслуги = Неопределено;
		КонецЕсли;
		
		Сумма    = 0;
		НомерСтроки = 0;
		
		Если ВыборкаСтрокУслуги <> Неопределено Тогда 
			
			Пока ВыборкаСтрокУслуги.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокУслуги);
				ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
				
				Если ВыводитьКоды Тогда
					ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокУслуги.КодАртикул;				
				КонецЕсли;    
				
				ТабДокумент.Вывести(ОбластьСтроки);
				
				Если ТабЧасть = "Услуги" Тогда
					Сумма    = Сумма + ВыборкаСтрокУслуги.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТабЧасть = "Услуги" Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
			ТабДокумент.Вывести(ОбластьМакета);
			
			СуммаКПрописи = Сумма;
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");			
			ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего продукции %1, на сумму %2'", КодЯзыка),
														НомерСтроки,
														ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента));
			ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДокументов.ВалютаДокумента, КодЯзыка);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТабЧасть = "МатериалыЗаказчика" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
		//KaspiQR
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
		Исключение
		КонецПопытки;
		Попытка
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
			ТабДокумент.Рисунки.Удалить(РисунокКод);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОтчетаОпродукции()

// Функция формирует табличный документ унифицированной формы Р-1
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме Р-1.
//
Функция ПечатьР1(МассивОбъектов, ОбъектыПечати, КолонкиНДС = Ложь) Экспорт
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиР1(МассивОбъектов);
	
	Док = ДанныеДляПечати.ДанныеДокументов;
	ВыборкаСтрокУслуги_ = ДанныеДляПечати.ВыборкаСтрокУслуги;
	ВыборкаСтрокМатериалыЗаказчика_ = ДанныеДляПечати.ВыборкаСтрокМатериалыЗаказчика;
	
	//формирование печатной формы документа
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Р1");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;

	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Запасы 			 = Макет.ПолучитьОбласть("Запасы");
	Подвал			 = Макет.ПолучитьОбласть("Подвал");	
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;  
	
	ТабДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_Р1";
	
	Пока Док.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
		УчитыватьНДС_     = Док.УчитыватьНДС;
		СуммаВключаетНДС_ = Док.СуммаВключаетНДС;
		
		Если КолонкиНДС И УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыСНДС");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС");
			Итого 			 = Макет.ПолучитьОбласть("ИтогоСНДС");
		ИначеЕсли КолонкиНДС И УчитыватьНДС_ И СуммаВключаетНДС_ Тогда 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыВклНДС");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицыВклНДС");
			Итого 			 = Макет.ПолучитьОбласть("ИтогоВклНДС");
		Иначе 
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
			Итого 			 = Макет.ПолучитьОбласть("Итого");
		КонецЕсли;

		////////////////////////////////////////////////////////////////////////
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);

		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
		
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
		
		Шапка.Параметры.Заполнить(Док);
		
		// Организация-исполнитель
		ПредставлениеИсполнителя 				 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
		Шапка.Параметры.ПредставлениеИсполнителя = ПредставлениеИсполнителя;
		Шапка.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
		
		// Организация-сдатчик
		СведенияОбОрганизацииЗаказчике           = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Док.Заказчик, Док.Дата);
		ПредставлениеЗаказчика                   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
		Шапка.Параметры.ПредставлениеЗаказчика   = ПредставлениеЗаказчика;
		Шапка.Параметры.КонтрагентРНН_БИН	     = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
		
		Шапка.Параметры.ДатаДокумента  = Формат(Док.Дата,"Л=" + КодЯзыка + "; ДЛФ=Д");
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер, Док.Ссылка); 
		
		Шапка.Параметры.ДокументОснование = Док.Основание;
		
		ТабДокумент.Вывести(Шапка);
		
		//Заголовок таблицы
		Если КолонкиНДС И УчитыватьНДС_ Тогда 
			ЗаголовокТаблицы.Параметры.Валюта = Док.ВалютаДокумента;
		КонецЕсли;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ИтогоКоличество = 0;
		ИтогоСумма	    = 0;
		ИтогоСуммаНДС   = 0;
		ИтогоСуммаСНДС	= 0;
		
		ПрибавлятьНДС = УчитыватьНДС_ И (НЕ СуммаВключаетНДС_);
		
		ВыборкаСтрокУслуги_.Сбросить();
		
		Если ВыборкаСтрокУслуги_.НайтиСледующий(Док.Ссылка) Тогда
			ВыборкаСтрокУслуги = ВыборкаСтрокУслуги_.Выбрать();
		Иначе
			ВыборкаСтрокУслуги = Неопределено;
		КонецЕсли;
		
		НомерСтроки = 0;
		
		Если ВыборкаСтрокУслуги <> Неопределено Тогда 
			
			Пока ВыборкаСтрокУслуги.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;

				Количество = ВыборкаСтрокУслуги.Количество;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем переносимую часть заголовка таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
				СтрокаТаблицы.Параметры.НомерПП = НомерСтроки;
				
				Если ЗначениеЗаполнено(ВыборкаСтрокУслуги.Содержание) Тогда 
					СтрокаТаблицы.Параметры.Наименование = ВыборкаСтрокУслуги.Содержание;
				Иначе 
					СтрокаТаблицы.Параметры.Наименование = ?(ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное), ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное, ВыборкаСтрокУслуги.Номенклатура);
				КонецЕсли;
				
				СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаСтрокУслуги.ЕдиницаИзмерения;
				
				Если КолонкиНДС Тогда
					
					Если УчитыватьНДС_ Тогда 
						СтрокаТаблицы.Параметры.СуммаНДС = ВыборкаСтрокУслуги.СуммаНДС;
						ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаСтрокУслуги.СуммаНДС;
					КонецЕсли;
					
					Если УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
						СуммаСНДС = ?(ПрибавлятьНДС, ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС, ВыборкаСтрокУслуги.Сумма);
						СтрокаТаблицы.Параметры.СуммаСНДС = СуммаСНДС;
						ИтогоСуммаСНДС = ИтогоСуммаСНДС + СуммаСНДС;
					КонецЕсли;	
					
					ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
					
				Иначе
					
					Если УчитыватьНДС_ И НЕ СуммаВключаетНДС_ Тогда
						СтрокаТаблицы.Параметры.Цена = Окр((ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС) / ВыборкаСтрокУслуги.Количество, 2) ;
						СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
						ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
					Иначе 
						СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;
						ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
					КонецЕсли;
					
				КонецЕсли;
			
				ИтогоКоличество = ИтогоКоличество + Количество;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
			КонецЦикла;
		КонецЕсли;
		
		//Итоги
		Если КолонкиНДС И УчитыватьНДС_ И (НЕ СуммаВключаетНДС_) Тогда 
			Итого.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
		КонецЕсли;	
			
		Если КолонкиНДС И УчитыватьНДС_ Тогда 
			Итого.Параметры.ИтогоСуммаНДС   = ИтогоСуммаНДС;
		КонецЕсли;
		
		Итого.Параметры.ИтогоСумма 		= ИтогоСумма;
		Итого.Параметры.ИтогоКоличество	= ИтогоКоличество;
		
		ТабДокумент.Вывести(Итого);
		
		//Запасы
		Запасы.Параметры.Запасы = "";
		//
		
		ВыборкаСтрокМатериалыЗаказчика_.Сбросить();
		
		Если ВыборкаСтрокМатериалыЗаказчика_.НайтиСледующий(Док.Ссылка) Тогда
			ВыборкаСтрокМатериалыЗаказчика = ВыборкаСтрокМатериалыЗаказчика_.Выбрать();
		Иначе
			ВыборкаСтрокМатериалыЗаказчика = Неопределено;
		КонецЕсли;
		
		Если ВыборкаСтрокМатериалыЗаказчика <> Неопределено Тогда 
			
			Пока ВыборкаСтрокМатериалыЗаказчика.Следующий() Цикл
				
				Запасы.Параметры.Запасы = Запасы.Параметры.Запасы + ВыборкаСтрокМатериалыЗаказчика.Номенклатура + "; " + ВыборкаСтрокМатериалыЗаказчика.Количество + " " + ВыборкаСтрокМатериалыЗаказчика.ЕдиницаИзмерения + "; " + ВыборкаСтрокМатериалыЗаказчика.СуммаОборот+ " " + Док.ВалютаДокумента+". ";	
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запасы.Параметры.Заполнить(Док);
		
		ТабДокумент.Вывести(Запасы);
		
		// Подвал
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
		
		Подвал.Параметры.ДолжностьОтветственного  = Док.ДолжностьОтветственного;
		Подвал.Параметры.ФИООтветственного        = Док.ФИООтветственного;
		Подвал.Параметры.ДатаПринятия             = Формат(Док.ДатаПодписанияГЗ, "Л=" + КодЯзыка + "; ДЛФ=Д");
		
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
		//KaspiQR
		МакетНастроенДляВыводаKaspiQR = Истина;
		Попытка
			РисунокКолонтитул = ТабДокумент.Рисунки.КолонтитулKaspi;
			РисунокКод = ТабДокумент.Рисунки.QRKaspi;
		Исключение
			МакетНастроенДляВыводаKaspiQR = Ложь;
		КонецПопытки;
		Если МакетНастроенДляВыводаKaspiQR Тогда
			ОбщиеДанныеНастроек = QRКод_ГенерацияКода.СохраненныеРеквизитыКода(Док.Организация, Док.СтруктурноеПодразделение);
			Если ОбщиеДанныеНастроек.Количество() > 0 Тогда
				ДанныеКомпании = ОбщиеДанныеНастроек[0];
				Если ДанныеКомпании.Свойство("ВыводитьQRКод") И ДанныеКомпании.ВыводитьQRКод = Истина Тогда
					
					НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер, Док.Ссылка);
					
					ОтветСервиса = QRКод_ГенерацияКода.РезультатЗапросаСервиса(СведенияОбОрганизации.БИН_ИИН,
																			КодироватьСтроку(НомерДокументаДляПечати, СпособКодированияСтроки.КодировкаURL),
																			?(ПрибавлятьНДС, ИтогоСумма + ИтогоСуммаНДС, ИтогоСумма),
																			ДанныеКомпании);
					
					Если ТипЗнч(ОтветСервиса) = Тип("ДвоичныеДанные") Тогда
						// сдвиг текста заголовка
						Для НомерСтрокиТабличногоДокумента = 1 По 4 Цикл
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40, НомерСтрокиТабличногоДокумента, 49).Разъединить();
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 35).Текст = ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 40).Текст;
							ТабДокумент.Область(НомерСтрокиТабличногоДокумента, 35, НомерСтрокиТабличногоДокумента, 44).Объединить();
						КонецЦикла;
						ТабДокумент.Область(6, 44).Текст = ТабДокумент.Область(6, 49).Текст;
						ТабДокумент.Область(1, 45, 7, 49).Очистить(Истина, Истина, Истина);
						// вывод и выравнивание картинок
						РисунокКолонтитул.Картинка = БиблиотекаКартинок.QRКод_Колонтитул;
						РисунокКолонтитул.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКолонтитул.Высота   = РисунокКолонтитул.Ширина/4;
						РисунокКод.Картинка = Новый Картинка(ОтветСервиса);
						РисунокКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
						РисунокКод.Верх = РисунокКолонтитул.Верх + РисунокКолонтитул.Высота + 1;
						РисунокКод.Лево = РисунокКолонтитул.Лево;
						РисунокКод.Ширина = РисунокКолонтитул.Ширина;
						РисунокКод.Высота = РисунокКолонтитул.Ширина;
					Иначе
						ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
						ТабДокумент.Рисунки.Удалить(РисунокКод);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
					КонецЕсли;
				Иначе
					ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
					ТабДокумент.Рисунки.Удалить(РисунокКод);
				КонецЕсли;
			Иначе
				ТабДокумент.Рисунки.Удалить(РисунокКолонтитул);
				ТабДокумент.Рисунки.Удалить(РисунокКод);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиР1(МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросДок = Новый Запрос;
	ЗапросДок.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДок.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	ЗапросДок.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияУслугПоПереработке.Номер,
	|	РеализацияУслугПоПереработке.Дата,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.ОтложитьНачислениеНДС
	|			ТОГДА ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата)
	|		ИНАЧЕ РеализацияУслугПоПереработке.ДатаПодписанияГЗ
	|	КОНЕЦ КАК ДатаПодписанияГЗ,
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента КАК Основание,
	|	РеализацияУслугПоПереработке.Контрагент КАК Заказчик,
	|	РеализацияУслугПоПереработке.Организация КАК Исполнитель,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.СтруктурноеПодразделение,
	|	РеализацияУслугПоПереработке.СуммаДокумента,
	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	|	РеализацияУслугПоПереработке.УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.Ответственный.ФизЛицо КАК ФИООтветственного,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	РеализацияУслугПоПереработке.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ДатаОкончанияОтчетногоПериода КАК ДатаОкончанияОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ПереченьДокументации КАК ПереченьДокументации,
	|	РеализацияУслугПоПереработке.Ссылка
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
	|		ПО РеализацияУслугПоПереработке.Организация = СведенияПоАктамВыполненныхРабот.Организация
	|		И РеализацияУслугПоПереработке.Ссылка = СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период,
	|	РаботникиОрганизации.Организация КАК Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ,
	|	ДанныеДокумента.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот
	|ПОМЕСТИТЬ ВТ_ПериодыРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО РаботникиОрганизации.Организация = ДанныеДокумента.Организация
	|			И РаботникиОрганизации.Период <= ДанныеДокумента.Дата
	|			И (ДанныеДокумента.ФИООтветственного = РаботникиОрганизации.Сотрудник.Физлицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ДатаПодписанияГЗ,
	|	ДанныеДокумента.СпособВыпискиАктовВыполненныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРаботников.Ссылка КАК Ссылка,
	|	ПериодыРаботников.Организация КАК Организация,
	|	ПериодыРаботников.ФизЛицо,
	|	РаботникиОрганизации.Должность КАК ДолжностьОтветственного
	|ПОМЕСТИТЬ ВТ_ПериодыДолжности
	|ИЗ
	|	ВТ_ПериодыРаботников КАК ПериодыРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПериодыРаботников.Период = РаботникиОрганизации.Период
	|			И ПериодыРаботников.Организация = РаботникиОрганизации.Организация
	|			И ПериодыРаботников.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Номер,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.ДатаПодписанияГЗ,
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияУслугПоПереработке.Основание,
	|	РеализацияУслугПоПереработке.Заказчик,
	|	РеализацияУслугПоПереработке.Исполнитель,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.СтруктурноеПодразделение,
	|	РеализацияУслугПоПереработке.СуммаДокумента,
	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	|	РеализацияУслугПоПереработке.УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.ФИООтветственного,
	|	РеализацияУслугПоПереработке.НомерДоговора,
	|	РеализацияУслугПоПереработке.ДатаДоговора,
	|	РеализацияУслугПоПереработке.ДатаНачалаОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ДатаОкончанияОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ПереченьДокументации,
	|	РеализацияУслугПоПереработке.Ссылка,
	|	ВТ_ПериодыДолжности.ДолжностьОтветственного КАК ДолжностьОтветственного
	|ИЗ
	|	ДанныеДокумента КАК РеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыДолжности КАК ВТ_ПериодыДолжности
	|		ПО РеализацияУслугПоПереработке.Ссылка = ВТ_ПериодыДолжности.Ссылка";	
	
	ДанныеДокументов = ЗапросДок.Выполнить().Выбрать();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросУслуги.Текст =
	
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияУслугПоПереработкеУслуги.НомерСтроки) КАК НомерСтроки,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Содержание,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Код КАК УслугаКод,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.Количество) КАК Количество,
	|	РеализацияУслугПоПереработкеУслуги.Цена,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.СуммаНДС) КАК СуммаНДС,
	|	РеализацияУслугПоПереработкеУслуги.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Содержание,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Код,
	|	РеализацияУслугПоПереработкеУслуги.Цена,
	|	РеализацияУслугПоПереработкеУслуги.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	
	ВыборкаСтрокУслуги = ЗапросУслуги.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗапросМатериалы = Новый Запрос;
	ЗапросМатериалы.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ЗапросМатериалы.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ЗапросМатериалы.Текст =  
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияУслугПоПереработкеМатериалыЗаказчика.НомерСтроки) КАК НомерСтроки,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.Код КАК УслугаКод,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета,
	|	СУММА(РеализацияУслугПоПереработкеМатериалыЗаказчика.Количество) КАК Количество,
	|	СУММА(-1 * ТиповойОбороты.СуммаОборот) КАК СуммаОборот,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК РеализацияУслугПоПереработкеМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(, , Регистратор, , &ВидыСубконто, , , ) КАК ТиповойОбороты
	|		ПО РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура = ТиповойОбороты.Субконто1
	|			И РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка = ТиповойОбороты.Регистратор
	|			И РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета = ТиповойОбороты.Счет
	|ГДЕ
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.Код,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	
	ВыборкаСтрокМатериалыЗаказчика = ЗапросМатериалы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	РезультатыЗапросов = Новый Структура;
	РезультатыЗапросов.Вставить("ДанныеДокументов", ДанныеДокументов);
	РезультатыЗапросов.Вставить("ВыборкаСтрокУслуги", ВыборкаСтрокУслуги);
	РезультатыЗапросов.Вставить("ВыборкаСтрокМатериалыЗаказчика", ВыборкаСтрокМатериалыЗаказчика);
	
	Возврат РезультатыЗапросов;
	
КонецФункции

Функция ПечатьСчетаФактуры(МассивОбъектов, ОбъектыПечати, ВВалютеРеглУчета = Ложь, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ТЧ_Документов.Ссылка) КАК СчетФактура,
	|	ТЧ_Документов.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_Документов
	|ГДЕ
	|	ТЧ_Документов.ДокументОснование В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ_Документов.ДокументОснование";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	Возврат ?(ВВалютеРеглУчета, 
				Документы.СчетФактураВыданный.ПечатьСчетФактураВВалютеРеглУчета(МассивСчетовФактур, ОбъектыПечати, КодЯзыка), 
				Документы.СчетФактураВыданный.ПечатьСчетФактура(МассивСчетовФактур, ОбъектыПечати, Ложь, КодЯзыка));
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура КАК Товар,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", 			НСтр("ru='Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);


	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
							Реквизиты.Организация,
							Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом , "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль , "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

	НомераТаблиц = Новый Структура;
	Запрос.Текст =  ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаПлановаяСебестоимость(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаВыпускУслугБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
					+ ТекстЗапросаВыпускУслугНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимУслуги",	           				НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",     				НСтр("ru = 'НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеОтложенНДС",                   НСтр("ru = 'НДС (отложен)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеУслуги",     	   				НСтр("ru = 'Затраты от реализации произв. услуг в план.ценах'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПроводкиПлановойСебестоимости",НСтр("ru = 'Затраты от реализации услуг перераб.дав.сырья в план.ценах'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", 				НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом", ВедениеУчетаВременныхРазницБалансовымМетодом);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", 		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	Запрос.УстановитьПараметр("СинонимМатериалыЗаказчика", 				НСтр("ru = 'Материалы заказчика'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СчетУчетаНДСОтложенный",                 ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьМатериалыЗаказчика) КАК ЕстьМатериалыЗаказчика,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьМатериалыЗаказчика,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Реквизиты.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде) 
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаПодписанияГЗ
	|	КОНЕЦ КАК Дата,
	|	Реквизиты.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	ЕСТЬNULL(СоставДокумента.ЕстьМатериалыЗаказчика, ЛОЖЬ) КАК ЕстьМатериалыЗаказчика,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.Содержание,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ОтложитьНачислениеНДС КАК ОтложитьНачислениеНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации,
		|	ТаблицаУслуги.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ТаблицаУслуги.СчетУчетаНУ КАК СчетУчетаНУ,
		|	ТаблицаУслуги.СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3,
		|	ТаблицаУслуги.СчетСписанияСебестоимостиБУ КАК СчетБУ,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиБУ1 КАК СубконтоБУ1,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиБУ2 КАК СубконтоБУ2,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиБУ3 КАК СубконтоБУ3,
		|	ТаблицаУслуги.СчетСписанияСебестоимостиНУ КАК СчетНУ,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиНУ1 КАК СубконтоНУ1,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиНУ2 КАК СубконтоНУ2,
		|	ТаблицаУслуги.СубконтоСписанияСебестоимостиНУ3 КАК СубконтоНУ3,
		|	ТаблицаУслуги.СуммаПлановая
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаМатериалыЗаказчика", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаМатериалыЗаказчика.Ссылка,
		|	ТаблицаМатериалыЗаказчика.НомерСтроки,
		|	ТаблицаМатериалыЗаказчика.Номенклатура,
		|	ТаблицаМатериалыЗаказчика.Количество КАК Количество,
		|	ТаблицаМатериалыЗаказчика.СчетУчета КАК Счет
		|ПОМЕСТИТЬ ТаблицаМатериалыЗаказчика
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
		|ГДЕ
		|	ТаблицаМатериалыЗаказчика.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДокументаРеализация(РеализацияТаблицаДокумента) Экспорт
	
	Если РеализацияТаблицаДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДокументаРеализацияТМЗ = РеализацияТаблицаДокумента.Скопировать();
	КолонкиТаблицы = ТаблицаДокументаРеализацияТМЗ.Колонки;
	КолонкиТаблицы.Удалить("Стоимость");
	КолонкиТаблицы["СуммаПлановая"].Имя = "Стоимость";
	
	Возврат ТаблицаДокументаРеализацияТМЗ;
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС,
		|	ВременнаяТаблицаУслуги.СуммаПлановая,
		|	ВременнаяТаблицаУслуги.СчетУчетаБУ,
		|	ВременнаяТаблицаУслуги.СчетУчетаНУ
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаУслуги.СчетДоходовБУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаУслуги.СчетДоходовНУ,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаУслуги.СчетБУ,
	|	ВременнаяТаблицаУслуги.СубконтоБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоБУ3,
	|	ВременнаяТаблицаУслуги.СчетНУ,
	|	ВременнаяТаблицаУслуги.СубконтоНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоНУ3,
	|	ВременнаяТаблицаУслуги.СуммаПлановая,
	|	ВременнаяТаблицаУслуги.СчетУчетаБУ,
	|	ВременнаяТаблицаУслуги.СчетУчетаНУ
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьМатериалыЗаказчика Тогда 
		ПараметрыПроведения.Вставить("РеквизитыМатериалыЗаказчика", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаМатериалыЗаказчика", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыМатериалыЗаказчика", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМатериалыЗаказчика",	 НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ЛОЖЬ КАК УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	""МатериалыЗаказчика"" КАК ИмяСписка,
	|	&СинонимМатериалыЗаказчика КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаМатериалыЗаказчика.НомерСтроки,
	|	ТаблицаМатериалыЗаказчика.Счет КАК СчетУчетаБУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка) КАК СчетУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаМатериалыЗаказчика.Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	ТаблицаМатериалыЗаказчика.Количество КАК Количество,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	НЕОПРЕДЕЛЕНО КАК КорСчетСписанияБУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК КорСчетСписанияНУ,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
	|	&СодержаниеСписаныТМЗ КАК Содержание
	|ИЗ
	|	ТаблицаМатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМатериалыЗаказчика.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	 
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если  НЕ Реквизиты.ЕстьУслуги Тогда 
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлановая,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкциза,
	|	НЕОПРЕДЕЛЕНО КАК СуммаАкцизаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.СуммаПлановая КАК СуммаПлановая,
		|	0 КАК Стоимость,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетДоходовНУ КАК СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
		|	Истина КАК ЭтоУслуга,
		|	ТаблицаУслуги.СчетУчетаБУ КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК СуммаАкциза,
		|	0 КАК СуммаАкцизаВзаиморасчетов
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.СуммаПлановая КАК СуммаПлановая,
	|	ВременнаяТаблицаРеализация.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаРеализация.Сумма КАК Сумма,
	|	ВременнаяТаблицаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаРеализация.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаРеализация.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.Склад КАК Склад,
	|	ВременнаяТаблицаРеализация.Партия КАК Партия,
	|	ВременнаяТаблицаРеализация.СуммаАкциза КАК СуммаАкциза,
	|	ВременнаяТаблицаРеализация.СуммаАкцизаВзаиморасчетов КАК СуммаАкцизаВзаиморасчетов
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ";
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаУслуги.СуммаВзаиморасчетов + ТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|		ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	ИЗ
		|		ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаПлановаяСебестоимость(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	НомераТаблиц.Вставить("ПлановаяСебестоимостьРеквизиты"  , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСебестоимостьТаблица"    , НомераТаблиц.Количество());

	ТекстЗапроса =
		"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.СчетУчетаБУ КАК СчетЗатратБУ,
	|	ТаблицаУслуги.СчетУчетаНУ КАК СчетЗатратНУ,
	|	ТаблицаУслуги.СчетБУ КАК СчетСписанияСебестоимостиБУ,
	|	ТаблицаУслуги.СубконтоБУ1 КАК СубконтоСписанияСебестоимостиБУ1,
	|	ТаблицаУслуги.СубконтоБУ2 КАК СубконтоСписанияСебестоимостиБУ2,
	|	ТаблицаУслуги.СубконтоБУ3 КАК СубконтоСписанияСебестоимостиБУ3,
	|	ТаблицаУслуги.СчетНУ КАК СчетСписанияСебестоимостиНУ,
	|	ТаблицаУслуги.СубконтоНУ1 КАК СубконтоСписанияСебестоимостиНУ1,
	|	ТаблицаУслуги.СубконтоНУ2 КАК СубконтоСписанияСебестоимостиНУ2,
	|	ТаблицаУслуги.СубконтоНУ3 КАК СубконтоСписанияСебестоимостиНУ3,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК Сумма,
	|	&СодержаниеПроводкиПлановойСебестоимости КАК Содержание
	|ИЗ
	|	ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС  Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма КАК СуммаБезНДС,
		|	ТаблицаУслуги.Сумма КАК ОборотПоРеализации,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|   Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ЛОЖЬ КАК ЭтоАкциз
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
		
		Если Реквизиты.ОтложитьНачислениеНДС Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,", "&СчетУчетаНДСОтложенный КАК КорСчет,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,", "Реквизиты.Контрагент КАК КорСубконто1,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,", "Реквизиты.Ссылка КАК КорСубконто2,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СодержаниеВыделенНДС КАК Содержание,", "&СодержаниеОтложенНДС КАК Содержание,");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыпускУслугБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	НомераТаблиц.Вставить("ВыпускУслугТаблицаБУ"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Продукция,
	|	ТаблицаУслуги.СчетУчетаБУ КАК СчетЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СчетБУ КАК СчетСписания,
	|	ТаблицаУслуги.СубконтоБУ1 КАК СубконтоСписания1,
	|	ТаблицаУслуги.СубконтоБУ2 КАК СубконтоСписания2,
	|	ТаблицаУслуги.СубконтоБУ3 КАК СубконтоСписания3,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускУслугНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	НомераТаблиц.Вставить("ВыпускУслугТаблицаНУ"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Продукция,
	|	ТаблицаУслуги.СчетУчетаНУ КАК СчетЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СчетНУ КАК СчетСписания,
	|	ТаблицаУслуги.СубконтоНУ1 КАК СубконтоСписания1,
	|	ТаблицаУслуги.СубконтоНУ2 КАК СубконтоСписания2,
	|	ТаблицаУслуги.СубконтоНУ3 КАК СубконтоСписания3,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьДатуПодписанияГЗПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработке.Дата КАК Дата,
	|	РеализацияУслугПоПереработке.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ,
	|	РеализацияУслугПоПереработке.Представление КАК Представление
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот = &парамПустойСпособ";
	
	Запрос.УстановитьПараметр("парамПустойСпособ", 	Перечисления.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияУслугПоПереработке");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			Если ДокументОбъект.ДатаПодписанияГЗ = Дата (1,1,1) Тогда
				ДокументОбъект.ДатаПодписанияГЗ = Выборка.Дата;
				ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде ;
			Иначе
				
				Если НачалоДня(Выборка.ДатаПодписанияГЗ) = НачалоДня(Выборка.Дата) Тогда
					ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа;
				Иначе
					ДокументОбъект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе ""%1"" заполнена дата подписания ГЗ, но так как она отличается от даты документа
					| признак ""Способ выставления актов выполненных работ"" установлен в значение ""В бумажном виде"".'"),
					Выборка.Представление);
					ЗаписьЖурналаРегистрации(НСтр("ru='Обновление ИБ. Документ ""Реализация услуг по переработке"". Заполнение даты подписания ГЗ'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
					
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
