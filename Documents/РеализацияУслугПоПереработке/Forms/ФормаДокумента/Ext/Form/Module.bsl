
&НаКлиенте
Перем ЗакрыватьФорму;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	      
	УправлениеФормой(ЭтаФорма);
	
	ДобавитьКомандуВводаКорректировки();
	ОбновитьДанныеОВведенныхКорректировках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Модифицированность = Истина;
		КонецЕсли;  	                                                            	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	//++ АВР
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);   	
	//-- АВР

	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ОтложитьНачислениеНДС Тогда
		Если ТекущийОбъект.ЭтоНовый() И НачалоДня(ТекущийОбъект.Дата) = НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ДатаПодписанияПоДаннымРегистра = ТекущийОбъект.Дата;
		КонецЕсли;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаПодписания", ДатаПодписанияПоДаннымРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураВыданный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		УправлениеЦенообразованием.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДатаПодписания") Тогда
		ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
	КонецЕсли;

	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ТекущийОбъект.ДополнительныеСвойства.ЗакрыватьФорму);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда				
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);     

		//АВР	
	ИначеЕсли ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР() Тогда
		ОбработкаОповщенияАВРНаСервере();  	
	//Конец АВР   
	ИначеЕсли ИмяСобытия = "Запись_Операция" Или ИмяСобытия = "Запись_Сторнирование" Тогда
		ОбновитьДанныеОВведенныхКорректировках();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС" Тогда
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
	ЗакрыватьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""реализация услуг по переработке"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ПараметрыЗаписи.Свойство("ЗакрыватьФорму") Тогда
		ЗакрыватьФорму = ПараметрыЗаписи.ЗакрыватьФорму;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Отказ = Истина;
		ЗакрыватьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиентСервер.ОбработатьИзмененияПоКнопкеЦеныИВалюты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписанияГЗПриИзменении(Элемент)

	Если НачалоДня(Объект.ДатаПодписанияГЗ) = НачалоДня(ТекущаяДатаПодписанияДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.ДатаПодписанияГЗ, 
		ТекущаяДатаПодписанияДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПодписанияГЗПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;

	УправлениеФормой(ЭтаФорма);
	

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Результат.ИзмененоСтруктурноеПодразделение Тогда
				РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
			Иначе 
			
				ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Результат);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Услуги.Количество() > 0; 
	
	ПерезаполнитьСчетаУчета = Ложь;
	ТолькоСчетаРасчетов     = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = НЕ ЕстьЗаполненныетабЧасти;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = Истина;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	ИначеЕсли ПерезаполнитьСчетаУчета Тогда
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			Если ЕстьЗаполненныетабЧасти Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина);
	Иначе
		ЗаполнитьСчетаУчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураРезультатаВыполнения = Неопределено;
	
	ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ТекущийДоговорКонтрагента = Неопределено;
	ТекущийКонтрагент         = Неопределено;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	ЗаполнитьСпособВыписки();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "Основание");
	Оповещение = Новый ОписаниеОповещения("АдресДоставкиЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.АдресДоставки,
		НСтр("ru='Адрес доставки'"));

КонецПроцедуры
	
&НаКлиенте
Процедура АдресДоставкиЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.АдресДоставки = Строка;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПереченьДокументацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "ПереченьДокументации");

    Оповещение = Новый ОписаниеОповещения("ПереченьДокументацииЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
   
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
             Оповещение,                                                   
			 Объект.ПереченьДокументации,
             НСтр("ru='Перечень документации'"));

КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументацииЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.ПереченьДокументации = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетов(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	ЗаполнитьСчетаУчетаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСпособВыписки();
	УправлениеФормой(ЭтотОбъект);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособВыписки()
	
	СпособВыпискиАктовВыполненныхРаботИзДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СпособВыпискиАктовВыполненныхРабот");
	Если ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРаботИзДоговора) И  Объект.СпособВыпискиАктовВыполненныхРабот <> СпособВыпискиАктовВыполненныхРаботИзДоговора Тогда
		Объект.СпособВыпискиАктовВыполненныхРабот  = СпособВыпискиАктовВыполненныхРаботИзДоговора;
	Иначе
		Если Не ЗначениеЗаполнено(СпособВыпискиАктовВыполненныхРаботИзДоговора) Тогда			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ГосударственноеУчреждение") Тогда
				Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа;
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
			
	СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	Если Результат <> Неопределено Тогда
		Если НЕ Объект.ОтложитьНачислениеНДС
			И Объект.ОтложитьНачислениеНДС <> Результат.ЗначенияПриОткрытии.ОтложитьНачислениеНДС Тогда
			
			Если Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде") Тогда
				Объект.ДатаПодписанияГЗ = Объект.Дата;
			Иначе
				Объект.ДатаПодписанияГЗ = ДатаПодписанияПоДаннымРегистра;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.РеализацияУслугПоПереработке.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
		И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = СтруктураРезультатаВыполнения.Свойство("ТолькоСчетаРасчетов") И СтруктураРезультатаВыполнения.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, Параметры) Экспорт

   Если Период <> Неопределено Тогда
      
      Объект.ДатаНачалаОтчетногоПериода = Период.ДатаНачала;
      Объект.ДатаОкончанияОтчетногоПериода = Период.ДатаОкончания;
   
   КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		
		// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	УсловияОтбораСчетов = Новый Структура;
	УсловияОтбораСчетов.Вставить("Забалансовый", Ложь);
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма, Новый Структура("УсловияОтбораСчетов", УсловияОтбораСчетов));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УСЛУГИ

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	Если ИмяТаблицы = "Услуги" Тогда
		ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
		ПараметрыФормы.Вставить("ЕстьСпецификация"        , Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	Если ИмяТаблицы = "Услуги" Тогда
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныНоменклатуры", НСтр("ru='Цены номенклатуры'"));
		Иначе
			СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", НСтр("ru='Цены продажи'"));
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  1, "СчетДоходовНУ", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  2, "СчетДоходовНУ", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  3, "СчетДоходовНУ", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетУчетаБУПриИзменении(Элемент)
		
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Услуги[" + Элементы.Услуги.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетСписанияСебестоимостиБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	
	СтрокаТаблицы.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетСписанияСебестоимостиБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиБУ, СчетСписанияСебестоимостиНУ, 
		|СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетСебестоимостиБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетСписанияСебестоимостиНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетСебестоимостиНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура,Содержание, ЕдиницаИзмерения, Коэффициент, Количество, НоменклатураУслуга,
		|СтавкаНДС, Цена, ПлановаяСтоимость, Сумма, Спецификация, СчетУчетаНДСПоРеализации,НДСВидОперацииРеализации, СчетУчетаБУ, СчетУчетаНУ,
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, 
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность,
		|СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3, 
		|ВидСубконтоСписанияСебестоимостиБУ1, ВидСубконтоСписанияСебестоимостиБУ2, ВидСубконтоСписанияСебестоимостиБУ3,
		|ВидСубконтоСписанияСебестоимостиНУ1, ВидСубконтоСписанияСебестоимостиНУ2, ВидСубконтоСписанияСебестоимостиНУ3,
		|СубконтоСписанияСебестоимостиБУ1Доступность, СубконтоСписанияСебестоимостиБУ2Доступность, СубконтоСписанияСебестоимостиБУ3Доступность,
		|СубконтоСписанияСебестоимостиНУ1Доступность, СубконтоСписанияСебестоимостиНУ2Доступность, СубконтоСписанияСебестоимостиНУ3Доступность"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СтруктурноеПодразделение,
		|УчитыватьКПН, ВидУчетаНУ, Ссылка, ТипЦен, ВалютаДокумента, КратностьВзаиморасчетов, КурсВзаиморасчетов");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураУслугаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Содержание = ПолучитьСодержаниеУслуги(ТекущиеДанные.НоменклатураУслуга);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеУслуги(Номенклатура)
	
	Содержание = "";
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		СведенияОНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное");
		
		Содержание = ?(ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное), СведенияОНоменклатуре.Наименование, СведенияОНоменклатуре.НаименованиеПолное);
		
	КонецЕсли;
	
	Возврат Содержание
	
КонецФункции

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(СтрокаТабличнойЧасти)
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	ПриИзмененииКоличествоЦена(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	ПриИзмененииКоличествоЦена(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПлановаяСтоимостьПриИзменении(Элемент)
	
	ТекущаяСтрока               = Элементы.Услуги.ТекущиеДанные;
	ТекущаяСтрока.СуммаПлановая = ТекущаяСтрока.ПлановаяСтоимость * ТекущаяСтрока.Количество;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ПлановаяСтоимость = 0;
	Иначе
		СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МАТЕРИАЛЫ ЗАКАЗЧИКА

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, СчетУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.МатериалыЗаказчика.Очистить();
		
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстСообщения = НСтр("ru='Укажите контрагента'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.МатериалыЗаказчика.Очистить();
			
	ЗаполнитьПоСпецификацииНаСервере();

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиУслуги(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	
	ЗаполнитьПоОстаткамСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаСчетУчетаПриИзменении(Элемент)
		
	СтрокаТаблицы = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчета);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "МатериалыЗаказчика[" + Элементы.МатериалыЗаказчика.ТекущаяСтрока + "].СчетУчета", "Объект");
		
		СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборМатериалы(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("МатериалыЗаказчика", НСтр("ru='Материалы заказчика'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	Если Объект.МатериалыЗаказчика.Количество() = 0 Тогда
		ЗаполнитьПоСпецификацииНаСервере();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеПоСпецификацииТабличнойЧасти", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Укажите контрагента'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;

	Если Объект.МатериалыЗаказчика.Количество() = 0 Тогда
		ЗаполнитьПоОстаткамНаСервере();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧасти", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги", НСтр("ru='Услуги'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru='Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период.ДатаНачала	= Объект.ДатаНачалаОтчетногоПериода;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияОтчетногоПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
    	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураВыданный");
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураВыданный");

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru='НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru='НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	
	ТекущаяСтрокаДокумента  = Форма.Элементы.Услуги.ТекущаяСтрока;
	ТекущиеДанные = Форма.Объект.Услуги.НайтиПоИдентификатору(ТекущаяСтрокаДокумента);
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "УслугиСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", Форма.Объект.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;


КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость     = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость = НЕ Объект.УчитыватьКПН;

	Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ДатаПодписанияГЗ.ТолькоПросмотр = Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
	Элементы.ДатаПодписанияГЗ.Видимость = НЕ Объект.ОтложитьНачислениеНДС;
	Элементы.ДатаПодписанияПоДаннымРегистра.Видимость = Объект.ОтложитьНачислениеНДС;
	Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Доступность = ЗначениеЗаполнено(Форма.ДатаПодписанияПоДаннымРегистра) ИЛИ Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	Если НЕ Объект.ОтложитьНачислениеНДС Тогда
		Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Форма.СписокРегистрацийПоНДС.Количество() <> 0;
	Иначе
		Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС.Видимость = Истина;
	КонецЕсли;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);

	СформироватьНадписьЦеныИВалюта(Форма);

	ОбновитьИтоги(Форма);
	
	ИзменитьКоманднуюПанельДокумента(Форма);

    // Видимость счетов учета
    Элементы.ГруппаРасчеты.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    
    Элементы.УслугиГруппаСубконтоСчетаДоходовБУ.Видимость       = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.УслугиГруппаСубконтоСчетаСебестоимостиБУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.УслугиГруппаСубконтоСчетаДоходовНУ.Видимость       = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
    Элементы.УслугиГруппаСубконтоСчетаСебестоимостиНУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
	
	СформироватьЗаголовокСчетаУчета(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, ВключатьЗаполненные = Истина)
	
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("ЗаполнятьСпецификацию", Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СведенияОНоменклатуре, , "Содержание"); 
	//есла заполнена услуга, то содержание из услуги 
	Если НЕ  ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураУслуга)Тогда
		СтрокаТабличнойЧасти.Содержание = ПолучитьСодержаниеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре, ВключатьЗаполненные);
	
	Документы.РеализацияУслугПоПереработке.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги");

	ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиНУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта)
		
	Документы.РеализацияУслугПоПереработке.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, ВключатьЗаполненные = Истина)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "МатериалыЗаказчика", СведенияОНоменклатуре, ВключатьЗаполненные);

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документы.РеализацияУслугПоПереработке.ЗаполнитьМатериалыПоПродукции(
		Объект.МатериалыЗаказчика,
		Объект.Услуги.Выгрузить(),
		Объект.Организация,
		Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, "Услуги");

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонок "Всего" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "МатериалыЗаказчика" И ИмяТаблицы <> "Услуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	

	//Если используется механизм вставки строк, то данная колонка будет отсутствовать
	ЕстьСпецификация = (ТаблицаТоваров.Колонки.Найти("Спецификация") <> Неопределено);
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	ДанныеОбъекта = Новый Структура("Дата, Организация,  УчитыватьКПН, УчитыватьНДС, Ссылка, ТипЦен");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	СтрокиДляЗаполненияСчетов = Новый Массив;  	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
				СтруктураОтбора.Вставить("Спецификация", СтрокаТовара.Спецификация);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Услуги" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
				
			КонецЕсли;
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);

			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда 				
				Если СведенияОНоменклатуре.Услуга Тогда 					
					Если ИмяТаблицы = "МатериалыЗаказчика" Тогда 						
						Продолжить; 						
					КонецЕсли;  										
				КонецЕсли;  				
			КонецЕсли;

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ИмяТаблицы = "Услуги" Тогда
				
				УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, НЕ ЭтоВставкаИзБуфера);
				СтрокаТабличнойЧасти.Цена			= 	СтрокаТовара.Цена;
				
				Если ЕстьСпецификация И ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
					СтрокаТабличнойЧасти.Спецификация	= 	СтрокаТовара.Спецификация ;
				КонецЕсли;
				
				Если ЭтоВставкаИзБуфера Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);					
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "МатериалыЗаказчика"  Тогда
				
				МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, НЕ ЭтоВставкаИзБуфера);
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ТекущаяДатаПодписанияДокумента = Объект.ДатаПодписанияГЗ;
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	ИспользоватьЭлектронныеАВР = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР");
	
	Если ИспользоватьЭлектронныеАВР Тогда  		
	 	Элементы.СпособВыпискиАктовВыполненныхРабот.СписокВыбора.Вставить(1, Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ);
	КонецЕсли;

	// Счет-фактура
	Если НЕ Параметры.Ключ.Пустая() Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура");
	
	ДатаПодписанияПоДаннымРегистра = УчетНДСИАкциза.ПолучитьДатуПодписанияПоАктамВыполненныхРабот(Объект.Ссылка);
	ДатаПодписанияПоДаннымРегистраИБ = ДатаПодписанияПоДаннымРегистра;
	
	НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
	  	Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаРасчетов(Объект);
		КонецЕсли;
		
		Если Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
			Объект.ДатаПодписанияГЗ = Объект.Дата;
			ДатаПодписанияПоДаннымРегистра = Объект.Дата;
		КонецЕсли;   	
				
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Иначе 
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ИмяЭлементаДоходов = "СубконтоДоходов";
	ИмяСчетаДоходов 	= "СчетДоходов";
	
	ИмяЭлементаСебестоимости = "СубконтоСписанияСебестоимости";
	ИмяСчетаСебестоимости 	= "СчетСписанияСебестоимости";

	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТЧ.СчетДоходовБУ, СтрокаТЧ, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТЧ.СчетДоходовНУ, СтрокаТЧ, ПоляОбъекта);
		
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТЧ.СчетСписанияСебестоимостиБУ, СтрокаТЧ, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТЧ.СчетСписанияСебестоимостиНУ, СтрокаТЧ, ПоляОбъекта);

		// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
		Префикс = "БУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаДоходов + Префикс + "%Индекс%", "Услуги" + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);	
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаСебестоимости + Префикс +"%Индекс%", ИмяСчетаСебестоимости + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаСебестоимости + Префикс + "%Индекс%", "Услуги" + ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ПараметрыДокумента);	

		Префикс = "НУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаДоходов + Префикс + "%Индекс%", "Услуги" + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);	
		ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТЧ, ИмяЭлементаСебестоимости + Префикс + "%Индекс%", "Услуги" + ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	Если (Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде")) Тогда
		
		Объект.ДатаПодписанияГЗ = Объект.Дата;
		
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПодписанияГЗПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.ДатаПодписанияГЗ, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураРезультатаВыполнения = Неопределено;  
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере(СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныеТабЧасти = Объект.Услуги.Количество() > 0; 
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныеТабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
		И ЕстьЗаполненныеТабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
		И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда
		ТолькоСчетаРасчетов = СтруктураРезультатаВыполнения.Свойство("ТолькоСчетаРасчетов")
		И СтруктураРезультатаВыполнения.ТолькоСчетаРасчетов
		И НЕ ЕстьЗаполненныеТабЧасти;	
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
		
	Объект.Услуги.Очистить();
	Объект.МатериалыЗаказчика.Очистить();
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
		
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, СтруктураРезультатаВыполнения);
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);

	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПерезаполнитьСчетаУчета = ИсходныеДанные.Организация <> Объект.Организация
	                          ИЛИ ИсходныеДанные.Контрагент <> Объект.Контрагент
						      ИЛИ ИсходныеДанные.ДоговорКонтрагента <> Объект.ДоговорКонтрагента;
							  
	Если ПерезаполнитьСчетаУчета Тогда 
		ЕстьЗаполненныетабЧасти = Объект.Услуги.Количество() > 0;
		ТолькоСчетаРасчетов = (ИсходныеДанные.Организация = Объект.Организация) ИЛИ ЕстьЗаполненныетабЧасти;
		Если СтруктураРезультатаВыполнения = Неопределено Тогда
			СтруктураРезультатаВыполнения = Новый Структура;
		КонецЕсли;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов"    , ТолькоСчетаРасчетов);
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоДокументуОснования(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Услуги.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетов = Новый СписокЗначений;
	
	// ТЧ Услуги
	СписокАналитикиСчетов.Добавить("ДоходовБУ"); 	// СчетДоходовБУ
	СписокАналитикиСчетов.Добавить("ДоходовНУ"); 	// СчетДоходовНУ
	СписокАналитикиСчетов.Добавить("СписанияСебестоимостиБУ"); 	// СписанияСебестоимостиБУ
	СписокАналитикиСчетов.Добавить("СписанияСебестоимостиНУ"); 	// СписанияСебестоимостиНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;

	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаПослеИзмененияКонтрагента = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> ТекущийКонтрагент;
	ЗаполнитьСчетаПослеИзмененияДоговора    = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ИсходныйДоговор <> Объект.ДоговорКонтрагента;

	Если (ЗаполнитьСчетаПослеИзмененияКонтрагента ИЛИ ЗаполнитьСчетаПослеИзмененияДоговора) Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения)

	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект);	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
		
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)  И (СтруктураРезультатаВыполнения <> Неопределено)  Тогда
		
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;		
					
	КонецЕсли;
			
	Элементы.Страницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности.Видимость = Объект.ДоговорКонтрагента.ДоговорСовместнойДеятельности;
	
	Если Объект.ДоговорКонтрагента.ДоговорСовместнойДеятельности Тогда 
		ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
		Объект.УчастникиСовместнойДеятельности.Очистить();
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Объект.Сделка = Неопределено;
	Элементы.Сделка.Доступность = РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ТолькоСчетаРасчетов = Ложь)

	Если Объект.Услуги.Количество() > 0 И НЕ ТолькоСчетаРасчетов Тогда
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаРасчетов(Объект);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтандартнаяОбработка)	
	
	ТекущиеДанные     = Элементы.Услуги.ТекущиеДанные;
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, ТекущиеДанные, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата",
			Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;

	Запрос.УстановитьПараметр("Контрагент",  Объект.Контрагент);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто",   ВидыСубконто);

	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделение = "";		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.Счет,
	|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидыСубконто,
	|			Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
	|				И Субконто1 = &Контрагент) КАК ТиповойОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТиповойОстатки.Счет,
	|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто2 КАК Справочник.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Счет КАК СчетУчета,
	|	ДанныеРегистра.Номенклатура,
	|	ДанныеРегистра.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ДанныеРегистра.Количество
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На счете ""%1-%2"" нет остатков!"), 
								ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве.Код,
								ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве.Наименование);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		Объект.МатериалыЗаказчика.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтчетуПроизводстваЗаСмену(Команда)
	
	Отбор = Новый Структура;                                        
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("Отбор",              Отбор);
	
		
	ПараметрыОповещения = Новый Структура();	
	ОписаниеОповещенияоЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораОтчетаПроизводстваЗаСмену", ЭтотОбъект, ПараметрыОповещения);	

	ОткрытьФорму("Документ.ОтчетПроизводстваЗаСмену.Форма.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,ОписаниеОповещенияоЗакрытии,);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораОтчетаПроизводстваЗаСмену (Результат, Параметры) Экспорт
	 //Так как форма открывается в режиме множественного выбора,
	 //то при успешном выборе ее результат - массив
		
	Если ТипЗнч(Результат) <> Тип("Массив") Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьПоОтчетуПроизводстваЗаСменуНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтчетуПроизводстваЗаСменуНаСервере(ОтчетПроизводства)
	
	УслугиПоДаннымОВыпускеПродукции = Документы.РеализацияУслугПоПереработке.УслугиПоДаннымОВыпускеПродукции(Объект, ОтчетПроизводства);
	
	ПереченьНоменклатуры        = ОбщегоНазначения.ВыгрузитьКолонку(УслугиПоДаннымОВыпускеПродукции, "Номенклатура", Истина);
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(ПереченьНоменклатуры, Объект);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация,  УчитыватьКПН, УчитыватьНДС, Ссылка, ТипЦен, СуммаВключаетНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	
	Для Каждого ДанныеНовойСтроки Из УслугиПоДаннымОВыпускеПродукции Цикл
		
		НоваяСтрока = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНовойСтроки);
		
		Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(ДанныеОбъекта);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Структура);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(НоваяСтрока, ДанныеОбъекта.СуммаВключаетНДС);
		
		ЗаполнитьДобавленныеКолонкиТаблицыУслуги(НоваяСтрока, Объект.СуммаВключаетНДС);
		
		ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
		ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
		
		ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
		ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяСтрока.СчетДоходовБУ, НоваяСтрока, ПоляОбъектаСубконтоДоходовБУ);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяСтрока.СчетДоходовНУ, НоваяСтрока, ПоляОбъектаСубконтоДоходовНУ);
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяСтрока.СчетСписанияСебестоимостиБУ, НоваяСтрока, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяСтрока.СчетСписанияСебестоимостиНУ, НоваяСтрока, ПоляОбъектаСубконтоСписанияСебестоимостиНУ);
		
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамСчета(Команда)
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ЗаполнитьПоОстаткамСчетаНаСервере();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиУслуги", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСчетаНаСервере()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата",
		Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Субсчета8120", ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Типовой.ПроизводствоИзДавальческогоСырья));
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТиповойОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Дата,
	|			Счет В (&СубСчета8120),
	|			&ВидСубконтоНоменклатура,
	|			Организация = &Организация) КАК ТиповойОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На счете ""%1-%2"" нет остатков!"),
								ПланыСчетов.Типовой.ПроизводствоИзДавальческогоСырья.Код,
								ПланыСчетов.Типовой.ПроизводствоИзДавальческогоСырья.Наименование);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	Иначе	
		ТаблицаУслуг = РезультатЗапроса.Выгрузить();
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, СуммаВключаетНДС,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ТипЦенПлановойСебестоимости, Реализация, УчитыватьКПН, УчитыватьНДС, Ссылка");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		ДанныеОбъекта.Реализация = Истина;
		
		СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУслуг, "Номенклатура", Истина), ДанныеОбъекта);
		
		Для каждого СтрокаУслуги Из ТаблицаУслуг Цикл
			
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуги);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаУслуги.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОНоменклатуре);
			
			НоваяСтрока.Цена = СведенияОНоменклатуре.Цена;
			
			УслугиНоменклатураПриИзмененииНаСервере(НоваяСтрока, ДанныеОбъекта);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
			Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Структура);
			
			Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			Объект,
			НоваяСтрока,
			"Услуги",
			СведенияОНоменклатуре);
			
			НоваяСтрока.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,
			Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить(), ДанныеОбъекта.Дата,
			ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 1,, ДанныеОбъекта.Организация);
			
			НоваяСтрока.СчетУчетаБУ = ПланыСчетов.Типовой.ПроизводствоИзДавальческогоСырья;
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(НоваяСтрока);
			
			ЗаполнитьДобавленныеКолонкиТаблицыУслуги(НоваяСтрока, Объект.СуммаВключаетНДС);
			
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетСебестоимостиБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1,
								 |СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетСебестоимостиНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	ОткрытьРеквизитыПечатиРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
		
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ТолькоПросмотр",                  ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("Грузополучатель",                 Объект.Грузополучатель);
	СтруктураПараметров.Вставить("АдресДоставки",                   Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",       Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                     Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                      Объект.Контрагент);
	СтруктураПараметров.Вставить("ТипОбъекта",                      "РеализацияУслугПоПереработке");
	СтруктураПараметров.Вставить("ПереченьДокументации",            Объект.ПереченьДокументации);
	СтруктураПараметров.Вставить("ДатаНачалаОтчетногоПериода",      Объект.ДатаНачалаОтчетногоПериода);
	СтруктураПараметров.Вставить("ДатаОкончанияОтчетногоПериода",   Объект.ДатаОкончанияОтчетногоПериода);
	СтруктураПараметров.Вставить("НомерДокументаГЗ",                Объект.НомерДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаДокументаГЗ",                 Объект.ДатаДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаПодписанияГЗ",                Объект.ДатаПодписанияГЗ);
	СтруктураПараметров.Вставить("Дата",                            Объект.Дата);
	СтруктураПараметров.Вставить("СпособВыпискиАктовВыполненныхРабот",       Объект.СпособВыпискиАктовВыполненныхРабот);
	     
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");
	
	СтруктураРеквизитов.Вставить("СчетДоходовБУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ3");
	
	СтруктураРеквизитов.Вставить("СчетДоходовНУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ3");
	
	СтруктураРеквизитов.Вставить("СчетСписанияСебестоимостиБУ");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиБУ1");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиБУ2");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиБУ3");
	
	СтруктураРеквизитов.Вставить("СчетСписанияСебестоимостиНУ");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиНУ1");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиНУ2");
	СтруктураРеквизитов.Вставить("СубконтоСписанияСебестоимостиНУ3");
		
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовБУ", "СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовНУ", "СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ1,СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ1,СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьКоманднуюПанельДокумента(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ") Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботСоздатьЭлектронныйАВР", "Видимость", Истина);
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботВыписатьИсправленныйАВР", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботСоздатьЭлектронныйАВР", "Видимость", Ложь);
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйАктВыполненныхРаботВыписатьИсправленныйАВР", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаМатериалыЗаказчика" Тогда		
		ИмяТаблицы = "МатериалыЗаказчика";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	Если ПараметрыВставки.ИмяТаблицы = "МатериалыЗаказчика" Тогда
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
			
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда			
			СписокСвойств.Добавить("СчетУчета");				
		КонецЕсли	
			
				
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда	
			СписокСвойств.Добавить("Спецификация");
			СписокСвойств.Добавить("СуммаПлановая");
			СписокСвойств.Добавить("ПлановаяСтоимость");
		КонецЕсли;      		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");	
			СписокСвойств.Добавить("СчетУчетаНУ");	
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиБУ");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ3");  
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиНУ");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ3");				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.МатериалыЗаказчикаВставитьСтроки.Доступность					 = Доступность;
	Элементы.МатериалыЗаказчикаКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоСписанияСебестоимостиБУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ");	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ");	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоСписанияСебестоимостиНУПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ");	
КонецПроцедуры

#Область АВР

&НаКлиенте
Процедура СсылкаНаЭлектронныеАВРНажатие(Элемент)
	
	Если СписокЭлектронныхАВР.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Документ.ЭлектронныйАктВыполненныхРабот.Форма.ПросмотрСпискаДокументовЭАВР",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭлектронныхАВР,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПоказатьЗначение( ,СписокЭлектронныхАВР[0].Значение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповщенияАВРНаСервере()
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпискиАктовВыполненныхРаботПриИзменении(Элемент)
	
	СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере();

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СпособВыпискиАктовВыполненныхРаботПриИзмененииНаСервере()
	
	Если Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
		Объект.ДатаПодписанияГЗ = Объект.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
			ДатаПодписанияПоДаннымРегистра = Объект.Дата;
		КонецЕсли;
	Иначе
		Объект.ДатаПодписанияГЗ = Дата(1,1,1);;
	КонецЕсли;      
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры

#Область ОперацияКорректировки

&НаСервере
Процедура ДобавитьКомандуВводаКорректировки()
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ОперацияБух) Тогда
		Возврат
	КонецЕсли;
	
	ИмяКнопкиСоздатьОперацию = "ФормаДокументОперацияКорректировкаСоздатьНаОсновании";
	КнопкаСоздатьОперацию = Элементы.Найти(ИмяКнопкиСоздатьОперацию);
	
	Если КнопкаСоздатьОперацию = Неопределено Тогда
		ГруппаФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
		Если ГруппаФормаСоздатьНаОсновании <> Неопределено Тогда
			ВставитьПередКнопкой = Неопределено;
			ИндексПоследнейКнопки = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Количество() - 1;
			Для ИндексВГруппе = 0 По ИндексПоследнейКнопки Цикл
				ТекущаяКнопка = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Получить(ИндексВГруппе);
				Если ТекущаяКнопка.Имя > ИмяКнопкиСоздатьОперацию Тогда
					ВставитьПередКнопкой = ТекущаяКнопка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			КнопкаСоздатьОперацию = Элементы.Вставить(ИмяКнопкиСоздатьОперацию, Тип("КнопкаФормы"), ГруппаФормаСоздатьНаОсновании, ВставитьПередКнопкой);
			КнопкаСоздатьОперацию.ИмяКоманды = "ВвестиНовуюКорректировку";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовуюКорректировку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФормуОперации();
	Иначе
		ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения("ПослеВопросаОЗаписиПередКорректировкой", ЭтотОбъект);
		ТекстВопроса =
		НСтр("ru='Данные еще не записаны.
		|Выполнение действия ""Операция (Корректировка документа): создать на основании"" возможно только после записи данных
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаписиПередКорректировкой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации()
	
	ПараметрыОперации = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКорректировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокКорректировок.Получить(0).Значение);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Выберите документ корректировки'");
		ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокКорректировок, ЗаголовокФормы);
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокКорректировок(Документ)
	
	МассивКорректировок = Новый Массив;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОперацияБух.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.СторнируемыйДокумент = &Документ
		|	И НЕ ОперацияБух.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &Документ
		|	И НЕ Сторнирование.ПометкаУдаления";
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОперацияБух) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОперацияБух.Ссылка", "ПРЕДСТАВЛЕНИЕ(ОперацияБух.Ссылка)");
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.Сторнирование) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сторнирование.Ссылка", "ПРЕДСТАВЛЕНИЕ(Сторнирование.Ссылка)");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивКорректировок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат МассивКорректировок
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОВведенныхКорректировках()
	
	СписокКорректировок.ЗагрузитьЗначения(ВернутьСписокКорректировок(Объект.Ссылка));
	
	Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость = (СписокКорректировок.Количество() > 0);
	
	Если Не Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость Тогда
		ТекстКорректировки = "";
	ИначеЕсли СписокКорректировок.Количество() = 1 Тогда
		ТекстКорректировки = СписокКорректировок.Получить(0).Значение;
	Иначе
		ТекстКорректировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть список введенных корректировок (%1)'"), СписокКорректировок.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СсылкаНаРегистрацияПрочихОперацийПоНДСНажатие(Элемент)
	
	Если СписокРегистрацийПоНДС.Количество() = 0 Тогда
	
		Если НЕ ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена Дата подписания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'НДС нельзя зарегистрировать на основании документа, помеченного на удаление.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если Объект.Услуги.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена таб. часть Продукция (услуги по переработке).'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПодписанияПоДаннымРегистра");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "";
		Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'НДС нельзя зарегистрировать на основании не записанного документа. Записать документ?'");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли СписокРегистрацийПоНДС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокРегистрацийПоНДС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокРегистрацийПоНДС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииРегистрацииНДС(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать и провести документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере() Экспорт
	
	УчетНДСИАкциза.НайтиДокументРегистрацииНДСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаРегистрацияПрочихОперацийПоНДС, СписокРегистрацийПоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписанияПоДаннымРегистраПриИзменении(Элемент)
	
	Если СписокРегистрацийПоНДС.Количество() = 1
		И ЗначениеЗаполнено(ДатаПодписанияПоДаннымРегистра) Тогда
		
		ДатаРегистрацииНДС = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(СписокРегистрацийПоНДС[0].Значение, "Дата");
		
		Если НачалоДня(ДатаРегистрацииНДС) <> НачалоДня(ДатаПодписанияПоДаннымРегистра) Тогда
			ТекстВопроса = НСтр("ru = 'НДС зарегистрирован <%ДатаРегистрацииНДС%>. Изменена дата подписания, скорректировать дату в документе регистрации НДС?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДатаРегистрацииНДС%", Формат(ДатаРегистрацииНДС, "ДЛФ=ДВ"));
			ДополнительныеПараметры = Новый Структура("Форма, ДатаПодписания", ЭтотОбъект, ДатаПодписанияПоДаннымРегистра);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			Модифицированность = Истина;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриИзмененииДатыПодписанияГЗ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере();
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ДатаПодписанияПоДаннымРегистраПриИзмененииНаСервере()
	
	Отказ = Ложь;
	ОбновитьРегистрациюНДС(Отказ);
	Если Отказ Тогда
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРегистрациюНДС(Отказ)
	
	ДокументРегистрацииНДСОбъект = СписокРегистрацийПоНДС[0].Значение.ПолучитьОбъект();
	ДокументРегистрацииНДСОбъект.Дата = ДатаПодписанияПоДаннымРегистра;
	
	Попытка
		ДокументРегистрацииНДСОбъект.Записать(РежимЗаписиДокумента.Запись);
		НайтиДокументРегистрацииНДСИЗаполнитьСсылкуНаСервере();
	Исключение
		Отказ = Истина;
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ регистрации НДС по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;
	
КонецПроцедуры
