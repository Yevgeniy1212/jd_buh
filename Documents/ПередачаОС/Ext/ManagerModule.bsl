#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияООС) Экспорт

	Если СведенияООС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
		
		СтрокаТабличнойЧасти.СчетДоходовБУ  = СведенияООС.СчетПоложительныхОтклонений;					
		СтрокаТабличнойЧасти.СчетРасходовБУ = СведенияООС.СчетОтрицательныхОтклонений;			
		
		Если НЕ ЗначениеЗаполнено (СтрокаТабличнойЧасти.СчетДоходовБУ)Тогда
			СтрокаТабличнойЧасти.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетДоходовБУ));
		КонецЕсли;	

		Если НЕ ЗначениеЗаполнено (СтрокаТабличнойЧасти.СчетРасходовБУ)Тогда
			СтрокаТабличнойЧасти.СчетРасходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетРасходовБУ));
		КонецЕсли;	
		
		Если ТипЗнч(ДанныеОбъекта) = Тип("ДанныеФормыСтруктура") Тогда 
			ПоляОбъектаСубконтоДоходовБУ  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
			ПоляОбъектаСубконтоДоходовНУ  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
			
			ПоляОбъектаСубконтоРасходовБУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
			ПоляОбъектаСубконтоРасходовНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетРасходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоРасходовБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетРасходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоРасходовНУ);
		КонецЕсли;
		
	Иначе	
		
		СтрокаТабличнойЧасти.СчетДоходовБУ  = СведенияООС.СчетДоходовОтРеализацииБУ;					
		СтрокаТабличнойЧасти.СчетРасходовБУ = СведенияООС.СчетСебестоимостиПриРеализацииБУ;			
		
		СтрокаТабличнойЧасти.СчетДоходовНУ = СведенияООС.СчетДоходовОтРеализацииНУ;					
		
		Если НЕ ЗначениеЗаполнено (СтрокаТабличнойЧасти.СчетДоходовНУ)Тогда
			СтрокаТабличнойЧасти.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетДоходовБУ));
		КонецЕсли;	
		
		СтрокаТабличнойЧасти.СчетРасходовНУ = СведенияООС.СчетСебестоимостиПриРеализацииНУ;				
		
		Если НЕ ЗначениеЗаполнено (СтрокаТабличнойЧасти.СчетРасходовНУ)Тогда
			СтрокаТабличнойЧасти.СчетРасходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетРасходовБУ));
		КонецЕсли;	

		Если ТипЗнч(ДанныеОбъекта) = Тип("ДанныеФормыСтруктура") Тогда 
			ПоляОбъектаСубконтоДоходовБУ  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
			ПоляОбъектаСубконтоДоходовНУ  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
			
			ПоляОбъектаСубконтоРасходовБУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоРасходовБУ1", "СубконтоРасходовБУ2", "СубконтоРасходовБУ3");
			ПоляОбъектаСубконтоРасходовНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоРасходовНУ1", "СубконтоРасходовНУ2", "СубконтоРасходовНУ3");
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетРасходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоРасходовБУ);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетРасходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоРасходовНУ);
		КонецЕсли;
		
	КонецЕсли;

	СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СведенияООС.СчетУчетаНДСПоРеализации;

	ЗаполнитьАналитикуСчета("СчетДоходовБУ", "СубконтоДоходовБУ", СтрокаТабличнойЧасти);
	ЗаполнитьАналитикуСчета("СчетДоходовБУ", "СубконтоДоходовНУ", СтрокаТабличнойЧасти);
	ЗаполнитьАналитикуСчета("СчетРасходовБУ", "СубконтоРасходовБУ", СтрокаТабличнойЧасти);
	ЗаполнитьАналитикуСчета("СчетРасходовНУ", "СубконтоРасходовНУ", СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура ЗаполнитьАналитикуСчета(ИмяСчета, ИмяАналитикиСчета, СтрокаТабличнойЧасти) Экспорт
	
	Для Счетчик = 1  По  3 Цикл			
		
		Если СтрокаТабличнойЧасти[ИмяСчета].ВидыСубконто.Количество() >= Счетчик Тогда		
			// Заполняем значения аналитики ОС
			Если СтрокаТабличнойЧасти[ИмяСчета].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				СтрокаТабличнойЧасти[ИмяАналитикиСчета + Счетчик]= СтрокаТабличнойЧасти.ОсновноеСредство;
			Иначе
				СтрокаТабличнойЧасти[ИмяАналитикиСчета + Счетчик] = Неопределено;	
			КонецЕсли;		
		Иначе
			СтрокаТабличнойЧасти[ИмяАналитикиСчета + Счетчик] = Неопределено;				
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДляСпискаОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт 
	
	СписокОС = Объект.ОС.Выгрузить(,"ОсновноеСредство");
	
	МоментДокумента = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	
	ТЗ = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуОС(Объект.Организация, СписокОС, МоментДокумента, КонецМесяца(Объект.Дата));
	
	ТаблицаАмортизацииБУ = Новый ТаблицаЗначений();

	Если ТЗ.Количество() > 0 Тогда

		// Построение списка ОС, по которым начисляется амортизация, и расчет амортизации по ним для БУ
		СписокОС_НачислениеАмортизацииБУ = Новый Массив();
		
		Для Каждого СтрокаОС Из ТЗ Цикл
			СписокОС_НачислениеАмортизацииБУ.Добавить(СтрокаОС.ОС_БУ);
		КонецЦикла;	
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("Период",  		            ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));		
		ТаблицаРеквизитов.Колонки.Добавить("Организация",  			    Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаРеквизитов.Колонки.Добавить("СтруктурноеПодразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
		ТаблицаРеквизитов.Колонки.Добавить("Объект");
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Период      			 = Объект.Дата;
		НоваяСтрока.Организация 			 = Объект.Организация;
		НоваяСтрока.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		НоваяСтрока.Регистратор = Объект.Ссылка;		
		НоваяСтрока.Объект = Объект.Ссылка;		
		
		Если СписокОС_НачислениеАмортизацииБУ.Количество() > 0 Тогда
			ТаблицаАмортизацииБУ = УчетОС.ПодготовитьТаблицуАмортизацияОСБухРегл(ТаблицаРеквизитов, СписокОС_НачислениеАмортизацииБУ);
		КонецЕсли;   		
		
		Для Каждого Строка Из Объект.ОС Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство, "ОС_БУ");
			
			Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета) Тогда
				
				Если СтрокаТЗ = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> не отражалось в учете по указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> снято с учета в указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
				КонецЕсли;

				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;

			Иначе
				
				Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				СтрокаТаблицаАмортизацииБУ  = ТаблицаАмортизацииБУ.Найти(Строка.ОсновноеСредство, "ОбъектУчета");
				Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБУ = Неопределено, 0, СтрокаТаблицаАмортизацииБУ.Сумма);

				Строка.ОстСтоимостьБУ = Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ;

			КонецЕсли; //Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета)...
 		КонецЦикла;

	Иначе

		ТекстСообщения = НСтр("ru = 'Данные для заполнения стоимости отсутствуют.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
	
	КонецЕсли; //Если ТЗ.Количество() > 0 Тогда...

	ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
	
КонецПроцедуры

// Заполняет счета учета расчетов с контрагентом в шапке документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам 	  = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
		
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		    СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(Объект.Организация, 
																			СтрокаТабличнойЧасти.ОсновноеСредство,Объект.Дата);
	
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Объект, Основание) Экспорт
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		   		
		Объект.ДокументОснование = Основание;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
			Объект.ВидОперации = Перечисления.ВидыОперацийПередачиОС.Реализация;
		КонецЕсли;

		Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
			ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;  	

		Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		Объект.Грузополучатель           = Основание.Контрагент;	 	
		Объект.БанковскийСчетОрганизации = Основание.СчетОрганизации;
		Объект.АдресДоставки			 = Основание.ПунктНазначения;
								
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка);		
		
		Если Объект.ОС.Количество() > 0 Тогда
			ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
			
			Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда 
				Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
				КонецЦикла;
			КонецЕсли;
		
		КонецЕсли;	
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Объект.ДокументОснование = Основание;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
			Объект.ВидОперации = Перечисления.ВидыОперацийПередачиОС.Реализация;
		КонецЕсли;
			
		// Заполним реквизиты шапки по документу основанию.
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
		
		Объект.Грузополучатель = Основание.Контрагент;	 	
		Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Объект.БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
		КонецЕсли;
		Объект.АдресДоставки = Основание.АдресДоставки;
																
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка);
		
		Если Объект.ОС.Количество() > 0 Тогда
			ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
			
			Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда 
				Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;				
	
	КонецЕсли;                       
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// ДА-1 (Акт премки-передачи)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'ДА-1 (Акт приемки-передачи)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 52;
	КонецЕсли;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 73;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 74;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьНакладная,ПечатьДА1";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Инв-8 (Инвентаризационная опись)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьНакладная",
			НСтр("ru = 'Накладная'"),
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПередачаОС.ПФ_MXL_Накладная"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПечатьНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
		
	КонецЕсли;

	// ДА-1 (Акт премки-передачи)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьДА1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьДА1",
			НСтр("ru = 'ДА-1 (Акт приемки-передачи)'"),
			ПечатьДА1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_ДА1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОС.Номер,
	|	ПередачаОС.Дата,
	|	ПередачаОС.ДоговорКонтрагента КАК Основание,
	|	ПередачаОС.Контрагент КАК Получатель,
	|	ПередачаОС.Организация,
	|	ПередачаОС.СтруктурноеПодразделение,
	|	ПередачаОС.Организация КАК Поставщик,
	|	ПередачаОС.СуммаДокумента,
	|	ПередачаОС.ВалютаДокумента,
	|	ПередачаОС.УчитыватьНДС,
	|	ПередачаОС.СуммаВключаетНДС,
	|	ПередачаОС.Ссылка,
	|	ПередачаОС.ДоверенностьНомер,
	|	ПередачаОС.ДоверенностьДата,
	|	ПередачаОС.ДоверенностьВыдана,
	|	ПередачаОС.ДоверенностьЛицо,
	|	ПередачаОС.УдалитьДоверенность
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка В(&Ссылка)
	|АВТОУПОРЯДОЧИВАНИЕ";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОС.ОсновноеСредство КАК ОС,
	|	ПередачаОС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПередачаОС.Сумма) КАК Сумма,
	|	СУММА(ПередачаОС.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(ПередачаОС.НомерСтроки) КАК НомерСтроки,
	|	ПередачаОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПередачаОС.ОсновноеСредство,
	|	ПередачаОС.СтавкаНДС,
	|	ПередачаОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПередачаОС.ПФ_MXL_Накладная", КодЯзыка);

	ТабДокумент = Новый ТабличныйДокумент;

	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ИнвентаризацияОС_ИНВ16";
	
	Пока ШапкаДокумента.Следующий() Цикл

		ОбластьМакетаЗаголовок 	   = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаПоставщик 	   = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакетаПокупатель    = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакетаДоверенность  = Макет.ПолучитьОбласть("Доверенность");
		ОбластьМакетаОснование 	   = Макет.ПолучитьОбласть("Основание");
		ОбластьМакетаШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрока 	   = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтого 		   = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаИтогоНДС 	   = Макет.ПолучитьОбласть("ИтогоНДС");		
		ОбластьМакетаСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакетаПодписи 	   = Макет.ПолучитьОбласть("Подписи");

		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокОС = Неопределено;
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
		
		// Выводим шапку накладной
		
		ТекстРасходнаяНакладная = НСтр("ru = 'Расходная накладная'", КодЯзыка);
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ШапкаДокумента.Ссылка, ТекстРасходнаяНакладная,,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата), "ПолноеНаименование,");
		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
		ТабДокумент.Вывести(ОбластьМакетаПоставщик);
		
		ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ШапкаДокумента.Получатель, ШапкаДокумента.Дата), "ПолноеНаименование,");
		ОбластьМакетаПокупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
		ТабДокумент.Вывести(ОбластьМакетаПокупатель);

		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ШапкаДокумента);
		
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности,ОбластьМакетаДоверенность,,,,,Истина);
		Если ЗначениеЗаполнено(ОбластьМакетаДоверенность.Параметры.Доверенность) Тогда
			ТабДокумент.Вывести(ОбластьМакетаДоверенность); 
		КонецЕсли;
		        		
		Если ЗначениеЗаполнено(ШапкаДокумента.Основание) Тогда 
			ОбластьМакетаОснование.Параметры.Заполнить(ШапкаДокумента);
			ТабДокумент.Вывести(ОбластьМакетаОснование);
		КонецЕсли;
		
		ЕстьСкидки = Ложь;
		
		ВыводитьКоды = Ложь;
		
		ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		
		Сумма    = 0;
		СуммаНДС = 0;

		Пока ВыборкаСтрокОС.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокОС.ОС) Тогда
				ТекстСообщения = НСтр("ru = 'В одной из строк не заполнено значение основного средства - строка при печати пропущена.'");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
		
			ОбластьМакетаСтрока.Параметры.НомерСтроки 	   = ВыборкаСтрокОС.НомерСтроки;
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокОС);
			ОбластьМакетаСтрока.Параметры.Цена       	   = ВыборкаСтрокОС.Сумма;
			ОбластьМакетаСтрока.Параметры.Код        	   = ВыборкаСтрокОС.ОС.Код;
			ОбластьМакетаСтрока.Параметры.ИнвентарныйНомер = УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ВыборкаСтрокОС.ОС, ШапкаДокумента.Организация, ШапкаДокумента.Дата).ИнвентарныйНомер;;
			ОбластьМакетаСтрока.Параметры.Количество 	   = 1;
			ОбластьМакетаСтрока.Параметры.Цена			   = ВыборкаСтрокОС.Сумма;
			ОбластьМакетаСтрока.Параметры.Товар 		   = СокрЛП(ВыборкаСтрокОС.ОС);
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			Сумма    = Сумма    + ВыборкаСтрокОС.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокОС.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакетаИтого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакетаИтого);
		
		// Вывести ИтогоНДС
		Если ШапкаДокумента.УчитыватьНДС Тогда
			ОбластьМакетаИтогоНДС.Параметры.НДС = ?(ШапкаДокумента.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'", КодЯзыка), НСтр("ru = 'Сумма НДС:'", КодЯзыка));
			ОбластьМакетаИтогоНДС.Параметры.ВсегоНДС = СуммаНДС;
			ТабДокумент.Вывести(ОбластьМакетаИтогоНДС); 
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ШапкаДокумента.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакетаСуммаПрописью.Параметры.ИтоговаяСтрока = НСтр("ru = 'Всего наименований '", КодЯзыка) + ВыборкаСтрокОС.Количество()
															+ НСтр("ru = ', на сумму '", КодЯзыка) + ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, ШапкаДокумента.ВалютаДокумента);
		ОбластьМакетаСуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ШапкаДокумента.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаСуммаПрописью);
		
		// Вывести подписи
		ОбластьМакетаПодписи.Параметры.Заполнить(ШапкаДокумента);
		ТабДокумент.Вывести(ОбластьМакетаПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Процедура ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал, ШапкаДокумента, КодЯзыка=Неопределено)

	Если ВыводитьПринял Тогда
		ТекущаяСекция 				   = Макет.ПолучитьОбласть("ОССдал|Принял");
		ТекстПринял = НСтр("ru = 'Принял'", КодЯзыка);
		ТекущаяСекция.Параметры.Принял = ТекстПринял;
		// данная область выводится только один раз
		ВыводитьПринял 	   = Ложь;
		ВыводитьДатаПринял = Истина;
	ИначеЕсли ВыводитьДатаПринял Тогда
		ТекущаяСекция 	   = Макет.ПолучитьОбласть("ПодвалДата|Принял");
		// данная область выводится только один раз
		ВыводитьДатаПринял = Ложь;
		ВыводитьПодвалВерх = Истина;
	ИначеЕсли ВыводитьПодвалВерх Тогда
		ТекущаяСекция 						 = Макет.ПолучитьОбласть("ПодвалВерх|Принял");  		
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ШапкаДокумента);
		ОбщегоНазначенияБК.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ТекущаяСекция,,,"ДоверенностьЛицоВыдана", Истина, ,КодЯзыка);	
		
		// данная область выводится только один раз
		ВыводитьПодвалВерх = Ложь;
		ВыводитьПодвалНиз  = Истина;
	ИначеЕсли ВыводитьПодвалНиз Тогда
		ТекущаяСекция 	  = Макет.ПолучитьОбласть("ПодвалНиз|Принял");
		// данная область выводится только один раз
		ВыводитьПодвалНиз = Ложь;
		ВыведенПодвал 	  = Истина;
	Иначе
		ТекущаяСекция = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Принял");
	КонецЕсли;
	
	ТабДокумент.Присоединить(ТекущаяСекция);

КонецПроцедуры

Функция ПечатьДА1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

    // Варианты заголовков разделов с подписями печатной формы	
    ЗаголовокРазделаКомиссии = Новый Структура();
    ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии'", КодЯзыка));
    ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии'", КодЯзыка));
    
    // запрос для реквизитов шапки 
    Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
    Запрос.Текст = "ВЫБРАТЬ
                   |	ДокументОС.Дата,
                   |	ДокументОС.Номер,
                   |	ДокументОС.Организация,
                   |	ДокументОС.СтруктурноеПодразделение,
                   |	ДокументОС.ДокументОснование,
                   |	ДокументОС.ДокументОснованиеВид,
                   |	ДокументОС.ДокументОснованиеДата,
                   |	ДокументОС.ДокументОснованиеНомер,
                   |	ДокументОС.Контрагент КАК Контрагент,
                   |	ДокументОС.СчетУчетаРасчетовСКонтрагентом,
                   |	ДокументОС.ИнвентаризационнаяКомиссия.(
                   |		Ссылка,
                   |		НомерСтроки,
                   |		ФизЛицо,
                   |		Председатель
                   |	) КАК ИнвентаризационнаяКомиссия,
                   |	ДокументОС.Ссылка,
                   |	ДокументОС.ВалютаДокумента,
                   |	ДокументОС.ДоверенностьЛицо,
                   |	ДокументОС.ДоверенностьНомер,
                   |	ДокументОС.ДоверенностьДата,
                   |	ДокументОС.ДоверенностьВыдана,
                   |	ДокументОС.УдалитьДоверенность,
	               |	ДокументОС.СуммаВключаетНДС
                   |ИЗ
                   |	Документ.ПередачаОС КАК ДокументОС
                   |ГДЕ
                   |	ДокументОС.Ссылка В(&Ссылка)
                   |АВТОУПОРЯДОЧИВАНИЕ";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();

    Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
    
    ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                   |	ДокументОСОС.ОсновноеСредство КАК ОсновноеСредство,
                   |	ВЫРАЗИТЬ(ДокументОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
                   |	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.ЗаводскойНомер, 1, 250) КАК ЗаводскойНомер,
                   |	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.НомерПаспорта, 1, 250) КАК НомерПаспорта,
                   |	ДокументОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
                   |	ДокументОСОС.СтоимостьБУ КАК ПервоначальнаяСтоимость,
                   |	ДокументОСОС.АмортизацияБУ,
                   |	ДокументОСОС.АмортизацияЗаМесяцБУ,
                   |	ДокументОСОС.СчетДоходовБУ,
				   |	ДокументОСОС.Ссылка КАК Ссылка,
				   |	ДокументОСОС.НомерСтроки КАК НомерСтроки,
				   |	ДокументОСОС.СуммаНДС,
				   |	ДокументОСОС.Сумма
				   |ИЗ
				   |	Документ.ПередачаОС.ОС КАК ДокументОСОС
				   |ГДЕ
				   |	ДокументОСОС.Ссылка В (&Ссылка)
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	НомерСтроки
                   |ИТОГИ ПО
                   |	Ссылка
                   |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.Текст = ТекстЗапроса;			   
	ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ДА1");

	Макет.КодЯзыка =  КодЯзыка;
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПередачаОС_ДА1";

	Пока ШапкаДокумента.Следующий() Цикл
		
		// Получаем области макета для вывода в табличный документ
		Шапка             	 	  = Макет.ПолучитьОбласть("Шапка");
		Таблица1		  	 	  = Макет.ПолучитьОбласть("Таблица1");
		СтрокаТаблицы1    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		ЗаголовокТаблицы2 	 	  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
		СтрокаТаблицы2    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
		ИтогоСтрокаТаблицы2	 	  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
		Приказ			  	 	  = Макет.ПолучитьОбласть("Приказ");
		Подвал            	 	  = Макет.ПолучитьОбласть("Подвал");	
		ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
		ОССдал			  	 	  = Макет.ПолучитьОбласть("ОССдал|Сдал");
		ПодвалДатаСдал    	 	  = Макет.ПолучитьОбласть("ПодвалДата|Сдал");
		Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
		ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
		ПустаяСекцияСдал  	 	  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Сдал");
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно сформировать печатную форму ""ДА-1"" документа ""%1"", так как табличная часть ""ОС"" в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШапкаДокумента.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ШапкаДокумента.Ссылка);
			Продолжить;			
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
		
		////////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		
		// Организация-сдатчик
		ПредставлениеОрганизацииСдатчик				    = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
		Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		
		// Организация-получатель
		СведенияОбОрганизацииПолучателе					   = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ШапкаДокумента.Контрагент, ШапкаДокумента.Дата);
		ПредставлениеОрганизацииПолучатель				   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииПолучатель = ПредставлениеОрганизацииПолучатель;
		Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		
		Шапка.Параметры.НомерДок 			   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ДатаДок           	   = Формат(ШапкаДокумента.Дата,"Л=" + КодЯзыка + "; ДЛФ=Д");
		Шапка.Параметры.РасшифровкаПодписиСдал = Руководители.Руководитель;
		Шапка.Параметры.ДолжностьСдал          = Руководители.РуководительДолжность;
		
		ТабДокумент.Вывести(Шапка);
		
		ТабДокумент.Вывести(Таблица1);	
		//Заполняем раздел "Основание"  	
		Если ШапкаДокумента.ДокументОснование <> Неопределено И ЗначениеЗаполнено(ШапкаДокумента.ДокументОснование) Тогда
			
			Если ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				НаименованиеДокОснования = НСтр("ru = 'Счет на оплату покупателю'", КодЯзыка);
			ИначеЕсли ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				НаименованиеДокОснования = НСтр("ru = 'Счет-фактура (выданный)'", КодЯзыка);
			Иначе	
				НаименованиеДокОснования = ШапкаДокумента.ДокументОснование.Метаданные().Синоним;
			КонецЕсли;	
			
			СтрокаТаблицы1.Параметры.НаимДокОсн  = НаименованиеДокОснования;
			СтрокаТаблицы1.Параметры.НомерДокОсн = ШапкаДокумента.ДокументОснование.Номер;
			СтрокаТаблицы1.Параметры.ДатаДокОсн  = ШапкаДокумента.ДокументОснование.Дата;
		КонецЕсли;	
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	
		ТЧОСДляЗапроса = Новый ТаблицаЗначений;
		ТЧОСДляЗапроса.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов(МассивТипов),"ОсновноеСредство");
				
		Если НЕ ВыборкаСтрокОС = Неопределено Тогда
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				Стр = ТЧОСДляЗапроса.Добавить();
				Стр.ОсновноеСредство = ВыборкаСтрокОС.ОсновноеСредство;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыборкаСтрокОС.Сбросить();
		
		МассивОС = ТЧОСДляЗапроса.ВыгрузитьКолонку("ОсновноеСредство");
		
		// Получим список МОЛ на основании списка ОС
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ОсновноеСредство", МассивОС);
		Запрос.УстановитьПараметр("Организация",      ШапкаДокумента.Организация);
		Запрос.УстановитьПараметр("Дата",             ШапкаДокумента.Дата);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
		
		ТаблицаМОЛиОС = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ОС"		   , ТЧОСДляЗапроса);
		Запрос.УстановитьПараметр("Организация", ШапкаДокумента.Организация);
		Запрос.УстановитьПараметр("ДатаДок"    , ШапкаДокумента.Дата);
		Запрос.УстановитьПараметр("массОС"     , МассивОС);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОС.ОсновноеСредство КАК ОсновноеСредство
		               |ПОМЕСТИТЬ ВТ_ОС
		               |ИЗ
		               |	&ОС КАК ОС
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОсновноеСредство
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ОС.ОсновноеСредство КАК ОсновноеСредство,
					   |	ВЫРАЗИТЬ(ВТ_ОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
		               |	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокСлужбыПолезной
		               |ИЗ
		               |	ВТ_ОС КАК ВТ_ОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		               |				&ДатаДок,
		               |				Организация = &Организация
		               |					И ОсновноеСредство В (&массОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		               |		ПО ВТ_ОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		               |				&ДатаДок,
		               |				Организация = &Организация
		               |					И ОсновноеСредство В (&массОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		               |		ПО ВТ_ОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство";
					   
		ТаблицаОСДопДанные = Запрос.Выполнить().Выгрузить();
		
		СчетКт     = "";
		Сдатчик    = ПредставлениеОрганизацииСдатчик; 
		Получатель = ПредставлениеОрганизацииПолучатель;
		СчетДт     = ШапкаДокумента.СчетУчетаРасчетовСКонтрагентом;
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПринятияКУчету 		 = '00010101';
		
		Пока ВыборкаСтрокОС.Следующий() Цикл
						
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы1) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				// Выведем переносимую часть заголовка таблицы	
				ТабДокумент.Вывести(Таблица1);
				
			КонецЕсли;
			
			СтрокаТаблицы1.Параметры.Заполнить(ВыборкаСтрокОС);
			
			НайденнаяСтрока = ТаблицаМОЛиОС.Найти(ВыборкаСтрокОС.ОсновноеСредство, "ОсновноеСредство");
			Если НайденнаяСтрока = Неопределено Тогда
			Иначе
				СтрокаТаблицы1.Параметры.СписокМОЛ = НайденнаяСтрока.МОЛ;
			КонецЕсли;
			
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокОС.НаименованиеОС) Тогда 
				СтрокаТаблицы1.Параметры.НаименованиеОС = ВыборкаСтрокОС.ОсновноеСредство;
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы1);
			
		КонецЦикла;	
		
		ВыборкаСтрокОС.Сбросить();
		
		// выводим вторую часть таблицы
		ЗаголовокТаблицы2.Параметры.Валюта = ШапкаДокумента.ВалютаДокумента;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ЗаголовокТаблицы2);
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПринятияКУчету 		 = '00010101';
		ИтогоСуммаАмортизации	 = 0;
		ИтогоБалансоваяСтоимость = 0;
		ИтогоСтоимостьРеализацииСНДС = 0;
		
		// Выведем строки таблицы и итоги таблицы
		Пока ВыборкаСтрокОС.Следующий() Цикл
					
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				// Выведем заголовок таблицы	
				ТабДокумент.Вывести(ЗаголовокТаблицы2);
			КонецЕсли;
			
			СтрокаТаблицы2.Параметры.Заполнить(ВыборкаСтрокОС);
			
			СтрокаТаблицы2.Параметры.СчетКт				 = ВыборкаСтрокОС.СчетДоходовБУ;
			СтрокаТаблицы2.Параметры.СчетДт				 = СчетДт;
			СуммаАмортизации		                     = ВыборкаСтрокОС.АмортизацияБУ + ВыборкаСтрокОС.АмортизацияЗаМесяцБУ;
			СтрокаТаблицы2.Параметры.СуммаАмортизации	 = СуммаАмортизации;
			СтрокаТаблицы2.Параметры.БалансоваяСтоимость = ВыборкаСтрокОС.ПервоначальнаяСтоимость - СуммаАмортизации;
			СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС = ?(ШапкаДокумента.СуммаВключаетНДС, ВыборкаСтрокОС.Сумма, ВыборкаСтрокОС.Сумма + ВыборкаСтрокОС.СуммаНДС);
			
			НайденнаяСтрока = ТаблицаОСДопДанные.Найти(ВыборкаСтрокОС.ОсновноеСредство, "ОсновноеСредство");
			Если НайденнаяСтрока <> Неопределено Тогда
				СтрокаТаблицы2.Параметры.ИнвентарныйНомер	= НайденнаяСтрока.ИнвентарныйНомер;
				СтрокаТаблицы2.Параметры.СрокСлужбыПолезной = НайденнаяСтрока.СрокСлужбыПолезной;
			КонецЕсли; 
			
			ИтогоСуммаАмортизации								   = ИтогоСуммаАмортизации + СуммаАмортизации;
			ИтогоСтрокаТаблицы2.Параметры.ИтогоСуммаАмортизации    = ИтогоСуммаАмортизации;
			ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
			ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
			ИтогоСтоимостьРеализацииСНДС                           = ИтогоСтоимостьРеализацииСНДС + СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС;
			ИтогоСтрокаТаблицы2.Параметры.ИтогоСтоимостьРеализацииСНДС = ИтогоСтоимостьРеализацииСНДС;
		
			ТабДокумент.Вывести(СтрокаТаблицы2);  
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);
		
		//формируем список основных средств через запятую
		СписокОС 			 = "";
		СписокНаименованийОС = ТаблицаОСДопДанные.Скопировать();
		СписокНаименованийОС.Свернуть("НаименованиеОС");
		Для Каждого СтрокаОС ИЗ СписокНаименованийОС Цикл
			Если СписокОС = "" Тогда
				СписокОС = СокрЛП(СтрокаОС.НаименованиеОС);
			Иначе
				СписокОС = СписокОС + ", " + СокрЛП(СтрокаОС.НаименованиеОС);
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеВид) Тогда
			Если ШапкаДокумента.ДокументОснованиеВид = "приказа" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'приказа'", КодЯзыка);
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "постановления" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'постановления'", КодЯзыка);
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "распоряжения" Тогда
				Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'распоряжения'", КодЯзыка);
			КонецЕсли;	
		Иначе
			Приказ.Параметры.ДокументОснованиеВид = НСтр("ru = 'приказа (распоряжения)'", КодЯзыка);
		КонецЕсли;
		
		Стр 									= """_____"""+"________________________ 20_____"+НСтр("ru = 'года'", КодЯзыка);
		Приказ.Параметры.ДокументОснованиеДата 	= ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеДата), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ШапкаДокумента.ДокументОснованиеДата, "Л=" + КодЯзыка + "; ДФ=дд ММММ гггг")) , Стр);
		Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеНомер),ШапкаДокумента.ДокументОснованиеНомер,"__________ ");
		Приказ.Параметры.НаименованиеОбъекта 	= СписокОС;
		ТабДокумент.Вывести(Приказ);
		
		ТабДокумент.Вывести(Подвал);

		//выводим комиссию
		
		//сначала председатель 
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.Дата);
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		Иначе
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = "";
			Комиссия.Параметры.РасшифровкаПодписи       = "";
		КонецЕсли;
		
		ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокЧленовКомиссии, ШапкаДокумента.Дата);
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ТаблицаИнвентаризационнаяКомиссия.Количество() < 1 Тогда
			ВыводитьЗаголовок = Истина;	
			
			Для Итератор = 1 По 3 Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				"");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		Иначе
			// Сначала выведем членов комиссии из выборки
			Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				"");
				Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ШапкаОборотнойСтороны);
		
		
		ТаблицаМОЛ = ТаблицаМОЛиОС;
		
		ТаблицаМОЛ.Свернуть("МОЛ");
		
		//список МОЛ
		СписокМОЛ = ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ");
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ, ШапкаДокумента.Дата);
		
		ВыводитьОС		   = Истина;
		ВыводитьПринял	   = Истина;
		ВыводитьДатаПринял = Ложь;
		
		ВыводитьПодвалВерх = Ложь;
		ВыводитьПодвалНиз  = Ложь;
		
		ВыведенДатаСдал = Ложь;
		ВыведенПодвал	= Ложь;

		
		Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОССдал) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьОС = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			ОССдал.Параметры.ОбъектОсновныхСредств = ?(ВыводитьОС, НСтр("ru = 'Долгосрочный актив'", КодЯзыка), "");
			ОССдал.Параметры.Сдал				   = ?(ВыводитьОС, НСтр("ru = 'Сдал'", КодЯзыка), "");
			
			ОССдал.Параметры.Должность          = СтрокаМОЛ.Должность;
			ОССдал.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
			
			ТабДокумент.Вывести(ОССдал);
			
			ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал, ШапкаДокумента, КодЯзыка);
			
			ВыводитьОС = Ложь;
			
		КонецЦикла;

		Пока НЕ ВыведенПодвал Цикл
			Если НЕ ВыведенДатаСдал Тогда
				ТабДокумент.Вывести(ПодвалДатаСдал);
				ВыведенДатаСдал = Истина;
			Иначе
				ТабДокумент.Вывести(ПустаяСекцияСдал);
			КонецЕсли;
			ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал, ШапкаДокумента, КодЯзыка);
		КонецЦикла;
		
		// Выведем подпись бухгалтера
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиСдал = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);
	
	КонецЦикла;

	Возврат ТабДокумент;
    
КонецФункции // ПечатьДА1()

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПередачаОС КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.ОсновноеСредство КАК Товар,
	|	ОбрабатываемаяТаблица.ОсновноеСредство.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.Сумма*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.Сумма-(ОбрабатываемаяТаблица.СуммаНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"					   , ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимОС"	               ,НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("НачалоПериода"             ,ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Период",	ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Организация",	ДокументСсылка.Организация);
	                                	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;           	
		
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	//  		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);	
	ВедетсяАналитическийУчетОСПоМОЛ 				= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитическийУчетОСПоПодразделениям 		= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
	
	Налогоплательщик       = Реквизиты.Организация;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");	

	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
		
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
	ТаблицаРеквизитыРеализация = ПараметрыПроведения.Реквизиты.Скопировать();
	ПараметрыПроведения.Вставить("РеквизитыРеализация", ТаблицаРеквизитыРеализация);               	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");	
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
		ПараметрыПроведения.РеквизитыРеализация.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");	
	КонецЕсли;
	          	
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СубконтоВА",		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("Период",	Реквизиты.Период);
	Запрос.УстановитьПараметр("СчетУчетаВА",	ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями",ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхразницБалансовымМетодом",ВедениеУчетаВременныхразницБалансовымМетодом);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);  	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);	

	
	НомераТаблиц = Новый Структура;
	Запрос.Текст =   ТекстЗапросаПередачаОС(НомераТаблиц)
					+ ТекстЗапросаРеализацияОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписанныеОС(НомераТаблиц)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		 			+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияОС(НомераТаблиц)
					+ ТекстЗапросаСобытияОС(НомераТаблиц)
					+ ТекстЗапросаСоставОС(НомераТаблиц)					
					+ ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
					+ ТекстЗапросаПоМестнымНалогам(НомераТаблиц)
					+ ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц,ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеСтоимостиОСНУ(НомераТаблиц,ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТаблицыПереоценкиОС(НомераТаблиц)
					+ УчетОС.ТекстЗапросаРаспределениеАмортизацииПоНаправлениямРегл(НомераТаблиц)
					+ ТекстЗапросаПередачаПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	         	
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитическийУчетОСПоМОЛ				   , "ВедетсяАналитическийУчетОСПоМОЛ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитическийУчетОСПоПодразделениям	   , "ВедетсяАналитическийУчетОСПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом   , "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  , "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("СоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьОС,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПередачаОС.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПередачаОС.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПередачаОС"" КАК ВидДокумента,
	|	&СинонимОС КАК ИмяСписка,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоМОЛ,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета) КАК Состояние,
	|	Реквизиты.Номер,
	|	Реквизиты.СобытиеОС,
	|	НЕОПРЕДЕЛЕНО КАК ВидРегламентнойОперации,
	|	"""" КАК Содержание,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	ВЫРАЗИТЬ(Реквизиты.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплатуПокупателю
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПередачаОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Ссылка КАК Объект,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Организация,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Сделка,
	|	СоставДокумента.ЕстьУчастникиСовместнойДеятельности,
	|	СоставДокумента.ЕстьОС,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Состояние,
	|	Реквизиты.ИмяСписка,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Номер,
	|	Реквизиты.СобытиеОС,
	|	Реквизиты.ВидРегламентнойОперации,
	|	Реквизиты.Содержание,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям,
	|	Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ,
	|	Реквизиты.Налогоплательщик,
	|	ЕСТЬNULL(Реквизиты.СчетНаОплатуПокупателю, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)) КАК СчетНаОплатуПокупателю,
	|	НЕ Реквизиты.СчетНаОплатуПокупателю ЕСТЬ NULL КАК ЕстьСчетНаОплатуПокупателю
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	СуммыТаблицыНМА = Результат[НомераТаблиц["СуммыТаблицыОС"]].Выгрузить();
	УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыНМА, Реквизиты);
	Запрос.УстановитьПараметр("СуммыТаблицыОС", СуммыТаблицыНМА);
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты);
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаОС", "ПОМЕСТИТЬ ВременнаяТаблицаОС");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПередачаОС.Ссылка = &Ссылка", "ПередачаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|НомерСтроки");
	НомераТаблиц.Вставить("СуммыТаблицыОС", НомераТаблиц.Количество());
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СуммаВзаиморасчетов,
	|	ВременнаяТаблицаОС.СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаОС.Сумма,
	|	ВременнаяТаблицаОС.СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыОС.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыОС
	|ИЗ
	|	&СуммыТаблицыОС КАК СуммыТаблицыОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.ОсновноеСредство,
	|	ВременнаяТаблицаОС.Ссылка,
	|	ВременнаяТаблицаОС.Код,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДС,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СчетДоходовБУ,
	|	ВременнаяТаблицаОС.СубконтоДоходовБУ1,
	|	ВременнаяТаблицаОС.СубконтоДоходовБУ2,
	|	ВременнаяТаблицаОС.СубконтоДоходовБУ3,
	|	ВременнаяТаблицаОС.СчетРасходовБУ,
	|	ВременнаяТаблицаОС.СубконтоРасходовБУ1,
	|	ВременнаяТаблицаОС.СубконтоРасходовБУ2,
	|	ВременнаяТаблицаОС.СубконтоРасходовБУ3,
	|	ВременнаяТаблицаОС.СчетУчетаНДС,
	|	ВременнаяТаблицаОС.НДСВидОперацииРеализации,
	|	ВременнаяТаблицаОС.СубконтоДоходовНУ1,
	|	ВременнаяТаблицаОС.СубконтоДоходовНУ2,
	|	ВременнаяТаблицаОС.СубконтоДоходовНУ3,
	|	ВременнаяТаблицаОС.СубконтоРасходовНУ1,
	|	ВременнаяТаблицаОС.СубконтоРасходовНУ2,
	|	ВременнаяТаблицаОС.СубконтоРасходовНУ3,
	|	ВременнаяТаблицаОС.СчетДоходовНУ,
	|	ВременнаяТаблицаОС.СчетРасходовНУ,
	|	ВременнаяТаблицаОС.АмортизацияБУ,
	|	ВременнаяТаблицаОС.АмортизацияЗаМесяцБУ,
	|	ВременнаяТаблицаОС.СтоимостьБУ, ВременнаяТаблицаОС.ПодразделениеОрганизации, ВременнаяТаблицаОС.МОЛОрганизации,
	|	ВременнаяТаблицаОС.Количество
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыОС КАК СуммыТаблицыОС
	|		ПО ВременнаяТаблицаОС.НомерСтроки = СуммыТаблицыОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВТТаблицаОС", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПередачаОС.НомерСтроки КАК НомерСтроки,
		|	ПередачаОС.Ссылка КАК Ссылка,
		|	ПередачаОС.ОсновноеСредство,
		|	ПередачаОС.ОсновноеСредство.Код КАК Код,
		|	ПередачаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ПередачаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ПередачаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ПередачаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ПередачаОС.СуммаНДС,
		|	ПередачаОС.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ПередачаОС.СтавкаНДС,
		|	ПередачаОС.СчетДоходовБУ,
		|	ПередачаОС.СубконтоДоходовБУ1,
		|	ПередачаОС.СубконтоДоходовБУ2,
		|	ПередачаОС.СубконтоДоходовБУ3,
		|	ПередачаОС.СчетРасходовБУ,
		|	ПередачаОС.СубконтоРасходовБУ1,
		|	ПередачаОС.СубконтоРасходовБУ2,
		|	ПередачаОС.СубконтоРасходовБУ3,
		|	ПередачаОС.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
		|	ПередачаОС.НДСВидОперацииРеализации,
		|	ПередачаОС.СубконтоДоходовНУ1,
		|	ПередачаОС.СубконтоДоходовНУ2,
		|	ПередачаОС.СубконтоДоходовНУ3,
		|	ПередачаОС.СубконтоРасходовНУ1,
		|	ПередачаОС.СубконтоРасходовНУ2,
		|	ПередачаОС.СубконтоРасходовНУ3,
		|	ПередачаОС.СчетДоходовНУ,
		|	ПередачаОС.СчетРасходовНУ,
		|	ПередачаОС.АмортизацияБУ,
		|	ПередачаОС.АмортизацияЗаМесяцБУ,
		|	ПередачаОС.СтоимостьБУ
		|ПОМЕСТИТЬ ВТ_ТаблицаОС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПередачаОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПередачаОС.НомерСтроки КАК НомерСтроки,
		|	ПередачаОС.Ссылка КАК Ссылка,
		|	ПередачаОС.ОсновноеСредство,
		|	ПередачаОС.Код КАК Код,
		|	ПередачаОС.Сумма,
		|	ПередачаОС.СуммаВзаиморасчетов,
		|	ПередачаОС.СуммаНДС,
		|	ПередачаОС.СуммаНДСВзаиморасчетов,
		|	ПередачаОС.СтавкаНДС,
		|	ПередачаОС.СчетДоходовБУ,
		|	ПередачаОС.СубконтоДоходовБУ1,
		|	ПередачаОС.СубконтоДоходовБУ2,
		|	ПередачаОС.СубконтоДоходовБУ3,
		|	ПередачаОС.СчетРасходовБУ,
		|	ПередачаОС.СубконтоРасходовБУ1,
		|	ПередачаОС.СубконтоРасходовБУ2,
		|	ПередачаОС.СубконтоРасходовБУ3,
		|	ПередачаОС.СчетУчетаНДС,
		|	ПередачаОС.НДСВидОперацииРеализации,
		|	ПередачаОС.СубконтоДоходовНУ1,
		|	ПередачаОС.СубконтоДоходовНУ2,
		|	ПередачаОС.СубконтоДоходовНУ3,
		|	ПередачаОС.СубконтоРасходовНУ1,
		|	ПередачаОС.СубконтоРасходовНУ2,
		|	ПередачаОС.СубконтоРасходовНУ3,
		|	ПередачаОС.СчетДоходовНУ,
		|	ПередачаОС.СчетРасходовНУ,
		|	ПередачаОС.АмортизацияБУ,
		|	ПередачаОС.АмортизацияЗаМесяцБУ,
		|	ПередачаОС.СтоимостьБУ,
		|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛОрганизации,
		|	МестонахождениеОССрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
		|	1 КАК Количество
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	ВТ_ТаблицаОС КАК ПередачаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВТ_ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОССрезПоследних
		|		ПО ПередачаОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();		
	КонецЕсли;
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПередачаОС.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаРеализацияОС", НомераТаблиц.Количество());	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""ОС"" КАК ИмяСписка,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	ТаблицаОС.ОсновноеСредство КАК Номенклатура,
	               |	0 КАК Стоимость,
	               |	1 КАК Количество,
	               |	ТаблицаОС.Сумма КАК Сумма,
	               |	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	               |	0 КАК СуммаАкциза,
	               |	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	               |	ТаблицаОС.СуммаНДС КАК СуммаАкцизаВзаиморасчетов,
	               |	ТаблицаОС.СчетДоходовБУ КАК СчетДоходовБУ,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчета,
	               |	ТаблицаОС.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	               |	ТаблицаОС.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	               |	ТаблицаОС.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	               |	ТаблицаОС.СчетДоходовНУ КАК СчетДоходовНУ,
	               |	ТаблицаОС.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	               |	ТаблицаОС.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	               |	ТаблицаОС.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	               |	ТаблицаОС.СчетРасходовБУ КАК СчетЗатратБУ,
	               |	ТаблицаОС.СубконтоРасходовБУ1 КАК СубконтоЗатратБУ1,
	               |	ТаблицаОС.СубконтоРасходовБУ2 КАК СубконтоЗатратБУ2,
	               |	ТаблицаОС.СубконтоРасходовБУ3 КАК СубконтоЗатратБУ3,
	               |	ТаблицаОС.СчетРасходовНУ КАК СчетЗатратНУ,
	               |	ТаблицаОС.СубконтоРасходовНУ1 КАК СубконтоЗатратНУ1,
	               |	ТаблицаОС.СубконтоРасходовНУ2 КАК СубконтоЗатратНУ2,
	               |	ТаблицаОС.СубконтоРасходовНУ3 КАК СубконтоЗатратНУ3,
	               |	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	НЕОПРЕДЕЛЕНО КАК Склад,
	               |	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	               |	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	               |	Реквизиты.Контрагент КАК КорСубконто1,
	               |	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	               |	Реквизиты.Ссылка КАК КорСубконто3,
	               |	ЛОЖЬ КАК ЭтоУслуга
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)";			
				   
				   
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПередачаОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыСтоимостьОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПередачаОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыДляИзмененияСостояний", НомераТаблиц.Количество()); 	
	
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	Реквизиты.Ссылка КАК Регистратор,
	                |	Реквизиты.Дата КАК Период,
	                |	Реквизиты.ВалютаВзаиморасчетов,
	                |	Реквизиты.ВидОперации,
	                |	Реквизиты.Организация,
	                |	Реквизиты.Контрагент,
	                |	Реквизиты.ДоговорКонтрагента,
	                |	Реквизиты.СтруктурноеПодразделение,
	                |	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	                |	Реквизиты.ВидУчетаНУ,
	                |	ВЫБОР
	                |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению)
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ЭтоПередачаСтруктурномуПодразделению,
	                |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	                |	&ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	                |	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом
	                |ИЗ
	                |	Реквизиты КАК Реквизиты
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
	                |	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	                |	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
	                |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
	                |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
	                |	ВЫБОР
	                |		КОГДА НЕ ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ПризнакОтдельногоУчетаФА,
	                |	ВЫБОР
	                |		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ПризнакФА
	                |ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	                |ИЗ
	                |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	                |			&Период,
	                |			Организация = &Организация
	                |				И ФиксированныйАктив В
	                |					(ВЫБРАТЬ
	                |						ТаблицаОС.ОсновноеСредство
	                |					ИЗ
	                |						ТаблицаОС КАК ТаблицаОС)) КАК ОбъектыНалоговогоУчетаФА
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	                |				&Период,
	                |				Организация = &Организация
	                |					И ФиксированныйАктив В
	                |						(ВЫБРАТЬ
	                |							ТаблицаОС.ОсновноеСредство
	                |						ИЗ
	                |							ТаблицаОС КАК ТаблицаОС)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	                |		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
	                |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	                |			И (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету))
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
					|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	                |	СчетаБУ.СчетУчетаБУ КАК СчетКт,
	                |	СчетаБУ.СчетНачисленияАмортизацииБУ КАК СчетДт,
	                |	ТаблицаОС.СчетРасходовБУ КАК СчетРасходовБУ,
	                |	ТаблицаОС.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	                |	ТаблицаОС.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	                |	ТаблицаОС.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3,
	                |	ТаблицаОС.СчетРасходовНУ КАК СчетРасходовНУ,
	                |	ТаблицаОС.СубконтоРасходовНУ1 КАК СубконтоРасходовНУ1,
	                |	ТаблицаОС.СубконтоРасходовНУ2 КАК СубконтоРасходовНУ2,
	                |	ТаблицаОС.СубконтоРасходовНУ3 КАК СубконтоРасходовНУ3,
	                |	ТаблицаОС.СчетДоходовНУ КАК СчетДоходовНУ,
	                |	ТаблицаОС.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	                |	ТаблицаОС.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	                |	ТаблицаОС.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	                |	ТаблицаОС.Сумма КАК СуммаБезНДС,
	                |	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	                |	ВЫБОР
	                |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению)
	                |			ТОГДА Реквизиты.СчетУчетаРасчетовСКонтрагентом
	                |		ИНАЧЕ ТаблицаОС.СчетРасходовБУ
	                |	КОНЕЦ КАК КорСчет,
	                |	ВЫБОР
	                |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению)
	                |			ТОГДА Реквизиты.Контрагент
	                |		ИНАЧЕ ТаблицаОС.СубконтоРасходовБУ1
	                |	КОНЕЦ КАК КорСубконто1,
	                |	ВЫБОР
	                |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению)
	                |			ТОГДА Реквизиты.ДоговорКонтрагента
	                |		ИНАЧЕ ТаблицаОС.СубконтоРасходовБУ2
	                |	КОНЕЦ КАК КорСубконто2,
	                |	ВЫБОР
	                |		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению)
	                |			ТОГДА Реквизиты.Ссылка
	                |		ИНАЧЕ ТаблицаОС.СубконтоРасходовБУ3
	                |	КОНЕЦ КАК КорСубконто3,
	                |	ЛОЖЬ КАК ЭтоУслуга,
	                |	ТаблицаОС.МОЛОрганизации КАК ТекущееМОЛ,
	                |	ТаблицаОС.ПодразделениеОрганизации КАК ТекущееПодразделение,
	                |	ЕСТЬNULL(ОбъектыНалоговогоУчетаФА.ПризнакФА, ЛОЖЬ) КАК ПризнакФА,
	                |	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	                |	ТаблицаОС.АмортизацияБУ КАК АмортизацияБУ,
	                |	ТаблицаОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ,
	                |	0 КАК СтоимостьНУ
	                |ИЗ
	                |	ТаблицаОС КАК ТаблицаОС
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	                |		ПО (ИСТИНА)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	                |				&Период,
	                |				Организация = &Организация
	                |					И ОсновноеСредство В
	                |						(ВЫБРАТЬ
	                |							ТаблицаОС.ОсновноеСредство
	                |						ИЗ
	                |							ТаблицаОС КАК ТаблицаОС)) КАК СчетаБУ
	                |		ПО (СчетаБУ.ОсновноеСредство = ТаблицаОС.ОсновноеСредство)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	                |		ПО ТаблицаОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТаблицаОС.Ссылка КАК Регистратор,
	                |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	                |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	                |	ТаблицаОС.АмортизацияБУ + ТаблицаОС.АмортизацияЗаМесяцБУ КАК СуммаАмортизации
	                |ИЗ
	                |	ТаблицаОС КАК ТаблицаОС
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерСтроки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Реквизиты.Дата КАК Период,
	                |	Реквизиты.Номер КАК Номер,
	                |	Реквизиты.Организация КАК Организация,
	                |	&ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	                |	Реквизиты.Ссылка КАК Регистратор,
	                |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                |	Реквизиты.СобытиеОС КАК СобытиеОС
	                |ИЗ
	                |	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписанныеОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСписанныеОС", НомераТаблиц.Количество());
		
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	&СинонимОС КАК ИмяСписка,
	               |	ТаблицаОС.СтоимостьБУ - ТаблицаОС.АмортизацияБУ - ТаблицаОС.АмортизацияЗаМесяцБУ КАК СуммаСписания
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК Сумма
	|	ГДЕ
	|		ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОС.СуммаВзаиморасчетов + ТаблицаОС.СуммаНДСВзаиморасчетов,
	|		ТаблицаОС.Сумма + ТаблицаОС.СуммаНДС
	|	ИЗ
	|		ТаблицаОС КАК ТаблицаОС) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	""ОСНДС"" КАК ИмяСписка,
		               |	&СинонимОС КАК СинонимСписка,
		               |	ТаблицаОС.НомерСтроки,
		               |	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		               |	ТаблицаОС.Сумма КАК СуммаБезНДС,
		               |	ТаблицаОС.Сумма КАК ОборотПоРеализации,
		               |	ТаблицаОС.СуммаНДС КАК СуммаНДС,
		               |	0 КАК СуммаАкциза,
		               |	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		               |	0 КАК СуммаАкцизаВал,
		               |	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
		               |	0 КАК СтавкаАкциза,
		               |	ТаблицаОС.НДСВидОперацииРеализации КАК ВидОперацииРеализации,
		               |	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		               |	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК Счет,
		               |	Реквизиты.Контрагент КАК Субконто1,
		               |	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		               |	Реквизиты.Ссылка КАК Субконто3,
		               |	ТаблицаОС.СчетУчетаНДС КАК КорСчет,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		               |	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		               |	&СодержаниеВыделенНДС КАК Содержание,
		               |	ЛОЖЬ КАК ЭтоАкциз,
		               |	0 КАК Количество,
		               |	0 КАК КоэффициентРасчетаОблагаемойБазыАкциза,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС
		               |ИЗ
		               |	ТаблицаОС КАК ТаблицаОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               |		ПО (ИСТИНА)
		               |ГДЕ
		               |	Реквизиты.УчитыватьНДС
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
				
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());
					
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияОС(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСостоянияОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета) КАК СостояниеОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСобытияОС(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаСобытияОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,	
	|	0 КАК СуммаЗатратБУ
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
		
	ТекстЗапроса = "
				   |ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство,
	               |	ЛОЖЬ КАК НачислятьАмортизацию
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТаблицаОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСоставОС(НомераТаблиц)
	НомераТаблиц.Вставить("ТаблицаСоставОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СоставОС.ОсновноеСредство,
	               |	СоставОС.ВСоставеОС,
				   |	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) КАК СостояниеВСоставеОС				   
	               |ИЗ
	               |	РегистрСведений.СоставОС.СрезПоследних(
	               |		&Период,
	               |		ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство Из ТаблицаОС)
	               |			И СостояниеВСоставеОС = Значение(Перечисление.ВидыСостоянийВСоставеОС.ВключеноВСостав)) КАК СоставОС";
				   
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции
			   
Функция ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда		
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", Неопределено);		
	Иначе
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация,
		               	|	ОбъектыНалоговогоУчетаФА.ОсновноеСредство КАК ФиксированныйАктив,
		               	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
		               	|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
		               	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.Выбыл) КАК СостояниеФиксированногоАктива
		               	|ИЗ
		               	|	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
		               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               	|		ПО (ИСТИНА)
		               	|ГДЕ
		               	|	ОбъектыНалоговогоУчетаФА.ПризнакФА"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц,ПараметрыПроведения,Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда		
		ПараметрыПроведения.Вставить("ТаблицаФАУчитываемыеОтдельно", Неопределено);		
	Иначе  
		НомераТаблиц.Вставить("ТаблицаФАУчитываемыеОтдельно", НомераТаблиц.Количество());		
		
		ТекстЗапроса = "ВЫБРАТЬ
	                |	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив,
	                |	ОбъектыНалоговогоУчетаФА.ВидЛьготыФА,
	                |	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.Выбытие) КАК Событие
	                |ИЗ
	                |	ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	                |ГДЕ
	                |	ОбъектыНалоговогоУчетаФА.ПризнакФА
	                |	И ОбъектыНалоговогоУчетаФА.ПризнакОтдельногоУчетаФА"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПоМестнымНалогам(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаОбъектыИмущественногоНалога", НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаОбъектыТранспортногоНалога", НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаОбъектыЗемельногоНалога", НомераТаблиц.Количество());		
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ЛОЖЬ КАК НачислятьНалог,
	|	Реквизиты.Организация КАК Местонахождение,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога
	|ИЗ
	|	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	|			&Период,
	|			ОбъектНалогообложения В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)
	|				И Организация = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ЛОЖЬ КАК НачислятьНалог,
	|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|	Реквизиты.Организация КАК Местонахождение
	|ИЗ
	|	РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	|			&Период,
	|			ОбъектНалогообложения В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)
	|				И Организация = &Организация) КАК ОбъектыТранспортногоНалогаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ЛОЖЬ КАК НачислятьНалог,
	|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	Реквизиты.Организация КАК Местонахождение
	|ИЗ
	|	РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	|			&Период,
	|			ОбъектНалогообложения В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)
	|				И Организация = &Организация) КАК ОбъектыЗемельногоНалогаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеСтоимостиОСНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ПараметрыПроведения.Вставить("ТаблицаСтоимостьОСНУ", Неопределено);
		Возврат "";
	Иначе  		
		НомераТаблиц.Вставить("ТаблицаСтоимостьОСНУ", НомераТаблиц.Количество());
		
		ТекстЗапроса =  "ВЫБРАТЬ
		                |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		                |	СтоимостьВА_НУ.Счет КАК СчетНУ,
		                |	ЕСТЬNULL(СтоимостьВА_НУ.СуммаОстатокДт, 0) КАК СтоимостьНУ,
		                |	СтоимостьВА_НУ.ВидУчета КАК ВидУчетаНУ,
		                |	ЕСТЬNULL(ОбъектыНалоговогоУчетаФА.ПризнакФА, ЛОЖЬ) КАК ПризнакФА,
		                |	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
		                |	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,
		                |	ОбъектыНалоговогоУчетаФА.ВидЛьготыФА КАК ВидЛьготыФА,
		                |	ОбъектыНалоговогоУчетаФА.ПризнакОтдельногоУчетаФА,
		                |	ТаблицаОС.СчетДоходовНУ,
		                |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		                |	ТаблицаОС.СубконтоДоходовНУ1,
		                |	ТаблицаОС.СубконтоДоходовНУ2,
		                |	ТаблицаОС.СубконтоДоходовНУ3,
		                |	ТаблицаОС.СчетРасходовНУ,
		                |	ТаблицаОС.СубконтоРасходовНУ1,
		                |	ТаблицаОС.СубконтоРасходовНУ2,
		                |	ТаблицаОС.СубконтоРасходовНУ3
		                |ИЗ
		                |	РегистрБухгалтерии.Налоговый.Остатки(
		                |			&Период,
		                |			Счет В ИЕРАРХИИ (&СчетУчетаВА),
		                |			&СубконтоВА,
		                |			Организация = &Организация
		                |				И Субконто1 В
		                |					(ВЫБРАТЬ
		                |						ТаблицаОС.ОсновноеСредство
		                |					ИЗ
		                |						ТаблицаОС)) КАК СтоимостьВА_НУ
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		                |		ПО (ТаблицаОС.ОсновноеСредство = СтоимостьВА_НУ.Субконто1)
		                |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
		                |		ПО СтоимостьВА_НУ.Субконто1 = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	ТаблицаОС.НомерСтроки" 
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		Возврат  ТекстЗапроса;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаТаблицыПереоценкиОС(НомераТаблиц)
			
	НомераТаблиц.Вставить("ТаблицаПереоценкиВА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПереоценкиВАРегистр", НомераТаблиц.Количество());
	 	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто1 КАК СубконтоДт1,
	               |	ИСТИНА КАК ПереоценкаНаСчетах,
	               |	ТиповойОстатки.СуммаОстатокКт КАК Сумма,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода) КАК СчетКт,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств) КАК СчетДт,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств) КАК СубконтоДт2
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&Период,
	               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств),
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В
	               |					(ВЫБРАТЬ
	               |						ТаблицаОС.ОсновноеСредство
	               |					ИЗ
	               |						ТаблицаОС)) КАК ТиповойОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки КАК ДокументПереоценки,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток КАК СуммаПереоценкиСтоимости,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток КАК СуммаПереоценкиАмортизации
	               |ИЗ
	               |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	               |			&Период,
	               |			ВнеоборотныйАктив В
	               |					(ВЫБРАТЬ
	               |						ТаблицаОС.ОсновноеСредство
	               |					ИЗ
	               |						ТаблицаОС)
	               |				И Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки";  
				   
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТекстСодержания = "") Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) Тогда 
		ТекстСодержания = НСтр("ru='Выручка от реализации ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТаблицы.Содержание = ТекстСодержания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПередачаПоСчету(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Не Реквизиты.ЕстьСчетНаОплатуПокупателю Тогда
		ПараметрыПроведения.Вставить("ТаблицаСчетовНаОплату", Неопределено);
		ПараметрыПроведения.Вставить("ПередачаОСПоСчету",     Неопределено);
		Возврат "";
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	ЧастиЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ИЗ
	|	Реквизиты КАК ТаблицаРеквизиты
	|ГДЕ
	|	ТаблицаРеквизиты.СчетНаОплатуПокупателю <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)");
		
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС) + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();;
	НомераТаблиц.Вставить("ТаблицаСчетовНаОплату", НомераТаблиц.Количество());
		
	Если Реквизиты.ЕстьОС Тогда
		НомераТаблиц.Вставить("ПередачаОСПоСчету", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
			|	СУММА(ТаблицаОС.Количество) КАК Количество
			|ИЗ
			|	ТаблицаОС КАК ТаблицаОС
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаОС.ОсновноеСредство" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("ПередачаОСПоСчету", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПередачаОСПоСчетам(СчетаНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаНаОплату", СчетаНаОплату);

	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ВЫРАЗИТЬ(Шапка.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплату,
	|	Шапка.Ссылка КАК ПередачаОС
	|ИЗ
	|	Документ.ПередачаОС КАК Шапка
	|ГДЕ
	|	ВЫРАЗИТЬ(Шапка.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) В (&СчетаНаОплату)
	|	И Шапка.Проведен";
	
	// Считаем, что если у пользователя есть доступ к счетам на оплату, то к передаче ОС тоже должен быть.
	// Поэтому для оптимизации вкючаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции  

Функция ОсновныеСредстваКПередачеПоСчету(СчетНаОплату, ПередачиОСПоСчету) Экспорт
	
	ОсновныеСредства = Новый ТаблицаЗначений;
	ОсновныеСредства.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ОсновныеСредства.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ОсновныеСредства.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));	
		
	Результат = ПолучитьДанныеПоОтгрузкамОС(СчетНаОплату, ПередачиОСПоСчету);
	
	ПереданныеОС = Результат.ПереданныеОС;
	
	ПоляОтбора = "ОсновноеСредство";
	ПереданныеОС.Индексы.Добавить(ПоляОтбора);
	Отбор = Новый Структура(ПоляОтбора); 
	
	ОсновныеСредстваКПередачеПоСчету = Результат.ОС;
	
	Для Каждого СтрокаПередачи Из ОсновныеСредстваКПередачеПоСчету Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПередачи);
		НайденныеСтроки = ПереданныеОС.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПередачи);
					
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновныеСредства; 
	
КонецФункции

Функция ПолучитьДанныеПоОтгрузкамОС(СчетНаОплату, ПередачиОСПоСчету) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ПередачиОСПоСчету", ПередачиОСПоСчету);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
		+ ТекстЗапросаПереданныеОС(НомераТаблиц)
		+ ТекстЗапросаОСКПередачеПоСчету(НомераТаблиц);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Результат.Вставить(НомерТаблицы.Ключ, РезультатЗапроса[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеквизитыСчета(НомераТаблиц) 
	
	НомераТаблиц.Вставить("ВТ_ПередачиОСПоСчету", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыСчета", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОС", НомераТаблиц.Количество());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПередачаОС.Ссылка КАК ПередачаОС,
	|	ВЫРАЗИТЬ(ПередачаОС.ДокументОснование КАК Документ.СчетНаОплатуПокупателю) КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_ПередачиОСПоСчету
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка В(&ПередачиОСПоСчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСчета.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК РеквизитыСчета
	|ГДЕ
	|	РеквизитыСчета.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникОсновныеСредства.Ссылка, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК ОсновноеСредство,
	|	ЕСТЬNULL(СправочникОсновныеСредства.КодТНВЭД, НЕОПРЕДЕЛЕНО) КАК КодТНВЭД,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоКРеализации,
	|	1 КАК Количество,
	|	ОС.Сумма КАК Сумма,
	|	ОС.СтавкаНДС КАК СтавкаНДС,
	|	ОС.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ОС КАК ОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|		ПО ОС.ОсновноеСредство = СправочникОсновныеСредства.Ссылка
	|ГДЕ
	|	ОС.Ссылка = &СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОС.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции  

Функция ТекстЗапросаПереданныеОС(НомераТаблиц) Экспорт 
	
	НомераТаблиц.Вставить("ВТ_ПереданныеОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ПереданныеОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПереданныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|		"""" КАК Содержание,
	|		1 КАК Количество
	|	ИЗ
	|		ВТ_ПередачиОСПоСчету КАК ВТ_ПередачиОСПоСчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПереданныеОС
	|			ПО ВТ_ПередачиОСПоСчету.ПередачаОС = ПереданныеОС.Ссылка
	|	ГДЕ
	|		(ВТ_ПередачиОСПоСчету.СчетНаОплату = &СчетНаОплату)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.Содержание";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();  
	
КонецФункции

Функция ТекстЗапросаОСКПередачеПоСчету(НомераТаблиц)  
	
	НомераТаблиц.Вставить("ПереданныеОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПереданныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ВТ_ПереданныеОС.Содержание КАК Содержание,
	|	СУММА(ВТ_ПереданныеОС.Количество) КАК Количество
	|ИЗ
	|	ВТ_ПереданныеОС КАК ВТ_ПереданныеОС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПереданныеОС.Содержание,
	|	ВТ_ПереданныеОС.ОсновноеСредство"; 
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецЕсли

