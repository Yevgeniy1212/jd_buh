#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Командировочное удостоверение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомандировочноеУдостоверение";
	КомандаПечати.Представление = НСтр("ru = 'Командировочное удостоверение'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приказ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомандировкиОрганизаций_Приказ";
	КомандаПечати.Представление = НСтр("ru = 'Приказ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомандировочноеУдостоверение,КомандировкиОрганизаций_Приказ";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомандировочноеУдостоверение,КомандировкиОрганизаций_Приказ";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомандировочноеУдостоверение,КомандировкиОрганизаций_Приказ";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать удостоверения
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомандировочноеУдостоверение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КомандировочноеУдостоверение",
			НСтр("ru = 'Командировочное удостоверение'"),
			ПечатьКомандировочноеУдостоверение(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КомандировкиОрганизаций.ПФ_MXL_Удостоверение");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("КомандировочноеУдостоверение"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Печать приказа
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомандировкиОрганизаций_Приказ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КомандировкиОрганизаций_Приказ",
			НСтр("ru = 'Приказ о направлении в командировку'"),
			ПечатьПриказ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КомандировкиОрганизаций.ПФ_MXL_Приказ");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("КомандировкиОрганизаций_Приказ"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой "КомандировочноеУдостоверение"
//
Функция ПечатьКомандировочноеУдостоверение(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати = "КомандировкиОрганизации_Удостоверение";
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КомандировкиОрганизаций.ПФ_MXL_Удостоверение", КодЯзыка);
	
	ОбластьМакетаШапка  = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета		= Макет.ПолучитьОбласть("Работник"); // строка работника
	ОборотШапка			= Макет.ПолучитьОбласть("ШапкаОтметок"); // оборот удостоверения - отметки от прибытии-выбытии
	ОборотОтметки		= Макет.ПолучитьОбласть("Отметки"); 
	
	// выводим данные о руководителях организации
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий()   Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника 	
		НомерДокДляПечати =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
				
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаДляШапки.Организация, ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
    	ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		ВыборкаРаботники = ВыборкаДляШапки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		
		// Начинаем формировать выходной документ
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			Пока ВложеннаяВыборка.Следующий() Цикл
				
				// Каждый приказ на отдельной странице.
				Если ТабДокумент.ВысотаТаблицы > 0 Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// Шапка документа.
				Если ВыборкаРаботники.Количество() > 1 Тогда
					ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
				КонецЕсли; 
				ТабДокумент.Вывести(ОбластьМакетаШапка);
				
				// Данные по работнику.
				ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
				ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВложеннаяВыборка.ДатаОкончания),"",Цел((ВложеннаяВыборка.ДатаОкончания - ВложеннаяВыборка.ДатаНачала + 1) / 86400) + 1);
				ОбластьМакета.Параметры.ДатаНачала = Формат(ВложеннаяВыборка.ДатаНачала, "Л=" + КодЯзыка + "; ДЛФ=DD; ДП='" + НСтр("ru = '""____"" _____________ 20___ г.'", КодЯзыка)+ "'"); 
				ОбластьМакета.Параметры.ДатаОкончания = Формат(ВложеннаяВыборка.ДатаОкончания, "Л=" + КодЯзыка + "; ДЛФ=DD; ДП='" + НСтр("ru = '""____"" _____________ 20___ г.'", КодЯзыка)+ "'"); 				
				
				// Реквизиты документа личности
				РеквизитыПаспорта = "";
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ДокументВид) Тогда
					РеквизитыПаспорта = ВложеннаяВыборка.ДокументВид;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ДокументСерия) Тогда
					РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'серия %1'", КодЯзыка), ВложеннаяВыборка.ДокументСерия);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ДокументНомер) Тогда
					РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + "№ " + ВложеннаяВыборка.ДокументНомер;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ДокументДатаВыдачи) Тогда
					РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + Формат(ВложеннаяВыборка.ДокументДатаВыдачи, "Л=" + КодЯзыка + "; ДФ=дд.ММ.гггг");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ДокументКемВыдан) Тогда
					РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выд. %1'", КодЯзыка), СокрЛП(ВложеннаяВыборка.ДокументКемВыдан));
				КонецЕсли;
				ОбластьМакета.Параметры.РеквизитыПаспорта = РеквизитыПаспорта;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				// Подвал документа.
				ТабДокумент.Вывести(ОбластьМакетаПодвал);
				// выводим отметки
				ТабДокумент.Вывести(ОборотШапка);
				ТабДокумент.Вывести(ОборотОтметки);
				ТабДокумент.Вывести(ОборотОтметки);
				ТабДокумент.Вывести(ОборотОтметки);
				ТабДокумент.Вывести(ОборотОтметки);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			// выводим оборот удостоверения
			ТабДокумент.Вывести(ОборотШапка);
			ТабДокумент.Вывести(ОборотОтметки);
			ТабДокумент.Вывести(ОборотОтметки);
			ТабДокумент.Вывести(ОборотОтметки);
			ТабДокумент.Вывести(ОборотОтметки);
		КонецЕсли;   
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 

// Функция формирует табличный документ с печатной формой "Приказ".
//
Функция ПечатьПриказ(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати = "КомандировкиОрганизации_Приказ";
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КомандировкиОрганизаций.ПФ_MXL_Приказ", КодЯзыка);
	
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета	    = Макет.ПолучитьОбласть("Работник"); // строка работника
	
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий()   Цикл
				
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		// выводим данные о руководителях организации
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаДляШапки.Организация, ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация,ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		НомерДокДляПечати =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
 
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		// Начинаем формировать выходной документ
		ВыборкаРаботники = ВыборкаДляШапки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		     		
		// подсчитываем количество страниц документа - для корректного разбиения на страницы
		ВсегоСтрокДокумента = ВыборкаРаботники.Количество();
		
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			
			Пока ВложеннаяВыборка.Следующий() Цикл
				
				// Каждый приказ на отдельной странице.
				Если ТабДокумент.ВысотаТаблицы > 0 Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// Шапка документа.
				Если ВсегоСтрокДокумента > 1 Тогда
					ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
				КонецЕсли; 
				
				// Данные по работнику.
				ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
				
				ТабДокумент.Вывести(ОбластьМакетаШапка);
						
				// Данные по работнику.
				ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
				ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВложеннаяВыборка.ДатаОкончания),"",Цел((ВложеннаяВыборка.ДатаОкончания - ВложеннаяВыборка.ДатаНачала + 1) / 86400) + 1);
				ОбластьМакета.Параметры.ДатаНачала = Формат(ВложеннаяВыборка.ДатаНачала, "Л=" + КодЯзыка + "; ДЛФ=DD");
				ОбластьМакета.Параметры.ДатаОкончания = Формат(ВложеннаяВыборка.ДатаОкончания, "Л=" + КодЯзыка + "; ДЛФ=DD"); 
				ТабДокумент.Вывести(ОбластьМакета);
				 						
			КонецЦикла;  	
			// Подвал документа.
			ТабДокумент.Вывести(ОбластьМакетаПодвал);

		КонецЦикла;;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда 
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);

	КонецЦикла;
	            	
	Возврат ТабДокумент;

КонецФункции 

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечати(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка,
	|	КомандировкиОрганизацийРаботникиОрганизации.Сотрудник,
	|	КомандировкиОрганизацийРаботникиОрганизации.ФизЛицо,
	|	КомандировкиОрганизацийРаботникиОрганизации.НомерСтроки,
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	КомандировкиОрганизацийРаботникиОрганизации.ДатаНачала,
	|	ВЫРАЗИТЬ(КомандировкиОрганизацийРаботникиОрганизации.ИсточникФинансирования КАК СТРОКА(1000)) КАК ИсточникФинансирования,
	|	ВЫРАЗИТЬ(КомандировкиОрганизацийРаботникиОрганизации.Ссылка.СтранаНазначения КАК СТРОКА(1000)) КАК СтранаНазначения,
	|	ВЫРАЗИТЬ(КомандировкиОрганизацийРаботникиОрганизации.Ссылка.ОрганизацияНазначения КАК СТРОКА(1000)) КАК ОрганизацияНазначения,
	|	ВЫРАЗИТЬ(КомандировкиОрганизацийРаботникиОрганизации.Ссылка.ОснованиеКомандировки КАК СТРОКА(1000)) КАК ОснованиеКомандировки,
	|	КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания,
	|	ВЫРАЗИТЬ(КомандировкиОрганизацийРаботникиОрганизации.Цель КАК СТРОКА(1000)) КАК Цель,
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка.СтруктурноеПодразделение
	|ПОМЕСТИТЬ ВТ_ДокументыКомандировкиОрганизаций
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацийРаботникиОрганизации
	|ГДЕ
	|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации, ИСТИНА)
	|			ТОГДА ВЫБОР
	|					КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА Организации.Ссылка
	|					ИНАЧЕ Организации.ГоловнаяОрганизация
	|				КОНЕЦ
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФИОФИзЛиц.ФизЛицо,
	|	ПериодыФИОФИзЛиц.Период,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыКомандировкиОрганизаций КАК ВТ_ДокументыКомандировкиОрганизаций
	|				ПО ФИОФизЛиц.Период <= ВТ_ДокументыКомандировкиОрганизаций.Дата
	|					И ФИОФизЛиц.ФизЛицо = ВТ_ДокументыКомандировкиОрганизаций.ФизЛицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФИОФизЛиц.ФизЛицо) КАК ПериодыФИОФИзЛиц
	|		ПО ФИОФизЛиц.Период = ПериодыФИОФИзЛиц.Период
	|			И ФИОФизЛиц.ФизЛицо = ПериодыФИОФИзЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыКомандировкиОрганизаций.Ссылка КАК Ссылка,
	|	ВТ_ДокументыКомандировкиОрганизаций.Дата КАК ДатаДок,
	|	ВТ_ДокументыКомандировкиОрганизаций.Номер КАК НомерДок,
	|	ВЫБОР
	|		КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА ВТ_ДокументыКомандировкиОрганизаций.ФизЛицо.Наименование
	|		ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
	|	КОНЕЦ КАК Работник,
	|	ВТ_ДокументыКомандировкиОрганизаций.Организация КАК Организация,
	|	ВТ_ДокументыКомандировкиОрганизаций.СтруктурноеПодразделение,
	|	ВТ_ДокументыКомандировкиОрганизаций.СтранаНазначения,
	|	ВТ_ДокументыКомандировкиОрганизаций.ОрганизацияНазначения,
	|	ВТ_ДокументыКомандировкиОрганизаций.ОснованиеКомандировки,
	|	ВТ_ДокументыКомандировкиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ВТ_ДокументыКомандировкиОрганизаций.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование, """") КАК ДокументВид,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия, """") КАК ДокументСерия,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер, """") КАК ДокументНомер,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументДатаВыдачи,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000))
	|	КОНЕЦ КАК ДокументКемВыдан,
	|	ВТ_ДокументыКомандировкиОрганизаций.ДатаНачала,
	|	ВТ_ДокументыКомандировкиОрганизаций.ДатаОкончания,
	|	ВЫРАЗИТЬ(ВТ_ДокументыКомандировкиОрганизаций.Цель КАК СТРОКА(1000)) КАК Цель,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер,
	|	Работники.ПодразделениеОрганизацииНаименование КАК ПодразделениеРаботника,
	|	Работники.Должность КАК Должность,
	|	ВЫРАЗИТЬ(ВТ_ДокументыКомандировкиОрганизаций.ИсточникФинансирования КАК СТРОКА(1000)) КАК ИсточникФинансирования,
	|	ВТ_ГоловнаяОрганизация.ГоловнаяОрганизация
	|ИЗ
	|	ВТ_ДокументыКомандировкиОрганизаций КАК ВТ_ДокументыКомандировкиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
	|		ПО ВТ_ДокументыКомандировкиОрганизаций.ФизЛицо = ВТ_ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокДат.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|			РаботникиОрганизации.Должность.Наименование КАК Должность,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК СтруктурноеПодразделениеОрганизацииНаименование
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиВнутри.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Док
	|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник
	|						И РаботникиВнутри.Период <= Док.ДатаНачала
	|			ГДЕ
	|				Док.Ссылка В(&МассивОбъектов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиВнутри.Сотрудник) КАК СписокДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
	|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК Работники
	|		ПО ВТ_ДокументыКомандировкиОрганизаций.Сотрудник = Работники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				,
	|				ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						КомандировкиОрганизацииРаботники.Сотрудник.Физлицо КАК ФизЛицо
	|					ИЗ
	|						Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
	|					ГДЕ
	|						КомандировкиОрганизацииРаботники.Ссылка В (&МассивОбъектов))) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ВТ_ДокументыКомандировкиОрганизаций.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГоловнаяОрганизация КАК ВТ_ГоловнаяОрганизация
	|		ПО ВТ_ДокументыКомандировкиОрганизаций.Организация = ВТ_ГоловнаяОрганизация.Организация
	|ГДЕ
	|	ВТ_ДокументыКомандировкиОрганизаций.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(ДатаДок),
	|	МАКСИМУМ(НомерДок),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(СтруктурноеПодразделение)
	|ПО
	|	Ссылка,
	|	Сотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции
	
#КонецЕсли