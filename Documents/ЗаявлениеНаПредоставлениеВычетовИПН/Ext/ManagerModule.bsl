#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонфликтующиеРегистраторы(Регистратор, Месяц, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	ПрименениеВычетовИПН.Регистратор,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрименениеВычетовИПН.Регистратор) КАК ПредставлениеРегистратора
		|ИЗ
		|	РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|ГДЕ
		|	ПрименениеВычетовИПН.Период = &Период
		|	И ПрименениеВычетовИПН.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПрименениеВычетовИПН.Регистратор <> &Регистратор";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",	Сотрудник);
	Запрос.УстановитьПараметр("Период",			Месяц);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет наличие повторяющихся строк в табличной части документов "Формирование состава бригады" и "Выработка сотрудников"
//
// Параметры:
//	ТабличнаяЧастьСотрудники		- таблица значений - проверяемая таблица значений
//	ПроверкаВРазрезеКлючейСтрок		- булево - если Истина, то учитываются ключи строк
//	Отказ							- булево - устанавливается в значение Истина, если дубли найдены
//
Процедура ПроверитьДублированиеСтрок(ТабличнаяЧасть, Отказ) Экспорт
	
	МассивИсключений 	= Новый Массив;
	СтруктураОтбора 	= Новый Структура;
	
	ВыполненаПроверкаПоМногодетным = Ложь;
	
	Для Каждого Строка из ТабличнаяЧасть Цикл
		
		Если МассивИсключений.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Вставить("ВидВычетаИПН", Строка.ВидВычетаИПН);
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			МассивИсключений.Добавить(Строка);
			
			Для сч = 1 по НайденныеСтроки.Количество() - 1 Цикл
				
				Дубль = НайденныеСтроки[сч];
				МассивИсключений.Добавить(Дубль);
				
				ТекстСообщения = НСтр("ru = 'Дублирующая запись в списке ""Виды вычета""'");
				
				ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, , "Вычеты[" + (Дубль.НомерСтроки -1) + "].ВидВычетаИПН", "Объект", Отказ);
				
			КонецЦикла;
			
		КонецЕсли; 	
		
		Если НЕ ВыполненаПроверкаПоМногодетным 
			И (Строка.ВидВычетаИПН = Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляКаждогоРодителя  
			ИЛИ Строка.ВидВычетаИПН = Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляОдногоРодителя) Тогда 
			СтруктураОтбора = Новый  Структура;
			ВыполненаПроверкаПоМногодетным = Истина;
			
			Если Строка.ВидВычетаИПН = Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляКаждогоРодителя Тогда 
				СтруктураОтбора.Вставить("ВидВычетаИПН", Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляОдногоРодителя);
				СтруктураОтбора.Вставить("ПредоставлятьВычет", Истина);
			Иначе      
				СтруктураОтбора.Вставить("ВидВычетаИПН", Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляКаждогоРодителя);
				СтруктураОтбора.Вставить("ПредоставлятьВычет", Истина);
			КонецЕсли;  	
			
			НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 И Строка.ПредоставлятьВычет = НайденныеСтроки[0].ПредоставлятьВычет Тогда			
				
				ТекстСообщения = НСтр("ru = 'Физическому лицу может быть назначен только один из видов вычета: 
										|Вычет для многодетных семей (для каждого родителя), Вычет для многодетных семей (для одного из родителей).'");
			
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения, , "Вычеты[" + (НайденныеСтроки[0].НомерСтроки -1) + "].ВидВычетаИПН", "Объект", Отказ);   	
				
			КонецЕсли; 	  	
		КонецЕсли;  	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявлениеНаПредоставлениеВычетовИПН";
	КомандаПечати.Представление = НСтр("ru = 'Заявление на предоставление вычетов ИПН'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявлениеНаПредоставлениеВычетовИПН2025";
	КомандаПечати.Представление = НСтр("ru = 'Заявление на предоставление вычетов ИПН (Приказ МФ РК от 1.02.2018 года № 102)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	//КомандаПечати.Отключена = Истина;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеНаПредоставлениеВычетовИПН") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеНаПредоставлениеВычетовИПН",
			НСтр("ru = 'Заявление на предоставление вычетов ИПН'"),
			ПечатьЗаявления(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ЗаявлениеНаПредоставлениеВычетовИПН.ПФ_MXL_ЗаявлениеНаПредоставлениеВычетовИПН");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ЗаявлениеНаПредоставлениеВычетовИПН"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеНаПредоставлениеВычетовИПН2025") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеНаПредоставлениеВычетовИПН2025",
			НСтр("ru = 'Заявление на предоставление вычетов ИПН (Приказ МФ РК от 1.02.2018 года № 102)'"),
			ПечатьЗаявления2025(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЗаявлениеНаПредоставлениеВычетовИПН.ПФ_MXL_ЗаявлениеНаПредоставлениеВычетовИПН2025");
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПечатьЗаявления(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеНаПредоставлениеВычетовИПН";
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеНаПредоставлениеВычетовИПН.ПФ_MXL_ЗаявлениеНаПредоставлениеВычетовИПН", КодЯзыка);
	
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаВычета 	= Макет.ПолучитьОбласть("СтрокаВычета");
	ОбластьШапкаОснования 	= Макет.ПолучитьОбласть("ШапкаОснования");
	ОбластьСтрокаОснования	= Макет.ПолучитьОбласть("СтрокаОснования");
	ОбластьПодвалОснования	= Макет.ПолучитьОбласть("ПодвалОснование");
	ОбластьПодвал 	  		= Макет.ПолучитьОбласть("Подвал");
	
	ДанныеДляПечати = ДанныеДляПечатиЗаявленияНаПредоставлениеВычетов(МассивОбъектов);
	
	ВыборкаПоДокументам 	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоРегистратору 	= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		Если  ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																			?(ЗначениеЗаполнено(ВыборкаПоДокументам.СтруктурноеПодразделение), ВыборкаПоДокументам.СтруктурноеПодразделение, ВыборкаПоДокументам.Организация),
																			ВыборкаПоДокументам.Организация,
																			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		Иначе
			
			Налогоплательщик = ВыборкаПоДокументам.Организация;
			
		КонецЕсли;
		
		СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "НаименованиеПолное, Представление, ИдентификационныйНомер");
		
		ОбластьШапка.Параметры.Организация = ?(ЗначениеЗаполнено(СведенияОбОрганизации.НаименованиеПолное), СведенияОбОрганизации.НаименованиеПолное ,СведенияОбОрганизации.Представление) 
						+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.ИдентификационныйНомер), ", " + СведенияОбОрганизации.ИдентификационныйНомер, "");

		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ФизЛицо) Тогда				
			ДанныеОФизЛице 	= ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Налогоплательщик, ВыборкаПоДокументам.ФизЛицо, ВыборкаПоДокументам.Дата);
			ФИО_ФизЛица		= "";
			
			Если ДанныеОФизЛице.Фамилия <> Null Тогда 
				СтруктураФИО = Новый Структура;
				СтруктураФИО.Вставить("Фамилия"	, ДанныеОФизЛице.Фамилия); 
				СтруктураФИО.Вставить("Имя"		, ДанныеОФизЛице.Имя);
				СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);
				ФИО_ФизЛица	 = ДанныеОФизЛице.Фамилия + " " + ДанныеОФизЛице.Имя + " " + ДанныеОФизЛице.Отчество;
				ТекстФизлица  = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФИО_ФизЛица, 2);
			КонецЕсли;
			
			ТекстФизлица = ?(ЗначениеЗаполнено(ТекстФизлица), ТекстФизлица, ВыборкаПоДокументам.ФизЛицо_Представление);
			ОбластьШапка.Параметры.ФизЛицо = ТекстФизлица + ?(ЗначениеЗаполнено(ВыборкаПоДокументам.ИНН_ФизЛица), ", " + ВыборкаПоДокументам.ИНН_ФизЛица, ""); 
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьШапка);
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокВычеты = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокВычеты = Неопределено;
		КонецЕсли;
		
		НомерСтрокиВычета = 0;
		МассивОснований = Новый Массив;
		Если ВыборкаСтрокВычеты <> Неопределено Тогда
			КоличествоВычетов = ВыборкаСтрокВычеты.Количество();
			Пока ВыборкаСтрокВычеты.Следующий() Цикл
				НомерСтрокиВычета = НомерСтрокиВычета +1;
				
				ОбластьСтрокаВычета.Параметры.НомерСтроки	= НомерСтрокиВычета;
				ОбластьСтрокаВычета.Параметры.ВычетИПН		= ВыборкаСтрокВычеты.ВидВычетаИПН + ?(НомерСтрокиВычета = КоличествоВычетов,".", ";");
				ТабДокумент.Вывести(ОбластьСтрокаВычета);
				Если ЗначениеЗаполнено(ВыборкаСтрокВычеты.Основание) Тогда 
					МассивОснований.Добавить(ВыборкаСтрокВычеты.Основание);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		КоличествоОснований = МассивОснований.Количество();
		Если КоличествоОснований <> 0 Тогда
			ТабДокумент.Вывести(ОбластьШапкаОснования);
			НомерОснования = 0;
			Для Каждого ЗначениеМассива Из МассивОснований Цикл
				НомерОснования = НомерОснования + 1;
				ОбластьСтрокаОснования.Параметры.Основание = "- " + ЗначениеМассива + ?(НомерОснования = КоличествоОснований,".", ";");
				ТабДокумент.Вывести(ОбластьСтрокаОснования);	
			КонецЦикла;
			ОбластьПодвалОснования.Параметры.КоличествоОснований   = МассивОснований.Количество();
			ТабДокумент.Вывести(ОбластьПодвалОснования);	
		КонецЕсли;	
		ОбластьПодвал.Параметры.ФИО_ФизЛица	= ?(ЗначениеЗаполнено(ФИО_ФизЛица), ФИО_ФизЛица, ВыборкаПоДокументам.ФизЛицо);
		ОбластьПодвал.Параметры.Дата       	= Формат(ВыборкаПоДокументам.Дата, "Л=" + КодЯзыка + "; ДФ='д ММММ гггг'");
		ТабДокумент.Вывести(ОбластьПодвал);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

	КонецЦикла;	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ПечатьЗаявления2025(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеНаПредоставлениеВычетовИПН2025";
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеНаПредоставлениеВычетовИПН.ПФ_MXL_ЗаявлениеНаПредоставлениеВычетовИПН2025");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ЗаявлениеВычетовИПН2025");
	
	ДанныеДляПечати = ДанныеДляПечатиЗаявленияНаПредоставлениеВычетов(МассивОбъектов);
	
	ВыборкаПоДокументам 	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоРегистратору 	= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СоответствиеВычетов = Новый Соответствие;
	СоответствиеВычетов.Вставить("ВычетОПВ", "ВычетОПВ");
	СоответствиеВычетов.Вставить("ВычетВОСМС", "ВычетВОСМС");
	СоответствиеВычетов.Вставить("ВычетСтандартный", "ВычетСтандартный");
	СоответствиеВычетов.Вставить("ВычетМногодетные", "ВычетМногодетные");
	СоответствиеВычетов.Вставить("ВычетДПВ", "ВычетДПВ");
	СоответствиеВычетов.Вставить("ВычетОбучение", "ВычетОбучение");
	СоответствиеВычетов.Вставить("ВычетМедицина", "ВычетМедицина");
	СоответствиеВычетов.Вставить("ВычетВознаграждения", "ВычетВознаграждения");
	СоответствиеВычетов.Вставить("ВычетПредварительный", "ВычетПредварительный");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл

		Если ВыборкаПоДокументам.Месяц < Дата('20200101') Тогда
			Продолжить;	
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		Если  ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																			?(ЗначениеЗаполнено(ВыборкаПоДокументам.СтруктурноеПодразделение), ВыборкаПоДокументам.СтруктурноеПодразделение, ВыборкаПоДокументам.Организация),
																			ВыборкаПоДокументам.Организация,
																			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		Иначе
			
			Налогоплательщик = ВыборкаПоДокументам.Организация;
			
		КонецЕсли;
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Налогоплательщик, ВыборкаПоДокументам.Дата);
		
		ОбластьШапка.Параметры.Организация = ?(ЗначениеЗаполнено(СведенияОбОрганизации.ПолноеНаименование), СведенияОбОрганизации.ПолноеНаименование ,СведенияОбОрганизации.Представление) 
						+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.БИН_ИИН), ", " + СведенияОбОрганизации.БИН_ИИН, "");
						
						
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ФизЛицо) Тогда				
			ДанныеОФизЛице 	= ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(Налогоплательщик, ВыборкаПоДокументам.ФизЛицо, ВыборкаПоДокументам.Дата);
			ФИО_ФизЛица		= "";
			
			Если ДанныеОФизЛице.Фамилия <> Null Тогда 
				СтруктураФИО = Новый Структура;
				СтруктураФИО.Вставить("Фамилия"	, ДанныеОФизЛице.Фамилия); 
				СтруктураФИО.Вставить("Имя"		, ДанныеОФизЛице.Имя);
				СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);
				ФИО_ФизЛица	 = ДанныеОФизЛице.Фамилия + " " + ДанныеОФизЛице.Имя + " " + ДанныеОФизЛице.Отчество;
				ТекстФизлица  = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФИО_ФизЛица, 2);
			КонецЕсли;
			
			ТекстФизлица = ?(ЗначениеЗаполнено(ТекстФизлица), ТекстФизлица, ВыборкаПоДокументам.ФизЛицо_Представление);
			ОбластьШапка.Параметры.ФизЛицо = ТекстФизлица + ?(ЗначениеЗаполнено(ВыборкаПоДокументам.ИНН_ФизЛица), ", " + ВыборкаПоДокументам.ИНН_ФизЛица, "");
		КонецЕсли;
		
		Для Каждого СтрокаСоответствиеВычетов Из СоответствиеВычетов Цикл
			
			ОбластьШапка.Параметры[СтрокаСоответствиеВычетов.Значение] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '□ %1'", КодЯзыка), НСтр("ru = ' да'", КодЯзыка)); 
			
		КонецЦикла;
		
		ПризнакСогласия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '■ %1'", КодЯзыка), НСтр("ru = ' да'", КодЯзыка));	

		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокВычеты = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокВычеты = Неопределено;
		КонецЕсли;
		
		Если ВыборкаСтрокВычеты <> Неопределено Тогда
			
			Пока ВыборкаСтрокВычеты.Следующий() Цикл
			
				Если ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.Стандартный1МЗП
					ИЛИ ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды
					ИЛИ ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.Стандартный75МЗПРодители Тогда
					
					ОбластьШапка.Параметры["ВычетСтандартный"] = ПризнакСогласия; 
					
				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляОдногоРодителя 
					ИЛИ ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ВычетДляМногодетнойСемьиДляКаждогоРодителя Тогда
								
					ОбластьШапка.Параметры["ВычетМногодетные"] = ПризнакСогласия; 

				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ДобровольныеПенсионныеВзносы Тогда
					
					ОбластьШапка.Параметры["ВычетДПВ"] = ПризнакСогласия; 
					
				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг Тогда
					
					ОбластьШапка.Параметры["ВычетМедицина"] = ПризнакСогласия;     
					
				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам Тогда
					
					ОбластьШапка.Параметры["ВычетВознаграждения"] = ПризнакСогласия;
					
				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ВычетОПВ Тогда
					
					ОбластьШапка.Параметры["ВычетОПВ"] = ПризнакСогласия; 
					
				ИначеЕсли ВыборкаСтрокВычеты.ВидВычетаИПНСсылка = Справочники.ВычетыИПН.ВычетВОСМС Тогда
					
					ОбластьШапка.Параметры["ВычетВОСМС"] = ПризнакСогласия;

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		ОбластьШапка.Параметры.ФИО_ФизЛица	= ?(ЗначениеЗаполнено(ФИО_ФизЛица), ФИО_ФизЛица, ВыборкаПоДокументам.ФизЛицо);
				
		ДатаПодписи = Формат(ВыборкаПоДокументам.Дата, "Л=" + КодЯзыка + "; ДФ='dd MMMM yyyy'");
		ЧастиДатыПодписи = СтрРазделить(ДатаПодписи, " ");
		Если ЧастиДатыПодписи.Количество() > 2 Тогда
			ТекстДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" %2 %3 %4'", КодЯзыка), ЧастиДатыПодписи[0], ЧастиДатыПодписи[1], ЧастиДатыПодписи[2], НСтр("ru = ' года'", КодЯзыка));
		Иначе
			ТекстДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'", КодЯзыка), ДатаПодписи, НСтр("ru = ' года'", КодЯзыка));	
		КонецЕсли;
		
		ОбластьШапка.Параметры.Дата = ТекстДаты;
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

	КонецЦикла;	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ДанныеДляПечатиЗаявленияНаПредоставлениеВычетов(МассивОбъектов)
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст 	= "ВЫБРАТЬ
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Ссылка,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Дата,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Месяц,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Организация,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Сотрудник КАК ФизЛицо,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.СтруктурноеПодразделение,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Сотрудник.ИдентификационныйКодЛичности КАК ИНН_ФизЛица,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Сотрудник.Представление КАК ФизЛицо_Представление
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН КАК ЗаявлениеНаПредоставлениеВычетовИПН
	|ГДЕ
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Ссылка В(&МассивОбъектов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке", РезультатЗапроса);

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявлениеНаПредоставлениеВычетовИПНВычеты.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявлениеНаПредоставлениеВычетовИПНВычеты.ВидВычетаИПН) КАК ВидВычетаИПН,
	|	ЗаявлениеНаПредоставлениеВычетовИПНВычеты.ВидВычетаИПН КАК ВидВычетаИПНСсылка,
	|	ЗаявлениеНаПредоставлениеВычетовИПНВычеты.Основание
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН.Вычеты КАК ЗаявлениеНаПредоставлениеВычетовИПНВычеты
	|ГДЕ
	|	ЗаявлениеНаПредоставлениеВычетовИПНВычеты.Ссылка В(&МассивОбъектов)
	|	И ЗаявлениеНаПредоставлениеВычетовИПНВычеты.ПредоставлятьВычет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатЗапроса);
	
	Возврат ДанныеДляПечати;
	
КонецФункции	

#КонецОбласти

#Область Проведение

//Подготовка параметров
Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("вт_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Дата,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Организация,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.СтруктурноеПодразделение,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Организация КАК Налогоплательщик,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Ссылка,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Сотрудник КАК ФизическоеЛицо,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Месяц,
	|	ЗаявлениеНаПредоставлениеВычетовИПН.МесяцЗавершения
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН КАК ЗаявлениеНаПредоставлениеВычетовИПН
	|ГДЕ
	|	ЗаявлениеНаПредоставлениеВычетовИПН.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.Ссылка,
	|	Реквизиты.ФизическоеЛицо,
	|	Реквизиты.Месяц,
	|	Реквизиты.МесяцЗавершения
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса; 
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("вт_ПредоставляемыеВычеты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("вт_ПрочиеВечеты"			, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Минимум"				, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Пересечения"			, НомераТаблиц.Количество());	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Вычеты.ВидВычетаИПН КАК ВидВычетаИПН,
	|	Вычеты.ПредоставлятьВычет КАК ПредоставлятьВычет
	|ПОМЕСТИТЬ вт_ПредоставляемыеВычеты
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН.Вычеты КАК Вычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Вычеты.Ссылка = Реквизиты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычетаИПН,
	|	ПредоставлятьВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеВычеты.ВидВычетаИПН КАК ВидВычета,
	|	ПрочиеВычеты.Размер КАК Размер,
	|	ПрочиеВычеты.ДействуетС КАК ДействуетС,
	|	ПрочиеВычеты.ДействуетПо КАК ДействуетПо,
	|	вт_ПредоставляемыеВычеты.ПредоставлятьВычет КАК ПредоставлятьВычет
	|ПОМЕСТИТЬ вт_ПрочиеВечеты
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН.ПрочиеВычеты КАК ПрочиеВычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ПрочиеВычеты.Ссылка = Реквизиты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ПредоставляемыеВычеты КАК вт_ПредоставляемыеВычеты
	|		ПО ПрочиеВычеты.ВидВычетаИПН = вт_ПредоставляемыеВычеты.ВидВычетаИПН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычета,
	|	ДействуетС,
	|	Размер,
	|	ПредоставлятьВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(КОНЕЦПЕРИОДА(ПрочиеВычетыДатаНачала.ДействуетС, МЕСЯЦ)) КАК МинимумДата,
	|	ПрочиеВычетыДатаНачала.ВидВычета КАК ВидВычета
	|ПОМЕСТИТЬ ВТ_Минимум
	|ИЗ
	|	вт_ПрочиеВечеты КАК ПрочиеВычетыДатаНачала
	|ГДЕ
	|	ПрочиеВычетыДатаНачала.ПредоставлятьВычет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеВычетыДатаНачала.ВидВычета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Месяц,
	|	ПрочиеВычетыДатаНачала.ВидВычета
	|ИЗ
	|	вт_ПрочиеВечеты КАК ПрочиеВычетыДатаНачала
	|ГДЕ
	|	НЕ ПрочиеВычетыДатаНачала.ПредоставлятьВычет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычета,
	|	МинимумДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеВычеты.ВидВычета КАК ВидВычета,
	|	ПрочиеВычеты.ДействуетС КАК ДействуетС,
	|	0 КАК Размер,
	|	ПрочиеВычеты.ДействуетПо КАК ДействуетПо
	|ПОМЕСТИТЬ ВТ_Пересечения
	|ИЗ
	|	РегистрСведений.ПрочиеВычетыФизическихЛицИПН.СрезПоследних(
	|			&Месяц,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Регистратор <> &Ссылка
	|				И ВидВычета В
	|					(ВЫБРАТЬ
	|						вт_ПрочиеВечеты.ВидВычета
	|					ИЗ
	|						вт_ПрочиеВечеты КАК вт_ПрочиеВечеты)) КАК ПрочиеВычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Минимум КАК ВТ_Минимум
	|		ПО ПрочиеВычеты.ВидВычета = ВТ_Минимум.ВидВычета
	|			И ПрочиеВычеты.ДействуетПо >= ВТ_Минимум.МинимумДата
	|ГДЕ
	|	ПрочиеВычеты.Размер <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычета,
	|	ДействуетС";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаВычеты(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("Вычеты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Вычеты.НомерСтроки КАК НомерСтроки,
	|	Вычеты.ВидВычетаИПН,
	|	Вычеты.ПредоставлятьВычет,
	|	Вычеты.Основание
	|ИЗ
	|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН.Вычеты КАК Вычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Вычеты.Ссылка = Реквизиты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаПрочиеВычеты(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ПрочиеВычеты", НомераТаблиц.Количество());

	ТекстЗапроса = "ВЫБРАТЬ
	|	вт_ПрочиеВечеты.ВидВычета КАК ВидВычета,
	|	вт_ПрочиеВечеты.ДействуетС КАК ДействуетС,
	|	вт_ПрочиеВечеты.Размер КАК Размер,
	|	вт_ПрочиеВечеты.ДействуетПо КАК ДействуетПо
	|
	|ИЗ
	|	вт_ПрочиеВечеты КАК вт_ПрочиеВечеты
	|ГДЕ
	|	вт_ПрочиеВечеты.ПредоставлятьВычет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Пересечения.ВидВычета,
	|	ВТ_Пересечения.ДействуетС,
	|	ВТ_Пересечения.Размер,
	|	ВТ_Пересечения.ДействуетПо
	|ИЗ
	|	ВТ_Пересечения КАК ВТ_Пересечения
	|ГДЕ
	|	НЕ (ВТ_Пересечения.ВидВычета, ВТ_Пересечения.ДействуетС) В
	|				(ВЫБРАТЬ
	|					Т.ВидВычета,
	|					Т.ДействуетС
	|				ИЗ
	|					вт_ПрочиеВечеты КАК Т
	|				ГДЕ
	|					Т.ПредоставлятьВычет)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка"			, ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение), Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация),
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		ТаблицаРеквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик")
	КонецЕсли;

	
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Запрос.УстановитьПараметр("Месяц"			, Реквизиты.Месяц);
	Запрос.УстановитьПараметр("ФизическоеЛицо"	, Реквизиты.ФизическоеЛицо);
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаТаблицаВычеты(НомераТаблиц, Реквизиты)
					+ТекстЗапросаТаблицаПрочиеВычеты(НомераТаблиц, Реквизиты);
					
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	           
	Возврат ПараметрыПроведения;

КонецФункции 

//Формирование движений
Процедура СформироватьДвиженияИПНЗаявлениеНаПредоставлениеВычета(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ТаблицаВычеты 		= ПараметрыПроведения.Вычеты;
	ТаблицаПрочиеВычета	= ПараметрыПроведения.ПрочиеВычеты;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Месяц   		= Реквизиты.Месяц;
	МесяцЗавершения = Реквизиты.МесяцЗавершения;
	Организация 	= Реквизиты.Организация;
	Налогоплательщик= Реквизиты.Налогоплательщик;
	ФизическоеЛицо  = Реквизиты.ФизическоеЛицо;
	
	// регистр ПрименениеВычетовИПН
	Движения.ПрименениеВычетовИПН.Записывать = Истина;
	Движение 				= Движения.ПрименениеВычетовИПН.Добавить();
	Движение.Период 		= Месяц;
	Движение.ФизическоеЛицо = ФизическоеЛицо;
	Движение.Организация 	= Налогоплательщик;
	Движение.ДействуетПо 	= МесяцЗавершения;
	
	// регистр ВычетыФизическихЛицИПН
	Движения.ВычетыФизическихЛицИПН.Записывать = Истина;
	Для Каждого СтрокаТЧ Из ТаблицаВычеты Цикл
		Движение 					= Движения.ВычетыФизическихЛицИПН.Добавить();
		Движение.Период 			= Месяц;
		Движение.ФизическоеЛицо 	= ФизическоеЛицо;
		Движение.ВидВычета 			= СтрокаТЧ.ВидВычетаИПН;
		Движение.ПредоставлятьВычет = СтрокаТЧ.ПредоставлятьВычет;
		Движение.ДействуетПо 		= МесяцЗавершения;
		Движение.Основание 			= СтрокаТЧ.Основание;
	КонецЦикла;
	
	// регистр ПрочиеВычетыФизическихЛицИПН
	Движения.ПрочиеВычетыФизическихЛицИПН.Записывать = Истина;
	Для Каждого СтрокаТЧ Из ТаблицаПрочиеВычета Цикл
		Движение 				= Движения.ПрочиеВычетыФизическихЛицИПН.Добавить();
		Движение.Период 		= Месяц;
		Движение.ФизическоеЛицо = ФизическоеЛицо;
		Движение.ВидВычета 		= СтрокаТЧ.ВидВычета;
		Движение.ДействуетС 	= СтрокаТЧ.ДействуетС;
		Движение.Размер 		= СтрокаТЧ.Размер;
		Движение.ДействуетПо 	= СтрокаТЧ.ДействуетПо;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
