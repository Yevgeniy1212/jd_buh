#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			ЭтотОбъект.Организация = ДанныеЗаполнения.Организация;	
		КонецЕсли;	
		
		Если ДанныеЗаполнения.Свойство("Месяц") Тогда
			ЭтотОбъект.Месяц = ДанныеЗаполнения.Месяц;
		Иначе
			ЭтотОбъект.Месяц = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		КонецЕсли;	
		
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			ЭтотОбъект.Сотрудник = ДанныеЗаполнения.Сотрудник;	
		КонецЕсли;	
	Иначе 
		ЭтотОбъект.Месяц 			= НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;	
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);	
	
	Если ЭтотОбъект.Месяц < Дата(2018,1,1) Тогда
		ЭтотОбъект.Месяц = НачалоМесяца(Дата(2018,1,1));
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Свойство ЗакрыватьФорму используется при проведении из формы документа
	Если ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ДополнительныеСвойства.Удалить("ЗакрыватьФорму");
	КонецЕсли;
	
	Если НЕ НаличиеЗаявления И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);		
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Наличие заявления"". Документ будет записан без проведения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НаличиеЗаявления", "Объект", Ложь);	
		ДополнительныеСвойства.Вставить("ЗакрыватьФорму", Ложь);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Гражданство = РегистрыСведений.ГражданствоФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", Сотрудник));
		НеРезидентРК = Ложь;
		Если Гражданство.Количество() > 0 Тогда
			НеРезидентРК = Гражданство[0].НеЯвляетсяНалоговымРезидентомРК;
		КонецЕсли;
		Если НеРезидентРК Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный сотрудник <%1> не является налоговым резидентом РК. Вычеты по ИПН не предоставляются.'"),
				Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Сотрудник", "Объект", Отказ);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОПрекращенииПредоставленияВычета()
	
	Если ЗначениеЗаполнено(МесяцЗавершения) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыФизическихЛицИПНСрезПоследних.ВидВычета,
		|	ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо
		|ИЗ
		|	РегистрСведений.ВычетыФизическихЛицИПН.СрезПоследних(&ПериодСреза, ФизическоеЛицо = &ФизическоеЛицо) КАК ВычетыФизическихЛицИПНСрезПоследних
		|ГДЕ
		|	ВычетыФизическихЛицИПНСрезПоследних.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо > &МесяцЗавершения
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо"	, Сотрудник);
		Запрос.УстановитьПараметр("ПустаяДата"		, Дата(1,1,1));
		Запрос.УстановитьПараметр("МесяцЗавершения"	, МесяцЗавершения);
		Запрос.УстановитьПараметр("ПериодСреза"		, Месяц);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаЗапроса.ДействуетПо) Тогда
				ТекстСообщения = НСтр("ru='Прекращено предоставление вычета ""%1"", данный вычет должен был предоставляться по: %2.'");
			Иначе
				ТекстСообщения = НСтр("ru='Прекращено предоставление вычета ""%1"", данный вычет должен был предоставляться бессрочно.'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаЗапроса.ВидВычета, Формат(ВыборкаЗапроса.ДействуетПо, "ДЛФ=DD"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	  
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПараметрыПроведения = Документы.ЗаявлениеНаПредоставлениеВычетовИПН.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	Документы.ЗаявлениеНаПредоставлениеВычетовИПН.СформироватьДвиженияИПНЗаявлениеНаПредоставлениеВычета(ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Вычеты");
	
	Если ЗначениеЗаполнено(МесяцЗавершения) И Месяц > МесяцЗавершения Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru='Месяц начала действия заявления превышает месяц окончания'"), ,"МесяцЗавершенияСтрокой",,Отказ);
	КонецЕсли;
	ПроверитьПрочиеВычеты(Отказ);

	// Проверка на дубли Вида вычета
	Документы.ЗаявлениеНаПредоставлениеВычетовИПН.ПроверитьДублированиеСтрок(Вычеты, Отказ);
	
	// Проверка на дубли движений
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Документы.ЗаявлениеНаПредоставлениеВычетовИПН.КонфликтующиеРегистраторы(Ссылка, Месяц, Сотрудник);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'Заявление за указанный месяц уже зарегистрированно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Регистратор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор, , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПрочиеВычеты(Отказ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Вычеты.ВидВычетаИПН КАК Справочник.ВычетыИПН) КАК ВидВычетаИПН,
	|	Вычеты.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ПроверкаВычеты
	|ИЗ
	|	&ТаблицаВычеты КАК Вычеты
	|ГДЕ
	|	Вычеты.ПредоставлятьВычет = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычетаИПН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроверкаВычеты.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ВТ_ПроверкаВычеты.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_ПроверкаВычеты КАК ВТ_ПроверкаВычеты
	|ГДЕ
	|	ВТ_ПроверкаВычеты.ВидВычетаИПН.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПроверкаВычеты.НомерСтроки,
	|	ВТ_ПроверкаВычеты.ВидВычетаИПН";
	
	
	Если ЗначениеЗаполнено(МесяцЗавершения) Тогда
		
		ТекстЗапроса = 	ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПрочиеВычеты.ВидВычетаИПН КАК Справочник.ВычетыИПН) КАК ВидВычетаИПН,
		|	ПрочиеВычеты.ДействуетПо КАК ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПроверкаПрочиеВычеты
		|ИЗ
		|	&ТаблицаПрочиеВычеты КАК ПрочиеВычеты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидВычетаИПН,
		|	ДействуетПо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПроверкаПрочиеВычеты.ВидВычетаИПН,
		|	ВТ_ПроверкаВычеты.НомерСтроки
		|ИЗ
		|	ВТ_ПроверкаПрочиеВычеты КАК ВТ_ПроверкаПрочиеВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроверкаВычеты КАК ВТ_ПроверкаВычеты
		|		ПО ВТ_ПроверкаПрочиеВычеты.ВидВычетаИПН = ВТ_ПроверкаВычеты.ВидВычетаИПН
		|ГДЕ
		|	ВТ_ПроверкаПрочиеВычеты.ДействуетПо > &МесяцЗавершения";
		
		Запрос.УстановитьПараметр("ТаблицаПрочиеВычеты"	, ПрочиеВычеты.Выгрузить());
		Запрос.УстановитьПараметр("МесяцЗавершения"		, МесяцЗавершения);

	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаВычеты"		, Вычеты.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("ВидВычетаИПН",Выборка.ВидВычетаИПН);
		МассивСтрокПрочиеВычеты = ПрочиеВычеты.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрокПрочиеВычеты.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 для вычета ""%2"" не заполнен график.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.ВидВычетаИПН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
				"Объект.Вычеты["+ (Выборка.НомерСтроки - 1) + "].ВидВычетаИПН",,Отказ);
		КонецЕсли;
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МесяцЗавершения) Тогда
		Выборка = Результат[3].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru='В строке %1 для вычета ""%2"" в графике указана дата окончания действия, превышающая дату окончания действия заявления.'");	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.ВидВычетаИПН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
				"Объект.Вычеты["+ (Выборка.НомерСтроки - 1) + "].ВидВычетаИПН",,Отказ);
					
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
