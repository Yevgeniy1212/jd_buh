
#Область Переменные

&НаКлиенте
Перем ЗакрыватьФорму;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПрочитатьВычетыПредыдущегоМесяца();
		
		ПодготовитьФормуНаСервере();
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	УстановитьРасшифровкиВычетов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Если Сообщение.Поле = "Месяц" Тогда
			Сообщение.ПутьКДанным	= Сообщение.Поле + "Строкой";
			Сообщение.Поле			= "";
		КонецЕсли;
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("ИзмененыВычеты", Объект.Сотрудник, ЭтаФорма);
	УстановитьРасшифровкиВычетов();
	
	Если ПараметрыЗаписи.Свойство("ЗакрыватьФорму") Тогда
		ЗакрыватьФорму = ПараметрыЗаписи.ЗакрыватьФорму;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ТекущийОбъект.ДополнительныеСвойства.ЗакрыватьФорму);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
		
		Если ТипЗнч(СтрокаМассива) <> Тип("СправочникСсылка.ВычетыИПН") Тогда
			Продолжить;
		КонецЕсли;	
			
		Если Объект.Вычеты.НайтиСтроки(Новый Структура("ВидВычетаИПН", СтрокаМассива)).Количество() = 0 Тогда
			НоваяСтрока 					= Объект.Вычеты.Добавить();	
			НоваяСтрока.ВидВычетаИПН 		= СтрокаМассива;
			НоваяСтрока.ПредоставлятьВычет 	= Истина;
			ЗаполнитьРасшифровкуВСтроке(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;	

	УстановитьОтображениеПредупрежденияПриРедактировании(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗакрыватьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""заявление на предоставление вычетов ипн"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Отказ = Истина;
		ЗакрыватьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокПунктовМеню = Новый СписокЗначений;
	СписокПунктовМеню.Добавить("Сотрудники", НСтр("ru = 'Из списка сотрудников'",));
	СписокПунктовМеню.Добавить("ФизическиеЛица", НСтр("ru = 'Из списка физических лиц'",));
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзМенюЗавершение(ВыбранноеДействие, Параметры) Экспорт
	
	Если НЕ ВыбранноеДействие = Неопределено Тогда
		
		Если ВыбранноеДействие.Значение = "Сотрудники" Тогда
			
			ПараметрыФормы			= Новый Структура;
			ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца"	, Истина);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"			, Истина);
			ПараметрыФормы.Вставить("РежимВыбора"					, Истина);
			ПараметрыФормы.Вставить("ОтборОрганизация"				, Объект.Организация);
			ПараметрыФормы.Вставить("ВыбиратьФизЛицо"				, Истина);
			ПараметрыФормы.Вставить("ВыбиратьТолькоРезидентовРК"    , Истина);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

			ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элементы.ФизическоеЛицо,,,,ОбработчикОповещения, Режим);
			
		Иначе
			
			ПараметрыФормы			= Новый Структура;
			ПараметрыФормы.Вставить("ВыбиратьТолькоРезидентовРК"    , Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока" 				, Объект.Сотрудник);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элементы.ФизическоеЛицо,,,,ОбработчикОповещения, Режим);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.ВычетыИПН.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,,Режим)
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", Модифицированность);
	
	ПроверитьКорректностьМесяцев();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", , Оповещение,Объект.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	ПроверитьКорректностьМесяцев();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", Направление, Модифицированность);
	
	ПроверитьКорректностьМесяцев();
	ПрочитатьВычетыПредыдущегоМесяца();

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ПроверитьКорректностьМесяцев();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцЗавершения", "МесяцЗавершенияСтрокой", Модифицированность);
	УстановитьМесяцЗавершения();
	ПроверитьКорректностьМесяцев();	
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцЗавершенияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцЗавершения", "МесяцЗавершенияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	УстановитьМесяцЗавершения();
	ПроверитьКорректностьМесяцев();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцЗавершения", "МесяцЗавершенияСтрокой", Направление, Модифицированность);
	УстановитьМесяцЗавершения();
	ПроверитьКорректностьМесяцев();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗавершенияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Объект.МесяцЗавершения = Дата(1,1,1);	
	КонецЕсли;	
	
	УстановитьМесяцЗавершения();
	ПроверитьКорректностьМесяцев();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВычеты

&НаКлиенте
Процедура ВычетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Вычеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле.ГиперссылкаЯчейки И ЗначениеЗаполнено(ТекущиеДанные.Расшифровка) Тогда
		РедактированиеГрафикиВычетов(ТекущиеДанные);
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вычеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьПрочиеВычеты(ТекущиеДанные.ВидВычетаИПН);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыВидВычетаИПНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Вычеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ 			= Ложь;
	ИндексСтроки 	= ТекущиеДанные.НомерСтроки - 1;
	
	ПроверитьДублированиеВидаВычета(Объект, ТекущиеДанные.ВидВычетаИПН, ИндексСтроки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные.ПредоставлятьВычет = Истина;
		
	ЗаполнитьРасшифровкуВСтроке(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьОтображениеПредупрежденияПриРедактировании(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПредупрежденияПриРедактировании(Форма)
	
	Если Форма.Объект.Вычеты.Количество() = 0 Тогда
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;	
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МесяцСтрокой",
		"ОтображениеПредупрежденияПриРедактировании",
		ЗначениеОтображениеПредупрежденияПриРедактировании);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицо",
		"ОтображениеПредупрежденияПриРедактировании",
		ЗначениеОтображениеПредупрежденияПриРедактировании);
	
КонецПроцедуры	
	
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	МесяцСтрокой 			= РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.Месяц);
	МесяцЗавершенияСтрокой 	= РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.МесяцЗавершения);

	УстановитьИнформационнуюНадписьОВозможностиПроведения();	
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	УстановитьОтображениеПредупрежденияПриРедактировании(ЭтаФорма);
	
	Элементы.ВычетыПодбор.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявлениеНаПредоставлениеВычетовИПН);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
		
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПрочитатьВычетыПредыдущегоМесяца()
	
	Если Объект.Сотрудник.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Месяц",								Объект.Месяц);
	Запрос.УстановитьПараметр("ФизическоеЛицо",						Объект.Сотрудник);
	Запрос.УстановитьПараметр("Ссылка",								Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаОграниченияПолученияДанных",		'20180101');
	Запрос.УстановитьПараметр("ПустаяДата",							Дата(1,1,1));
	Запрос.УстановитьПараметр("СинонимПодробнее", НСтр("ru = 'Подробнее'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВычетыФизическихЛицИПНСрезПоследних.ПредоставлятьВычет,
	|	ВычетыФизическихЛицИПНСрезПоследних.ВидВычета КАК ВидВычетаИПН,
	|	ВычетыФизическихЛицИПНСрезПоследних.Основание,
	|	ВЫБОР
	|		КОГДА ВычетыФизическихЛицИПНСрезПоследних.ВидВычета.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
	|			ТОГДА &СинонимПодробнее
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Расшифровка
	|ИЗ
	|	РегистрСведений.ВычетыФизическихЛицИПН.СрезПоследних(
	|			&Месяц,
	|			Регистратор <> &Ссылка
	|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ВычетыФизическихЛицИПНСрезПоследних
	|ГДЕ
	|	ВычетыФизическихЛицИПНСрезПоследних.Период >= &ДатаОграниченияПолученияДанных
	|	И ВЫБОР
	|			КОГДА ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо >= &Месяц
	|		КОНЕЦ
	|	И ВычетыФизическихЛицИПНСрезПоследних.ПредоставлятьВычет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыФизическихЛицИПНСрезПоследних.ВидВычета,
	|	ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.Вычеты.Загрузить(РезультатЗапроса);
	
	Запрос.УстановитьПараметр("Вычеты",РезультатЗапроса.ВыгрузитьКолонку("ВидВычетаИПН"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеВычеты.ВидВычета КАК ВидВычетаИПН,
	|	ВЫБОР
	|		КОГДА ПрочиеВычеты.ДействуетС < &Месяц
	|			ТОГДА &Месяц
	|		ИНАЧЕ ПрочиеВычеты.ДействуетС
	|	КОНЕЦ КАК ДействуетС,
	|	ПрочиеВычеты.Размер КАК Размер,
	|	ПрочиеВычеты.ДействуетПо КАК ДействуетПо,
	|	ПрочиеВычеты.Основание КАК ДокументПодтверждающийПравоНаВычет
	|ПОМЕСТИТЬ ВТ_ПрочиеВычеты
	|ИЗ
	|	РегистрСведений.ПрочиеВычетыФизическихЛицИПН.СрезПоследних(
	|			&Месяц,
	|			Регистратор <> &Ссылка
	|				И ФизическоеЛицо = &ФизическоеЛицо
	|				И ВидВычета В (&Вычеты)) КАК ПрочиеВычеты
	|ГДЕ
	|	ПрочиеВычеты.Период >= &ДатаОграниченияПолученияДанных
	|	И ПрочиеВычеты.Размер <> 0
	|	И ПрочиеВычеты.ДействуетПо > &Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидВычетаИПН,
	|	ДействуетС,
	|	ДействуетПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеВычеты.ВидВычетаИПН КАК ВидВычетаИПН,
	|	ПрочиеВычеты.ДействуетС КАК ДействуетС,
	|	ПрочиеВычеты.Размер КАК Размер,
	|	ПрочиеВычеты.ДействуетПо КАК ДействуетПо,
	|	ПрочиеВычеты.ДокументПодтверждающийПравоНаВычет КАК ДокументПодтверждающийПравоНаВычет
	|ИЗ
	|	ВТ_ПрочиеВычеты КАК ПрочиеВычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрочиеВычеты КАК ПересечениеПериодов
	|		ПО ПрочиеВычеты.ВидВычетаИПН = ПересечениеПериодов.ВидВычетаИПН
	|			И (ПересечениеПериодов.ДействуетС > ПрочиеВычеты.ДействуетС)
	|			И (ПересечениеПериодов.ДействуетС < ПрочиеВычеты.ДействуетПо)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПересечениеПериодов.ВидВычетаИПН ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидВычетаИПН,
	|	ДействуетС";

	
	Объект.ПрочиеВычеты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	УстановитьИнформационнуюНадписьОВозможностиПроведения();

	УстановитьОтображениеПредупрежденияПриРедактировании(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнформационнуюНадписьОВозможностиПроведения()
	
	ИнформацияОВозможностиПроведения = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Документы.ЗаявлениеНаПредоставлениеВычетовИПН.КонфликтующиеРегистраторы(
		Объект.Ссылка, Объект.Месяц, Объект.Сотрудник);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ИнформацияОВозможностиПроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ не может быть проведен. На %1 уже введено заявление'"), НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")));
			
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявлениеНаПредоставлениеВычетовИПН") Тогда
			
			ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='Документ не может быть проведен. На %1 уже введено заявление на вычеты (<a href=""%2"">%3</a>)'"),
				НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
				ПолучитьНавигационнуюСсылку(Выборка.Регистратор),
				Выборка.ПредставлениеРегистратора);
				
		Иначе
			
			ОрганизацияРегистратора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Регистратор, "Организация");
			Если Объект.Организация = ОрганизацияРегистратора Тогда
				
				ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru='Документ не может быть проведен. На %1 уже введено заявление о прекращении вычетов (<a href=""%2"">%3</a>)'"),
					НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
					ПолучитьНавигационнуюСсылку(Выборка.Регистратор),
					Выборка.ПредставлениеРегистратора);
				
			Иначе
				
				ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru='Документ не может быть проведен. На %1 уже введено заявление о прекращении вычетов в другой организации. Если необходимо перенести применение вычетов в %2, <a href=""ОтменаЗаявления"">отмените заявление</a> о прекращении вычетов и проведите это заявление'"),
					НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
					Объект.Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияОВозможностиПроведения", "Заголовок", ИнформацияОВозможностиПроведения);
	
	Элементы.ИнформацияОВозможностиПроведения.Видимость = ИнформацияОВозможностиПроведения <> "";
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаявлениеОПрекращенииВычетов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Документы.ЗаявлениеНаПредоставлениеВычетовИПН.КонфликтующиеРегистраторы(
		Объект.Ссылка, Объект.Месяц, Объект.Сотрудник);
		
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Заявление = Выборка.Регистратор.ПолучитьОбъект();
		Заявление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьИнформационнуюНадписьОВозможностиПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьМесяцев()
	
	КонтрольМесяца();
	
	Если Объект.Месяц > Объект.МесяцЗавершения
		И ЗначениеЗаполнено(Объект.МесяцЗавершения) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Месяц начала действия заявления превышает месяц окончания '"), ,"МесяцЗавершенияСтрокой");
		
		Объект.МесяцЗавершения 	= КонецМесяца(Объект.Месяц);
		МесяцЗавершенияСтрокой 	= РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.МесяцЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольМесяца()
	
	ДатаКонтроля = '2018-01-01';
	
	Если Объект.Месяц < ДатаКонтроля Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрЗаменить(НСтр("ru='Заявление применяется с %1 года'"),"%1", Формат(ДатаКонтроля, "Л=ru_RU; ДФ='dd ММММ гггг'")), ,"МесяцСтрокой");
		Объект.Месяц = НачалоМесяца(ДатаКонтроля);
		МесяцСтрокой = НСтр("ru='Январь 2018'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМесяцЗавершения()
	
	Если ЗначениеЗаполнено(Объект.МесяцЗавершения) Тогда
		Объект.МесяцЗавершения = КонецМесяца(Объект.МесяцЗавершения);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьРасшифровкиВычетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вычеты.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Вычеты.ВидВычетаИПН.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			ТОГДА &СинонимПодробнее
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Расшифровка
		|ИЗ
		|	Документ.ЗаявлениеНаПредоставлениеВычетовИПН.Вычеты КАК Вычеты
		|ГДЕ
		|	Вычеты.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СинонимПодробнее", НСтр("ru = 'Подробнее'"));
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.Вычеты Цикл
		ПараметрыОтбора = Новый Структура("НомерСтроки",Строка.НомерСтроки);
		МассивСтрок = ТаблицаРезультат.НайтиСтроки(ПараметрыОтбора);
		Строка.Расшифровка = ?(МассивСтрок.Количество()>0,МассивСтрок[0].Расшифровка,"");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеГрафикиВычетов(ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ВидВычетаИПН",					ДанныеСтроки.ВидВычетаИПН);
	ПараметрыОткрытия.Вставить("Месяц",							Объект.Месяц);
	ПараметрыОткрытия.Вставить("МесяцЗавершения",				Объект.МесяцЗавершения);
	ПараметрыОткрытия.Вставить("АдресВХранилищеПрочиеВычеты",	АдресВХранилищеПрочиеВычеты(ДанныеСтроки.ВидВычетаИПН));
	
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",		ЭтаФорма.ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеГрафикиВычетовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаявлениеНаПредоставлениеВычетовИПН.Форма.РедактированиеГрафикаВычетов", ПараметрыОткрытия, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеГрафикиВычетовЗавершение(РезультатыРедактирования,ДопПараметры) Экспорт
	
	Если РезультатыРедактирования <> Неопределено И РезультатыРедактирования.Модифицированность Тогда
		РедактированиеГрафикиВычетовЗавершениеНаСервере(РезультатыРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеГрафикиВычетовЗавершениеНаСервере(РезультатыРедактирования)
	
	УдалитьПрочиеВычеты(РезультатыРедактирования.ВидВычетаИПН);
	
	ТаблицаВидВычетаИПН = ПолучитьИзВременногоХранилища(РезультатыРедактирования.АдресВХранилищеПрочиеВычеты);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВидВычетаИПН, Объект.ПрочиеВычеты);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеПрочиеВычеты(ВидВычетаИПН) Экспорт
	
	ТаблицаОтбора = Объект.ПрочиеВычеты.Выгрузить(Новый Структура("ВидВычетаИПН",ВидВычетаИПН),"ВидВычетаИПН,Размер,ДействуетПо,ДействуетС");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОтбора, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасшифровкуВСтроке(Идентификатор)
	
	ТекущиеДанные = Объект.Вычеты.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Расшифровка = 
		?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ВидВычетаИПН, "ПредоставлениеВычета") = 
			Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам, НСтр("ru = 'Подробнее'"),"");
			
КонецПроцедуры

&НаСервере
Процедура УдалитьПрочиеВычеты(ВидВычетаИПН)
	
	УдаляемыеСтроки = Объект.ПрочиеВычеты.НайтиСтроки(Новый Структура("ВидВычетаИПН", ВидВычетаИПН));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.ПрочиеВычеты.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублированиеВидаВычета(Объект, ВидВычетаИПН, ИндексСтроки, Отказ)
	
	НайденныеСтроки = Объект.Вычеты.НайтиСтроки(Новый Структура("ВидВычетаИПН", ВидВычетаИПН)).Количество();
	
	Если НайденныеСтроки > 1 Тогда
		ТекстСообщения = НСтр("ru='В строке %1 повторно указан вид вычета, отраженный в документе.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИндексСтроки + 1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			, 
			, "Вычеты[" +  ИндексСтроки + "].ВидВычетаИПН"
			, "Объект",
			Отказ);
			
		ВидВычетаИПН = Неопределено;
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОВозможностиПроведенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтменаЗаявления" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтменитьЗаявлениеОПрекращенииВычетов();
		
		ПоказатьПредупреждение(, НСтр("ru='Заявление о прекращении предоставления вычетов отменено'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
