#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПроведениеВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно, ЗакрытиеМесяца, ЗакрыватьДокумент", Истина, СтруктураПараметров.ЗакрытиеМесяца, СтруктураПараметров.ЗакрыватьДокумент);
	
	ЗакрытиеМесяцаОбъект = СтруктураПараметров.ЗакрытиеМесяца.ПолучитьОбъект();
	
	ЗакрытиеМесяцаОбъект.УбранФлажокПереносНЗПБУ = СтруктураПараметров.УбранФлажокПереносНЗПБУ;
	ЗакрытиеМесяцаОбъект.УбранФлажокПереносНЗПНУ = СтруктураПараметров.УбранФлажокПереносНЗПНУ;
	//Если СтруктураПараметров.Свойство("ВидРегламентнойОперации") Тогда
	//	ЗакрытиеМесяцаОбъект.ВидРегламентнойОперации = СтруктураПараметров.ВидРегламентнойОперации;
	//	ДанныеДляЗаполнения.Вставить("ВидРегламентнойОперации", СтруктураПараметров.ВидРегламентнойОперации);
	//КонецЕсли;
	
	Попытка
		ЗакрытиеМесяцаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		УспешноВыполнено = Истина;
	Исключение
		УспешноВыполнено = Ложь;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ДанныеДляЗаполнения.ВыполненоУспешно = УспешноВыполнено;
	
	ДанныеДляЗаполнения.Вставить("СообщенияПользователю", ПолучитьСообщенияПользователю(Истина));
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПроведениеСпискаДокументовВФоне(СтруктураПараметров, АдресХранилища, МассивРегОпераций = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("МассивРегОпераций") Тогда
		МассивРегОпераций = СтруктураПараметров.МассивРегОпераций;
	КонецЕсли;
	
	Если МассивРегОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивРегОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	//ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно, МассивРегОпераций", Истина, СтруктураПараметров.МассивРегОпераций);
	ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно", Истина);
	МассивОбработанных  = Новый Массив;
	МассивНепроведенных = Новый Массив;
	
	// Закрытие периода из Помощника:
	//    если не удалось выполнить регламентную операцию,
	//    то операции, которые находятся с ней в одной группе будут выполнены,
	//    но операции, которые находятся в следующих группах не должны выполняться.
	НомерГруппыНевыполненнойОперации = 100;
	
	УспешноВыполненСписокОпераций = Истина;
	
	Для Каждого ДокументЗакрытия Из МассивРегОпераций Цикл
		
		Если ТипЗнч(ДокументЗакрытия) = Тип("ДокументСсылка.ЗакрытиеМесяца") Тогда
			
			ОбъектЗакрытиеМесяца = ДокументЗакрытия.ПолучитьОбъект();
							
			Попытка
				ОбъектЗакрытиеМесяца.Записать(РежимЗаписиДокумента.Проведение);
				УспешноВыполнено = Истина;
			Исключение
				МассивНепроведенных.Добавить(ДокументЗакрытия);
				УспешноВыполнено = Ложь;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
			КонецПопытки;
			
			МассивОбработанных.Добавить(ДокументЗакрытия);

			УспешноВыполненСписокОпераций = УспешноВыполненСписокОпераций И УспешноВыполнено;
			
		ИначеЕсли ТипЗнч(ДокументЗакрытия) = Тип("Структура") Тогда   // Выполняется закрытие месяца из Помощника
			
			Если НомерГруппыНевыполненнойОперации < ДокументЗакрытия.Группа Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыСообщений = Новый Структура;
			ПараметрыСообщений.Вставить("ВидОперации"           , ДокументЗакрытия.ВидОперации);
			ПараметрыСообщений.Вставить("МесяцНачисленияСтрокой", ДокументЗакрытия.МесяцНачисленияСтрокой);
			
			Если НЕ ЗначениеЗаполнено(ДокументЗакрытия.СсылкаЗакрытиеМесяца) Тогда
				
				ОбъектЗакрытиеМесяца = Документы.ЗакрытиеМесяца.СоздатьДокумент();
				
				ОбъектЗакрытиеМесяца.Дата        = ДокументЗакрытия.Дата;
				ОбъектЗакрытиеМесяца.Комментарий = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = '[ВидОперации] за [МесяцНачисленияСтрокой]'", ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыСообщений);
				ОбъектЗакрытиеМесяца.Организация = ДокументЗакрытия.Организация;
				ОбъектЗакрытиеМесяца.СтруктурноеПодразделение = ДокументЗакрытия.СтруктурноеПодразделение;
				
			Иначе
				ОбъектЗакрытиеМесяца = ДокументЗакрытия.СсылкаЗакрытиеМесяца.ПолучитьОбъект();
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Начато выполнение операции: [ВидОперации] за [МесяцНачисленияСтрокой]'"), ПараметрыСообщений);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			ОбъектЗакрытиеМесяца.ВидРегламентнойОперации = ДокументЗакрытия.ВидОперации;
			
			ИмяОперацииЗакрытияМесяца = ДокументЗакрытия.ИмяОперацииЗакрытияМесяца;
			ОбъектЗакрытиеМесяца[ИмяОперацииЗакрытияМесяца] = Истина;
			
			Если ОбъектЗакрытиеМесяца.ПереоценкаВалютныхСредствБУ Тогда
				
				// Из обработки ЗакрытиеМесяца передается таблица КурсыВалют,
				// которую необходимо использовать при проведении документа ЗакрытиеМесяца.
				
				// Таблица КурсыВалют используется только в операции ПереоценкаВалютныхСредствБУ,
				// поэтому в документе закрытие месяца она заполняется, только если в нем есть эта операция.
				
				ОбъектЗакрытиеМесяца.КурсыВалют.Загрузить(ДокументЗакрытия.КурсыВалют);
				
			КонецЕсли;
			
			Попытка 
				ОбъектЗакрытиеМесяца.Записать();
			Исключение
				
				Если ЗначениеЗаполнено(ОбъектЗакрытиеМесяца.Ссылка) Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось записать документ ""[Документ]"".'");
					ПараметрыСообщений.Вставить("Документ", ОбъектЗакрытиеМесяца.Ссылка);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось записать документ ""с видом операции: [ВидОперации]"".'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, ПараметрыСообщений));
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
				
			КонецПопытки;
			
			Попытка
				ОбъектЗакрытиеМесяца.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				Если ЗначениеЗаполнено(ОбъектЗакрытиеМесяца.Ссылка) Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось провести документ ""[Документ]"".'");
					ПараметрыСообщений.Вставить("Документ", ОбъектЗакрытиеМесяца.Ссылка);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось провести документ ""с видом операции: [ВидОперации]"".'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, ПараметрыСообщений) + Символы.ПС + НСтр("ru = 'Подробности смотрите в Журнале регистрации.'"));
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
				
			КонецПопытки;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Закончено выполнение операции: [ВидОперации] за [МесяцНачисленияСтрокой]'"), ПараметрыСообщений);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Если ОбъектЗакрытиеМесяца.Проведен Тогда
				УспешноВыполнено = Истина;
			Иначе
				УспешноВыполнено = Ложь;
				НомерГруппыНевыполненнойОперации = ДокументЗакрытия.Группа;	
			КонецЕсли;
			
			МассивОбработанных.Добавить(ОбъектЗакрытиеМесяца.Ссылка);
			
			УспешноВыполненСписокОпераций = УспешноВыполненСписокОпераций И УспешноВыполнено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("ВыполненоУспешно", УспешноВыполненСписокОпераций);
	ДанныеДляЗаполнения.Вставить("МассивРегОпераций", МассивОбработанных);
	
	Если МассивНепроведенных.Количество() > 0 Тогда
		ДанныеДляЗаполнения.Вставить("МассивНепроведенных", МассивНепроведенных);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("СообщенияПользователю", ПолучитьСообщенияПользователю(Истина));
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ИСТИНА КАК УчитыватьКПН,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаНУ,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.АмортизацияНМАБУ,
	|	Реквизиты.АмортизацияОСБУ,
	|	Реквизиты.АмортизацияФАНУ,
	|	Реквизиты.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно,
	|	Реквизиты.ЗакрытиеПодотчетныхСуммБУ,
	|	Реквизиты.ЗакрытиеПодотчетныхСуммНУ,
	|	Реквизиты.ЗакрытиеСчетовНУ,
	|	Реквизиты.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ,
	|	Реквизиты.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ,
	|	Реквизиты.ПереносНЗПБУ,
	|	Реквизиты.ПереносНЗПНУ,
	|	Реквизиты.ПереоценкаВалютныхСредствБУ,
	|	Реквизиты.РасчетВременныхРазниц,
	|	Реквизиты.РасчетВычетаПоРеализованнымТоварам,
	|	Реквизиты.РасчетВычетовПоНалогам,
	|	Реквизиты.РасчетВычетовПоПреференциям,
	|	Реквизиты.РасчетВычетовПоРасходамНаРемонт,
	|	Реквизиты.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА,
	|	Реквизиты.РасчетИтоговогоДоходаУбыткаБУ,
	|	Реквизиты.РасчетНалогаНаПрибыль,
	|	Реквизиты.РасчетНДСКЗачету,
	|	Реквизиты.ЗачетАвансовИПереплатПоНДС,
	|	Реквизиты.РасчетСтоимостиПродукцииБУ,
	|	Реквизиты.РасчетСтоимостиПродукцииНУ,
	|	Реквизиты.РеформацияБалансаБУ,
	|	Реквизиты.СписаниеПриВыбытииВсехФАГруппы,
	|	Реквизиты.СписаниеРБПБУ,
	|	Реквизиты.СписаниеРезерваПоПереоценкеОСБУ,
	|	Реквизиты.СписаниеСтоимостногоБалансаГруппыМенееМинимума,
	|	Реквизиты.РасчетИтоговогоДоходаУбыткаНУ,
	|	Реквизиты.РеформацияБалансаНУ,
	|	НАЧАЛОПЕРИОДА(Реквизиты.Дата, МЕСЯЦ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(Реквизиты.Дата, МЕСЯЦ) КАК КонецПериода,
	|	НЕОПРЕДЕЛЕНО КАК НачГраница,
	|	НЕОПРЕДЕЛЕНО КАК КонГраница,
	|	&УбранФлажокПереносНЗПБУ КАК УбранФлажокПереносНЗПБУ,
	|	&УбранФлажокПереносНЗПНУ КАК УбранФлажокПереносНЗПНУ,
	|	Реквизиты.Ответственный
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.Организация КАК НалогоплательщикАкциза,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.АмортизацияНМАБУ,
	|	Реквизиты.АмортизацияОСБУ,
	|	Реквизиты.АмортизацияФАНУ,
	|	Реквизиты.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно,
	|	Реквизиты.ЗакрытиеПодотчетныхСуммБУ,
	|	Реквизиты.ЗакрытиеПодотчетныхСуммНУ,
	|	Реквизиты.ЗакрытиеСчетовНУ,
	|	Реквизиты.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ,
	|	Реквизиты.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ,
	|	Реквизиты.ПереносНЗПБУ,
	|	Реквизиты.ПереносНЗПНУ,
	|	Реквизиты.ПереоценкаВалютныхСредствБУ,
	|	Реквизиты.РасчетВременныхРазниц,
	|	Реквизиты.РасчетВычетаПоРеализованнымТоварам,
	|	Реквизиты.РасчетВычетовПоНалогам,
	|	Реквизиты.РасчетВычетовПоПреференциям,
	|	Реквизиты.РасчетВычетовПоРасходамНаРемонт,
	|	Реквизиты.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА,
	|	Реквизиты.РасчетИтоговогоДоходаУбыткаБУ,
	|	Реквизиты.РасчетНалогаНаПрибыль,
	|	Реквизиты.РасчетНДСКЗачету,
	|	Реквизиты.ЗачетАвансовИПереплатПоНДС,
	|	Реквизиты.РасчетСтоимостиПродукцииБУ,
	|	Реквизиты.РасчетСтоимостиПродукцииНУ,
	|	Реквизиты.РеформацияБалансаБУ,
	|	Реквизиты.СписаниеПриВыбытииВсехФАГруппы,
	|	Реквизиты.СписаниеРБПБУ,
	|	Реквизиты.СписаниеРезерваПоПереоценкеОСБУ,
	|	Реквизиты.СписаниеСтоимостногоБалансаГруппыМенееМинимума,
	|	Реквизиты.РасчетИтоговогоДоходаУбыткаНУ,
	|	Реквизиты.РеформацияБалансаНУ,
	|	Реквизиты.НачалоПериода,
	|	Реквизиты.КонецПериода,
	|	Реквизиты.НачГраница,
	|	Реквизиты.КонГраница,
	|	Реквизиты.Ответственный,
	|	Реквизиты.УбранФлажокПереносНЗПБУ,
	|	Реквизиты.УбранФлажокПереносНЗПНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты";


	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументОбъект, УбранФлажокПереносНЗПБУ, УбранФлажокПереносНЗПНУ, Отказ) Экспорт 
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УбранФлажокПереносНЗПБУ",	УбранФлажокПереносНЗПБУ);
	Запрос.УстановитьПараметр("УбранФлажокПереносНЗПНУ",	УбранФлажокПереносНЗПНУ);
		
	МассивВалют =  Новый Массив;
	МассивВалют = ДокументСсылка.КурсыВалют.ВыгрузитьКолонку("Валюта");
	МассивВалют.Добавить(ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

	Запрос.УстановитьПараметр("Организация",				ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	ДокументСсылка.СтруктурноеПодразделение);

	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке",	ПроцедурыБухгалтерскогоУчета.СчетаПодлежащиеПереоценке(Истина));
	Запрос.УстановитьПараметр("ГраницаНачПериода",			Новый Граница(НачалоМесяца(ДокументСсылка.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаОстатков",			Новый Граница(КонецМесяца(ДокументСсылка.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивВалют",				МассивВалют);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	// Добавить колонку "Объект" и заполнить ее объектом текущего документа.
	// Объект текущего документа может потребоваться, например, для сохранения ошибок и комментариев.
	ТаблицаРеквизиты.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументОбъект.ЗакрытиеМесяца"));
	Для Каждого СтрокаТаблицаРеквизиты Из ТаблицаРеквизиты Цикл
		СтрокаТаблицаРеквизиты.Объект = ДокументОбъект;
	КонецЦикла;
	
	// Добавить колонку "ВидРегламентнойОперации" и заполнить ее текущим видом рег. операции.
	// ВидРегламентнойОперации может потребоваться, например, при сохранения ошибок и комментариев.
	ТаблицаРеквизиты.Колонки.Добавить("ВидРегламентнойОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	Для Каждого СтрокаТаблицаРеквизиты Из ТаблицаРеквизиты Цикл
		СтрокаТаблицаРеквизиты.ВидРегламентнойОперации = ДокументОбъект.ВидРегламентнойОперации;
	КонецЦикла;	
	
	ТаблицаРеквизиты.Колонки.Добавить("ДопПараметры");
	
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль ИЛИ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяАналитическийУчетОСПоМОЛ 				= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитическийУчетОСПоПодразделениям 		= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);

	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	НачГраница =  Новый Граница(Реквизиты.НачалоПериода, ВидГраницы.Включая) ;
	КонГраница =  Новый Граница(Реквизиты.КонецПериода, ВидГраницы.Включая);
	
	Реквизиты.Вставить("НачГраница", НачГраница);
	Реквизиты.Вставить("КонГраница", КонГраница);
	
	Налогоплательщик       = Реквизиты.Организация;
	НалогоплательщикАкциза = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		НалогоплательщикАкциза = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.Акциз);
									Налогоплательщик       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",       Налогоплательщик);
	Реквизиты.Вставить("НалогоплательщикАкциза", НалогоплательщикАкциза);
	
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 , "Налогоплательщик");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НалогоплательщикАкциза	 , "НалогоплательщикАкциза");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль	 , "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом, "ВедениеУчетаВременныхРазницБалансовымМетодом");
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НачГраница, "НачГраница");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(КонГраница, "КонГраница");

	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВалюнаяПереоценка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
				  + ТекстЗапросаРеквизитыАмортизацияНМА (НомераТаблиц, ПараметрыПроведения, Реквизиты)
				  + ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("Содержание",     НСтр("ru = 'Переоценка валютных средств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",     НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("Ссылка",     	Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом", ВедениеУчетаВременныхРазницБалансовымМетодом);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоМОЛ"				, ВедетсяАналитическийУчетОСПоМОЛ);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоПодразделениям"	, ВедетсяАналитическийУчетОСПоПодразделениям);
	Запрос.УстановитьПараметр("НомерЖурналаНМА"	, "НА");
	Запрос.УстановитьПараметр("НомерЖурналаОС"	, "ОС");
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		Если ПараметрыПроведения.РеквизитыАмортизацияНМА <> Неопределено Тогда
			ПараметрыПроведения.РеквизитыАмортизацияНМА.ЗаполнитьЗначения(ДокументОбъект, "Объект");			
		КонецЕсли; 		
		Если ПараметрыПроведения.РеквизитыАмортизацияОС <> Неопределено Тогда
			ПараметрыПроведения.РеквизитыАмортизацияОС.ЗаполнитьЗначения(ДокументОбъект, "Объект");
		КонецЕсли; 
		
		Если ПараметрыПроведения.ПереоценкаВалютныхОстатков <> Неопределено Тогда
			ПараметрыПроведения.ПереоценкаВалютныхОстатков.ЗаполнитьЗначения(ДокументОбъект, "Объект");			
		КонецЕсли; 
	КонецЕсли;  

	Возврат ПараметрыПроведения;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке)
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки); 
	
КонецПроцедуры

// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ТекстЗапросаВалюнаяПереоценка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ПереоценкаВалютныхСредствБУ Тогда 
		ПараметрыПроведения.Вставить("ПереоценкаВалютныхОстатков"  , Неопределено);
		Возврат ТекстЗапроса;
	Иначе
		НомераТаблиц.Вставить("ПереоценкаВалютныхОстатков"         , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаСчетаИВидыСубконто" , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаВалютныхОборотов"            , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаВалютныхОстатков"   , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаВалютныхОстатков"            , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаНеЗаполненныхВалют"          , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаКурсовВалют"                 , НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Регистратор,
		|	ЗакрытиеМесяца.Организация КАК Организация,
		|	ЗакрытиеМесяца.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ЗакрытиеМесяца.Дата КАК Период,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ,
		|	0 КАК КурсВзаиморасчетов,
		|	0 КАК КратностьВзаиморасчетов,
		|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
		|	&Содержание КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК Объект
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЗакрытиеМесяца.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Типовой.Ссылка КАК Ссылка,
		|	ТиповойВидыСубконто1.ВидСубконто КАК ВидСубконто1,
		|	ТиповойВидыСубконто2.ВидСубконто КАК ВидСубконто2,
		|	ТиповойВидыСубконто3.ВидСубконто КАК ВидСубконто3
		|ПОМЕСТИТЬ ВТ_СчетаИВидыСубконто
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто1
		|		ПО Типовой.Ссылка = ТиповойВидыСубконто1.Ссылка
		|			И (ТиповойВидыСубконто1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто2
		|		ПО Типовой.Ссылка = ТиповойВидыСубконто2.Ссылка
		|			И (ТиповойВидыСубконто2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто3
		|		ПО Типовой.Ссылка = ТиповойВидыСубконто3.Ссылка
		|			И (ТиповойВидыСубконто3.НомерСтроки = 3)
		|ГДЕ
		|	Типовой.Ссылка В (&СчетаПодлежащиеПереоценке)
		|	И (ТиповойВидыСубконто1.ТолькоОбороты = ИСТИНА
		|		ИЛИ ТиповойВидыСубконто2.ТолькоОбороты = ИСТИНА
		|		ИЛИ ТиповойВидыСубконто3.ТолькоОбороты = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаИВидыСубконто.Ссылка КАК Счет,
		|	ТиповойОбороты.Субконто1,
		|	ТиповойОбороты.Субконто2,
		|	ТиповойОбороты.Субконто3,
		|	ТиповойОбороты.ВалютнаяСуммаОборотДт + ТиповойОбороты.ВалютнаяСуммаОборотКт КАК Сумма,
		|	ТиповойОбороты.Валюта
		|ИЗ
		|	ВТ_СчетаИВидыСубконто КАК СчетаИВидыСубконто
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
		|			&ГраницаНачПериода,
		|			&ГраницаОстатков,
		|			,
		|			Счет В (&СчетаПодлежащиеПереоценке),
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение,
		|			,
		|			) КАК ТиповойОбороты
		|	ПО СчетаИВидыСубконто.Ссылка = ТиповойОбороты.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Счет) КАК СчетПредставление,
		|	ТиповойОстатки.Счет.Наименование КАК СчетНаименование,
		|	ТиповойОстатки.Субконто1 КАК Субконто1,
		|	ТиповойОстатки.Субконто2 КАК Субконто2,
		|	ТиповойОстатки.Субконто3 КАК Субконто3,
		|	ТиповойОстатки.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Валюта) КАК ВалютаПредставление,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.СтруктурноеПодразделение
		|ПОМЕСТИТЬ ВТ_ТиповойОстатки
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ГраницаОстатков,
		|			Счет В (&СчетаПодлежащиеПереоценке),
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ТиповойОстатки.СчетПредставление КАК СчетПредставление,
		|	ТиповойОстатки.Счет.Наименование КАК СчетНаименование,
		|	ТиповойОстатки.Субконто1 КАК Субконто1,
		|	ТиповойОстатки.Субконто2 КАК Субконто2,
		|	ТиповойОстатки.Субконто3 КАК Субконто3,
		|	ТиповойОстатки.Валюта КАК Валюта,
		|	ТиповойОстатки.ВалютаПредставление КАК ВалютаПредставление,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.СтруктурноеПодразделение
		|ИЗ
		|	ВТ_ТиповойОстатки КАК ТиповойОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТиповойОстатки.Валюта
		|ИЗ
		|	ВТ_ТиповойОстатки КАК ТиповойОстатки
		|ГДЕ
		|	НЕ ТиповойОстатки.Валюта В (&МассивВалют)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ИЗ
		|	Документ.ЗакрытиеМесяца.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаВалюнаяПереоценка()

// АМОРТИЗАЦИЯ НМА
Функция ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.АмортизацияНМАБУ Тогда 
		ПараметрыПроведения.Вставить("РеквизитыАмортизацияНМА", Неопределено);
		Возврат ТекстЗапроса;
	Иначе 
		НомераТаблиц.Вставить("РеквизитыАмортизацияНМА",	НомераТаблиц.Количество());		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	НЕОПРЕДЕЛЕНО КАК Объект,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.Период КАК Период,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	&ВедениеУчетаВременныхРазницБалансовымМетодом,
		|	&ВедетсяАналитическийУчетОСПоПодразделениям,
		|	&ВедетсяАналитическийУчетОСПоМОЛ,
		|	"""" КАК Содержание,
		|	&НомерЖурналаНМА КАК НомерЖурнала,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАБУ) КАК ВидРегламентнойОперации
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияНМА()

// АМОРТИЗАЦИЯ ОС
Функция ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.АмортизацияОСБУ Тогда 
		ПараметрыПроведения.Вставить("РеквизитыАмортизацияОС", Неопределено);
		Возврат ТекстЗапроса;
	Иначе 
		НомераТаблиц.Вставить("РеквизитыАмортизацияОС",	НомераТаблиц.Количество());		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	НЕОПРЕДЕЛЕНО КАК Объект,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.Период КАК Период,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	&ВедениеУчетаВременныхРазницБалансовымМетодом,
		|	&ВедетсяАналитическийУчетОСПоПодразделениям,
		|	&ВедетсяАналитическийУчетОСПоМОЛ,
		|	"""" КАК Содержание,
		|	&НомерЖурналаОС КАК НомерЖурнала,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияОСБУ) КАК ВидРегламентнойОперации
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецЕсли
