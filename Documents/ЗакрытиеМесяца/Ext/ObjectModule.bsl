#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем УбранФлажокПереносНЗПБУ Экспорт;	
Перем УбранФлажокПереносНЗПНУ Экспорт;

Перем ВидРегламентнойОперации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	Дата = НачалоДня(КонецМесяца(Дата));
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверкаПовторовВидовОпераций(Реквизиты)
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Проверка повторов Операций, выполняемых в разрезе СП
	СтрокаРеквизитов = Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(СтрокаРеквизитов.Период));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(СтрокаРеквизитов.Период));
	Запрос.УстановитьПараметр("Организация",  СтрокаРеквизитов.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",  СтрокаРеквизитов.СтруктурноеПодразделение);
	
	// Проверка отмеченных операций
	СтруктураВидовОперацийПоОрганизации	= Новый Структура();
	СтруктураВидовОперацийПоСтруктуркам =  Новый Структура();
	
	Для ИндексРегОперации = 1 по Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		РегОперация 	= Перечисления.ВидыРегламентныхОпераций.Получить(ИндексРегОперации-1);
		ИмяРегОперации 	= Метаданные.Перечисления.ВидыРегламентныхОпераций.ЗначенияПеречисления[ИндексРегОперации-1].Имя;
		
		Если СтрокаРеквизитов[ИмяРегОперации] Тогда
			ЗакрытиеМесяца.ЗаполнитьСпискиРегламентныхОперацийПоПериодамПроверки(НачалоМесяца(СтрокаРеквизитов.Период), СтрокаРеквизитов.Организация, РегОперация, СтруктураВидовОперацийПоОрганизации,СтруктураВидовОперацийПоСтруктуркам );
		КонецЕсли; 
		
	КонецЦикла;	
	
	ТекстСообщения = "";
	
	Если СтруктураВидовОперацийПоОрганизации.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ЗакрытиеМесяца.ПроверитьПовторОперацииВОтчетномПериоде(НачалоГода(СтрокаРеквизитов.Период), КонецМесяца(СтрокаРеквизитов.Период), Организация, СтруктураВидовОперацийПоОрганизации);		
	КонецЕсли;
	
	Если СтруктураВидовОперацийПоСтруктуркам.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ЗакрытиеМесяца.ПроверитьПовторОперацииВОтчетномПериоде(НачалоГода(СтрокаРеквизитов.Период), КонецМесяца(СтрокаРеквизитов.Период), Организация, СтруктураВидовОперацийПоСтруктуркам, СтрокаРеквизитов.СтруктурноеПодразделение, ИСТИНА);		
	КонецЕсли;
	
	Возврат ТекстСообщения;	
	
Конецфункции

Процедура ПроверитьЗаполнениеДанныхДляВыполненияОперацииПереоценки(ПараметрыПроведения, Отказ)
	
	//проверим заполненность реквизитов
	Если ПараметрыПроведения.ТаблицаКурсовВалют.Количество() <> 0 Тогда
		                                                                               
		Для Каждого СтрокаВалют Из КурсыВалют Цикл
			Если Не ЗначениеЗаполнено(СтрокаВалют.Валюта) Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Валюта'"),
					СтрокаВалют.НомерСтроки, НСтр("ru = 'Курсы валют'"));
				Поле = "КурсыВалют[" + Формат(СтрокаВалют.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Валюта";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаВалют.Курс)Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Курс'"),
					СтрокаВалют.НомерСтроки, НСтр("ru = 'Курсы валют'"));
				Поле = "КурсыВалют[" + Формат(СтрокаВалют.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Курс";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаВалют.Кратность)Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Кратность'"),
					СтрокаВалют.НомерСтроки, НСтр("ru = 'Курсы валют'"));
				Поле = "КурсыВалют[" + Формат(СтрокаВалют.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Кратность";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;  
		КонецЦикла;  	
				
		Если ПараметрыПроведения.ТаблицаНеЗаполненныхВалют.Количество() <> 0 Тогда
			СтрокаСообщения = НСтр("ru='Для операции ""Переоценка валютных средств"" не заданы курсы закрытия для валют:'");		
			ПерваяСтрока = Истина;
			ЕстьОшибки   = Ложь;
			
			Для Каждого СтрокаОшибкиВалюты Из ПараметрыПроведения.ТаблицаНеЗаполненныхВалют Цикл 
				Если НЕ ЗначениеЗаполнено(СтрокаОшибкиВалюты.Валюта) Тогда				   
					Продолжить;
				КонецЕсли; 			
				Если Не ПерваяСтрока Тогда
					СтрокаСообщения = СтрокаСообщения + ", ";				   
				КонецЕсли;         			
				СтрокаСообщения = СтрокаСообщения + СтрокаОшибкиВалюты.Валюта;
				ЕстьОшибки   = Истина;
				ПерваяСтрока = Ложь;			   
			КонецЦикла;        		   
			
			Если ЕстьОшибки Тогда
				Отказ = Истина;		
				СтрокаСообщения = СтрокаСообщения + НСтр("ru='
				|Укажите курсы для указанных валют или установите переключатель  ""Использовать текущие курса регистра ""Курсы валют"""". 
				|Документ не может быть проведен!'");
				
				ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
			КонецЕсли;	  
		КонецЕсли; 		
	КонецЕсли;     
	
КонецПроцедуры

// Выполняет начисление амортизации НМА
//
Процедура НачислениеАмортизацииНМА(ПараметрыПроведения, Отказ)

	ТаблицаАмортизацииНМА = УчетНМА.ПодготовитьТаблицуАмортизацииНМАБухРегл(ПараметрыПроведения.РеквизитыАмортизацияНМА);
	
	ТаблицаНМАРаспределениеАмортизацииПоНаправлениямРегл = УправлениеВнеоборотнымиАктивамиСервер.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизацииНМА, ПараметрыПроведения.РеквизитыАмортизацияНМА, Отказ);
	
	УправлениеВнеоборотнымиАктивамиСервер.СформироватьДвиженияАмортизацииПоНаправлениямРегл(ТаблицаНМАРаспределениеАмортизацииПоНаправлениямРегл, ПараметрыПроведения.РеквизитыАмортизацияНМА,
		Движения, Отказ);  
		
	КонецПроцедуры
	                             
Процедура НачислениеАмортизацииОС(ПараметрыПроведения, Отказ)
		
	ТаблицаАмортизацииОС = УчетОС.ПодготовитьТаблицуАмортизацияОСБухРегл(ПараметрыПроведения.РеквизитыАмортизацияОС);
	
	ТаблицаРаспределениеАмортизацииПоНаправлениямРегл = УправлениеВнеоборотнымиАктивамиСервер.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизацииОС, ПараметрыПроведения.РеквизитыАмортизацияОС, Отказ);
	
	УправлениеВнеоборотнымиАктивамиСервер.СформироватьДвиженияАмортизацииПоНаправлениямРегл(ТаблицаРаспределениеАмортизацииПоНаправлениямРегл, ПараметрыПроведения.РеквизитыАмортизацияОС,
		Движения, Отказ);  
		
КонецПроцедуры

Процедура СписаниеРезерваПоПереоценкеОСБУ(ПараметрыПроведения, Отказ)

	ТаблицаРезервКСписанию = УправлениеВнеоборотнымиАктивамиСервер.ПодготовитьТаблицуСписываемогоРезерваПоПереоценке(ПараметрыПроведения.Реквизиты);
	
	ТаблицаСписаниеРезерваПоПереоценкеОС =  ЗакрытиеМесяца.ПодготовитьТаблицуСписаниеРезерваПоПереоценкеОС(
		ПараметрыПроведения.Реквизиты, ТаблицаРезервКСписанию, Отказ);
		                            		
	ЗакрытиеМесяца.СформироватьДвиженияПоСписаниюРезерваПоПереоценкеОС(ТаблицаРезервКСписанию, ТаблицаСписаниеРезерваПоПереоценкеОС, ПараметрыПроведения.Реквизиты, Движения, Отказ)
		
КонецПроцедуры
	              
Процедура ПереоценкаВалютныхСредств(ПараметрыПроведения, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	СтруктураРегламентныхТаблиц = Новый Структура;
	СтруктураРегламентныхТаблиц.Вставить("ТаблицаВалютныхОстатков", ПараметрыПроведения.ТаблицаВалютныхОстатков);
	СтруктураРегламентныхТаблиц.Вставить("ТаблицаВалютныхОборотов", ПараметрыПроведения.ТаблицаВалютныхОборотов);
	СтруктураРегламентныхТаблиц.Вставить("ТаблицаКурсовВалют",      ПараметрыПроведения.ТаблицаКурсовВалют);
	
	// Переоценка валютных остатков
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ, СтруктураРегламентныхТаблиц);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	РасчетСебестоимости.ЗаписьВВспомогательныеРегистрыСведений(
		ПараметрыПроведения.Реквизиты[0], ТаблицаПереоценка, РегистрыСведений.РасчетПереоценкиВалютныхСредств,
		"Организация, СтруктурноеПодразделение,  ПериодРасчета, Активность, Регистратор, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки",
		"Сумма,СуммаНУ,СуммаПР, СуммаВВалюте, СуммаВТенге, СуммаВТенгеНУ, СуммаВТенгеПР");

КонецПроцедуры // ПереоценкаВалютныхСредств()

Процедура СписаниеРБП(ПараметрыПроведения, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Расчет списания РБП
	ТаблицаРасчетСписанияРБП = ЗакрытиеМесяца.ПодготовитьТаблицуРасчетСписанияРБП(
		ПараметрыПроведения.Реквизиты, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияРасчетСписанияРБП(ТаблицаРасчетСписанияРБП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетУчета");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетСписания");
	ТаблицаРасчетСписанияРБП.Колонки.РБП.Имя = "Статья";
	  
	Для Каждого Строка Из ТаблицаРасчетСписанияРБП Цикл
	    Строка.СчетУчета 	= ?(ЗначениеЗаполнено(Строка.СчетУчетаБУ), Строка.СчетУчетаБУ, Строка.СчетУчетаНУ);
		Строка.СчетСписания = ?(ЗначениеЗаполнено(Строка.СчетСписанияБУ), Строка.СчетСписанияБУ, Строка.СчетСписанияНУ);
		Строка.Сумма = ?(ЗначениеЗаполнено(Строка.Сумма), Строка.Сумма, Строка.СуммаНУ);
	КонецЦикла; 
	
	РасчетСебестоимости.ЗаписьВВспомогательныеРегистрыСведений(ПараметрыПроведения.Реквизиты[0],
											ТаблицаРасчетСписанияРБП,
											РегистрыСведений.РасчетСписанияРБП,
											"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,Статья,СчетУчета,СчетСписания,ДатаНачала,ДатаОкончания,ВидУчета,КоличествоМесяцев,СуммаДоговора",											
											"Сумма,НачОстаток,КонОстаток");

КонецПроцедуры
	
// Процедура закрывает задолженность по НДС, отнесенную на конкретные СП, на 
// задолженность Организации - Плательщика НДС
Процедура ЗакрытьСуммыНДССтруктурныхПодразделений(ПараметрыПроведения, Отказ)
	
	ТаблицаЗакрытияНДСПоСП = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытияНДСПоСП(
		ПараметрыПроведения.Реквизиты, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытияНДСПоСП(ТаблицаЗакрытияНДСПоСП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

КонецПроцедуры 

Процедура РасчетСуммНДСКЗачету(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ)
	
	ПараметрыЗачетаНДС = Новый ТаблицаЗначений();
		
	ПараметрыЗачетаНДС.Колонки.Добавить("НДСНачисленныйЗаПериод",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПараметрыЗачетаНДС.Колонки.Добавить("НДСНачисленныйЗаПериодМетодаЗачета",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПараметрыЗачетаНДС.Колонки.Добавить("ПереносимыйЗачетПоНДС",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПараметрыЗачетаНДС.Колонки.Добавить("СуммаНДСРазрешенногоКЗачету",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПараметрыЗачетаНДС.Колонки.Добавить("ОбщаяСуммаНДСРазрешенногоКЗачету",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПараметрыЗачетаНДС.Колонки.Добавить("СуммаНДСНеРазрешенногоКЗачету",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	СтрокаПараметровНДС  = ПараметрыЗачетаНДС.Добавить();
	Реквизиты = ПараметрыПроведения.Реквизиты[0];	
	
	Если УчетнаяПолитикаСервер.ПолучитьПериодОтнесенияНДСВЗачет(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Месяц ТОгда
		ДатаНачалаПериодаЗачета = НачалоМесяца(Реквизиты.Период);
	Иначе
		ДатаНачалаПериодаЗачета = НачалоКвартала(Реквизиты.Период);
	КонецЕсли;	
	
	ДоляОблагаемогоОборота 	= ЗакрытиеМесяца.ПолучитьДолюОблагаемогоОборота(Реквизиты, ДатаНачалаПериодаЗачета);
	МетодОтнесенияНДСВЗачет = УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(Реквизиты.Организация, Реквизиты.Период);

	// Начисленный НДС за период
	ЗапросПоНДС = Новый Запрос;
	ЗапросПоНДС.Текст = "ВЫБРАТЬ
		//НДС, начисленный за период
		|	ЕСТЬNULL(НДСОбороты.СуммаНДСОборот, 0) КАК НачисленныйНДС,
		|	ВЫБОР КОГДА ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета) ТОГДА НДСОбороты.СуммаНДСОборот ИНАЧЕ 0 КОНЕЦ КАК НачисленныйНДСМетодаЗачета,
		|	0 КАК ПереносимыйЗачет
		|ИЗ
		|	РегистрНакопления.НДС.Обороты(&ДатаНачала, &ДатаОкончания, ,Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		//Корректировка НДС, за период							
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КорректировкаНДСОбороты.СуммаНДСОборот, 0),
		|	ВЫБОР КОГДА ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета) ТОГДА КорректировкаНДСОбороты.СуммаНДСОборот ИНАЧЕ 0 КОНЕЦ КАК НачисленныйНДСМетодаЗачета,
		|	0
		|ИЗ
		|	РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, , Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)))  КАК КорректировкаНДСОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		//Сальдо на начало периода по зачету НДС, переносимому из предыдущих периодов	
		|
		|ВЫБРАТЬ
		|0,	
		|0,	
		|ЕСТЬNULL(НДСВзаиморасчетыСБюджетомОстатки.СуммаНДСОстаток,0)
		|ИЗ
		|	РегистрНакопления.НДСВзаиморасчетыСБюджетом.Остатки(&ДатаНачала, Налогоплательщик = &Организация) КАК НДСВзаиморасчетыСБюджетомОстатки
		|ИТОГИ
		|	СУММА(НачисленныйНДС),
		|	СУММА(НачисленныйНДСМетодаЗачета),
		|	СУММА(ПереносимыйЗачет)
		|ПО
		|	ОБЩИЕ";
	
	ЗапросПоНДС.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
	ЗапросПоНДС.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(Реквизиты.Период));
	ЗапросПоНДС.УстановитьПараметр("Организация", 		Реквизиты.Организация);	
	ЗапросПоНДС.УстановитьПараметр("СчетНДСКВозмещению",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	
	ВыборкаПоНДС = ЗапросПоНДС.Выполнить().Выбрать();
	ВыборкаПоНДС.Следующий();

	НДСНачисленныйЗаПериод 				= ВыборкаПоНДС.НачисленныйНДС;
	НДСНачисленныйЗаПериодМетодаЗачета 	= ВыборкаПоНДС.НачисленныйНДСМетодаЗачета;
	ПереносимыйЗачетПоНДС 				= ВыборкаПоНДС.ПереносимыйЗачет;
		
	ЗапросПоНДСКВозмещению = Новый Запрос;
	ЗапросПоНДСКВозмещению.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.ВидОборота,
		|	ВложенныйЗапрос.ВидНалогаНДС,
		|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.НДСКВозмещению, 0)) КАК СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСКВозмещениюОбороты.ВидОборота КАК ВидОборота,
		|		НДСКВозмещениюОбороты.ВидНалогаНДС КАК ВидНалогаНДС,
		|		ЕСТЬNULL(НДСКВозмещениюОбороты.СуммаНДСОборот, 0) КАК НДСКВозмещению
		|	ИЗ
		|		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНачала,&ДатаОкончания,,Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) ) КАК НДСКВозмещениюОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаНДСКВозмещениюОбороты.ВидОборота,
		|		КорректировкаНДСКВозмещениюОбороты.ВидНалогаНДС,
		|		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот
		|	ИЗ
		|		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, , Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) ) КАК КорректировкаНДСКВозмещениюОбороты) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидОборота,
		|	ВложенныйЗапрос.ВидНалогаНДС";
	
	ЗапросПоНДСКВозмещению.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
	ЗапросПоНДСКВозмещению.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Реквизиты.Период));
	ЗапросПоНДСКВозмещению.УстановитьПараметр("Организация", 		Реквизиты.Организация);
	
	Выборка = ЗапросПоНДСКВозмещению .Выполнить().Выбрать();
	СуммаНДСРазрешенногоКЗачету 	= 0;
	СуммаНДСНеРазрешенногоКЗачету 	= 0;
	
	Пока Выборка.Следующий() Цикл					
		
		ДоляОтнесения = ДоляОблагаемогоОборота;
		Если МетодОтнесенияНДСВЗачет = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
			Если Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
				ДоляОтнесения = 1;
			ИначеЕсли Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда	
				ДоляОтнесения = 0;
			КонецЕсли;
		КонецЕсли;          
		// с 01.01.2012 в форме 300.00 НДС методом зачета прибавляется к сумме зачета ПОСЛЕ применения удельного веса, т.е. не участвует в зачете  по удельному весу
		// принимаем в зачет в полном объеме
		Если Реквизиты.Период >= Дата(2012,1,1) И Выборка.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ДоляОтнесения = 1;			
		КонецЕсли;	
	
		КЗачетуПоВидуОборота = Окр(Выборка.СуммаНДС * ДоляОтнесения, 2);
		СуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету + КЗачетуПоВидуОборота;
		СуммаНДСНеРазрешенногоКЗачету = СуммаНДСНеРазрешенногоКЗачету + Выборка.СуммаНДС - КЗачетуПоВидуОборота;			
	КонецЦикла;		
	
	ОбщаяСуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету + ПереносимыйЗачетПоНДС;
	ОбщаяСуммаНДС   = СуммаНДСРазрешенногоКЗачету + СуммаНДСНеРазрешенногоКЗачету; // для сверки итога расчета с 1420
	
	СтрокаПараметровНДС.НДСНачисленныйЗаПериод = НДСНачисленныйЗаПериод;
	СтрокаПараметровНДС.НДСНачисленныйЗаПериодМетодаЗачета = НДСНачисленныйЗаПериодМетодаЗачета;
	СтрокаПараметровНДС.ПереносимыйЗачетПоНДС = ПереносимыйЗачетПоНДС;
	СтрокаПараметровНДС.СуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету;
	СтрокаПараметровНДС.ОбщаяСуммаНДСРазрешенногоКЗачету = ОбщаяСуммаНДСРазрешенногоКЗачету;
	СтрокаПараметровНДС.СуммаНДСНеРазрешенногоКЗачету = СуммаНДСНеРазрешенногоКЗачету;
	
	ТекстСообщения = "-------------------------------------------------------------------------------------" + Символы.ПС +
	НСтр("ru = 'Зачет по НДС. Итого сумма НДС принятого в зачет: [ОбщаяСуммаНДС]
	|Зачет по НДС. Сумма НДС, разрешенного к зачету:
	|                за отчетный период                = [СуммаНДСРазрешенногоКЗачету]
	|                с учетом переносимого зачета      = [ОбщаяСуммаНДСРазрешенногоКЗачету]
	|Зачет по НДС. Сумма НДС, не разрешенного к зачету = [СуммаНДСНеРазрешенногоКЗачету]
	|Зачет по НДС. НДС, начисленный за период          = [НДСНачисленныйЗаПериод]
	|                в том числе методом зачета        = [НДСНачисленныйЗаПериодМетодаЗачета]
	|Зачет по НДС. Произведен зачет по НДС в сумме     = [СуммаПроизведенногоЗачетаПоНДС]'");
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ОбщаяСуммаНДС"                     , ОбщаяСуммаНДС);
	ПараметрыСообщения.Вставить("СуммаНДСРазрешенногоКЗачету"       , СуммаНДСРазрешенногоКЗачету);
	ПараметрыСообщения.Вставить("СуммаНДСНеРазрешенногоКЗачету"     , СуммаНДСНеРазрешенногоКЗачету);
	ПараметрыСообщения.Вставить("ОбщаяСуммаНДСРазрешенногоКЗачету"  , ОбщаяСуммаНДСРазрешенногоКЗачету);
	ПараметрыСообщения.Вставить("НДСНачисленныйЗаПериод"            , НДСНачисленныйЗаПериод);
	ПараметрыСообщения.Вставить("НДСНачисленныйЗаПериодМетодаЗачета", НДСНачисленныйЗаПериодМетодаЗачета);
	ПараметрыСообщения.Вставить("СуммаПроизведенногоЗачетаПоНДС"    , Мин(ОбщаяСуммаНДСРазрешенногоКЗачету, НДСНачисленныйЗаПериод));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, ПараметрыСообщения);
	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);
	
КонецПроцедуры

Процедура ЗакрытьНДССИзмененнымСрокомУплаты(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ)
	
	// выполняем взаиморасчеты по  НДС, с измененным сроком уплаты
	ТаблицаЗакрытияНДССИзмененнымСрокомУплаты =  ЗакрытиеМесяца.ПодготовитьТаблицуПоНДССИзмененнымСрокомУплаты(
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Отказ);
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоНДССИзмененнымСрокомУплаты(ТаблицаЗакрытияНДССИзмененнымСрокомУплаты,
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Движения, Отказ);

КонецПроцедуры

Процедура ПроизвестиЗачетПоНДС(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ)
	
	ТаблицаРаспределенияНДСКВозмещению =  ЗакрытиеМесяца.ПодготовитьТаблицуРаспределенияНДСКВозмещению(
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Отказ);
		
	ТаблицаРаспределенияНДС =  ЗакрытиеМесяца.ПодготовитьТаблицуРаспределенияНДС(
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Отказ);
		
	ТаблицаНДСВзаиморасчетыСБюджетом = ЗакрытиеМесяца.ПодготовитьТаблицуНДСВзаиморасчетовСБюджетом(
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоНДСНеРазрешенномуВЗачет(ТаблицаРаспределенияНДСКВозмещению,
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Движения, Отказ);
		
	ЗакрытиеМесяца.СформироватьДвиженияПоЗачетуНДС(ТаблицаРаспределенияНДСКВозмещению, ТаблицаРаспределенияНДС,
		ПараметрыПроведения.Реквизиты, ПараметрыЗачетаНДС, Движения, Отказ);

	ЗакрытиеМесяца.СформироватьДвиженияПоНДСВзаиморасчетыСБюджетом(ПараметрыПроведения.Реквизиты, 
		ТаблицаНДСВзаиморасчетыСБюджетом, Движения, Отказ);	
	
КонецПроцедуры

Процедура ПереносОтрицательныхОстатковНДС(ПараметрыПроведения, Отказ) 
	
	ТаблицаПереносаОтрицательныхОстатковНДС = ЗакрытиеМесяца.ПодготовитьТаблицуОтрицательныхОстатковНДС(
		ПараметрыПроведения.Реквизиты, Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоПереносуОтрицательныхОстатковНДС(ТаблицаПереносаОтрицательныхОстатковНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Процедура УменьшениеСуммыНДСКЗачетуЗаСчетИзлишнеУплаченнойВБюджет(ПараметрыПроведения, Отказ) 
	
	ТаблицаПереносаУменьшенияСуммыНДС = ЗакрытиеМесяца.ПодготовитьТаблицуУменьшенияСуммыНДС(
		ПараметрыПроведения.Реквизиты, Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоУменьшениюСуммыНДС(ТаблицаПереносаУменьшенияСуммыНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Процедура РасчетНДСКЗачету(ПараметрыПроведения, Отказ)
	
	// Если ведется учет по СП, перед зачетом необходимо закрыть суммы, разнесенные по СП
	ЗакрытьСуммыНДССтруктурныхПодразделений(ПараметрыПроведения, Отказ);
	
	ПараметрыЗачетаНДС = Неопределено;
	
	РасчетСуммНДСКЗачету(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ);

	ЗакрытьНДССИзмененнымСрокомУплаты(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ);
	
	ПроизвестиЗачетПоНДС(ПараметрыПроведения, ПараметрыЗачетаНДС, Отказ);
	
КонецПроцедуры

Процедура ЗачетАвансовИПереплатПоНДС(ПараметрыПроведения, Отказ)
	
	ПереносОтрицательныхОстатковНДС(ПараметрыПроведения, Отказ);
	
	УменьшениеСуммыНДСКЗачетуЗаСчетИзлишнеУплаченнойВБюджет(ПараметрыПроведения, Отказ);
	
КонецПроцедуры

Процедура ЗакрытиеПодотчетныхСуммБУ(ПараметрыПроведения, Отказ) 
	
	ТаблицаЗакрытияПодотчетныхСуммБУ = ЗакрытиеМесяца.ПодготовитьТаблицуПодотчетныхСумм(
		ПараметрыПроведения.Реквизиты, Ложь, Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоЗакрытиюПодотчетныхСуммБУ(ТаблицаЗакрытияПодотчетныхСуммБУ,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры
	
Процедура ЗачетАвансовыхПлатежейПоНалогамИСборамБУ(ПараметрыПроведения, Отказ) 
	
	ТаблицаНачисленийПоНалогам = ЗакрытиеМесяца.ПодготовитьТаблицуНачисленийПоНалогам(
		ПараметрыПроведения.Реквизиты, Ложь, Отказ);
		
	ТаблицаАвансовыхПлатежейПоНалогам = ЗакрытиеМесяца.ПодготовитьТаблицуАвансовыхПлатежейПоНалогам(
		ПараметрыПроведения.Реквизиты, Ложь, Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоЗачетуАвансовыхПлатежейБУ(ТаблицаНачисленийПоНалогам, ТаблицаАвансовыхПлатежейПоНалогам,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Процедура ЗачетАвансовыхПлатежейПоНалогамИСборамНУ(ПараметрыПроведения, Отказ) 
	
	ТаблицаНачисленийПоНалогам = ЗакрытиеМесяца.ПодготовитьТаблицуНачисленийПоНалогам(
		ПараметрыПроведения.Реквизиты, Истина, Отказ);
		
	ТаблицаАвансовыхПлатежейПоНалогам = ЗакрытиеМесяца.ПодготовитьТаблицуАвансовыхПлатежейПоНалогам(
		ПараметрыПроведения.Реквизиты, Истина, Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияПоЗачетуАвансовыхПлатежейНУ(ТаблицаНачисленийПоНалогам, ТаблицаАвансовыхПлатежейПоНалогам,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Процедура РегламентныеОперацииПоФиксированнымАктивамНУ(ПараметрыПроведения, Отказ)
	
	перемОценкаПроизводительности = ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	
	РевизитыДокумента = ПараметрыПроведения.Реквизиты[0] ;
	
	Если РевизитыДокумента.РасчетВычетовПоРасходамНаРемонт  Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗакрытиеМесяца.РасчетВычетовПоРасходамНаРемонтФАНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет вычетов по расходам на ремонт фа(ну))", ВремяНачалаЗамера);
			
	КонецЕсли; 	
		
	Если РевизитыДокумента.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно  Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗакрытиеМесяца.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (включение активов, учитываемых отдельно, в стоимостный баланс групп (ну))", ВремяНачалаЗамера);
			
	КонецЕсли;	
	
	Если РевизитыДокумента.РасчетВычетовПоПреференциям Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗакрытиеМесяца.РасчетВычетовПоПреференциямФАНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет вычетов по преференциям фа(ну))", ВремяНачалаЗамера);
			
	КонецЕсли;	

		
	Если   РевизитыДокумента.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
		ИЛИ  РевизитыДокумента.СписаниеПриВыбытииВсехФАГруппы
		ИЛИ  РевизитыДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума
		ИЛИ  РевизитыДокумента.АмортизацияФАНУ Тогда
		
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
				
		ЗакрытиеМесяца.РегламентныеОперацииПоСтоимостиФАВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (регламентные операции по стоимости фа(ну))", ВремяНачалаЗамера);
		
	КонецЕсли;	

КонецПроцедуры

Процедура РасчетВычетаПоРеализованнымТоварам(ПараметрыПроведения, Отказ)
	
	РеквизитыДокумента = ПараметрыПроведения.Реквизиты[0] ;

	Если РеквизитыДокумента.РасчетВычетаПоРеализованнымТоварам Тогда
		ЗакрытиеМесяца.РасчетВычетаПоРеализованнымТоварам(ПараметрыПроведения.Реквизиты, Движения, Отказ)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеСчетовНУ(ПараметрыПроведения, Отказ)
	
	ЗакрытиеМесяца.ЗакрытиеСчетовВА(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ЗакрытиеМесяца.ЗакрытиеПрочихСчетов(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура РасчетВычетовПоНалогамВБюджет(ПараметрыПроведения, Отказ)
	
	ЗакрытиеМесяца.РасчетВычетовПоНалогамВБюджет(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура РасчетВременныхРазниц(ПараметрыПроведения, Отказ)
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.Организация,
																		Реквизиты.Организация,																		
																		Перечисления.РазделыНалоговогоУчета.КПН);
	Иначе
		Налогоплательщик = Реквизиты.Организация;
	КонецЕсли;
	
	СтавкаНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаПрибыль, Реквизиты.Период);
	Если СтавкаНалогаНаПрибыль = 0 Тогда
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(НСтр("ru='Не указана ставка налога на прибыль. Расчет временных разниц невозможен.'"), , ,ЭтотОбъект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц);
		Возврат;
	КонецЕсли;	
	
	Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		ЗакрытиеМесяца.РасчетВременныхРазницБалансовымМетодом(ПараметрыПроведения, Движения, СтавкаНалогаНаПрибыль,Отказ);
	Иначе
		ЗакрытиеМесяца.РасчетВременныхРазницМетодомПиБ(ПараметрыПроведения,Движения, СтавкаНалогаНаПрибыль,Отказ);
	КонецЕсли;	

КонецПроцедуры  // РасчетВременныхРазниц

Процедура РасчетНалогаНаПрибыль(ПараметрыПроведения, Отказ)
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если Реквизиты.КонецПериода >= Дата(2009,1,1) Тогда
		ТекстСообщения = НСтр("ru='Операцию по расчету налога на прибыль рекомендуется выполнять в форме регламентированной отчетности: формы 100.00 (или формы 220.00) и отражать в бухг. учете с помощью механизма отражения в учете регламентированной отчетности.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
	
	Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.Организация,
																		Реквизиты.Организация,																		
																		Перечисления.РазделыНалоговогоУчета.КПН);
	Иначе
		Налогоплательщик = Реквизиты.Организация;
	КонецЕсли;
	
	
	СтавкаНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаПрибыль, Реквизиты.Период);
	
	Если СтавкаНалогаНаПрибыль = 0 Тогда
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(НСтр("ru='Не указана ставка налога на прибыль. Расчет временных разниц не возможен.'"), , ,ЭтотОбъект, Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль);
		Возврат;
	КонецЕсли;	
	
	ЗакрытиеМесяца.РасчетНалогаНаПрибыль(ПараметрыПроведения.Реквизиты,Движения,СтавкаНалогаНаПрибыль, Отказ);
	
КонецПроцедуры  // РасчетНалогаНаПрибыль

Процедура РасчетИтоговогоДоходаУбытка(ПараметрыПроведения,ПоДаннымБУ, Отказ)  
	
	ЗакрытиеМесяца.РасчетИтоговогоДоходаУбытка(ПараметрыПроведения, ПоДаннымБУ, Движения, Отказ);
	
КонецПроцедуры  // РасчетВременныхРазниц

Процедура РеформацияБаланса(ПараметрыПроведения,Отказ)
	
	ЗакрытиеМесяца.ПроведениеРеформацииБаланса(ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры

Процедура РасчетСебестоимостиПродукции(ПараметрыПроведения,Отказ)
		
	РасчетСебестоимости.РасчетСебестоимостиПродукции(ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры

Процедура ДвижениеНЗП(ПараметрыПроведения,Отказ)
		
	РасчетСебестоимости.ДвижениеНЗП(ПараметрыПроведения, Движения, Отказ);
	
КонецПроцедуры

Процедура ОбработатьДокументыНЗП(ПараметрыПроведения, Отказ)
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	// Флаг "Перенос НЗП" был установлен в документе, затем он был снят
	Если Реквизиты.УбранФлажокПереносНЗПБУ  <> Неопределено Или  Реквизиты.УбранФлажокПереносНЗПНУ <> Неопределено Тогда
		
		РезультатЗапроса = СформироватьЗапросПоДокументамНЗП();
		ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		
		//существуют документы "Движение НЗП"
		Если Не РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = Символы.ПС +
			НСтр("ru = 'У текущего документа существуют подчиненные документы ""Движение НЗП"". 
			|После снятия флажка ""Перенос НЗП"" они будут удалены.'");
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ, Ложь);
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
				ТекущийДокумент.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверка ручной корректировки документа.
	
	Если ЭтотОбъект.РучнаяКорректировка Тогда
		ТекстСообщения = НСтр("ru = 'Движения документа ""%1"" отредактированы вручную и не могут быть автоматически актуализированы.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект.Ссылка);		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	//Так как документ "Закрытие месяца" может работать как самостоятельно, так и в связки с
	//обраткой "ЗакрытиеМесяца", в которой имеется возможность выполнять не все сразу операции, а поэтапно,
	//поэтому необходимо понять, выполняется только одна операция или нет - за это отвечает переменная модуля 
	//ВидРегламентнойОперации. 
	ВыполнятьВсе = НЕ ЗначениеЗаполнено(ВидРегламентнойОперации);
	Если ВыполнятьВсе Тогда
		Ошибки.Очистить();
	Иначе	
		ОчиститьОшибкиПоРегламентнойОперации(ВидРегламентнойОперации);
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		ПроведениеСервер.УдалитьДвиженияРегистратора(Ссылка, Отказ);
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ЗакрытиеМесяца.ПодготовитьПараметрыПроведения(ЭтотОбъект, УбранФлажокПереносНЗПБУ, УбранФлажокПереносНЗПНУ, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияОПовторахВидовОпераций = ПроверкаПовторовВидовОпераций(ПараметрыПроведения.Реквизиты);
	
	Если ЗначениеЗаполнено(СообщенияОПовторахВидовОпераций) Тогда
		ТекстСообщения = СообщенияОПовторахВидовОпераций + Символы.ПС + НСтр("ru='Документ не может быть проведен!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ПараметрыПроведения.Реквизиты[0];
	
	Если НЕ РеквизитыДокумента.ПереоценкаВалютныхСредствБУ И НЕ КурсыВалют.Количество() = 0 Тогда
		КурсыВалют.Очистить();
	КонецЕсли;
	
	Если РеквизитыДокумента.ПереоценкаВалютныхСредствБУ  Тогда
		ПроверитьЗаполнениеДанныхДляВыполненияОперацииПереоценки(ПараметрыПроведения, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ВидРегламентнойОперации) И НЕ ГрупповоеПерепроведение Тогда
		ТекстСообщения = "-----" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Начало проведения документа %1'" ), Ссылка) + "-----";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	перемОценкаПроизводительности = ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	
	Если РеквизитыДокумента.АмортизацияНМАБУ Тогда		
		// АМОРТИЗАЦИЯ НМА
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		НачислениеАмортизацииНМА(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (начисление амортизации нма)", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.АмортизацияОСБУ Тогда		
		// АМОРТИЗАЦИЯ ОС
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		НачислениеАмортизацииОС(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (начисление амортизации ос)", ВремяНачалаЗамера);
	КонецЕсли;                                              
	
	Если РеквизитыДокумента.СписаниеРезерваПоПереоценкеОСБУ Тогда
		
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		СписаниеРезерваПоПереоценкеОСБУ(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (списание резерва по переоценке ос)", ВремяНачалаЗамера);
	КонецЕсли;
	
	Если РеквизитыДокумента.ПереоценкаВалютныхСредствБУ Тогда
		// ПЕРЕОЦЕНКА
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ПереоценкаВалютныхСредств(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (переоценка валютных средств)", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.СписаниеРБПБУ Тогда
		// Списание РБП
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		СписаниеРБП(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (списание расходов будущих периодов)", ВремяНачалаЗамера);
	КонецЕсли;
	
	Если РеквизитыДокумента.РасчетСтоимостиПродукцииБУ 
		ИЛИ РеквизитыДокумента.РасчетСтоимостиПродукцииНУ Тогда 
		
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетСебестоимостиПродукции(ПараметрыПроведения, Отказ);
		
		КлючеваяОперация = "Документ ""закрытие месяца"" (расчет и корректировка себестоимости продукции (услуг))" 
					+ ?(РеквизитыДокумента.РасчетСтоимостиПродукцииБУ," (бу)","") + ?(РеквизитыДокумента.РасчетСтоимостиПродукцииНУ," (ну)","");
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.ПереносНЗПБУ 
		ИЛИ РеквизитыДокумента.ПереносНЗПНУ  Тогда
		// ПРОИЗВОДСТВО БУ
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ДвижениеНЗП(ПараметрыПроведения, Отказ);
		
		КлючеваяОперация = "Документ ""закрытие месяца"" (перенос незавершенного производства)" 
					+ ?(РеквизитыДокумента.ПереносНЗПБУ," (бу)","") + ?(РеквизитыДокумента.ПереносНЗПНУ," (ну)","");
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
		
	Иначе
		ОбработатьДокументыНЗП(ПараметрыПроведения, Отказ);
	КонецЕсли;

	Если РеквизитыДокумента.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ Тогда
		
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗачетАвансовыхПлатежейПоНалогамИСборамБУ(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (зачет авансовых платежей по налогам и сборам (бу))", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ Тогда
		
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗачетАвансовыхПлатежейПоНалогамИСборамНУ(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (зачет авансовых платежей по налогам и сборам (ну))", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.РасчетНДСКЗачету Тогда
		// Закрытие счетов НДС 
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетНДСКЗачету(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (зачет ндс к возмещению)", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.ЗачетАвансовИПереплатПоНДС Тогда
		// Закрытие счетов НДС 
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗачетАвансовИПереплатПоНДС(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (зачет ндс к возмещению)", ВремяНачалаЗамера);
		
	КонецЕсли;

	
	Если РеквизитыДокумента.ЗакрытиеПодотчетныхСуммБУ Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗакрытиеПодотчетныхСуммБУ(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (закрытие подотчетных сумм)", ВремяНачалаЗамера);
		
	КонецЕсли;
			
	Если РеквизитыДокумента.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
		ИЛИ РеквизитыДокумента.РасчетВычетовПоРасходамНаРемонт
		ИЛИ РеквизитыДокумента.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
		ИЛИ РеквизитыДокумента.РасчетВычетовПоПреференциям
		ИЛИ РеквизитыДокумента.СписаниеПриВыбытииВсехФАГруппы
		ИЛИ РеквизитыДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума
		ИЛИ РеквизитыДокумента.АмортизацияФАНУ Тогда

		// РЕГЛАМЕНТНЫЕ НАЛОГОВОГО УЧЕТА
		РегламентныеОперацииПоФиксированнымАктивамНУ(ПараметрыПроведения, Отказ);
	КонецЕсли;

	Если РеквизитыДокумента.РасчетВычетаПоРеализованнымТоварам Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетВычетаПоРеализованнымТоварам(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет вычета по реализованным товарам)", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.РасчетВычетовПоНалогам Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетВычетовПоНалогамВБюджет(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет вычета по налогам, уплаченным в бюджет)", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.ЗакрытиеСчетовНУ Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		ЗакрытиеСчетовНУ(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (закрытие счетов (ну))", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.РасчетВременныхРазниц  Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетВременныхРазниц(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет временных разниц)", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.РасчетНалогаНаПрибыль  Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетНалогаНаПрибыль(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет налога на прибыль)", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.РасчетИтоговогоДоходаУбыткаБУ Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетИтоговогоДоходаУбытка(ПараметрыПроведения, Истина, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет итогового дохода убытка (бу))", ВремяНачалаЗамера);
		
	КонецЕсли;

	Если РеквизитыДокумента.РасчетИтоговогоДоходаУбыткаНУ Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РасчетИтоговогоДоходаУбытка(ПараметрыПроведения, Ложь, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (расчет итогового дохода убытка (ну))", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если РеквизитыДокумента.РеформацияБалансаБУ Тогда
		Если перемОценкаПроизводительности Тогда
			ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();			
		КонецЕсли;	
		
		РеформацияБаланса(ПараметрыПроведения, Отказ);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ ""закрытие месяца"" (реформация баланса)", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидРегламентнойОперации) И НЕ ГрупповоеПерепроведение Тогда	
		ТекстСообщения = "-----" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Окончание проведения документа %1'" ), Ссылка) + "-----";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	ПроставитьСостояниеОперации(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если ПереносНЗПНУ = Ложь И Ссылка.ПереносНЗПНУ Тогда
			УбранФлажокПереносНЗПНУ = Истина;
		Иначе
			УбранФлажокПереносНЗПНУ = Неопределено;			
		КонецЕсли;	
		
		Если ПереносНЗПБУ = Ложь И Ссылка.ПереносНЗПБУ Тогда
			УбранФлажокПереносНЗПБУ = Истина;
		Иначе
			УбранФлажокПереносНЗПБУ = Неопределено;			
		КонецЕсли;	 
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетСтоимостиПродукцииНУ  Тогда
		
		// Проверка. Если в этом месяце не было Закрытия месяца с расчетом себестоимости по БУ, но сейчас 
		// проводится Закрытие расчетом стоимости НУ, то необходимо выдать соответствующее сообщение
		Если НЕ РасчетСтоимостиПродукцииБУ  Тогда
			
			мНачДата    = НачалоМесяца(Дата);
			мКонДата    = КонецМесяца (Дата);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
			Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
			Запрос.УстановитьПараметр("Организация",  Организация);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗакрытиеМесяца.Ссылка
			|ИЗ
			|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
			|
			|ГДЕ
			|	ЗакрытиеМесяца.Организация = &Организация 	И
			|	ЗакрытиеМесяца.Дата >= &НачалоМесяца 		И
			|	ЗакрытиеМесяца.Дата <= &КонецМесяца 		И
			|	ЗакрытиеМесяца.Проведен 					И
			|	НЕ ЗакрытиеМесяца.ПометкаУдаления 			И
			|   ЗакрытиеМесяца.РасчетСтоимостиПродукцииБУ";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'В текущем месяце не был выполнен расчет и корректировка себестоимости продукции(услуг).
				|Необходимо провести документ ""Закрытие месяца"" с таким флажком!'");
				ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения,,, Ложь);
				
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
	Если ПереносНЗПБУ  Тогда
		
		// Проверка. Если в этом месяце не было Закрытия месяца с расчетом себестоимости, но сейчас 
		// проводится Закрытие с переносом НЗП, то необходимо выдать соответствующее сообщение
		Если НЕ РасчетСтоимостиПродукцииБУ  Тогда
			
			мНачДата    = НачалоМесяца(Дата);
			мКонДата    = КонецМесяца (Дата);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
			Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
			Запрос.УстановитьПараметр("Организация",  Организация);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗакрытиеМесяца.Ссылка
			|ИЗ
			|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
			|
			|ГДЕ
			|	ЗакрытиеМесяца.Организация = &Организация 	И
			|	ЗакрытиеМесяца.Дата >= &НачалоМесяца 		И
			|	ЗакрытиеМесяца.Дата <= &КонецМесяца 		И
			|	ЗакрытиеМесяца.Проведен 					И
			|	НЕ ЗакрытиеМесяца.ПометкаУдаления 			И
			|   ЗакрытиеМесяца.РасчетСтоимостиПродукцииБУ";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'В текущем месяце не был выполнен расчет и корректировка себестоимости продукции(услуг).
				|Необходимо провести документ ""Закрытие месяца"" с таким флажком!'");
				ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения,,, Ложь);

			КонецЕсли;	
		КонецЕсли;	
		
		Если ПометкаУдаления  <> Ссылка.ПометкаУдаления  Тогда
			
			РезультатЗапроса = СформироватьЗапросПоДокументамНЗП();
			ТаблицаДокументов = РезультатЗапроса.Выгрузить();
			
			//существуют документы
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТекстСообщения = НСтр("ru = 'У текущего документа существуют подчиненные документы ""Движение НЗП"". '") + Символы.ПС;
				Если Ссылка.ПометкаУдаления = Ложь Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Удаление текущего документа вызовет также удаление подчиненных документов.'");
				Иначе
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Снятие пометки удаления с текущего документа вызовет также снятие пометки удаления с подчиненных документов.'");
				КонецЕсли;
				
				ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения, , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(?(Ссылка.ПометкаУдаления = Ложь, НСтр("ru = 'Удаление документа %1'"), НСтр("ru = 'Снятие пометки удаления документа %1'")), Ссылка), Ложь);
				
				Для Каждого Строка Из ТаблицаДокументов Цикл
					ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
					ТекущийДокумент.УстановитьПометкуУдаления(?(Ссылка.ПометкаУдаления = Ложь, Истина, Ложь));
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗачетАвансовИПереплатПоНДС  Тогда
			
			// Проверка. Если в этом месяце не было Закрытия месяца с зачетом НДС к возмещению, но сейчас 
			// проводится Закрытие с зачетом авансов и переплат по НДС, то необходимо выдать соответствующее сообщение
			Если НЕ РасчетНДСКЗачету  Тогда
				
				мНачДата    = НачалоМесяца(Дата);
				мКонДата    = КонецМесяца (Дата);
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
				Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
				Запрос.УстановитьПараметр("Организация",  Организация);
				
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗакрытиеМесяца.Ссылка
				|ИЗ
				|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
				|
				|ГДЕ
				|	ЗакрытиеМесяца.Организация = &Организация 	И
				|	ЗакрытиеМесяца.Дата >= &НачалоМесяца 		И
				|	ЗакрытиеМесяца.Дата <= &КонецМесяца 		И
				|	ЗакрытиеМесяца.Проведен 					И
				|	НЕ ЗакрытиеМесяца.ПометкаУдаления 			И
				|   ЗакрытиеМесяца.РасчетНДСКЗачету";
				
				Результат = Запрос.Выполнить().Выгрузить();
				
				Если Результат.Количество() = 0 Тогда
					
					ТекстСообщения = НСтр("ru = 'В текущем месяце не был выполнен Зачет НДС к возмещению.
					|Необходимо провести документ ""Закрытие месяца"" с таким флажком!'");
					ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения,,, Ложь);
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		Если Движения.Типовой.Количество() + Движения.Налоговый.Количество() = 0 Тогда
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		Иначе
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоДокументамНЗП()
	
	// Соберем данные о существующих документах "Движение НЗП".
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеНЗП.Ссылка КАК ДокументСсылка
	             |ИЗ
	             |	Документ.ДвижениеНЗП КАК ДвижениеНЗП
	             |ГДЕ
	             |	ДвижениеНЗП.Организация = &Организация
				 |	
	             |	И ДвижениеНЗП.Дата >= &НачДата
	             |	И ДвижениеНЗП.Дата <= &КонДата
	             |	И ДвижениеНЗП.ВидОперации = &ВидОперации
	             |	И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете";
	Запрос.УстановитьПараметр("НачДата",  НачалоМесяца(Ссылка.Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца (Ссылка.Дата));
	Запрос.УстановитьПараметр("Организация", Ссылка.Организация);	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП);
	
	Если (УбранФлажокПереносНЗПНУ <> Неопределено и УбранФлажокПереносНЗПБУ <> Неопределено)
		ИЛИ (Ссылка.ПереносНЗПНУ И Ссылка.ПереносНЗПБУ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете", "");
	ИначеЕсли УбранФлажокПереносНЗПНУ <> Неопределено ИЛИ Ссылка.ПереносНЗПНУ Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "УчитыватьКПН");
	КонецЕсли;
 	 		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Ошибки.Очистить();
	
	Если Ссылка.ПереносНЗПБУ ИЛИ Ссылка.ПереносНЗПНУ Тогда
		
		РезультатЗапроса = СформироватьЗапросПоДокументамНЗП();
		ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		
		//существуют документы
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'У текущего документа существуют подчиненные документы ""Движение НЗП"". 
			|Отмена проведения текущего документа вызовет также отмену проведения подчиненных документов.'");
			
			ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , Ложь);

			Для Каждого Строка Из ТаблицаДокументов Цикл
				ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
				ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЦикла;	 			
		КонецЕсли;	
	
	КонецЕсли;	
	
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;

КонецПроцедуры

Процедура ПроставитьСостояниеОперации(Отказ)
	
	МассивОшибок = Ошибки.НайтиСтроки(Новый Структура("Комментарий", Ложь));
	
	Если Отказ Тогда			
		Если МассивОшибок.Количество() <> 0 Тогда
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками;
		Иначе
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
	ИначеЕсли МассивОшибок.Количество() <> 0 Тогда
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками;				
	Иначе
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка ЗакрытиеМесяца

//Процедура отменяет движения переданной операции из обработки "Закрытие месяца"
//
Процедура ОтменитьОперацию(ВидРегламентнойОперации) Экспорт
	
	//Необходимо по всем наборам записям удалить записи по текущей операции
	
	//1. Регистр бухгалтерии "Типовой"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРегламентнойОперации", ВидРегламентнойОперации);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Типовой.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.ВидРегламентнойОперации = &ВидРегламентнойОперации
		|	И Типовой.Регистратор = &Регистратор";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Прочитать();
		
		Выборка = Результат.Выбрать();
		МассивУдаляемыхПроводок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивУдаляемыхПроводок.Добавить(НаборЗаписей.Получить(Выборка.НомерСтроки-1));				
		КонецЦикла;	
		УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхПроводок);		 		
		НаборЗаписей.Записать();
	КонецЕсли;	  				

	//2. Регистр бухгалтерии "Налоговый"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРегламентнойОперации", ВидРегламентнойОперации);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Типовой.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Налоговый КАК Типовой
		|ГДЕ
		|	Типовой.ВидРегламентнойОперации = &ВидРегламентнойОперации
		|	И Типовой.Регистратор = &Регистратор";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Прочитать();
		
		Выборка = Результат.Выбрать();
		МассивУдаляемыхПроводок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивУдаляемыхПроводок.Добавить(НаборЗаписей.Получить(Выборка.НомерСтроки-1));				
		КонецЦикла;	
		УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхПроводок);		 		
		НаборЗаписей.Записать();
	КонецЕсли;	  				
	
	//3. Очистим записи у регистров, для операции "Расчет стоимости продукции"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ Тогда
		
		//3.1 - Регистр сведений "РасчетСебестоимостиПродукции"	
		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.2 - Регистр сведений "РасчетРаспределенияКосвенныхРасходов"	
		НаборЗаписей = РегистрыСведений.РасчетРаспределенияКосвенныхРасходов.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.3 - Регистр накопления "Реализция ТМЗ"	
		
		НаборЗаписей = РегистрыНакопления.РеализацияТМЗ.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	//3. Очистим записи у регистров, для операции "Расчет стоимости продукции"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ Тогда
		
		//3.1 - Регистр сведений "РасчетСебестоимостиПродукции"	
		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.2 - Регистр сведений "РасчетРаспределенияКосвенныхРасходов"	
		НаборЗаписей = РегистрыСведений.РасчетРаспределенияКосвенныхРасходов.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	
	КонецЕсли;
	              	
	//4. Очистим записи у регистров сведений, для операции "Расчет списания РБП"
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ Тогда
		
		//4.1 - Регистр сведений "РасчетСписанияРБП"	
		НаборЗаписей = РегистрыСведений.РасчетСписанияРБП.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);                				
	КонецЕсли;
	
	//5. Очистим записи у регистров сведений, для операции "Включение активов, учитываемых отдельно в стоимостной баланс(НУ)"
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно Тогда
		
		//5.1 - Регистр сведений "ФиксированныеАктивыУчитываемыеОтдельно"	
		НаборЗаписей = РегистрыСведений.ФиксированныеАктивыУчитываемыеОтдельно.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);                				
	КонецЕсли;
	
	//6. Очистим записи у регистров накопления, для операции "Расчет НДС к зачету"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету Тогда
		
		//6.1 - Регистр накопления "НДССИзмененнымСрокомУплаты"	
		НаборЗаписей = РегистрыНакопления.НДССИзмененнымСрокомУплаты.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//6.2 - Регистр накопления "НДСВзаиморасчетыСБюджетом"	
		НаборЗаписей = РегистрыНакопления.НДСВзаиморасчетыСБюджетом.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	КонецЕсли;      
	
КонецПроцедуры

//Процедура удаляет записи из указанного набора записей
//
Процедура УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхЗаписей)
	Индекс = НаборЗаписей.Количество();
	Пока Индекс > 0 Цикл
		УдаляемаяЗапись = МассивУдаляемыхЗаписей.Найти(НаборЗаписей[Индекс-1]);
		Если УдаляемаяЗапись = Неопределено Тогда
			Индекс = Индекс -1;
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Удалить(НаборЗаписей.Индекс(МассивУдаляемыхЗаписей.Получить(УдаляемаяЗапись)));
		Индекс = Индекс -1;
	КонецЦикла;			
КонецПроцедуры

//Процедура удаляет все записи из набора по данному регситратору
//
Процедура ОчиститьНаборЗаписей(НаборЗаписей)
	НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

//Процедура удаляет ошибки по переданной регламентной операции из обработки "ЗакрытиеМесяца"
Процедура ОчиститьОшибкиПоРегламентнойОперации(ВидРегламентнойОперации) Экспорт
	
	Индекс = Ошибки.Количество();
	
	Пока Индекс > 0 Цикл
		
		Если Ошибки[Индекс-1].ВидРегламентнойОперации = ВидРегламентнойОперации Тогда
			Ошибки.Удалить(Ошибки[Индекс-1]);
			
		КонецЕсли;
		Индекс = Индекс -1 ;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
