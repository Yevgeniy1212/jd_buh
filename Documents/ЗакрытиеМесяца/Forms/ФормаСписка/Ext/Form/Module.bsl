&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	ОбщегоНазначенияБКВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект);
	
	ОбщегоНазначенияБК.ФормаСпискаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБККлиентСервер.ВосстановитьОтборСписка(Список, Настройки, "Организация");

КонецПроцедуры

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	МассивВыделенных = Элементы.Список.ВыделенныеСтроки;
	КоличествоВыделенных = МассивВыделенных.Количество();
	Если КоличествоВыделенных = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Сортировка массива документов по дате и ссылке		
	МассивВыделенных = ОтсортированныйМассив(МассивВыделенных);

	Результат = ВыполнитьОперациюНаСервере(МассивВыделенных);
	
	Если НЕ Результат.ЗаданиеВыполнено  И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦ ФОРМЫ

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


//////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие выполнение в фоновом режиме 

&НаСервере
Функция ВыполнитьОперациюНаСервере(МассивВыделенных)
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
		
		// Запускаем выполнение в фоне
		
		НаименованиеЗадания = НСтр("ru = 'Выполнение закрытия периода'");
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивРегОпераций", МассивВыделенных);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЗакрытиеМесяца.ПроведениеСпискаДокументовВФоне", 
			СтруктураПараметров, 
			НаименованиеЗадания);
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
		
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеОперацииНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СообщенияПользователю") Тогда
		Для Каждого Сообщение Из СтруктураДанных.СообщенияПользователю Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивНепроведенных") Тогда
		Если СтруктураДанных.МассивНепроведенных.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось провести ""%1"".
                                       |Подробности смотрите в Журнале регистрации.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураДанных.МассивНепроведенных[0]);
			ПоказатьПредупреждение( , ТекстПредупреждения);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось провести:'");
			Для Каждого НепроведенныйДокумент Из СтруктураДанных.МассивНепроведенных Цикл
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НепроведенныйДокумент;
			КонецЦикла;
			ТекстПредупреждения = СокрЛП(ТекстПредупреждения) + Символы.ПС + НСтр("ru = 'Подробности смотрите в Журнале регистрации.'");
			ПоказатьПредупреждение( , ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивРегОпераций") И СтруктураДанных.МассивРегОпераций.Количество() > 0 Тогда
		СформироватьИсториюИПоказатьОповещениюПользователю(
			СтруктураДанных.МассивРегОпераций,
			НСтр("ru = 'Изменение:'"),
			НСтр("ru = 'Изменение (%1)'")); // Параметр - количество документов
	КонецЕсли;
		
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗакрытиеМесяца"));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыполнениеОперации()
	
	ОбщегоНазначенияБК.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыполненоУспешно") Тогда
		СтруктураДанныхНаКлиенте.Вставить("МассивРегОпераций", СтруктураДанных.МассивРегОпераций);
		Если СтруктураДанных.Свойство("МассивНепроведенных") Тогда
			СтруктураДанныхНаКлиенте.Вставить("МассивНепроведенных", СтруктураДанных.МассивНепроведенных);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(МассивРегОпераций, ТекстОповещенияОднаОперация, ШаблонОповещенияНесколькоОпераций)
	
	КоличествоОбработанных = МассивРегОпераций.Количество();
	
	Если КоличествоОбработанных = 1 Тогда
		РегОперация = МассивРегОпераций[0];
		
		ПоказатьОповещениеПользователя(
			ТекстОповещенияОднаОперация,
			ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация), БиблиотекаКартинок.Информация32);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	Иначе // Несколько операций
		
		Для каждого РегОперация Из МассивРегОпераций Цикл
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОповещенияНесколькоОпераций,
				КоличествоОбработанных);
			
			ПоказатьОповещениеПользователя(ТекстОповещения,, НСтр("ru = 'Закрытия месяца'"), БиблиотекаКартинок.Информация32);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(ОбработатьВыполнениеОперации());
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтсортированныйМассив(ИсходныйМассив)
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений;
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Ссылка");
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Дата");
	Для Каждого Элемент Из ИсходныйМассив Цикл
		СтрокаТаблицы = ТаблицаВыделенныхСтрок.Добавить();
		СтрокаТаблицы.Ссылка = Элемент;
		СтрокаТаблицы.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Дата");
	КонецЦикла;
	
	ТаблицаВыделенныхСтрок.Сортировать("Дата, Ссылка");
	
	Возврат ТаблицаВыделенныхСтрок.ВыгрузитьКолонку("Ссылка");
	
КонецФункции
