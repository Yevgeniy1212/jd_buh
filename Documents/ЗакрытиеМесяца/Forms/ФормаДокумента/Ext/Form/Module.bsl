&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.БУ.ТриСостояния = Истина;
	Элементы.НУ.ТриСостояния = Истина;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		//Дата = НачалоДня(КонецМесяца(Дата));
		УстановитьКомментарий();
	КонецЕсли;
				      
	УправлениеФормой(ЭтаФорма);

	Если ТолькоПросмотр Тогда
		// отключение доступности команд
		Элементы.ФормаВыполнить.Доступность         = Ложь;
		Элементы.ФормаВыполнитьИЗакрыть.Доступность = Ложь;
		Элементы.ЗаполнитьВалюты.Доступность        = Ложь;
		// отключение доступности прочих элементов
		Элементы.ДеревоВыполняемыхОпераций_.ТолькоПросмотр   = Истина;
		Элементы.КурсыВалютИзРегистраСведений.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	
	Выборка =	РегистрыБухгалтерии.Типовой.ВыбратьПоРегистратору(Объект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
	
	
	КонецЦикла; 
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ЗакрытиеМесяца");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаКонецМесяца = КонецМесяца(Объект.Дата);
	
	Если День(Объект.Дата) <> День(ДатаКонецМесяца) Тогда
		Объект.Дата = НачалоДня(ДатаКонецМесяца);
	//	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
		// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	УстановитьКомментарий();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ТекущаяДатаДокумента >= Дата(2019, 1, 1) Тогда
		Объект.РасчетВычетаПоРеализованнымТоварам = Ложь;
	КонецЕсли;
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();		
	
	ФормированиеДереваВыполняемыхОпераций();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаКлиенте
Процедура БУПриИзменении(Элемент)
	
	ПриИзменениеФлажкаНаКлиенте("БУ");
	УправлениеФормой(ЭтотОбъект);
	            
КонецПроцедуры

&НаКлиенте
Процедура НУПриИзменении(Элемент)
	
	ПриИзменениеФлажкаНаКлиенте("НУ");	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ВключитьВыключитьФлажки(Ложь);
	ФормированиеДереваВыполняемыхОпераций();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ВключитьВыключитьФлажки(Истина);
	ФормированиеДереваВыполняемыхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СправкаРасчет(Команда)
	
	Справка 	= СтрЗаменить(Команда.Имя,"ОткрытьОтчет","");
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.Организация);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	СписокПодразделений = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.СтруктурноеПодразделение);

	ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);

	ФормаОтчета = ПолучитьФорму("Отчет." + Справка + ".Форма.ФормаОтчета");
	ФормаОтчета.ОткрытьИСформировать(Новый Структура("СписокСтруктурныхЕдиниц, ПредставлениеСпискаОрганизаций,СписокПодразделений,ПредставлениеСпискаПодразделений, НачалоПериода, КонецПериода,Период,НаборПоказателейОтчета,ВыводитьЗаголовок,ВыводитьПодвал,СНачалаГода",
	   СписокСтруктурныхЕдиниц,ПредставлениеСпискаОрганизаций, СписокПодразделений,ПредставлениеСпискаПодразделений,
		НачалоМесяца(Объект.Дата),
		КонецМесяца(Объект.Дата),
		,
		1,
		Истина,
		Истина,
		Ложь));

	КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	ВыполнитьОперациюНаКлиенте(Команда.Имя = "ВыполнитьОперациюИЗакрыть");
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалюты(Команда)
	
	Если НЕ Объект.КурсыВалют.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКурсыВалют", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьВалютыНаСервере(); 
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ           

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Объект.Организация, Объект.Дата);

	КурсыВалютИзРегистраСведений = (Объект.КурсыВалют.Количество() = 0);

	ФормированиеДереваВыполняемыхОпераций();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);	
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
функция ДобавитьСтрокуВДеревоОпераций(СтрокиДерева, Знач ИмяДействия = "", Знач Действие, Знач БУ = 0, Знач НУ = 0)
	
	НоваяСтрока = СтрокиДерева.Добавить();
	НоваяСтрока.ИмяДействия = ИмяДействия;
	НоваяСтрока.Действие = Действие;
	НоваяСтрока.ДоступностьБУ = БУ;
	НоваяСтрока.ДоступностьНУ = НУ;
	
	Возврат НоваяСтрока
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОперацийИзОбъекта(СтрокиДерева)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		Если ТекСтрока.Строки.Количество() Тогда
			ЗаполнитьДеревоОперацийИзОбъекта(ТекСтрока.Строки);
			
			ИтогДоступностьБУ = ТекСтрока.Строки.Итог("ДоступностьБУ");
			ИтогДоступностьНУ = ТекСтрока.Строки.Итог("ДоступностьНУ");
			
			ИтогБУ = ТекСтрока.Строки.Итог("БУ");
			ИтогНУ = ТекСтрока.Строки.Итог("НУ");
			
			Если ИтогДоступностьБУ = ИтогБУ Тогда
				ТекСтрока.БУ = 1;
			ИначеЕсли ИтогБУ Тогда
				ТекСтрока.БУ = 2;
			Иначе
				ТекСтрока.БУ = 0;
			КонецЕсли;
			
			Если ИтогДоступностьНУ = ИтогНУ Тогда
				ТекСтрока.НУ = 1;
			ИначеЕсли ИтогНУ Тогда
				ТекСтрока.НУ = 2;
			Иначе
				ТекСтрока.НУ = 0;
			КонецЕсли;
			
			ТекСтрока.ДоступностьБУ = ИтогДоступностьБУ;
			ТекСтрока.ДоступностьНУ = ИтогДоступностьНУ;
		Иначе
			ЗначенияОпций = Новый Структура;
			ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия, Неопределено);
			ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия + "БУ", Неопределено);
			ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия + "НУ", Неопределено);
			ЗаполнитьЗначенияСвойств(ЗначенияОпций, Объект);
			ТекСтрока.БУ = ТекСтрока.ДоступностьБУ И ?(ЗначениеЗаполнено(ЗначенияОпций[ТекСтрока.ИмяДействия + "БУ"]), ЗначенияОпций[ТекСтрока.ИмяДействия + "БУ"], ЗначенияОпций[ТекСтрока.ИмяДействия]);
			ТекСтрока.НУ = ТекСтрока.ДоступностьНУ И ?(ЗначениеЗаполнено(ЗначенияОпций[ТекСтрока.ИмяДействия + "НУ"]), ЗначенияОпций[ТекСтрока.ИмяДействия + "НУ"], ЗначенияОпций[ТекСтрока.ИмяДействия]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектИзДереваОпераций(СтрокиДерева)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		Если ТекСтрока.Строки.Количество() Тогда
			ЗаполнитьОбъектИзДереваОпераций(ТекСтрока.Строки);
		КонецЕсли;
		Если Не ПустаяСтрока(ТекСтрока.ИмяДействия) Тогда
			ЗначенияОпций = Новый Структура;
			ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия + "БУ", ТекСтрока.БУ);
			ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия + "НУ", ТекСтрока.НУ);
			Если ТекСтрока.ДоступностьБУ Тогда
				ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия, ТекСтрока.БУ);
			ИначеЕсли ТекСтрока.ДоступностьНУ Тогда
				ЗначенияОпций.Вставить(ТекСтрока.ИмяДействия, ТекСтрока.НУ);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект, ЗначенияОпций);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормированиеДереваВыполняемыхОпераций()
	
	ДеревоОпераций = ДанныеФормыВЗначение(ДеревоВыполняемыхОпераций, Тип("ДеревоЗначений"));
	
	ДеревоОпераций.Строки.Очистить();
	
	ВедетсяУчетОсновныхСредств = ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	ВедетсяУчетНМА             = ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА");
	
	Если ВедетсяУчетНМА Или ВедетсяУчетОсновныхСредств Тогда
		СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Начисление амортизации'"));
		Если ВедетсяУчетОсновныхСредств Тогда
			ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "АмортизацияОС", НСтр("ru = 'Начисление амортизации ОС'"), 1, 0);
		Иначе
			Объект.АмортизацияОСБУ = Ложь;
		КонецЕсли;
		Если ВедетсяУчетНМА Тогда
			ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "АмортизацияНМА", НСтр("ru = 'Начисление амортизации НМА'"), 1, 0);
		Иначе
			Объект.АмортизацияНМАБУ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВедетсяУчетОсновныхСредств Тогда
		ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "СписаниеРезерваПоПереоценкеОС", НСтр("ru = 'Списание резерва по переоценке ОС'"), 1, 0);
	Иначе
		Объект.СписаниеРезерваПоПереоценкеОСБУ = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") Тогда
		ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "ПереоценкаВалютныхСредств", НСтр("ru = 'Переоценка валютных средств'"), 1, 0);
	Иначе
		Объект.ПереоценкаВалютныхСредствБУ = Ложь;
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "СписаниеРБП", НСтр("ru = 'Списание расходов будущих периодов'"), 1, 0);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность")  Тогда
		СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Закрытие производственных счетов'"));
		ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетСтоимостиПродукции", НСтр("ru = 'Расчет и корректировка себестоимости продукции (услуг)'"), 1, ВедениеУчетаВременныхРазницБалансовымМетодом);
		ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "ПереносНЗП"              , НСтр("ru = 'Перенос незавершенного производства'")                   , 1, ВедениеУчетаВременныхРазницБалансовымМетодом);
	Иначе
		Объект.РасчетСтоимостиПродукцииБУ = Ложь;
		Объект.РасчетСтоимостиПродукцииНУ = Ложь;
		Объект.ПереносНЗПБУ = Ложь;
		Объект.ПереносНЗПНУ = Ложь;
	КонецЕсли;
	
	СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Закрытие счетов бухгалтерского учета'"));
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетИтоговогоДоходаУбытка", НСтр("ru = 'Расчет итогового дохода убытка'"), 1, 1);
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РеформацияБаланса"          , НСтр("ru = 'Реформация баланса'")            , 1, 0);
	
	СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Расчеты по НДС'"));
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетНДСКЗачету"          , НСтр("ru = 'Зачет НДС к возмещению'")         , 1, 0);
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "ЗачетАвансовИПереплатПоНДС", НСтр("ru = 'Зачет авансов и переплат по НДС'"), 1, 0);
	
	ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "ЗакрытиеПодотчетныхСумм", НСтр("ru = 'Закрытие подотчетных сумм'"), 1, 0);
	
	ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "ЗачетАвансовыхПлатежейПоНалогамИСборам", НСтр("ru = 'Зачет авансовых платежей по налогам и сборам'"), 1, 1);
	
	СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Регламентные операции налогового учета'"));
	
	Если ВедетсяУчетОсновныхСредств Тогда
		
		СтрокаФА = ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, , НСтр("ru = 'Расчет доходов и вычетов по фиксированным активам (НУ)'"));
		
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "РасчетДоходаОтПревышенияСтоимостиВыбывшихФА"   , НСтр("ru = 'Расчет дохода от превышения стоимости выбывших ФА (НУ)'")              , 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "СписаниеПриВыбытииВсехФАГруппы"                , НСтр("ru = 'Списание стоимостного баланса при выбытии всех ФА группы (подгруппы)'"), 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "СписаниеСтоимостногоБалансаГруппыМенееМинимума", НСтр("ru = 'Списание стоимостного баланса группы менее установленного минимума'")  , 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "АмортизацияФА"                                 , НСтр("ru = 'Амортизация фиксированных активов (НУ)'")                              , 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "РасчетВычетовПоРасходамНаРемонт"               , НСтр("ru = 'Расчет вычетов по расходам на ремонт ФА(НУ)'")                         , 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаФА.Строки, "РасчетВычетовПоПреференциям"                   , НСтр("ru = 'Расчет вычетов по преференциям ФА(НУ)'")                               , 0, 1);
		ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно", НСтр("ru = 'Включение активов, учитываемых отдельно, в стоимостный баланс групп (НУ)'"), 0, 1);
	Иначе
		Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА           = Ложь;
		Объект.СписаниеПриВыбытииВсехФАГруппы                        = Ложь;
		Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума        = Ложь;
		Объект.АмортизацияФАНУ                                       = Ложь;
		Объект.РасчетВычетовПоРасходамНаРемонт                       = Ложь;
		Объект.РасчетВычетовПоПреференциям                           = Ложь;
		Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно = Ложь;
	КонецЕсли;
	
	Если Объект.Дата < Дата(2019, 1, 1) Или Объект.РасчетВычетаПоРеализованнымТоварам Тогда
		ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетВычетаПоРеализованнымТоварам", НСтр("ru = 'Расчет вычета по реализованным товарам'"), 0, 1);
	Иначе
		Объект.РасчетВычетаПоРеализованнымТоварам = Ложь;
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетВычетовПоНалогам", НСтр("ru = 'Расчет вычета по налогам, уплаченным в бюджет'"), 0, 1);
	
	СтрокаГруппаДействий = ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, , НСтр("ru = 'Расчеты по налогу на прибыль'"));
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетВременныхРазниц", НСтр("ru = 'Отложенные налоговые активы и обязательства'"), 1, 0);
	ДобавитьСтрокуВДеревоОпераций(СтрокаГруппаДействий.Строки, "РасчетНалогаНаПрибыль", НСтр("ru = 'Расчет налога на прибыль'"), 1, 0);
	
	Если ПользователиБКВызовСервераПовтИсп.ДоступностьВыполненииОперацииЗакрытиеСчетовНУ() Тогда
		ДобавитьСтрокуВДеревоОпераций(ДеревоОпераций.Строки, "ЗакрытиеСчетов", НСтр("ru = 'Закрытие счетов НУ'"), 0, 1);
	КонецЕсли;
	
	ЗаполнитьДеревоОперацийИзОбъекта(ДеревоОпераций.Строки);
	
	ЗначениеВДанныеФормы(ДеревоОпераций, ДеревоВыполняемыхОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеСпискаВыполняемыхДействий()
	
	ДеревоОпераций = ДанныеФормыВЗначение(ДеревоВыполняемыхОпераций, Тип("ДеревоЗначений"));
	
	ВключитьВыключитьФлажки(Ложь);
	ЗаполнитьОбъектИзДереваОпераций(ДеревоОпераций.Строки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Комментарий", Ложь);
	НайденныеСтроки = Объект.Ошибки.НайтиСтроки(ПараметрыОтбора);
	ЕстьОшибки = НайденныеСтроки.Количество() > 0;
	
	ПараметрыОтбора.Вставить("Комментарий", Истина);
	НайденныеСтроки = Объект.Ошибки.НайтиСтроки(ПараметрыОтбора);
	ЕстьКомментарии = НайденныеСтроки.Количество() > 0;
	
	Элементы.СписокОшибок.Видимость    = ЕстьОшибки;
	Элементы.ДекорацияОшибки.Видимость = ЕстьОшибки;	
	
	Элементы.СписокКомментариев.Видимость   = ЕстьКомментарии;
	Элементы.ДекорацияКомментарий.Видимость = ЕстьКомментарии;
	
	ПоказыватьСтраницуНастройки = Ложь;
	
	//нужно найти строку переоценки, т.к. она верхний уровень, то вложенные строки искать не нужно
	Для Каждого ТекСтрока Из Форма.ДеревоВыполняемыхОпераций.ПолучитьЭлементы() Цикл
		Если ТекСтрока.ИмяДействия = "ПереоценкаВалютныхСредств" Тогда
			ПоказыватьСтраницуНастройки = ТекСтрока.БУ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаНастройки.Видимость = ПоказыватьСтраницуНастройки;
	Элементы.КурсыВалют.Видимость      = НЕ Форма.КурсыВалютИзРегистраСведений;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура ВключитьВыключитьФлажки(Параметр)
	
	Объект.АмортизацияОСБУ  = Параметр;
	Объект.АмортизацияНМАБУ = Параметр;
	
	Объект.СписаниеРезерваПоПереоценкеОСБУ = Параметр;
	
	Объект.ПереоценкаВалютныхСредствБУ = Параметр;
	
	Объект.СписаниеРБПБУ = Параметр;
	
	Объект.РасчетСтоимостиПродукцииБУ = Параметр;
	Объект.РасчетСтоимостиПродукцииНУ = Параметр;
	
	Объект.ПереносНЗПБУ = Параметр;
	Объект.ПереносНЗПНУ = Параметр;
	
	Объект.РеформацияБалансаБУ = Параметр;
	
	Объект.РасчетИтоговогоДоходаУбыткаБУ = Параметр;
	Объект.РасчетИтоговогоДоходаУбыткаНУ = Параметр;
	
	Объект.АмортизацияФАНУ = Параметр;
	Объект.РасчетВычетовПоРасходамНаРемонт = Параметр;
	Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА = Параметр;
	Объект.СписаниеПриВыбытииВсехФАГруппы = Параметр;
	Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума = Параметр;
	Объект.РасчетВычетаПоРеализованнымТоварам = Параметр;
	Объект.ЗакрытиеСчетовНУ = Параметр;
	
	Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно = Параметр;
	
	Объект.РасчетВременныхРазниц = Параметр;
	Объект.РасчетНалогаНаПрибыль = Параметр;
	Объект.РасчетНДСКЗачету = Параметр;
	Объект.ЗачетАвансовИПереплатПоНДС = Параметр;
	
	Объект.ЗакрытиеПодотчетныхСуммБУ = Параметр;
	
	Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ = Параметр;
	Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ = Параметр;
	
	Объект.РасчетВычетовПоНалогам = Параметр;
	Объект.РасчетВычетовПоПреференциям = Параметр;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзменениеФлажкаНаКлиенте(ИмяКолонки)
	
	СтрокаДерева = Элементы.ДеревоВыполняемыхОпераций_.ТекущиеДанные;	
	Родитель = СтрокаДерева.ПолучитьРодителя();  	
	
	Если СтрокаДерева[ИмяКолонки] = 2  Тогда
		СтрокаДерева[ИмяКолонки] = 0;        
	КонецЕсли; 

	ПроверитьВозможностьУстановленияФлажка(ЭтаФорма,ИмяКолонки, СтрокаДерева);
		
	Если Родитель = Неопределено Тогда
		Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл			
			ТекСтрока[ИмяКолонки] = СтрокаДерева[ИмяКолонки];
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() <> 0 Тогда 
				Для Каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
					ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
	Иначе							
		ВсеПризнаки = 0;
		КоличествоСтрок = 0;
		
		ВсеРодителя = 0;
		КоличествоСтрокРодителя = 0;
		РодительРодителя = Родитель.ПолучитьРодителя();
		
		Если РодительРодителя <> Неопределено Тогда
			Для Каждого ТекСтрока Из РодительРодителя.ПолучитьЭлементы() Цикл							
				Если ТекСтрока[ИмяКолонки] = 2  Тогда 
					Продолжить;
				КонецЕсли;   				
				ВсеРодителя             = ВсеРодителя + ТекСтрока[ИмяКолонки];
				КоличествоСтрокРодителя = КоличествоСтрокРодителя + 1;  			
			КонецЦикла;	
		КонецЕсли;

		Для Каждого ТекСтрока Из Родитель.ПолучитьЭлементы() Цикл					
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Для Каждого ВложеннаяСтрока ИЗ ВложенныеСтроки Цикл
				ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
	        КонецЦикла;      			                                       			
			ВсеПризнаки = ВсеПризнаки + ТекСтрока[ИмяКолонки];			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
		Если ВсеПризнаки = 0 Тогда
			Родитель[ИмяКолонки]= 0;
			Если КоличествоСтрокРодителя <> 0 И ВсеРодителя = 0 Тогда 
				РодительРодителя[ИмяКолонки] = 0;
			КонецЕсли;
		ИначеЕсли ВсеПризнаки = КоличествоСтрок Тогда
			Родитель[ИмяКолонки] = 1;
		Иначе
			Родитель[ИмяКолонки] = 2;
			Если РодительРодителя <> Неопределено Тогда 
				РодительРодителя[ИмяКолонки]  = 2;
			КонецЕсли; 			
		КонецЕсли; 		          		
	КонецЕсли;  
	
КонецПроцедуры
	
&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
 Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
    
    Если СтруктураПараметров = Неопределено
        ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта")
                И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда
        РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
        УстановитьФункциональныеОпцииФормы();
    КонецЕсли;
  
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарий()
	
	Объект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Закрытие месяца за %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(Объект.Дата, "ДФ='ММММ гггг'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОшибокНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", Объект.Ссылка);
	ПараметрыФормы.Вставить("Ошибки", Истина);
	
	ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, Объект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СписокКомментариевНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", Объект.Ссылка);
	ПараметрыФормы.Вставить("Ошибки", Ложь);
	
	ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, Объект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.Валюта);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.Кратность);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.Курс);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "КурсыВалют");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
		ТекущиеДанные.Кратность = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("Валюта", Элементы.КурсыВалют.ТекущиеДанные.Валюта);
		Строки = Объект.КурсыВалют.НайтиСтроки(УсловияПоиска);
		
		Если Строки.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Валюта %1 уже указана!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", 
															Элементы.КурсыВалют.ТекущиеДанные.Валюта);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.КурсыВалют.ТекущиеДанные.Валюта = Неопределено;
			ТекущийЭлемент = Элементы.КурсыВалютВалюта;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютИзРегистраСведенийПриИзменении(Элемент)
	
	Если  КурсыВалютИзРегистраСведений  Тогда
		Если  НЕ Объект.КурсыВалют.Количество() = 0 Тогда
			ТекстВопроса = НСтр("ru='Курсы валют будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьКурсыВалют", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие выполнение в фоновом режиме 

&НаКлиенте
Процедура ВыполнитьОперациюНаКлиенте(ЗакрыватьДокумент) Экспорт
	
	Перем СсылкаНаЗаписанныйОбъект;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьОперациюНаСервере(СсылкаНаЗаписанныйОбъект, ЗакрыватьДокумент);
	
	Если НЕ Результат.ЗаданиеВыполнено  И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента, СсылкаНаЗаписанныйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюНаСервере(СсылкаНаЗаписанныйОбъект, ЗакрыватьДокумент)
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокОбъект.ЭтоНовый() ИЛИ ДокОбъект.Модифицированность() ИЛИ ДокОбъект.ПометкаУдаления Тогда
		ДокОбъект.ПометкаУдаления = Ложь;
		//Если Объект.ПереносНЗПНУ = Ложь И Объект.Ссылка.ПереносНЗПНУ Тогда
		//	ДокОбъект.УбранФлажокПереносНЗПНУ = Истина;
		//Иначе
		//	ДокОбъект.УбранФлажокПереносНЗПНУ = Неопределено;			
		//КонецЕсли;	
		//
		//Если Объект.ПереносНЗПБУ = Ложь И Объект.Ссылка.ПереносНЗПБУ Тогда
		//	ДокОбъект.УбранФлажокПереносНЗПБУ = Истина;
		//Иначе
		//	ДокОбъект.УбранФлажокПереносНЗПБУ = Неопределено;			
		//КонецЕсли;	 

		ДокОбъект.Записать();
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	СсылкаНаЗаписанныйОбъект = ДокОбъект.Ссылка;
	
	СтруктураПараметров = Новый Структура("ЗакрытиеМесяца, ЗакрыватьДокумент, УбранФлажокПереносНЗПБУ, УбранФлажокПереносНЗПНУ", ДокОбъект.Ссылка, ЗакрыватьДокумент, ДокОбъект.УбранФлажокПереносНЗПБУ, ДокОбъект.УбранФлажокПереносНЗПНУ);
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
		
		// Запускаем выполнение в фоне
		
		НаименованиеЗадания = НСтр("ru = 'Выполнение закрытия периода'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЗакрытиеМесяца.ПроведениеВФоне", 
			СтруктураПараметров, 
			НаименованиеЗадания);
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
		
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеОперацииНаКлиенте(СтруктураДанных, СсылкаНаЗаписанныйОбъект = Неопределено)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СообщенияПользователю") Тогда
		Для Каждого Сообщение Из СтруктураДанных.СообщенияПользователю Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЗакрытиеМесяца") Тогда
		СформироватьИсториюИПоказатьОповещениюПользователю(СтруктураДанных.ЗакрытиеМесяца, НСтр("ru = 'Изменение:'"));
	КонецЕсли;
	
	Прочитать();
	Если СтруктураДанных.ВыполненоУспешно Тогда
		Если ЭтотОбъект.Открыта() Тогда
			Модифицированность = Ложь;
			Если СтруктураДанных.ЗакрыватьДокумент Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось провести ""%1"".
                                    |Подробности смотрите в Журнале регистрации.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураДанных.ЗакрытиеМесяца);
		ПоказатьПредупреждение( , ТекстПредупреждения);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Оповестить("Запись_ЗакрытиеМесяца");
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗакрытиеМесяца"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(РегОперация, ТекстОповещения)
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения, ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация), БиблиотекаКартинок.Информация32);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыполнениеОперации()
	
	ОбщегоНазначенияБК.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыполненоУспешно") Тогда
		Если НЕ СтруктураДанных.ВыполненоУспешно Тогда
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(ОбработатьВыполнениеОперации());
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВалютыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Валюты.Ссылка КАК Валюта
	                |ПОМЕСТИТЬ ВТ_Валюты
	                |ИЗ
	                |	Справочник.Валюты КАК Валюты
	                |ГДЕ
	                |	НЕ Валюты.ПометкаУдаления
	                |	И НЕ Валюты.Ссылка = &ВалютаРегУчета
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	                |	КурсыВалютСрезПоследних.Курс,
	                |	КурсыВалютСрезПоследних.Кратность
	                |ИЗ
	                |	РегистрСведений.КурсыВалют.СрезПоследних(
	                |			&Дата,
	                |			Валюта В
	                |				(ВЫБРАТЬ
	                |					ВТ_Валюты.Валюта
	                |				ИЗ
	                |					ВТ_Валюты КАК ВТ_Валюты)) КАК КурсыВалютСрезПоследних
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Валюта"	;
	
	Объект.КурсыВалют.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКурсыВалют(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.КурсыВалют.Очистить();
	
	ЗаполнитьВалютыНаСервере();

КонецПроцедуры  

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
	
		ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
				
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			ТекущиеДанные.Курс      = Результат.КурсВалюты;
			ТекущиеДанные.Кратность = Результат.КратностьВалюты;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьКурсыВалют(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		КурсыВалютИзРегистраСведений = НЕ КурсыВалютИзРегистраСведений;
		Возврат;	
	КонецЕсли;

	Объект.КурсыВалют.Очистить();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьВозможностьУстановленияФлажка(Форма, ИмяКолонки, СтрокаДерева)
	
	НеВыбранЗачетНДСКВозмещению = Ложь;
	ВыбранЗачетАвансовПоНДС = Ложь;
	
	Если СтрокаДерева <> Неопределено И
		(СтрокаДерева.ИмяДействия = "ЗачетАвансовИПереплатПоНДС" И СтрокаДерева[ИмяКолонки] = 1) Или
		(СтрокаДерева.ИмяДействия = "РасчетНДСКЗачету" И СтрокаДерева[ИмяКолонки] = 0) Тогда
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если ВложеннаяСтрока.ИмяДействия = "РасчетНДСКЗачету" И ВложеннаяСтрока[ИмяКолонки] = 0 Тогда
				НеВыбранЗачетНДСКВозмещению = Истина;
			ИначеЕсли ВложеннаяСтрока.ИмяДействия = "ЗачетАвансовИПереплатПоНДС" И ВложеннаяСтрока[ИмяКолонки] = 1 И НеВыбранЗачетНДСКВозмещению Тогда
				ВложеннаяСтрока[ИмяКолонки] = 0;
				ТекстСообщения = НСтр("ru = 'Зачет авансов и переплат выполняется только совместно с зачетом НДС к возмещению'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		Конеццикла;
	КонецЕсли;
	
Конецпроцедуры

