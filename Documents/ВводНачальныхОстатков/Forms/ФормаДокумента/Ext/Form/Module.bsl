
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ОтражатьПоСпециальнымРегистрам = (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы);		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.УчитыватьКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	Элементы.ФормаКнопкаПоказыватьДанныеБУ.Пометка = Объект.ПоказыватьДанныеБУ;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПоказыватьВстроеннуюСправкуСохраненноеЗначение	= ХранилищеОбщихНастроек.Загрузить("Документ_ВводНачальныхОстатков", "ПоказыватьВстроеннуюСправку");
	
	ПоказыватьВстроеннуюСправку	= ?(ПоказыватьВстроеннуюСправкуСохраненноеЗначение = Неопределено, Истина, ПоказыватьВстроеннуюСправкуСохраненноеЗначение);
	
	ТаблицаСчетовРазделовУчета.Загрузить(Документы.ВводНачальныхОстатков.ПолучитьТаблицуСчетов());
	
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	СписокСчетовБУПрочихРазделов = ТекущийОбъект.СписокСчетовБУПрочихРазделов.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.СписокСчетовБУПрочихРазделов = Новый ХранилищеЗначения(СписокСчетовБУПрочихРазделов);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ЗаполнитьДоговораВТабличнойЧасти(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьДоступностьСубконто(ЭтаФорма);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищеОбщихНастроек.Сохранить("Документ_ВводНачальныхОстатков", "ПоказыватьВстроеннуюСправку", ЭтаФорма.ПоказыватьВстроеннуюСправку);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""ввод начальных остатков"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	
	Если Объект.РазделУчета  =  ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы") Тогда
		Объект.ОтражатьПоСпециальнымРегистрам = Истина;
	Иначе
		Объект.ОтражатьПоСпециальнымРегистрам = Ложь;
	КонецЕсли;
			
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы()
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаКлиенте
Процедура РасчетыСКонтрагентамиСуммаБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.СуммаБУ;
	КонецЕсли;
	
	ЗаполнитьСчетУчетаНаСервере(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если СтрокаТаблицы.ПризнакВалютногоУчета Тогда 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
			СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета;
			СтрокаТаблицы.КурсВзаиморасчетов      = 1;
			СтрокаТаблицы.КратностьВзаиморасчетов = 1;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		СтрокаТаблицы.КурсВзаиморасчетов      = 0;
		СтрокаТаблицы.КратностьВзаиморасчетов = 0;
		СтрокаТаблицы.ВалютнаяСумма           = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если НоваяСтрока И Объект.УчитыватьКПН Тогда			
		
		ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ТекущиеДанные.ВидУчетаНУ);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
	Объект.Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты.Документ.Тип");
	
	СтруктураПараметров.Вставить("ТипыДокументов", "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты.Документ.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиВалютнаяСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма, ВалютаРегламентированногоУчета);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.Валюта);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасчетыСКонтрагентами.ТекущиеДанные, ЭтаФорма, ВалютаРегламентированногоУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("Контрагент, ДоговорКонтрагента");
			
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	РасчетыСКонтрагентамиКонтрагентПриИзмененииНаСервере(ПараметрыСтроки,Объект.РазделУчета);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(СтрокаТаблицы.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоНалогамИСборамСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыПоНалогамИСборам.ТекущиеДанные;
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоНалогамИСборамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование И  Объект.УчитыватьКПН Тогда
		
		ТекущиеДанные = Элементы.РасчетыПоНалогамИСборам.ТекущиеДанные;
		
		ТекущиеДанные.ВидПлатежаВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог");
		
		ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ТекущиеДанные.ВидУчетаНУ);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетнымиЛицамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетнымиЛицами.ТекущиеДанные;
	
	Если НоваяСтрока И Объект.УчитыватьКПН Тогда
		
		ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ТекущиеДанные.ВидУчетаНУ);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыСПодотчетнымиЛицами.ТекущиеДанные;
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетУчетаБУ, СуммаБУ, Валюта,ВалютнаяСумма");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	РасчетыСПодотчетнымиЛицамиСчетУчетаБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы)
	
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтрокиТаблицы.СчетУчетаБУ);
	
	Если ДанныеСчета.Валютный И Не ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Валюта) Тогда
		ДанныеСтрокиТаблицы.Валюта 			= ВалютаРегламентированногоУчета;		
		ДанныеСтрокиТаблицы.ВалютнаяСумма   = ДанныеСтрокиТаблицы.СуммаБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетнымиЛицамиСуммаБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетнымиЛицами.ТекущиеДанные;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.СуммаБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;
	
	Если НоваяСтрока И Объект.УчитыватьКПН Тогда
		
		ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ТекущиеДанные.ВидУчетаНУ);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
	"Субконто1", "Субконто2", "Субконто3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетУчетаБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчетаБУ");
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчетаБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "Субконто", 2, "СчетУчетаБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "Субконто", 3, "СчетУчетаБУ", СтрокаТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если НоваяСтрока И Объект.УчитыватьКПН Тогда
		
		ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ТекущиеДанные.ВидУчетаНУ);		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));	
	
	ЗапасыСчетУчетаПриИзмененииНаСервере(СтрокаТаблицы.ПолучитьИдентификатор());
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыСчетУчетаПриИзмененииНаСервере(НомерСтрокиЗапасы = Неопределено)
	
	Если НомерСтрокиЗапасы = Неопределено Тогда
		Если Объект.БухСправка.Количество() > 0 Тогда
			ТекущиеДанные = Объект.БухСправка[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Объект.Запасы.НайтиПоИдентификатору(НомерСтрокиЗапасы);
	КонецЕсли;
	//
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетБУ = ТекущиеДанные.СчетУчетаБУ;
	СчетНУ = ТекущиеДанные.СчетУчетаНУ;
	
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетБУ);
	
	ВедетсяПартионныйУчетЗапасов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетБУ);
	ВедетсяУчетПоКонтрагентам 	 = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СчетБУ);
	ВедетсяУчетПоСкладам 	 	 = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СчетБУ);
	
	ВедетсяПартионныйУчетЗапасовНУ =  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетНУ);
	ВедетсяУчетПоКонтрагентамНУ    =  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СчетНУ);
	ВедетсяУчетПоСкладамНУ 	 	   =  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СчетНУ);
	
	Если Объект.ОтражатьВБухгалтерскомУчете И Объект.УчитыватьКПН Тогда		
		Элементы.ЗапасыПартия.ТолькоПросмотр		= НЕ ВедетсяПартионныйУчетЗапасов И НЕ ВедетсяПартионныйУчетЗапасовНУ;	
		Элементы.ЗапасыКонтрагент.ТолькоПросмотр	= НЕ ВедетсяУчетПоКонтрагентам И НЕ ВедетсяУчетПоКонтрагентамНУ;	
		Элементы.ЗапасыСклад.ТолькоПросмотр			= НЕ ВедетсяУчетПоСкладам И НЕ ВедетсяУчетПоСкладамНУ;
		
	ИначеЕсли Объект.ОтражатьВБухгалтерскомУчете Тогда
		Элементы.ЗапасыПартия.ТолькоПросмотр		= НЕ ВедетсяПартионныйУчетЗапасов;	
		Элементы.ЗапасыКонтрагент.ТолькоПросмотр	= НЕ ВедетсяУчетПоКонтрагентам ;	
		Элементы.ЗапасыСклад.ТолькоПросмотр	        = НЕ ВедетсяУчетПоСкладам;
		
	Иначе	
		Элементы.ЗапасыПартия.ТолькоПросмотр		= НЕ ВедетсяПартионныйУчетЗапасовНУ;	
		Элементы.ЗапасыКонтрагент.ТолькоПросмотр	= НЕ ВедетсяУчетПоКонтрагентамНУ ;	
		Элементы.ЗапасыСклад.ТолькоПросмотр	        = НЕ ВедетсяУчетПоСкладамНУ;	
		
	КонецЕсли;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ИспользуетсяНесколькоСкладов() Тогда
		ТекущиеДанные.Склад = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСкладПоУмолчанию();
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	
	ЗапасыСчетУчетаПриИзмененииНаСервере(СтрокаТаблицы.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаВалютнаяСуммаПриИзменении(Элемент)
	
	РасчетСуммыБУ();
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто1ПриИзменении(Элемент)
	
    ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчетаБУ");

    Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Субконто1) Тогда
        Возврат;
    КонецЕсли;
	
    БухСправкаСубконто1ПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
  
КонецПроцедуры

&НаСервере
Процедура БухСправкаСубконто1ПриИзмененииНаСервере(НомерСтрокиДенежныеСредства = Неопределено)
	
	Если НомерСтрокиДенежныеСредства = Неопределено Тогда
		Если Объект.БухСправка.Количество() > 0 Тогда
			ТекущиеДанные = Объект.БухСправка[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Объект.БухСправка.НайтиПоИдентификатору(НомерСтрокиДенежныеСредства);
	КонецЕсли;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства И
		(ТипЗнч(ТекущиеДанные.Субконто1) = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ  ТипЗнч(ТекущиеДанные.Субконто1) = Тип("СправочникСсылка.Кассы")) Тогда
		ТекущиеДанные.Валюта = ТекущиеДанные.Субконто1.ВалютаДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчетаБУ");

    Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Субконто2) Тогда
        Возврат;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчетаБУ");

    Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Субконто3) Тогда
        Возврат;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСчетУчетаНУПриИзменении(Элемент)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОрганизацийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ИспользуетсяНесколькоСкладов() Тогда
		
		ТекущиеДанные = Элементы.ТоварыОрганизаций.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			
			ТекущиеДанные.Склад = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСкладПоУмолчанию();		
			
		КонецЕсли;	
		
	КонецЕсли;
					
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьНалогиИСборыОстаткамиПоБУ(Команда)
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстатокКт");	
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокКт");
	СтруктураСубконто    = Новый Структура("ВидНалога, ВидПлатежаВБюджет", "Субконто1", "Субконто2");
	
	Если Объект.РасчетыПоНалогамИСборам.Количество() = 0 Тогда
		ЗаполнитьОстаткамиПоБУНаСервере("РасчетыПоНалогамИСборам", СтруктураПоказателей, СтруктураСубконто, Ложь);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыПоНалогамИСборам", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимВводаОстатков(Команда)
	
	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБУ",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНУ",	Объект.УчитыватьКПН);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("РазделУчета",	Объект.РазделУчета);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаНастройкиРежима", ЭтотОбъект, Параметры);
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройки", ПараметрыНастройкиРежима,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьДанныеБУ(Команда)
	
	ЭлементыФормы = ЭтаФорма.Элементы;
	
	ЭлементыФормы.ФормаКнопкаПоказыватьДанныеБУ.Пометка = НЕ ЭлементыФормы.ФормаКнопкаПоказыватьДанныеБУ.Пометка;
	
	Если ЭлементыФормы.ФормаКнопкаПоказыватьДанныеБУ.Пометка И Не Объект.ПоказыватьДанныеБУ Тогда
		Объект.ПоказыватьДанныеБУ = Истина;
	ИначеЕсли Не ЭлементыФормы.ФормаКнопкаПоказыватьДанныеБУ.Пометка И Объект.ПоказыватьДанныеБУ Тогда
		Объект.ПоказыватьДанныеБУ = Ложь;
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеСправкиФормы(Команда)
	
	ПоказыватьВстроеннуюСправку = НЕ ПоказыватьВстроеннуюСправку;
	//УправлениеФормой(ЭтаФорма);
	Элементы.ГруппаОсновнаяПравая.Видимость = ПоказыватьВстроеннуюСправку;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетыСКонтрагентамиОстаткамиПоБУ(Команда)
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");
	СтруктураСубконто    = Новый Структура("Контрагент, ДоговорКонтрагента, Документ, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
	
	
	Если Объект.РасчетыСКонтрагентами.Количество() = 0 Тогда
		ЗаполнитьОстаткамиПоБУНаСервере("РасчетыСКонтрагентами", СтруктураПоказателей, СтруктураСубконто, Истина);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыСКонтрагентами", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетыСКонтрагентамиПоДаннымБухУчета(Команда)
	
	Показатели = Новый Структура("СуммаНУ, СуммаНУКт", "СуммаБУ", "СуммаБУКт");
	ЗаполнитьРеквизитыНУПоДаннымБУ("РасчетыСКонтрагентами", Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНалогиИСборыПоДаннымБухУчета(Команда)
	
	Показатели = Новый Структура("СуммаНУ", "СуммаБУ");
	ЗаполнитьРеквизитыНУПоДаннымБУ("РасчетыПоНалогамИСборам", Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетыСПодотчетнымиЛицамиОстаткамиПоБУ(Команда)
	
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстаток");	
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");
	СтруктураПоказателей.Вставить("Валюта", "Валюта");
	
	СтруктураСубконто    = Новый Структура("РаботникОрганизации,Валюта ", "Субконто1", "Валюта");
	
	Если Объект.РасчетыСПодотчетнымиЛицами.Количество() = 0 Тогда
		ЗаполнитьОстаткамиПоБУНаСервере("РасчетыСПодотчетнымиЛицами", СтруктураПоказателей, СтруктураСубконто);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыСПодотчетнымиЛицами", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетыСПодотчетнымиЛицамиПоДаннымБухУчета(Команда)
	
	Показатели = Новый Структура("СуммаНУ", "СуммаБУ");
	ЗаполнитьРеквизитыНУПоДаннымБУ("РасчетыСПодотчетнымиЛицами", Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБухСправкуОстаткамиПоБУ(Команда)
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда		
		СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстатокДт");
		СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокДт");
		СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстатокДт");		
		СтруктураСубконто    = Новый Структура("Субконто1, Субконто2, Субконто3, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
		
		Если Объект.БухСправка.Количество() = 0 Тогда
			ЗаполнитьОстаткамиПоБУНаСервере("БухСправка", СтруктураПоказателей, СтруктураСубконто);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
		|Заполнить?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиБухСправкаДенежныеСредства", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьСписокСчетовНаСервере(СписокСчетовБУПрочихРазделов);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокСчетовБУПрочихРазделов", СписокСчетовБУПрочихРазделов.Скопировать());
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаПрочихСчетов", ЭтаФорма, Параметры);
		ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиСчетов", ПараметрыФормы,ЭтаФорма, , , , ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапасыПоДаннымБухУчета(Команда)
	
	Показатели = Новый Структура("КоличествоНУ, СуммаНУ", "КоличествоБУ", "СуммаБУ");
	ЗаполнитьРеквизитыНУПоДаннымБУ("Запасы", Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапасыОстаткамиПоБУ(Команда)
	
	СубконтоСклады = ВедетсяУчетПоСкладам();
	
	СчетТовары =  ПредопределенноеЗначение("ПланСчетов.Налоговый.Товары");
	
	СтруктураПоказателей = Новый Структура("КоличествоНУ, СуммаНУ", "КоличествоОстатокДт", "СуммаОстатокДт");
	
	//Если ПоказыватьДанныеПоБУ
	СтруктураПоказателей.Вставить("КоличествоБУ", "КоличествоОстатокДт");
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокДт");
	
	Если Не Объект.ПоказыватьДанныеБУ Тогда
		Объект.ПоказыватьДанныеБУ = Истина;
	КонецЕсли;
	
	Если Не СубконтоСклады  Тогда
		СтруктураСубконто    = Новый Структура("Номенклатура, Контрагент, Партия", "Субконто1", "Субконто2", "Субконто3");
	Иначе
		СтруктураСубконто    = Новый Структура("Номенклатура, Контрагент, Склад, Партия", "Субконто1", "Субконто1", "Субконто2", "Субконто3");
	КонецЕсли;   
	
	
	Если Объект.Запасы.Количество() = 0 Тогда
		ЗаполнитьОстаткамиПоБУНаСервере("Запасы", СтруктураПоказателей, СтруктураСубконто);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиЗапасы", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБухСправкуПоДаннымБухУчета(Команда)
	
	Показатели = Новый Структура("СуммаНУ, КоличествоНУ", "СуммаБУ",  "КоличествоБУ");
	ЗаполнитьРеквизитыНУПоДаннымБУ("БухСправка", Показатели, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыОрганизацийПоДаннымБУ(Команда)
	
	Если Объект.ТоварыОрганизаций.Количество() = 0 Тогда
		Показатели = Новый Структура("Количество, Номенклатура");
		ЗаполнитьРеквизитыНУПоДаннымБУ("Запасы", Показатели, , Истина, "ТоварыОрганизаций");		
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ПараметрыЗаполнения = Новый Структура("ПоОстаткам", Ложь);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиТоварыОрганизаций", ЭтотОбъект, ПараметрыЗаполнения);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамТоварыОрганизации(Команда)
			
	Если Объект.ТоварыОрганизаций.Количество() = 0 Тогда
		ЗаполнитьОстаткамиТоварыОрганизацийНаСервере();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ПараметрыЗаполнения = Новый Структура("ПоОстаткам", Истина);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиТоварыОрганизаций", ЭтотОбъект, ПараметрыЗаполнения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасчетыСКонтрагентами(Команда)
	
	ИзменитьТабличнуюЧасть("РасчетыСКонтрагентами", НСтр("ru = 'Расчеты с контрагентами'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасчетыПоНалогамИСборам(Команда)
	
	ИзменитьТабличнуюЧасть("РасчетыПоНалогамИСборам", НСтр("ru = 'Расчеты по налогам и сборам'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасчетыСПодотчетнымиЛицами(Команда)
	
	ИзменитьТабличнуюЧасть("РасчетыСПодотчетнымиЛицами", НСтр("ru = 'Расчеты с подотчетными лицами'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапасы(Команда)
	
	ИзменитьТабличнуюЧасть("Запасы", НСтр("ru = 'Запасы'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТоварыОрганизаций(Команда)
	
	ИзменитьТабличнуюЧасть("ТоварыОрганизаций", НСтр("ru = 'Товары организаций'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.ТоварыОрганизаций.ТолькоПросмотр       = Ложь;
	Элементы.ТоварыОрганизаций.ИзменятьСоставСтрок  = Ложь;
	Элементы.ТоварыОрганизаций.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Запасы.ТолькоПросмотр           = Ложь;
	Элементы.Запасы.ИзменятьСоставСтрок      = Ложь;
	Элементы.Запасы.ИзменятьПорядокСтрок     = Ложь;

	Элементы.РасчетыСПодотчетнымиЛицами.ТолькоПросмотр          = Ложь;
	Элементы.РасчетыСПодотчетнымиЛицами.ИзменятьСоставСтрок     = Ложь;
	Элементы.РасчетыСПодотчетнымиЛицами.ИзменятьПорядокСтрок    = Ложь;
	
	Элементы.БухСправка.ТолькоПросмотр          = Ложь;
	Элементы.БухСправка.ИзменятьСоставСтрок     = Ложь;
	Элементы.БухСправка.ИзменятьПорядокСтрок    = Ложь;
	
	Элементы.РасчетыСКонтрагентами.ТолькоПросмотр          = Ложь;
	Элементы.РасчетыСКонтрагентами.ИзменятьСоставСтрок     = Ложь;
	Элементы.РасчетыСКонтрагентами.ИзменятьПорядокСтрок    = Ложь;
	
	Элементы.РасчетыПоНалогамИСборам.ТолькоПросмотр          = Ложь;
	Элементы.РасчетыПоНалогамИСборам.ИзменятьСоставСтрок     = Ложь;
	Элементы.РасчетыПоНалогамИСборам.ИзменятьПорядокСтрок    = Ложь;
	
	Элементы.ФормаКнопкаРежимВводаОстатков.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
			
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УстановитьТекущуюСтраницуПоДаннымРазделаУчета(Форма);
	
	Элементы.Дата.ТолькоПросмотр = Форма.ОткрытиеИзОбработкиВводаНачальныхОстатков;
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр = Форма.ОткрытиеИзОбработкиВводаНачальныхОстатков;
	
	Элементы.ФормаКнопкаПоказыватьДанныеБУ.Пометка = Объект.ПоказыватьДанныеБУ;
	Элементы.ФормаКнопкаПоказыватьДанныеБУ.Доступность = НЕ Объект.ОтражатьВБухгалтерскомУчете;
	
	Элементы.ГруппаОсновнаяПравая.Видимость = Форма.ПоказыватьВстроеннуюСправку;
	                     	
	Элементы.ФормаПереключениеСправкиФормы.Заголовок = ?(Форма.ПоказыватьВстроеннуюСправку, НСтр("ru = 'Скрыть справку'"), НСтр("ru = 'Показать справку'"));
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	
	УстановитьДоступностьСубконто(Форма);
		
	Если ЗначениеЗаполнено(Объект.РазделУчета) Тогда
		
		СтрокаТаблицыРазделовУчета = Форма.ТаблицаСчетовРазделовУчета.НайтиСтроки(Новый Структура("РазделУчета", Объект.РазделУчета));
		
		Если СтрокаТаблицыРазделовУчета <> Неопределено Тогда
			
			СтрокаТаблицыРазделовУчета = СтрокаТаблицыРазделовУчета[0];
			
			СчетаГруппы		= СтрокаТаблицыРазделовУчета.СчетаГруппы;
			Счета			= СтрокаТаблицыРазделовУчета.Счета;
			СчетаИсключения	= СтрокаТаблицыРазделовУчета.СчетаИсключения;	
			СчетаНУ			= СтрокаТаблицыРазделовУчета.СчетаНУ;
			
			МассивСчетовБУ 		 = Новый Массив;
			МассивСчетовГруппыНУ = Новый Массив();
			
			ПолучитьДанныеНаСервере(Объект.РазделУчета, СчетаГруппы, СчетаНУ, СчетаИсключения, МассивСчетовБУ, МассивСчетовГруппыНУ, Форма.ВстроеннаяСправка);
			
			Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыСКонтрагентамиСчетУчетаБУ, МассивСчетовБУ);
			    РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Форма, Объект.РазделУчета);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыПоНалогамИСборамСчетУчетаБУ, МассивСчетовБУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыСПодотчетнымиЛицамиСчетУчетаБУ, МассивСчетовБУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.БухСправкаСчетУчетаБУ, МассивСчетовБУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ЗапасыСчетУчетаБУ, МассивСчетовБУ);
			КонецЕсли;
			
			// заполним реквизит формы для возможного дальнейшего использования в процедурах заполнения по остаткам
			Форма.СписокСчетовРазделаБУ.ЗагрузитьЗначения(МассивСчетовБУ);
			
			Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыСКонтрагентамиСчетУчетаНУ, МассивСчетовГруппыНУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыПоНалогамИСборамСчетУчетаНУ, МассивСчетовГруппыНУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыСПодотчетнымиЛицамиСчетУчетаНУ, МассивСчетовГруппыНУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") ИЛИ
				Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.БухСправкаСчетУчетаНУ, МассивСчетовГруппыНУ);
			ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы") Тогда
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ЗапасыСчетУчетаНУ, МассивСчетовГруппыНУ);				
				Элементы.БУТоварыОрганизаций.Видимость = Объект.ОтражатьПоСпециальнымРегистрам;
				Элементы.ЗапасыБУНУ.Видимость          = Объект.ОтражатьВБухгалтерскомУчете ИЛИ Объект.УчитыватьКПН;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда
			Элементы.БухСправкаСуммаБУ.Заголовок = НСтр("ru = 'Сумма остатка (БУ)'");
			Элементы.БухСправкаСуммаНУ.Заголовок = НСтр("ru = 'Сумма остатка (НУ)'");
		Иначе
			Элементы.БухСправкаСуммаБУ.Заголовок = НСтр("ru = 'Сумма Дт (БУ)'");
			Элементы.БухСправкаСуммаНУ.Заголовок = НСтр("ru = 'Сумма Дт (НУ)'");
		КонецЕсли;
		
		Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета") И 
			Форма.СписокСчетовБУПрочихРазделов.Количество() = 0  Тогда
			Форма.СписокСчетовБУПрочихРазделов = Форма.СписокСчетовРазделаБУ.Скопировать();	
		КонецЕсли;
		           		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуПоДаннымРазделаУчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.РазделУчета) Тогда //Стартовая страница
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНачало;
	ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками")
		ИЛИ Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками")
		ИЛИ Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
		Элементы.РасчетыСКонтрагентамиКнопкаЗаполнитьПоОстаткамБУ.Доступность = Объект.УчитыватьКПН;
		Элементы.РасчетыСКонтрагентамиКнопкаЗаполнитьПоДаннымБУ.Доступность = Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете;
	ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыПоНалогам;
		Элементы.РасчетыПоНалогамИСборамКнопкаЗаполнитьПоОстаткамБУ.Доступность = Объект.УчитыватьКПН;
		Элементы.РасчетыПоНалогамИСборамКнопкаЗаполнитьПоДаннымБУ.Доступность = Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете;
	ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодотчетныеЛица;
		Элементы.РасчетыСПодотчетнымиЛицамиКнопкаЗаполнитьПоОстаткамБУ.Доступность = Объект.УчитыватьКПН;
		Элементы.РасчетыСПодотчетнымиЛицамиКнопкаЗаполнитьПоДаннымБУ.Доступность = Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете;
	ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапасы;
		Элементы.ЗапасыКнопкаЗаполнитьПоОстаткамБУ.Доступность = Объект.УчитыватьКПН;
		Элементы.ЗапасыКнопкаЗаполнитьПоДаннымБУ.Доступность = Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете;
		Если НЕ (Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете) И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница = Элементы.БУТоварыОрганизаций;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаБухСправка;
		Элементы.БухСправкаКнопкаЗаполнитьПоОстаткамБУ.Доступность = Объект.УчитыватьКПН;
		Элементы.БухСправкаКнопкаЗаполнитьПоДаннымБУ.Доступность = Объект.УчитыватьКПН И Объект.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСубконто(Форма)
	
	Объект = Форма.Объект;
	СтруктураЭлементов  = Новый Структура;
	СтруктураЭлементов.Вставить("СчетУчетаБУ","Субконто"); 
	
	Для Каждого СтрокаТЧ Из Объект.БухСправка Цикл
		
		Для Каждого ЭлементТЧ Из СтруктураЭлементов Цикл
			
			ИмяСчета    = ЭлементТЧ.Ключ; 
			ИмяЭлемента = ЭлементТЧ.Значение;
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			ИмяЭлемента + "1", ИмяЭлемента + "2", ИмяЭлемента + "3");
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТЧ[ИмяСчета], СтрокаТЧ, ПоляОбъекта);
			
			// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
			Префикс = "";
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, СтрокаТЧ, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТЧ, ИмяЭлемента + Префикс + "%Индекс%", "БухСправка" + ИмяЭлемента +  "%Индекс%", ПараметрыДокумента);	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(ВидУчетаНУ)
	
	ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОтражатьДокументыВНалоговомУчете");
	ВидУчетаНУ  = ?(ОтражатьДокументыВНалоговомУчете, ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"), ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ"));			
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров, "РасчетыСКонтрагентами");

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров,СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	//// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	//Если Объект.Услуги.Количество() = 0 Тогда 
	//	Возврат;
	//КонецЕсли;
	
	//// Список для обработки ТЧ
	//СписокТабличныхЧастей = Новый СписокЗначений;
	//
	//СписокАналитикиСчетов = Новый СписокЗначений;
	//
	//// ТЧ Услуги
	//СписокАналитикиСчетов.Добавить("ДоходовБУ"); 	// СчетДоходовБУ
	//СписокАналитикиСчетов.Добавить("ДоходовНУ"); 	// СчетДоходовНУ
	//СписокАналитикиСчетов.Добавить("СписанияСебестоимостиБУ"); 	// СписанияСебестоимостиБУ
	//СписокАналитикиСчетов.Добавить("СписанияСебестоимостиНУ"); 	// СписанияСебестоимостиНУ
	
	//СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетов); 
	//СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	//
	
	//// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	//РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораНаСервере(НомерСтрокаПлатежа = Неопределено)
	
	Если НомерСтрокаПлатежа = Неопределено Тогда
		Если Объект.РасчетыСКонтрагентами.Количество() > 0 Тогда
			ТекущиеДанные = Объект.РасчетыСКонтрагентами[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Объект.РасчетыСКонтрагентами.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;
	
	ТекущиеДанные.Валюта = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма, ВалютаРегламентированногоУчета);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, Форма, ВалютаРегламентированногоУчета)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(ТекущиеДанные);
	
	Если (ТекущиеДанные.КурсВзаиморасчетов <> 0) И (ТекущиеДанные.КратностьВзаиморасчетов <> 0) Тогда
		
		СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Валюта,
		ВалютаРегламентированногоУчета,
		ТекущиеДанные.КурсВзаиморасчетов,1,
		ТекущиеДанные.КратностьВзаиморасчетов,1);	
		
	Иначе
		
		СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаБУ);
	СчетУчетаПассивный = (ДанныеСчета.Вид = ВидСчета.Пассивный);
	
	ТекущиеДанные.СуммаБУ = СуммаВзаиморасчетов;	
	
	Если СчетУчетаПассивный Тогда
		ТекущиеДанные.СуммаНУКт = СуммаВзаиморасчетов;	
	Иначе
		ТекущиеДанные.СуммаНУ = СуммаВзаиморасчетов;	
	КонецЕсли;	
	         	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьСчетУчетаНаСервере(ТекущиеДанные)
	
	
	ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаБУ);
	ДанныеСчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаНУ);	
	
	Коэффициент = 1;
	Если (ДанныеСчетаБУ.Вид <> ДанныеСчетаНУ.Вид)
		И (ДанныеСчетаБУ.Вид <> ВидСчета.АктивноПассивный) И (ДанныеСчетаНУ.Вид = ВидСчета.АктивноПассивный)	Тогда				
		Коэффициент = -1;  		
	КонецЕсли;
	
	ТекущиеДанные.СуммаНУ =  Коэффициент * ТекущиеДанные.СуммаБУ;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
		ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма, ВалютаРегламентированногоУчета);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНастройкиРежима(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура")Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиПоБУНаСервере(ТабличнаяЧасть, СтруктураПоказателей, СтруктураСубконто, ОпределятьТипСчета = Ложь)
	
	//установим реквизит "ПоказыватьДанныеБУ"
	Если НЕ Объект.ПоказыватьДанныеБУ Тогда
		Объект.ПоказыватьДанныеБУ = Истина;
		Элементы.ФормаКнопкаПоказыватьДанныеБУ.Пометка = Истина;
	КонецЕсли;
	
	СтрокаПроверкиПоказателей  = "";
	СтрокаСубконто = "";
	ПерваяЗапись = Истина;	
	
	Для Каждого Элемент Из СтруктураПоказателей Цикл
		Если Найти(Элемент.Значение, "ВалютнаяСумма") <> 0 ИЛИ Элемент.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		ТекстПроверки = ?(НЕ ПерваяЗапись, " ИЛИ ", "") + "ТиповойОстатки." + Элемент.Значение + " <> 0 ";
		ПерваяЗапись = Ложь;
		
		СтрокаПроверкиПоказателей  = СтрокаПроверкиПоказателей +  ТекстПроверки;
	КонецЦикла;
	
	Для Каждого Элемент Из СтруктураСубконто Цикл		
		
		СтрокаСубконто  = СтрокаСубконто +  " ТиповойОстатки." + Элемент.Значение + ",";
	КонецЦикла;
	
	СтрокаУпорядочивания = Сред(СтрокаСубконто ,1, СтрДлина(СтрокаСубконто)-1);
	
	Запрос = Новый Запрос;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ " + СтрокаСубконто + "
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) КАК КоличествоостатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокКт, 0) КАК КоличествоОстатокКт,
	|	ТиповойПлан.СчетНУ,
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Валюта,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстатокДт, 0) КАК ВалютнаяСуммаОстатокДт,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстатокКт, 0) КАК ВалютнаяСуммаОстатокКт,
	|	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстаток, 0) КАК ВалютнаяСуммаОстаток,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток				   
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация" + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК ТиповойПлан
	|		ПО ТиповойОстатки.Счет = ТиповойПлан.Ссылка
	|ГДЕ
	|	(НЕ ТиповойПлан.СчетНУ ЕСТЬ NULL )
	|	И ("  + СтрокаПроверкиПоказателей + ") 
	| УПОРЯДОЧИТЬ ПО  " + СтрокаУпорядочивания;
	
	МассивСчетов = СписокСчетовРазделаБУ.ВыгрузитьЗначения();
	Запрос.УстановитьПараметр("СписокСчетов",МассивСчетов);		   
	
	ГраницаКон = Новый Граница (КонецДня(Объект.Дата),ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("ДатаОстатков", ГраницаКон);				                	
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрефиксПоказателяДляЗапроса = "";
		ПрефиксПоказателяДляЗаполнения = "";
		ПрефиксПоказателяДляЗаполненияНУ = "";
		ПрефиксПоказателяДляЗаполнения = "";
		Если ОпределятьТипСчета  Тогда
			Если Выборка.Счет.Вид = ВидСчета.Активный Тогда
				ПрефиксПоказателяДляЗапроса   = "Дт";
				ПрефиксПоказателяДляЗаполнения = "";
			ИначеЕсли Выборка.Счет.Вид = ВидСчета.Пассивный Тогда
				ПрефиксПоказателяДляЗапроса    = "Кт";
				ПрефиксПоказателяДляЗаполнения = "Кт";
			КонецЕсли;
			
			Если Выборка.СчетНУ.Вид = ВидСчета.Активный Тогда					
				ПрефиксПоказателяДляЗаполненияНУ = "";
			ИначеЕсли Выборка.СчетНУ.Вид = ВидСчета.Пассивный Тогда 					
				ПрефиксПоказателяДляЗаполненияНУ = "Кт";
			КонецЕсли;
			
		КонецЕсли;   					
		
		НоваяСтрока = Объект[ТабличнаяЧасть].Добавить();
		Для  Каждого Элемент Из СтруктураПоказателей Цикл
			Если ((Найти(Элемент.Ключ, "НУ") = 0 
				ИЛИ Элемент.Ключ = "КоличествоНУ" ИЛИ Элемент.Ключ = "КоличествоБУ" )
				И Не Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета)
				ИЛИ Элемент.Ключ = "ВалютнаяСумма" Тогда
				
				КлючЗаполнения = Элемент.Ключ;
			Иначе
				Если Найти(Элемент.Ключ,"НУ") = 0 Тогда
					КлючЗаполнения = Элемент.Ключ + ПрефиксПоказателяДляЗаполнения;
				Иначе
					КлючЗаполнения = Элемент.Ключ + ПрефиксПоказателяДляЗаполненияНУ;
				КонецЕсли; 					
			КонецЕсли; 		
			
			КлючЗапроса    = Элемент.Значение + ПрефиксПоказателяДляЗапроса;
			
			Если Найти(Элемент.Ключ,"НУ") <> 0 И ТипЗнч(Выборка[КлючЗапроса]) = Тип("Число") 
				И ПрефиксПоказателяДляЗаполненияНУ  <> ПрефиксПоказателяДляЗаполнения Тогда	
				НоваяСтрока[КлючЗаполнения] = - Выборка[КлючЗапроса];
			Иначе
				НоваяСтрока[КлючЗаполнения] = Выборка[КлючЗапроса];
			КонецЕсли; 		
			
		КонецЦикла;
		
		Если ТабличнаяЧасть = "Запасы"  Тогда
			Если ТипЗнч(Выборка.Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
				НоваяСтрока.Контрагент    = Выборка.Субконто1;
			Иначе //номенклатура
				НоваяСтрока.Номенклатура  = Выборка.Субконто1;					
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрока.Номенклатура = Выборка.Субконто2;
			Иначе //склад
				НоваяСтрока.Склад    = Выборка.Субконто2;						
			КонецЕсли; 	
			НоваяСтрока.Партия       = Выборка.Субконто3;				
		Иначе				
			Для  Каждого Элемент Из СтруктураСубконто Цикл					
				НоваяСтрока[Элемент.Ключ] = Выборка[Элемент.Значение];					
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.СчетУчетаБУ = Выборка.Счет;
		НоваяСтрока.СчетУчетаНУ = Выборка.СчетНУ;
		
		
		Если Объект.УчитыватьКПН Тогда
			
			ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(НоваяСтрока.ВидУчетаНУ);		
			
		КонецЕсли;
		
		Если ТабличнаяЧасть = "РасчетыСКонтрагентами"  Тогда  
			НоваяСтрока.КратностьВзаиморасчетов = "1";
			Если НоваяСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
				НоваяСтрока.КурсВзаиморасчетов = "1";
			Иначе
				НоваяСтрока.КурсВзаиморасчетов = ?(Выборка.Счет.Вид = ВидСчета.Пассивный, НоваяСтрока.СуммаБУ, ?(НоваяСтрока.ВалютнаяСумма = 0, 0, НоваяСтрока.СуммаБУКт/НоваяСтрока.ВалютнаяСумма));			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыСКонтрагентами(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.РасчетыСКонтрагентами.Очистить();
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");
	СтруктураСубконто    = Новый Структура("Контрагент, ДоговорКонтрагента, Документ, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
	
	ЗаполнитьОстаткамиПоБУНаСервере("РасчетыСКонтрагентами", СтруктураПоказателей, СтруктураСубконто, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыПоНалогамИСборам(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.РасчетыПоНалогамИСборам.Очистить();
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстаток");	
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокКт");

	СтруктураСубконто    = Новый Структура("ВидНалога, ВидПлатежаВБюджет", "Субконто1", "Субконто2");
	
	ЗаполнитьОстаткамиПоБУНаСервере("РасчетыПоНалогамИСборам", СтруктураПоказателей, СтруктураСубконто, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиРасчетыСПодотчетнымиЛицами(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.РасчетыСПодотчетнымиЛицами.Очистить();
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстаток");	
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");
	СтруктураПоказателей.Вставить("Валюта", "Валюта");
	
	СтруктураСубконто    = Новый Структура("РаботникОрганизации", "Субконто1");
	
	ЗаполнитьОстаткамиПоБУНаСервере("РасчетыСПодотчетнымиЛицами", СтруктураПоказателей, СтруктураСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиБухСправкаДенежныеСредства(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.БухСправка.Очистить();
	
	СтруктураПоказателей = Новый Структура("СуммаНУ", "СуммаОстатокДт");
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокДт");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстатокДт");		
	СтруктураСубконто    = Новый Структура("Субконто1, Субконто2, Субконто3, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
	
	ЗаполнитьОстаткамиПоБУНаСервере("БухСправка", СтруктураПоказателей, СтруктураСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиБухСправкаПрочиеСчета(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.БухСправка.Очистить();
	
	СтруктураПоказателей = Новый Структура("СуммаНУ, КоличествоНУ", "СуммаОстаток", "КоличествоОстаток");
	
	//для показа данных по БУ
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
	СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");		
	СтруктураПоказателей.Вставить("КоличествоБУ", "КоличествоОстаток");		
	СтруктураСубконто    = Новый Структура("Субконто1, Субконто2, Субконто3, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
	
	ЗаполнитьОстаткамиПоБУНаСервере("БухСправка", СтруктураПоказателей, СтруктураСубконто, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиЗапасы(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	
	СубконтоСклады = ВедетсяУчетПоСкладам();
	
	СтруктураПоказателей = Новый Структура("КоличествоНУ, СуммаНУ", "КоличествоОстатокДт", "СуммаОстатокДт");
	
	//Если ПоказыватьДанныеПоБУ
	СтруктураПоказателей.Вставить("КоличествоБУ", "КоличествоОстатокДт");
	СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстатокДт");
	
	Если Не СубконтоСклады  Тогда
		СтруктураСубконто    = Новый Структура("Номенклатура, Контрагент, Партия", "Субконто1", "Субконто2", "Субконто3");
	Иначе
		СтруктураСубконто    = Новый Структура("Номенклатура, Контрагент, Склад, Партия", "Субконто1", "Субконто1", "Субконто2", "Субконто3");
	КонецЕсли;   
	
	ЗаполнитьОстаткамиПоБУНаСервере("Запасы", СтруктураПоказателей, СтруктураСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиТоварыОрганизаций(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;
	
	Объект.ТоварыОрганизаций.Очистить();
	
	ПоОстаткам = Ложь;
	Если Параметры.Свойство("ПоОстаткам", ПоОстаткам) И ПоОстаткам Тогда
		ЗаполнитьОстаткамиТоварыОрганизацийНаСервере();	
	Иначе                                              		
		Показатели = Новый Структура("Количество, Номенклатура");
		ЗаполнитьРеквизитыНУПоДаннымБУ("Запасы", Показатели, , Истина, "ТоварыОрганизаций");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНУПоДаннымБУ(ТабЧасть, Показатели, ОпределятьТипСчета = Ложь, ЗаполнятьСпецРегистры = Ложь, ТабЧастьСпецРегистра = "")
	
	Если ЗаполнятьСпецРегистры И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ИспользуетсяНесколькоСкладов() Тогда
		СкладПоУмолчанию = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСкладПоУмолчанию();
	Иначе
		СкладПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Для Каждого Строка Из Объект[ТабЧасть] Цикл
		
		Коэффициент = 1;
		
		Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
			ВидСчетаБУ  = Строка.СчетУчетаБУ.Вид;
			ВидСчетаНУ  = Строка.СчетУчетаНУ.Вид;
			// Если один из счетов активно-пассивный, то знак в НУ будем ставить такой же как в БУ
			Если (ВидСчетаБУ <> ВидСчетаНУ)
				И (ВидСчетаБУ <> ВидСчета.АктивноПассивный) И (ВидСчетаНУ = ВидСчета.АктивноПассивный)	Тогда				
				Коэффициент = -1; 
			КонецЕсли;
		КонецЕсли;
		
		ПрефиксПоказателяДляНУ = "";
		ПрефиксПоказателяДляБУ = "";
		Если ОпределятьТипСчета  Тогда
			Если Строка.СчетУчетаБУ = ВидСчета.Активный Тогда
				ПрефиксПоказателяДляБУ   = "";
			ИначеЕсли Строка.СчетУчетаБУ.Вид = ВидСчета.Пассивный Тогда
				ПрефиксПоказателяДляБУ   = "Кт";								
			КонецЕсли;
			
			Если Строка.СчетУчетаНУ.Вид = ВидСчета.Активный Тогда
				ПрефиксПоказателяДляНУ   = "";
			ИначеЕсли Строка.СчетУчетаНУ.Вид = ВидСчета.Пассивный Тогда			
				ПрефиксПоказателяДляНУ   = "Кт";				
			Иначе		
				ПрефиксПоказателяДляНУ   = ПрефиксПоказателяДляБУ;				
			КонецЕсли;    			
		КонецЕсли;   	
		
		Если НЕ ЗаполнятьСпецРегистры Тогда
			
			Для Каждого ЭлементПоказатели Из Показатели Цикл
				Строка[ЭлементПоказатели.Ключ + ПрефиксПоказателяДляНУ] = Коэффициент * Строка[ЭлементПоказатели.Значение + ПрефиксПоказателяДляБУ];
			КонецЦикла;   			
			
			Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаНУ) Тогда
				Строка.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУВСчетНУ(Новый Структура("СчетБУ", Строка.СчетУчетаБУ));	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ВидУчетаНУ) Тогда 		
				
				Если Объект.УчитыватьКПН Тогда
					
					ЗаполнитьВидУчетаВСтрокеТабличнойЧастиНаСервере(Строка.ВидУчетаНУ);		
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НоваяСтрока =  Объект[ТабЧастьСпецРегистра].Добавить();
			Для Каждого ЭлементПоказатели Из Показатели Цикл
				Если  ЭлементПоказатели.Ключ = "Номенклатура" Тогда
					НоваяСтрока[ЭлементПоказатели.Ключ] = Строка[ЭлементПоказатели.Ключ];
				Иначе					
					НоваяСтрока[ЭлементПоказатели.Ключ] = Строка[ЭлементПоказатели.Ключ + "БУ"];
				КонецЕсли;
			КонецЦикла;
			Если СкладПоУмолчанию <> Неопределено Тогда
				НоваяСтрока.Склад = СкладПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Если НЕ ЗаполнятьСпецРегистры Тогда 
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	          	
	Если Объект.БухСправка.Количество() = 0  И Объект.РасчетыСКонтрагентами.Количество() = 0 И Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БухСправка.Количество() > 0 Тогда 
		МассивСчетов    = Объект.БухСправка.Выгрузить(, "СчетУчетаБУ").ВыгрузитьКолонку("СчетУчетаБУ");
		СвойстваСчетов  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "Количественный, Валютный");
		
		Для Каждого Строка Из Объект.БухСправка Цикл
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
				Строка.ПризнакКоличественногоУчетаБУ  = СвойстваСчетов[Строка.СчетУчетаБУ].Количественный;
				Строка.ПризнакВалютногоУчета  = СвойстваСчетов[Строка.СчетУчетаБУ].Валютный;
			Иначе   	
				Строка.ПризнакКоличественногоУчетаБУ  = Ложь;
				Строка.ПризнакВалютногоУчета = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивСчетов    = Объект.БухСправка.Выгрузить(, "СчетУчетаНУ").ВыгрузитьКолонку("СчетУчетаНУ");
		СвойстваСчетов  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "Количественный");
		
		Для Каждого Строка Из Объект.БухСправка Цикл
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаНУ) Тогда
				Строка.ПризнакКоличественногоУчетаНУ  = СвойстваСчетов[Строка.СчетУчетаНУ].Количественный;
			Иначе   	
				Строка.ПризнакКоличественногоУчетаНУ  = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РасчетыСКонтрагентами.Количество() > 0 Тогда 
		
		Для Каждого Строка Из Объект.РасчетыСКонтрагентами Цикл
			
			СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка.СчетУчетаБУ); 			
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
				Строка.ПризнакУчетаПоДокументамРасчетов  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(Строка.СчетУчетаБУ);
				Строка.ПризнакВалютногоУчета = СвойстваСчета.Валютный;
			Иначе   	
				Строка.ПризнакУчетаПоДокументамРасчетов  = Ложь;
			КонецЕсли;                                                			
			
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда 
		
		Для Каждого Строка Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
				Строка.ПризнакУчетаДавальческогоСырья  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Строка.СчетУчетаБУ);
				Строка.ПризнакПартионногоУчета  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Строка.СчетУчетаБУ);
				Строка.ПризнакСкладскогоУчета  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Строка.СчетУчетаБУ);
			Иначе   	
				Строка.ПризнакУчетаДавальческогоСырья  = Ложь;
				Строка.ПризнакПартионногоУчета  = Ложь;
				Строка.ПризнакСкладскогоУчета  = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	
	ТекущаяСтрока  = Форма.Элементы.БухСправка.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Форма.Объект.БухСправка.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "БухСправкаСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", Форма.Объект.СтруктурноеПодразделение);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)
	
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	
	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	
	Возврат Сумма;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Строка, Знач Дата)
	
	Строка.СуммаБУ = ПересчетСуммыПоКурсу(Строка.ВалютнаяСумма, Строка.Валюта, Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыБУ()
	
	ТекущиеДанные     = Элементы.БухСправка.ТекущиеДанные;
	
	СтруктураСтроки = Новый Структура("Валюта,ВалютнаяСумма,СуммаБУ");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураСтроки, Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(Элементы.БухСправка.ТекущиеДанные, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПрочихСчетов(Параметры, ДополнительныеПараметры) Экспорт
	
	Если Параметры <> Неопределено Тогда
		СписокСвойств = "СписокСчетовБУПрочихРазделов";
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	КонецЕсли;
	
	СписокСчетовРазделаБУ.Очистить();
	
	Для Каждого ЭлементСписка Из СписокСчетовБУПрочихРазделов Цикл
		Если  ЭлементСписка.Пометка Тогда
			СписокСчетовРазделаБУ.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.БухСправка.Количество() = 0 Тогда
		//для показа данных по БУ
		СтруктураПоказателей = Новый Структура();
		
		СтруктураПоказателей.Вставить("СуммаБУ", "СуммаОстаток");
		СтруктураПоказателей.Вставить("ВалютнаяСумма", "ВалютнаяСуммаОстаток");		
		СтруктураПоказателей.Вставить("КоличествоБУ", "КоличествоОстаток");		
		СтруктураСубконто    = Новый Структура("Субконто1, Субконто2, Субконто3, Валюта", "Субконто1", "Субконто2", "Субконто3", "Валюта");	
		
		ЗаполнитьОстаткамиПоБУНаСервере("БухСправка", СтруктураПоказателей, СтруктураСубконто, Истина);
		
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
	|Заполнить?'");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчищениеТабличнойЧастиБухСправкаПрочиеСчета", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСчетовНаСервере(СписокСчетов)
	
	Для Каждого ЭлементСписка Из СписокСчетов Цикл
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ЭлементСписка.Значение);
		ЭлементСписка.Представление = Строка(СвойстваСчета.Код) + "   "+ Строка(СвойстваСчета.Наименование);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ВедетсяУчетПоСкладам()
	
	ВедетсяСкладскойУчет 	 = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(ПланыСчетов.Налоговый.Товары);
	
	Возврат ВедетсяСкладскойУчет
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Форма, РазделУчета)
	
	Элементы = Форма.Элементы;
	
	СписокВидовДоговоров =  Новый СписокЗначений;	
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	Если РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	КонецЕсли;
	
	Если РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров.ВыгрузитьЗначения());
		
		НовыеПараметры = Новый Массив;
		НовыеПараметры.Добавить(НовыйПараметр);
		
		Элементы.РасчетыСКонтрагентамиДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетыСКонтрагентамиКонтрагентПриИзмененииНаСервере(ПараметрыСтроки,РазделУчета)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	
	СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ПараметрыСтроки.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, ПараметрыСтроки.Контрагент);
	Иначе
		ПараметрыСтроки.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, ПараметрыСтроки.Контрагент, СтруктураПараметровДляПолученияДоговора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеНаСервере(РазделУчета, СчетаГруппы, СчетаНУ, СчетаИсключения, МассивСчетовБУ, МассивСчетовГруппыНУ, ВстроеннаяСправка)
	
	МассивКодовСчетовГруппы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаГруппы, ",");
	МассивКодовИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаИсключения, ",");
	МассивСчетовГруппы = Новый Массив();
	МассивИсключений = Новый Массив();
	МассивСчетовБУ = Новый Массив;
	МассивКодовСчетовГруппыНУ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаНУ,",");
	МассивСчетовГруппыНУ = Новый Массив();

	ВстроеннаяСправка	= Документы.ВводНачальныхОстатков.ПолучитьТекстВстроеннойСправки(РазделУчета);

	//БУ
	МассивКодовСчетовГруппы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаГруппы, ",");
	
	Для Инд = 0 По МассивКодовСчетовГруппы.Количество()-1  Цикл
		МассивСчетовГруппы.Добавить(ПланыСчетов.Типовой.НайтиПоКоду(МассивКодовСчетовГруппы[Инд]).Ссылка);		
	КонецЦикла; 
	
	МассивИсключений = Новый Массив();
	
	Для Инд = 0 По МассивКодовИсключений.Количество()-1  Цикл
		МассивИсключений.Добавить(ПланыСчетов.Типовой.НайтиПоКоду(МассивКодовИсключений[Инд]).Ссылка);		
	КонецЦикла; 
	
	МассивСчетовБУ = Новый Массив;
	
	МассивСчетовБУ = ПроцедурыБухгалтерскогоУчета.ПолучитьМассивСчетовССубсчетами(МассивСчетовГруппы, Ложь, , , МассивИсключений);
	
	//НУ
	
	Для Инд = 0 По МассивКодовСчетовГруппыНУ.Количество()-1  Цикл
		МассивСчетовГруппыНУ.Добавить(ПланыСчетов.Налоговый.НайтиПоКоду(СокрЛП(МассивКодовСчетовГруппыНУ[Инд])));		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиТоварыОрганизацийНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ТоварыОрганизаций", Объект.ТоварыОрганизаций.Выгрузить());
	ПараметрыЗаполнения.Вставить("МассивСчетов", СписокСчетовРазделаБУ.ВыгрузитьЗначения());
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыЗаполнения.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями",ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	            	
	Документы.ВводНачальныхОстатков.ЗаполнитьОстаткамиТоварыОрганизацийПоБУНаСервере(ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ТоварыОрганизаций.Количество() <> 0 Тогда
		Объект.ТоварыОрганизаций.Загрузить(ПараметрыЗаполнения.ТоварыОрганизаций);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		СтруктураРеквизитов.Вставить("Склад");
		СтруктураРеквизитов.Вставить("Номенклатура");	
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			СтруктураРеквизитов.Вставить("СчетУчетаБУ");
			СтруктураРеквизитов.Вставить("Партия");
			СтруктураРеквизитов.Вставить("КоличествоБУ");
			СтруктураРеквизитов.Вставить("СуммаБУ");
			СтруктураРеквизитов.Вставить("Контрагент");
		КонецЕсли;    	
		Если Объект.УчитыватьКПН Тогда		
			СтруктураРеквизитов.Вставить("СчетУчетаНУ");
			СтруктураРеквизитов.Вставить("ВидУчетаНУ");
			СтруктураРеквизитов.Вставить("КоличествоНУ");
			СтруктураРеквизитов.Вставить("СуммаНУ");		
		КонецЕсли;      		
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПодотчетнымиЛицами" Тогда
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураРеквизитов.Вставить("СчетУчетаБУ");
			СтруктураРеквизитов.Вставить("СуммаБУ");   	
			СтруктураРеквизитов.Вставить("Валюта");
			СтруктураРеквизитов.Вставить("ВалютнаяСумма");
		КонецЕсли;
		Если Объект.УчитыватьКПН Тогда
			СтруктураРеквизитов.Вставить("СчетУчетаНУ");
			СтруктураРеквизитов.Вставить("СуммаНУ");
			СтруктураРеквизитов.Вставить("ВидУчетаНУ");
		КонецЕсли;	
		СтруктураРеквизитов.Вставить("РаботникОрганизации");
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыПоНалогамИСборам" Тогда
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураРеквизитов.Вставить("СчетУчетаБУ");
			СтруктураРеквизитов.Вставить("СуммаБУ");
		КонецЕсли;                                  
		Если Объект.УчитыватьКПН  Тогда
			СтруктураРеквизитов.Вставить("СчетУчетаНУ");
			СтруктураРеквизитов.Вставить("СуммаНУ");		
			СтруктураРеквизитов.Вставить("ВидУчетаНУ");		
		КонецЕсли;
		СтруктураРеквизитов.Вставить("ВидНалога");
		СтруктураРеквизитов.Вставить("ВидПлатежаВБюджет");   	
		СтруктураРеквизитов.Вставить("НалоговыйКомитет");
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСКонтрагентами" Тогда
		СтруктураРеквизитов.Вставить("Контрагент");
		СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
		СтруктураРеквизитов.Вставить("СчетУчетаБУ");
		СтруктураРеквизитов.Вставить("СуммаБУ");
		СтруктураРеквизитов.Вставить("ВалютнаяСумма");
		СтруктураРеквизитов.Вставить("КурсВзаиморасчетов");
		СтруктураРеквизитов.Вставить("КратностьВзаиморасчетов");
	ИначеЕсли ИмяТабличнойЧасти = "ТоварыОрганизаций" Тогда
		СтруктураРеквизитов.Вставить("НомерГТД");
		СтруктураРеквизитов.Вставить("Количество");
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговораВТабличнойЧасти(ТекущийОбъект)
	
	Если ТекущийОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		// Если не ведется учет по договорам и заполнен договор, 
		// то по реквизитам этого договора ищем основной договор
		// Если находим, то устанавливаем основной договор в качестве договора контрагента в документе.
		// В случае если не находим, то устанавливаем договор, который выбрал пользователь, как основной. 
		Для Каждого Строка Из ТекущийОбъект.РасчетыСКонтрагентами Цикл
			Если ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДоговорКонтрагента, "Организация, Владелец, ВидДоговора");
				
				ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				РаботаСДоговорамиКонтрагентов.УстановитьДоговорКонтрагента(
					ОсновнойДоговор, 
					СтруктураРеквизитов.Владелец,
					СтруктураРеквизитов.Организация,
					СтруктураРеквизитов.ВидДоговора);
				
				Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
					Строка.ДоговорКонтрагента = ОсновнойДоговор;
				Иначе
					РаботаСДоговорамиКонтрагентов.УстановитьОсновнойДоговорКонтрагента(Строка.ДоговорКонтрагента);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("Организация", ТекущийОбъект.Организация);
		Если ТекущийОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
			ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		Иначе
			ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущийОбъект.РасчетыСКонтрагентами Цикл
			ПараметрыДоговора.Вставить("Владелец", Строка.Контрагент);
   			ПараметрыДоговора.Вставить("Наименование",НСтр("ru = 'Без договора'"));
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			РаботаСДоговорамиКонтрагентов.УстановитьДоговорКонтрагента(
				ДоговорКонтрагента,
				ПараметрыДоговора.Владелец, 
				ПараметрыДоговора.Организация, 
				ПараметрыДоговора.ВидДоговора);
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
				ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
			КонецЕсли;
			Строка.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
