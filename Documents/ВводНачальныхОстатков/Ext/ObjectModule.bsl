
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ПомощникВводаНачальныхОстатков") Тогда
			ИмяТабличнойЧасти = "";
			ДанныеЗаполнения.Свойство("Дата", Дата);
			ДанныеЗаполнения.Свойство("Организация", Организация);
			ДанныеЗаполнения.Свойство("РазделУчета", РазделУчета);
			ДанныеЗаполнения.Свойство("УчитыватьКПН", УчитыватьКПН);
			ДанныеЗаполнения.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			ДанныеЗаполнения.Свойство("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
			ДанныеЗаполнения.Свойство("ОтражатьПоСпециальнымРегистрам", ОтражатьПоСпециальнымРегистрам);
			
			Если ЗначениеЗаполнено(ИмяТабличнойЧасти) И ИмяТабличнойЧасти <> "ТоварыОрганизаций" Тогда
				НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
				ДанныеЗаполнения.Свойство("СчетУчетаБУ", НоваяСтрока.СчетУчетаБУ);
				ДанныеЗаполнения.Свойство("СчетУчетаНУ", НоваяСтрока.СчетУчетаНУ);
				ДанныеЗаполнения.Свойство("ВидУчетаНУ" , НоваяСтрока.ВидУчетаНУ);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Организация") Тогда
			Если ДанныеЗаполнения.Свойство("Автор") Тогда
				ДанныеЗаполнения.Удалить("Автор");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(ДанныеЗаполнения.Организация);
			
		Иначе
			Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация);
			
		КонецЕсли;
		
	Иначе
		Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка даты ввода начальных остатков и установка при ее отсутствии
	Если  Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация) = Дата(1,1,1) Тогда
		МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Организация = Организация;
		МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = Дата;
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура();
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства 
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка");
		Если ОтражатьПоСпециальнымРегистрам И НЕ (ОтражатьВБухгалтерскомУчете И УчитыватьКПН) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Запасы");
		КонецЕсли;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками   
		ИЛИ  РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Запасы");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка");
	КонецЕсли;		
	
	//// Проверка заполнения табличной части "РасчетыСКонтрагентами"
	
	ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеОтрицательнойСуммы", Истина);

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками   
		ИЛИ  РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами   Тогда
		
		Если  НЕ УчитыватьКПН Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВидУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СчетУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУКт");
			
		КонецЕсли;
		
		Если   УчитыватьКПН    Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СчетУчетаНУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУКт");
			
			Если Не ОтражатьВБухгалтерскомУчете Тогда
				ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыНУ", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.Документ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУКт");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВалютнаяСумма");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУКт");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВалютнаяСумма");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУ", Истина);
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеВалюты", Истина);

		КонецЕсли;
		
		Если  УчитыватьКПН 	И ОтражатьВБухгалтерскомУчете Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУКт");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВалютнаяСумма");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУНУ", Истина);

		КонецЕсли;
        
        Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
            МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ДоговорКонтрагента");
        КонецЕсли;
        
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.Документ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВалютнаяСумма");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.СуммаНУКт");
		
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		
		Если  НЕ УчитыватьКПН Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаНУ");
			
		КонецЕсли;
		
		Если   УчитыватьКПН  Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаНУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаНУ");
			
			Если Не ОтражатьВБухгалтерскомУчете Тогда
				ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыНУ", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаБУ");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаБУ");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУ", Истина);
		КонецЕсли;
		
		Если  УчитыватьКПН 	И ОтражатьВБухгалтерскомУчете Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаБУ");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУНУ", Истина);
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидНалога");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидПлатежаВБюджет");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СуммаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СчетУчетаНУ");
		
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета ИЛИ
		РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		Если  НЕ УчитыватьКПН Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.ВидУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУКт");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СчетУчетаНУ");
			
		КонецЕсли;
		
		Если   УчитыватьКПН  Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СчетУчетаНУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);
			
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУКт");
			
			Если Не ОтражатьВБухгалтерскомУчете Тогда
				ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыНУ", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУКт");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУКт");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУ", Истина);
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеВалюты", Истина);
		КонецЕсли;
		
		Если  УчитыватьКПН 	И ОтражатьВБухгалтерскомУчете Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУКт");
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУКт");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУНУ", Истина);
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаБУКт");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка.СуммаНУКт");
		
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		Если  НЕ УчитыватьКПН Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.ВидУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СчетУчетаНУ");
			
		КонецЕсли;
		
		Если   УчитыватьКПН  Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СчетУчетаНУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаНУ");
			
			Если Не ОтражатьВБухгалтерскомУчете Тогда
				ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыНУ", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаБУ");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаБУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУ", Истина);
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеВалюты", Истина);

		КонецЕсли;
		
		Если  УчитыватьКПН 	И ОтражатьВБухгалтерскомУчете Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаБУ");
			
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСуммыБУНУ", Истина);
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.РаботникОрганизации");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СуммаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.СчетУчетаНУ");
		
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
		
		Если  НЕ УчитыватьКПН Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.ВидУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоНУ");
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.СчетУчетаНУ");
			
		КонецЕсли;
		
		Если   УчитыватьКПН  Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.СчетУчетаБУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);
			
		КонецЕсли;
		
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоБУ");
		КонецЕсли;
		
		Если  УчитыватьКПН 	И ОтражатьВБухгалтерскомУчете Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоНУ");
			МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоБУ");
			ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеКоличестваБУНУ", Истина);
			
		КонецЕсли;
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеКонтрагента", Истина);
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеПартии", Истина);
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСклада", Истина);
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.КоличествоНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Запасы.СчетУчетаНУ");
		
	КонецЕсли;
	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	НеобходимаПострочнаяПроверка = Ложь;
	Для Каждого КлючЗначение Из ПараметрыПострочнойПроверки Цикл
		Если КлючЗначение.Значение Тогда 
			НеобходимаПострочнаяПроверка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//
	Если НеобходимаПострочнаяПроверка Тогда 
		
		Если РасчетыСКонтрагентами.Количество() > 0  И 
			(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками   
			ИЛИ  РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами)  Тогда
			
			ПроверитьЗаполнениеТабличнойЧастиПострочно(РасчетыСКонтрагентами, "РасчетыСКонтрагентами", РазделУчета, Отказ, ПараметрыПострочнойПроверки);
			
		КонецЕсли;
		
		
		Если РасчетыПоНалогамИСборам.Количество() > 0  И 
			РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
			
			ПроверитьЗаполнениеТабличнойЧастиПострочно(РасчетыПоНалогамИСборам, "РасчетыПоНалогамИСборам", РазделУчета,Отказ, ПараметрыПострочнойПроверки);
			
		КонецЕсли;
		
		Если БухСправка.Количество() > 0  И 
			(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства) Тогда
			
			ПроверитьЗаполнениеТабличнойЧастиПострочно(БухСправка, "БухСправка", РазделУчета, Отказ, ПараметрыПострочнойПроверки);
			
		КонецЕсли;
		
		Если РасчетыСПодотчетнымиЛицами.Количество() > 0  И 
			РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
			
			ПроверитьЗаполнениеТабличнойЧастиПострочно(РасчетыСПодотчетнымиЛицами, "РасчетыСПодотчетнымиЛицами", РазделУчета, Отказ, ПараметрыПострочнойПроверки);
			
		КонецЕсли;
		
		Если Запасы.Количество() > 0  И 
			РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
			
			ПроверитьЗаполнениеТабличнойЧастиПострочно(Запасы, "Запасы", РазделУчета, Отказ, ПараметрыПострочнойПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВводНачальныхОстатков.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыСКонтрагентами(
			ПараметрыПроведения.ТаблицаРасчетыСКонтрагентами,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыПоНалогамИСборам(
			ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_БухСправка(
			ПараметрыПроведения.ТаблицаБухСправка,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_Запасы(
			ПараметрыПроведения.ТаблицаЗапасы,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыСПодотчетнымиЛицами(
			ПараметрыПроведения.ТаблицаРасчетыСПодотчетнымиЛицами,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);    	
		
	Документы.ВводНачальныхОстатков.СформироватьДвиженияТоварыОрганизаций(
			ПараметрыПроведения.ТаблицаТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, 
			Движения, 
			Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	


Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, РазделУчета, Отказ, ПараметрыПроверки = Неопределено)
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Если ПараметрыПроверки <> Неопределено Тогда
			 // контроль проводки
			Если  ПараметрыПроверки.Свойство("ПроверятьЗаполнениеОтрицательнойСуммы") И ПараметрыПроверки.ПроверятьЗаполнениеОтрицательнойСуммы 
				И  СтрокаТабличнойЧасти.СуммаБУ < 0 Тогда
				
				Шаблон = НСтр("ru = 'В строке ""%1"" списка ""%2"" отрицательная сумма проводки!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТабличнойЧасти.НомерСтроки, Документы.ВводНачальныхОстатков.ИмяТабличнойЧастиДляСообщения(РазделУчета));
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
			КонецЕсли;
			  // валютная сумма
			Если  ПараметрыПроверки.Свойство("ПроверятьЗаполнениеВалюты") И ПараметрыПроверки.ПроверятьЗаполнениеВалюты 
				И  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Валютный И  НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
						
				Шаблон = НСтр("ru = 'В строке ""%1"" списка ""%2"" не заполнена валюта!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТабличнойЧасти.НомерСтроки, Документы.ВводНачальныхОстатков.ИмяТабличнойЧастиДляСообщения(РазделУчета));
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Валюта";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
			КонецЕсли;

			  //ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеВалюты", Истина);

			Если ИмяТабличнойЧасти = "РасчетыСКонтрагентами" Тогда
				ИмяТабличнойЧастиДляСообщения = НСтр("ru = 'Расчеты с контрагентами'");
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
					И  (ОтражатьВБухгалтерскомУчете И  НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый ИЛИ Не ОтражатьВБухгалтерскомУчете )  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУКт) И НЕ ОтражатьВБухгалтерскомУчете Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма Дт(НУ)"" или ""Сумма Кт(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ) И НЕ  ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма) И НЕ УчитыватьКПН Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма(БУ)"" или ""Валютная сумма""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ) И НЕ  ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма) 
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУКт) Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма(БУ)"" или ""Валютная сумма"" или ""Сумма Дт(НУ)"" или ""Сумма Кт(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "РасчетыПоНалогамИСборам"  ИЛИ ИмяТабличнойЧасти = "РасчетыСПодотчетнымиЛицами" Тогда
				ИмяТабличнойЧастиДляСообщения = ?(ИмяТабличнойЧасти = "РасчетыПоНалогамИСборам", НСтр("ru = 'Расчеты по налогам'"), НСтр("ru = 'Расчеты с подотчетными лицами'"));
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
					И  (ОтражатьВБухгалтерскомУчете И  НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый ИЛИ Не ОтражатьВБухгалтерскомУчете )  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ) И НЕ ОтражатьВБухгалтерскомУчете Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Сумма(НУ)'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ)  И НЕ УчитыватьКПН Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Сумма(БУ) '"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ)  
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ)  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма(БУ)"" или ""Сумма(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "РасчетыСКонтрагентами" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
					НеобходимоПроверитьДокументРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(СтрокаТабличнойЧасти.СчетУчетаБУ);
					Если НеобходимоПроверитьДокументРасчетов Тогда 
						
						ДокументРасчетовЗаполнен = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ); 
						
						Если НЕ ДокументРасчетовЗаполнен Тогда 
							
							ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Документ '"),
							СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
							Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Документ";
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;                                                			
				
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "БухСправка" Тогда
				
				Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
					ИмяТабличнойЧастиДляСообщения = НСтр("ru = 'Денежные средства'");
				Иначе
					ИмяТабличнойЧастиДляСообщения = НСтр("ru = 'Прочие счета бухгалтерского учета'");
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
					И  (ОтражатьВБухгалтерскомУчете И  НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый ИЛИ Не ОтражатьВБухгалтерскомУчете )  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ)  
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУКт)  
					И НЕ ОтражатьВБухгалтерскомУчете Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма Дт(НУ)"" или ""Сумма Кт(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ)
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУКт) 
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма)  
					И НЕ УчитыватьКПН Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма Дт(БУ)"" или ""Сумма Кт(БУ)"" или ""Валютная сумма""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыБУНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУ)  
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНУКт)
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУ)
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаБУКт) 
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСумма)  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Сумма Дт(БУ)"" или ""Сумма Кт(БУ)"" или ""Валютная сумма"" или Сумма Дт(НУ)"" или ""Сумма Кт(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Запасы"  Тогда
				ИмяТабличнойЧастиДляСообщения = НСтр("ru = 'Запасы'");
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
					И  (ОтражатьВБухгалтерскомУчете И  НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый ИЛИ Не ОтражатьВБухгалтерскомУчете )  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеКоличестваБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеКоличестваБУНУ
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоБУ)  
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоНУ)  Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = '""Количество(БУ)"" или ""Количество(НУ)""'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КоличествоБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеКоличестваБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеКоличестваБУНУ
					И  ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоБУ) И СтрокаТабличнойЧасти.КоличествоБУ < 0 Тогда 
					Шаблон = НСтр("ru = 'В строке ""%1"" списка ""%2"" отрицательное количество проводки!'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТабличнойЧасти.НомерСтроки, Документы.ВводНачальныхОстатков.ИмяТабличнойЧастиДляСообщения(РазделУчета));
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КоличествоБУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеКоличестваБУНУ") И ПараметрыПроверки.ПроверятьЗаполнениеКоличестваБУНУ
					И  ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоНУ) И СтрокаТабличнойЧасти.КоличествоНУ < 0 Тогда 
					Шаблон = НСтр("ru = 'В строке ""%1"" списка ""%2"" отрицательное количество проводки!'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТабличнойЧасти.НомерСтроки, Документы.ВводНачальныхОстатков.ИмяТабличнойЧастиДляСообщения(РазделУчета));
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КоличествоНУ";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;

				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеКонтрагента") И ПараметрыПроверки.ПроверятьЗаполнениеКонтрагента
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент)  
					И  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СтрокаТабличнойЧасти.СчетУчетаБУ)   Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Контрагент'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Контрагент";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеПартии") И ПараметрыПроверки.ПроверятьЗаполнениеПартии
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партия)  
					И  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаТабличнойЧасти.СчетУчетаБУ)   Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Партия'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Партия";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСклада") И ПараметрыПроверки.ПроверятьЗаполнениеСклада
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад)  
					И  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СтрокаТабличнойЧасти.СчетУчетаБУ)   Тогда 
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Склад'"),
					СтрокаТабличнойЧасти.НомерСтроки,  ИмяТабличнойЧастиДляСообщения);
					Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Склад";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
