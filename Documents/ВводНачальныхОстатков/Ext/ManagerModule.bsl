#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.

Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("РазделУчета");
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ОтражатьВБухгалтерскомУчете");
		БлокируемыеРеквизиты.Добавить("УчитыватьКПН");
		БлокируемыеРеквизиты.Добавить("СписокСчетовБУПрочихРазделов");
		БлокируемыеРеквизиты.Добавить("ОтражатьПоСпециальнымРегистрам");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация,ВстроеннаяСправка,ПереключениеСправкиФормы");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть РасчетыСКонтрагентами
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами; РасчетыСКонтрагентамиГруппаЗаполнить,РасчетыСКонтрагентамиИзменитьРасчетыСКонтрагентами");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.Валюта; РасчетыСКонтрагентамиВалюта");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.ДоговорКонтрагента; РасчетыСКонтрагентамиДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.Документ; РасчетыСКонтрагентамиДокумент");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.Контрагент; РасчетыСКонтрагентамиКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.КратностьВзаиморасчетов; РасчетыСКонтрагентамиКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.КурсВзаиморасчетов; РасчетыСКонтрагентамиКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.ВалютнаяСумма; РасчетыСКонтрагентамиВалютнаяСумма");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.СуммаБУ; РасчетыСКонтрагентамиСуммаБУ");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.Аванс; РасчетыСКонтрагентамиАванс");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.СуммаБУКт; РасчетыСКонтрагентамиСуммаБУКт");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.СуммаНУКт; РасчетыСКонтрагентамиСуммаНУКт");
		БлокируемыеРеквизиты.Добавить("РасчетыСКонтрагентами.СуммаНУ; РасчетыСКонтрагентамиСуммаНУ");


		// таб. часть РасчетыПоНалогамИСборам
		БлокируемыеРеквизиты.Добавить("РасчетыПоНалогамИСборам; РасчетыПоНалогамИСборамГруппаЗаполнить, РасчетыПоНалогамИСборамИзменитьРасчетПоналогамИСборам");
		БлокируемыеРеквизиты.Добавить("РасчетыПоНалогамИСборам.ВидНалога; РасчетыПоНалогамИСборамВидНалога");
		БлокируемыеРеквизиты.Добавить("РасчетыПоНалогамИСборам.СуммаБУ; РасчетыПоНалогамИСборамСуммаБУ");
		БлокируемыеРеквизиты.Добавить("РасчетыПоНалогамИСборам.СуммаНУ; РасчетыПоНалогамИСборамСуммаНУ");
		        		
		 // таб. часть БухСправка
		БлокируемыеРеквизиты.Добавить("БухСправка; БухСправкаГруппаЗаполнить");
	 	БлокируемыеРеквизиты.Добавить("БухСправка.КоличествоБУ; БухСправкаКоличествоБУ");
		БлокируемыеРеквизиты.Добавить("БухСправка.СуммаБУ; БухСправкаСуммаБУ");
		БлокируемыеРеквизиты.Добавить("БухСправка.СуммаБУКт; БухСправкаСуммаБУКт");
		БлокируемыеРеквизиты.Добавить("БухСправка.Валюта; БухСправкаВалюта");
		БлокируемыеРеквизиты.Добавить("БухСправка.ВалютнаяСумма; БухСправкаВалютнаяСумма");
		БлокируемыеРеквизиты.Добавить("БухСправка.КоличествоНУ; БухСправкаКоличествоНУ"); 
		БлокируемыеРеквизиты.Добавить("БухСправка.СуммаНУ; БухСправкаСуммаНУ");
		БлокируемыеРеквизиты.Добавить("БухСправка.СуммаНУКт; БухСправкаСуммаНУКт");
		БлокируемыеРеквизиты.Добавить("БухСправка.КоличествоБУКт; БухСправкаКоличествоБУКт");
		БлокируемыеРеквизиты.Добавить("БухСправка.КоличествоНУКт; БухСправкаКоличествоНУКт");
		
		// таб. часть РасчетыСПодотчетнымиЛицами
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами; РасчетыСПодотчетнымиЛицамиГруппаЗаполнить, РасчетыСПодотчетнымиЛицамиИзменитьРасчетыСПодотчетнымиЛицами");
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами.РаботникОрганизации; РасчетыСПодотчетнымиЛицамиРаботникОрганизации");
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами.СуммаБУ; РасчетыСПодотчетнымиЛицамиСуммаБУ");
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами.Валюта; РасчетыСПодотчетнымиЛицамиВалюта");
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами.ВалютнаяСумма; РасчетыСПодотчетнымиЛицамиВалютнаяСумма");
		БлокируемыеРеквизиты.Добавить("РасчетыСПодотчетнымиЛицами.СуммаНУ; РасчетыСПодотчетнымиЛицамиСуммаНУ");
		
		// таб. часть Запасы
		БлокируемыеРеквизиты.Добавить("Запасы; ЗапасыГруппаЗаполнить, ЗапасыИзменитьЗапасы");
		БлокируемыеРеквизиты.Добавить("Запасы.Номенклатура; ЗапасыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Запасы.КоличествоБУ; ЗапасыКоличествоБУ");
		БлокируемыеРеквизиты.Добавить("Запасы.СуммаБУ; ЗапасыСуммаБУ");
		БлокируемыеРеквизиты.Добавить("Запасы.КоличествоНУ; ЗапасыКоличествоНУ");
		БлокируемыеРеквизиты.Добавить("Запасы.СуммаНУ; ЗапасыСуммаНУ");
		
		// таб. часть ТоварыОрганизаций
		БлокируемыеРеквизиты.Добавить("ТоварыОрганизаций; ТоварыОрганизацийГруппаЗаполнить, ТоварыОрганизацийИзменитьТоварыОрганизаций");
		БлокируемыеРеквизиты.Добавить("ТоварыОрганизаций.Номенклатура; Номенклатура");
		БлокируемыеРеквизиты.Добавить("ТоварыОрганизаций.Количество; Количество");
		БлокируемыеРеквизиты.Добавить("ТоварыОрганизаций.НомерГТД; НомерГТД");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТекстВстроеннойСправкиНастройкаРежима() Экспорт
	
	МакетПомощника = ПолучитьМакет("СправкаНастройки");
	
	ОбластьТекстЗаголовок			= "Заголовок|Текст";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий			= "Строка|Текст";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|	</HEAD>
	|	<BODY  scroll=auto 
	|		style=""font-size: 8pt; font-family: MS Sans Serif"">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
	
	Возврат ТекстВстроеннойСправки;
	
КонецФункции

Функция ПолучитьТекстВстроеннойСправки(РазделУчета) Экспорт
	
	Макет = ПолучитьМакет("Справка");
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ИмяОбласти = "ПрочиеСчетаБухгалтерскогоУчета"
	Иначе            
		ИмяОбласти = РазделУчета.Метаданные().ЗначенияПеречисления.Получить(Перечисления.РазделыУчетаДляВводаОстатков.Индекс(РазделУчета)).Имя;
	КонецЕсли;
	
	ОбластьТекстЗаголовок = ИмяОбласти + "|Заголовок";
	ОбластьТекстаСправки = Макет.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий			= ИмяОбласти + "|Общий";
	ОбластьТекстаСправки = Макет.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	ОбластьТекстОсновной = ИмяОбласти + "|ОСН";
	
	ОбластьТекстаСправки = Макет.ПолучитьОбласть(ОбластьТекстОсновной);
	ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|	</HEAD>
	|	<BODY  scroll=auto 
	|		style=""font-size: 8pt; font-family: MS Sans Serif"">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
	
	Возврат ТекстВстроеннойСправки;
	
КонецФункции

Функция ПолучитьТаблицуСчетов() Экспорт
	
	ТаблицаСчетовРазделовУчета = Новый ТаблицаЗначений;
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаГруппы");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("Счета");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаИсключения");	
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаНУ");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("РазделУчета");
	
	СписокСчетовРазделовУчета = ПолучитьМакет("СписокСчетовРазделовУчета");
	ТаблицаСоответствий = СписокСчетовРазделовУчета.ПолучитьОбласть("Строки|Колонки");
	Для Строка = 1 По ТаблицаСоответствий.ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаСчетовРазделовУчета.Добавить();
		НоваяСтрока.СчетаГруппы		= ТаблицаСоответствий.Область("R" + Строка + "C1").Текст;
		НоваяСтрока.Счета			= ТаблицаСоответствий.Область("R" + Строка + "C2").Текст;
		НоваяСтрока.СчетаИсключения	= ТаблицаСоответствий.Область("R" + Строка + "C3").Текст;		
		НоваяСтрока.СчетаНУ			= ТаблицаСоответствий.Область("R" + Строка + "C4").Текст;
		ИмяРазделаУчета				= ТаблицаСоответствий.Область("R" + Строка + "C5").Текст;
		НоваяСтрока.РазделУчета		= Перечисления.РазделыУчетаДляВводаОстатков[ИмяРазделаУчета];
	КонецЦикла;
	
	
	Возврат ТаблицаСчетовРазделовУчета;
	
КонецФункции

Функция ПолучитьДатуВводаОстатков(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1,1,1);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаВводаНачальныхОстатков;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьОстаткамиТоварыОрганизацийПоБУНаСервере(ПараметрыЗаполнения) Экспорт

	Запрос = Новый Запрос;
	Если ПараметрыЗаполнения.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыЗаполнения.СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	СубконтоСклады  = ?(Планысчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
				   |	&Склад КАК  Склад,
	               |	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетов), &ВидыСубконто, Организация = &Организация " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
				   |ГДЕ
				   |	 (ТиповойОстатки.КоличествоОстаток <> 0)
	               |         ";
				   
				   
   Если СубконтоСклады Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ВЫРАЗИТЬ(ТиповойОстатки.Субконто2 КАК Справочник.Склады)");
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	ТиповойОстатки.Субконто1 КАК Номенклатура,
			|	&ПустойСклад КАК Склад,
			|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК Количество				   
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетовПрочие), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура), Организация = &Организация" + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
			|ГДЕ
			|	 (ТиповойОстатки.КоличествоОстаток <> 0)";
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "&ПустойСклад");
	КонецЕсли;
	
	Запрос.Текст =  Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	 		
	Запрос.УстановитьПараметр("СписокСчетов",ПараметрыЗаполнения.МассивСчетов);		   
	
	ГраницаКон = Новый Граница (КонецДня(ПараметрыЗаполнения.Дата),ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("ДатаОстатков", ГраницаКон);				                	
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);	
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если СубконтоСклады Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);	
		
		// Счета 1350 не попадут в результат запроса, т.к. у них нет субконто Склад.
		// В таком случае используется ОБЪЕДИНЕНИЕ 
		МассивСчетовПрочие = Новый Массив;
		МассивСчетовПрочие.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку); // 1351
		Запрос.УстановитьПараметр("СписокСчетовПрочие", МассивСчетовПрочие);
	КонецЕсли;

	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяСтрока = ПараметрыЗаполнения.ТоварыОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
				
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение.

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период + 24*60*60, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период + 24*60*60, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН ;
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ПлательщикНалогаНаПрибыль", 			         ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОрганизацияПлательщикНалогаНаПрибыль,  		 "ПлательщикНалогаНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом, "ВедениеУчетаВременныхРазницБалансовымМетодом");
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРасчетыСКонтрагентами(НомераТаблиц,Реквизиты, ПараметрыПроведения)
				 + ТекстЗапросаРасчетыПоНалогамИСборам(НомераТаблиц, Реквизиты, ПараметрыПроведения)
				 + ТекстЗапросаБухСправка(НомераТаблиц, Реквизиты, ПараметрыПроведения)
				 + ТекстЗапросаРасчетыСПодотчетнымиЛицами(НомераТаблиц, Реквизиты, ПараметрыПроведения)
				 + ТекстЗапросаЗапасы(НомераТаблиц, Реквизиты, ПараметрыПроведения)
				 + ТекстЗапросаТоварыОрганизаций(НомераТаблиц, Реквизиты, ПараметрыПроведения);
				 
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;

	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.РазделУчета КАК РазделУчета,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	ЛОЖЬ КАК ПлательщикНалогаНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	&ВалютаРегламентированногоУчета,
	|	Реквизиты.ОтражатьПоСпециальнымРегистрам
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.РазделУчета,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ПлательщикНалогаНаПрибыль,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.ОтражатьПоСпециальнымРегистрам
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасчетыСКонтрагентами(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ПараметрыПроведения.Вставить("ТаблицаРасчетыСКонтрагентами", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРасчетыСКонтрагентами", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыСКонтрагентами"" КАК ИмяСписка,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Док.СчетУчетаБУ.Валютный КАК СчетУчетаБУВалютный,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Док.Документ КАК Документ,
	|	Док.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Док.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Док.СуммаБУ КАК СуммаБУ,
	|	Док.Валюта КАК Валюта,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.СуммаБУКт КАК СуммаБУКт,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаНУКт КАК СуммаНУКт,
	|	Док.СчетУчетаНУ,
	|	Док.ВидУчетаНУ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК Док    
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.Регистратор = Док.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасчетыПоНалогамИСборам(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		ПараметрыПроведения.Вставить("ТаблицаРасчетыПоНалогамИСборам", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРасчетыПоНалогамИСборам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыПоНалогамИСборам"" КАК ИмяСписка,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Док.ВидПлатежаВБюджет КАК ВидПлатежаВБюджет,
	|	Док.СуммаБУ КАК СуммаБУ,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.ВидНалога,
	|	Док.НалоговыйКомитет,
	|	Док.ВидУчетаНУ,
	|	Док.СчетУчетаНУ,
	|	Док.НалоговыйКомитет КАК НалоговыйКомитет1
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.Регистратор = Док.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаБухСправка(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		ПараметрыПроведения.Вставить("ТаблицаБухСправка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаБухСправка", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""БухСправка"" КАК ИмяСписка,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Док.Субконто1 КАК Субконто1,
	|	Док.Субконто2 КАК Субконто2,
	|	Док.Субконто3 КАК Субконто3,
	|	Док.КоличествоБУ КАК КоличествоБУ,
	|	Док.СуммаБУ КАК СуммаБУ,
	|	Док.Валюта КАК Валюта,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаНУКт,
	|	Док.СуммаБУКт,
	|	Док.КоличествоНУ,
	|	Док.КоличествоБУКт,
	|	Док.КоличествоНУКт,
	|	Док.ВидУчетаНУ,
	|	Док.СчетУчетаНУ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.БухСправка КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Регистратор = Док.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗапасы(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	ПараметрыПроведения.Вставить("ТаблицаЗапасы", Неопределено);
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Запасы  Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаЗапасы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""НоменклатураНаСкладе"" КАК ИмяСписка,
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия,
	|	Док.КоличествоБУ КАК КоличествоБУ,
	|	Док.СчетУчетаНУ КАК СчетУчетаНУ,
	|	Док.КоличествоНУ КАК КоличествоНУ,
	|	Док.СуммаБУ КАК СуммаБУ,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.Регистратор = Док.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасчетыСПодотчетнымиЛицами(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	ПараметрыПроведения.Вставить("ТаблицаРасчетыСПодотчетнымиЛицами", Неопределено);
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРасчетыСПодотчетнымиЛицами", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыСПодотчетнымиЛицами"" КАК ИмяСписка,
	|	Реквизиты.Регистратор          КАК Регистратор,
	|	Реквизиты.Период               КАК Период,
	|	Док.НомерСтроки                КАК НомерСтроки,
	|	Док.СчетУчетаБУ                КАК СчетУчетаБУ,
	|	Док.РаботникОрганизации        КАК РаботникОрганизации,
	|	Док.СуммаБУ                    КАК СуммаБУ,
	|	Док.Валюта                     КАК Валюта,
	|	Док.ВалютнаяСумма              КАК ВалютнаяСумма,
	|	Док.СуммаНУ                    КАК СуммаНУ,
	|	Док.СчетУчетаНУ                КАК СчетУчетаНУ,
	|	Док.ВидУчетаНУ                 КАК ВидУчетаНУ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетнымиЛицами КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.Регистратор = Док.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций", Неопределено);
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Запасы ИЛИ 
		(Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы И НЕ Реквизиты.ОтражатьПоСпециальнымРегистрам)  Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТоварыОрганизаций"" КАК ИмяСписка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Товар,
	|	Док.Количество КАК Количество,
	|	Док.НомерГТД КАК НомерГТД,
	|	Док.Склад КАК Склад
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ТоварыОрганизаций КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Регистратор = Док.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование движений.

Функция ПодготовитьПараметрыПроведенияРасчетыСКонтрагентами(ТаблицаРасчетыСКонтрагентами, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетыСКонтрагентами
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"               // <Строка,0> - имя списка в документе
	+ "Регистратор,"             // <ДокументСсылка>
	+ "Период,"                  // <Дата>
	+ "НомерСтроки,"             // <Число>
	+ "СчетУчетаБУ,"             // <План счетов бухгалтерского учета>
	+ "СчетУчетаНУ,"             // <План счетов налогового учета>
	+ "ВидУчетаНУ,"             // <План счетов бухгалтерского учета>
	+ "СчетУчетаБУВалютный,"       // <Булево>
	+ "Контрагент,"              // <СправочникСсылка.Контрагент>
	+ "ДоговорКонтрагента,"      // <СправочникСсылка.Договор контрагента>
	+ "Документ,"                // <ДокументСсылка>
	+ "КратностьВзаиморасчетов," // <Число (10,0)>
	+ "КурсВзаиморасчетов,"      // <Число (10,4)>
	+ "СуммаБУ,"                   // <Число (15,2)>
	+ "Валюта,"                  // <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"           // <Число (15,2)>
	+ "СуммаБУКт,"               // <Число (15,2)>
	+ "СуммаНУ,"                 // <Число (15,2)>
	+ "СуммаНУКт";               // <Число (15,2)>
	
	Параметры.Вставить("ТаблицаРасчетыСКонтрагентами",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыСКонтрагентами, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "УчитыватьКПН,"        			// <Булево>
	+ "ВалютаРегламентированногоУчета,"	// <СправочникСсылка.Валюты>
	+ "ПлательщикНалогаНаПрибыль";      // <Булево>
	
	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборам(ТаблицаРасчетыПоНалогамИСборам, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетыПоНалогамИСборам
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка,0> - имя списка в документе
	+ "Регистратор,"          // <ДокументСсылка>
	+ "Период,"               // <Дата>
	+ "НомерСтроки,"          // <Число>
	+ "ВидНалога,"           // <СправочникСсылка.ВидНалога>
	+ "СчетУчетаБУ,"            // <План счетов бухгалтерского учета>
	+ "СчетУчетаНУ,"            // <План счетов налогового учета>
	+ "ВидУчетаНУ,"            // <СправочникСсылка.ВидУчетаНУ>
	+ "ВидПлатежаВБюджет,"    // <ПеречислениеСсылка.Виды платежей в бюджет (фонды)>
	+ "НалоговыйКомитет,"    // <СправочникСсылка.Контрагенты>
	+ "СуммаБУ,"                // <Число (15,2)>
	+ "СуммаНУ" ;             // <Число (15,2)>
	
	Параметры.Вставить("ТаблицаРасчетыПоНалогамИСборам",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоНалогамИСборам, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "УчитыватьКПН,"    				// <Булево>
	+ "ПлательщикНалогаНаПрибыль";      // <Булево>
	
	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПроведенияБухСправка(ТаблицаБухСправка, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаБухСправка
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"     // <Строка,0> - имя списка в документе
	+ "Регистратор,"   // <ДокументСсылка>
	+ "НомерСтроки,"    // <Число ()>
	+ "СчетУчетаБУ,"     // <ПланСчетовСсылка.Типовой>
	+ "СчетУчетаНУ,"     // <ПланСчетовСсылка.Налоговый>
	+ "ВидУчетаНУ,"     // <СправочникСсылка.ВидыУчетаНУ>
	+ "Субконто1,"     // <Произвольный>
	+ "Субконто2,"     // <Произвольный>
	+ "Субконто3,"     // <Произвольный>
	+ "КоличествоБУ,"    // <Число (15, 3)>
	+ "СуммаБУ,"         // <Число (15, 2)>
	+ "КоличествоБУКт,"  // <Число (15, 3)>
	+ "СуммаБУКт,"       // <Число (15, 2)>
	+ "Валюта,"        // <СправочникСсылка.Валюты>
	+ "ВалютнаяСумма," // <Число (15, 2)>
	+ "СуммаНУ,"       // <Число (15, 2)>
	+ "СуммаНУКт,"      // <Число (15, 2)>
	+ "КоличествоНУ,"  // <Число (15, 3)>
	+ "КоличествоНУКт";  // <Число (15, 3)>
	
	Параметры.Вставить("ТаблицаБухСправка",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаБухСправка, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"      			 // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "УчитыватьКПН";        // <Булево>
	
	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПроведенияЗапасы( ТаблицаЗапасы,ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчетаБУ,"               // <План счетов бухгалтерского учета>
	+ "СчетУчетаНУ,"               // <План счетов налогового учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Контрагент,"               // <СправочникСсылка.Контрагенты>
	+ "КоличествоБУ,"             // <Число (15,3)>
	+ "СуммаБУ,"                  // <Число (15,2)>
	+ "КоличествоНУ,"             // <Число (15,3)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "ВидУчетаНУ";             // <СправочникСсылка.ВидыУчетаНУ>
	
	Параметры.Вставить("ТаблицаЗапасы",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗапасы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "УчитыватьКПН";        			// <Булево>
	
	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПроведенияРасчетыСПодотчетнымиЛицами(ТаблицаРасчетыСПодотчетнымиЛицами,	ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетыСПодотчетнымиЛицами
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           	// <Строка,0> - имя списка в документе
	+ "Регистратор,"         	// <ДокументСсылка>
	+ "Период,"              	// <Дата>
	+ "НомерСтроки,"         	// <Число>
	+ "СчетУчетаБУ,"           	// <План счетов бухгалтерского учета>
	+ "РаботникОрганизации," 	// <СправочникСсылка.Физическое лицо>
	+ "СуммаБУ,"               	// <Число (15,2)>
	+ "Валюта,"              	// <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"       	// <Число (15,2)>
	+ "СчетУчетаНУ,"   			//  <План счетов налогового учета>
	+ "СуммаНУ,"               	// <Число (15,2)>
	+ "ВидУчетаНУ";             // <СправочникСсылка.ВидУчетаНУ>
	
	Параметры.Вставить("ТаблицаРасчетыСПодотчетнымиЛицами",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыСПодотчетнымиЛицами, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "УчитыватьКПН";        			// <Булево>
	
	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьСодержаниеПроводки(РазделУчета)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Остатки по разделу: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), РазделУчета);
	
КонецФункции

Функция ТипСчетаСубконто(Значение, СтрокаДанных, ПризнакБухгалтерскогоУчета = Истина)
	
	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	ИначеЕсли Значение = 2 Тогда//Тип субконто
		Строка = "Субконто";
	Иначе //Вид учета НУ
		Строка = "ВидУчета";		
	КонецЕсли;
	
	Если ПризнакБухгалтерскогоУчета Тогда
		СчетУчета = СтрокаДанных.СчетУчетаБУ;
		СуммаУчета = СтрокаДанных.СуммаБУ;
	Иначе
		СчетУчета = СтрокаДанных.СчетУчетаНУ;
		СуммаУчета = СтрокаДанных.СуммаНУ;
	КонецЕсли;
	
	ВидСчетаУчета = СчетУчета.Вид;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СуммаУчета > 0 Тогда
			Строка = Строка + "Дт";
		Иначе
			Строка = Строка + "Кт";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
	
КонецФункции

Функция СформироватьПроводкуБух(Реквизиты,Операция, СтрокаОстатков)
	
	СчетУчета = СтрокаОстатков.СчетУчетаБУ;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
	Проводка.НомерЖурнала = НСтр("ru = 'ВО'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	
	Забалансовый = СчетУчета.Забалансовый;
	
	СуммаПроводки = 0;
	КоличествоПроводки = 0;
	
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;
			СуммаПроводки       = СтрокаОстатков.СуммаБУ - СтрокаОстатков.СуммаБУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоБУ - СтрокаОстатков.КоличествоБУКт;
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда
			СуммаПроводки       = СтрокаОстатков.СуммаБУКт - СтрокаОстатков.СуммаБУ;
			КоличествоПроводки  = СтрокаОстатков.КоличествоБУКт - СтрокаОстатков.КоличествоБУ;
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда			
			СуммаПроводки       = СтрокаОстатков.СуммаБУ - СтрокаОстатков.СуммаБУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоБУ - СтрокаОстатков.КоличествоБУКт;
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		Проводка.Сумма       = СуммаПроводки;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		
		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			Если ВидСчетаУчета = ВидСчета.Пассивный Тогда 
				СуммаПроводки = СтрокаОстатков.СуммаБУКт - СтрокаОстатков.СуммаБУ;
			Иначе	
				СуммаПроводки = СтрокаОстатков.СуммаБУ - СтрокаОстатков.СуммаБУКт;
			КонецЕсли;
		Иначе	
			СуммаПроводки = СтрокаОстатков.СуммаБУ;
		КонецЕсли;
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;		
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда			
			ОтразитьПоДебету = Ложь;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		
		Проводка.Сумма       = СуммаПроводки;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		СуммаПроводки = СтрокаОстатков.СуммаБУ;		
		Проводка.Сумма       = СуммаПроводки;
		Если ВидСчетаУчета = ВидСчета.Активный Тогда
			ОтразитьПоДебету 	= Истина;
		Иначе
			ОтразитьПоДебету 	= Ложь;
		КонецЕсли;
		
	Иначе 
		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
			СуммаПроводки = СтрокаОстатков.СуммаБУ;
			КоличествоПроводки  = СтрокаОстатков.КоличествоБУ;
		Иначе	
			СуммаПроводки = СтрокаОстатков.СуммаБУ - СтрокаОстатков.СуммаБУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоБУ - СтрокаОстатков.КоличествоБУКт;
		КонецЕсли;
		//для других разделов
		Если ВидСчетаУчета = ВидСчета.Активный Тогда				
			ОтразитьПоДебету = Истина;				
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда				
			ОтразитьПоДебету 	= Ложь;
			СуммаПроводки 		= -СуммаПроводки;
			КоличествоПроводки  = -КоличествоПроводки;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
			
			Если СуммаПроводки > 0 Тогда					
				ОтразитьПоДебету = Истина;
			Иначе					
				ОтразитьПоДебету = Ложь;
			КонецЕсли;				
		КонецЕсли;  		
	КонецЕсли;
	Проводка.Сумма       = СуммаПроводки;		
	Если ОтразитьПоДебету Тогда			
		Проводка.СчетДт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Типовой.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт = СтрокаОстатков.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаОстатков.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = КоличествоПроводки;
		КонецЕсли;
		
	Иначе
		Проводка.СчетКт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт = ПланыСчетов.Типовой.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт = СтрокаОстатков.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаОстатков.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = КоличествоПроводки;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрольПроводки(Реквизиты, СтрокаОстатков.НомерСтроки, Проводка, ОтразитьПоДебету);

	Возврат Проводка;
	
КонецФункции

Функция СформироватьПроводкуНал(Реквизиты,Операция, СтрокаОстатков)
	
	СчетУчета = СтрокаОстатков.СчетУчетаНУ;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
	Проводка.НомерЖурнала = НСтр("ru = 'ВО'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Забалансовый = СчетУчета.Забалансовый;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	
	СуммаПроводки      = 0;     	
	КоличествоПроводки = 0;
	
	//Для раздела "Прочие счета", в отличие от других разделов, существует возможность вводить как количественные показатели по дебету, так и по кредиту
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;
			СуммаПроводки       = СтрокаОстатков.СуммаНУ - СтрокаОстатков.СуммаНУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоНУ - СтрокаОстатков.КоличествоНУКт;
			
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда
			СуммаПроводки       = СтрокаОстатков.СуммаНУКт - СтрокаОстатков.СуммаНУ;
			КоличествоПроводки  = СтрокаОстатков.КоличествоНУКт - СтрокаОстатков.КоличествоНУ;			
			ОтразитьПоДебету = Ложь;
			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда
			СуммаПроводки       = СтрокаОстатков.СуммаНУ - СтрокаОстатков.СуммаНУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоНУ - СтрокаОстатков.КоличествоНУКт;		
			
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли; 
		Проводка.Сумма       = СуммаПроводки;		

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами 
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
			СуммаПроводки = СтрокаОстатков.СуммаНУ;			
		Иначе	
			Если ВидСчетаУчета = ВидСчета.Пассивный Тогда 
				СуммаПроводки = СтрокаОстатков.СуммаНУКт - СтрокаОстатков.СуммаНУ;
			Иначе	
				СуммаПроводки = СтрокаОстатков.СуммаНУ - СтрокаОстатков.СуммаНУКт;
			КонецЕсли;			
		КонецЕсли;
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;		
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда			
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		
		Проводка.Сумма       = СуммаПроводки;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		СуммаПроводки = СтрокаОстатков.СуммаНУ;		
		Проводка.Сумма       = СуммаПроводки;
				
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;		
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда			
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		

	
	Иначе	//для других разделов
		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
			СуммаПроводки = СтрокаОстатков.СуммаНУ;
			КоличествоПроводки  = СтрокаОстатков.КоличествоНУ;
		Иначе	
			СуммаПроводки = СтрокаОстатков.СуммаНУ - СтрокаОстатков.СуммаНУКт;
			КоличествоПроводки  = СтрокаОстатков.КоличествоНУ - СтрокаОстатков.КоличествоНУКт;
		КонецЕсли;
		Если ВидСчетаУчета = ВидСчета.Активный Тогда			
			ОтразитьПоДебету = Истина;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
			ОтразитьПоДебету = Ложь;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
			
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;			
			
		КонецЕсли;
	КонецЕсли;
	Проводка.Сумма       = СуммаПроводки;		
	Если ОтразитьПоДебету Тогда
		Проводка.СчетКт = ПланыСчетов.Налоговый.Вспомогательный;
		Проводка.СчетДт = СчетУчета;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = КоличествоПроводки;
		КонецЕсли;
		
	Иначе
		Проводка.СчетДт = ПланыСчетов.Налоговый.Вспомогательный;
		Проводка.СчетКт = СчетУчета;
		
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = КоличествоПроводки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтрокаОстатков.ВидУчетаНУ);
	
	КонтрольПроводки(Реквизиты, СтрокаОстатков.НомерСтроки, Проводка, ОтразитьПоДебету, "Налоговый");

	Возврат Проводка;
	
КонецФункции

Функция ИмяТабличнойЧастиДляСообщения(РазделУчета) Экспорт 
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		Возврат НСтр("ru = 'Денежные средства'");
	ИначеЕсли (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками) 
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками)
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами) Тогда
		Возврат НСтр("ru = 'Расчеты с контрагентами'");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
		Возврат НСтр("ru = 'Запасы'");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат НСтр("ru = 'Расчеты по налогам и сборам'");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		Возврат НСтр("ru = 'Расчеты с подотчетными лицами'");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		Возврат НСтр("ru = 'Прочие счета бухгалтерского учета'");
	КонецЕсли;
	
КонецФункции

Процедура КонтрольПроводки(Реквизиты, НомерСтроки, Проводка, ОтразитьПоДебету, ИмяПланаСчетов = "Типовой")

	Если ОтразитьПоДебету Тогда
		СчетУчета = Проводка.СчетДт;
		ПрефиксСчета = "Дт";
	Иначе
		СчетУчета = Проводка.СчетКт;
		ПрефиксСчета = "Кт";
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='В строке ""%1"" списка ""%2"" валютная сумма не совпадает с суммой проводки!'");
	
	Если ИмяПланаСчетов = "Типовой" И СчетУчета.Валютный Тогда
		
		// Проверка валютной суммы для валюты рег. учета
		Если Проводка["Валюта" + ПрефиксСчета] = Реквизиты.ВалютаРегламентированногоУчета
			И Проводка["ВалютнаяСумма" + ПрефиксСчета] <> Проводка.Сумма Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтроки, ИмяТабличнойЧастиДляСообщения(Реквизиты.РазделУчета));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения_РасчетыСКонтрагентами(ТаблицаРасчетыСКонтрагентами, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Параметры = ПодготовитьПараметрыПроведенияРасчетыСКонтрагентами(
	ТаблицаРасчетыСКонтрагентами,
	ТаблицаРеквизиты);
	
	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыСКонтрагентами Цикл
		
		Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
			Операция   = Движения.Типовой;
			
			Если НЕ ТекущаяСтрока.СуммаБУ = 0 ИЛИ НЕ ТекущаяСтрока.СуммаБУКт = 0 Тогда 
				
				Проводка = СформироватьПроводкуБух(Реквизиты, Операция, ТекущаяСтрока);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "Контрагенты", ТекущаяСтрока["Контрагент"]);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "Договоры", ТекущаяСтрока["ДоговорКонтрагента"]);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "ДокументыРасчетовСКонтрагентами", ТекущаяСтрока["Документ"]);				
				
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизиты.УчитыватьКПН И (НЕ ТекущаяСтрока.СуммаНУ = 0 ИЛИ  НЕ ТекущаяСтрока.СуммаНУКт = 0) Тогда 
			
			ОперацияНУ = Движения.Налоговый;
			ПроводкаНУ = СформироватьПроводкуНал(Реквизиты, ОперацияНУ, ТекущаяСтрока);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, ТекущаяСтрока, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, ТекущаяСтрока, Ложь)], "Контрагенты", ТекущаяСтрока["Контрагент"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, ТекущаяСтрока, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, ТекущаяСтрока, Ложь)], "Договоры", ТекущаяСтрока["ДоговорКонтрагента"]);
			ПроводкаНУ[ТипСчетаСубконто(3, ТекущаяСтрока, Ложь)]  = ТекущаяСтрока.ВидУчетаНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Типовой.Записывать = Истина;
	КонецЕсли;
	
	Если Реквизиты.УчитыватьКПН Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения_РасчетыПоНалогамИСборам(ТаблицаРасчетыПоНалогамИСборам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Параметры = ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборам(
	ТаблицаРасчетыПоНалогамИСборам,
	ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете
		ИЛИ Реквизиты.УчитыватьКПН Тогда
		Операция = Движения.Типовой;
		ОперацияНУ = Движения.Налоговый;
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыПоНалогамИСборам Цикл
			
			Если Реквизиты.ОтражатьВБухгалтерскомУчете И НЕ ТекущаяСтрока.СуммаБУ = 0  Тогда 
				
				Проводка = СформироватьПроводкуБух(Реквизиты, Операция, ТекущаяСтрока);
				Если ТекущаяСтрока.СчетУчетаБУ.Вид = ВидСчета.Активный Тогда
					ПрефиксСчета = "Дт";
				Иначе
					ПрефиксСчета = "Кт";
				КонецЕсли;			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "НалогиСборыОтчисления", ТекущаяСтрока["ВидНалога"]);		
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "ВидыПлатежейВБюджетИФонды", ТекущаяСтрока["ВидПлатежаВБюджет"]);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "Контрагенты", ТекущаяСтрока["НалоговыйКомитет"]);							
			КонецЕсли;
			
			Если Реквизиты.УчитыватьКПН И НЕ ТекущаяСтрока.СуммаНУ = 0  Тогда 
				
				ПроводкаНУ = СформироватьПроводкуНал(Реквизиты, ОперацияНУ, ТекущаяСтрока);
				Если ТекущаяСтрока.СчетУчетаНУ.Вид = ВидСчета.Активный Тогда
					ПрефиксСчета = "Дт";
				Иначе
					ПрефиксСчета = "Кт";
				КонецЕсли;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "НалогиСборыОтчисления", ТекущаяСтрока["ВидНалога"]);		
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "ВидыПлатежейВБюджетИФонды", ТекущаяСтрока["ВидПлатежаВБюджет"]);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "Контрагенты", ТекущаяСтрока["НалоговыйКомитет"]);				
				
			КонецЕсли;		
		КонецЦикла;   	
		
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Типовой.Записывать = Истина;
	КонецЕсли;
	
	Если Реквизиты.УчитыватьКПН Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения_БухСправка(ТаблицаБухСправка, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Передать 2 таблицы, чтобы проверить обязательные колонки обеих
	Параметры = ПодготовитьПараметрыПроведенияБухСправка(ТаблицаБухСправка, ТаблицаРеквизиты);
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.УчитыватьКПН Тогда
		Операция = Движения.Типовой;
		ОперацияНУ = Движения.Налоговый;
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаБухСправка Цикл
			
			Если Реквизиты.ОтражатьВБухгалтерскомУчете И (ТекущаяСтрока.СуммаБУ <> 0 ИЛИ ТекущаяСтрока.КоличествоБУ <> 0 ИЛИ ТекущаяСтрока.СуммаБУКт <> 0 ИЛИ  ТекущаяСтрока.КоличествоБУКт <> 0) Тогда 
				
				СчетУчета = ТекущаяСтрока.СчетУчетаБУ;
				
				Проводка = СформироватьПроводкуБух(Реквизиты, Операция, ТекущаяСтрока);
				
				ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
				
				Для Сч = 1 По ЧислоАктивныхСубконто Цикл
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], Сч, ТекущаяСтрока["Субконто"+Сч]);			
				КонецЦикла;
			КонецЕсли;
			
			//Формирование проводок по НУ
			Если Реквизиты.УчитыватьКПН И (ТекущаяСтрока.СуммаНУ <> 0 ИЛИ ТекущаяСтрока.КоличествоНУ <> 0 ИЛИ ТекущаяСтрока.СуммаНУКт <> 0 ИЛИ  ТекущаяСтрока.КоличествоНУКт <> 0) Тогда 
				
				
				СчетУчета = ТекущаяСтрока.СчетУчетаНУ;
				
				ПроводкаНУ = СформироватьПроводкуНал(Реквизиты, ОперацияНУ, ТекущаяСтрока);
				
				ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
				
				Для Сч = 1 По ЧислоАктивныхСубконто Цикл
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, ТекущаяСтрока, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, ТекущаяСтрока, Ложь)], Сч, ТекущаяСтрока["Субконто"+Сч]);			
				КонецЦикла;
				ПроводкаНУ[ТипСчетаСубконто(3, ТекущаяСтрока, Ложь)] = ТекущаяСтрока.ВидУчетаНУ;
			КонецЕсли;  
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Типовой.Записывать = Истина;
	КонецЕсли;
	
	Если Реквизиты.УчитыватьКПН Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения_Запасы(ТаблицаЗапасы,ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Параметры = ПодготовитьПараметрыПроведенияЗапасы(ТаблицаЗапасы, ТаблицаРеквизиты);
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.УчитыватьКПН Тогда
		
		Операция = Движения.Типовой;
		ОперацияНУ = Движения.Налоговый;
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаЗапасы Цикл
			
			Если Реквизиты.ОтражатьВБухгалтерскомУчете И (ТекущаяСтрока.СуммаБУ <> 0 ИЛИ  ТекущаяСтрока.КоличествоБУ <> 0) Тогда 
				Проводка = СформироватьПроводкуБух(Реквизиты,Операция, ТекущаяСтрока);
				
				СчетУчета = ТекущаяСтрока.СчетУчетаБУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);		
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ТекущаяСтрока["Склад"]);
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока["Контрагент"]);
				КонецЕсли;
			КонецЕсли;
			
			Если Реквизиты.УчитыватьКПН И (ТекущаяСтрока.СуммаНУ <> 0 ИЛИ ТекущаяСтрока.КоличествоНУ <> 0)  Тогда		
				ПроводкаНУ =  СформироватьПроводкуНал(Реквизиты, ОперацияНУ, ТекущаяСтрока);
				
				СчетУчетаНУ = ТекущаяСтрока.СчетУчетаНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам (ПланыСчетов.Налоговый.Товары) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады", ТекущаяСтрока["Склад"]);
				КонецЕсли;  	
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчетаНУ) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", ТекущаяСтрока["Контрагент"]);
				КонецЕсли;
				
				ПроводкаНУ.ВидУчетаДт = ТекущаяСтрока.ВидУчетаНУ;	
				
			КонецЕсли;     
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Типовой.Записывать = Истина;
	КонецЕсли;
	
	Если Реквизиты.УчитыватьКПН Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения_РасчетыСПодотчетнымиЛицами(ТаблицаРасчетыСПодотчетнымиЛицами,ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Параметры = ПодготовитьПараметрыПроведенияРасчетыСПодотчетнымиЛицами(ТаблицаРасчетыСПодотчетнымиЛицами, ТаблицаРеквизиты);
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.УчитыватьКПН Тогда
		
		Операция = Движения.Типовой;
		ОперацияНУ = Движения.Налоговый;
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыСПодотчетнымиЛицами  Цикл
			
			Если Реквизиты.ОтражатьВБухгалтерскомУчете И НЕ ТекущаяСтрока.СуммаБУ = 0  Тогда
				
				Проводка = СформироватьПроводкуБух(Реквизиты, Операция, ТекущаяСтрока);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "РаботникиОрганизаций", ТекущаяСтрока["РаботникОрганизации"]);							
				
			КонецЕсли;
			
			Если Реквизиты.УчитыватьКПН И НЕ ТекущаяСтрока.СуммаНУ = 0  Тогда
				
				ПроводкаНУ = СформироватьПроводкуНал(Реквизиты, ОперацияНУ, ТекущаяСтрока);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, ТекущаяСтрока, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, ТекущаяСтрока, Ложь)], "РаботникиОрганизаций", ТекущаяСтрока["РаботникОрганизации"]);
				
				ПроводкаНУ[ТипСчетаСубконто(3, ТекущаяСтрока, Ложь)]  = ТекущаяСтрока.ВидУчетаНУ;
				
			КонецЕсли;  		
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Типовой.Записывать = Истина;
	КонецЕсли;
	
	Если Реквизиты.УчитыватьКПН Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьДвиженияТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
		
	Параметры = НомераГТДСервер.ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары,ТаблицаРеквизиты,  Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0 ИЛИ  Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Движение = Движения.ТоварыОрганизацийБУ.Добавить();
		Движение.Период           		  = Реквизиты.Период;
		Движение.Организация      		  = Реквизиты.Организация;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;  
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
	КонецЦикла;

	Движения.ТоварыОрганизацийБУ.Записывать = Истина;
	
КонецПроцедуры

#КонецЕсли
