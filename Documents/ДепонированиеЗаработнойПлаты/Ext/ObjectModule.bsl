#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений 
	// и введенные суммы к выплате были только за один месяц, чтобы знать период 
	// взаморасчетов для депонирования.
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДепонированнаяЗарплата", ДепонированнаяЗаработнаяПлата);
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ДепонированнаяЗарплата.Ведомость
	|ПОМЕСТИТЬ ДепонированнаяЗарплата
	|ИЗ
	|	&ДепонированнаяЗарплата КАК ДепонированнаяЗарплата
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	ВЫБОР 
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеВыплаченаЗП, 
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВедомостиБолееМесяца, 
	|	ВЫБОР
	|		КОГДА НЕ (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL) 
	|				И (ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
	|			ТОГДА РанееВыплаченныеСуммы.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КонфликтныйДокумент
	|ИЗ
	|	ДепонированнаяЗарплата КАК ДепонированиеЗаработнойПлаты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НачалоСообщения = Строка(Выборка.Ведомость) + ": ";
		Если Выборка.НеВыплаченаЗП Тогда
			ТекстСообщения = НСтр("ru = 'есть строки с невыплаченной зарплатой'");
			ОбщегоНазначения.СообщитьПользователю(НачалоСообщения + ТекстСообщения, ЭтотОбъект, "ДепонированнаяЗаработнаяПлата", "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ВедомостиБолееМесяца Тогда
			ТекстСообщения = НСтр("ru = 'есть ведомости более чем за один месяц начисления'");
			ОбщегоНазначения.СообщитьПользователю(НачалоСообщения + ТекстСообщения, ЭтотОбъект, "ДепонированнаяЗаработнаяПлата", "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.КонфликтныйДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'на основании ведомости уже был проведен документ: %1'"), Выборка.КонфликтныйДокумент);
			ОбщегоНазначения.СообщитьПользователю(НачалоСообщения + ТекстСообщения, ЭтотОбъект, "ДепонированнаяЗаработнаяПлата", "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ДепонированиеЗаработнойПлаты.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыСервер.СформироватьДвиженияДепонированиеЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаДепонированиеЗП, Движения, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		Документы.ДепонированиеЗаработнойПлаты.ЗаполнитьДокументПоЗарплатеКВыплатеОрганизаций(ЭтотОбъект, Основание);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , Основание);
	
КонецПроцедуры

#КонецЕсли

