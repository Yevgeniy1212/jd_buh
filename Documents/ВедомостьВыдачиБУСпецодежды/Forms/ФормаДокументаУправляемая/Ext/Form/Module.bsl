////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
//	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		Объект.ОприходоватьНаЗабалансовыйСчет = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборСпецОдежды.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = ВыбранноеЗначение;
		НоваяСтрока.ОприходоватьНаЗабалансовыйСчет = Истина;
		НоваяСтрока.СчетУчетаБУ = ПолучитьСчет();
		НоваяСтрока.НовыйСчетУчетаБу = ПолучитьСчет();
		НоваяСтрока.Количество = 1;
		Если НЕ ЭтаФорма.Модифицированность Тогда
			ЭтаФорма.Модифицированность = Истина;	
		КонецЕсли;
	КонецЕсли; 
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	ИзменитьСрокСлужбы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ИсходнаяОрганизация = Объект.Организация Тогда
		Возврат
	КонецЕсли;

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь,"ПослеВыбораСтруктурногоПодразделенияОтправителя");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучателя");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если Объект.СкладОтправитель = ТекущийСклад Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = Объект.СкладОтправитель;
	Объект.МОЛОтправитель = ПолучитьМОЛСклада(Объект.СкладОтправитель, Объект.Дата);
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
	    ТекущиеДанные.ОприходоватьНаЗабалансовыйСчет = Истина;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда				
		ТекущиеДанные.Коэффициент = 1;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Товары");

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ, СчетУчетаНУ, НовыйСчетУчетаБУ, НовыйСчетУчетаНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетУчетаБУ = ПолучитьСчет();
	СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПолучитьСчет();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСчет()
	Возврат  ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
КонецФункции 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.НовыйСчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.НовыйСчетУчетаБУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].НовыйСчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.НовыйСчетУчетаБУ = Неопределено;
		
		Возврат;
		
	КонецЕсли;

	СтрокаТаблицы.НовыйСчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.НовыйСчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.НовыйСчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.НовыйСчетУчетаНУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].НовыйСчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.НовыйСчетУчетаНУ = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)

	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена организация для получения остатков'"),, "Организация", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен склад для получения остатков'"),, "СкладОтправитель", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.МОЛОтправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен МОЛ для получения остатков'"),, "МОЛОтправитель", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
						|Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоОстаткам", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ЗаполнитьТабличнуюЧастьПоОстаткам();
	КонецЕсли;
	
	ОбновитьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоОстаткам(Результат, Параметры) Экспорт
		
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
    Объект.Товары.Очистить();
	
	ЗаполнитьТабличнуюЧастьПоостаткам();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
		
	ЕстьСклады = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(ПланыСчетов.Типовой.Товары);
	ИсходнаяОрганизация = Объект.Организация;

	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда   
		Объект.СкладОтправитель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Объект.СкладПолучатель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	КонецЕсли;
	
	ТекущийСклад         = Объект.СкладОтправитель;

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ
		 (ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь И (ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)));
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь 
		 И НЕ(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)) Тогда
		
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Ложь;
	Иначе
		Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	//Элементы.ТекстДокументаОснования.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
	Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СтруктурноеПодразделениеОрганизацияПолучатель  = Объект.Организация;
	Объект.СтруктурноеПодразделениеПолучатель      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);

	УправлениеФормой(ЭтаФорма);
	
	ИсходнаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура СкладОтправительПриИзмененииНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
	КонецЕсли; 
	
	СоответствиеСчетовУчета = "";
	СчетаУчета = ""; 
	
	Документы.ВедомостьВыдачиБУСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Товары");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОбъекта.Товары, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ВедомостьВыдачиБУСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпецОдеждаОстатки.Номенклатура КАК Номенклатура,
	               |	СпецОдеждаОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	               |	СпецОдеждаОстатки.СрокСлужбы КАК СрокСлужбы,
	               |	СпецОдеждаОстатки.СрокСлужбы КАК СрокСлужбыСтарый,
	               |	СпецОдеждаОстатки.ДатаВыдачи КАК ДатаВыдачиСтарый,
	               |	СпецОдеждаОстатки.ДатаОкончания КАК ДатаОкончания,
	               |	СпецОдеждаОстатки.ДатаОкончания КАК ДатаОкончанияСтарый,
	               |	СпецОдеждаОстатки.Цена КАК Цена,
	               |	1 КАК Коэффициент,
	               |	СпецОдеждаОстатки.КоличествоОстаток КАК Количество,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.СпецОдежда) КАК СчетУчетаБУ,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Типовой.СпецОдежда) КАК НовыйСчетУчетаБУ
	               |ИЗ
	               |	РегистрНакопления.СпецОдежда.Остатки(
	               |			&ДатаОстатков,
	               |			Организация = &Организация
	               |				И Склад = &Склад
	               |				И МОЛ = &МОЛ
	               |				И БУ = ИСТИНА) КАК СпецОдеждаОстатки";
	
	Если Объект.МОЛОтправитель.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МОЛ = &МОЛ", "Истина");
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛОтправитель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Склад",		  Объект.СкладОтправитель);
	
	
	ДатаОстатков = ?(Объект.Проведен, Новый Граница(Объект.Дата, ВидГраницы.Включая), Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
	КонецЦикла;
	
	ИзменитьСрокСлужбы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМОЛСклада(Склад, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Склад) КАК ОтветственныеЛицаСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ФизическоеЛицо;
	Иначе 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьТоварыПоДокументуОснованиюНаСервере()
	
	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.ВедомостьВыдачиБУСпецодежды.ЗаполнитьПоДокументуПоступлениеТоваровУслуг(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда	
		
		Документы.ВедомостьВыдачиБУСпецодежды.ЗаполнитьПоДокументуОтчетПроизводстваЗаСмену(Объект, ДокументОснование);
		
	КонецЕсли;

	Если НЕ ИсходнаяОрганизация = Объект.Организация  Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары",		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ДокументСсылка",			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата",				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация",		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад",			Объект.СкладПолучатель);
	
	Возврат ПараметрыОбработки;

КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
			
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", 	 СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("Цена", 			 СтрокаТовара.Цена);
		СтруктураОтбора.Вставить("ДатаВыдачиСтарый", 	СтрокаТовара.ДатаВыдачи);
		СтруктураОтбора.Вставить("СрокСлужбыСтарый", 	СтрокаТовара.СрокСлужбы);
		СтруктураОтбора.Вставить("ДатаОкончанияСтарый", СтрокаТовара.ДатаОкончания);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
	
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СтрокаТабличнойЧасти.Коэффициент = 1;
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.СпецОдежда;
			СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПланыСчетов.Типовой.СпецОдежда;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ДатаВыдачиСтарый =	СтрокаТовара.ДатаВыдачи;
			СтрокаТабличнойЧасти.СрокСлужбыСтарый =	СтрокаТовара.СрокСлужбы;
			СтрокаТабличнойЧасти.ДатаОкончанияСтарый =	СтрокаТовара.ДатаОкончания;
			
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьСрокСлужбы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправителя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	
КонецПроцедуры


#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
		
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчетаБУ");
		СписокСвойств.Добавить("СчетУчетаНУ");

		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("НовыйСчетУчетаБУ");
			СписокСвойств.Добавить("НовыйСчетУчетаНУ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
			
КонецПроцедуры

#КонецОбласти

/// Контротек, Талпин Нурлан, СпецОдежда

&НаКлиенте
Процедура ТоварыСрокСлужбыПриИзменении(Элемент)
	
	ИзменитьСрокСлужбы();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСрокСлужбы()
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Если СтрокаТаб.СрокСлужбы = 0 Тогда
			СтрокаТаб.ДатаОкончания = '00010101';
		Иначе
			СтрокаТаб.ДатаОкончания = ДобавитьМесяц(Объект.Дата, СтрокаТаб.СрокСлужбы);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если Объект.СкладПолучатель.Пустая() Тогда
		Объект.Должность = ПредопределенноеЗначение("Справочник.ДолжностиОрганизаций.ПустаяСсылка");
		Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.ПустаяСсылка");
	Иначе
		СкладПолучательПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.МОЛПолучатель = ПолучитьМОЛСклада(Объект.СкладПолучатель, Объект.Дата);
	ОбновитьДолжностьМОЛаПолучателя();
	//МОЛПолучательПолучитьРазмерыОдежды();
	УстановитьРазмеры(Объект.СкладПолучатель);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмеры(Наименование)

	Объект.Рост = Наименование.Рост;
	Объект.Одежда = Наименование.Одежда;	
	Объект.Обувь = Наименование.Обувь;	
	Объект.ГолУбор = Наименование.ГолУбор;	
	
КонецПроцедуры 

&НаСервере
Процедура СкладПолучательПриИзмененииНаСервере()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ОтветственноеЛицо,
	               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Пол КАК ФизическоеЛицоПол,
	               |	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	               |		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СкладПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Должность = Выборка.Должность;
		Объект.Пол = Выборка.ФизическоеЛицоПол;
	Иначе
		Объект.Должность = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		Объект.Пол = Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОбновитьСуммы();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммы()
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.Сумма = СтрокаТаб.Цена * СтрокаТаб.Количество;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДолжностьМОЛаПолучателя()

	Если Объект.МОЛПолучатель.Пустая() Тогда
		Объект.Должность = ПредопределенноеЗначение("Справочник.ДолжностиОрганизаций.ПустаяСсылка");
	Иначе	
		Объект.Должность = ОбновитьДолжностьМОЛаПолучателяНаСервере(Объект.Дата, Объект.Организация, Объект.МОЛПолучатель);
		Объект.Пол		 = ПолучитьПолПолучателя(Объект.МОЛПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДолжностьМОЛаПолучателяНаСервере(Дата, Организация, Физлицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |			&ДатаСреза,
	               |			Организация = &Организация
	               |				И Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних";    // |				И Сотрудник.ВидЗанятости = &ВидЗанятости
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Должность;
	Иначе 
		Возврат Справочники.ДолжностиОрганизаций.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПолПолучателя(Физлицо)
	
	Возврат Физлицо.Пол;
	
КонецФункции	

&НаКлиенте
Процедура МОЛПолучательПриИзменении(Элемент)
	
	ОбновитьДолжностьМОЛаПолучателя();
	МОЛПолучательПолучитьРазмерыОдежды();
	
КонецПроцедуры

&НаСервере
Процедура МОЛПолучательПолучитьРазмерыОдежды()
	
	РазмерыОдежды = РегистрыСведений.КТ_СпецО_РазмерыСпецОдежды.ПолучитьРазмерыФизЛица(Объект.МОЛПолучатель);
	ЗаполнитьЗначенияСвойств(Объект, РазмерыОдежды);

КонецПроцедуры	

&НаКлиенте
Процедура ПодборСпецОдежды(Команда)
	
	//ПараметрыПодбора = ПолучитьПараметрыПодбора();
	//Если ПараметрыПодбора <> Неопределено Тогда
	//	ОткрытьФорму("Обработка.ПодборСпецОдежды.Форма.Форма", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	//КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе", Ложь), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Склад", 		Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("МОЛ",   		Объект.МОЛОтправитель);
	ПараметрыФормы.Вставить("Дата",  		Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);
	ПараметрыФормы.Вставить("Проведен", 	Объект.Проведен);
	ПараметрыФормы.Вставить("БУ", 			Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если НЕ Объект.Ответственный.Пустая() Тогда
		ОтветственныйПриИзмененииНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ДанныеФизЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, Объект.Ответственный, Объект.Дата);
	Объект.ДолжностьДляПодписи = ДанныеФизЛица.Должность;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Организация = ОснОрг();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОснОрг()
	Возврат Справочники.Организации.НайтиПоНаименованию("АО  СП ""Заречное""");	
КонецФункции
 

	// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюСервер();	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСервер()

	Объект.Автор = Пользователи.ТекущийПользователь();	

КонецПроцедуры 
 
