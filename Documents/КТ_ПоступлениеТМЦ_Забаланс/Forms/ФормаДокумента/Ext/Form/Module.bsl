
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
КонецПроцедуры
	
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьШтрихкода(Команда)
	
	СформироватьШтрихкодаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;

	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ВидВходящегоДокументаНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации, Склад, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		Элементы.Товары.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	                	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
			
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	АдресХранилищаТовары = ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары");

	ПоступлениеТоваровУслугФормыКлиент.ИзменитьТовары(ЭтаФорма, Команда, АдресХранилищаТовары, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормы(ИмяТабличнойЧасти)  	
	
	АдресХранилищаТабличнойЧасти = ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти);
	
	ПараметрыФормы = ПоступлениеТоваровУслугФормы.ПолучитьПараметрыОбработкиТабличнойЧасти(ЭтаФорма,ИмяТабличнойЧасти,ИмяТабличнойЧасти,АдресХранилищаТабличнойЧасти,УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода",,
		ЭтотОбъект,,,,
		ОписаниеОповещенияПоискПоШтрихкоду,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт

	ТекущаяДатаДокумента = Объект.Дата;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Основание = Неопределено;
	Параметры.Свойство("Основание", Основание);
	Если Основание = Неопределено И Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("Основание", Основание);
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
		
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ГруппаИтогиНДС.Видимость        = Объект.УчитыватьНДС;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
		
	Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
	ОбновитьИтоги(Форма);
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	//СформироватьНадписьЦеныИВалюта(Форма);
	
	ВПереработку = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");

	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость = Форма.ПоказыватьВДокументахСчетаУчета
		И Объект.ВидОперации <> ВПереработку;
		
	Если Объект.ВидОперации = ВПереработку Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Материалы'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'ТМЗ'");
	КонецЕсли;
	
	// Настройка видимости в форме по виду операции
	Элементы.УчитыватьКПН.Доступность = Форма.ТребуетсяСчетФактура;
	
	// Услуги и ОС  в переработку не принимаем.
	Элементы.ГруппаОС.Видимость     = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	Элементы.ГруппаУслуги.Видимость = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
	                                                                      	И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
																			
	Элементы.ОСПодразделениеОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям;
	Элементы.ОСМОЛОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ;
																			
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;

	 Элементы.ТоварыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ И
	 						НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт")
							ИЛИ Объект.ВидОперации = ВПереработку);
							
							
	Элементы.ТоварыНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	Элементы.ОСНДСВидПоступления.АвтоОтметкаНезаполненного  = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.АвтоОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету; 	
	Элементы.ОСНДСВидПоступления.ОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.ОтметкаНезаполненного          = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	 	
	Элементы.УслугиНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()Экспорт

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт

	// Заполнение колонок "Всего" в табличных частях
	//Для Каждого СтрокаТаблицы Из Объект.Товары Цикл		
	//	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	//КонецЦикла;

	//Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл		
	//	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	//КонецЦикла;
	//
	//Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
	//	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	//КонецЦикла;
	
КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма) Экспорт

	Объект = Форма.Объект;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// При изменении реквизитов (на клиенте)

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныетабЧасти = Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0; 
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныетабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	ПоступлениеТоваровУслугФормы.СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(ЭтаФорма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

// Подбор товаров

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			    Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			    Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	КТ_ПоступлениеТМЦЗабалансФормы.ОбработкаВыбораПодборНаСервере(ЭтаФорма,ЭтоВставкаИзБуфера, ВыбранноеЗначение,ИмяТаблицы);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(ЭтаФорма,Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПоступлениеТоваровУслугФормы.ПриИзмененииЗначенияОрганизацииСервер(ЭтаФорма,ПараметрыОбработки, Неопределено); 
	//ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	ПоступлениеТоваровУслугФормы.КонтрагентОбработатьИзменение(ЭтаФорма,Неопределено,Новый Массив);
	//КонтрагентОбработатьИзменение(Неопределено, Новый Массив);
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.УстановитьФункциональныеОпцииФормы(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		//СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПоступлениеТоваровУслугФормыКлиент.ПараметрыОткрытияФормыЦеныИВалюта(ЭтаФорма));
		
	КонецЕсли;

КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере() Экспорт

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Доверенность") Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьДокументПоДоверенности(Объект, ДокументОснование);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, Константы.ВалютаРегламентированногоУчета.Получить(), , , , ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетовУчета(Форма, ВидОперации)
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	// "Счет учета БУ" табличной части "Товары"    
    Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
        НовыйМассивПараметров = Новый Массив;    
        Для каждого СтарыйПараметр Из Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора Цикл
            Если СтарыйПараметр.Имя <> "Отбор.Забалансовый" Тогда
                НовыйМассивПараметров.Добавить(СтарыйПараметр);
            КонецЕсли;
        КонецЦикла; 
        НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
        Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
    Иначе
        НовыйМассивПараметров = Новый Массив;    
        Для каждого СтарыйПараметр Из Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора Цикл
            Если СтарыйПараметр.Имя <> "Отбор.Забалансовый" Тогда
                НовыйМассивПараметров.Добавить(СтарыйПараметр);
            КонецЕсли;
        КонецЦикла; 
        Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	ПоступлениеТоваровУслугФормы.ОпределитьСписокДоступныхВидовДоговоровПоОперации(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров(ВидОперации)
        
    СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы,МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура СформироватьШтрихкодаНаСервере()
	
	ПоступлениеТоваровУслугФормы.СформироватьШтрихкодаНаСервере(ЭтаФорма.Объект);
	
КонецПроцедуры	

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления");
		СписокСвойств.Добавить("НомерГТД");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");				
			СписокСвойств.Добавить("СчетУчетаНДС");			
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления"); 		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетЗатратБУ");				
				СписокСвойств.Добавить("СчетЗатратНУ");				
				СписокСвойств.Добавить("СубконтоЗатратБУ1");				
				СписокСвойств.Добавить("СубконтоЗатратБУ2");				
				СписокСвойств.Добавить("СубконтоЗатратБУ3");				
				СписокСвойств.Добавить("СубконтоЗатратНУ1");				
				СписокСвойств.Добавить("СубконтоЗатратНУ2");				
				СписокСвойств.Добавить("СубконтоЗатратНУ3");		
			КонецЕсли;   	
			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область ПоискПоШтрихкоду

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНоменклатуруНаСервере(Результат.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(Номенклатура)
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	ТаблицаТовары.Колонки.Добавить("Цена");
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации, Склад, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество = 1;
	СтрокаТаблицаТовары.Цена = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТаблицаТовары.ЕдиницаИзмерения = ?(СведенияОНоменклатуре = Неопределено, Неопределено, СведенияОНоменклатуре.БазоваяЕдиницаИзмерения);
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(Значение, "Товары");

КонецПроцедуры 

&НаСервере
Функция ДобавитьПоШтрихкодуНаСервере(Штрихкод)
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		ДобавитьНоменклатуруНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура);
	Иначе
		ДобавитьНоменклатуруНаСервере(Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Дополнительно(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуДополнительно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	ПоступлениеТоваровУслугФормы.РазблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции


