#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетАвансов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "ЗапасыКромеПринятыхВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ",      "ЗапасыКромеПринятыхВПереработкуНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "МатериалыПринятыеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота",   "ВидОборотаНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления",   "ВидПоступленияНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления", "ВидПоступленияНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратБУ",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДС",     "ПредъявленныйНДС_Расходы");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДС",             "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОборота",     "ВидОборотаНДСПредъявленного");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидОборота",             "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидПоступления",     "ВидПоступленияНДСПредъявленного_Расходы");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НДСВидПоступления",         "ВидПоступленияНДСПредъявленного_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратНУ",     "ЗатратыНУ");
	//СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ",     "ЗатратыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	//СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1",  "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2",  "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3",  "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ3");
	
	// Табличная часть ОсновныеСредства
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаБУ", "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНУ", "ОсновныеСредстваНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДС", "ПредъявленныйНДС_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "МатериалыПереработчика", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов",  "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетАвансов",   "ВидОперации, ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МатериалыПереработчика") Тогда
		
		ДанныеЗаполнения.МатериалыПереработчика = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Или ДанныеЗаполнения.Свойство("ТребуетсяУчетАвансов") Тогда
		
		ОсобенностиДокумента = ОсобенностиУчетаРасчетов(ДанныеЗаполнения.ВидОперации, ДанныеЗаполнения.ДоговорКонтрагента);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ОсновныеСредства") Тогда
		
		ДанныеЗаполнения.ОсновныеСредства = (ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	КолонкаНоменклатура = ?(ИмяТабличнойЧасти = "ОС", "ОсновноеСредство", "Номенклатура");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(
				ДанныеОбъекта.Организация, СтрокаТабличнойЧасти[КолонкаНоменклатура], ДанныеОбъекта.Дата);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	Иначе
		
		СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, КолонкаНоменклатура, Истина), ДанныеОбъекта.Дата);
			
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[КолонкаНоменклатура]);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
			
	ВидОперации  = ДанныеОбъекта.ВидОперации;
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	 
		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		ИначеЕсли НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетаУчета.СчетУчетаБУ));
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			Если СтрокаТабличнойЧасти.СчетЗатратБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда				
				СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
				Для Счетчик = 1 По 3 Цикл
					СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
				КонецЦикла;
			КонецЕсли;
			СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Товары" Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаДавСырья) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья;
			Иначе
				СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
				//СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку; // 9021 "Материалы на складе"
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
					СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда
					СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
				СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;  		
	КонецЕсли;

КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);

КонецПроцедуры

// Заполняет счета расчетов с контрагентом в документе
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ОсобенностиУчетаРасчетов(ВидОперации, ДоговорКонтрагента) Экспорт
	
	ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Если Не ОсобенностиДокумента.ТребуетсяУчетРасчетов Тогда
		ОсобенностиДокумента.ТребуетсяУчетАвансов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Возврат ОсобенностиДокумента;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("СтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Сумма");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Номенклатура");
		БлокируемыеРеквизиты.Добавить("СпособРаспределения; ФормаРаспределить");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыПодборТовары, ТоварыИзменитьТовары, ТоварыСкопироватьСтроки, ТоварыВставитьСтроки,
			|ТоварыДобавитьПоШтрихкоду, ТоварыКонтекстноеМенюВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		
		// таб. часть НМА
		БлокируемыеРеквизиты.Добавить("Услуги; ТоварыПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия;

	Если ЗначениеЗаполнено(Основание)
		И ТипЗнч(Основание) = Тип("ДокументСсылка.Доверенность") Тогда
		
		Результат = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьДокументПоДоверенности(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьОС = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);	

	Объект.ВидОперации  = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
		Контрагент = Объект.Контрагент;
		Если ЗначениеЗаполнено(Контрагент) И НЕ ПоступлениеТоваровУслугФормы.КонтрагентКакОрганизация(Контрагент) Тогда
			ТекстСообщения  = НСтр("ru = 'Для вида операции ""Поступление от структурного подразделения""
										 |в документе-основании должен быть выбран контрагент,
										 |соответствующий какому-либо структурному подразделению.
										 |Документ ""Поступление ТМЗ и услуг"" не создан.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
		
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();
	
	Если Не Основание.ДоговорКонтрагента.СпецификацияКДоговору.Пустая() И ПолучитьКоличествоСтрокПоСпецификации(Основание) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор" , Основание.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Документ", Основание);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "Договор.ЦФО КАК ЦФО,")+"
		|	Договор.Номенклатура КАК Номенклатура,
		|	Договор.ОсновноеСредство,
		|	ЕстьNull(Документ.Количество, 0) КАК Количество,
		|	Договор.Цена,
		|	Договор.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Договор.СтавкаНДС,
		|	Договор.ВидТРУ,
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "Договор.ЦФО КАК ПодразделениеОрганизации,")+"
		|	Договор.Сумма,
		|	Договор.СуммаНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "	ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.ЦФО КАК ЦФО,")+"
		|		ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.ТРУ КАК ТРУ,
		|		ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Номенклатура КАК Номенклатура,
		|		NULL КАК ОсновноеСредство,
		|		ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Цена КАК Цена,
		|		ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Ссылка.СтавкаНДС КАК СтавкаНДС,
		|		""Товары"" КАК ВидТРУ,
		|		NULL КАК Сумма,
		|		NULL КАК СуммаНУ
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов.РасшифровкаСпецификацииКДоговору КАК ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору
		|	ГДЕ
		|		ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Ссылка = &Договор
		|		И ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.ТРУ.ВидТРУ = ЗНАЧЕНИЕ(Перечисление.КТ_ВидыТРУ.ТМЦ)
		|
		|   СГРУППИРОВАТЬ ПО
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.ЦФО,")+"
		|      ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.ТРУ,
		|      ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Номенклатура,
		|      ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Цена,
		|      ДоговорыКонтрагентовРасшифровкаСпецификацииКДоговору.Ссылка.СтавкаНДС
		|      
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "ОсновноеПоОС.ЦФО,")+"
		|		ОсновноеПоОС.ТРУ,
		|		NULL,
		|		ДетализацияОС.ОсновноеСредство,
		|		ОсновноеПоОС.Цена,
		|		ОсновноеПоОС.Ссылка.СтавкаНДС,
		|		""ОС"",
		|		ОсновноеПоОС.Цена,
		|		ОсновноеПоОС.Цена
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов.РасшифровкаСпецификацииКДоговоруОС КАК ОсновноеПоОС
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДетализацияРасшифровкиОС КАК ДетализацияОС
		|			ПО ОсновноеПоОС.ТРУ = ДетализацияОС.ТРУ
		|	ГДЕ
		|		ДетализацияОС.Ссылка = &Договор
		|		И ДетализацияОС.ТРУ.ВидТРУ = ЗНАЧЕНИЕ(Перечисление.КТ_ВидыТРУ.ОС)) КАК Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "		ДоверенностьТовары.ЦФО КАК ЦФО, ")+"
		|			ДоверенностьТовары.ТРУ КАК ТРУ,
		|			ДоверенностьТовары.Количество КАК Количество
		|		ИЗ
		|			Документ.Доверенность.Товары КАК ДоверенностьТовары
		|		ГДЕ
		|			ДоверенностьТовары.Ссылка = &Документ) КАК Документ
		|		ПО Договор.ТРУ = Документ.ТРУ
		|	"+?(Объект.Дата >= КТ_РаботаСФормамиСервер.ВернутьКонстанту(), "", "		И Договор.ЦФО = Документ.ЦФО ")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда 
			Объект.Товары.Очистить();
			Объект.ОС.Очистить();
		КонецЕсли;
		
		Объект.УчитыватьКПН = Истина;
		Объект.УчитыватьНДС = Истина;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество > 0 Тогда
				Если Выборка.ВидТРУ = "Товары" Тогда
					
					СтрокаТабличнойЧасти = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
					СтрокаТабличнойЧасти.Коэффициент = 1;
					
					ИмяТабЧасти = "Товары";
				ИначеЕсли Выборка.ВидТРУ = "ОС" Тогда
					
					СтрокаТабличнойЧасти = Объект.ОС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
					
					ИмяТабЧасти = "ОС";                     
					
				КонецЕсли;                                      
				
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
				
				КТ_РаботаСФормамиСервер.КТ_УстановитьВидПоступления(СтрокаТабличнойЧасти, "Товары");
				
				
				ЗаполнитьРеквизитыНалоговогоУчета(Объект, СтрокаТабличнойЧасти, ИмяТабЧасти);
				
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.ДоговорКонтрагента.СтавкаНДС;//ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
				
				Если ИмяТабЧасти = "ОС" Тогда
					
					СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.ОсновноеСредство, ДанныеОбъекта.Дата);
					
				Иначе	
					СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(
					ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
				КонецЕсли;
				
				ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабЧасти, СчетаУчета);
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументСсылка", Основание);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоверенностьТовары.НаименованиеТовара,
		|	ДоверенностьТовары.Количество,
		|	ВЫБОР
		|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
		|				И НЕ ДоверенностьТовары.НаименованиеТовара.Услуга
		|			ТОГДА ДоверенностьТовары.ЕдиницаПоКлассификатору
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК ЕдиницаПоКлассификатору,
		|	ВЫБОР
		|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
		|				И НЕ ДоверенностьТовары.НаименованиеТовара.Услуга
		|			ТОГДА ""Товар""
		|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
		|				И ДоверенностьТовары.НаименованиеТовара.Услуга
		|			ТОГДА ""Услуга""
		|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ""ОС""
		|	КОНЕЦ КАК ВидТовара,
		|	ВЫБОР
		|		КОГДА ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ДоверенностьТовары.НаименованиеТовара.СтавкаНДС
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|	КОНЕЦ КАК СтавкаНДС
		|ИЗ
		|	Документ.Доверенность.Товары КАК ДоверенностьТовары
		|ГДЕ
		|	(ДоверенностьТовары.Ссылка = &ДокументСсылка
		|				И (ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.Номенклатура
		|			ИЛИ ДоверенностьТовары.НаименованиеТовара ССЫЛКА Справочник.ОсновныеСредства))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидТовара = "Товар" И ЗаполнятьТовары Тогда
				СтрокаТабличнойЧасти                  = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура     = Выборка.НаименованиеТовара;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаПоКлассификатору;
				СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
				ИмяТабЧасти = "Товары";
			ИначеЕсли Выборка.ВидТовара = "Услуга" И ЗаполнятьУслуги Тогда
				СтрокаТабличнойЧасти              = Объект.Услуги.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = Выборка.НаименованиеТовара;
				СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
				ИмяТабЧасти = "Услуги";
			ИначеЕсли Выборка.ВидТовара = "ОС" и ЗаполнятьОС Тогда
				СтрокаТабличнойЧасти                  = Объект.ОС.Добавить();
				СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.НаименованиеТовара;
				ИмяТабЧасти = "ОС";
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Выборка.СтавкаНДС;
			КонецЕсли;
			
			Если ИмяТабЧасти = "ОС" Тогда
				
				СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.ОсновноеСредство, ДанныеОбъекта.Дата);
				
			Иначе	
				СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(
				ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Объект.ДокументОснование = Основание.Ссылка;
	
	Объект.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);	
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСправочникуОС(Объект, ЭлементОснование, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если ЭлементОснование.ЭтоГруппа Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя принять к учету группу основных средств.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
	Объект.ВидОперации  = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтрокаТабличнойЧасти                  = Объект.ОС.Добавить();
	СтрокаТабличнойЧасти.ОсновноеСредство = ЭлементОснование.Ссылка;
	ИмяТабЧасти = "ОС";
	
	СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоРеализации(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.ВидОперации,
		|	СобственныеКонтрагентыОрганизация.Организация КАК ОрганизацияДокумента,
		|	ЕСТЬNULL(СобственныеКонтрагентыКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
		|	РеализацияТоваровУслуг.УчитыватьКПН,
		|	РеализацияТоваровУслуг.ВидУчетаНУ,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ОбщиеРеквизиты
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыОрганизация
		|		ПО РеализацияТоваровУслуг.Контрагент = СобственныеКонтрагентыОрганизация.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыКонтрагент
		|		ПО РеализацияТоваровУслуг.Организация = СобственныеКонтрагентыКонтрагент.Организация
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК ДоговорДокумента,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.ТипЦен, ДоговорыКонтрагентов.ТипЦен) КАК ТипЦен
		|ПОМЕСТИТЬ ВТ_ДоговорДокумента
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовОсн
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентовОсн.Ссылка
		|			И (ДоговорыКонтрагентовОсн.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентовОсн.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентовОсн.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента = ДоговорыКонтрагентов.Владелец
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентов.Организация
		|			И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяТаблицы,
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
		|	"""" КАК Содержание,
		|	ЕСТЬNULL(РеализацияТоваровНомераГТД.Количество, РеализацияТоваровУслугТовары.Количество) КАК Количество,
		|	РеализацияТоваровУслугТовары.Коэффициент,
		|	РеализацияТоваровУслугТовары.Цена,
		|	ЕСТЬNULL(РеализацияТоваровНомераГТД.Количество, РеализацияТоваровУслугТовары.Количество) * РеализацияТоваровУслугТовары.Цена КАК Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровНомераГТД.НомерГТД
		|ПОМЕСТИТЬ ВТ_ТабличныеЧасти
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.НомераГТД КАК РеализацияТоваровНомераГТД
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровНомераГТД.Ссылка
		|			И РеализацияТоваровУслугТовары.КлючСвязи = РеализацияТоваровНомераГТД.КлючСвязи
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"",
		|	РеализацияТоваровУслугУслуги.Ссылка,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	NULL,
		|	РеализацияТоваровУслугУслуги.Содержание,
		|	РеализацияТоваровУслугУслуги.Количество,
		|	0,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	NULL
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ВТ_ОбщиеРеквизиты.ВидОперации КАК ВидОперации,
		|	ВТ_ОбщиеРеквизиты.ОрганизацияДокумента КАК ОрганизацияДокумента,
		|	ВТ_ОбщиеРеквизиты.КонтрагентДокумента КАК КонтрагентДокумента,
		|	ВТ_ТабличныеЧасти.ИмяТаблицы КАК ИмяТаблицы,
		|	ВТ_ОбщиеРеквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	ВТ_ОбщиеРеквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	ВТ_ОбщиеРеквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	ВТ_ОбщиеРеквизиты.УчитыватьНДС КАК УчитыватьНДС,
		|	ВТ_ОбщиеРеквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВТ_ДоговорДокумента.ДоговорДокумента КАК ДоговорДокумента,
		|	ВТ_ДоговорДокумента.ТипЦен КАК ТипЦен,
		|	ВТ_ТабличныеЧасти.Номенклатура,
		|	ВТ_ТабличныеЧасти.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТабличныеЧасти.ЕдиницаИзмерения,
		|	ВТ_ТабличныеЧасти.Содержание,
		|	ВТ_ТабличныеЧасти.Количество,
		|	ВТ_ТабличныеЧасти.Коэффициент,
		|	ВТ_ТабличныеЧасти.Цена,
		|	ВТ_ТабличныеЧасти.Сумма,
		|	ВТ_ТабличныеЧасти.СтавкаНДС,
		|	ВТ_ТабличныеЧасти.СуммаНДС,
		|	ВТ_ТабличныеЧасти.Ссылка КАК СсылкаТабЧасти,
		|	ВТ_ТабличныеЧасти.НомерГТД
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорДокумента КАК ВТ_ДоговорДокумента
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ДоговорДокумента.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабличныеЧасти КАК ВТ_ТабличныеЧасти
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ТабличныеЧасти.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТаблицы,
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(ВалютаДокумента),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(УчитыватьКПН),
		|	МАКСИМУМ(ВидУчетаНУ),
		|	МАКСИМУМ(УчитыватьНДС),
		|	МАКСИМУМ(СуммаВключаетНДС),
		|	МАКСИМУМ(ТипЦен),
		|	КОЛИЧЕСТВО(СсылкаТабЧасти)
		|ПО
		|	ВидОперации,
		|	ОрганизацияДокумента,
		|	КонтрагентДокумента,
		|	ДоговорДокумента,
		|	ИмяТаблицы";

	Запрос.УстановитьПараметр("Ссылка", Основание);
		
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТекстСообщения        = "";
	ТекстСозданияДоговора = "";
	
	Пока ВыборкаВидОперации.Следующий() Цикл
		Если ВыборкаВидОперации.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			ТекстСообщения  = НСтр("ru = 'Для ввода на основании вид операции документа-основания должен быть ""Передача структурному подразделению"".'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаВидОперации.СсылкаТабЧасти) Тогда
			ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
			                 + НСтр("ru = '- Табличные части не заполнены, нет информации для ввода на основании.'");
		КонецЕсли;

		ВыборкаОрганизацияДокумента = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизацияДокумента.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрганизацияДокумента.ОрганизацияДокумента) Тогда
				ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
				                 + НСтр("ru = '- Нет организации, соответствующей контрагенту документа-основания.'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстЗаголовкаСообщения = НСтр("ru = 'Обнаружены ошибки в документе-основании:'");
				ВызватьИсключение(ТекстЗаголовкаСообщения + Символы.ПС + ТекстСообщения);
			КонецЕсли;
			
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
			
			Объект.Организация      = ВыборкаОрганизацияДокумента.ОрганизацияДокумента;
			Объект.ВалютаДокумента  = ВыборкаОрганизацияДокумента.ВалютаДокумента;
			Объект.СуммаВключаетНДС = ВыборкаОрганизацияДокумента.СуммаВключаетНДС;
			Объект.УчитыватьНДС     = ВыборкаОрганизацияДокумента.УчитыватьНДС;
			Объект.УчитыватьКПН     = ВыборкаОрганизацияДокумента.УчитыватьКПН;
			Объект.ВидУчетаНУ       = ВыборкаОрганизацияДокумента.ВидУчетаНУ;
			Объект.ВидОперации      = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, ВыбранныйВидОперации);
			Объект.Склад            = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

			ВыборкаКонтрагентДокумента = ВыборкаОрганизацияДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагентДокумента.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагентДокумента.КонтрагентДокумента) Тогда
					ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект");
				Иначе
					Объект.Контрагент              = ВыборкаКонтрагентДокумента.КонтрагентДокумента;
					Объект.КурсВзаиморасчетов      = ВыборкаКонтрагентДокумента.КурсВзаиморасчетов;
					Объект.КратностьВзаиморасчетов = ВыборкаКонтрагентДокумента.КратностьВзаиморасчетов;
				КонецЕсли;
				
				ВыборкаДоговорДокумента = ВыборкаКонтрагентДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДоговорДокумента.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговорДокумента.ДоговорДокумента) Тогда
						Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
							ТекстСозданияДоговора  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСозданияДоговора, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							
							ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
							ДоговорКонтрагентаДокумента.Владелец     = Объект.Контрагент;
							ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Объект.Организация) + ", " + СокрЛП(Объект.ВалютаДокумента) + ")"; 
							ДоговорКонтрагентаДокумента.Организация  = Объект.Организация;
							ДоговорКонтрагентаДокумента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
							ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов  = Объект.ВалютаДокумента;
							ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
							Попытка
								ДоговорКонтрагентаДокумента.Записать();
							Исключение
								Информация = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Новый договор не создан. %1'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							КонецПопытки;
							Объект.ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						КонецЕсли;
					Иначе
						Объект.ДоговорКонтрагента = ВыборкаДоговорДокумента.ДоговорДокумента;
						Если ЗначениеЗаполнено(ВыборкаДоговорДокумента.ТипЦен) Тогда
							Объект.ТипЦен = ВыборкаДоговорДокумента.ТипЦен;
						КонецЕсли;
						
						Объект.УчастникиСовместнойДеятельности.Очистить();
						ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);						
					КонецЕсли;

					ВыборкаИмяТаблицы = ВыборкаДоговорДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИмяТаблицы.Следующий() Цикл
						ИмяТаблицы = ВыборкаИмяТаблицы.ИмяТаблицы;

						Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
							ВыборкаДетальныеЗаписи = ВыборкаИмяТаблицы.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								НоваяСтрока = Объект[ИмяТаблицы].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Объект.ДокументОснование = Основание.Ссылка;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоПередачеОС(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПередачаОС.Ссылка,
		|	ПередачаОС.ВидОперации,
		|	СобственныеКонтрагентыОрганизация.Организация КАК ОрганизацияДокумента,
		|	ЕСТЬNULL(СобственныеКонтрагентыКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДокумента,
		|	ПередачаОС.ВалютаДокумента,
		|	ПередачаОС.КурсВзаиморасчетов,
		|	ПередачаОС.КратностьВзаиморасчетов,
		|	ПередачаОС.УчитыватьКПН,
		|	ПередачаОС.ВидУчетаНУ,
		|	ПередачаОС.УчитыватьНДС,
		|	ПередачаОС.СуммаВключаетНДС
		|ПОМЕСТИТЬ ВТ_ОбщиеРеквизиты
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыОрганизация
		|		ПО ПередачаОС.Контрагент = СобственныеКонтрагентыОрганизация.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыКонтрагент
		|		ПО ПередачаОС.Организация = СобственныеКонтрагентыКонтрагент.Организация
		|ГДЕ
		|	ПередачаОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК ДоговорДокумента,
		|	ЕСТЬNULL(ДоговорыКонтрагентовОсн.ТипЦен, ДоговорыКонтрагентов.ТипЦен) КАК ТипЦен
		|ПОМЕСТИТЬ ВТ_ДоговорДокумента
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовОсн
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентовОсн.Ссылка
		|			И (ДоговорыКонтрагентовОсн.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентовОсн.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентовОсн.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_ОбщиеРеквизиты.КонтрагентДокумента = ДоговорыКонтрагентов.Владелец
		|			И ВТ_ОбщиеРеквизиты.ВалютаДокумента = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|			И ВТ_ОбщиеРеквизиты.ОрганизацияДокумента = ДоговорыКонтрагентов.Организация
		|			И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйДвиженияССубконто.ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|				ТОГДА НалоговыйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНУ,
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйДвиженияССубконто.ВидУчетаКт <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|					И НалоговыйДвиженияССубконто.ВидУчетаКт <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)
		|				ТОГДА НалоговыйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПР,
		|	НалоговыйДвиженияССубконто.СубконтоКт1 КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВТ_СтоимостьОС
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор = &Ссылка
		|				И СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВнеоборотныеАктивы))
		|				И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты)),
		|			,
		|			) КАК НалоговыйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйДвиженияССубконто.СубконтоКт1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяТаблицы,
		|	ПередачаОСОС.Ссылка,
		|	ПередачаОСОС.ОсновноеСредство,
		|	ПередачаОСОС.Сумма,
		|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаНУ, 0) КАК СуммаНУ,
		|	ЕСТЬNULL(ВТ_СтоимостьОС.СуммаПР, 0) КАК СуммаПР,
		|	ПередачаОСОС.СтавкаНДС,
		|	ПередачаОСОС.СуммаНДС
		|ПОМЕСТИТЬ ВТ_ТабличныеЧасти
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьОС КАК ВТ_СтоимостьОС
		|		ПО ПередачаОСОС.ОсновноеСредство = ВТ_СтоимостьОС.ОсновноеСредство
		|ГДЕ
		|	ПередачаОСОС.Ссылка В
		|			(ВЫБРАТЬ
		|				ОбщиеРеквизиты.Ссылка
		|			ИЗ
		|				ВТ_ОбщиеРеквизиты КАК ОбщиеРеквизиты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбщиеРеквизиты.Ссылка,
		|	ВТ_ОбщиеРеквизиты.ВидОперации КАК ВидОперации,
		|	ВТ_ОбщиеРеквизиты.ОрганизацияДокумента КАК ОрганизацияДокумента,
		|	ВТ_ОбщиеРеквизиты.КонтрагентДокумента КАК КонтрагентДокумента,
		|	ВТ_ТабличныеЧасти.ИмяТаблицы КАК ИмяТаблицы,
		|	ВТ_ОбщиеРеквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	ВТ_ОбщиеРеквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВТ_ОбщиеРеквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	ВТ_ОбщиеРеквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	ВТ_ОбщиеРеквизиты.УчитыватьНДС КАК УчитыватьНДС,
		|	ВТ_ОбщиеРеквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВТ_ДоговорДокумента.ДоговорДокумента КАК ДоговорДокумента,
		|	ВТ_ДоговорДокумента.ТипЦен КАК ТипЦен,
		|	ВТ_ТабличныеЧасти.ОсновноеСредство,
		|	ВТ_ТабличныеЧасти.Сумма,
		|	ВТ_ТабличныеЧасти.СуммаНУ,
		|	ВТ_ТабличныеЧасти.СуммаПР,
		|	ВТ_ТабличныеЧасти.СтавкаНДС,
		|	ВТ_ТабличныеЧасти.СуммаНДС,
		|	ВТ_ТабличныеЧасти.Ссылка КАК СсылкаТабЧасти
		|ИЗ
		|	ВТ_ОбщиеРеквизиты КАК ВТ_ОбщиеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорДокумента КАК ВТ_ДоговорДокумента
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ДоговорДокумента.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабличныеЧасти КАК ВТ_ТабличныеЧасти
		|		ПО ВТ_ОбщиеРеквизиты.Ссылка = ВТ_ТабличныеЧасти.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(ВалютаДокумента),
		|	МАКСИМУМ(КурсВзаиморасчетов),
		|	МАКСИМУМ(КратностьВзаиморасчетов),
		|	МАКСИМУМ(УчитыватьКПН),
		|	МАКСИМУМ(ВидУчетаНУ),
		|	МАКСИМУМ(УчитыватьНДС),
		|	МАКСИМУМ(СуммаВключаетНДС),
		|	МАКСИМУМ(ТипЦен),
		|	КОЛИЧЕСТВО(СсылкаТабЧасти)
		|ПО
		|	ВидОперации,
		|	ОрганизацияДокумента,
		|	КонтрагентДокумента,
		|	ДоговорДокумента,
		|	ИмяТаблицы";

	Запрос.УстановитьПараметр("Ссылка", Основание);
		
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТекстСообщения        = "";
	ТекстСозданияДоговора = "";
	
	Пока ВыборкаВидОперации.Следующий() Цикл
		Если ВыборкаВидОперации.ВидОперации <> Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
			ТекстСообщения  = НСтр("ru = 'Для ввода на основании вид операции должен быть ""Передача структурному подразделению"".'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаВидОперации.СсылкаТабЧасти) Тогда
			ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
							 + НСтр("ru = '- Табличная часть не заполнена, нет информации для ввода на основании.'");
		КонецЕсли;

		ВыборкаОрганизацияДокумента = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизацияДокумента.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрганизацияДокумента.ОрганизацияДокумента) Тогда
				ТекстСообщения = ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "", ТекстСообщения + Символы.ПС)
								 + НСтр("ru = '- Нет организации, соответствующей контрагенту документа-основания.'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстЗаголовкаСообщения = НСтр("ru = 'Обнаружены ошибки в документе-основании:'");
				ВызватьИсключение(ТекстЗаголовкаСообщения + Символы.ПС + ТекстСообщения);
			КонецЕсли;
			
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
			
			Объект.Организация      = ВыборкаОрганизацияДокумента.ОрганизацияДокумента;
			Объект.ВалютаДокумента  = ВыборкаОрганизацияДокумента.ВалютаДокумента;
			Объект.СуммаВключаетНДС = ВыборкаОрганизацияДокумента.СуммаВключаетНДС;
			Объект.УчитыватьНДС     = ВыборкаОрганизацияДокумента.УчитыватьНДС;
			Объект.УчитыватьКПН     = ВыборкаОрганизацияДокумента.УчитыватьКПН;
			Объект.ВидОперации      = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, ВыбранныйВидОперации);
			Объект.ВидУчетаНУ       = ВыборкаОрганизацияДокумента.ВидУчетаНУ;
			Объект.Склад            = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

			ВыборкаКонтрагентДокумента = ВыборкаОрганизацияДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагентДокумента.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагентДокумента.КонтрагентДокумента) Тогда
					ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект");
				Иначе
					Объект.Контрагент              = ВыборкаКонтрагентДокумента.КонтрагентДокумента;
					Объект.КурсВзаиморасчетов      = ВыборкаКонтрагентДокумента.КурсВзаиморасчетов;
					Объект.КратностьВзаиморасчетов = ВыборкаКонтрагентДокумента.КратностьВзаиморасчетов;
				КонецЕсли;
				
				ВыборкаДоговорДокумента = ВыборкаКонтрагентДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДоговорДокумента.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговорДокумента.ДоговорДокумента) Тогда
						Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
							ТекстСозданияДоговора  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСозданияДоговора, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							
							ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
							ДоговорКонтрагентаДокумента.Владелец     = Объект.Контрагент;
							ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Объект.Организация) + ", " + СокрЛП(Объект.ВалютаДокумента) + ")"; 
							ДоговорКонтрагентаДокумента.Организация  = Объект.Организация;
							ДоговорКонтрагентаДокумента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
							ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов  = Объект.ВалютаДокумента;
							ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
							Попытка
								ДоговорКонтрагентаДокумента.Записать();
							Исключение
								Информация = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Новый договор не создан. %1'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДоговорКонтрагента", "Объект");
							КонецПопытки;
							Объект.ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						КонецЕсли;
					Иначе
						Объект.ДоговорКонтрагента = ВыборкаДоговорДокумента.ДоговорДокумента;
						Если ЗначениеЗаполнено(ВыборкаДоговорДокумента.ТипЦен) Тогда
							Объект.ТипЦен = ВыборкаДоговорДокумента.ТипЦен;
						КонецЕсли;
						
						Объект.УчастникиСовместнойДеятельности.Очистить();
						ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
						
					КонецЕсли;

					ВыборкаИмяТаблицы = ВыборкаДоговорДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИмяТаблицы.Следующий() Цикл
						ИмяТаблицы = ВыборкаИмяТаблицы.ИмяТаблицы;

						Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
							ВыборкаДетальныеЗаписи = ВыборкаИмяТаблицы.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								НоваяСтрока = Объект[ИмяТаблицы].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Объект.ДокументОснование = Основание.Ссылка;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСчетФактураПолученный(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	ЗаполнятьТовары = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьУслуги = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	ЗаполнятьОС = (Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги 
						И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	
	Если Основание.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  
	
	Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ВидОперации = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();

	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание.Ссылка,,ЗаполнятьТовары,ЗаполнятьУслуги,ЗаполнятьОС);
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
		УчестьСуммуНДС = Истина;
	Иначе
		УчестьСуммуНДС = Ложь;
	КонецЕсли;
		
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДокументОснование = Основание;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОплатаОтПокупателяПлатежнойКартой(Объект, Основание, ВыбранныйВидОперации = Неопределено) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ВидОперации = ?(ВыбранныйВидОперации = Неопределено, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, ВыбранныйВидОперации);	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Основание);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Эквайрер,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетовПоДоговору,
	|	ОплатаОтПокупателяПлатежнойКартой.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОплатаОтПокупателяПлатежнойКартой.СуммаТорговойУступки
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка = &ДокументСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Контрагент = Выборка.Эквайрер;
		Объект.ДоговорКонтрагента = Выборка.ДоговорВзаиморасчетовЭквайрера;
	
		ВалютаРеглУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(Выборка.ДоговорВзаиморасчетовЭквайрера, ВалютаРеглУчета);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Объект.Дата);
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		Если Выборка.ВедениеВзаиморасчетовПоДоговору = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Объект.Сделка = Основание;
		КонецЕсли;
		
		СтрокаТабличнойЧасти            = Объект.Услуги.Добавить();
		СтрокаТабличнойЧасти.Цена       = Основание.СуммаТорговойУступки;
		СтрокаТабличнойЧасти.Сумма      = Основание.СуммаТорговойУступки;
		СтрокаТабличнойЧасти.Количество = 1;	
		СтрокаТабличнойЧасти.СтавкаНДС  = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		
		Структура = Новый Структура("ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС, НДСВключенВСтоимость");
		ЗаполнитьЗначенияСвойств(Структура, Объект);
		
		СтруктураСтрокиТабЧасти = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
			|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
			|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
			|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, Всего,
			|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
			|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
			|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
			|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТабЧасти, СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтруктураСтрокиТабЧасти, Структура);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтруктураСтрокиТабЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтрокиТабЧасти);
		
		Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
		
		Объект.ДокументОснование = Основание;
		
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ОпределятьСтоимостьПриобретенияПоКурсуАванса    = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);

	ВедетсяАналитУчетОсПоМОЛ 						= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период); 
	ВедетсяАналитУчетОсПоПодразделениям 			= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОпределятьСтоимостьПриобретенияПоКурсуАванса  , "ОпределятьСтоимостьПриобретенияПоКурсуАванса");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоПодразделениям  		  , "ВедетсяАналитУчетОсПоПодразделениям");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедетсяАналитУчетОсПоМОЛ					  , "ВедетсяАналитУчетОсПоМОЛ");
		
	Налогоплательщик = Реквизиты.Организация;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПроверкиСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимУслуги",	      НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("СинонимОС",	      	  НСтр("ru = 'ОС'"));
	Запрос.УстановитьПараметр("СодержаниеТовары",     НСтр("ru='Оприходованы ТМЗ'"));
	Запрос.УстановитьПараметр("СодержаниеОС",     	  НСтр("ru='Поступление ОС'"));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС", НСтр("ru='Выделен НДС'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ОпределятьСтоимостьПриобретенияПоКурсуАванса", ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаТовары",                   ПараметрыПроведения.ТаблицаТовары);
	СтруктураТаблицДокумента.Вставить("ТаблицаУслуги",                   ПараметрыПроведения.ТаблицаУслуги);
	СтруктураТаблицДокумента.Вставить("ТаблицаОС",                 	     ПараметрыПроведения.ТаблицаОС);
	
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьОС,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоступлениеВПереработку,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	ЛОЖЬ КАК ВедетсяАналитУчетОсПоМОЛ,
	|	Реквизиты.СобытиеОС,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедетсяАналитУчетОсПоПодразделениям КАК ВедетсяАналитУчетОсПоПодразделениям,
	|	Реквизиты.ВедетсяАналитУчетОсПоМОЛ КАК ВедетсяАналитУчетОсПоМОЛ,
	|	Реквизиты.СобытиеОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОС, ЛОЖЬ) КАК ЕстьОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.НомерГТД  КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Содержание,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	1 КАК Количество,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаОС.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.ПоступлениеВПереработку
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаОС.СуммаНДС
		|	КОНЕЦ КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СуммаПР,
		|	ТаблицаОС.СуммаНУ,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаОС.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
		
		
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		СуммыТаблицыОС = Результат[НомераТаблиц["СуммыТаблицыОС"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыОС, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыОС", СуммыТаблицыОС);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаОС", "ПОМЕСТИТЬ ВременнаяТаблицаОС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.Ссылка = &Ссылка", "ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыОС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки,
		|	ВременнаяТаблицаОС.СтавкаНДС,
		|	ВременнаяТаблицаОС.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаОС.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаОС.Сумма,
		|	ВременнаяТаблицаОС.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыОС.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыОС
	|ИЗ
	|	&СуммыТаблицыОС КАК СуммыТаблицыОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОС.Ссылка,
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.ОсновноеСредство,
	|	ВременнаяТаблицаОС.Количество,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма КАК Сумма,
	|	ВременнаяТаблицаОС.СуммаПР,
	|	ВременнаяТаблицаОС.СуммаНУ,
	|	СуммыТаблицыОС.СуммаНДС,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаБУ,
	|	ВременнаяТаблицаОС.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаОС.СчетУчетаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаНУ,
	|	ВременнаяТаблицаОС.НДСВидОборота,
	|	ВременнаяТаблицаОС.НДСВидПоступления,
	|	ВременнаяТаблицаОС.ПодразделениеОрганизации,
	|	ВременнаяТаблицаОС.МОЛОрганизации
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыОС КАК СуммыТаблицыОС
	|		ПО ВременнаяТаблицаОС.НомерСтроки = СуммыТаблицыОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма КАК Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.НДСВидОборота,
	|	ВременнаяТаблицаТовары.НДСВидПоступления,
	|	ВременнаяТаблицаТовары.НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Содержание,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма КАК Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.СчетЗатратБУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаУслуги.СчетЗатратНУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ3,
	|	ВременнаяТаблицаУслуги.НДСВидОборота,
	|	ВременнаяТаблицаУслуги.НДСВидПоступления
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС"
	+ ?(Реквизиты.ЕстьТовары, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаТовары.СуммаНДСВзаиморасчетов,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары", "")
	+ ?(Реквизиты.ЕстьОС, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаОС.СуммаНДСВзаиморасчетов,
	|		ТаблицаОС.Сумма КАК Сумма,
	|		ТаблицаОС.СуммаНДС
	|	ИЗ
	|		ТаблицаОС КАК ТаблицаОС", "")
	+ ?(Реквизиты.ЕстьУслуги, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуги.СуммаВзаиморасчетов,
	|		ТаблицаУслуги.СуммаНДСВзаиморасчетов,
	|		ТаблицаУслуги.Сумма,
	|		ТаблицаУслуги.СуммаНДС
	|	ИЗ
	|		ТаблицаУслуги КАК ТаблицаУслуги", "") + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.Сумма + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДС
	|	КОНЕЦ КАК СуммаРегл,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	&СодержаниеТовары КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОС", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.Количество КАК Количество,
		|	ТаблицаОС.Сумма КАК Сумма,
		|	ТаблицаОС.СуммаПР КАК СуммаПР,
		|	ТаблицаОС.СуммаНУ КАК СуммаНУ,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаОС.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	&СодержаниеОС КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаОС.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Если НЕ Реквизиты.ЕстьУслуги
		ИЛИ (Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			 И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента) Тогда 
		ПараметрыПроведения.Вставить("ТаблицаУслуги", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры) КАК ВидКорСубконто2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления,
		|	ТаблицаУслуги.Содержание КАК Содержание
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента
		ИЛИ НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииПоступления,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ТоварыОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаОС.НДСВидОборота КАК ВидОборота,
		|	ТаблицаОС.НДСВидПоступления КАК ВидОперацииПоступления,
		|    Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаОС.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаУслуги.НДСВидОборота КАК ВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления КАК ВидОперацииПоступления,
		|   Значение(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСобытияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОССобытияОСОрганизаций", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""ТаблицаОССобытияОСОрганизаций"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство,
		|	0 КАК СуммаЗатратБУ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаОССобытияОСОрганизаций", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОССостоянияОСОрганизаций", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""СостоянияОСОрганизацийТаблицаОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Дата КАК ДатаСостояния,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ТаблицаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило) КАК СостояниеОС
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаОССостоянияОСОрганизаций", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПроверкиСостоянияОСОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ТаблицаОСДляПроверки"  , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("РеквизитыДляПроверкиОС", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""ТаблицаОСДляПроверки"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""РеквизитыДляПроверкиОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило) КАК Состояние
		|ИЗ
		|	Реквизиты КАК Реквизиты" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		
		ПараметрыПроведения.Вставить("ТаблицаОСДляПроверки"	 , Неопределено);
		ПараметрыПроведения.Вставить("РеквизитыДляПроверкиОС", Неопределено);
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары
		И НЕ (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
		  ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) Тогда
			  
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Реквизиты.Склад КАК Склад
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|ГДЕ НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый       
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);   
		
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции
	

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// З-1 (приходный ордер запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'З-1 (приходный ордер запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать приходной накладной
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходнаяНакладная") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ПриходнаяНакладная",
	//		НСтр("ru = 'Приходная накладная'"),
	//		ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати),
	//		,
	//		"Документ.ПоступлениеТоваровУслуг.ПФ_MXL_Накладная");
	//КонецЕсли;

	// Печать формы З-1
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяЗ1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяЗ1",
			НСтр("ru = 'З-1 (приходный ордер запасов)'"),
			ПечатьЗ1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_З1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодОС = Ложь;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС			= Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Склад
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.Номер,
	|	ВТ_Доки.Дата,
	|	ВТ_Доки.Основание,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента,
	|	ВТ_Доки.ВалютаДокумента,
	|	ВТ_Доки.УчитыватьНДС,
	|	ВТ_Доки.СуммаВключаетНДС,
	|	ВТ_Доки.Склад,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.КоличествоПоДокументу,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.КодАртикул КАК КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаНаименование,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	|		Товары.Цена КАК Цена,
	|		СУММА(Товары.Сумма) КАК Сумма,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	|		СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В(&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Ссылка,
	|		Товары.Цена,
	|		Товары.Номенклатура,
	|		Товары.Номенклатура."+ ТекстКодАртикул + ",
	|		Товары.ЕдиницаИзмерения.Представление) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Ссылка,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	ВЫРАЗИТЬ(Услуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	Услуги.Номенклатура."+ ТекстКодАртикул + ",
	|	""ед."",
	|	Услуги.СуммаНДС,
	|	Услуги.НомерСтроки,
	|	1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОС.Ссылка,
	|	1,
	|	ОС.Сумма,
	|	ОС.Сумма,
	|	ВЫРАЗИТЬ(ОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
	|	" + ?(КодОС,"ОС.ОсновноеСредство.Код", """""") + ",
	|	""ед."",
	|	ОС.СуммаНДС,
	|	ОС.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Метка,
	|	ВложенныйЗапрос.НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет       = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровУслуг.ПФ_MXL_Накладная");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеТоваровУслуг_Накладная";
	
	ЗаголовокШапка = Макет.ПолучитьОбласть("Заголовок");
	Поставщик      = Макет.ПолучитьОбласть("Поставщик");
	Покупатель     = Макет.ПолучитьОбласть("Покупатель");
	Основание      = Макет.ПолучитьОбласть("Основание");
	Склад 		   = Макет.ПолучитьОбласть("Склад");
	Итого          = Макет.ПолучитьОбласть("Итого");
	ИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ИтогоСНДС      = Макет.ПолучитьОбласть("ИтогоСНДС");
	СуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	Подписи        = Макет.ПолучитьОбласть("Подписи");
	ШапкаТаблицы   = Макет.ПолучитьОбласть(ОбластьШапки);
	Строка         = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
	
		// Выводим шапку накладной

		ЗаголовокШапка.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, "Приходная накладная");
		ТабДокумент.Вывести(ЗаголовокШапка);

		Поставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,"));
		Поставщик.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(Поставщик);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		Покупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"));
		Покупатель.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(Покупатель);
		
		Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
			Основание.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(Основание);
		КонецЕсли;

		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			Склад.Параметры.ПредставлениеСклада = Шапка.Склад;
			ТабДокумент.Вывести(Склад);
		КонецЕсли;
	
		// Вывести табличную часть
		Если ВыводитьКоды Тогда
			ШапкаТаблицы.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(ШапкаТаблицы);

		Сумма    = 0;
		СуммаНДС = 0;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Строка.Параметры.Заполнить(ВыборкаСтрокТовары);
				Строка.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
				Если ВыводитьКоды Тогда
					Строка.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;   
				ТабДокумент.Вывести(Строка);
				
				Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		Итого.Параметры.ИтогСумма = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(Итого);

		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ИтогоНДС.Параметры.ИтогСуммаНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ИтогоНДС.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
			ТабДокумент.Вывести(ИтогоНДС);
			
			Если НЕ Шапка.СуммаВключаетНДС ТОгда
				ИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
				ТабДокумент.Вывести(ИтогоСНДС);
			КонецЕсли;
			
		КонецЕсли;

		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %1, на сумму %2'");
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИтоговаяСтрока, ?(ВыборкаСтрокТовары = Неопределено, 0, ВыборкаСтрокТовары.Количество()), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
		СуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		СуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(СуммаПрописью);

		// Вывести подписи
		Подписи.Параметры.Заполнить(Шапка);
	
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.Дата);
			Подписи.Параметры.Получил = ДанныеМОЛ.Представление;
		КонецЕсли;	
	
		ТабДокумент.Вывести(Подписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.СтруктурноеПодразделение,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.КТ_ПоступлениеТМЦ_Забаланс КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.НомерДокумента,
	|	ВТ_Доки.ДатаДокумента,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента,
	|	ВТ_Доки.Склад,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ,
	|	ВТ_Доки.НомерСопроводительногоДокумента
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
			  
	Шапка = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	Товары.Ссылка КАК Ссылка,
	                        |	СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	                        |	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	                        |	Товары.Номенклатура.Код КАК ТоварКод,
	                        |	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаКод,
	                        |	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	Товары.НомерСтроки КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.КТ_ПоступлениеТМЦ_Забаланс.Товары КАК Товары
	                        |ГДЕ
	                        |	Товары.Ссылка В(&МассивОбъектов)
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	Товары.Ссылка,
	                        |	Товары.Номенклатура.Наименование,
	                        |	Товары.Номенклатура.Код,
	                        |	Товары.ЕдиницаИзмерения.Код,
	                        |	Товары.ЕдиницаИзмерения.Представление,
	                        |	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	                        |	Товары.НомерСтроки
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки,
	                        |	ТоварНаименование
	                        |ИТОГИ
	                        |	СУММА(КоличествоПоДокументу)
	                        |ПО
	                        |	Ссылка
	                        |АВТОУПОРЯДОЧИВАНИЕ";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З1");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеТоваровУслуг_З1";
	
	ЗаголовокШапка     = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы      = Макет.ПолучитьОбласть("Строка");
	Итого 			   = Макет.ПолучитьОбласть("Итого");
	Подвал             = Макет.ПолучитьОбласть("Подвал");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);

		// Выводим шапку накладной
		ЗаголовокШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ЗаголовокШапка.Параметры.ПредставлениеСклада      = Шапка.Склад.Наименование;
		ЗаголовокШапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
		ТабДокумент.Вывести(ЗаголовокШапка);

		ЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ЗаголовокДокумента.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента), "ПолноеНаименование,");
		ЗаголовокДокумента.Параметры.НомерДокумента          = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Шапка.Ссылка);
		ТабДокумент.Вывести(ЗаголовокДокумента);
	
		//ЗаголовокТаблицы.Параметры.ВалютаПредставление = Шапка.ВалютаПредставление;
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		Количество    = 0;
		Сумма    	  = 0;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
				ТабДокумент.Вывести(СтрокаТаблицы);

				//Сумма      = Сумма      + ВыборкаСтрокТовары.ВсегоСНДС;
				//Количество = Количество + ВыборкаСтрокТовары.КоличествоПоДокументу;

			КонецЦикла;
			
		КонецЕсли;

		// Вывести Итого
		//Итого.Параметры.ИтогВсегоСНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		
		Итого.Параметры.ИтогКоличествоПоДокументу = Количество;
		ТабДокумент.Вывести(Итого);
	
		// Вывести подвал
		// заполняем МОЛ
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			
			ДанныеМОЛ            = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
			Подвал.Параметры.МОЛ = ДанныеМОЛ.Представление;
			
		КонецЕсли;	
		ТабДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.СтруктурноеПодразделение КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ответственный КАК Контакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПечатьШтрихкодовОС

Функция ДанныеДляПечатиШтрихкодовОС(МассивДокументов) Экспорт
	
	СтруктураДанных = ПодключаемоеОборудованиеБКВызовСервера.ПолучитьДанныеДляПечатиОС("ПоступлениеТоваровУслуг", МассивДокументов);
	
	Если СтруктураДанных.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для печати. Не заполнена табличная часть ""ОС""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе	
		Возврат ПоместитьВоВременноеХранилище(СтруктураДанных);
	КонецЕсли;	
	
КонецФункции	


#КонецОбласти

// Возвращает список доступных видов операций, в зависимости от настроек информационной базы
//
Функция ДоступныеВидыОпераций() Экспорт
	
	ДоступныеОперации   = Новый Массив;
	ИсключаемыеОперации = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда 
		ИсключаемыеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения);
	КонецЕсли;
	
	Для Каждого ВидОперации Из Перечисления.ВидыОперацийПоступлениеТоваровУслуг Цикл
		Если ИсключаемыеОперации.Найти(ВидОперации) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ДоступныеОперации.Добавить(ВидОперации);
	КонецЦикла;
	
	Возврат ДоступныеОперации;
	
КонецФункции

			   
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, ИмяРеквизитаСуммаНДС = "СуммаНДС", РассчитыватьСуммуЗачета = Ложь) Экспорт

	// Если в документе нет флагов учета НДС, то используем значения по умолчанию
	//УчитыватьНДС = Истина;
	//СуммаВключаетНДС = Ложь;
	ЕстьОборотПоРеализации = Ложь;//СтрокаТабличнойЧасти.Свойство("ОборотПоРеализации");
	//ЕстьВалюта = ПараметрыОбъекта.Свойство("ВалютаДокумента");
	
	ВалютаРеглУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// если процедура вызвана из ОбработкаЗаполненияТабличныхЧастейТовары, то проверим наличие параметра "ЗначениеОборотПоРеализации"
	//Если ПараметрыОбъекта.Свойство("ЗначениеОборотПоРеализации") Тогда
	//	ЕстьОборотПоРеализации = ПараметрыОбъекта.ЗначениеОборотПоРеализации;
	//Иначе
	//	Если ЕстьВалюта И ВалютаРеглУчета <> ПараметрыОбъекта.ВалютаДокумента И ПараметрыОбъекта.Дата < Дата(2014, 07, 01) Тогда
	//		// В валютных счетах-фактурах до 01.07.2014 расчет НДС выполняется от суммы, так как оборот по реализации указывается в тенге.
	//		// В валютных счетах-фактурах начиная с 01.07.2014 расчет НДС выполняется от оборота по реализации, так как оборот по реализации указывается в валюте.			
	//		ЕстьОборотПоРеализации = Ложь;
	//	КонецЕсли;	
	//КонецЕсли;
	
	
	//Если ПараметрыОбъекта.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = Объект.УчитыватьНДС;
//	КонецЕсли;

	//Если ПараметрыОбъекта.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	//КонецЕсли;
	

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		Если ЕстьОборотПоРеализации Тогда 
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС] = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ОборотПоРеализации,
														   УчитыватьНДС, 
														   Ложь,
														   УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
														   ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаАкциза), СтрокаТабличнойЧасти.СуммаАкциза, 0),
														   Истина);	
														   
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сумма) Тогда
		
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС] = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
														   УчитыватьНДС, 
														   СуммаВключаетНДС,
														   УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
														    0,
														   Ложь);
														   
		КонецЕсли;													   
	КонецЕсли;

	// если в документе есть реквизиты УплаченныйНДС и СуммаНДС, то сумма НДС к зачету определяется
	// исходя из признака включения НДС в стоимость
	Если РассчитыватьСуммуЗачета Тогда
		
		НДСВключенВСтоимость = ?(Объект.НДСВключенВСтоимость, Объект.НДСВключенВСтоимость, Ложь);	
		
		Если НДСВключенВСтоимость Тогда
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС];
		КонецЕсли
		
	КонецЕсли;   	

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Функция ПолучитьКоличествоСтрокПоСпецификации(Основание)
	Возврат Основание.ДоговорКонтрагента.РасшифровкаСпецификацииКДоговору.Количество();
КонецФункции

#КонецЕсли


