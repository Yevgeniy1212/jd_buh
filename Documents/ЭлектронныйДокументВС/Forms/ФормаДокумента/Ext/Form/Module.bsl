#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВССерверПереопределяемый.ПриСозданииНаСервере(ЭтаФорма);

	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьТаблицуОшибок(Объект.Ошибки);
		Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка = Истина;
		Если Параметры.ЗначенияЗаполнения.Количество() <> 0 
			И Не ЗначениеЗаполнено(Объект.ДокументОснование)
			И Параметры.ПараметрыВыбора.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Нет данных для формирования документа ЭДВС!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ТоварыГруппаКрепостьПинКод.Видимость = Истина;
	Элементы.ТоварыВСГруппаКрепостьПинКод.Видимость = Истина;
	Элементы.ИсходныеТоварыГруппаКрепостьПинКод.Видимость = Истина;
	Элементы.ИсходныеТоварыВСГруппаКрепостьПинКод.Видимость = Истина;
		
	УправлениеФормой();
	
	ЗаполнитьПолныйНомерДокумента(Объект, ПолныйНомерУчетногоДокумента);
	КоличествоСтрокТаблицы();
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(Строка(Объект.ТипФормы), Объект.Ссылка, ЭтаФорма);
	
	//скрыта команда создания ЭДВС
   ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйДокументВССоздатьЭлектронныйДокументВС", "Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьТаблицуОшибок(ТекущийОбъект.Ошибки);
	УправлениеФормой();	
			
	ВССерверПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(Строка(Объект.ТипФормы), Объект.Ссылка, ЭтаФорма); 
	//УстановитьПараметрыВыбораСкладаДляЭДВСГТДПоИмпорту();

	КоличествоСтрокТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС()
		ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСторно() Тогда
		
		Если Параметры.Ключ.Пустая() Тогда
			УправлениеФормой();	
		Иначе
			ЭтаФорма.Прочитать();	
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭСФКлиент.ОповеститьФормы(ВСКлиентСервер.ИмяСобытияЗаписьЭДВС());
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(Строка(Объект.ТипФормы), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияИсходныеТовары(Команда)
	
	Если Объект.ИсходныеТовары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ИсходныеТовары");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"ИсходныеТовары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияИсходныеТоварыВС(Команда)
	
	Если Объект.ИсходныеТоварыВС.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ИсходныеТоварыВС");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"ИсходныеТоварыВС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияТовары(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Товары");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияТоварыВС(Команда)
	
	Если Объект.ТоварыВС.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТоварыВС");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"ТоварыВС");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", Ложь);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборИсточниковПроисхождения.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыВС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТоварыВС", Истина, Истина);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборИсточниковПроисхождения.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПодборИсходныеТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ИсходныеТовары", Ложь);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборИсточниковПроисхождения.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсходныеТоварыВС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ИсходныеТоварыВС", Истина, Истина);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборИсточниковПроисхождения.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЦеныТовары(Команда)
		
	ЗаполнитьЦены("Товары");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныТоварыВС(Команда)
		
	ЗаполнитьЦены("ТоварыВС");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныИсходныеТовары(Команда)
		
	ЗаполнитьЦены("ИсходныеТовары");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныИсходныеТоварыВС(Команда)
		
	ЗаполнитьЦены("ИсходныеТоварыВС");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныТоварыПоСебестоимости(Команда)
		
	ЗаполнитьЦеныПоСебестоимости("Товары");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныТоварыВСПоСебестоимости(Команда)
		
	ЗаполнитьЦеныПоСебестоимости("ТоварыВС");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныИсходныеТоварыПоСебестоимости(Команда)
		
	ЗаполнитьЦеныПоСебестоимости("ИсходныеТовары");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныИсходныеТоварыВСПоСебестоимости(Команда)
		
	ЗаполнитьЦеныПоСебестоимости("ИсходныеТоварыВС");
		
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ЗаполнениеКорректное = ПроверитьЗаполнение();
	
	Если ЗаполнениеКорректное Тогда
		Сообщить(НСтр("ru = 'Ошибок заполнения не обнаружено.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССостояниями

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭДВС.Сформирован") Или 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СостоянияЭДВС.ОтклоненСервером") )
		И Не Объект.КорректировкаИП Тогда
				
		Если ИспользоватьОбменЭСФЧерезAPI() Тогда
			
			ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
			ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, НСтр("ru = 'Отправить в модуль ""ВС"" ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ВыгрузитьДокументВXMLЗаписьФормы = Новый ОписаниеОповещения("ВыгрузитьДокументВXMLЗаписьФормы", ЭтаФорма);
			ПоказатьВопрос(ВыгрузитьДокументВXMLЗаписьФормы, НСтр("ru = 'Выгрузить документ в XML файл?'"), РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭДВС.ОбрабатываетсяСервером") Тогда	
		
		ПолучитьРезультатИСЭСФЗаписьФормы = Новый ОписаниеОповещения("ПолучитьРезультатИСЭСФЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ПолучитьРезультатИСЭСФЗаписьФормы, НСтр("ru = 'Получить результат обработки ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭДВС.ОжидаетИдентификацииТоваровНаВС") И ИспользоватьОбменЭСФЧерезAPI() Тогда	
		
		ПолучитьРезультатИСЭСФЗаписьФормы = Новый ОписаниеОповещения("ПолучитьИдентификаторыТоваровЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ПолучитьРезультатИСЭСФЗаписьФормы, НСтр("ru = 'Получить идентификаторы товаров виртуального склада из ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьНаСерверЗавершение = Новый ОписаниеОповещения("ОтправитьНаСерверЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьНаСерверЗавершение, , "Записать");
		Иначе
			ОтправитьНаСерверЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСерверЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭДВС = Новый Массив;
			МассивЭДВС.Добавить(Объект.Ссылка);
			ВСКлиент.ОтправитьИсходящиеЭДВС(МассивЭДВС, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументВXMLЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ВыгрузитьДокументВXMLЗавершение = Новый ОписаниеОповещения("ВыгрузитьДокументВXMLЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ВыгрузитьДокументВXMLЗавершение);
		Иначе
			ВыгрузитьДокументВXMLЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументВXMLЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭДВС = Новый Массив;
			МассивЭДВС.Добавить(Объект.Ссылка);
			ВСКлиент.ВыгрузитьИсходящиеЭДВС(МассивЭДВС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатИСЭСФЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ПолучитьРезультатИСЭСФЗавершение = Новый ОписаниеОповещения("ПолучитьРезультатИСЭСФЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ПолучитьРезультатИСЭСФЗавершение);
		Иначе
			ПолучитьРезультатИСЭСФЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатИСЭСФЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭДВС = Новый Массив;
			МассивЭДВС.Добавить(Объект.Ссылка);
			ВСКлиент.ОбновитьСтатусыЭДВСПоИдентификаторам(МассивЭДВС, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыТоваровЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ПолучитьРезультатИСЭСФЗавершение = Новый ОписаниеОповещения("ПолучитьИдентификаторыТоваровЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ПолучитьРезультатИСЭСФЗавершение);
		Иначе
			ПолучитьИдентификаторыТоваровЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭДВС = Новый Массив;
			МассивЭДВС.Добавить(Объект.Ссылка);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
			ВСКлиент.ПолучитьИдентификаторыТоваровУТТНИзВС(МассивЭДВС, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВСКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ВидДетализацииПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ТипФормыПриИзменении(Элемент)	
	
	ТипФормыПриИзмененииНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ТипФормыПриИзмененииНаСервере()
	
	Если Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.КорректировкаДанных Тогда
		//очистим ТЧ
		Объект.Товары.Очистить();
		Объект.ИсходныеТовары.Очистить();
		Объект.ИсходныеТоварыВС.Очистить();
	КонецЕсли;
	
	Если Объект.ТипФормы = Перечисления.ТипыФормВС.КорректировкаДанных Тогда
		Если Перечисления.ВидыКорректировкиДанных.Количество() = 1 Тогда
			Объект.ВидКорректировкиДанных = Перечисления.ВидыКорректировкиДанных.Получить(0);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКорректировкиДанныхПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой() Экспорт
	
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
	
	УстановитьВидимостьКорректируемыйДокументЭДВС();
	
	Элементы.Ошибки.Видимость = ?(Объект.Ошибки.Количество() = 0, Ложь, Истина);
	
	НастроитьТипФормыПоУмолчанию(ЭтаФорма);
	Если Объект.ТипФормы <> ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПустаяСсылка") Тогда
		НастроитьТипФормы(ЭтаФорма,Объект.ТипФормы, Объект.ВидДетализации);
	КонецЕсли;
	
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	УстановитьДоступностьРеквизитов();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ВССерверПереопределяемый.ПолучитьПараметрРаботыСоСтруктурнымиПодразделениями();
	ВССерверПереопределяемый.УстановитьСвойстваЭлементаСтруктурноеПодразделение(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация,
		Элементы.СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	ВССерверПереопределяемый.УстановитьСвойстваЭлементаСтруктурноеПодразделение(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация,
		Элементы.СтруктурноеПодразделениеОрганизация1, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	ВССерверПереопределяемый.УстановитьСвойстваЭлементаСтруктурноеПодразделение(Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель,
		Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Элементы.Организация.Видимость = Не ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизация.Видимость = ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	Элементы.Отправитель.Видимость = Не ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизация1.Видимость = ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	Элементы.Получатель.Видимость = Не ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость = ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	//установим видимость команды ИП в зависимости от типа формы
	
	ВидимостьКомандыЗаполненияИП =  НЕ (Объект.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.Производство
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.Остатки
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.КорректировкаОстатков
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта
				ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.КорректировкаДанных);
				
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИсточникиПроисхожденияТовары"	, "Видимость", ВидимостьКомандыЗаполненияИП);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИсточникиПроисхожденияТоварыВС"	, "Видимость", ВидимостьКомандыЗаполненияИП);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхождения", "ТолькоПросмотр", (НЕ ВидимостьКомандыЗаполненияИП ИЛИ (Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация)) И НЕ Объект.КорректировкаИП И Объект.ТипФормы <> Перечисления.ТипыФормВС.КорректировкаДанных);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникПроисхождения", "ТолькоПросмотр", (НЕ ВидимостьКомандыЗаполненияИП ИЛИ (Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация)) И НЕ Объект.КорректировкаИП);	
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПризнакиПроисхожденияТовары"  , "Видимость", Объект.ТипФормы = Перечисления.ТипыФормВС.Остатки Или Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПризнакиПроисхожденияТоварыВС", "Видимость", Объект.ТипФормы = Перечисления.ТипыФормВС.Остатки Или Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСЗаполнитьПризнакиЭкспортируемостиТоварыВС", "Видимость", Объект.ТипФормы = Перечисления.ТипыФормВС.Остатки Или Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСЗаполнитьПоИсходнымТоварам", "Видимость", Объект.ТипФормы=Перечисления.ТипыФормВС.ФизическаяМетка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВСЗаполнитьТоварыБезФизМетки", "Видимость", Объект.ТипФормы=Перечисления.ТипыФормВС.ФизическаяМетка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВСПеренестиИзИсходныеТоварыВС", "Видимость", (Объект.ТипФормы <> Перечисления.ТипыФормВС.ФизическаяМетка ИЛИ Объект.ТипФормы <> Перечисления.ТипыФормВС.ДетализацияИмпорта));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСПеренестиИзТоварыВС", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.ФизическаяМетка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкопироватьСтрокуИсходныхТоваров", "Видимость", Объект.ВидДетализации = Перечисления.ВидДетализации.РедактированиеДанных ИЛИ Объект.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьСуммуПоСтрокамТоварыВС", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.ДетализацияИмпорта);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьСуммуПоСтрокамТовары", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.КорректировкаДанных И Объект.ВидКорректировкиДанных <> Перечисления.ВидыКорректировкиДанных.РучнаяКорректировка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВСПеренестиИзИсходныеТоварыВС", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.ДетализацияИмпорта);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСПеренестиИзТоварыВС", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.ДетализацияИмпорта);
	
	УстановитьПараметрыВыбораСкладов();

	ЗапрещеноИзменятьСоставПорядокСтрок = ЗапрещеноИзменятьСоставСтрок();
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВС", "ИзменятьПорядокСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВС"		, "ИзменятьПорядокСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТовары"	, "ИзменятьПорядокСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары"			, "ИзменятьПорядокСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВС", "ИзменятьСоставСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВС"		, "ИзменятьСоставСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТовары"	, "ИзменятьСоставСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары"			, "ИзменятьСоставСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
	
	Если ЗапрещеноИзменятьСоставПорядокСтрок Тогда
		МассивИменНедоступныхКоманд = НовыйМассивМассивИменНедоступныхКоманд();
		УстановитьСвойствоДоступность(МассивИменНедоступныхКоманд, Ложь);
	КонецЕсли;
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСГруппаИсточникПроисхожденияПолучатель", "Видимость", (Объект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС
													ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС
													ИЛИ (Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация И Объект.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхожденияПолучатель", "ТолькоПросмотр", (Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС ИЛИ (Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация И Объект.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСДополнительныйИдентификаторПолучатель", "Видимость", НЕ (Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС));
	
	Если Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхожденияПолучатель", "Заголовок", Нстр("ru = 'Источник происхождения без признака учета ВС'"));
	ИначеЕсли Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация И Объект.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхожденияПолучатель", "Заголовок", Нстр("ru = 'Источник происхождения после конвертации между ЕИ'"));
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСДополнительныйИдентификаторПолучатель", "Заголовок", Нстр("ru = 'Идентификатор товара (ID) после конвертации между ЕИ'"));
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникПроисхожденияПолучатель", "Заголовок", Нстр("ru = 'Источник происхождения после конвертации между ЕИ'"));
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыДополнительныйИдентификаторПолучатель", "Заголовок", Нстр("ru = 'Идентификатор товара (ID) после конвертации между ЕИ'"));
	ИначеЕсли Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхожденияПолучатель", "Заголовок", Нстр("ru = 'Источник происхождения с признаком учета ВС'"));
	КонецЕсли;
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыГруппаИсточникПроисхожденияПолучатель"	 , "Видимость", (Объект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами ИЛИ (Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация И Объект.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучитьИДИсходныхТоваровДИТ"	 , "Видимость", (Объект.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСПеренестиИзТоварыВС", "Видимость", (НЕ (Объект.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС)));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРазбить", "Видимость", Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСПеренестиИзТоварыВС", "Видимость", Объект.ТипФормы <> Перечисления.ТипыФормВС.КорректировкаДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОшибок(ИсточникДляЗаполненияТаблицыОшибок)
	
	Ошибки.Очистить();	
	
	ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	СоответствиеПолей = ЭСФСерверПовтИсп.НовоеСоответствиеПолей();
	СоответствиеРазделов = ЭСФСерверПовтИсп.НовоеСоответствиеРазделов();
 	
	Для Каждого Ошибка Из ИсточникДляЗаполненияТаблицыОшибок Цикл
		
		ИнформацияОбОшибке = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, Ошибка.Текст, Ошибка.Поле,СоответствиеПолей,СоответствиеРазделов);
		
		НоваяСтрока = Ошибки.Добавить();
		
		НоваяСтрока.ТекстИСЭСФ  		= ИнформацияОбОшибке.ТекстИСЭСФ;
		НоваяСтрока.ПолеИСЭСФ   		= ИнформацияОбОшибке.ПолеИСЭСФ;
		НоваяСтрока.ТекстИБ     		= ИнформацияОбОшибке.ТекстИБ;
		НоваяСтрока.ПолеИБ      		= ИнформацияОбОшибке.ПолеИБ;
		НоваяСтрока.ИмяСтраницы 		= ИнформацияОбОшибке.ИмяСтраницы;
		НоваяСтрока.ПодробнаяИнформация = ИнформацияОбОшибке.ПодробнаяИнформация;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Ошибки.ТекущиеДанные;
	
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекущиеДанные.ТекстИБ,,ТекущиеДанные.ПолеИБ);
	
	// Активировать страницу на которой произошла ошибка.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#Иначе 
		//Для остальных в случае если поле сообщения пустое.
		Если ПустаяСтрока(ТекущиеДанные.ПолеИБ) И ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьРеквизитыСклада(Склад, ИмяРеквизитаСклада) 
	
	Если ИмяРеквизитаСклада = "СкладПолучатель" Тогда
		Объект.СкладПолучательИдентификатор = Склад.ИдентификаторСклада;
		Объект.СкладПолучательНаименование	= Склад.Наименование;		
	ИначеЕсли ИмяРеквизитаСклада = "СкладОтправитель" Тогда
		Объект.СкладОтправительИдентификатор = Склад.ИдентификаторСклада;
		Объект.СкладОтправительНаименование	 = Склад.Наименование;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПолныйНомерДокумента(Объект, ПолныйНомерУчетногодокумента)
	
	ПолныйНомер = "";
	
	Если ЗначениеЗаполнено(Объект.НомерУчетногоДокумента)Тогда
		Если ЗначениеЗаполнено(Объект.ПрефиксВидаДокумента) Тогда
			ПолныйНомер = ПолныйНомер + Объект.ПрефиксВидаДокумента + "_";
		КонецЕсли;
		ПолныйНомер = ПолныйНомер + Объект.НомерУчетногоДокумента + "_" + Объект.НомерПакета;
		ПолныйНомерУчетногоДокумента = ПолныйНомер;
	Иначе
		ПолныйНомерУчетногоДокумента = НСтр("ru='Не указан'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если (ЗначениеЗаполнено(Объект.СкладОтправительНаименование) ИЛИ Объект.СкладОтправительИдентификатор > 0) Тогда
			ЗаполнитьРеквизитыСклада(Объект.СкладОтправитель, "СкладОтправитель");
		КонецЕсли;
		Если (ЗначениеЗаполнено(Объект.СкладПолучательНаименование) ИЛИ Объект.СкладПолучательИдентификатор > 0)  Тогда
			ЗаполнитьРеквизитыСклада(Объект.СкладПолучатель, "СкладПолучатель");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Объект.Организация, "Отправитель", Объект.СтруктурноеПодразделение);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ОтправительНаименование, ОтправительИдентификатор, ОтправительАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&Насервере
Процедура ПолучательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		Если Элементы.ГруппаСкладПолучатель.Видимость И (ЗначениеЗаполнено(Объект.СкладПолучательНаименование) ИЛИ Объект.СкладПолучательИдентификатор > 0)  Тогда
			ЗаполнитьРеквизитыСклада(Объект.СкладПолучатель, "СкладПолучатель");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Объект.ОрганизацияПолучатель, "Получатель");
	ЗаполнитьЗначенияСвойств(Объект,СтруктураДанных,"ПолучательНаименование,ПолучательИдентификатор,ПолучательАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСГСВСПриИзменении(Элемент)
		
	ПризнакВозможностиВыбора = Истина;
	ГСВСПриИзмененииНаСервере(Элементы.ТоварыВС.ТекущиеДанные.ГСВС, ПризнакВозможностиВыбора);
	Элементы.ТоварыВС.ТекущиеДанные.СоставнойКодГСВС = ?(ПризнакВозможностиВыбора, Строка(Элементы.ТоварыВС.ТекущиеДанные.ГСВС), "");
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГСВСПриИзменении(Элемент)
	
	ПризнакВозможностиВыбора = Истина;
	ГСВСПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ГСВС, ПризнакВозможностиВыбора);
	Элементы.Товары.ТекущиеДанные.СоставнойКодГСВС = ?(ПризнакВозможностиВыбора, Строка(Элементы.Товары.ТекущиеДанные.ГСВС), "");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСГСВСПриИзменении(Элемент)
	
	ПризнакВозможностиВыбора = Истина;
	ГСВСПриИзмененииНаСервере(Элементы.ИсходныеТоварыВС.ТекущиеДанные.ГСВС, ПризнакВозможностиВыбора);
	Элементы.ИсходныеТоварыВС.ТекущиеДанные.СоставнойКодГСВС = ?(ПризнакВозможностиВыбора, Строка(Элементы.ИсходныеТоварыВС.ТекущиеДанные.ГСВС), "");
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыГСВСПриИзменении(Элемент)
	
	ПризнакВозможностиВыбора = Истина;
	ГСВСПриИзмененииНаСервере(Элементы.ИсходныеТовары.ТекущиеДанные.ГСВС, ПризнакВозможностиВыбора);
	Элементы.ИсходныеТовары.ТекущиеДанные.СоставнойКодГСВС = ?(ПризнакВозможностиВыбора, Строка(Элементы.ИсходныеТовары.ТекущиеДанные.ГСВС), "");
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ГСВСПриИзмененииНаСервере(ВыбранноеЗначение, ПризнакВозможностиВыбора)
	
	Если Не ВыбранноеЗначение.ПризнакВозможностиВыбора Тогда
		ПризнакВозможностиВыбора = Ложь;
		ТекстСообщения = НСтр("ru = 'Выбранное значение %1 не доступно к выбору. Выберите другое значение справочника.'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранноеЗначение);  
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТипФормы(Форма, ТипФормы, ВидДетализации)
	
	Элементы = Форма.Элементы;
	
	//видимость элементов
	Если ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Производство") Тогда
		
		//Производство
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ТоварыВСТоварНаименованиеВРамкахТС,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСТипПошлины,
		|ТоварыВСНомерПозицииВДекларацииИлиЗаявлении,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыТоварНаименованиеВРамкахТС,
		|ТоварыПризнакПроисхождения,
		|ТоварыТипПошлины,
		|ТоварыСтранаПроисхожденияТовараКод,
		|ТоварыСтранаПроисхожденияТовара,
		|ТоварыНомерПозицииВДекларацииИлиЗаявлении,
		|ТоварыВозможенЭкспорт,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ПричинаСписания,
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ТоварыВСПодборТовары,
		|ТоварыПодборТовары,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='C. Реквизиты производителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел C. Реквизиты производителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ СТ-1, СТ-KZ'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС", НСтр("ru='№ СТ-1, СТ-KZ'"));
		СтруктураЗаголовков.Вставить("ТоварыДатаСертификатаПроисхождения", НСтр("ru='Дата сертификата СТ-1, СТ-KZ'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДатаСертификатаПроисхождения",НСтр("ru='Дата сертификата СТ-1, СТ-KZ'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) (будет получен из сервера ВС)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки") 
		Или ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВводОстатковНаВС") Тогда
		
		//Остатки
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC, 
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыДатаСертификатаПроисхождения,
		|ПричинаСписания,
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		//|ТоварыВСПодборТовары,
		//|ТоварыПодборТовары");
		
		Если ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВводОстатковНаВС") Тогда
			СтруктураНевидимыхЭлементов.Вставить("ТоварыНеПодлежащиеУчетуВВС");
			СтруктураНевидимыхЭлементов.Вставить("ТоварыВСДополнительныйИдентификатор");
		КонецЕсли;

		Если ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки") Тогда
			СтруктураНевидимыхЭлементов.Вставить("ТоварыВСПодборТовары");
			СтруктураНевидимыхЭлементов.Вставить("ТоварыПодборТовары");
		КонецЕсли;
			
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='C. Реквизиты владельца'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел C. Реквизиты владельца'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) (будет получен из сервера ВС)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда
		
		//ВнутренееПеремещение
		СтруктураНевидимыхЭлементов = Новый Структура(
		"ПричинаСписания,
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ТоварыВСТоварНаименованиеВРамкахТС,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСТипПроисхождения,
		|ТоварыВСТипПошлины,
		|ТоварыВССтранаПроисхожденияТовараКод,
		|ТоварыВССтранаПроисхожденияТовара,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыТоварНаименованиеВРамкахТС,
		|ТоварыПризнакПроисхождения,
		|ТоварыТипПроисхождения,
		|ТоварыТипПошлины,
		|ТоварыСтранаПроисхожденияТовараКод,
		|ТоварыСтранаПроисхожденияТовара,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыВозможенЭкспорт,
		|ТоварыВСИсточникПроисхожденияПолучатель,
		|ТоварыВСДополнительныйИдентификаторПолучатель,
		|ТоварыИсточникПроисхожденияПолучатель,
		|ТоварыДополнительныйИдентификаторПолучатель,
		|Организация,
		|СтруктурноеПодразделение,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад отправитель'"));
		СтруктураЗаголовков.Вставить("СкладПолучатель", НСтр("ru='Склад получатель'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));

	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Списание") 
		ИЛИ ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.СписаниеТоваровНеВС") Тогда
		
		//Списание
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСТипПроисхождения,
		|ТоварыВСТипПошлины,
		|ТоварыВССтранаПроисхожденияТовараКод,
		|ТоварыВССтранаПроисхожденияТовара,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыТоварНаименованиеВРамкахТС,
		|ТоварыПризнакПроисхождения,
		|ТоварыТипПроисхождения,
		|ТоварыТипПошлины,
		|ТоварыСтранаПроисхожденияТовараКод,
		|ТоварыСтранаПроисхожденияТовара,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыВозможенЭкспорт,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		Если ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.СписаниеТоваровНеВС") Тогда
			СтруктураНевидимыхЭлементов.Вставить("ТоварыНеПодлежащиеУчетуВВС");
		КонецЕсли;
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаОстатков") Тогда
		
		//КорректировкаОстатков
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ПричинаСписания, 
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаСкладПолучатель,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыФизическаяМетка,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад-отправитель'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) (будет получен из сервера ВС)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Детализация") Тогда
		
		//Детализация
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ПричинаСписания,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаСкладПолучатель,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыДатаСертификатаПроисхождения,
		|ИсходныеТоварыВСДатаСертификатаПроисхождения,
		|ИсходныеТоварыДатаСертификатаПроисхождения,
		|ТоварыВСПодборТовары,
		|ТоварыПодборТовары,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад-отправитель'"));
		СтруктураЗаголовков.Вставить("РазделE", НСтр("ru='Е.Исходные товары/Товары'"));
		СтруктураЗаголовков.Вставить("НадписьТовары", НСтр("ru='Раздел Е2.Товары'"));
		СтруктураЗаголовков.Вставить("НадписьТоварыВС", НСтр("ru='Раздел Е2.Товары'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
		Если ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.Комплектация")
			ИЛИ ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.Разукомплектация") Тогда
			СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) (будет получен из сервера ВС)'"));
		Иначе
			СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));	 
		КонецЕсли;
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка") Тогда
		
		//ФизическаяМетка
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ПричинаСписания, 
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыПризнакПроисхождения,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыВозможенЭкспорт,
		|ИсходныеТоварыПризнакПроисхождения,
		|ИсходныеТоварыДатаСертификатаПроисхождения,
		|ИсходныеТоварыВозможенЭкспорт,
		|ИсходныеТоварыВСПризнакПроисхождения,
		|ИсходныеТоварыВСДатаСертификатаПроисхождения,
		|ИсходныеТоварыВСВозможенЭкспорт,
		|ТоварыНеПодлежащиеУчетуВВС,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходныеТоварыВСФизическаяМетка", "Доступность", Ложь);
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДекларацияНаТовары") Тогда
		
		//ДекларацияНаТовары
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ПричинаСписания, 
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыПризнакПроисхождения,
		|ТоварыДатаСертификатаПроисхождения,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы
		|");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад отправитель'"));
		СтруктураЗаголовков.Вставить("СкладПолучатель", НСтр("ru='Склад получатель'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами") Тогда
		
		//ПеремещенениеМеждуФилиалами
		СтруктураНевидимыхЭлементов = Новый Структура(
		"ПричинаСписания,
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ТоварыВСТоварНаименованиеВРамкахТС,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВССтранаПроисхожденияТовараКод,
		|ТоварыВССтранаПроисхожденияТовара,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыТоварНаименованиеВРамкахТС,
		|ТоварыПризнакПроисхождения,
		|ТоварыТипПроисхождения,
		|ТоварыТипПошлины,
		|ТоварыСтранаПроисхожденияТовараКод,
		|ТоварыСтранаПроисхожденияТовара,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыВозможенЭкспорт,
		|Организация,
		|СтруктурноеПодразделение,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ГруппаПодсказкаТипФормы");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад отправитель'"));
		СтруктураЗаголовков.Вставить("СкладПолучатель", НСтр("ru='Склад получатель'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID) отправителя'"));
		
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхожденияПолучатель"			, НСтр("ru='Источник происхождения получателя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификаторПолучатель"	, НСтр("ru='Идентификатор товара (ID) получателя'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхожденияПолучатель"			, НСтр("ru='Источник происхождения получателя'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификаторПолучатель"		, НСтр("ru='Идентификатор товара (ID) получателя'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") Тогда
		
		//Детализация импорта
		СтруктураНевидимыхЭлементов = Новый Структура(
		"
		|ПричинаСписания, 
		|ВидДетализации,
		|ВидКорректировкиДанных,
		|РазделE0,
		|ГруппаИсходныеТовары,
		|ТоварыВСПризнакПроисхождения,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВССпособВыписки,
		|ТоварыВСДокументРегистратор,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|ТоварыПризнакПроисхождения,
		|ТоварыДатаСертификатаПроисхождения,
		|ТоварыНеПодлежащиеУчетуВВС,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|ТоварыВСВозможенЭкспорт,
		|ИсходныеТоварыВСВозможенЭкспорт,
		|ИсходныеТоварыВСПризнакПроисхождения,
		|ТоварыВСГруппаСтранаПроисхождения,
		|ИсходныеТоварыВСГруппаСтранаПроисхождения,
		|ИсходныеТоварыВСФизическаяМетка,
		|ИсходныеТоварыВСГруппаЕИ,
		|ИсходныеТоварыВСГруппаНоменклатура,
		|ИсходныеТоварыВСДатаСертификатаПроисхождения,
		|ИсходныеТоварыВСЦена,
		|ИсходныеТоварыВСИсточникПроисхождения,
		|ГруппаПодсказкаТипФормы
		|");
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СкладОтправитель", НСтр("ru='Склад'"));
		СтруктураЗаголовков.Вставить("СкладПолучатель", НСтр("ru='Склад получатель'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") 
		И Форма.Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.СписаниеРезервов") Тогда
		
		//Списание резервов
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ВидДетализации,
		|ПричинаСписания,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ГруппаТовары,
		|ТоварыВСТипПроисхождения,
		|ТоварыВСТипПошлины,
		|ТоварыВСФизическаяМетка,
		|ТоварыВССтранаПроисхожденияТовараКод,
		|ТоварыВССтранаПроисхожденияТовара,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВСКоличествоРезерв,
		|ТоварыВСРасходноеДвижениеКорректировки,
		|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|РазделСведенияПоЭЦП,
		|ДоговорСРППоставщик,
		|РегистрационныйНомер,
		|ДатаОборота,
		|ВерсияУТТН,
		|Идентификатор,
		|ГруппаНомерУчетногоДокумента,
		|ГруппаКорректировкаИП");
				
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") 
		И Форма.Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.РучнаяКорректировка") Тогда
		
		//Ручная корректировка
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ВидДетализации,
		|ПричинаСписания,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ГруппаТовары,
		|ТоварыВСФизическаяМетка,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|ТоварыВСДокументРегистратор,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|РазделСведенияПоЭЦП,
		|ДоговорСРППоставщик,
		|РегистрационныйНомер,
		|ДатаОборота,
		|ВерсияУТТН,
		|Идентификатор,
		|ГруппаНомерУчетногоДокумента,
		|ГруппаКорректировкаИП");
				
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	ИначеЕсли ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") Тогда
		
		//Корректировка данных без указания вида корректировки
		СтруктураНевидимыхЭлементов = Новый Структура(
		"РазделC,
		|ВидДетализации,
		|ПричинаСписания,
		|ГруппаСкладПолучатель,
		|РазделE0,
		|ГруппаИсходныеТоварыВС,
		|ГруппаИсходныеТовары,
		|ГруппаТовары,
		|ТоварыВСФизическаяМетка,
		|ТоварыВСДатаСертификатаПроисхождения,
		|ТоварыВСВозможенЭкспорт,
		|Отправитель,
		|Получатель,
		|СтруктурноеПодразделениеОтправитель,
		|СтруктурноеПодразделениеПолучатель,
		|РазделСведенияПоЭЦП,
		|ДоговорСРППоставщик,
		|РегистрационныйНомер,
		|ДатаОборота,
		|ВерсияУТТН,
		|Идентификатор,
		|ГруппаНомерУчетногоДокумента,
		|ГруппаКорректировкаИП");
				
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
		СтруктураЗаголовков.Вставить("ТоварыВСНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыНомерЗаявленияВРамкахТС",НСтр("ru='№ ДТ, ФНО 328.00, СТ-KZ, СТ-1'"));
		СтруктураЗаголовков.Вставить("ТоварыВСИсточникПроисхождения"		, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыВСДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		СтруктураЗаголовков.Вставить("ТоварыИсточникПроисхождения"			, НСтр("ru='Источник происхождения'"));
		СтруктураЗаголовков.Вставить("ТоварыДополнительныйИдентификатор"	, НСтр("ru='Идентификатор товара (ID)'"));
		
	Иначе
		СтруктураНевидимыхЭлементов = Новый Структура;
		СтруктураЗаголовков = Новый Структура;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНевидимыхЭлементов Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементСтруктуры.Ключ, "Видимость", Ложь);
		КонецЕсли;	
	КонецЦикла;
	
	//заголовки элементов
	Для Каждого ЭлементСтруктуры Из СтруктураЗаголовков Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементСтруктуры.Ключ, "Заголовок", ЭлементСтруктуры.Значение);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТипФормыПоУмолчанию(Форма)
	//видимость элементов по умолчанию Истина
	Элементы = Форма.Элементы;
	СтруктураВидимыхЭлементовПоУмолчанию = Новый Структура (
	"РазделC,
	|РазделB,
	|РазделПрочиеСведения,
	|РазделСведенияПоЭЦП,
	|РегистрационныйНомер,
	|ГруппаТоварыВС,
	|ГруппаТовары,
	|ПричинаСписания,
	|ВидДетализации,
	|ВидКорректировкиДанных,
	|ГруппаСкладПолучатель,
	|РазделE0,
	|СкладОтправитель,
	|СкладПолучатель,
	|ГруппаИсходныеТоварыВС,
	|ГруппаИсходныеТовары,
	|ТоварыВСНомерСтроки,
	|ТоварыВСТоварНаименование,
	|ТоварыВСТовар,
	|ТоварыВССоставнойКодГСВС,
	|ТоварыВСГСВС,
	|ТоварыВСФизическаяМетка,
	|ТоварыВСПризнакПроисхождения,
	|ТоварыВССтранаПроисхожденияТовара,
	|ТоварыВССтранаПроисхожденияТовараКод,
	|ТоварыВСКодТНВЭД,
	|ТоварыВСТипПошлины,
	|ТоварыВСТипПроисхождения,
	|ТоварыВСТоварНаименованиеВРамкахТС,
	|ТоварыВСЕдиницаИзмеренияКод,
	|ТоварыВСЕдиницаИзмерения,
	|ТоварыВСКоличество,
	|ТоварыВСЦена,
	|ТоварыВССумма,
	|ТоварыВСНомерЗаявленияВРамкахТС,
	|ТоварыВСИсточникПроисхождения,
	|ТоварыВСДатаСертификатаПроисхождения,
	|ТоварыВСТоварНаименованиеВРамкахТС,
	|ТоварыВСНомерПозицииВДекларацииИлиЗаявлении,
	|ТоварыВСВозможенЭкспорт,
	|ТоварыВССпособВыписки,
	|ТоварыВСДокументРегистратор,
	|ТоварыВСКоличествоРезерв,
	|ТоварыВСРасходноеДвижениеКорректировки,
	|ТоварыВСПризнакУчетаНаВиртуальномСкладе,
	|ТоварыНомерСтроки,
	|ТоварыТоварНаименование,
	|ТоварыТовар,
	|ТоварыСоставнойКодГСВС,
	|ТоварыГСВС,
	|ТоварыФизическаяМетка,
	|ТоварыПризнакПроисхождения,
	|ТоварыСтранаПроисхожденияТовара,
	|ТоварыСтранаПроисхожденияТовараКод,
	|ТоварыКодТНВЭД,
	|ТоварыТипПошлины,
	|ТоварыТипПроисхождения,
	|ТоварыТоварНаименованиеВРамкахТС,
	|ТоварыЕдиницаИзмеренияКод,
	|ТоварыЕдиницаИзмерения,
	|ТоварыКоличество,
	|ТоварыЦена,
	|ТоварыСумма,
	|ТоварыНомерЗаявленияВРамкахТС,
	|ТоварыИсточникПроисхождения,
	|ТоварыДатаСертификатаПроисхождения,
	|ТоварыТоварНаименованиеВРамкахТС,
	|ТоварыНомерПозицииВДекларацииИлиЗаявлении,
	|ТоварыВозможенЭкспорт,
	|ИсходныеТоварыВСНомерСтроки,
	|ИсходныеТоварыВСТоварНаименование,
	|ИсходныеТоварыВСТовар,
	|ИсходныеТоварыВССоставнойКодГСВС,
	|ИсходныеТоварыВСГСВС,
	|ИсходныеТоварыВСФизическаяМетка,
	|ИсходныеТоварыВСПризнакПроисхождения,
	|ИсходныеТоварыВССтранаПроисхожденияТовара,
	|ИсходныеТоварыВССтранаПроисхожденияТовараКод,
	|ИсходныеТоварыВСКодТНВЭД,
	|ИсходныеТоварыВСТипПошлины,
	|ИсходныеТоварыВСТипПроисхождения,
	|ИсходныеТоварыВСЕдиницаИзмеренияКод,
	|ИсходныеТоварыВСЕдиницаИзмерения,
	|ИсходныеТоварыВСКоличество,
	|ИсходныеТоварыВСЦена,
	|ИсходныеТоварыВССумма,	
	|ИсходныеТоварыВСНомерЗаявленияВРамкахТС,
	|ИсходныеТоварыВСИсточникПроисхождения,
	|ИсходныеТоварыВСДатаСертификатаПроисхождения,
	|ИсходныеТоварыВСТоварНаименованиеВРамкахТС,
	|ИсходныеТоварыВСНомерПозицииВДекларацииИлиЗаявлении,
	|ИсходныеТоварыВСВозможенЭкспорт,
	|ИсходныеТоварыНомерСтроки,
	|ИсходныеТоварыТоварНаименование,
	|ИсходныеТоварыТовар,
	|ИсходныеТоварыСоставнойКодГСВС,
	|ИсходныеТоварыГСВС,
	|ИсходныеТоварыФизическаяМетка,
	|ИсходныеТоварыПризнакПроисхождения,
	|ИсходныеТоварыСтранаПроисхожденияТовара,
	|ИсходныеТоварыСтранаПроисхожденияТовараКод,
	|ИсходныеТоварыКодТНВЭД,
	|ИсходныеТоварыТипПошлины,
	|ИсходныеТоварыТипПроисхождения,
	|ИсходныеТоварыЕдиницаИзмеренияКод,
	|ИсходныеТоварыЕдиницаИзмерения,
	|ИсходныеТоварыКоличество,
	|ИсходныеТоварыЦена,
	|ИсходныеТоварыСумма,
	|ИсходныеТоварыНомерЗаявленияВРамкахТС,
	|ИсходныеТоварыИсточникПроисхождения,
	|ИсходныеТоварыДатаСертификатаПроисхождения,
	|ИсходныеТоварыТоварНаименованиеВРамкахТС,
	|ИсходныеТоварыНомерПозицииВДекларацииИлиЗаявлении,
	|ИсходныеТоварыВозможенЭкспорт,
	|ТоварыВСПодборТовары,
	|ТоварыПодборТовары,
	|Отправитель,
	|Получатель,
	|ТоварыВСИсточникПроисхожденияПолучатель,
	|ТоварыВСДополнительныйИдентификаторПолучатель,
	|ТоварыВСДополнительныйИдентификатор,
	|ТоварыИсточникПроисхожденияПолучатель,
	|ТоварыДополнительныйИдентификаторПолучатель,
	|Организация,
	|ТоварыНеПодлежащиеУчетуВВС,
	|ДоговорСРППоставщик,
	|ДатаОборота,
	|ВерсияУТТН,
	|Идентификатор,
	|ГруппаНомерУчетногоДокумента,
	|ГруппаКорректировкаИП");
	
	Если Форма.Объект.ТипФормы <> ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПустаяСсылка") Тогда
		СтруктураВидимыхЭлементовПоУмолчанию.Вставить("ГруппаПодсказкаТипФормы");
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураВидимыхЭлементовПоУмолчанию Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементСтруктуры.Ключ, "Видимость", Истина);
		КонецЕсли;	
	КонецЦикла;
	
	//Заголовки
	СтруктураЗаголовковПоУмолчанию = Новый Структура;
	СтруктураЗаголовковПоУмолчанию.Вставить("РазделB", НСтр("ru='B. Реквизиты отправителя'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("НадписьРазделВ", НСтр("ru='Раздел B. Реквизиты отправителя'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("РазделC", НСтр("ru='C. Реквизиты получателя'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("СкладОтправитель", НСтр("ru='Склад'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("СкладПолучатель", НСтр("ru='Склад'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("РазделE", НСтр("ru='Е. Товары'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("НадписьТоварыВС", НСтр("ru='Раздел E. Товары'"));
	СтруктураЗаголовковПоУмолчанию.Вставить("НадписьТовары", НСтр("ru='Раздел Е. Товары'"));
	
	Для Каждого ЭлементСтруктуры Из СтруктураЗаголовковПоУмолчанию Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементСтруктуры.Ключ, "Заголовок", ЭлементСтруктуры.Значение);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыСклада(ВыбранноеЗначение, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборИсточникаПроисхождения(Элемент, ДанныеВыбора, Элементы.ТоварыВС.ТекущиеДанные, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборИсточникаПроисхождения(Элемент, ДанныеВыбора, Элементы.Товары.ТекущиеДанные, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборИсточникаПроисхождения(Элемент, ДанныеВыбора,Элементы.ИсходныеТовары.ТекущиеДанные, СтандартнаяОбработка)	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборИсточникаПроисхождения(Элемент, ДанныеВыбора, Элементы.ИсходныеТоварыВС.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсточникаПроисхождения(Элемент, ДанныеВыбора, ТекущиеДанные, СтандартнаяОбработка)
	
	ПараметрыВыбораИП = ВСКлиент.ПараметрыВыбораИсточникаПроисхождения(Объект, 
											Объект.СкладОтправитель,
											ТекущиеДанные,
											"Товар");	
	ВСКлиент.ИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораИП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустыеПараметрыВыбораИсточникаПроисхождения()
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("Ссылка");
	ПараметрыВыбора.Вставить("Дата");	
	ПараметрыВыбора.Вставить("РежимОстатков");
	ПараметрыВыбора.Вставить("Номенклатура");
	ПараметрыВыбора.Вставить("ИсточникПроисхождения");
	ПараметрыВыбора.Вставить("КодТНВЭД");
	ПараметрыВыбора.Вставить("ГСВС");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораИсточникаПроисхождения(Объект, ТекущиеДанные, ИмяРеквизитаТовары = "Номенклатура", РежимОстатков = Истина) Экспорт
	
	ПараметрыВыбора = ПустыеПараметрыВыбораИсточникаПроисхождения();
	
	ПараметрыВыбора.Ссылка      = Объект.Ссылка;
	ПараметрыВыбора.Дата        = Объект.Дата;	
	ПараметрыВыбора.РежимОстатков = РежимОстатков;
	
	ПараметрыВыбора.Номенклатура = ТекущиеДанные[ИмяРеквизитаТовары];
	ПараметрыВыбора.КодТНВЭД = ТекущиеДанные.КодТНВЭД;
	ПараметрыВыбора.ГСВС = ТекущиеДанные.ГСВС;
	ПараметрыВыбора.ИсточникПроисхождения = ТекущиеДанные.ИсточникПроисхождения;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти) 
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтрокаТабличнойЧасти.Количество = 0;
		Иначе
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Цена;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСГСВСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПризнакУчетаНаВиртуальномСкладе", Истина);
	
	ТекущаяСтрока = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КодТНВЭД) Тогда
		ПараметрыФормы.Вставить("КодГСВС", ТекущаяСтрока.КодТНВЭД);
		ПараметрыФормы.Вставить("КодГСВСРодителя", ТекущаяСтрока.КодТНВЭД);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("НоменклатураГСВССписокЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения);   
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСГСВСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПризнакУчетаНаВиртуальномСкладе", Истина);
	
	ТекущаяСтрока = Элементы.ТоварыВС.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);

	Если ЗначениеЗаполнено(ТекущаяСтрока.КодТНВЭД) Тогда
		ПараметрыФормы.Вставить("КодГСВС", ТекущаяСтрока.КодТНВЭД);
		ПараметрыФормы.Вставить("КодГСВСРодителя", ТекущаяСтрока.КодТНВЭД);
	КонецЕсли;
		
	ОбработчикОповещения = Новый ОписаниеОповещения("НоменклатураГСВССписокЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения);  
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыГСВСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПризнакУчетаНаВиртуальномСкладе", Ложь);
	
	ТекущаяСтрока = Элементы.ИсходныеТовары.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);

	Если ЗначениеЗаполнено(ТекущаяСтрока.КодТНВЭД) Тогда
		ПараметрыФормы.Вставить("КодГСВС", ТекущаяСтрока.КодТНВЭД);
		ПараметрыФормы.Вставить("КодГСВСРодителя", ТекущаяСтрока.КодТНВЭД);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("НоменклатураГСВССписокЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГСВСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПризнакУчетаНаВиртуальномСкладе", Ложь);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);

	Если ЗначениеЗаполнено(ТекущаяСтрока.КодТНВЭД) Тогда
		ПараметрыФормы.Вставить("КодГСВС", ТекущаяСтрока.КодТНВЭД);
		ПараметрыФормы.Вставить("КодГСВСРодителя", ТекущаяСтрока.КодТНВЭД);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("НоменклатураГСВССписокЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОбработчикОповещения);  
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГСВССписокЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если  ДополнительныеПараметры.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДополнительныеПараметры.ТекущаяСтрока.ГСВС = ВыбранноеЗначение;
	КонецЕсли;
	
	ПризнакВозможностиВыбора = Истина;
	ГСВСПриИзмененииНаСервере(ДополнительныеПараметры.ТекущаяСтрока.ГСВС, ПризнакВозможностиВыбора);
	ДополнительныеПараметры.ТекущаяСтрока.СоставнойКодГСВС = ?(ПризнакВозможностиВыбора, Строка(ДополнительныеПараметры.ТекущаяСтрока.ГСВС), "");
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИспользоватьОбменЭСФЧерезAPI()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI");
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПризнакУчетаНаВиртуальномСкладе, ПризнакУчетаНаВиртуальномСкладеГСВС = Ложь)
    
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор товара по источникам происхождения'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОстатка" 			, Объект.Дата);
	ПараметрыФормы.Вставить("Организация" 			, Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"       			, Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок"   			, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ОбъектСсылка"			, Объект.Ссылка);
	ПараметрыФормы.Вставить("ЭтоНовыйДокумент"		, Параметры.Ключ.Пустая());
	ПараметрыФормы.Вставить("ИмяТаблицы"			, ИмяТаблицы);
	ПараметрыФормы.Вставить("ПризнакУчетаНаВиртуальномСкладе", ПризнакУчетаНаВиртуальномСкладе);
	ПараметрыФормы.Вставить("ПризнакУчетаНаВиртуальномСкладеГСВС", ПризнакУчетаНаВиртуальномСкладеГСВС);
	ПараметрыФормы.Вставить("ПоддержкаУчетаСтруктурныхПодразделений", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") И 
		Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.СписаниеРезервов") Тогда
		ПараметрыФормы.Заголовок = НСтр("ru = 'Подбор товара по источникам происхождения (резервы)'");
		ПараметрыФормы.Вставить("ПодборПоРезервам");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПризнакаУникальныйТовар", Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка"));
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Функция ПолучитьТаблицуПодбораТоваров(АдресХранилища)
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ТаблицаТоваров) <> Тип("ТаблицаЗначений") Или ТаблицаТоваров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Товар КАК Товар,
	|	ТаблицаТоваров.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Товар КАК Товар,
	|	Товары.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ГСВС КАК ГСВС,
	|	ИсточникиПроисхождения.ДатаСертификатаПроисхожденияТовара КАК ДатаСертификатаПроисхождения,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.МеткаТовара КАК ФизическаяМетка,
	|	ИсточникиПроисхождения.СтранаПроисхожденияТовара.КодАльфа2 КАК СтранаПроисхожденияТовараКод,
	|	ИсточникиПроисхождения.СтранаПроисхожденияТовара КАК СтранаПроисхожденияТовара,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.ТипПошлины КАК ТипПошлины,
	|	ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	%ДатаДокументПартии%ИсточникиПроисхождения% КАК ДатаДокументПартии
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	ВТ_ТаблицаТоваров КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО (ИсточникиПроисхождения.Ссылка = Товары.ИсточникПроисхождения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ГСВС КАК ГСВС,
	|	СведенияОНоменклатуреГСВС.ПолныйКодГСВС КАК ПолныйКодГСВС,
	|	СведенияОНоменклатуреГСВС.Период КАК Период
	|ПОМЕСТИТЬ ВТ_СведенияОНоменклатуреГСВС
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|		ПО Товары.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И Товары.ДатаДокументПартии >= СведенияОНоменклатуреГСВС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГСВС,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОНоменклатуреГСВС.ГСВС КАК ГСВС,
	|	МАКСИМУМ(СведенияОНоменклатуреГСВС.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СведенияОНоменклатуреГСВССвернуто
	|ИЗ
	|	ВТ_СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОНоменклатуреГСВС.ГСВС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГСВС,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Товар КАК Товар,
	|	Товары.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.ГСВС КАК ГСВС,
	|	Товары.ДатаСертификатаПроисхождения КАК ДатаСертификатаПроисхождения,
	|	Товары.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	Товары.ФизическаяМетка КАК ФизическаяМетка,
	|	Товары.СтранаПроисхожденияТовараКод КАК СтранаПроисхожденияТовараКод,
	|	Товары.СтранаПроисхожденияТовара КАК СтранаПроисхожденияТовара,
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	Товары.ТипПошлины КАК ТипПошлины,
	|	Товары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПолныйКодГСВС, """") КАК СоставнойКодГСВС
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОНоменклатуреГСВССвернуто КАК СведенияОНоменклатуреГСВССвернуто
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|			ПО (СведенияОНоменклатуреГСВС.ГСВС = СведенияОНоменклатуреГСВССвернуто.ГСВС)
	|				И (СведенияОНоменклатуреГСВС.Период = СведенияОНоменклатуреГСВССвернуто.Период)
	|		ПО (СведенияОНоменклатуреГСВССвернуто.ГСВС = Товары.ГСВС)";
	
	ВССервер.ДополнитьТекстЗапросаДатойДокументаПартии(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	ОбработаннаяТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбработаннаяТаблицаТоваров;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение,ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьТаблицуПодбораТоваров(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	Если ТаблицаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Товар", СтрокаТовара.Товар);
		СтруктураОтбора.Вставить("ИсточникПроисхождения", СтрокаТовара.ИсточникПроисхождения);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") И 
			Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.СписаниеРезервов") Тогда
			СтруктураОтбора.Вставить("СпособВыписки" , ПредопределенноеЗначение("Перечисление.СпособВыпискиСНТ.ВЭлектронномВиде"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;
		
		МассивНайденныхСтрок = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
		СтрокаТабличнойЧасти = ?(МассивНайденныхСтрок.Количество() > 0, МассивНайденныхСтрок[0],Неопределено);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СтрокаТабличнойЧасти.ТоварНаименование = ПолучитьНаименованиеТовараНаСервере(СтрокаТабличнойЧасти.Товар);
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.Товар);
			Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") И 
				Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.СписаниеРезервов") Тогда
				СтрокаТабличнойЧасти.СпособВыписки = ПредопределенноеЗначение("Перечисление.СпособВыпискиСНТ.ВЭлектронномВиде");
			КонецЕсли;
			
			Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") И 
				Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.РучнаяКорректировка") Тогда
				СтрокаТабличнойЧасти.РасходноеДвижениеКорректировки = Истина;
				СтрокаТабличнойЧасти.ПризнакУчетаНаВиртуальномСкладе = СтрокаТовара.ИсточникПроисхождения.ПризнакУчетаНаВиртуальномСкладе;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрокТаблицы();
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
	
КонецПроцедуры

&НаСервере
Функция ЗапрещеноИзменятьСоставСтрок() 
	
	СтатусЭДВС = Объект.Статус;
	
	Если СтатусЭДВС = Перечисления.СтатусыУТТН.Обрабатывается
		ИЛИ СтатусЭДВС = Перечисления.СтатусыУТТН.Обработанный Тогда
		
		ТекстСообщения = НСтр("ru = 'Отключена возможность изменения порядка / количества строк ЭДВС со статусом <%1>.'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтатусЭДВС);  
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьИнфо", "Заголовок", ТекстСообщения);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", Истина);
		Возврат Истина
	Иначе 
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьИнфо", "Заголовок", "");
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", Ложь);
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиПодбораСтраныПроисхожденияИЕдиницыИзмерения

&НаСервереБезКонтекста
Функция ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар)
	
	Возврат ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
	
КонецФункции

&НаКлиенте
Процедура ИсходныеТоварыВСЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	Товар				 = СтрокаТабличнойЧасти.Товар;
	
    СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВССтранаПроисхожденияТовараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти		= Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	СтранаПроисхожденияТовара	= СтрокаТабличнойЧасти.СтранаПроисхожденияТовара;
	
	СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод = ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТовары.ТекущиеДанные;
	ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	Товар				 = СтрокаТабличнойЧасти.Товар;
	
    СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыСтранаПроисхожденияТовараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти		 = Элементы.ИсходныеТовары.ТекущиеДанные;
	СтранаПроисхожденияТовара	 = СтрокаТабличнойЧасти.СтранаПроисхожденияТовара;
		
	СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод = ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара)
	
	 Возврат ВССерверПереопределяемый.ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара);
	 
 КонецФункции
 
&НаКлиенте
Процедура ТоварПриИзмененииНаСервере(СтрокаТабличнойЧасти, ЭтоТаблицаТовары)
	
	Товар = СтрокаТабличнойЧасти.Товар; 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТоварНаименование) Тогда
		СтрокаТабличнойЧасти.ТоварНаименование = ПолучитьНаименованиеТовараНаСервере(Товар);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГСВС) Тогда
		СтрокаТабличнойЧасти.ГСВС = ПолучитьГСВСНаСервере(Товар);
		СтрокаТабличнойЧасти.СоставнойКодГСВС = Строка(СтрокаТабличнойЧасти.ГСВС);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодТНВЭД) Тогда
		СтрокаТабличнойЧасти.КодТНВЭД = ПолучитьТНВЭДНаСервере(Товар);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		ДанныеЕдиницыИзмерения = ПолучитьЕдиницуИзмерения(Товар);
		Если Не ДанныеЕдиницыИзмерения = Неопределено Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ДанныеЕдиницыИзмерения.СсылкаЕИ;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ДанныеЕдиницыИзмерения.КодЭСФ;
		КонецЕсли;
	КонецЕсли;
	
	//при изменении товара необходимо очистить ИП
	ПустойИП = ПредопределенноеЗначение("Справочник.ИсточникиПроисхождения.ПустаяСсылка");
	СтрокаТабличнойЧасти.ИсточникПроисхождения = ПустойИП;
	
	Если ЭтоТаблицаТовары Тогда
		СтрокаТабличнойЧасти.ИсточникПроисхожденияПолучатель = ПустойИП;
	КонецЕсли;
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВводОстатковНаВС")
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Детализация")
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаОстатков") 
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки") 
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка") Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод) Тогда
			СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод = "00";
		КонецЕсли;
		
	КонецЕсли;
	
	
Конецпроцедуры

&НаСервере
Функция ПолучитьГСВСНаСервере(Товар)
	
	ГСВС = ПредопределенноеЗначение("Справочник.НоменклатураГСВС.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(Товар) Тогда
		ЕстьРеквизитКодТНВЭД = ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("КодТНВЭД", Товар.Метаданные());
		Если ЕстьРеквизитКодТНВЭД И ЗначениеЗаполнено(Товар.КодТНВЭД) Тогда
			ГСВС = ЭСФСервер.ПолучитьГСВС(, Товар.КодТНВЭД);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ГСВС;
	
КонецФункции

&НаСервере
Функция ПолучитьТНВЭДНаСервере(Товар)
	
	Если ЗначениеЗаполнено(Товар) Тогда
		ЕстьРеквизитКодТНВЭД = ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("КодТНВЭД", Товар.Метаданные());
		Если ЕстьРеквизитКодТНВЭД И ЗначениеЗаполнено(Товар.КодТНВЭД) Тогда
			КодТНВЭД = Товар.КодТНВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодТНВЭД;
	
КонецФункции

&НаСервере
Функция ПолучитьЕдиницуИзмерения(Товар)
	
	Возврат ВССерверПереопределяемый.ПолучитьДанныеЕдиницыИзмеренияТовара(Товар);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПризнакВхожденияВПеречень(ГСВС, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ГСВСВходитВПеречень
	               |ИЗ
	               |	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
	               |			&Дата,
	               |			НоменклатураГСВС = &ГСВС
	               |				И ПризнакАктивности) КАК СведенияОНоменклатуреГСВССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ГСВС", ГСВС);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Признак Из Результат Цикл
		ГСВСВходитВПеречень = Признак.ГСВСВходитВПеречень;
	КонецЦикла;
	
	Возврат ГСВСВходитВПеречень;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеТовараНаСервере(Товар)
	
	Возврат ВССерверПереопределяемый.ПолучитьНаименованиеТовара(Товар);
	 
КонецФункции

&НаКлиенте
Процедура ТоварыВСЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти	= Элементы.ТоварыВС.ТекущиеДанные;
	ЕдиницаИзмерения		= СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	Товар				    = СтрокаТабличнойЧасти.Товар;
	
    СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВССтранаПроисхожденияТовараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти	  = Элементы.ТоварыВС.ТекущиеДанные;
	СтранаПроисхожденияТовара = СтрокаТабличнойЧасти.СтранаПроисхожденияТовара;
		
	СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод = ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти	= Элементы.Товары.ТекущиеДанные;
	ЕдиницаИзмерения		= СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	Товар				 	= СтрокаТабличнойЧасти.Товар;
	
    СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияТовараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти		= Элементы.Товары.ТекущиеДанные;
	СтранаПроисхожденияТовара	= СтрокаТабличнойЧасти.СтранаПроисхожденияТовара;
		
	СтрокаТабличнойЧасти.СтранаПроисхожденияТовараКод = ПолучитьКодСтраныПроисхожденияТовара(СтранаПроисхожденияТовара);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Создать", НСтр("ru = 'Создать'"));
		Кнопки.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, НСтр("ru = 'Отразить документ в учете?'"), Кнопки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		ДокументОснованиеСоздатьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
		
	ДокументыВыбора = ВСКлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляЭДВС(Объект.ТипФормы);
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ДокументыВыбора", ДокументыВыбора); 
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
	Иначе
		Объект.ДокументОснование = "";   
		ПредставлениеДокументаОснования = НСтр("ru = 'Не подлежит отражению в учете'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено")  Тогда
		ИмяДокумента = ВыбранныйДокумент;
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";  
		ВСКлиент.ОткрытьФормуВыбораДокументаОснования(ЭтаФорма, ИмяФормыВыбора);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОткрыть(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОтсоединить(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбновитьСтатусОформленияДокументов();
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	ДокументОснованиеСоздатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздатьНаКлиенте()
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
	Иначе
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Документ уже отражен в учете: ""%1"".
				|Создать новый документ-основание?'"), Объект.ДокументОснование);
			
			СоздатьДокументОснованиеНаКлиентеЗавершение = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьДокументОснованиеНаКлиентеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			СоздатьДокументОснованиеНаКлиентеЗавершение(КодВозвратаДиалога.ОК, Неопределено);	
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ДокументыВыбора = ВСКлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляЭДВС(Объект.ТипФормы);
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			ПараметрыФормы = Новый Структура("ДокументыВыбора", ДокументыВыбора);
			//+
			// На основании ЭДВС нельзя создавать документ-основание "Электронный счёт-фактура".
			НайденныйЭлемент = ДокументыВыбора.НайтиПоЗначению("ЭСФ");
			Если НайденныйЭлемент <> Неопределено Тогда
				ДокументыВыбора.Удалить(НайденныйЭлемент);
			КонецЕсли;
			//-
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			ВыбранныйДокумент= ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		Иначе
			Объект.ДокументОснование = "";   
			ПредставлениеДокументаОснования = НСтр("ru='Не подлежит отражению в учете'");
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено")  Тогда
		ИмяДокумента = ВыбранныйДокумент;
		ДокументОснованиеСсылка = ЗаполнитьПоДокументуНаСервере(ИмяДокумента); 
		ПоказатьЗначение(,ДокументОснованиеСсылка);
		Объект.ДокументОснование = ДокументОснованиеСсылка;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоДокументуНаСервере(ИмяДокумента)
	
	Возврат ВССерверПереопределяемый.ЗаполнитьДокументОснованиеПоДокументуЭДВС(Объект, ИмяДокумента);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусОформленияДокументов()
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ДокументЭДВС_ОбработкаУдаленияПроведения(Объект.Ссылка, Ложь);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью "Отражен в учете"

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборИсточниковПроисхождения.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);	
	Иначе	
		ИзменитьДокументОснование = Ложь;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение Тогда
			
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Документ уже отражен в учете с помощью ""%1"".
			|Отразить документ в учете с помощью выбранного документа?'"),Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
			Объект.ДокументОснование = ВыбранноеЗначение;
			СформироватьПредставлениеДокументаОснования(ЭтаФорма);
			Модифицированность = Истина;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РазделитьТоварыПодлежащиеИНеПодлежащиеУчетуВВС

&НаКлиенте
Процедура ИсходныеТоварыВСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
	ОчиститьИсточникПроисхожденияПриКопировании(Элемент.ТекущиеДанные, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	КоличествоСтрокТаблицы();
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
	ОчиститьИсточникПроисхожденияПриКопировании(Элемент.ТекущиеДанные, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда
		Строка = Элементы.ИсходныеТовары.ТекущиеДанные;
	КонецЕсли;
	
	ОчиститьИсточникПроисхожденияПриКопировании(Элемент.ТекущиеДанные, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	КоличествоСтрокТаблицы();
	ОчиститьИсточникПроисхожденияПриКопировании(Элемент.ТекущиеДанные, Копирование);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНаСервере(ИмяИсходнойТаблицы, ИмяТаблицы, ЭтоКопированиеСтроки = Ложь)
	
	ТекущиеДанные = Элементы[ИмяИсходнойТаблицы].ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ТекущиеДанные Цикл
		
		Строка = Объект[ИмяИсходнойТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ЭтоКопированиеСтроки Тогда
			Объект[ИмяИсходнойТаблицы].Удалить(Строка);
		КонецЕсли;
		
		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ,"НомерСтроки");
		
	КонецЦикла;
	
	Модифицированность = Истина;
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();

КонецПроцедуры

&НаСервере
Процедура СкопироватьНаСервереИсходныеТовары(ИмяИсходнойТаблицы, ИмяТаблицы, ВидДетализации)
	
	ТекущиеДанные = Элементы[ИмяИсходнойТаблицы].ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ТекущиеДанные Цикл
		
		Строка = Объект[ИмяИсходнойТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);

		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		
		Если ВидДетализации = Перечисления.ВидДетализации.РедактированиеДанных Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ,"ТоварНаименование, ИсточникПроисхождения, ДополнительныйИдентификатор");
		ИначеЕсли ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ,"ЕдиницаИзмеренияКод, ЕдиницаИзмерения, Количество, Цена");
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзТоварыВС(Команда)
	
	ПеренестиНаСервере("ТоварыВС", "Товары");
	КоличествоСтрокТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзИсходныеТоварыВС(Команда)
	
	ПеренестиНаСервере("ИсходныеТоварыВС", "ИсходныеТовары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзИсходныеТовары(Команда)
	
	ПеренестиНаСервере("ИсходныеТовары", "ИсходныеТоварыВС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзТовары(Команда)
	
	ПеренестиНаСервере("Товары", "ТоварыВС");
	КоличествоСтрокТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТовары.ТекущиеДанные;
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсточникПроисхожденияПриКопировании(Строка, Копирование)
	
	Если Копирование Тогда
		Строка.ИсточникПроисхождения = Неопределено;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеЭДВС

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.КорректировкаИП ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.КорректировкаДанных Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ не подлежит отправке в модуль ВС'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.НеПодлежитОтправке Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ не подлежит отправке в модуль ВС (отсутствуют товары Виртуального склада)'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке в модуль ВС'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.ОбработанНаСервере Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ВС'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ВС'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ВС, т.к. содержит ошибки'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.Отменен Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %1, по причине: ""%2""'");
		ПредставлениеСостояния = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, НРег(Объект.Статус), СокрЛП(Объект.Причина));  
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭДВС.ОжидаетИдентификацииТоваровНаВС Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ ожидает идентификации товаров на ВС'");
		ПредставлениеСостояния = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, НРег(Объект.Статус), СокрЛП(Объект.Причина));  
	Иначе
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %1'");
		ПредставлениеСостояния = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, НРег(Объект.Статус));  
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ВСКлиентСервер.ЦветСостоянияЭДВС(Объект.Состояние);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеЭДВС(Объект)
	
	Объект.Состояние = ВСКлиентСервер.ПолучитьСостояниеЭДВС(Объект);
		
КонецПроцедуры

#КонецОбласти 

#Область РедактироватьДокумент

///////////////////////////////////////////////////////////////////////////////
// Доступность элементов формы

&НаСервере
Процедура УстановитьДоступностьРеквизитов()
	
	МассивИменНедоступныхЭлементов = НовыйМассивИменНедоступныхЭлементов();
	МассивИменНедоступныхКоманд = НовыйМассивМассивИменНедоступныхКоманд();
		
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Ложь);
		УстановитьСвойствоДоступность(МассивИменНедоступныхКоманд, Истина);
	Иначе
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Истина);
		УстановитьСвойствоДоступность(МассивИменНедоступныхКоманд, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементов()
	
	Массив = Новый Массив;
		
	// Раздел A. Общий раздел
	Массив.Добавить("ТипФормы");
	Массив.Добавить("РегистрационныйНомер");	
	Массив.Добавить("Дата");
	Массив.Добавить("Номер");
	Массив.Добавить("ПричинаСписания");
	Массив.Добавить("ВидДетализации");
	Массив.Добавить("ВидКорректировкиДанных");
	Массив.Добавить("ПрефиксВидаДокумента");
	Массив.Добавить("НомерУчетногоДокумента");
	Массив.Добавить("НомерПакета");
	
	// Раздел B. Реквизиты отправителя
	Массив.Добавить("Отправитель");
	Массив.Добавить("ПоставщикИдентификаторИИН");
	Массив.Добавить("ПоставщикНаименование");
	Массив.Добавить("ПоставщикАдрес");
	Массив.Добавить("НомерДоговораСРПОтправитель");
	Массив.Добавить("НомерДоговораСРППолучатель");
	Массив.Добавить("ДатаДоговораСРПОтправитель");
	Массив.Добавить("ДатаДоговораСРППолучатель");
	
	// Раздел C. Реквизиты получателя
	Массив.Добавить("Получатель");
	Массив.Добавить("ПолучательИдентификаторИИН");
	Массив.Добавить("ПолучательНаименование");
	Массив.Добавить("ПолучательАдрес");	
		
	// Раздел D. Склад
	Массив.Добавить("СкладОтправитель");
	Массив.Добавить("СкладОтправительИдентификатор");
	Массив.Добавить("СкладОтправительНаименование");
	Массив.Добавить("СкладПолучатель");
	Массив.Добавить("СкладПолучательИдентификатор");
	Массив.Добавить("СкладПолучательНаименование");
	
	// Раздел E. Товары
	Массив.Добавить("ТоварыПодлежащиеУчетуВВС");
	Массив.Добавить("ТоварыНеПодлежащиеУчетуВВС");
		
	// Прочие сведения
	Массив.Добавить("ВерсияУТТН");
	Массив.Добавить("Идентификатор");
	Массив.Добавить("Статус");
	Массив.Добавить("КорректировкаИП");
	Массив.Добавить("КорректируемыйДокументЭДВС"); 
	
	// Сведения по ЭЦП
	Массив.Добавить("ЭЦП");
	Массив.Добавить("ТипПодписи");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция НовыйМассивМассивИменНедоступныхКоманд()
	
	Массив = Новый Массив;	
	
	// Команды таблиц формы команда "Перенести"
	Массив.Добавить("ИсходныеТоварыВСПеренестиИзИсходныеТоварыВС");
	Массив.Добавить("ТоварыВСПеренестиИзТоварыВС");	
	Массив.Добавить("ИсходныеТоварыПеренестиИзИсходныеТовары");
	Массив.Добавить("ТоварыПеренестиИзТовары");
	Массив.Добавить("ЗаполнитьИсточникиПроисхожденияИсходныеТовары");
	Массив.Добавить("ЗаполнитьИсточникиПроисхожденияИсходныеТоварыВС");
	Массив.Добавить("ЗаполнитьИсточникиПроисхожденияТовары");
	Массив.Добавить("ЗаполнитьИсточникиПроисхожденияТоварыВС");
	Массив.Добавить("ЗаполнитьПризнакиПроисхожденияТовары");
	Массив.Добавить("ЗаполнитьПризнакиПроисхожденияТоварыВС");
	Массив.Добавить("ТоварыВСЗаполнитьПризнакиЭкспортируемостиТоварыВС");	
	
	// Команды таблиц формы команда "Подбор по остаткам"
	Массив.Добавить("ИсходныеТоварыВСПодборИсходныеТовары");
	Массив.Добавить("ТоварыВСПодборТовары");
	Массив.Добавить("ИсходныеТоварыПодборИсходныеТовары");
	Массив.Добавить("ТоварыПодборТовары");
	Массив.Добавить("СкопироватьСтрокуИсходныхТоваров");
	
	//Команды добавленные при создании на сервере
	Массив.Добавить("КнопкаИзменитьИсходныеТовары");
	Массив.Добавить("КнопкаИзменитьИсходныеТоварыВС");
	Массив.Добавить("КнопкаИзменитьТовары");
	Массив.Добавить("КнопкаИзменитьТоварыВС");
	
	Массив.Добавить("ИсходныеТоварыВСЗаполнитьТоварыБезФизМетки");
	Массив.Добавить("ТоварыВСЗаполнитьПоИсходнымТоварам");
	
	Массив.Добавить("ПересчитатьСуммуПоСтрокамТоварыВС");
	Массив.Добавить("ПересчитатьСуммуПоСтрокамТовары");
	
	Массив.Добавить("ПолучитьИДИсходныхТоваровДИТ");
	
	//Команды таблиц формы команда "Заполнить цены"
	Массив.Добавить("ИсходныеТоварыЗаполнитьЦеныИсходныеТовары");
	Массив.Добавить("ИсходныеТоварыВСЗаполнитьЦеныИсходныеТоварыВС");
	Массив.Добавить("ТоварыЗаполнитьЦеныТовары");
	Массив.Добавить("ТоварыВСЗаполнитьЦеныТоварыВС");
	Массив.Добавить("ТоварыВСЗаполнитьЦеныТоварыВСПоСебестоимости");
	Массив.Добавить("ТоварыЗаполнитьЦеныТоварыПоСебестоимости");
	Массив.Добавить("ИсходныеТоварыЗаполнитьЦеныИсходныеТоварыПоСебестоимости");
	Массив.Добавить("ИсходныеТоварыВСЗаполнитьЦеныИсходныеТоварыВСПоСебестоимости");
	
	//Команды таблицы "Исходные товары" вкладка "Прочие товары"
	Массив.Добавить("ИсходныеТоварыСкопироватьСтрокуИсходныхТоваров");

	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойствоТолькоПросмотр(Знач МассивИменЭлементовФормы, Знач ТолькоПросмотр)
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотр;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДоступность(Знач МассивИменЭлементовФормы, Знач Доступность)
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизиты(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Ложь);
	Иначе
		ТекстВопроса = НСтр("ru = 'Разрешить редактирование реквизитов документа?'");
		РедактироватьНедоступныеРеквизитыЗавершение = Новый ОписаниеОповещения("РедактироватьНедоступныеРеквизитыЗавершение", ЭтаФорма);
		ПоказатьВопрос(РедактироватьНедоступныеРеквизитыЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуТовары()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("ТоварыВС", "ТоварыВС");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	
	КоличествоТоварыВС = Объект.ТоварыВС.Количество();
	КоличествоТоварыНЕВС  = Объект.Товары.Количество(); 
	
	Если КоличествоТоварыВС >=КоличествоТоварыНЕВС Тогда
		АктивныйЭлемент = "ТоварыВС";
	Иначе
		АктивныйЭлемент = "ТоварыНеПодлежащиеУчетуВВС";
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы[АктивныйЭлемент];
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РедактироватьНедоступныеРеквизитыНаСервере(Знач НовоеЗначениеПометки)
	
	Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка	= НовоеЗначениеПометки;
	УправлениеФормой();
		
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ИсходныеТоварыВСКоличествоПриИзменении(Элемент)
	
	Если Объект.ТипФормы <> ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") Тогда
		СтрокаТабличнойЧасти = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
    РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка")
		И СтрокаТабличнойЧасти.Количество <> 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество должно быть равно 1!'");
		Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Количество";
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");	
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.КонвертацияМеждуЕИ") Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти);
		Иначе
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	
	Если Объект.ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.КонвертацияМеждуЕИ") Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти);
		Иначе
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ИсходныеТовары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ИсходныеТовары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиПроисхожденияПоОстаткам(ОчищатьИсточники = Ложь, ИмяТабличнойЧасти)
	
	Если ОчищатьИсточники Тогда
		Для Каждого СтрокаТЧ ИЗ Объект[ИмяТабличнойЧасти] Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ИсточникПроисхождения) Тогда
				СтрокаТЧ.ИсточникПроисхождения =  ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЭлектронныйДокументВС"));
	ОбработкаОбменЭСФ.ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ДокОбъект, ,ИмяТабличнойЧасти);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
			
	ЗаполнитьИсточникиПроисхожденияПоОстаткам(Истина, Параметры.ИмяТабличнойЧасти); 
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "РазделE" Тогда
		УстановитьТекущуюСтраницуТовары(); 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТоварыВС.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыВСИсточникПроисхождения" 
		И Элемент.ТекущийЭлемент.ТолькоПросмотр	Тогда 
		Источник = ТекущиеДанные.ИсточникПроисхождения;
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			ПоказатьЗначение(, Источник);
		КонецЕсли; 
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыВСИсточникПроисхожденияПолучатель"
		И Элемент.ТекущийЭлемент.ТолькоПросмотр	Тогда 	
		Источник = ТекущиеДанные.ИсточникПроисхожденияПолучатель;
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			ПоказатьЗначение(, Источник);
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыИсточникПроисхождения" 
		И Элемент.ТекущийЭлемент.ТолькоПросмотр	Тогда 
		Источник = ТекущиеДанные.ИсточникПроисхождения;
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			ПоказатьЗначение(, Источник);
		КонецЕсли; 		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыИсточникПроисхожденияПолучатель"
		И Элемент.ТекущийЭлемент.ТолькоПросмотр	Тогда 	
		Источник = ТекущиеДанные.ИсточникПроисхожденияПолучатель;
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			ПоказатьЗначение(, Источник);
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСкладаДляЭДВСГТДПоИмпорту() 
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДекларацияНаТовары") Тогда
		
		СкладНераспределенныхТоваров = ВССервер.ПолучитьСкладНераспределенныхТоваровОрганизации(Объект.Организация);
		
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", СкладНераспределенныхТоваров));
		
		Элементы.СкладОтправитель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСкладов()
	
	//Параметры выбора склада отправителя
	НовыйМассивПараметровСкладаОтправителя = Новый Массив;
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		НовыйМассивПараметровСкладаОтправителя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.СтруктурноеПодразделение"));
	Иначе
		НовыйМассивПараметровСкладаОтправителя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;
	//Параметры выбора склада получателя
	НовыйМассивПараметровСкладаПолучателя = Новый Массив;
	//В случае внутреннего перемещения, возможно перемещение между разными организациями (филиалами)
	Если Объект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Тогда
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
			НовыйМассивПараметровСкладаПолучателя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.СтруктурноеПодразделениеПолучатель"));
		Иначе
			НовыйМассивПараметровСкладаПолучателя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.ОрганизацияПолучатель"));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
			НовыйМассивПараметровСкладаПолучателя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.СтруктурноеПодразделение"));
		Иначе
			НовыйМассивПараметровСкладаПолучателя.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СкладОтправитель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассивПараметровСкладаОтправителя);
	Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассивПараметровСкладаПолучателя);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦены(ИмяТабличнойЧасти)
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);	
	Оповещение = Новый ОписаниеОповещения("ВыборТипаЦеныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВСКлиентПереопределяемый.ОткрытьФормуВыбораСправочникаТипыЦенНоменклатуры(Оповещение);
		
КонецПроцедуры

&НаСервере
Процедура ВыборТипаЦеныЗавершение(ВыбранныйТипЦены, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйТипЦены <> "" И ТипЗнч(ВыбранныйТипЦены) <> Тип("Неопределено")  Тогда
		
		ВССерверПереопределяемый.УстановитьЦеныПоТипу(ВыбранныйТипЦены, Объект, ДополнительныеПараметры.ИмяТабличнойЧасти);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСебестоимости(ИмяТабличнойЧасти)
	ЗаполнитьЦеныПоСебестоимостиНаСервере(ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоСебестоимостиНаСервере(ИмяТабличнойЧасти)
	ВССерверПереопределяемый.УстановитьЦеныПоСебестоимости(Объект, ИмяТабличнойЧасти);
КонецПроцедуры


#Область КорректировкаИП
	
&НаКлиенте
Процедура КорректировкаИППриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКорректируемыйДокументЭДВС() 
	
	Если Объект.КорректировкаИП Тогда
		Элементы.КорректируемыйДокументЭДВС.Видимость = Истина;
	Иначе
		Объект.КорректируемыйДокументЭДВС = Документы.ЭлектронныйДокументВС.ПустаяСсылка();
		Элементы.КорректируемыйДокументЭДВС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыйДокументЭДВСПриИзменении(Элемент)
	
	ЗаполнитьДокументПоДокументуКорректировки();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДокументПоДокументуКорректировки()
	
	Документы.ЭлектронныйДокументВС.ЗаполнитьПоДокументуКорректировки(Объект, Объект.КорректируемыйДокументЭДВС);
	
КонецПроцедуры

#КонецОбласти

#Область ПризнакВозможенЭкспорт

&НаКлиенте
Процедура ЗаполнитьПризнакиЭкспортируемостиТоварыВС(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПризнакЭкспорт();
	Иначе
		ПолучитьДанныеДляЗаполненияПризнакЭкспорт();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляЗаполненияПризнакЭкспорт()
		
	ДанныеДляЗаполненияПризнакЭкспорт = ПроверитьНаличиеПризнакЭкспорт(Объект.Ссылка);
	
	Если ДанныеДляЗаполненияПризнакЭкспорт.КоличествоСтрокТоварыЗаполненымПП > 0 Тогда
		ТекстВопроса = НСтр("ru = 'При выполнении команды признак экспортируемости для всех строк будет перезаполнен. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриЗаполненииПризнакЭкспорт", ЭтотОбъект, ДанныеДляЗаполненияПризнакЭкспорт.Хранилище);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПризнакЭкспортДляСтрокТЧ(ДанныеДляЗаполненияПризнакЭкспорт.Хранилище, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧМодифицированаЗаполнениеПризнакЭкспорт()
	
	ТекстВопроса = НСтр("ru = 'Нельзя заполнить ""Признак возможен экспорт"" не записанного документа. Записать документ?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриЗаполненииПризнакЭкспорт", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриЗаполненииПризнакЭкспорт(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ПолучитьДанныеДляЗаполненияПризнакЭкспорт();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриЗаполненииПризнакЭкспорт(Результат, ДанныеХранилища) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПризнакЭкспортДляСтрокТЧ(ДанныеХранилища, Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакЭкспортДляСтрокТЧ(ДанныеХранилища, ЗаполнитьВсе = Ложь)
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеХранилища);
	
	Если Данные <> Неопределено Тогда
		
		ТаблицаТоварыВсе = Данные.ТоварыВсе;
		
		ВССервер.ЗаполнитьПустыеПризнакиЭкспорт(ТаблицаТоварыВсе, Объект);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеПризнакЭкспорт(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Товар КАК Товар,
		|	Товары.КодТНВЭД КАК КодТНВЭД,
		|	Товары.ТипПошлины КАК ТипПошлины,
		|	Товары.ВозможенЭкспорт КАК ВозможенЭкспорт,
		|	""ТоварыВС"" КАК ИмяТЧ
		|ПОМЕСТИТЬ вт_Товары
		|ИЗ
		|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Товары.Ссылка КАК Ссылка,
		|	вт_Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_Товары.НомерСтроки КАК НомерСтроки,
		|	вт_Товары.Товар КАК Товар,
		|	вт_Товары.КодТНВЭД КАК КодТНВЭД,
		|	вт_Товары.ТипПошлины КАК ТипПошлины,
		|	вт_Товары.ВозможенЭкспорт КАК ВозможенЭкспорт,
		|	вт_Товары.ИмяТЧ
		|ИЗ
		|	вт_Товары КАК вт_Товары
		|ГДЕ
		|	НЕ вт_Товары.ВозможенЭкспорт
		|
		|УПОРЯДОЧИТЬ ПО
		|	вт_Товары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Товары.Ссылка КАК Ссылка,
		|	вт_Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_Товары.НомерСтроки КАК НомерСтроки,
		|	вт_Товары.Товар КАК Товар,
		|	вт_Товары.КодТНВЭД КАК КодТНВЭД,
		|	вт_Товары.ТипПошлины КАК ТипПошлины,
		|	вт_Товары.ВозможенЭкспорт КАК ВозможенЭкспорт,
		|	вт_Товары.ИмяТЧ
		|ИЗ
		|	вт_Товары КАК вт_Товары
		|ГДЕ
		|	вт_Товары.ВозможенЭкспорт
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Товары.Ссылка КАК Ссылка,
		|	вт_Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_Товары.НомерСтроки КАК НомерСтроки,
		|	вт_Товары.Товар КАК Товар,
		|	вт_Товары.КодТНВЭД КАК КодТНВЭД,
		|	вт_Товары.ТипПошлины КАК ТипПошлины,
		|	вт_Товары.ВозможенЭкспорт КАК ВозможенЭкспорт,
		|	вт_Товары.ИмяТЧ
		|ИЗ
		|	вт_Товары КАК вт_Товары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	Результат = Запрос.ВыполнитьПакет();
	Пакеты = Результат.Количество();
	
	ДанныеДляЗаполненияПП = Новый Структура;
	ДанныеДляЗаполненияПП.Вставить("ТоварыНЕЗаполненымПП", Результат[Пакеты -3].Выгрузить());
	ДанныеДляЗаполненияПП.Вставить("ТоварыЗаполненымПП", Результат[Пакеты -2].Выгрузить());
	ДанныеДляЗаполненияПП.Вставить("ТоварыВсе", Результат[Пакеты -1].Выгрузить());
	
	ДанныеДляЗаполненияППВременноеХранилище = ПоместитьВоВременноеХранилище(ДанныеДляЗаполненияПП, УникальныйИдентификатор);
	
	КоличествоСтрокВПакетеИХранилище = Новый Структура;
	КоличествоСтрокВПакетеИХранилище.Вставить("Хранилище", ДанныеДляЗаполненияППВременноеХранилище);
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыНЕЗаполненымПП", ДанныеДляЗаполненияПП.ТоварыНЕЗаполненымПП.Количество());
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыЗаполненымПП", ДанныеДляЗаполненияПП.ТоварыЗаполненымПП.Количество());
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыВсе", ДанныеДляЗаполненияПП.ТоварыВсе.Количество());

	Возврат КоличествоСтрокВПакетеИХранилище;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ТоварыТоварПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ТоварПриИзмененииНаСервере(СтрокаТабличнойЧасти, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСТоварПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	ТоварПриИзмененииНаСервере(СтрокаТабличнойЧасти, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСТоварПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	ТоварПриИзмененииНаСервере(СтрокаТабличнойЧасти, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыТоварПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ИсходныеТовары.ТекущиеДанные;
	ТоварПриИзмененииНаСервере(СтрокаТабличнойЧасти, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСИсточникПроисхожденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти  = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	Дата = Объект.Дата;
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
	СтруктураЗначенийИП = Новый Структура;
	СтруктураЗначенийИП =  ИсточникПроисхожденияПриИзмененииНаСервере(ИсточникПроисхождения, Дата);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтруктураЗначенийИП, "НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС,КодТНВЭД,ДатаСертификатаПроисхождения,ТоварНаименованиеВРамкахТС,ФизическаяМетка, ТипПошлины, СтранаПроисхожденияТовара, СтранаПроисхожденияТовараКод, ДополнительныйИдентификатор, ПризнакПроисхождения, ГСВС, ТипПроисхождения, СоставнойКодГСВС");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсточникПроисхожденияПриИзмененииНаСервере(ИсточникПроисхождения, Дата)
	
	Возврат ВССерверПереопределяемый.ПолучитьДанныеИсточникаПроисхождения(Дата, ИсточникПроисхождения, , Ложь);
		
КонецФункции

&НаКлиенте
Процедура ИсходныеТоварыИсточникПроисхожденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти  = Элементы.ИсходныеТовары.ТекущиеДанные;
	Дата = Объект.Дата;
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
	СтруктураЗначенийИП = Новый Структура;
	СтруктураЗначенийИП =  ИсточникПроисхожденияПриИзмененииНаСервере(ИсточникПроисхождения, Дата);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтруктураЗначенийИП, "НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС,КодТНВЭД,ДатаСертификатаПроисхождения,ТоварНаименованиеВРамкахТС,ФизическаяМетка, ТипПошлины, СтранаПроисхожденияТовара, СтранаПроисхожденияТовараКод, ДополнительныйИдентификатор, ПризнакПроисхождения");
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Ложь;
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") 
		И Объект.ИсходныеТоварыВС.Количество() = 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для типа формы ""Детализация импорта"" можно указывать только один исходный товар!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти  = Элементы.Товары.ТекущиеДанные;
	Дата = Объект.Дата;
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
	СтруктураЗначенийИП = Новый Структура;
	СтруктураЗначенийИП =  ИсточникПроисхожденияПриИзмененииНаСервере(ИсточникПроисхождения, Дата);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтруктураЗначенийИП, "НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС, КодТНВЭД, ДатаСертификатаПроисхождения, ТоварНаименованиеВРамкахТС, ФизическаяМетка, ТипПошлины, СтранаПроисхожденияТовара, СтранаПроисхожденияТовараКод, ДополнительныйИдентификатор, ПризнакПроисхождения");
	
	//пока заремарено. 
	//есть вероятность, что снова идентификацяи товаров станет выполнятсья при первом движении неидентифицированной партии
	//
	//Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда
	//	//по прочим товарам доп. ИД не контролируем
	//	//для внутреннего перемещения ИП-получатель всегда равен ИП-отправителю
	//	СтрокаТабличнойЧасти.ИсточникПроисхожденияПолучатель = ИсточникПроисхождения;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСИсточникПроисхожденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	Дата = Объект.Дата;
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
	СтруктураЗначенийИП = Новый Структура;
	СтруктураЗначенийИП =  ИсточникПроисхожденияПриИзмененииНаСервере(ИсточникПроисхождения, Дата);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураЗначенийИП, "НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС,КодТНВЭД,ДатаСертификатаПроисхождения,ТоварНаименованиеВРамкахТС,ФизическаяМетка, ТипПошлины, СтранаПроисхожденияТовара, СтранаПроисхожденияТовараКод, ДополнительныйИдентификатор, ПризнакПроисхождения, ГСВС, ТипПроисхождения, СоставнойКодГСВС");
	
	// Для списание товаров, ВС не подлежаших учету на ВС будем очищать ИП для получателя
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.СписаниеТоваровНеВС") Тогда
		СтрокаТабличнойЧасти.ИсточникПроисхожденияПолучатель = ПредопределенноеЗначение("Справочник.ИсточникиПроисхождения.ПустаяСсылка");
	КонецЕсли;
	
	// При выборе ИП признак "Товар виртуального склада" заполняется по данных ИП только для ручной корректировки
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаДанных") И Объект.ВидКорректировкиДанных = ПредопределенноеЗначение("Перечисление.ВидыКорректировкиДанных.РучнаяКорректировка") Тогда
		СтрокаТабличнойЧасти.ПризнакУчетаНаВиртуальномСкладе = СтруктураЗначенийИП.ПризнакУчетаНаВиртуальномСкладе;
	КонецЕсли;

	//пока заремарено. 
	//есть вероятность, что снова идентификацяи товаров станет выполнятсья при первом движении неидентифицированной партии
	//
	//Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда
	//	//если в исходном ИП идентиф. товара не заполнен, то он будет присвоен при перемещении товара
	//	Если НЕ ЗначениеЗаполнено(СтруктураЗначенийИП.ДополнительныйИдентификатор) Тогда
	//		СтрокаТабличнойЧасти.ИсточникПроисхожденияПолучатель 		= ПредопределенноеЗначение("Справочник.ИсточникиПроисхождения.ПустаяСсылка");
	//		СтрокаТабличнойЧасти.ДополнительныйИдентификаторПолучатель 	= 0;
	//	Иначе
	//		СтрокаТабличнойЧасти.ИсточникПроисхожденияПолучатель 		= ИсточникПроисхождения;
	//		СтрокаТабличнойЧасти.ДополнительныйИдентификаторПолучатель 	= СтруктураЗначенийИП.ДополнительныйИдентификатор;
	//	КонецЕсли;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакиПроисхожденияТовары(Команда)
	ЗаполнитьПризнакиПроисхожденияНаСервере("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакиПроисхожденияТоварыВС(Команда)
	ЗаполнитьПризнакиПроисхожденияНаСервере("ТоварыВС");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиПроисхожденияНаСервере(ИмяТабличнойЧасти)
				
	ТаблицаСтрок = Документы.ЭлектронныйДокументВС.ПолучитьЗначенияПризнаковПроисхождения(Объект[ИмяТабличнойЧасти].Выгрузить(,"НомерЗаявленияВРамкахТС, ГСВС, ТипПроисхождения, НомерСтроки"), Объект.Дата);
	
	Для Каждого Товар Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТаблицыСтрок = ТаблицаСтрок.Найти(Товар.НомерСтроки,"НомерСтроки");
		
		Если СтрокаТаблицыСтрок <> Неопределено Тогда
			
			Товар.ПризнакПроисхождения = СтрокаТаблицыСтрок.ПризнакПроисхождения;
			
			Если НЕ ЗначениеЗаполнено(Товар.ТипПошлины) Тогда
				Товар.ТипПошлины = СтрокаТаблицыСтрок.ТипПошлины;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Товар.ТипПроисхождения) Тогда
				Товар.ТипПроисхождения = СтрокаТаблицыСтрок.ТипПроисхождения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСДополнительныйИдентификаторПриИзменении(Элемент)
	//Сообщение о нежелательности редактирования ID
	Если ИспользоватьОбменЭСФЧерезAPI() И
		(Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки")
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаОстатков")
		ИЛИ Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Производство")
		ИЛИ (Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Детализация") 
			И (Объект.ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.Комплектация") 
			ИЛИ Объект.ВидДетализации = ПредопределенноеЗначение("Перечисление.ВидДетализации.Разукомплектация")))) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не рекомендуется корректировать значение Идентификатора товара, т.к. оно будет получено из сервера ВС.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСДополнительныйИдентификаторПолучательПриИзменении(Элемент)
	Если ИспользоватьОбменЭСФЧерезAPI() И
		Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда
		ТекстСообщения = НСтр("ru = 'Не рекомендуется корректировать значение Идентификатора товара склада-получателя, т.к. оно будет получено из сервера ВС.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСТоварНаименованиеВРамкахТСПриИзменении(Элемент)
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") Тогда
		Для Каждого СтрокаТовары Из Объект.ТоварыВС Цикл
			ТоварНаименованиеВРамкахТС = Элементы.ИсходныеТоварыВС.ТекущиеДанные.ТоварНаименованиеВРамкахТС;
			СтрокаТовары.ТоварНаименованиеВРамкахТС = ТоварНаименованиеВРамкахТС;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСНомерПозицииВДекларацииИлиЗаявленииПриИзменении(Элемент)
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") Тогда
		Для Каждого СтрокаТовары Из Объект.ТоварыВС Цикл
			НомерПозицииВДекларацииИлиЗаявлении = Элементы.ИсходныеТоварыВС.ТекущиеДанные.НомерПозицииВДекларацииИлиЗаявлении;
			СтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = НомерПозицииВДекларацииИлиЗаявлении;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ВСКлиентПереопределяемый.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ВСКлиентПереопределяемый.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, Истина, "ПослеВыбораСтруктурногоПодразделенияПолучателя");
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = ВСКлиентПереопределяемый.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация Тогда
			Объект.Организация = СтруктурноеПодразделениеОрганизация;
			ОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
		Если Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Объект.СтруктурноеПодразделение = СтруктурноеПодразделениеОрганизация;
			КонецЕсли;
			СтруктурноеПодразделениеПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = ВСКлиентПереопределяемый.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияПолучатель, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель);
		Если Результат.ИзмененаОрганизация Тогда
			Объект.ОрганизацияПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;
			ПолучательПриИзмененииНаСервере();
		КонецЕсли;
		Если Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если ТипЗнч(СтруктурноеПодразделениеОрганизацияПолучатель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;
			КонецЕсли;
			СтруктурноеПодразделениеПолучательПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	ВСКлиентПереопределяемый.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ ТипЗнч(СтруктурноеПодразделениеОрганизацияПолучатель) = Тип("СправочникСсылка.Организации")Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		СтруктурноеПодразделениеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	ВСКлиентПереопределяемый.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененаОрганизация ИЛИ ТипЗнч(СтруктурноеПодразделениеОрганизацияПолучатель) = Тип("СправочникСсылка.Организации") Тогда
		ПолучательПриИзмененииНаСервере();
	КонецЕсли;
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		СтруктурноеПодразделениеПолучательПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ИзменитьТабличныеЧасти

&НаКлиенте
Процедура ИзменитьИсходныеТовары()
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиДокументовНаСервере("ИсходныеТовары", НСтр("ru='Прочие исходные товары'"), Элементы.ИсходныеТовары.Имя);
	ВСКлиентПереопределяемый.ИзменитьТабличнуюЧастьДокумента("ИсходныеТовары", НСтр("ru='Прочие исходные товары'"), Элементы.ИсходныеТовары.Имя, ЭтаФорма, ПараметрыФормы);		
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсходныеТоварыВС()
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиДокументовНаСервере("ИсходныеТоварыВС", НСтр("ru='Исходные товары ВС'"), Элементы.ИсходныеТоварыВС.Имя);
	ВСКлиентПереопределяемый.ИзменитьТабличнуюЧастьДокумента("ИсходныеТоварыВС", НСтр("ru='Исходные товары ВС'"), Элементы.ИсходныеТоварыВС.Имя, ЭтаФорма, ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары()
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиДокументовНаСервере("Товары", НСтр("ru='Прочие товары'"), Элементы.Товары.Имя);
	ВСКлиентПереопределяемый.ИзменитьТабличнуюЧастьДокумента("Товары", НСтр("ru='Прочие товары'"), Элементы.Товары.Имя, ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТоварыВС()
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиДокументовНаСервере("ТоварыВС", НСтр("ru='Товары ВС'"), Элементы.ТоварыВС.Имя);
	ВСКлиентПереопределяемый.ИзменитьТабличнуюЧастьДокумента("ТоварыВС", НСтр("ru='Товары ВС'"), Элементы.ТоварыВС.Имя, ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧастиДокументовНаСервере(ИмяТабличнойЧасти, СинонимТабличнойЧасти, ИмяТаблицыФормы)
	
	Возврат ВССерверПереопределяемый.ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти, Объект, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ВССерверПереопределяемый.ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Объект, ЭтаФорма, Параметры);
	
	КоличествоСтрокТаблицы();
	
	УправлениеФормой();         
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуИсходныхТоваровВС(Команда)
	
	ВидДетализации = Объект.ВидДетализации;
	
	Если ЗначениеЗаполнено(Объект.ИсходныеТоварыВС) Тогда
		СкопироватьНаСервереИсходныеТовары("ИсходныеТоварыВС", "ТоварыВС", ВидДетализации);
	КонецЕсли;
	
	КоличествоСтрокТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуИсходныхТоваров(Команда)
	
	ВидДетализации = Объект.ВидДетализации;
	
	Если ЗначениеЗаполнено(Объект.ИсходныеТовары) Тогда
		СкопироватьНаСервереИсходныеТовары("ИсходныеТовары", "Товары", ВидДетализации);
	КонецЕсли;
	
	КоличествоСтрокТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеТипаПроисхожденияПоПризнакуПроисхождения (ТекущиеДанные)
	
	Если ТекущиеДанные.ПризнакПроисхождения = "1" ИЛИ ТекущиеДанные.ПризнакПроисхождения = "2" Тогда	
		ТекущиеДанные.ТипПроисхождения = ПредопределенноеЗначение("Перечисление.ТипПроисхожденияТоваровВС.Импорт");
	ИначеЕсли ТекущиеДанные.ПризнакПроисхождения = "3" ИЛИ ТекущиеДанные.ПризнакПроисхождения = "4"  Тогда
		ТекущиеДанные.ТипПроисхождения = ПредопределенноеЗначение("Перечисление.ТипПроисхожденияТоваровВС.Производство");
	ИначеЕсли ТекущиеДанные.ПризнакПроисхождения = "5" ИЛИ ТекущиеДанные.ПризнакПроисхождения = "6"  Тогда
		ТекущиеДанные.ТипПроисхождения = ПредопределенноеЗначение("Перечисление.ТипПроисхожденияТоваровВС.ПроисхождениеНеопределено");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПризнакПроисхождения (ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПризнакПроисхождения) Тогда
		ОпределениеТипаПроисхожденияПоПризнакуПроисхождения(ТекущиеДанные);
	Иначе 
		ТекущиеДанные.ТипПроисхождения = ПредопределенноеЗначение("Перечисление.ТипПроисхожденияТоваровВС.ПроисхождениеНеопределено");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПризнакПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТоварыПризнакПроисхождения (ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСПризнакПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТоварыВС.ТекущиеДанные;
	ТоварыПризнакПроисхождения (ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСПризнакПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
	ТоварыПризнакПроисхождения (ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыПризнакПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИсходныеТовары.ТекущиеДанные;
	ТоварыПризнакПроисхождения (ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьДляТипаФормыФизМетка

&НаКлиенте
Процедура ЗаполнитьТоварыБезФизМетки(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен склад отправитель!'");
		Поле = "СкладОтправитель";
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ИсходныеТовары.Количество() > 0 Тогда
		ТекстВопроса = НСтр(
		"ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");			
		ЗаполнитьТоварыБезФизическойМеткиЗавершение = Новый ОписаниеОповещения("ЗаполнитьТоварыБезФизическойМеткиЗавершение", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьТоварыБезФизическойМеткиЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьТоварыБезФизическойМетки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыБезФизическойМетки()
	
	Объект.ИсходныеТоварыВС.Очистить();
	
	Объект.ТоварыВС.Очистить();
	
	ИсходныеТоварыВС = Документы.ЭлектронныйДокументВС.ПолучитьТоварыБезФизическойМетки(Объект);
	
	Объект.ИсходныеТоварыВС.Загрузить(ИсходныеТоварыВС);
	
	РазбитьСтрокуИсходныеТоварыВС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыБезФизическойМеткиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТоварыБезФизическойМетки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазбитьСтрокуИсходныеТоварыВС()
	Для Каждого Товар Из Объект.ИсходныеТоварыВС Цикл
		 РазбитьСтрокуПоКоличествуТоваров(Объект.ТоварыВС, Товар, ЭтаФорма);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИсходнымТоварам(Команда)
	
	Объект.ТоварыВС.Очистить();
	РазбитьСтрокуИсходныеТоварыВС();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСПослеУдаления(Элемент)
	
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)

	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка") Тогда
		Объект.СкладПолучатель = Объект.СкладОтправитель;
		ЗаполнитьРеквизитыСклада(Объект.СкладПолучатель, Элементы.СкладПолучатель.Имя);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуИсходныеТовары(ТаблицаТовары, СтрокаТовар, Форма)	
	
	НоваяСтрока = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
	НоваяСтрока.ИсточникПроисхождения = Форма.ПолучитьПустоеЗначениеИсточниковПроисхождения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПустоеЗначениеИсточниковПроисхождения() Экспорт	
	Возврат ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
КонецФункции
			
&НаКлиентеНаСервереБезКонтекста
Процедура РазбитьСтрокуПоКоличествуТоваров(Товары, СтрокаТовар, Форма)
	
	КоличествоТоваров = СтрокаТовар.Количество;
	Пока КоличествоТоваров > 0 Цикл 
		ДобавитьСтрокуИсходныеТовары(Товары, СтрокаТовар, Форма);
		КоличествоТоваров = КоличествоТоваров - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОтбора(СтрокаДляОтбора);
		
	ПараметрыОтбора = Новый Структура();
	
	ПараметрыОтбора.Вставить("ТоварНаименование", 		 	 		СтрокаДляОтбора.ТоварНаименование);
	ПараметрыОтбора.Вставить("Товар", 		 		   	 			СтрокаДляОтбора.Товар);
	ПараметрыОтбора.Вставить("СоставнойКодГСВС",  		  	 		СтрокаДляОтбора.СоставнойКодГСВС);
	ПараметрыОтбора.Вставить("ГСВС", 			  		  	 		СтрокаДляОтбора.ГСВС);
	ПараметрыОтбора.Вставить("СтранаПроисхожденияТовара", 	 		СтрокаДляОтбора.СтранаПроисхожденияТовара);
	ПараметрыОтбора.Вставить("СтранаПроисхожденияТовараКод", 		СтрокаДляОтбора.СтранаПроисхожденияТовараКод);
	ПараметрыОтбора.Вставить("КодТНВЭД", 					 		СтрокаДляОтбора.КодТНВЭД);
	ПараметрыОтбора.Вставить("ТипПошлины", 							СтрокаДляОтбора.ТипПошлины);
	ПараметрыОтбора.Вставить("ТипПроисхождения", 			 		СтрокаДляОтбора.ТипПроисхождения);
	ПараметрыОтбора.Вставить("ЕдиницаИзмеренияКод", 		 		СтрокаДляОтбора.ЕдиницаИзмеренияКод);
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения", 		   	 		СтрокаДляОтбора.ЕдиницаИзмерения);
	ПараметрыОтбора.Вставить("Цена", 								СтрокаДляОтбора.Цена);
	ПараметрыОтбора.Вставить("НомерЗаявленияВРамкахТС", 	 		СтрокаДляОтбора.НомерЗаявленияВРамкахТС);
	ПараметрыОтбора.Вставить("ТоварНаименованиеВРамкахТС", 	 	    СтрокаДляОтбора.ТоварНаименованиеВРамкахТС);
	ПараметрыОтбора.Вставить("НомерПозицииВДекларацииИлиЗаявлении", СтрокаДляОтбора.НомерПозицииВДекларацииИлиЗаявлении);
		
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Процедура ИсходныеТоварыВСПередУдалением(Элемент, Отказ)
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка") Тогда
		ПараметрыОтбора = ПолучитьПараметрыОтбора(Элементы.ИсходныеТоварыВС.ТекущиеДанные);
		НайденныеСтроки = Объект.ТоварыВС.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Индекс = Объект.ТоварыВС.Индекс(Строка);
			Объект.ТоварыВС.Удалить(Индекс);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсходныеТоварыВСПриИзменении(Элемент)
	
	Если Объект.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ФизическаяМетка") Тогда
		МассивНеизменяемых = Новый Массив;
		Для Каждого Строка Из Объект.ИсходныеТоварыВС Цикл
			Если Строка = Элементы.ИсходныеТоварыВС.ТекущиеДанные Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора = ПолучитьПараметрыОтбора(Строка);
			НайденныеСтроки = Объект.ТоварыВС.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Элемент Из НайденныеСтроки Цикл
				МассивНеизменяемых.Добавить(Элемент);
			КонецЦикла;
		КонецЦикла;
		
		Объект.ТоварыВС.Очистить();
		
		Если Объект.ИсходныеТоварыВС.Количество() > 0 Тогда
			
			Для Каждого СтрокаНеизменяемых Из МассивНеизменяемых Цикл
				ДобавитьСтрокуИсходныеТовары(Объект.ТоварыВС, СтрокаНеизменяемых, ЭтаФорма);
			КонецЦикла;
			
			СтрокаТовар = Элементы.ИсходныеТоварыВС.ТекущиеДанные;
			
			РазбитьСтрокуПоКоличествуТоваров(Объект.ТоварыВС, СтрокаТовар, ЭтаФорма);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НомерУчетногоДокумента

&НаКлиенте
Процедура ПрефиксВидаДокументаПриИзменении(Элемент)
	ЗаполнитьПолныйНомерДокумента(Объект, ПолныйНомерУчетногоДокумента);
КонецПроцедуры

&НаКлиенте
Процедура НомерУчетногоДокументаПриИзменении(Элемент)
	ЗаполнитьПолныйНомерДокумента(Объект, ПолныйНомерУчетногоДокумента);
КонецПроцедуры

&НаКлиенте
Процедура НомерПакетаПриИзменении(Элемент)
	ЗаполнитьПолныйНомерДокумента(Объект, ПолныйНомерУчетногоДокумента);
КонецПроцедуры

#КонецОбласти

#Область ДанныеЗаголовкаЗакладок

&НаСервере
Процедура КоличествоСтрокТаблицы()
	
	Если Объект.ТипФормы = Перечисления.ТипыФормВС.Детализация 
		ИЛИ Объект.ТипФормы = Перечисления.ТипыФормВС.ФизическаяМетка Тогда
		КоличествоСтрок   = 0;
		КоличествоСтрокВС = 0;
	Иначе
		КоличествоСтрокВС = Объект.ТоварыВС.Количество();
		КоличествоСтрок   = Объект.Товары.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСПослеУдаления(Элемент)
	КоличествоСтрокТаблицы();
	УстановитьСостояниеЭДВС(Объект);
	СформироватьПредставлениеСостояния();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	КоличествоСтрокТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИДИсходныхТоваровДИТ(Команда)
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьДляИсходныхТоваровДетализации", Истина);	
	
	ВСКлиент.ПолучитьИдентификаторыТоваровУТТНИзВС(МассивЭД, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтрокамТоварыВС(Команда)
		
	Для Каждого СтрокаТаблицы Из Объект.ИсходныеТоварыВС Цикл
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество*СтрокаТаблицы.Цена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтрокамТовары(Команда)
	
	Для Каждого СтрокаТаблицы Из Объект.ТоварыВС Цикл
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество*СтрокаТаблицы.Цена;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Неопределено, "Отправитель", Объект.СтруктурноеПодразделение);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ОтправительНаименование, ОтправительИдентификатор, ОтправительАдрес");
	Иначе
		СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Объект.Организация, "Отправитель", Неопределено);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ОтправительНаименование, ОтправительИдентификатор, ОтправительАдрес");
	КонецЕсли;
	УстановитьПараметрыВыбораСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПриИзменении(Элемент)
	СтруктурноеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеПолучательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Неопределено, "Получатель", Объект.СтруктурноеПодразделениеПолучатель);
		ЗаполнитьЗначенияСвойств(Объект,СтруктураДанных,"ПолучательНаименование,ПолучательИдентификатор,ПолучательАдрес");
	Иначе
		СтруктураДанных = ВССерверПереопределяемый.ПолучитьРеквизитыОрганизации(Объект.ОрганизацияПолучатель, "Получатель", Неопределено);
		ЗаполнитьЗначенияСвойств(Объект,СтруктураДанных,"ПолучательНаименование,ПолучательИдентификатор,ПолучательАдрес");
	КонецЕсли;
	УстановитьПараметрыВыбораСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПолучательПриИзменении(Элемент)
	СтруктурноеПодразделениеПолучательПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти  

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
