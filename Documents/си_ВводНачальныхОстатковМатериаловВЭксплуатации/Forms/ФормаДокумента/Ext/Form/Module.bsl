#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриСозданииНаСервере(ЭтотОбъект);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	си_УчетСпецодеждыСервер.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	//КонецЕсли;	
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы="Справочник.Номенклатура.Форма.ФормаВыбора" ИЛИ ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ПереопределениеПроцедурБСПКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	
	Если ИмяСобытия = "ПолучитьВыбранныеЭлементы" Тогда
		Если Параметр.Идентификатор = УникальныйИдентификатор Тогда 
			ПолучитьВыбранныеЭлементы(Параметр.Адрес)
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	
	си_ОбщегоНазначенияСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПослеЗаписиНаСервере(ЭтотОбъект,ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_си_ВводНачальныхОстатковМатериаловВЭксплуатации", ПараметрыЗаписи, Объект.Ссылка);	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_ПереопределяемыеПроцедурыБККлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	УстановитьПризнакУчетаКПН();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_ПереопределяемыеПроцедурыБККлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПроверитьОстаточнуюСтоимость(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриАктивизацииЯчейки(Элемент)
	ПриАктивизацииСтрокиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НомерСтроки = Неопределено;
	ТЧ = Объект.Материалы;
	НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение));
	Если НайденныеСтроки.Количество()>0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыВопроса = Новый Структура("ТЧ, ВыбранноеЗначение", ТЧ, ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранная номенклатура присутствет в табличной части. Продолжить?'"), Режим, 0);
	Иначе
		НоваяСтрока = ТЧ.Добавить();
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетПередачиБУ, СчетПередачиНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
		ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, УчитыватьКПН, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетПередачиБУ, СчетПередачиНУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.МатериалыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Элементы.Материалы.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.МатериалыНоменклатура;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрана номенклатура!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	ПересчетКоэффициента();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.Материалы.ТекущиеДанные.Коэффициент Тогда
		Если Элементы.Материалы.ТекущиеДанные.Количество<>0 Тогда
			Элементы.Материалы.ТекущиеДанные.Количество = Элементы.Материалы.ТекущиеДанные.Количество / (Элементы.Материалы.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСостояниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
			ТекущиеДанные.ПодразделениеОрганизации=ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
			ТекущиеДанные.Сотрудник=ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
		ИначеЕсли ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
			ТекущиеДанные.ПодразделениеОрганизации 							= ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
			ТекущиеДанные.Сотрудник 										= ПредопределенноеЗначение("Справочник."+си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()+".ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодразделениеОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаДоступностиВыбора(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаДоступностиВыбора(СтандартнаяОбработка);
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Элементы.Материалы,СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокументыПередачи(Команда)
	ЗаполнитьДокументыПередачиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	си_УчетСпецодеждыКлиент.ПодборНоменклатуры(Элементы.Материалы,УникальныйИдентификатор,ПараметрыПодбора,ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ТЧ = Параметры.ТЧ;
	ВыбранноеЗначение = Параметры.ВыбранноеЗначение;
	
	НоваяСтрока = ТЧ.Добавить();
	НоваяСтрока.Номенклатура = ВыбранноеЗначение;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетПередачиБУ, СчетПередачиНУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ВедетсяУчетПоХарактеристикам = си_УчетСпецодеждыСерверПовтИсп.ВедетсяУчетПоХарактеристикам();
	
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_ПереопределениеПроцедурБККлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОпределитьЗначенияПараметровУчетнойПолитикиНУ();
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.МатериалыСотрудник);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   											= Форма.Объект;
	Элементы 											= Форма.Элементы;
	
	ОпределитьВидимостьНалоговогоУчета(Форма);
	
	Элементы.УчитыватьКПН.Видимость 					= Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.УчитыватьКПН.Доступность					= Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.МатериалыСостояние.СписокВыбора.ЗагрузитьЗначения(си_УчетСпецодеждыСервер.ПолучитьЗначенияСпискаСостояний());
	
	Если Объект.УчитыватьКПН = Ложь и Объект.ОтражатьВБухгалтерскомУчете = Ложь Тогда
		Элементы.ВидУчетаНУ.Видимость = Ложь;
		Объект.ВидУчетаНУ = "";
	Иначе
		Если Объект.УчитыватьКПН = Истина Тогда 
			Элементы.ВидУчетаНУ.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиДокумента()
	
	Элементы.МатериалыПодразделениеОрганизации.РедактированиеТекста 		= Ложь;
	Элементы.МатериалыСотрудник.РедактированиеТекста 						= Ложь;
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяВЭксплуатации") Тогда
			Элементы.МатериалыПодразделениеОрганизации.РедактированиеТекста = Истина;
			Элементы.МатериалыСотрудник.РедактированиеТекста 				= Истина;
			Элементы.МатериалыДокументПередачи.ОтметкаНезаполненного 		= Истина;
		ИначеЕсли ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
			Элементы.МатериалыПодразделениеОрганизации.РедактированиеТекста = Ложь;
			Элементы.МатериалыСотрудник.РедактированиеТекста 				= Ложь;
			Элементы.МатериалыДокументПередачи.ОтметкаНезаполненного 		= Истина;
			Элементы.МатериалыДокументПередачи.ОтметкаНезаполненного 		= Истина;
		ИначеЕсли ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая") Тогда
			Элементы.МатериалыПодразделениеОрганизации.РедактированиеТекста = Ложь;
			Элементы.МатериалыСотрудник.РедактированиеТекста 				= Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Материалы",                   "Материалы");
	
	АктивизироватьТабличнуюЧасть = общ_ПереопределяемыеПроцедурыБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	общ_ПереопределяемыеПроцедурыБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДокументыПередачиНаСервере()
	мОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПередачи) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
			Продолжить;
		КонецЕсли;
		
		Док = Документы.си_ПередачаМатериаловВЭксплуатацию.СоздатьДокумент();
		Док.Дата                         = ?(СтрокаТЧ.ДатаПередачиВЭксплуатацию='00010101',Объект.Дата,СтрокаТЧ.ДатаПередачиВЭксплуатацию);
		// Заполним реквизиты из стандартного набора.
		общ_ПереопределяемыеПроцедурыБКСервер.ЗаполнитьШапкуДокументаПоОснованию(Док, мОбъект);
		Док.ВидОперации = Перечисления.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача;
		
		Док.Комментарий                  = "Документ создан автоматически для ввода начальных остатков материалов в эксплуатации";
		Док.ФлагЗапретРедактирования = Истина;
		Док.Записать(РежимЗаписиДокумента.Запись);
		СтрокаТЧ.ДокументПередачи = Док.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьЗначенияПараметровУчетнойПолитикиНУ()
	Дата = Объект.Дата;
	Организация = Объект.Организация;
	ОтражатьВНалоговомУчете = объект.УчитыватьКПН;
	мУчетнаяПолитикаПоНалоговомуУчету = Неопределено;
	мУчетнаяПолитикаПоБухгалтерскомуУчету = Неопределено;
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Организация, Дата,Объект.УчитыватьКПН);	
	ПоддержкаУчетаВременныхРазниц = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, 	Дата);
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДоступностиВыбора(СтандартнаяОбработка)
	ТекущиеДанные=Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяНаСкладе") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.НазначениеИспользования = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования),СтрокаТабличнойЧасти.НазначениеИспользования,СтрокаТабличнойЧасти.Номенклатура.си_ОсновноеНазначениеИспользования);
	
	Документы.си_ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОстаточнуюСтоимость(ТекущиеДанные)
	
КонецПроцедуры

// пересчет количества и коэффициента
//
&НаКлиенте
Процедура ПересчетКоэффициента() Экспорт
	мКоэффициент = Элементы.Материалы.ТекущиеДанные.Коэффициент;
	Элементы.Материалы.ТекущиеДанные.Коэффициент = си_УчетСпецодеждыСервер.КоэффициентПересчетаВБазовую(Элементы.Материалы.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Материалы.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Материалы.ТекущиеДанные.Коэффициент Тогда
		Элементы.Материалы.ТекущиеДанные.Количество = Элементы.Материалы.ТекущиеДанные.Количество / (Элементы.Материалы.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУчетаКПН()
	// установим признак учета КПН
	Объект.УчитыватьКПН = (ОрганизацияПлательщикНалогаНаПрибыль И общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию( "ОтражатьДокументыВНалоговомУчете"));
	си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.си__ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
КонецПроцедуры

// Процедура определяет видимость реквизитов налогового учета
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВидимостьНалоговогоУчета(Форма)
	Объект 							= Форма.Объект;
	Форма.ВидимостьНалоговогоУчета 	= Объект.ОтражатьВБухгалтерскомУчете И Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазниц ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеЭлементы(Адрес)
	ВыбранныеЭлементы = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ВыбранныеЭлементы) = Тип("ТаблицаЗначений") Тогда
		СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ВыбранныеЭлементы, "Номенклатура", Истина), Объект);
		Для Каждого ЭлементТаблицы Из ВыбранныеЭлементы Цикл
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", ЭлементТаблицы.Номенклатура);
			Если Не ВыбранныеЭлементы.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЭлементТаблицы.ЕдиницаИзмерения);
			КонецЕсли;
			Если Не ВыбранныеЭлементы.Колонки.Найти("Сотрудник") = Неопределено Тогда
				СтруктураОтбора.Вставить("Сотрудник", Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()].ПустаяСсылка());
			КонецЕсли;
			СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, "Материалы", СтруктураОтбора);
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
				// Нашли, увеличиваем количество в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ЭлементТаблицы.Количество;
			Иначе
				НоваяСтрока = Объект.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементТаблицы);
				ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,НазначениеИспользования, Количество,СчетПередачиБУ, СчетПередачиНУ");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
				ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ, УчитыватьКПН, Склад");
				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
				ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ТипЦен"                  , Неопределено);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Неопределено);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация,  УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСчетаУчетаСпискаНоменклатуры(
	ДанныеОбъекта.Организация, общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	СтрокиКУдалению = Новый Массив;	
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
			Продолжить;	
		КонецЕсли;
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СчетаУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.си_ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Материалы", СчетаУчета);
		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
		ТаблицаОбработки.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Объект.Материалы.Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Материалы" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация,  УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСведенияОСпискеНоменклатуры(
	общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		
		СтрокаТабличнойЧасти = общ_ПереопределениеПроцедурБККлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		ИначеЕсли СтрокаТовара.Номенклатура.си_ЯвляетсяСпецодеждойИнвентарем Тогда
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Выбранная номенклатурная позиция """ + СтрокаТовара.Номенклатура + """ не является спецодеждой/инвентарем. Добавление в табличную часть не произведено");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	общ_ПереопределениеПроцедурБСПКлиент.ФормаОбъекта_ПриОткрытии(ЭтотОбъект,Отказ);
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		си_УчетСпецодеждыКлиент.ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_ПереопределяемыеПроцедурыБККлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_ПереопределяемыеПроцедурыБКСервер.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_ПереопределяемыеПроцедурыБКСервер.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


//СтандартныеОбработчикиФормыБСП.Начало


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	//Элементы.Товары.ТолькоПросмотр       = Ложь;
	//Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	//Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	

	//Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

//СтандартныеОбработчикиФормыБСП.Конец

// СтараяБСП

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	общ_ПереопределениеПроцедурБСПСервер.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ общ_ПереопределениеПроцедурБСПКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		общ_ПереопределениеПроцедурБСПКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;	

КонецПроцедуры

// Конец СтараяБСП

#КонецОбласти
