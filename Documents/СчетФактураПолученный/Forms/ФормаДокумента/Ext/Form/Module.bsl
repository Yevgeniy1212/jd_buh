////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	ЭСФСервер.СчетФактураПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбновитьПредставлениеСостоянияСФ();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// При создании исправленного счета-фактуры из документов поступления,
	// заполнение реквизитов ВидСчетаФактуры и ОсновнойСчетФактура
	// происходит после события ПриСозданииНаСервере,
	// поэтому при открытии формы необходимо обновить элемент ОсновнойСчетФактура.
	НастроитьПолеВводаОсновнойСчетФактура(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ЭСФКлиентСервер.ЭтоОповещениеПодсистемыЭСФ(ИмяСобытия) Тогда
		ЭСФОбработкаОповещенияНаСервере(ИмяСобытия, Параметр);
		
	ИначеЕсли Найти(ИмяСобытия, "Запись_") = 1 И Объект.ПодтвержденДокументамиОтгрузки Тогда
		Для Каждого СтрокаДокументыОснования Из Объект.ДокументыОснования Цикл 
			Если ТипЗнч(Источник) = ТипЗнч(СтрокаДокументыОснования.ДокументОснование) Тогда 
				ЭтаФорма.Прочитать();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Найти(ИмяСобытия, "Запись_") = 1 И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ДокументОснование")
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
	
	ИначеЕсли ИмяСобытия = "Запись_Сторнирование"
		И ТипЗнч(Параметр.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОбновитьПредставлениеСостоянияСФ();
		ЭтаФорма.Прочитать();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЭСФОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	ЭСФСервер.СчетФактураОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
	ОбновитьПредставлениеСостоянияСФ();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НематериальныеАктивы.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.НМА.НайтиСтроки(Новый Структура("НематериальныйАктив", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Нематериальный актив < %1 > уже выбран!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.НМА.Добавить();	
				НоваяСтрока.НематериальныйАктив = СтрокаМассива;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЭСФ.Форма.ФормаВыбора" Тогда                                       	
		
		ЭСФКлиент.ПредставлениеЭСФОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""счет-фактура (полученный)"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	ЭСФКлиент.ФормаСчетаФактурыПередЗаписью(ЭтаФорма, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УчетНДСиАкцизаКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	
	ЭСФСервер.ФормаСчетаФактурыПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);	
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УчетНДСиАкцизаКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
	ЭСФКлиент.ФормаСчетаФактурыПослеЗаписи(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) ИЛИ Объект.ДокументыОснования.Количество() = 0 Тогда
		Объект.ДатаСовершенияОборотаПоРеализации = Объект.Дата;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденДокументамиОтгрузкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	// Настройки поля "СтруктурноеПодразделениеОрганизация" в счет-фактуре зависят от признака "ПодтвержденДокументамиОтгрузки",
	// поэтому необходимо их переопределить локально, в остальных случаях используется процедура РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр 		 = Объект.ПодтвержденДокументамиОтгрузки;
	Элементы.СтруктурноеПодразделениеОрганизация.КнопкаВыпадающегоСписка = НЕ Объект.ПодтвержденДокументамиОтгрузки И НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизация.КнопкаВыбора 			 = НЕ Объект.ПодтвержденДокументамиОтгрузки;
	
	УстановитьДоступностьКомандыВставкиНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыВставкиНаСервере()
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, НЕ ОбщегоНазначения.ПустойБуферОбмена());
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиентСервер.ОбработатьИзмененияПоКнопкеЦеныИВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Изменился контрагент, табличная часть ""Документы-основания"" очищена'"));
		Объект.ДокументыОснования.Очистить();
		
	КонецЕсли;
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
			
			Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
				ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
				ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСчетаФактурыПриИзменении(Элемент)		
	ОпределитьОграничениеТипаДокументовОснования(Элементы.ДокументыОснованияДокументОснование);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСторноНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭСФКлиент.ПредставлениеСторноНажатие(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭСФКлиент.ПредставлениеЭСФНажатие(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияПриИзменении(Элемент)
	СпособПолученияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособПолученияПриИзмененииНаСервере()
	ЭСФСервер.ОбновитьПредставлениеЭСФ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостояниеДокументаНажатие(Элемент)
	Если ЗначениеЗаполнено(РегистраторСостоянияДокумента) Тогда
		ПоказатьЗначение(,РегистраторСостоянияДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОборотаВТабличнойЧастиПриИзменении(Элемент)
	
	Если Объект.ДатаОборотаВТабличнойЧасти Тогда
		
		СтруктураТабличныхЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
		
		Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда 
					СтрокаТаблицы.ДатаОборота = Объект.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный") Тогда
		
		ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
		
		Результат = ПолучитьФорму("Документ.СчетФактураПолученный.ФормаВыбора",	ПараметрыФормыВыбора, Элемент);
		
		Результат.Открыть();
		
		ЭлементОтбора = Результат.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидСчетаФактуры");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		Если Объект.ДатаОборотаВТабличнойЧасти Тогда		
			ТекущиеДанные.ДатаОборота = Объект.Дата;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, 
		|СтавкаНДС, СуммаНДС, ОборотПоРеализации, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,1);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли; 
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ОборотПоРеализации, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	 	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		Если НЕ ПроверитьДополнительныйСчетФактура() Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
	КонецЕсли; 
	 		
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.ДатаОборотаВТабличнойЧасти Тогда		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		ТекущиеДанные.ДатаОборота = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, ОборотПоРеализации, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ОСНМААктивПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.ДатаОборотаВТабличнойЧасти Тогда		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		ТекущиеДанные.ДатаОборота = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НМА

&НаКлиенте
Процедура НМАПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("НематериальныйАктив, Сумма, СтавкаНДС, СуммаНДС, ОборотПоРеализации, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.НМА.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ОСНМААктивПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.НМА.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура НМАОборотПоРеализацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.ДатаОборотаВТабличнойЧасти Тогда		
		ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
		ТекущиеДанные.ДатаОборота = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДОКУМЕНТЫОСНОВАНИЯ

&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПредыдущийНомер = Объект.ДокументыОснования.Количество() - 1;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументыОснования[ПредыдущийНомер].ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Перед добавлением новой строки необходимо заполнить колонку ""Документ-основание"" у предыдущей строки'"),
			,
			"ДокументыОснования[" + Формат(ПредыдущийНомер, "ЧН=0; ЧГ=") + "].ДокументОснование",
			"Объект",
			Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.ДокументыОснования.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьДублированиеДокументовОснований(Объект, СтрокаТабличнойЧасти.ДокументОснование, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Объект.ДокументОснование   = Неопределено;
		Объект.ОсновнойСчетФактура = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		Объект.ДокументОснование   = Неопределено;
		Объект.ОсновнойСчетФактура = Неопределено;
	Иначе
		Объект.ДокументОснование   = Объект.ДокументыОснования[0].ДокументОснование;
		ЗаполнитьОсновнойСчетФактуруНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДокументОснование = Неопределено;
	ОпределитьОграничениеТипаДокументовОснования(Элемент, ДокументОснование);
	
	ЗаполнитьПараметрыВыбораДокументовОснования(ЭтаФорма, ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДокументыОснования.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьДублированиеДокументовОснований(Объект, СтрокаТабличнойЧасти.ДокументОснование, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДокументыОснованияДокументОснованиеПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьПоДокументамОснованиям(Команда)
	
	ТекстВопроса = НСтр("ru='Табличные части будут презаполнены по данным документов-оснований. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПерезаполнитьПоДокументамОснованиям", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокументовОснований(Команда)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Список", "Заполнение", , , НСтр("ru='Документы-основания'")),
			,
			"ДокументыОснования",
			"Объект",
			);
		Возврат;
	КонецЕсли;
	
	СписокОснований = Новый СписокЗначений;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснование) Тогда 
			СписокОснований.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
		КонецЕсли;
	КонецЦикла;       
	
	Если СписокОснований.Количество() = 1 Тогда
		ДобавитьИзДокументовОснованийНаСервере(СписокОснований[0].Значение);
	ИначеЕсли СписокОснований.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзДокументовОснованийОбработкаВыбора", ЭтотОбъект);
		СписокОснований.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ-основание'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНМА(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",			 Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",					 Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",			 Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",	 ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.НематериальныеАктивы.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru='Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНМА(Команда)
	
	ИзменитьТабличнуюЧасть("НМА", НСтр("ru='НМА'"));
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента      = Объект.Дата;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	// Настройки поля "СтруктурноеПодразделениеОрганизация" в счет-фактуре зависят от признака "ПодтвержденДокументамиОтгрузки",
	// поэтому необходимо их переопределить локально, в остальных случаях используется процедура РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация
	Элементы.СтруктурноеПодразделениеОрганизация.ТолькоПросмотр 		 = Объект.ПодтвержденДокументамиОтгрузки;
	Элементы.СтруктурноеПодразделениеОрганизация.КнопкаВыпадающегоСписка = НЕ Объект.ПодтвержденДокументамиОтгрузки И НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизация.КнопкаВыбора 			 = НЕ Объект.ПодтвержденДокументамиОтгрузки;
	
	УстановитьПараметрыВыбораОсновногоСчетаФактуры(Элементы.ОсновнойСчетФактура, Объект);
	
	УстановитьДоступныеТипыДокументовОснований(Элементы.ДокументыОснованияДокументОснование);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;
	
	НастроитьПолеВводаОсновнойСчетФактура(Форма);
	
	Элементы.ТоварыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;

	// для элементов зависимых от значения "ПодтвержденДокументамиОтгрузки" установим свойство "ТолькоПросмотр"
	СтруктураЭлементов = Новый Структура("СтруктурноеПодразделениеОрганизация, Контрагент, ДоговорКонтрагента,
										 |Товары, Услуги, ОС, НМА, ДокументыОснования");
										 
	Для Каждого ТекущийЭлемент Из СтруктураЭлементов Цикл
		
		Элементы[ТекущийЭлемент.Ключ].ТолькоПросмотр = Объект.ПодтвержденДокументамиОтгрузки;
		
	КонецЦикла;
	
	СтруктураЭлементов = Новый Структура("ЦеныИВалюта, ФормаПерезаполнитьПоДокументамОснованиям, ФормаДобавитьИзДокументовОснований,
										 |ТоварыПодборТовары, ТоварыИзменитьТовары, УслугиПодборУслуги,
										 |ОСПодборОС, НМАПодборНМА");
										 
	Для Каждого ТекущийЭлемент Из СтруктураЭлементов Цикл
		
		Элементы[ТекущийЭлемент.Ключ].Доступность = НЕ Объект.ПодтвержденДокументамиОтгрузки;
		
	КонецЦикла;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ДатаСовершенияОборотаПоРеализации.Видимость = НЕ Объект.ДатаОборотаВТабличнойЧасти;
	
	Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = НЕ Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата); 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	СписокТабличныхЧастей.Добавить("ОС"	   , "ОС");
	СписокТабличныхЧастей.Добавить("НМА"   , "НМА");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Объект.НМА.Итог("СуммаНДС");
	Форма.ИтогиВсего    = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма") + Объект.ОС.Итог("Сумма") + Объект.НМА.Итог("Сумма");
	
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, СписокТабличныхЧастей = "Товары, Услуги, ОС, НМА")

	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "Всего" в табличных частях
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПолеВводаОсновнойСчетФактура(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный") 
		ИЛИ Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Исправленный") Тогда 
		
		Элементы.ОсновнойСчетФактура.Доступность = Истина;	
		
		Если ЗначениеЗаполнено(Объект.ОсновнойСчетФактура) Тогда
			Элементы.ОсновнойСчетФактура.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.ОсновнойСчетФактура.ОтметкаНезаполненного = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ОсновнойСчетФактура.Доступность = Ложь;	
		Элементы.ОсновнойСчетФактура.ОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Состояние счета-фактуры (Правый верхний угол)

// Обновляет представление гиперссылки "ПредставлениеСостояниеДокумента" в формах счетов-фактур.
//
// Параметры:
//  Форма - Форма, ФормаКлиентскогоПриложения - Форма счета-фактуры, 
//   в которой необходимо обновить представление гиперссылки "Сторно".
//
&НаСервере
Процедура ОбновитьПредставлениеСостоянияСФ()
			
	РеквизитыСостоянияСФ = ПолучитьРеквизитыСостоянияСФ(Объект.Ссылка);
	
	СостояниеДокумента = РеквизитыСостоянияСФ.Состояние;
	РегистраторСостоянияДокумента = РеквизитыСостоянияСФ.РегистраторСостояния;
	
	Если РеквизитыСостоянияСФ.Состояние = Перечисления.СостоянияДокументов.Действителен Тогда
		Элементы.ПредставлениеСостояниеДокумента.Заголовок = "";
		Элементы.ПредставлениеСостояниеДокумента.ЦветТекста = ЭСФКлиентСервер.ЦветЗеленый();
	Иначе
		Элементы.ПредставлениеСостояниеДокумента.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
		Элементы.ПредставлениеСостояниеДокумента.Заголовок = СокрЛП(СостояниеДокумента) + НСтр("ru=' документом: '") + СокрЛП(РегистраторСостоянияДокумента);
	КонецЕсли;	
	
КонецПроцедуры

// Определяет статус действительности документа и документ, изменивший его статус (для отозванных и аннулированных)
//
&НаСервере
Функция ПолучитьРеквизитыСостоянияСФ(Ссылка)
		
	РеквизитыСостоянияСФ = Новый Структура("Состояние, РегистраторСостояния", Перечисления.СостоянияДокументов.Действителен, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыПрекратившиеДействие.Регистратор КАК РегистраторСостояния,
	|	СчетаФактурыПрекратившиеДействие.Состояние
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(, СчетФактура = &СчетФактура) КАК СчетаФактурыПрекратившиеДействие";
	
	Запрос.УстановитьПараметр("СчетФактура", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат РеквизитыСостоянияСФ;
	КонецЕсли;                   	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(РеквизитыСостоянияСФ, Выборка);
	
	Возврат РеквизитыСостоянияСФ;
	
КонецФункции

// Цены и валюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость   = Объект.УчитыватьНДС;
	
	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогоВсегоНДС.Заголовок = НСтр("ru='НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогоВсегоНДС.Заголовок = НСтр("ru='НДС (сверху)'");
	КонецЕсли;
		
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	// Выполняем общие действия для всех документов при изменении Организация.
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	Объект.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Организация);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Изменилась организация, табличная часть ""Документы-основания"" очищена'"));
		Объект.ДокументыОснования.Очистить();
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ОсновнойСчетФактура) Тогда
		
		ОрганизацияСчетФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОсновнойСчетФактура, "Организация");
		Если ОрганизацияСчетФактуры <> Объект.Организация Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Организация основного счета-фактуры не соответствует организации документа. Поле ""Основной счет-фактура"" очищено.'"));
			Объект.ОсновнойСчетФактура = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораОсновногоСчетаФактуры(Элементы.ОсновнойСчетФактура, Объект);
	ЗаполнитьПараметрыВыбораДокументовОснования(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	Иначе 
		ЗаполнитьПараметрыВыбораДокументовОснования(ЭтаФорма);
	КонецЕсли;
	
	Объект.Поставщик = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Контрагент);
	
	УстановитьПараметрыВыбораОсновногоСчетаФактуры(Элементы.ОсновнойСчетФактура, Объект);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		ТекущийДоговорКонтрагента = Неопределено;
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	Иначе 
		ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);	
	Иначе                                                                                                                                              		
		Объект.УчастникиСовместнойДеятельности.Очистить();
	КонецЕсли;
	
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));

	ЗаполнитьПараметрыВыбораДокументовОснования(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)

	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	УправлениеФормой(ЭтаФорма);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		   = СведенияОНоменклатуре.Содержание;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОСНМААктивПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	// Рассчитываем реквизиты табличной части.
	УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры 

&НаСервере
Процедура ДокументыОснованияДокументОснованиеПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	СтрокаТабличнойЧасти = Объект.ДокументыОснования.НайтиПоИдентификатору(Элементы.ДокументыОснования.ТекущаяСтрока);
	
	ДокументОснование = СтрокаТабличнойЧасти.ДокументОснование;

	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование)  = Тип("ДокументСсылка.АвансовыйОтчет")
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда 

		ОчищатьДокументОснование = ПроверитьНаличиеСчетФактурыВАвансовомОтчете(ДокументОснование, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ="));
		Если ОчищатьДокументОснование Тогда
			СтрокаТабличнойЧасти.ДокументОснование = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходнаяОрганизация = Объект.Организация;
	ИсходныйКонтрагент  = Объект.Контрагент;
	
	Документы.СчетФактураПолученный.ОпределениеПараметровСчетаФактуры(Объект);
	
	ОбработатьИзменениеДоговора = ТекущийДоговорКонтрагента <> Объект.ДоговорКонтрагента;
	Если Объект.Организация <> ИсходнаяОрганизация Тогда 
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		ОбработатьИзменениеДоговора = Ложь;
	КонецЕсли;
	
	Если Объект.Контрагент <> ИсходныйКонтрагент Тогда 
		КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		ОбработатьИзменениеДоговора = Ложь;
	КонецЕсли;
	
	Если ОбработатьИзменениеДоговора Тогда 
		ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.ДокументыОснования.НайтиПоИдентификатору(Элементы.ДокументыОснования.ТекущаяСтрока);
	
	Если Объект.ДокументыОснования.Количество() = 1 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснование) Тогда 
		Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Подбор и изменение товаров, услуг, ОС, НМА

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = "";
		
	ПараметрыФормы = Новый Структура;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	Если ИмяТаблицы = "Товары" Тогда 
		ПредставлениеТаблицы = НСтр("ru='Товары'");
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныНоменклатуры", НСтр("ru='Цены номенклатуры'"));
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда 
		ПредставлениеТаблицы = НСтр("ru='Услуги'");
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныУслуг", НСтр("ru='Цены услуг'"));
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			    Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			    Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС); 
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда 		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;			
	Иначе                                                   		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если Не ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		Иначе
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда					
					Если ИмяТаблицы = "Товары" Тогда 						
						Продолжить;    						
					КонецЕсли;					
				Иначе         					
					Если ИмяТаблицы = "Услуги" Тогда  						
						Продолжить;     						
					КонецЕсли;     					
				КонецЕсли;        				
			КонецЕсли;
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.Содержание;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЭтоВставкаИзБуфера Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти); 
			КонецЕсли;
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;    
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, "Товары");
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервере
Функция ПроверитьДополнительныйСчетФактура()
	Возврат ?(Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный, Истина,Ложь);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОсновногоСчетаФактуры(Элемент, ДанныеОбъекта)
	
	МассивПараметров = Новый Массив();
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", ДанныеОбъекта.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", ДанныеОбъекта.Контрагент));
	КонецЕсли;
		
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублированиеДокументовОснований(Объект, ДокументОснование, Отказ)
	
	НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ДокументОснование));
	Если НайденныеСтроки.Количество() > 1 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ ""%1"" уже выбран в качестве документа-основания. Повторный выбор не допускается.'"), 
				ДокументОснование),
				,
				"ДокументыОснования[" + Формат(Объект.ДокументыОснования.Количество() - 1, "ЧН=0; ЧГ=") + "].ДокументОснование",
				"Объект",
				Отказ);
		ДокументОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоДокументамОснованиямНаСервере()
	
	УчетНДСиАкциза.ОчиститьТабЧасти(Объект);
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, СтрокаТабличнойЧасти.ДокументОснование);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.СчетФактураПолученный.СвернутьТабличныеЧасти(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзДокументовОснованийНаСервере(ДокументОснование)
	
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, ДокументОснование);

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.СчетФактураПолученный.СвернутьТабличныеЧасти(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеТипыДокументовОснований(Элемент)
	
	МассивТипов = Объект.Ссылка.Метаданные().ТабличныеЧасти["ДокументыОснования"].Реквизиты["ДокументОснование"].Тип.Типы();
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОснованияНаСервере(ДокументОснование, СписокРеквизитов, ПроверятьМетаданные = Истина)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПроверятьМетаданные Тогда 
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СписокРеквизитов);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОснование.Метаданные();
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого ТекущийРеквизит Из СтруктураРеквизитов Цикл
		Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитДокумента(ТекущийРеквизит.Ключ, МетаданныеДокумента) Тогда 
			СтруктураРеквизитов.Удалить(ТекущийРеквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура(СписокРеквизитов);
	Если СтруктураРеквизитов.Количество() <> 0 Тогда 
		ЗаполнитьЗначенияСвойств(Результат, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СтруктураРеквизитов));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
//Функция проверяет на соответствие выбранного документа "Авансовый отчет"
//если ссылка на данную счет-фактуру в данном документе.
//
Функция ПроверитьНаличиеСчетФактурыВАвансовомОтчете(ДокументОснование, НомерСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ДокументОснование
	|	И АвансовыйОтчетТовары.СчетФактура = &СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка = &ДокументОснование
	|	И АвансовыйОтчетПрочее.СчетФактура = &СчетФактура";

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",       Объект.Ссылка);

	Если Запрос.Выполнить().Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Для выбранного авансового отчета «%1» в табличных частях «Товары» и «Прочее» отсутствуют ссылки на данный Счет-фактуру.
		                            |Выбранный документ-основание очищен.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОснование);
		Поле = "ДокументыОснования[" + НомерСтроки + "].ДокументОснование";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
			
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьОграничениеТипаДокументовОснования(Элемент, ДокументОснование = Неопределено)
	
	Если ДокументОснование = Неопределено И Объект.ДокументыОснования.Количество() > 0 Тогда 
		ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный") Тогда
		ЭтоВозврат = Истина;
	Иначе
		ЭтоВозврат = Ложь;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда 
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ВозвратТоваровПоставщику");
	Иначе 
		МассивДоступныхТипов = Элемент.ДоступныеТипы.Типы();
		МассивДоступныхТипов.Удалить(МассивДоступныхТипов.Найти(Тип("ДокументСсылка.ВозвратТоваровПоставщику")));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыВыбораДокументовОснования(Форма, ДокументОснование = Неопределено)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если ДокументОснование = Неопределено И Объект.ДокументыОснования.Количество() > 0 Тогда 
		ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный") Тогда
		ЭтоВозврат = Истина;
	Иначе
		ЭтоВозврат = Ложь;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.СтруктурноеПодразделение", Объект.СтруктурноеПодразделение));
	КонецЕсли;
	
	РеквизитыОснования = Неопределено;
	Если (НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента))
		И ЗначениеЗаполнено(ДокументОснование) Тогда 
		РеквизитыОснования = ПолучитьРеквизитыОснованияНаСервере(ДокументОснование, "Контрагент, ДоговорКонтрагента", НЕ ЭтоВозврат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	ИначеЕсли РеквизитыОснования <> Неопределено И ЗначениеЗаполнено(РеквизитыОснования.Контрагент) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", РеквизитыОснования.Контрагент));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	ИначеЕсли РеквизитыОснования <> Неопределено И ЗначениеЗаполнено(РеквизитыОснования.ДоговорКонтрагента) Тогда 
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", РеквизитыОснования.ДоговорКонтрагента));
	КонецЕсли;
	
	Элементы.ДокументыОснованияДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновнойСчетФактуруНаСервере()
	Объект.ОсновнойСчетФактура = Документы.СчетФактураПолученный.НайтиОсновнойСчетФактуру(Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		
		СтруктураРезультатаВыполнения = Неопределено;
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	ОбновитьИтоги(ЭтаФорма);	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		
		// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);

        Возврат;
		
	КонецЕсли;

	РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПерезаполнитьПоДокументамОснованиям(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьПоДокументамОснованиямНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокументовОснованийОбработкаВыбора(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьИзДокументовОснованийНаСервере(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы)
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'ОС'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		СтруктураРеквизитов.Вставить("Количество");
		СтруктураРеквизитов.Вставить("Цена");
	КонецЕсли;
	
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ИмяТабличнойЧасти);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Услуги.ТолькоПросмотр       = Ложь;
	Элементы.Услуги.ИзменятьСоставСтрок  = Ложь;
	Элементы.Услуги.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр       = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.НМА.ТолькоПросмотр       = Ложь;
	Элементы.НМА.ИзменятьСоставСтрок  = Ложь;
	Элементы.НМА.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ДокументыОснования.ТолькоПросмотр       = Ложь;
	Элементы.ДокументыОснования.ИзменятьСоставСтрок  = Ложь;
	Элементы.ДокументыОснования.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;  
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("ЕдиницаИзмерения"); 
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("ОборотПоРеализации");
		КонецЕсли;     	
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("ОборотПоРеализации");
		КонецЕсли;
	КонецЕсли; 
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ Форма.Объект.ПодтвержденДокументамиОтгрузки И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчастникиСовместнойДеятельности",  	Объект.УчастникиСовместнойДеятельности);
	СтруктураПараметров.Вставить("ТипОбъекта",                      	"СчетФактураПолученный");
	СтруктураПараметров.Вставить("Договор",                      		Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУчастникиСовместнойДеятельности", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры


#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции
