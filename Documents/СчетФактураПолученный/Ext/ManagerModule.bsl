#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СоздатьДокументНаОсновании(Основание, РеквизитыСчетаФактуры) Экспорт
	
	НомерВходящегоДокумента = РеквизитыСчетаФактуры.НомерСчетаФактурыПолученного;
	ДатаВходящегоДокумента  = РеквизитыСчетаФактуры.ДатаСчетаФактурыПолученного;
	
	Если НЕ (ЗначениеЗаполнено(НомерВходящегоДокумента)
		   И ЗначениеЗаполнено(ДатаВходящегоДокумента)) Тогда
		Возврат Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
			
	СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
	СчетФактура.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
	
	СчетФактура.Заполнить(Основание);
	
	СчетФактура.НомерВходящегоДокумента = НомерВходящегоДокумента;
	СчетФактура.ДатаВходящегоДокумента  = ДатаВходящегоДокумента;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Проведен");
	
	СчетФактура.Дата = Макс(ДатаВходящегоДокумента, РеквизитыОснования.Дата);
	
	РежимЗаписи = ?(РеквизитыОснования.Проведен, 
		РежимЗаписиДокумента.Проведение, 
		РежимЗаписиДокумента.Запись);
	
	СчетФактура.Записать(РежимЗаписи);
	
	Возврат СчетФактура.Ссылка;
	
КонецФункции

// Процедура определяет валюту, контрагента и организацию счета-фактуры
// на основе анализа данных документов оснований
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.СчетФактураПолученный - объект данных формы или объект документа счета-фактуры, параметры которого необходимо определить
//	ДокументОснование - ДокументСсылка - документ, на основании которого необходимо заполнить основные параметры счета-фактуры
//
Процедура ОпределениеПараметровСчетаФактуры(Объект, ДокументОснование = Неопределено) Экспорт
	
	Если Объект.ДатаОборотаВТабличнойЧасти Тогда
		
		СтруктураТабличныхЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
		
		Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда 
					СтрокаТаблицы.ДатаОборота = Объект.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если (Объект.ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование)) И НЕ ЗначениеЗаполнено(ДокументОснование) тогда
		// Основание не выбрано, установим датой совершения оборота дату выписки счета-фактуры, прочие параметры не определяем
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
			Объект.ДатаСовершенияОборотаПоРеализации = Объект.Дата;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
		ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) 
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)) Тогда
			
		МетаданныеДокумента = ДокументОснование.Метаданные();
		СписокРеквизитов = "";
		
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "ВалютаДокумента,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "Организация,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "Контрагент,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "ДоговорКонтрагента,";
		КонецЕсли;
		СписокРеквизитов = Лев(СписокРеквизитов, СтрДлина(СписокРеквизитов) - 1);
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОснования);
		
	КонецЕсли;
	
	Если Объект.ДокументыОснования.Количество() = 1 Тогда
		Объект.ДокументОснование = ДокументОснование;
	КонецЕсли; 
	
	// установим плательщика и покупателя
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Объект.Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Контрагент);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Покупатель) Тогда
		Объект.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Организация);
	КонецЕсли;	
	
	// Дата совершения оборота = дата выписки документа реализации
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
		Объект.ДатаСовершенияОборотаПоРеализации = ДокументОснование.Дата;
	КонецЕсли;	
	
КонецПроцедуры 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
		БлокируемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("ПодтвержденДокументамиОтгрузки");
		БлокируемыеРеквизиты.Добавить("СтавкаНДС");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Поставщик");
		БлокируемыеРеквизиты.Добавить("Покупатель");
		БлокируемыеРеквизиты.Добавить("ВидСчетаФактуры");
		БлокируемыеРеквизиты.Добавить("ДатаСовершенияОборотаПоРеализации");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ОборотПоРеализации; ТоварыОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("Товары.ДатаОборота; ТоварыДатаОборота");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; УслугиПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.ОборотПоРеализации; УслугиОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("Услуги.ДатаОборота; УслугиДатаОборота");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСПодборОС, ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.ОборотПоРеализации; ОСОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("ОС.ДатаОборота; ОСДатаОборота");
		
		// таб. часть НМА
		БлокируемыеРеквизиты.Добавить("НМА; НМАПодборНМА, НМАИзменитьНМА");
		БлокируемыеРеквизиты.Добавить("НМА.НематериальныйАктив; НМАНематериальныйАктив");
		БлокируемыеРеквизиты.Добавить("НМА.Сумма; НМАСумма");
		БлокируемыеРеквизиты.Добавить("НМА.СтавкаНДС; НМАСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаНДС; НМАСуммаНДС");
		БлокируемыеРеквизиты.Добавить("НМА.ОборотПоРеализации; НМАОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("НМА.ДатаОборота; НМАДатаОборота");
		
		// таб. часть ДокументыОснования
		БлокируемыеРеквизиты.Добавить("ДокументыОснования");
		БлокируемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование; ДокументыОснованияДокументОснование");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

// Процедура выполняет заполниение табличной части по возврату ТМЗ.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Возврат товаров).
//
Процедура ЗаполнитьПоДокументуОснования(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Сторнирование") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, ДокументОснование");
		Если ЗначенияРеквизитов = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументОснование) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='В документе ""%1"" не заполнен сторнируемый документ. Нет данных для заполнения счета-фактуры'"),
									ДокументОснование);
		КонецЕсли;
		
		ДоступенВводНаОсновании = Ложь;
		Для Каждого ОбъектМетаданных Из Объект.Ссылка.Метаданные().ВводитсяНаОсновании Цикл 
			Если ТипЗнч(ЗначенияРеквизитов.ДокументОснование) = Тип("ДокументСсылка." + ОбъектМетаданных.Имя) Тогда
				ДоступенВводНаОсновании = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ДоступенВводНаОсновании Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Для сторнируемого документа ""%1"" не предусмотрен ввод счета-фактуры (полученного)'"),
									ЗначенияРеквизитов.ДокументОснование);
		КонецЕсли;
		
		ДатаОснования     = ЗначенияРеквизитов.Дата;
		ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
	Иначе
		
		ДатаОснования     = ДокументОснование.Дата;
	КонецЕсли;
	
	Объект.Дата = ДатаОснования;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ДокументОснование");
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументОснование) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.ДокументОснование, "Дата");	
			Объект.ДатаСовершенияОборотаПоРеализации = ЗначенияРеквизитов.Дата;	
			
		Иначе
			
			Объект.ДатаСовершенияОборотаПоРеализации = ДатаОснования;	
		КонецЕсли;
		
	Иначе
		Объект.ДатаСовершенияОборотаПоРеализации = ДатаОснования;
		
	КонецЕсли;	
	
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	Иначе
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") 
		И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	КонецЕсли;

	//создаем электронный СФ, если используется прямой обмен ЭСФ или обмен ЭСФ через XМLфайлы
	Если Константы.ИспользоватьОбменЭСФЧерезAPI.Получить() ИЛИ Константы.ИспользоватьОбменЭСФЧерезXML.Получить() Тогда
		Объект.СпособПолучения = Перечисления.СпособыОбменаДокументами.Электронно;
	КонецЕсли;

	Объект.ДокументОснование = ДокументОснование;
	Объект.ПодтвержденДокументамиОтгрузки = Истина;
	
	НоваяСтрока = Объект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ДокументОснование;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	//заполним табличные части
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, ДокументОснование);
	СвернутьТабличныеЧасти(Объект);	
	
	Объект.ОсновнойСчетФактура = НайтиОсновнойСчетФактуру(Объект);
	
	// установим плательщика и покупателя
	Объект.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Организация);
	Объект.Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Контрагент);
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.СчетФактураПолученный - объект данных формы или объект документа счета-фактуры, табличные части которого необходимо свернуть
//
Процедура СвернутьТабличныеЧасти(Объект) Экспорт
	
	Если Объект.Товары.Количество() > 1 Тогда
		Объект.Товары.Свернуть("Номенклатура, Цена, СтавкаНДС, ЕдиницаИзмерения, Коэффициент, НомерГТД, ДатаОборота", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 1 Тогда
		Объект.Услуги.Свернуть("Номенклатура, Содержание, Цена, СтавкаНДС, ДатаОборота", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если Объект.ОС.Количество() > 1 Тогда
		Объект.ОС.Свернуть("ОсновноеСредство, СтавкаНДС, ДатаОборота", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если Объект.НМА.Количество() > 1 Тогда
		Объект.НМА.Свернуть("НематериальныйАктив, СтавкаНДС, ДатаОборота", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;   

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПустаяДата",	'0001-01-01');
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если НЕ Реквизиты.УчитыватьНДС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПлательщикНДС = Реквизиты.Организация;	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") ИЛИ ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
		ПлательщикНДС = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	

	Запрос.УстановитьПараметр("ПлательщикНДС"								 , ПлательщикНДС);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета"				 , Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Содержание"				  				 	 , НСтр("ru = 'Списаны ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос.УстановитьПараметр("Ссылка"						  				 , ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары"				  				 , НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги"				  				 , НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимОС"				  	  				 , НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимНМА"				  	  				 , НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимТаблицаУчастникиСовместнойДеятельности", НСтр("ru = 'УчастникиСовместнойДеятельности'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаСчетФактураПолученный(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначенияБКВызовСервера.СформироватьТаблицуУчастниковСовместнойДеятельности(ПараметрыПроведения.СчетФактураПолученныйТаблицаУчастникиСовместнойДеятельности);

	ТаблицаШапкиДокумента = ПараметрыПроведения.СчетФактураПолученныйРеквизиты;
	
	ТаблицаПоТоварам = ПараметрыПроведения.СчетФактураПолученныйТаблицаТовары;
	Если ТаблицаПоТоварам.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоУслугам = ПараметрыПроведения.СчетФактураПолученныйТаблицаУслуги;
	Если ТаблицаПоУслугам.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоОС = ПараметрыПроведения.СчетФактураПолученныйТаблицаОС;
	Если ТаблицаПоОС.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоНМА = ПараметрыПроведения.СчетФактураПолученныйТаблицаНМА;
	Если ТаблицаПоНМА.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = ТаблицаШапкиДокумента[0];

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоТоварам.Количество() <> 0 Тогда 
		ТаблицаПоТоварам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоУслугам.Количество() <> 0 Тогда 
		ТаблицаПоУслугам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоОС.Количество() <> 0 Тогда 
		ТаблицаПоОС = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоНМА.Количество() <> 0 Тогда 
		ТаблицаПоНМА = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ПараметрыПроведения.СчетФактураПолученныйТаблицаТовары = ТаблицаПоТоварам; 
	ПараметрыПроведения.СчетФактураПолученныйТаблицаУслуги = ТаблицаПоУслугам;
	ПараметрыПроведения.СчетФактураПолученныйТаблицаОС     = ТаблицаПоОС;
	ПараметрыПроведения.СчетФактураПолученныйТаблицаНМА    = ТаблицаПоНМА;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты"				 , НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""СчетФактураПолученный"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДатаСовершенияОборотаПоРеализации = &ПустаяДата
	|				ИЛИ Реквизиты.ДатаОборотаВТабличнойЧасти
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаСовершенияОборотаПоРеализации
	|	КОНЕЦ КАК Период,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Поставщик КАК Поставщик,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсДокумента,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Дата,
	|	Реквизиты.ДатаОборотаВТабличнойЧасти
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СчетФактураПолученный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.ДокументРеализации,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Поставщик,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.КурсДокумента,
	|	Реквизиты.КратностьДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.Дата,
	|	Реквизиты.ДатаОборотаВТабличнойЧасти
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары"						   , НомераТаблиц.Количество());
    НомераТаблиц.Вставить("ВременнаяТаблицаУслуги"						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОС"	  						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНМА"	  						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
 	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС КАК НДС,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.ОборотПоРеализации,
	|	ТаблицаТовары.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.СчетФактураПолученный.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка КАК Ссылка,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС КАК НДС,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.ОборотПоРеализации,
	|	ТаблицаУслуги.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	Документ.СчетФактураПолученный.Услуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	1 КАК Количество,
	|	ТаблицаОС.СтавкаНДС,
	|	ТаблицаОС.Сумма,
	|	ТаблицаОС.СуммаНДС КАК НДС,
	|	ТаблицаОС.ОборотПоРеализации,
	|	ТаблицаОС.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.СчетФактураПолученный.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.Ссылка КАК Ссылка,
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив,
	|	1 КАК Количество,
	|	ТаблицаНМА.СтавкаНДС,
	|	ТаблицаНМА.Сумма,
	|	ТаблицаНМА.СуммаНДС КАК НДС,
	|	ТаблицаНМА.ОборотПоРеализации,
	|	ТаблицаНМА.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	Документ.СчетФактураПолученный.НМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
	|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
	|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
	|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
	|ИЗ
	|	Документ.СчетФактураПолученный.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
	|ГДЕ
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСчетФактураПолученный(НомераТаблиц)
	
	НомераТаблиц.Вставить("СчетФактураПолученныйРеквизиты"							   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураПолученныйТаблицаТовары"						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураПолученныйТаблицаУслуги"						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураПолученныйТаблицаОС"							   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураПолученныйТаблицаНМА"							   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураПолученныйТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*,
	|	&ПлательщикНДС КАК ПлательщикНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Поставщик КАК Поставщик,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.НДС,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.ОборотПоРеализации,
	|	ТаблицаТовары.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО Реквизиты.Регистратор = ТаблицаТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Поставщик КАК Поставщик,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.НДС,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.ОборотПоРеализации,
	|	ТаблицаУслуги.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслуги КАК ТаблицаУслуги
	|		ПО Реквизиты.Регистратор = ТаблицаУслуги.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Поставщик КАК Поставщик,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК Номенклатура,
	|	ТаблицаОС.Количество,
	|	ТаблицаОС.СтавкаНДС,
	|	ТаблицаОС.Сумма,
	|	ТаблицаОС.НДС,
	|	ТаблицаОС.ОборотПоРеализации,
	|	ТаблицаОС.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО Реквизиты.Регистратор = ТаблицаОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НМА"" КАК ИмяСписка,
	|	&СинонимНМА КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Поставщик КАК Поставщик,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК Номенклатура,
	|	ТаблицаНМА.Количество,
	|	ТаблицаНМА.СтавкаНДС,
	|	ТаблицаНМА.Сумма,
	|	ТаблицаНМА.НДС,
	|	ТаблицаНМА.ОборотПоРеализации,
	|	ТаблицаНМА.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНМА КАК ТаблицаНМА
	|		ПО Реквизиты.Регистратор = ТаблицаНМА.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаУчастникиСовместнойДеятельности"" КАК ИмяСписка,
	|	&СинонимТаблицаУчастникиСовместнойДеятельности КАК СинонимСписка,
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
	|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
	|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
	|ИЗ
	|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

// Добавляет движения, которые сторнируют исправляемый счет-фактуру и его дополнительные счета-фактуры.
//
Процедура ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(Объект, МассивСФПрекратившихДействие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ОсновнойСчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СторнируемыеСчетаФактуры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ОсновнойСчетФактура = &ОсновнойСчетФактура
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияСчетовФактурПолученных.Период,
	|	СведенияСчетовФактурПолученных.Регистратор,
	|	СведенияСчетовФактурПолученных.Налогоплательщик,
	|	СведенияСчетовФактурПолученных.Организация,
	|	СведенияСчетовФактурПолученных.СтруктурнаяЕдиница,
	|	СведенияСчетовФактурПолученных.СчетФактура,
	|	СведенияСчетовФактурПолученных.СтавкаНДС,
	|	СведенияСчетовФактурПолученных.Контрагент,
	|	СведенияСчетовФактурПолученных.ТМЗ,
	|	СведенияСчетовФактурПолученных.Поставщик,
	|	-СведенияСчетовФактурПолученных.СуммаВВалютеДоговора КАК СуммаВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.СуммаРегл КАК СуммаРегл,
	|	-СведенияСчетовФактурПолученных.СуммаНДСВВалютеДоговора КАК СуммаНДСВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.СуммаНДСРегл КАК СуммаНДСРегл,
	|	-СведенияСчетовФактурПолученных.ОборотПоРеализацииВВалютеДоговора КАК ОборотПоРеализацииВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.ОборотПоРеализацииРегл КАК ОборотПоРеализацииРегл,
	|	СведенияСчетовФактурПолученных.УчастникСовместнойДеятельности
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурПолученных КАК СведенияСчетовФактурПолученных
	|ГДЕ
	|	СведенияСчетовФактурПолученных.Регистратор В
	|			(ВЫБРАТЬ
	|				СторнируемыеСчетаФактуры.СчетФактура
	|			ИЗ
	|				СторнируемыеСчетаФактуры КАК СторнируемыеСчетаФактуры)
	|	И СведенияСчетовФактурПолученных.Активность = ИСТИНА";
	
	Запрос.УстановитьПараметр("ОсновнойСчетФактура", Объект.ОсновнойСчетФактура);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если МассивСФПрекратившихДействие.Найти(Выборка.СчетФактура) = Неопределено Тогда
			МассивСФПрекратившихДействие.Добавить(Выборка.СчетФактура);
		КонецЕсли;
		
		Если ТипЗнч(Выборка.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
			И Выборка.СчетФактура.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный")
			И ЗначениеЗаполнено(Выборка.СчетФактура.ОсновнойСчетФактура)
			И МассивСФПрекратившихДействие.Найти(Выборка.СчетФактура.ОсновнойСчетФактура) = Неопределено Тогда
			МассивСФПрекратившихДействие.Добавить(Выборка.СчетФактура.ОсновнойСчетФактура);
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Если исправляемый счет-фактура является исправленным, то сторнируются только движения, которые он сделал.
		// Движения, которые он сторнировал, не сторнируются, т.к. это приведет к двойному сторнированию.
		Если Выборка.Регистратор = Объект.ОсновнойСчетФактура
			И Выборка.СчетФактура <> Объект.ОсновнойСчетФактура Тогда
			Продолжить; // Это движение, которое сторнировал исправляемый счет-фактура, его сторнировать не требуется.
		КонецЕсли;
		
		СтрокаДвижения = Объект.Движения.СведенияСчетовФактурПолученных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, Выборка);
		
	КонецЦикла;
	
	// Сторнирующие движения записываются тем же периодом, что и сторнируемые движения. Этот период может быть закрыт.
	Объект.Движения.СведенияСчетовФактурПолученных.ДополнительныеСвойства.Вставить(ЭСФКлиентСервер.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
	Объект.Движения.СведенияСчетовФактурПолученных.Записывать = Истина;
	
КонецПроцедуры

// Добавляет движения, которые отмечают исправляемый счет-фактуру как прекративший действие
//
Процедура ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(Объект, МассивСФПрекратившихДействие) Экспорт
	
	МассивСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(Объект.Ссылка);
	Для Каждого Сторно Из МассивСторнирований Цикл
		Если НЕ Сторно.Ссылка.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Движения.СчетаФактурыПрекратившиеДействие.Записывать = Истина;
	
	Для Каждого СчетФактура Из МассивСФПрекратившихДействие Цикл
		СтрокаДвижения = Объект.Движения.СчетаФактурыПрекратившиеДействие.Добавить();
		СтрокаДвижения.Период = Объект.Дата;
		СтрокаДвижения.СчетФактура = СчетФактура;
		СтрокаДвижения.Состояние = Перечисления.СостоянияДокументов.Аннулирован;
	КонецЦикла;
	
КонецПроцедуры

// Процедура запрещает проведение документа,
// если связанный с ним исправляемый СФ не проведен
Процедура ПроверитьВозможностьПроведения(Объект, Отказ) Экспорт
		
	// Исправленный ЭСФ можно провести только если проведен документ, взамен которого он выписан
	// в противном случае сторно-записи не будут сформированы
	Если Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		
		Если НЕ Объект.ОсновнойСчетФактура.Проведен Тогда			
			
			ТекстСообщения = НСтр(
			"ru = 'Невозможно провести исправленный документ: ""%1"",
			|так как исправляемый документ не проведен: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка, Объект.ОсновнойСчетФактура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура запрещает отмену проведения документа,
// если для него выписаны и проведены исправленные документы
Процедура ПроверитьВозможностьОтменыПроведения(Объект, Отказ) Экспорт
		
	// Если текущий документ не актуален (исправлен другим), а так же сам влияет на актуальность др. документов
	// то отменять его проведение без корректировки связанных документов нельзя.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыПрекратившиеДействие.Регистратор
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(, СчетФактура = &Ссылка) КАК СчетаФактурыПрекратившиеДействие";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
				
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			ТекстСообщения = НСтр(
			"ru = 'Невозможно отменить проведение документа: ""%1"",
			|так как для документа проведен связанный документ: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка, Выборка.Регистратор);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
			
		КонецЦикла;
					 
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
		
		// Электронный счет-фактура
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭСФ";
		КомандаПечати.Представление = НСтр("ru = 'Электронный счет-фактура'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
		КомандаПечати.Порядок = 50;

		// Настраиваемый комплект документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭСФ";
		КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
		КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
		КомандаПечати.Порядок = 75;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать ЭСФ
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСФ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭСФ",
			НСтр("ru = 'Электронный счет-фактура'"),
			ПечатьЭСФ(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЭСФ.ПФ_MXL_ЭСФ");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьЭСФ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктуальныеЭСФ.ЭСФ КАК ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивЭСФ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭСФ");
	
	Возврат Документы.ЭСФ.ПечатьЭСФ(МассивЭСФ, ОбъектыПечати);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция НайтиОсновнойСчетФактуру(Объект) Экспорт 
	
	ОсновнойСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	ТекстЗапроса = "";
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта("Ссылка, ДокументОснование, ВидСчетаФактуры");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный")
		ИЛИ ТипЗнч(Объект) = Тип("Структура")
		ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		ДанныеОбъекта = Объект;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование) Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	&Ссылка,
			|	&ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТ_ВремДанныеСчетФактуры"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		Иначе 
			ТекстЗапроса = "ВЫБРАТЬ
			|	&Ссылка,
			|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТ_ВремДанныеСчетФактуры
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
		
	Иначе 
		// некорректный формат данных
		Возврат ОсновнойСчетФактура;
	КонецЕсли;
	
	Если ДанныеОбъекта.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДокументОснование.ДокументОснование КАК Основание
		|ПОМЕСТИТЬ ВТ_ДанныеСчетФактуры
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования
		|ГДЕ
		|	Ссылка В (ВЫБРАТЬ ДокументОснование.ДокументОснование.ОсновнойСчетФактура ИЗ &ИсточникДанных ГДЕ 
		|	Ссылка = &Ссылка
		|	И ДокументОснование.ДокументОснование Ссылка Документ.СчетФактураПолученный
		|	И ДокументОснование.ДокументОснование.ВидСчетаФактуры = Значение(Перечисление.ВидыСчетовФактур.Дополнительный))
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК ОсновнойСчетФактура
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_ДанныеСчетФактуры.Основание
		|			ИЗ
		|				ВТ_ДанныеСчетФактуры КАК ВТ_ДанныеСчетФактуры)
		|	И ТаблицаДокумента.Ссылка <> &Ссылка
		|	И НЕ ТаблицаДокумента.Ссылка В
		|				(ВЫБРАТЬ
		|					СчетаФактурыПрекратившиеДействие.СчетФактура
		|				ИЗ
		|					РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие)";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			Запрос.Текст = ТекстЗапроса + СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "ВТ_ВремДанныеСчетФактуры");
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеОбъекта.ДокументОснование);
			Запрос.УстановитьПараметр("ТаблицаДокумента", ДанныеОбъекта.ДокументыОснования.Выгрузить());
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "Документ.СчетФактураПолученный" + ?(НЕ ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование), ".ДокументыОснования", ""))
		КонецЕсли;

		Запрос.УстановитьПараметр("Ссылка", ДанныеОбъекта.Ссылка);
		
		СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновнойСчетФактура");
		
		Если СписокСчетовФактур.Количество() = 1 Тогда	
			ОсновнойСчетФактура = СписокСчетовФактур[0];			
		Иначе			
			ТекстСообщения = НСтр("ru = 'В счете-фактуре не удалось заполнить реквизит ""Основной счет-фактура"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеОбъекта.Ссылка, "ОсновнойСчетФактура");
		КонецЕсли;
		
	КонецЕсли;  
	
	Возврат ОсновнойСчетФактура;
	
КонецФункции

#КонецЕсли