
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// В случае, если НДС включается в стоимость
	// документ не имеет возможности отразить операцию по БУ.
	// Предполагается, что в этом случае отражение в бухгалтерском учете д/б
	// пройти в исходном первичном документе.
	Если НДСВключенВСтоимость И ОтражатьВБухгалтерскомУчете Тогда
		ТекстСообщения = НСтр("ru = 'Признаки отражения в бухгалтерском учете и включения НДС в стоимость не могут быть установлены совместно. В случае, если НДС включен в стоимость, операция не может быть отражена в бухгалтерском учете с помощью данного документа.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	МассивНепроверяемыхРеквизитов = Новый Массив();

	Если Товары.Количество() > 0 
		ИЛИ ЭтотОбъект.Услуги.Количество() > 0
		ИЛИ ЭтотОбъект.ОС.Количество() > 0
		ИЛИ ЭтотОбъект.НМА.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		
	КонецЕсли;

	Если НЕ УчитыватьКПН Тогда			
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	
	
	ПроверятьЗаполнениеСчетаУчетаНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		Если НЕ ЭтотОбъект.ОтражатьВБухгалтерскомУчете Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПроверятьЗаполнениеСчетаУчетаНУ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.НДСВидПоступления");
	КонецЕсли;	
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СчетУчетаНДС");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, Константы.ВалютаРегламентированногоУчета.Получить());

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;		
    
	//определим сумму документа
	СуммаДокумента  = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
	
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
  	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный", Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ (АНАЛИЗ ОСТАТКОВ И Т.П.)

	// Таблица взаиморасчетов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	Если ПараметрыПроведения.СтруктураТаблицДокумента.ТаблицаДокумента.Колонки.Найти("СуммаНДСВал") <> Неопределено Тогда
		ПараметрыПроведения.СтруктураТаблицДокумента.ТаблицаДокумента.Колонки.СуммаНДСВал.Имя = "СуммаНДСВзаиморасчетов";
	КонецЕсли;
	
	// Таблицы документа с корректировкой сумм по курсу авансов
	СтруктураТаблицДокумента = УчетДоходовРасходов.ПодготовитьТаблицыПоступленияПоКурсуАвансов(ПараметрыПроведения.СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты);
		
	Если СтруктураТаблицДокумента.ТаблицаДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено Тогда
		СтруктураТаблицДокумента.ТаблицаДокумента.Колонки.СуммаНДСВзаиморасчетов.Имя = "СуммаНДСВал";
	КонецЕсли;
		
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", НСтр("ru = 'АВ'"));
		
	// Зачет аванса
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке
		И ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации Тогда
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ВыполнитьКонтрольОтложенногоНДСкЗачету(Отказ, ПараметрыПроведения.ТаблицаНДС, ПараметрыПроведения.Реквизиты);	
	КонецЕсли;	
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетНДСИАкциза.СформироватьДвиженияКорректировкаПрочихОпераций(СтруктураТаблицДокумента.ТаблицаДокумента, ПараметрыПроведения.ТаблицаУчастникиСовместнойДеятельности,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценкаДвиженийДокумента,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// синхронизация данных с счет-фактурой
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(ДанныеЗаполнения) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , , ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоДокументамСписанияДС(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоЗаявлениюОВвозеТоваровИУплатеКосвенныхНалогов(ЭтотОбъект, ДанныеЗаполнения);
	            	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеОС") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоСписаниюОС(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоСписаниюТоваров(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоПоступлениюДопРасходов(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоАвансовомуОтчету(ЭтотОбъект, ДанныеЗаполнения);
		
	Иначе
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецЕсли
