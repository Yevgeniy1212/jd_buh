
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.УчитыватьНДС = Истина;
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	УстановитьВидимостьСчетовУчета();
	
	УправлениеФормой(ЭтаФорма);

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НематериальныеАктивы.Форма.ФормаВыбора" Тогда
		ОбработкаВыбораПодборНМАНаСервере(ВыбранноеЗначение)
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ Источник = СчетФактура) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");	
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда				
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);        
		
	Иначе
		
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаЗатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""регистрация прочих операций по приобретенным товарам (работам, услугам) в целях ндс"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;

	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если (Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение)
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее") Тогда								                							
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);								
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.НДСВключенВСтоимость И Объект.ОтражатьВБухгалтерскомУчете Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При включении НДС в стоимость отражение в бухгалтерском учете производится непосредственно в документе оприходования... Признак отражения в бухгалтерском учете не может быть установлен...'"));
		
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		Объект.УчитыватьКПН 			   = Ложь;		
		УправлениеФормой(ЭтаФорма);	
		Возврат;
		
	КонецЕсли;    
	
	Если (Объект.Товары.Количество() + Объект.Услуги.Количество() + Объект.ОС.Количество() + Объект.НМА.Количество()) > 0 Тогда
		
		//снимем признак также учета КПН
		Объект.УчитыватьКПН = Ложь;
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда
			
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("ОтражатьВБухгалтерскомУчете");
		
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ОтражатьВБухгалтерскомУчете");
		
		КонецЕсли;

	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
	ПерезаполнитьУплаченныйНДС();
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		
		// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПараметрыОткрытияФормыЦеныИВалюта());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма,,,, ПараметрыОткрытияФормыЦеныИВалюта());

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	Если Модифицированность Тогда				   
		ПерезаполнитьУплаченныйНДС();
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;

	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();	
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();
	Объект.НМА.Очистить();
	
	ДокументОснованиеПриИзмененииНаСервере(Объект.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
					
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
		
		Если ДанныеСчета.Валютный Тогда
			ТекстСообщения = НСтр("ru='Внимание! Для документов, введенных на основании документов ""Заявление о ввозе товаров и уплате косвенных налогов"",
					                  |не рекомендуется использовать валютные счета учета.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СчетУчетаРасчетовСКонтрагентом", "Объект");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовПоАвансамПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
					
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовПоАвансам);
		
		Если ДанныеСчета.Валютный Тогда
			ТекстСообщения = НСтр("ru='Внимание! Для документов, введенных на основании документов ""Заявление о ввозе товаров и уплате косвенных налогов"",
					                  |не рекомендуется использовать валютные счета учета.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СчетУчетаРасчетовПоАвансам", "Объект");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаЗатрат(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаЗатрат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаЗатратНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Количество, Коэффициент,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, НомерГТД,
		|НДСВидОборота, НДСВидПоступления, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, НДСВключенВСтоимость, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(ТекущиеДанные, ЭтотОбъект);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ТекущиеДанные);
	КонецЕсли; 

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, ГТД,
		|НДСВидОборота, НДСВидПоступления, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, НДСВключенВСтоимость, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, ДанныеОбъекта, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ТекущиеДанные);
	КонецЕсли; 
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "ОС", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ОсновноеСредство, Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, ГТД,
		|НДСВидОборота, НДСВидПоступления, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, ДанныеОбъекта, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НМА

&НаКлиенте
Процедура НМАПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("НематериальныйАктив, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаНМА",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "НМА", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"НематериальныйАктив, Цена, Сумма, СтавкаНДС, СуммаНДС, УплаченныйНДС, ГТД,
		|НДСВидОборота, НДСВидПоступления, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Дата, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, НДСВключенВСтоимость, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"НМА.НематериальныйАктив",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	НМАНематериальныйАктивПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, ДанныеОбъекта, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект, "УплаченныйНДС", Истина);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УчастникиСовместнойДеятельности

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("ДатаВходящего" , ДатаСчетаФактурыПолученного);
	ДанныеСчетаФактуры.Вставить("НомерВходящего", НомерСчетаФактурыПолученного);
			
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный", ДанныеСчетаФактуры);
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТМЗ(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru='Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНМА(Команда)
	
	ИзменитьТабличнуюЧасть("НМА", НСтр("ru='НМА'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборНМА(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",			 Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",					 Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",			 Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",	 ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.НематериальныеАктивы.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru='ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборТМЗ(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru='ТМЗ'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги", НСтр("ru='Услуги'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	     
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоДокументуОснованию(Команда)
	
	ЗаполнитьПоДокументуОснованию("Товары", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьИзДокументаОснования(Команда)
	
	ЗаполнитьПоДокументуОснованию("Товары", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаполнитьПоДокументуОснованию(Команда)
	
	ЗаполнитьПоДокументуОснованию("Услуги", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДобавитьИзДокументаОснования(Команда)
	
	ЗаполнитьПоДокументуОснованию("Услуги", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСЗаполнитьПоДокументуОснованию(Команда)
	
	ЗаполнитьПоДокументуОснованию("ОС", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСДобавитьИзДокументаОснования(Команда)
	
	ЗаполнитьПоДокументуОснованию("ОС", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАЗаполнитьПоДокументуОснованию(Команда)
	
	ЗаполнитьПоДокументуОснованию("НМА", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАДобавитьИзДокументаОснования(Команда)
	
	ЗаполнитьПоДокументуОснованию("НМА", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.УчитыватьКПН.Доступность      = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.ВидУчетаНУ.Видимость          = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ГруппаИтогиНДС.Видимость      = Объект.УчитыватьНДС;
		
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	ВидимостьСчетовПрочейКорректировки = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее");
	
	Элементы.Контрагент.Видимость = ВидимостьСчетовПрочейКорректировки;
	Элементы.ДоговорКонтрагента.Видимость = ВидимостьСчетовПрочейКорректировки;
	
	Элементы.ГруппаРасчеты.Видимость = Объект.ОтражатьВБухгалтерскомУчете И ВидимостьСчетовПрочейКорректировки И Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ГруппаЗатраты.Видимость = Объект.ОтражатьВБухгалтерскомУчете И НЕ ВидимостьСчетовПрочейКорректировки И Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ТоварыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
	Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации");
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	СформироватьЗаголовокСчетаУчета(Форма);
	СформироватьЗаголовокСчетаУчетаЗатрат(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
		
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Форма.Элементы.ИтогиВсегоНДСКЗачету.Заголовок = НСтр("ru='НДС к зачету(<>)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДСКЗачету.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='НДС к зачету (%1)'"),СокрЛП(Объект.ВалютаДокумента));
	КонецЕсли;
	
	Если Форма.Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (сверху)'");
	КонецЕсли;
		              
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
    
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	
	// Счет-фактура
	Если НЕ Параметры.Ключ.Пустая() Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
		
	ЗаполнитьДобавленныеКолонкиТаблиц();	
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ              = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "Услуги") + УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "ОС") + УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "НМА");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("УплаченныйНДС") + Объект.Услуги.Итог("УплаченныйНДС") + Объект.ОС.Итог("УплаченныйНДС") + Объект.НМА.Итог("УплаченныйНДС");
	Форма.ИтогиВсегоНДСКЗачету = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Объект.НМА.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	
	
	ЕстьЦена = (ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено);

	ДанныеОбъекта = Новый Структура("Дата, Организация, ТипЦен, ВалютаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	
	Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "Услуги" Тогда
		
		СтрокиДляЗаполненияСчетов = Новый Массив;
		
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			СтрокаТабличнойЧасти = Неопределено;
			
			Если НЕ ЭтоВставкаИзБуфера Тогда			
				
				// Ищем выбранную позицию в таблице подобранной номенклатуры.
				//  Если найдем - увеличим количество; не найдем - добавим новую строку.
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
				Если ИмяТаблицы = "Товары" Тогда
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
					СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
				КонецЕсли;
				
				СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				// Нашли, увеличиваем количество в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
				
				Если ИмяТаблицы = "Товары"  Тогда
					
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);			
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);
					
				ИначеЕсли ИмяТаблицы = "Услуги" Тогда
					
					// Рассчитать реквизиты табличной части.
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);
				КонецЕсли;
				
				
			Иначе
				
				СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
				
				Если ЭтоВставкаИзБуфера 
					И СведенияОНоменклатуре <> Неопределено
					И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда				
					Если СведенияОНоменклатуре.Услуга Тогда                					
						Если ИмяТаблицы = "Товары" Тогда                   						
							Продолжить;                                    						
						КонецЕсли;                                         					
					Иначе                                                  					
						Если ИмяТаблицы = "Услуги" Тогда                   						
							Продолжить;                                    						
						КонецЕсли;                                         					
					КонецЕсли;                                             				
				КонецЕсли;
				
				СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
				СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
				
				Если СведенияОНоменклатуре = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЕстьЦена И НЕ ЭтоВставкаИзБуфера Тогда
					ВалютаЦены = СтрокаТовара.Валюта;
					Цена 	   = СтрокаТовара.Цена;
				Иначе
					ВалютаЦены = Объект.ВалютаДокумента;
					Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
						Цена       =  СведенияОНоменклатуре.Цена;
					Иначе
						Цена = СтрокаТабличнойЧасти.Цена; 
					КонецЕсли; 					
				КонецЕсли;				
				
				Если ИмяТаблицы = "Товары" Тогда
					СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
					
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, "Товары", Объект.Ссылка.Метаданные());
					
					// Пересчитаем цену в валюту документа.
					Цена = УправлениеЦенообразованием.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, Объект.ВалютаДокумента, ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), Объект.Дата);
					
					СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					СпособЗаполненияЦен,
					?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Объект.СуммаВключаетНДС),
					Объект.УчитыватьНДС,
					Объект.СуммаВключаетНДС,
					УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
					Ложь,
					Ложь,
					Ложь,
					0);
					
					// Рассчитываем реквизиты табличной части.
					Если ЭтоВставкаИзБуфера Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
					КонецЕсли;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);
					
				Иначе
					
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ИмяТаблицы, Объект.Ссылка.Метаданные());
					
					// Пересчитаем цену в валюту документа.
					Цена = УправлениеЦенообразованием.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, Объект.ВалютаДокумента, ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), Объект.Дата);
					
					СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					СпособЗаполненияЦен,
					Объект.ТипЦен.ЦенаВключаетНДС,
					Объект.УчитыватьНДС,
					Объект.СуммаВключаетНДС,
					УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
					СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
					
					// Рассчитываем реквизиты табличной части.
					Если ЭтоВставкаИзБуфера Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
					КонецЕсли;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);
					
				КонецЕсли;
			КонецЕсли;  		
			
		КонецЦикла;
		
		ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС);
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда 		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();		
	КонецЕсли;     
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект,,СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее") Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
	                                        Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3", 
	                                                        Объект.СубконтоЗатратНДСБУ1, Объект.СубконтоЗатратНДСБУ2, Объект.СубконтоЗатратНДСБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
	                                        Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        Объект.СубконтоЗатратНДСНУ1, Объект.СубконтоЗатратНДСНУ2, Объект.СубконтоЗатратНДСНУ3));
															
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Список структур с реквизитами группы счетов
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСБУ"); 	// СчетЗатратНДСБУ
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСНУ");  	// СчетЗатратНДСНУ
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
		
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , , СтруктураРеквизитовШапки); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);

        Возврат;
		
	КонецЕсли;

	РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
    РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее") Тогда 
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;      
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияКонтрагентаНаСервере(СтруктураРезультатаВыполнения)
	
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект,ПолучитьСтруктуруВидовДоговоров());	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);

	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
			
	СтруктураРезультатаВыполнения = Неопределено;
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее") 
			И СтруктураРезультатаВыполнения = Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;   		
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОС" Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "НМА" Тогда
		Для Каждого СтрокаТаблицы Из Объект.НМА Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС, Истина);
	
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее Тогда
		
		Объект.ДоговорКонтрагента 		= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.Контрагент 		        = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ВалютаДокумента          = ВалютаРегламентированногоУчета;		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);

		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;			
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;			 		

		ТекущийДоговорКонтрагента   = Объект.ДоговорКонтрагента;
        						
		Объект.НДСВключенВСтоимость = Ложь;
		Объект.СуммаВключаетНДС	 	= Ложь;
		
	КонецЕсли;
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(Основание,ЗаполнятьШапку = Истина, ИмяТабличнойЧасти = "", ИмяТабЧастиОснования = "")
	
	СтруктураТЧ = Неопределено;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		СтруктураТЧ = Новый Структура(ИмяТабличнойЧасти, ИмяТабличнойЧасти);
		Если НЕ ПустаяСтрока(ИмяТабЧастиОснования) Тогда
			СтруктураТЧ.Вставить(ИмяТабличнойЧасти, ИмяТабЧастиОснования);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоДокументамСписанияДС(Объект, Основание, ЗаполнятьШапку);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоЗаявлениюОВвозеТоваровИУплатеКосвенныхНалогов(Объект, Основание, ЗаполнятьШапку, СтруктураТЧ);
	            	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеОС") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоСписаниюОС(Объект, Основание, ЗаполнятьШапку);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоСписаниюТоваров(Объект, Основание, ЗаполнятьШапку);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоПоступлениюДопРасходов(Объект, Основание, ЗаполнятьШапку, СтруктураТЧ);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоАвансовомуОтчету(Объект, Основание, ЗаполнятьШапку, СтруктураТЧ);
		
	Иначе
		
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.ЗаполнитьПоДокументуОснования(Объект, Основание, ЗаполнятьШапку, СтруктураТЧ);
		
	КонецЕсли;
	
	Если ЗаполнятьШапку Тогда
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			    Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			    Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	Если ИмяТаблицы = "Товары" Тогда
		СписокЗапросов.Добавить("ЦеныНоменклатуры", НСтр("ru='Цены номенклатуры'"));
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		СписокЗапросов.Добавить("Услуги", НСтр("ru='Услуги'"));
		СписокЗапросов.Добавить("ЦеныУслуг", НСтр("ru='Цены услуг'"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	МетаднныеОбъекта = ДанныеОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	                                                                                             
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НМАНематериальныйАктивПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"НМА",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУплаченныйНДС()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		// Рассчитать реквизиты табличной части.	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		// Рассчитать реквизиты табличной части.	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл
		// Рассчитать реквизиты табличной части.	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		// Рассчитать реквизиты табличной части.	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "УплаченныйНДС", Истина);	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	СписокТабличныхЧастей.Добавить("НМА", 	 "НМА");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСБУ1, ДанныеОбъекта.СубконтоЗатратНДСБУ2, ДанныеОбъекта.СубконтоЗатратНДСБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПараметрыОткрытия = Неопределено;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее") Тогда 
		ОграничениеВидимости   = Новый Соответствие;
		ОграничениеВидимости.Вставить("Видимость", Ложь);
		
		ОграничениеДоступности = Новый Соответствие;
		ОграничениеДоступности.Вставить("Доступность", Ложь);
		
		НедоступныеРеквизиты   = Новый Структура;
		НедоступныеРеквизиты.Вставить("ТипЦен"                      , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("ПерезаполнитьЦены"           , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("ВалютаДокумента"             , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КурсДокумента"               , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КратностьДокумента"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("ПересчитатьЦены"             , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УстановитьКурсДокумента"     , ОграничениеВидимости);
		НедоступныеРеквизиты.Вставить("ВалютаВзаиморасчетов"        , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КурсВзаиморасчетов"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КратностьВзаиморасчетов"     , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УстановитьКурсВзаиморасчетов", ОграничениеВидимости);
		НедоступныеРеквизиты.Вставить("УчитыватьНДС"                , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("СуммаВключаетНДС"            , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УчитыватьАкциз"              , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("СуммаВключаетАкциз"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("НДСВключенВСтоимость"        , ОграничениеДоступности);
		
		ПараметрыОткрытия = Новый Структура("БезКонтроляВалютыВзаиморасчетов, НедоступныеРеквизиты, ЕстьЗаполненныеТабличныеЧасти", Истина, НедоступныеРеквизиты, Ложь);
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы="")
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);
			СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, "ОС", Объект, Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("ОС");

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНМАНаСервере(ВыбранноеЗначение)
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
		
		СтрокиТабличногоПоля = Объект.НМА.НайтиСтроки(Новый Структура("НематериальныйАктив", СтрокаМассива));
		
		Если СтрокиТабличногоПоля.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Нематериальный актив < %1 > уже выбран!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект");

		Иначе
			НоваяСтрока = Объект.НМА.Добавить();	
			НоваяСтрока.НематериальныйАктив = СтрокаМассива;
			НоваяСтрока.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			СтрокиДляЗаполненияСчетов.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;

	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, "НМА", Объект, Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		СтруктураРеквизитов.Вставить("Количество");
		СтруктураРеквизитов.Вставить("Цена");
	КонецЕсли;
	
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(ИмяТабличнойЧасти, ОчищатьТабЧасть)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ВыбратьДокументОснование(ИмяТабличнойЧасти, ОчищатьТабЧасть);

	Иначе
		
		ПараметрыДокументаОснования = ПолучитьПараметрыДокументаОснования(ТипЗнч(Объект.ДокументОснование), ИмяТабличнойЧасти);
		
		Если ПараметрыДокументаОснования.ИмяТабЧастиОснования = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Табличная часть не может быть заполнена по выбранному документу-основанию...'"));
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТабЧастьПоДокументуОснованию(Объект.ДокументОснование, ИмяТабличнойЧасти, ПараметрыДокументаОснования.ИмяТабЧастиОснования, ОчищатьТабЧасть);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьПоДокументуОснованию(Основание, ИмяТабличнойЧасти, ИмяТабЧастиОснования, ОчищатьТабЧасть)
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 И ОчищатьТабЧасть Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию", ЭтотОбъект,
		                                       Новый Структура("Основание, ИмяТабличнойЧасти, ИмяТабЧастиОснования, ОчищатьТабЧасть",
		                                       Основание,ИмяТабличнойЧасти, ИмяТабЧастиОснования, ОчищатьТабЧасть));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ЗаполнитьТабЧастьПоДокументуОснованиюНаСервере(Основание,ИмяТабличнойЧасти, ИмяТабЧастиОснования, ОчищатьТабЧасть);

	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыбратьДокументОснование(ИмяТабличнойЧасти, ОчищатьТабЧасть)
	
	СписокТиповОснований = Новый СписокЗначений;
	СписокТиповОснований.ЗагрузитьЗначения(ПолучитьТипыДокументовОснований());
	
	ТипДляУдаления = СписокТиповОснований.НайтиПоЗначению(Тип("ДокументСсылка.Сторнирование"));
	Если ТипДляУдаления <> Неопределено Тогда
		СписокТиповОснований.Удалить(ТипДляУдаления);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяТабличнойЧасти, ОчищатьТабЧасть", ИмяТабличнойЧасти, ОчищатьТабЧасть);
	Оповещение = Новый ОписаниеОповещения("ВыборТипаДокументаОснованияЗавершение", ЭтотОбъект, ДопПараметры);
	СписокТиповОснований.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выбор типа данных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаДокументаОснованияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыДокументаОснования = ПолучитьПараметрыДокументаОснования(Результат.Значение, ДопПараметры.ИмяТабличнойЧасти);
	
	Если ПараметрыДокументаОснования.ИмяТабЧастиОснования = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Табличная часть не может быть заполнена по этому типу документа-основания...'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("ИмяТабЧастиОснования", ПараметрыДокументаОснования.ИмяТабЧастиОснования);
	
	Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Отбор.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыДокументаОснования.ЕстьКонтрагент И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ПараметрыДокументаОснования.ЕстьДоговор И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	Если Отбор.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;

	ОткрытьФорму("Документ." + ПараметрыДокументаОснования.ИмяДокумента + ".Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьТабЧастьПоДокументуОснованию(Результат, ДопПараметры.ИмяТабличнойЧасти, ДопПараметры.ИмяТабЧастиОснования, ДопПараметры.ОчищатьТабЧасть);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипыДокументовОснований()

	МассивТиповОснований = 
		Метаданные.Документы.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.Реквизиты.ДокументОснование.Тип.Типы();
	
	Возврат МассивТиповОснований;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДокументаОснования(ТипДокумента, ИмяТабличнойЧасти)
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	
	ПараметрыДокумента = Новый Структура;
	
	ПараметрыДокумента.Вставить("ИмяДокумента"  , МетаданныеДокумента.Имя);
	ПараметрыДокумента.Вставить("ЕстьКонтрагент", ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента));
	ПараметрыДокумента.Вставить("ЕстьДоговор"   , ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента));
	
	ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	
	Если ТабличнаяЧасть = Неопределено Тогда
		Если (МетаданныеДокумента.Имя = "ПлатежноеПоручениеИсходящее"
			  	ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерСписаниеДенежныхСредств")
			 И ИмяТабличнойЧасти = "Услуги" Тогда
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", "Услуги");
		ИначеЕсли МетаданныеДокумента.Имя = "АвансовыйОтчет" И ИмяТабличнойЧасти = "Услуги" Тогда
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", "Прочее");
		ИначеЕсли МетаданныеДокумента.Имя = "ПоступлениеДопРасходов" И ИмяТабличнойЧасти = "Услуги" Тогда
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", "Услуги");
		Иначе
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", Неопределено);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Имя = "СписаниеОС" И ИмяТабличнойЧасти <> "ОС" Тогда
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", Неопределено);
		Иначе
			ПараметрыДокумента.Вставить("ИмяТабЧастиОснования", ТабличнаяЧасть.Имя);
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыДокумента;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ЗаполнитьТабЧастьПоДокументуОснованиюНаСервере(ДопПараметры.Основание, ДопПараметры.ИмяТабличнойЧасти, ДопПараметры.ИмяТабЧастиОснования, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабЧастьПоДокументуОснованиюНаСервере(Основание, ИмяТабличнойЧасти, ИмяТабЧастиОснования, ОчищатьТабЧасть = Ложь)
	
	Если ОчищатьТабЧасть Тогда
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	ДокументОснованиеПриИзмененииНаСервере(Основание, Ложь, ИмяТабличнойЧасти, ИмяТабЧастиОснования);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(ЭлементУчастникиСовместнойДеятельности, ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, ДоговорКонтрагента, ВидОперации) 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ДоговорСовместнойДеятельности,УчастникСРП");		
		ЭлементУчастникиСовместнойДеятельности.Видимость = (РеквизитыДоговора.ДоговорСовместнойДеятельности ИЛИ РеквизитыДоговора.УчастникСРП)
										И НЕ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.КорректировкаПрочее");	
		
		Если РеквизитыДоговора.ДоговорСовместнойДеятельности Тогда
			ЭлементУчастникиСовместнойДеятельности.Заголовок = НСтр("ru ='Участники совместной деятельности'");
			ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности.Заголовок = НСтр("ru ='Участник совместной деятельности'");
		ИначеЕсли РеквизитыДоговора.УчастникСРП Тогда
			ЭлементУчастникиСовместнойДеятельности.Заголовок = НСтр("ru ='Участники СРП'");
			ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности.Заголовок = НСтр("ru ='Участник СРП'");
		КонецЕсли;
	Иначе
		ЭлементУчастникиСовместнойДеятельности.Видимость = Ложь;
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Услуги.ТолькоПросмотр       = Ложь;
	Элементы.Услуги.ИзменятьСоставСтрок  = Ложь;
	Элементы.Услуги.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр       = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.НМА.ТолькоПросмотр       = Ложь;
	Элементы.НМА.ИзменятьСоставСтрок  = Ложь;
	Элементы.НМА.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления");
		СписокСвойств.Добавить("НомерГТД");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 	
			СписокСвойств.Добавить("УплаченныйНДС");			
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");			
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");		
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления"); 
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 	
			СписокСвойств.Добавить("УплаченныйНДС");			
		КонецЕсли;

		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда			
			СписокСвойств.Добавить("СчетУчетаНДС");	 							
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("НМАСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ГруппаРасчеты");
	ЭлементыСчетов.Добавить("ГруппаЗатраты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		Если Объект <> Неопределено И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
			СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;
	
	// НоваяСтрокаОС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаОС") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаУслуги
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаУслуги") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаНМА
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаНМА") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидПоступления");
	КонецЕсли;
	
	// ОтражатьВБухгалтерскомУчете
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
	КонецЕсли;

	// СчетЗатратНДСБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
	КонецЕсли;

	// СчетЗатратНДСНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// СубконтоЗатратНДСБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
	КонецЕсли;

	// СубконтоЗатратНДСБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
	КонецЕсли;

	// СубконтоЗатратНДСБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
	КонецЕсли;

	// ОС.ОсновноеСредство
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// НМА.НематериальныйАктив
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НМА.НематериальныйАктив") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ОтражатьВБухгалтерскомУчете
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// СчетЗатратНДСБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
		КонецЕсли;

		// СчетЗатратНДСНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
		КонецЕсли;

		// СубконтоЗатратНДСБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоЗатратНДСБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоЗатратНДСБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// ОС.ОсновноеСредство
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// НМА.НематериальныйАктив
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НМА.НематериальныйАктив") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьВБухгалтерскомУчете");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СформироватьЗаголовокСчетаУчета(ЭтаФорма);
		СформироватьЗаголовокСчетаУчетаЗатрат(ЭтаФорма);
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаЗатратНаСервере()
	СформироватьЗаголовокСчетаУчетаЗатрат(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчетаЗатрат(Форма)
	
	Объект = Форма.Объект;
	
	ЗаголовокПоля = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчетаЗатрат(Объект);
	
	Если Объект.УчитыватьКПН Тогда
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = ЗаголовокПоля;
	Иначе
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = Лев(ЗаголовокПоля, СтрНайти(ЗаголовокПоля, ",") - 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	СтруктураДопПараметров = Новый Структура;
	
	СтруктураДопПараметров.Вставить("ВидВходящегоДокумента",	Объект.ВидВходящегоДокумента);
	СтруктураДопПараметров.Вставить("ДатаВходящегоДокумента",	Объект.ДатаВходящегоДокумента);
	СтруктураДопПараметров.Вставить("НомерВходящегоДокумента",	Объект.НомерВходящегоДокумента);
	СтруктураДопПараметров.Вставить("Комментарий",				Объект.Комментарий);
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(ЭтаФорма, "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС",СтруктураДопПараметров)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчастникиСовместнойДеятельности",  	Объект.УчастникиСовместнойДеятельности);
	СтруктураПараметров.Вставить("ТипОбъекта",                      	"РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС");
	СтруктураПараметров.Вставить("Договор",  							Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУчастникиСовместнойДеятельности", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции
