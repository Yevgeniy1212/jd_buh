#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("ИзмененыВычеты", Объект.Сотрудник, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""прекращение предоставления вычетов ипн"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ПараметрыФормы			= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца"	, Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"			, Истина);
	ПараметрыФормы.Вставить("РежимВыбора"					, Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация"				, Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо"				, Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	КонтрольМесяца();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("МесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", , Оповещение,Объект.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	КонтрольМесяца();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", Направление, Модифицированность);
	КонтрольМесяца();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонтрольМесяца();
	ПрочитатьВычетыПредыдущегоМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонтрольМесяца();
	ПрочитатьВычетыПредыдущегоМесяца();
		
КонецПроцедуры  

&НаКлиенте
Процедура ИнформацияОВозможностиПроведенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтменаЗаявления" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтменитьЗаявлениеОПрекращенииВычетов();
		
		ПоказатьПредупреждение(, НСтр("ru='Заявление о прекращении предоставления вычетов отменено'"));
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПрочитатьВычетыПредыдущегоМесяца()
	
	Если Объект.Сотрудник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Месяц",								Объект.Месяц);
	Запрос.УстановитьПараметр("ФизическоеЛицо",						Объект.Сотрудник);
	Запрос.УстановитьПараметр("Ссылка",								Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаОграниченияПолученияДанных",		'2018-01-01');
	Запрос.УстановитьПараметр("ПустаяДата",							Дата(1,1,1));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВычетыФизическихЛицИПНСрезПоследних.ВидВычета КАК ВидВычетаИПН,
	|	ВычетыФизическихЛицИПНСрезПоследних.Основание,
	|	ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо
	|ИЗ
	|	РегистрСведений.ВычетыФизическихЛицИПН.СрезПоследних(
	|			&Месяц,
	|			Регистратор <> &Ссылка
	|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ВычетыФизическихЛицИПНСрезПоследних
	|ГДЕ
	|	ВычетыФизическихЛицИПНСрезПоследних.Период >= &ДатаОграниченияПолученияДанных
	|	И ВЫБОР
	|			КОГДА ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо >= &Месяц
	|		КОНЕЦ
	|	И ВычетыФизическихЛицИПНСрезПоследних.Активность
	|	И ВычетыФизическихЛицИПНСрезПоследних.ПредоставлятьВычет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыФизическихЛицИПНСрезПоследних.ВидВычета,
	|	ВычетыФизическихЛицИПНСрезПоследних.ДействуетПо";
	
	ВычетыИПН.Загрузить(Запрос.Выполнить().Выгрузить());
	
	УстановитьИнформационнуюНадписьОВозможностиПроведения();
	
	Если ВычетыИПН.Количество() = 0 Тогда
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;	
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"МесяцСтрокой",
		"ОтображениеПредупрежденияПриРедактировании",
		ЗначениеОтображениеПредупрежденияПриРедактировании);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ФизическоеЛицо",
		"ОтображениеПредупрежденияПриРедактировании",
		ЗначениеОтображениеПредупрежденияПриРедактировании);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	МесяцСтрокой 			= РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.Месяц);

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	ПрочитатьВычетыПредыдущегоМесяца();
	
	УстановитьИнформационнуюНадписьОВозможностиПроведения();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
		
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольМесяца()
	
	ДатаКонтроля = '2018-01-01';
	
	Если Объект.Месяц < ДатаКонтроля Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрЗаменить(НСтр("ru='Месяц не может быть меньше %1 '"),"%1", Формат(ДатаКонтроля,"ДЛФ=DD")), ,"МесяцСтрокой");
		Объект.Месяц = НачалоМесяца(ДатаКонтроля);
		МесяцСтрокой = НСтр("ru='Январь 2018'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнформационнуюНадписьОВозможностиПроведения()
	
	ИнформацияОВозможностиПроведения = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Документы.ПрекращениеПредоставленияВычетовИПН.КонфликтующиеРегистраторы(
			Объект.Ссылка, Объект.Месяц, Объект.Сотрудник);
		
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий(); 
		
		ИнформацияОВозможностиПроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ не может быть проведен. На %1 уже введено заявление'"), 
			НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")));

		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявлениеНаПредоставлениеВычетовИПН") Тогда
						
			ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Документ не может быть проведен. На %1 уже введено заявление на вычеты (<a href=""%2"">%3</a>)'"),
				НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
				ПолучитьНавигационнуюСсылку(Выборка.Регистратор),
				Выборка.ПредставлениеРегистратора
			);
			
		Иначе
						
			ОрганизацияРегистратора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Регистратор, "Организация");
			Если Объект.Организация = ОрганизацияРегистратора Тогда				
				
				ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Документ не может быть проведен. На %1 уже введено заявление о прекращении вычетов (<a href=""%2"">%3</a>)'"),
					НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
					ПолучитьНавигационнуюСсылку(Выборка.Регистратор),
					Выборка.ПредставлениеРегистратора
				);
			
			Иначе
				
				
				ИнформацияОВозможностиПроведения = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Документ не может быть проведен. На %1 уже введено заявление о прекращении вычетов в другой организации. Если необходимо перенести применение вычетов в %2, <a href=""ОтменаЗаявления"">отмените заявление</a> о прекращении вычетов и проведите это заявление.'"),
					НРег(Формат(Объект.Месяц, "ДФ='ММММ гггг'")),
					Строка(Объект.Организация)
				);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИнформацияОВозможностиПроведения",
		"Заголовок",
		ИнформацияОВозможностиПроведения
	);
	
	Элементы.ИнформацияОВозможностиПроведения.Видимость = ИнформацияОВозможностиПроведения <> "";
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаявлениеОПрекращенииВычетов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Документы.ПрекращениеПредоставленияВычетовИПН.КонфликтующиеРегистраторы(
		Объект.Ссылка, Объект.Месяц, Объект.Сотрудник);
		
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Заявление = Выборка.Регистратор.ПолучитьОбъект();
		Заявление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьИнформационнуюНадписьОВозможностиПроведения();
	
КонецПроцедуры

#КонецОбласти
