#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.СторнированиеМН.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Документы.СторнированиеМН.ОбновитьПериодЗаписейДвижений(ЭтотОбъект);
	
	Если Не ЭтоНовый() И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
	//УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	//УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	////синхронизируем данные счет-фактуры и документа основания
	//УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	//
	////синхронизируем данные счет-фактуры и документа основания
	//УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный");
	
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный")
	//	ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
	//	ОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
	//	Если ОснованиеОбъект <> Неопределено И ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
	//		Если ПометкаУдаления Тогда
	//			Документы[ОснованиеОбъект.Метаданные().Имя].ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(ОснованиеОбъект);
	//			ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Записать();
	//		Иначе
	//			ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Очистить();
	//			ОснованиеОбъект.Движения.СчетаФактурыПрекратившиеДействие.Записать();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл
		
		Движение.Прочитать();
		Движение.УстановитьАктивность(ФлагАктивности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли












//////////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ
////

//Перем мСтараяПометкаУдаления;

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

//// Процедура выполняет сторнирование движений переданного документа
////
//Процедура ВыполнитьСторнированиеДвижений(Основание) 

//	// скопируем все движения
//	ДвиженияДокументаОснования = Основание.Метаданные().Движения;
//	ДвиженияСторно = Метаданные().Движения;
//	
//	Для Каждого МетаданныеРегистр Из ДвиженияДокументаОснования Цикл
//		
//		Если МетаданныеРегистр.Имя="УИНН" Тогда //РегистрНакопления.УИНН - движения сами делаем
//			Продолжить; 
//		КонецЕсли;	
//		
//		Если Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
//			// регистры сведений не сторнируем
//			Продолжить; 
//		КонецЕсли;	
//		
//		Если Не ДвиженияСторно.Содержит(МетаданныеРегистр) Тогда
//			// регистр не сторнируется
//			Продолжить;
//		КонецЕсли;
//		
//		Попытка
//			НаборЗаписей = Движения[МетаданныеРегистр.Имя];
//			ЗаполнитьНаборЗаписей(НаборЗаписей, МетаданныеРегистр);
//		Исключение
//			Сообщить("Ошибка при чтении данных регистра " + МетаданныеРегистр.Имя + ": " + ОписаниеОшибки());
//		КонецПопытки;
//	
//	КонецЦикла;

//КонецПроцедуры // ВыполнитьСторнированиеДвижений()

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//// Процедура выполняет заполнение документа по переданному основанию
////
//Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт

//	// Заполним реквизиты из стандартного набора по документу основанию.
//	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
//	
//	Если Не Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДокументОснование = Основание;

//	// установим дату создаваемого документа началом текущего дня как она будет при создании нового в форме
//	// чтобы сторнировочные движения сразу писать на нужную дату
//	Если НЕ ЗначениеЗаполнено(Дата) Тогда
//		Дата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
//	КонецЕсли;
//	
//    ВыполнитьСторнированиеДвижений(Основание);
//	
//КонецПроцедуры // ЗаполнитьПоДокументуОснования()

///////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//// Копирует значения движения в строку сторно нового движения
//// для измерений и реквизитов. Ресурсы инвертируются.
////
//Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

//	// измерения
//	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл
//		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
//	КонецЦикла;

//	// ресурсы
//	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
//		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
//	КонецЦикла;

//	// реквизиты
//	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл
//		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
//	КонецЦикла;

//КонецПроцедуры // ЗаполнитьДвижениеСторно()

//// Копирует значения движения по регистру бухгалтерии в строку сторно я
//// нового движени для измерений и реквизитов. Ресурсы инвертируются.
////
//Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

//	Если МетаданныеОбъект.Корреспонденция Тогда

//		Движение.СчетДт = Строка.СчетДт;
//		Движение.СчетКт = Строка.СчетКт;

//		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
//		Пока ВыборкаСубконто.Следующий() Цикл

//			Если ВыборкаСубконто.Предопределенный Тогда

//				Если Строка.СубконтоДт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
//					Движение.СубконтоДт[ВыборкаСубконто.Ссылка] = Строка.СубконтоДт[ВыборкаСубконто.Ссылка];
//				КонецЕсли;
//				
//				Если Строка.СубконтоКт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
//					Движение.СубконтоКт[ВыборкаСубконто.Ссылка] = Строка.СубконтоКт[ВыборкаСубконто.Ссылка];
//				КонецЕсли;

//			КонецЕсли;

//		КонецЦикла;

//	Иначе

//		Движение.Счет   = Строка.Счет;

//		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
//		Пока ВыборкаСубконто.Следующий() Цикл
//			Если ВыборкаСубконто.Предопределенный Тогда
//				Если Строка.Субконто[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
//					Движение.Субконто[ВыборкаСубконто.Ссылка] = Строка.Субконто[ВыборкаСубконто.Ссылка];
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;

//	КонецЕсли;

//	// измерения
//	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл

//		Если МетаданныеОбъект.Корреспонденция Тогда
//			Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
//				Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
//			Иначе
//				Движение[МДОбъект.Имя + "Дт"] = Строка[МДОбъект.Имя + "Дт"];
//				Движение[МДОбъект.Имя + "Кт"] = Строка[МДОбъект.Имя + "Кт"];
//			КонецЕсли;
//		Иначе
//		КонецЕсли;

//	КонецЦикла;

//	// ресурсы
//	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

//		Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
//			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
//		Иначе

//			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
//				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
//			КонецЕсли;

//			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
//				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
//			КонецЕсли;

//		КонецЕсли;

//	КонецЦикла;

//	// реквизиты
//	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл

//		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];

//	КонецЦикла;

//КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

//// Заполняет набор записей по указанному регистру сторнирующими движениями.
////
//Процедура ЗаполнитьНаборЗаписей(ЗаполняемыйНаборЗаписей, МетаданныеРегистр) Экспорт

//	ЭтоРегистрРасчета     = Ложь;
//	ЭтоРегистрБухгалтерии = Ложь;
//	ЭтоРегистрНакопления  = Ложь;

//	Если ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыРасчета", МетаданныеРегистр) Тогда
//		ЭтоРегистрРасчета     = Истина;
//		НаборЗаписей          = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
//		Периодичность		  = МетаданныеРегистр.Периодичность;
//		ПериодРегистрации	  = Дата;
//		
//	ИначеЕсли ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыБухгалтерии", МетаданныеРегистр) Тогда
//		ЭтоРегистрБухгалтерии = Истина;
//		НаборЗаписей          = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
//	Иначе
//		ЭтоРегистрНакопления  = Истина;
//		НаборЗаписей          = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
//	КонецЕсли;
//	
//	ОтражениеПоПериодуРегистрации = Ложь;
//	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", ДокументОснование.Метаданные()) Тогда
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("парамПериодРегистрации", 	Дата);
//		Запрос.УстановитьПараметр("парамОрганизация",   ДокументОснование.Организация);
//		Запрос.Текст = "
//		|ВЫБРАТЬ
//		|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации
//		|ИЗ
//		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
//		|		&парамПериодРегистрации,
//		|		Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
//		|";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ОтражениеПоПериодуРегистрации = Выборка.ОтражениеПоПериодуРегистрации;
//		КонецЕсли;	
//	КонецЕсли;

//	НаборЗаписей.Отбор.Регистратор.Значение = ДокументОснование;
//	НаборЗаписей.Прочитать();

//	Для Каждого ДвижениеСторнируемое Из НаборЗаписей Цикл

//		// реквизиты
//		Если ЭтоРегистрРасчета Тогда

//			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

//			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);

//			ДвижениеСторно.ПериодРегистрации = Дата;
//			ДвижениеСторно.ВидРасчета        = ДвижениеСторнируемое.ВидРасчета;
//			ДвижениеСторно.Сторно            = Истина;

//			Если МетаданныеРегистр.ПериодДействия Тогда
//				ДвижениеСторно.ПериодДействияНачало = ДвижениеСторнируемое.ПериодДействияНачало;
//				ДвижениеСторно.ПериодДействияКонец  = ДвижениеСторнируемое.ПериодДействияКонец;
//			КонецЕсли;

//			Если МетаданныеРегистр.БазовыйПериод Тогда
//				ДвижениеСторно.БазовыйПериодНачало = ДвижениеСторнируемое.БазовыйПериодНачало;
//				ДвижениеСторно.БазовыйПериодКонец  = ДвижениеСторнируемое.БазовыйПериодКонец;
//			КонецЕсли;

//		ИначеЕсли ЭтоРегистрБухгалтерии Тогда

//			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();
//			
//			ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
//			ДвижениеСторно.Период = Дата;

//		Иначе

//			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

//			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
//			
//			Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
//				ДвижениеСторно.ВидДвижения = ДвижениеСторнируемое.ВидДвижения
//			КонецЕсли;
//			
//			Если МетаданныеРегистр.Имя = "ИПНСведенияОДоходах" 
//					Или МетаданныеРегистр.Имя = "ОПВСведенияОДоходах"
//					Или МетаданныеРегистр.Имя = "СНСведенияОДоходах"
//					Или МетаданныеРегистр.Имя = "СОСведенияОДоходах" Тогда
//				Если ОтражениеПоПериодуРегистрации Тогда
//					ДвижениеСторно.Период = НачалоМесяца(Дата);
//					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Дата);
//				Иначе
//					ДвижениеСторно.Период = НачалоМесяца(ДвижениеСторнируемое.Период);
//					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Дата);
//				КонецЕсли;
//			ИначеЕсли МетаданныеРегистр.Имя = "ВыплаченныеДоходыРаботникамОрганизацийНУ" Тогда
//				Если ОтражениеПоПериодуРегистрации Тогда
//					ДвижениеСторно.Период = НачалоМесяца(Дата);
//					ДвижениеСторно.МесяцНалоговогоПериода = НачалоМесяца(Дата);
//				Иначе
//					ДвижениеСторно.Период = НачалоМесяца(Дата);
//					ДвижениеСторно.МесяцНалоговогоПериода = ДвижениеСторнируемое.МесяцНалоговогоПериода;
//				КонецЕсли;
//			ИначеЕсли МетаданныеРегистр.Имя = "РабочееВремяРаботниковОрганизаций"   Тогда
//				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
//			Иначе
//				ДвижениеСторно.Период = Дата;
//			КонецЕсли;

//		КонецЕсли;

//	КонецЦикла;

//КонецПроцедуры // ЗаполнитьНаборЗаписей()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

//// Процедура - обработчик события "ОбработкаЗаполнения".
////
//Процедура ОбработкаЗаполнения(Основание)
//	// Обработка для работы в версии 8.2
//	Если ТипЗнч(Основание) <> Тип("Структура")
//		И Основание <> НЕОПРЕДЕЛЕНО Тогда
//	
//		ЗаполнитьПоДокументуОснования(Основание);	
//    КонецЕсли;
//КонецПроцедуры // ОбработкаЗаполнения()

//// Процедура - обработчик события "ПередЗаписью"
////
//Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	
//	Если ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;

//	// прочитаем флаг пометки удаления, сохранный в базе (до изменения)
//	мСтараяПометкаУдаления = Ссылка.ПометкаУдаления;
//    УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");
//	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураВыданный");
//КонецПроцедуры // ПередЗаписью()

//// Процедура - обработчик события "ПриЗаписи" 
////
//Процедура ПриЗаписи(Отказ)
//	
//	Если ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;

//	Если ПометкаУдаления <> мСтараяПометкаУдаления Тогда // поменялся признак пометки удаления у документа

//		Если ПометкаУдаления Тогда // пометили на удаление

//			// удалим движения документа из регистров
//			ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
//			
//		Иначе // восстановили помеченный на удаление документ - заново заполним сторно-движения
//			
//			Если ЗначениеЗаполнено(ДокументОснование) Тогда
//				
//				ВыполнитьСторнированиеДвижений(ДокументОснование);	
//			
//			КонецЕсли;
//			
//		КонецЕсли;	
//		
//	КонецЕсли;

//КонецПроцедуры // ПриЗаписи()

