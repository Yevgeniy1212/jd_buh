&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);	
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации); 

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
			
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		СформироватьСписокМесяцевНалоговогоПериода();
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			Если Объект.СоциальныеОтчисления.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.СоциальныеОтчисления.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.СоциальныеОтчисления.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					
					НоваяСтрока 					= Объект.СоциальныеОтчисления.Добавить();	
					НоваяСтрока.ФизЛицо 			= СтрокаМассива;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	КлючеваяОперация = "Документ ""социальное страхование перечисление в фонды"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды    
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.СоциальныеОтчисления.Количество() > 0 Тогда
		
		// Если меняем вид операции, то предлагаем очищение ТЧ
		ТекстВопроса = НСтр("ru= 'Изменен вид операции документа. Очистить данные табличной части?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ЗаполнитьСписокСпособовРасчета();
	Объект.ДокументОснование = Неопределено;

	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации); 
	УстановитьВидимостьМесяцаПериода(); 
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	УстановитьВидимостьМесяцаПериода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма, ,Истина);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПлатежаПриИзменении(Элемент)
	
	ЗаполнитьСписокСпособовРасчета();
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСуммКПеречислениюПриИзменении(Элемент)
	
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьСправкуФормыНажатие(Элемент)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВстроеннаяСправкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогамиКлиентСервер.ПолеHTMLДокументаOnClick(Элементы.ВстроеннаяСправка, ДанныеСобытия, ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокЗаполненияПриИзменении(Элемент)
	
	Если Объект.СоциальныеОтчисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru= 'Табличная часть будет очищена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииПорядкаЗаполнения", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);		
	Иначе
		
		ЗаполнитьНастройкиСУчетомПорядкаЗаполнения();  	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СоциальныеОтчисления

&НаКлиенте
Процедура СоциальныеОтчисленияФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущаяСтрока = Элементы.СоциальныеОтчисления.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(ТекущаяСтрока.ФизЛицо) = Тип("Неопределено")
        Или ТипЗнч(ТекущаяСтрока.ФизЛицо) = Тип("СправочникСсылка.Контрагенты"))
		И Объект.ПорядокЗаполнения = 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СоциальныеОтчисленияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
		ПараметрыФормы.Вставить("РежимВыбора",						Истина);
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
		ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокСотрудниковСписокЗавершениеВыбора", ЭтотОбъект);

		ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоциальныеОтчисленияМесяцПериодаПриИзменении(Элемент)
	
	ТекущиеДанныеСоциальныеОтчисления = Элементы.СоциальныеОтчисления.ТекущиеДанные;
	ТекущиеДанныеСоциальныеОтчисления.МесяцПериода = НачалоМесяца(ТекущиеДанныеСоциальныеОтчисления.МесяцПериода);  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоЗадолженности(Команда)
	
	Если Объект.СоциальныеОтчисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		АвтозаполнениеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеНаКлиенте()
	
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""социальное страхование перечисление в фонды"" (заполнение)");
	
	РезультатВыполнения = АвтозаполнениеНаСервере();		
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед расчетом необходимо записать документ. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередРасчетом", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);		 				
	Иначе                                                  		
		РассчитатьНаКлиенте();                             
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеСправкиФормы(Команда)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	
	ОбработкаИзмененияПереключенияСправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпискуСотрудников(Команда)
	
	Если Объект.СоциальныеОтчисления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет полностью перезаполнена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	УстановитьИмяКнопки(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		

		Объект.Дата = КонецДня(Объект.Дата);
		Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
			Объект.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаСуммКПеречислению) Тогда
			Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц;
		КонецЕсли;
				
	Иначе
		
		ПроверитьДокументыВведенныеНаОсновании();
		
	КонецЕсли;
	
	ИДКартинки = РаботаСДиалогами.ПолучитьИДКартинки(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы);

	УстановитьВидимостьПорядкаЗаполнения(ЭтаФорма);
	
	УстановитьДоступностьПодразделенияОрганизации(ЭтаФорма); 
	
	МесяцПериодаЗаполнен = ПроверитьЗаполнениеМесяцаПериода();
	
	Если НЕ МесяцПериодаЗаполнен Тогда
		УстановитьВидимостьМесяцаПериода();
	КонецЕсли;

	ПодготовитьСправкуФормы(ЭтаФорма);

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСпособовРасчета()
	
	УпрощенныйУчетИПНиОПВ = УчетнаяПолитикаСервер.УпрощенныйУчетИПНиОПВ(Объект.Организация, Объект.ПериодРегистрации);
	
	УчетПени = (Объект.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт ИЛИ Объект.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам);
	НовыеПараметры 		= Новый Массив;
	СписокСпособРасчета = Новый СписокЗначений;
	
	ПеречислениеВзносовОСМС = (Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС);

	Для Каждого СпособРасчета Из Перечисления.СпособыРасчетаСуммКПеречислениюСО Цикл
		
		Если УпрощенныйУчетИПНиОПВ ИЛИ УчетПени ИЛИ НЕ ПеречислениеВзносовОСМС Тогда
			Если СпособРасчета = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ ИЛИ
				СпособРасчета = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СписокСпособРасчета.Добавить(СпособРасчета);
		
	КонецЦикла;
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", СписокСпособРасчета));
	Элементы.СпособРасчетаСуммКПеречислению.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	Если УпрощенныйУчетИПНиОПВ ИЛИ УчетПени ИЛИ НЕ ПеречислениеВзносовОСМС Тогда
		Если Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ Тогда
			Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц;
		ИначеЕсли Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ Тогда
			Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяца;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	Если Не Параметры.Ключ.Пустая() Тогда
		Если ОбщегоНазначенияБК.СуществуютПроведенныеДокументыВведенныеНаОсновании(Объект.Ссылка) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИмяКнопки(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ИППериодПеречисленияСО = ПолучитьПредставлениеПериодаРегистрации(Объект);
	Элементы.ФормаЗаполнитьПоЗадолженности.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='По задолженности на конец %1 %2'"),
																	ИППериодПеречисленияСО,Формат(Объект.ПериодРегистрации, "ДФ='гггг'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	Объект.СоциальныеОтчисления.Очистить();
	СформироватьСписокМесяцевНалоговогоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокМесяцевНалоговогоПериода()
	
	СписокМесяцевНалоговогоПериода = ПроверитьКоличествоМесяцевНалоговогоПериода();
	
	Если СписокМесяцевНалоговогоПериода.Количество() = 0 Тогда
		ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
		// вообще нет данных в документе-основании
		Возврат;
	ИначеЕсли СписокМесяцевНалоговогоПериода.Количество() = 1 Тогда
		Объект.ПериодРегистрации = СписокМесяцевНалоговогоПериода[0].Значение;
		ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
		ПодготовитьФормуНаСервере();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораМесяцаНалоговогоПериода", ЭтаФорма);
		СписокМесяцевНалоговогоПериода.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выберите месяц налогового периода'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораМесяцаНалоговогоПериода(ЗначениеВыбора, Параметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	Иначе
		Объект.ПериодРегистрации = ЗначениеВыбора.Значение;
		ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры
 
&НаСервере
Функция ПроверитьКоличествоМесяцевНалоговогоПериода() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Объект.ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(РасчетПени.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК РасчетПени
	|ГДЕ
	|	РасчетПени.Ссылка = &Основание
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетПени.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокМесяцевНалоговогоПериода = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокМесяцевНалоговогоПериода.Добавить(Выборка.МесяцНалоговогоПериода, Формат(Выборка.МесяцНалоговогоПериода, "ДФ='ММММ гггг'"));
	КонецЦикла;
	
	Возврат СписокМесяцевНалоговогоПериода; 
	
КонецФункции

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
 
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасчетПениОПВиСО") Тогда
		
		Документы.СОПеречислениеВФонды.ЗаполнитьПоРасчетПениОПВиСО(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСпискуСотрудников(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Объект.СоциальныеОтчисления.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.СоциальныеОтчисления.Очистить();

КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередЗаполнениемПоЗадолжности(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.СоциальныеОтчисления.Очистить();
	
	АвтозаполнениеНаКлиенте();
			
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередРасчетом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
		
	ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));

	РассчитатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПриИзмененииПорядкаЗаполнения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ПорядокЗаполнения = Не Объект.ПорядокЗаполнения;
		Возврат;		
	КонецЕсли;
	
	ЗаполнитьНастройкиСУчетомПорядкаЗаполнения();
	
КонецПроцедуры

&НаКлиенте  
Процедура ЗаполнитьНастройкиСУчетомПорядкаЗаполнения()
	
	Объект.СоциальныеОтчисления.Очистить();
	
	Если Объект.ПорядокЗаполнения > 0 Тогда
		Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Объект.ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		Элементы.СоциальныеОтчисления.ПодчиненныеЭлементы.СоциальныеОтчисленияФизЛицо.КнопкаОчистки = Истина;
	Иначе
		Элементы.СоциальныеОтчисления.ПодчиненныеЭлементы.СоциальныеОтчисленияФизЛицо.КнопкаОчистки = Неопределено;
	КонецЕсли;

	УстановитьДоступностьПодразделенияОрганизации(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция АвтозаполнениеНаСервере() 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена организация, заполнение не выполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"СтруктурноеПодразделениеОрганизация");
		Возврат Ложь;
	КонецЕсли;

	Объект.СоциальныеОтчисления.Очистить();

	СтруктураПараметров = Новый Структура;	
		
	ПоОстаткам = (Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяца
						Или Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ);	
	
	ПоУдельномуВесу = (Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ 
						Или Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ);
	
	
	ДатаСреза = ?(КонецМесяца(Объект.Дата) > КонецМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.Дата), Макс(Объект.Дата, КонецМесяца(Объект.ПериодРегистрации)));
	
	СтруктураПараметров.Вставить("парамГраницаОстатков", Новый Граница(ДатаСреза, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	СтруктураПараметров.Вставить("парамОрганизация", Объект.Организация);
	СтруктураПараметров.Вставить("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("парамПодразделениеОрганизации",Объект.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("парамМесяц", Объект.ПериодРегистрации);
	СтруктураПараметров.Вставить("парамНачало", КонецМесяца(Объект.ПериодРегистрации));
	СтруктураПараметров.Вставить("парамВидПлатежа", Объект.ВидПлатежа);   
	СтруктураПараметров.Вставить("ТаблицаСоциальныеОтчисления", Объект.СоциальныеОтчисления.Выгрузить());   
	СтруктураПараметров.Вставить("ПоОстаткам", ПоОстаткам);   
	СтруктураПараметров.Вставить("ПоУдельномуВесу", ПоУдельномуВесу);   
	СтруктураПараметров.Вставить("ВидОперации", Объект.ВидОперации);   
	СтруктураПараметров.Вставить("ПорядокЗаполнения", Объект.ПорядокЗаполнения);   
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Социальное страхование перечисление в фонды»'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.СОПеречислениеВФонды.ПодготовитьДанныеДляЗаполнения", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьНаКлиенте()

	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""социальное страхование перечисление в фонды"" (расчет)");
	
	РезультатВыполнения = РассчитатьНаСервере();		
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСоциальныеОтчисления = СтруктураДанных.ТаблицаСоциальныеОтчисления;
	Объект.СоциальныеОтчисления.Загрузить(ТаблицаСоциальныеОтчисления);
		
	Если Объект.СоциальныеОтчисления.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	КонецЕсли;  
	
	Если НЕ Модифицированность Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьНаСервере()
	
	СтруктураПараметров = Новый Структура;	
		
	ДатаСреза = ?(КонецМесяца(Объект.Дата) > КонецМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.Дата), Макс(Объект.Дата, КонецМесяца(Объект.ПериодРегистрации)));
	ПоОстаткам = (Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяца
						Или Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ);	
	ПоУдельномуВесу = (Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ 
						Или Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ);
		
	СтруктураПараметров.Вставить("парамГраницаОстатков", Новый Граница(ДатаСреза, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("парамСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("парамОрганизация", Объект.Организация);
	СтруктураПараметров.Вставить("парамМесяц", Объект.ПериодРегистрации);
	СтруктураПараметров.Вставить("парамВидПлатежа", Объект.ВидПлатежа);
	СтруктураПараметров.Вставить("ПоОстаткам", ПоОстаткам);
	СтруктураПараметров.Вставить("ПоУдельномуВесу", ПоУдельномуВесу);   
	СтруктураПараметров.Вставить("ВидОперации", Объект.ВидОперации);   
	
	НаименованиеЗадания = НСтр("ru = 'Расчет документа «Социальное страхование перечисление в фонды»'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.СОПеречислениеВФонды.ПодготовитьДанныеДляРасчета", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериодаРегистрации(Объект)
	
	МесяцНачисленияСтрокой = Формат(Объект.ПериодРегистрации, "ДФ=ММММ");
	Если ПустаяСтрока(МесяцНачисленияСтрокой) Тогда
		Возврат НСтр("ru = 'месяц не выбран'");
	Иначе
		Возврат МесяцНачисленияСтрокой;
	КонецЕсли;
	
КонецФункции                         

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УстановитьВидимостьМесяцаПериода();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации); 

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПереключенияСправки(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПереключениеСправкиФормы.Пометка = Форма.ОтображатьСправкуФормы;	
	
	Элементы.ГруппаОсновнаяПравая.Видимость        = Форма.ОтображатьСправкуФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьСправкуФормы(Форма) 
	
	ЦветФонаСправки		= РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветСсылки());

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТекстМакетаВстроеннойСправки = "";

	ИППериодПеречисленияСО = ПолучитьПредставлениеПериодаРегистрации(Объект);
	
	ТекстПорядокЗаполнения = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") ИЛИ
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда 
		ТекстПорядокЗаполнения = "<B>" + НСтр("ru='Порядок заполнения'") + "</B> <A id=АктивизироватьЭУ href=""V8:ПорядокЗаполнения""><P id=ПорядокЗаполнения style=""DISPLAY:inline"">" 
								+ ?(Объект.ПорядокЗаполнения = 0, НСтр("ru='по сотрудникам'"), НСтр("ru='по прочим лицам'")) + "</P></A>.";
	КонецЕсли;
	
	ТекстВидаОперации = "<B>"+ Строка(Объект.ВидОперации) + "</B>";
	
	ТекстСпособаВыплат = "<B>"+ НСтр("ru='Способ заполнения документа'") + "</B> <A id=АктивизироватьЭУ href=""V8:СпособРасчетаСуммКПеречислению""><P id=СпособРасчетаСуммКПеречислению style=""DISPLAY:inline"">" + Объект.СпособРасчетаСуммКПеречислению;
	
	Если Объект.СпособРасчетаСуммКПеречислению = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц") Тогда
				
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности СО за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>).'"), ИППериодПеречисленияСО);
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда  
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности Взносов ОСМС за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>).'"), ИППериодПеречисленияСО);
		Иначе
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности Отчислений ОСМС за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>).'"), ИППериодПеречисленияСО);
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчетаСуммКПеречислению = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяца") Тогда		
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда			
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности СО по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'"),ИППериодПеречисленияСО);					
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 			
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности Взносов ОСМС по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'"),ИППериодПеречисленияСО);					
		Иначе
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности Отчислений ОСМС по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно)).'"),ИППериодПеречисленияСО);		
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчетаСуммКПеречислению = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ") Тогда		
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности СО за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;, удержанной по удельному весу).'"), ИППериодПеречисленияСО); 
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности Взносов ОСМС за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;, удержанной по удельному весу).'"), ИППериодПеречисленияСО); 
		Иначе
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по задолженности Отчислений ОСМС за <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;, удержанной по удельному весу).'"), ИППериодПеречисленияСО); 
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчетаСуммКПеречислению = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоОстаткамЗадолженностиНаКонецМесяцаПоНУ") Тогда		
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности СО по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно), удержанной по удельному весу).'"), ИППериодПеречисленияСО);			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности Взносов ОСМС по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно), удержанной по удельному весу).'"), ИППериодПеречисленияСО);			
		Иначе
			ТекстСпособаВыплат = ТекстСпособаВыплат + "</P></A>&nbsp;" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(по остаткам задолженности Отчислений ОСМС по <A id=АктивизироватьЭУ href=""V8:МесяцНачисленияСтрокой""><P id=ПериодРегистрации style=""DISPLAY:inline"">%1</P></A>&nbsp;(включительно), удержанной по удельному весу).'"), ИППериодПеречисленияСО);			
		КонецЕсли;
		
	Иначе
		
		ТекстСпособаВыплат = ТекстСпособаВыплат + НСтр("ru=' <не указан>'") + "</P></A>";
		
	КонецЕсли;	
	
	Если Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог") Тогда
			
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ВидПлатежаТекст = НСтр("ru='(суммы исчисленных СО).'");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ВидПлатежаТекст = НСтр("ru='(суммы исчисленных Взносов ОСМС).'");
		Иначе
			ВидПлатежаТекст = НСтр("ru='(суммы исчисленных Отчислений ОСМС).'");
		КонецЕсли;
			
	ИначеЕсли Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.НалогАкт") Тогда
  	
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда 
			ВидПлатежаТекст = НСтр("ru='(суммы доначисленных СО на основании акта проверки).'"); 
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ВидПлатежаТекст = НСтр("ru='(суммы доначисленных Взносов ОСМС на основании акта проверки).'");   
		Иначе 
			ВидПлатежаТекст = НСтр("ru='(суммы доначисленных Отчислений ОСМС на основании акта проверки).'"); 
		КонецЕсли;
		
	ИначеЕсли Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.НалогСам") Тогда  
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ВидПлатежаТекст = НСтр("ru='(суммы самостоятельно доначисленных СО).'");  
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ВидПлатежаТекст = НСтр("ru='(суммы самостоятельно доначисленных Взносов ОСМС).'"); 		
		Иначе
			ВидПлатежаТекст = НСтр("ru='(суммы самостоятельно доначисленных Отчислений ОСМС).'"); 
		КонецЕсли;
		
	ИначеЕсли Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.ПениАкт") Тогда
		ВидПлатежаТекст = НСтр("ru='(суммы исчисленной пени на основании акта проверки).'");
	ИначеЕсли Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.ПениСам") Тогда
		ВидПлатежаТекст = НСтр("ru='(суммы самостоятельно исчисленной пени).'");
	ИначеЕсли Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Штраф") Тогда
		ВидПлатежаТекст = НСтр("ru='(суммы исчисленного штрафа).'");
	Иначе				
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
			ВидПлатежаТекст = НСтр("ru='(прочие суммы СО).'");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда 
			ВидПлатежаТекст = НСтр("ru='(прочие суммы Взносов ОСМС).'");
		Иначе 
			ВидПлатежаТекст = НСтр("ru='(прочие суммы Отчислений ОСМС).'");
		КонецЕсли;		
	КонецЕсли;
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink=" + ЦветСсылкиСправки + " vLink=" + ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src=" + РаботаСДиалогамиКлиентСервер.ПолучитьПутьККартинкеДляHTML(Форма.ИДКартинки) + ">
	|		<DIV>
	|		" + ТекстВидаОперации + "</DIV>
	|		<DIV>
	|		" + ?(ТекстПорядокЗаполнения <> "", ТекстПорядокЗаполнения + "</DIV>
	|		<DIV>
	|		", "") + ТекстСпособаВыплат + "</DIV>
	|		<DIV>
	|		<B>" + НСтр("ru='Вид платежа'") + "</B> <A id=АктивизироватьЭУ href=""V8:ВидПлатежа""><P id=ВидПлатежа style=""DISPLAY:inline"">" + Объект.ВидПлатежа + "</P></A>&nbsp;" + ВидПлатежаТекст + "</DIV>
	|		<BR>
	|	</FONT></BODY>
	|</HTML>";
	
	Форма.ВстроеннаяСправка = ТекстМакетаВстроеннойСправки;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПодразделенияОрганизации(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПодразделениеОрганизации", "Доступность", Форма.Объект.ПорядокЗаполнения = 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядкаЗаполнения(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПорядокЗаполнения", "Видимость", (Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений")));
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьМесяцаПериода()  
	
	ОчищатьМесяцПериода = Ложь;
	ВидимостьМесяцаПериода = Истина;
	
	Если Объект.ПериодРегистрации < РасчетЗарплатыСервер.ДатаИзмененияПорядкаПеречисленияОСМС2024() Тогда
		
		ОчищатьМесяцПериода = Истина;
		ВидимостьМесяцаПериода = Ложь;
		
	ИначеЕсли НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Объект.Организация, Объект.ПериодРегистрации) Тогда
		
		ОчищатьМесяцПериода = Истина;
		ВидимостьМесяцаПериода = Ложь;
		
	ИначеЕсли НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда	
		
		ОчищатьМесяцПериода = Истина;
		ВидимостьМесяцаПериода = Ложь;
			
	КонецЕсли;
	
	Элементы.СоциальныеОтчисленияМесяцПериода.Видимость = ВидимостьМесяцаПериода;
	
	Если ОчищатьМесяцПериода Тогда
		ОчиститьМесяцПериода(); 
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьМесяцПериода()
	
	ТаблицаСоциальныеОтчисления = Объект.СоциальныеОтчисления.Выгрузить();
	ТаблицаСоциальныеОтчисления.ЗаполнитьЗначения("","МесяцПериода");
	Объект.СоциальныеОтчисления.Загрузить(ТаблицаСоциальныеОтчисления);
	
КонецПроцедуры  

&НаСервере
Функция ПроверитьЗаполнениеМесяцаПериода()
	
	МесяцПериодаЗаполнен = Ложь;
	
	Для Каждого СтрокаСоциальныеОтчисления Из Объект.СоциальныеОтчисления Цикл 			
		Если ЗначениеЗаполнено(СтрокаСоциальныеОтчисления.МесяцПериода) Тогда			
			МесяцПериодаЗаполнен = Истина; 
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат МесяцПериодаЗаполнен;
	
КонецФункции
	
&НаКлиенте
Процедура СписокСотрудниковСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.СоциальныеОтчисления.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.ФизЛицо = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ЭтаФорма, ВыбранныйЭлемент.Значение, Истина);
		Возврат;	
	КонецЕсли;
	
	Объект.ПериодРегистрации = ВыбранныйЭлемент.Значение; 
	МесяцНачисленияСтрокой   = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	Модифицированность = Истина;
	УстановитьИмяКнопки(ЭтаФорма);
	ПодготовитьСправкуФормы(ЭтаФорма);
	УстановитьВидимостьМесяцаПериода();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьПараметрыВыбораДокументаОснования(Элементы.ДокументОснование, Объект.ВидОперации);
	
	// Порядок заполнения доступен только для взносов ОСМС
	Если (Объект.ВидОперации <> Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС И Объект.ВидОперации <> Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений) И Объект.ПорядокЗаполнения > 0 Тогда
		Объект.ПорядокЗаполнения = 0;
		Элементы.СоциальныеОтчисления.ПодчиненныеЭлементы.СоциальныеОтчисленияФизЛицо.КнопкаОчистки = Неопределено;
	КонецЕсли;
		
	УстановитьВидимостьПорядкаЗаполнения(ЭтаФорма);
	УстановитьДоступностьПодразделенияОрганизации(ЭтаФорма);
	УстановитьВидимостьМесяцаПериода();
	ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДокументаОснования(Элемент, ВидОперации)
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", Документы.СОПеречислениеВФонды.ДоступныеДокументыОснования(ВидОперации)));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры



