#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДоступныеДокументыОснования(ВидОперации) Экспорт
	
	ДоступныеДокументы = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС);
	КонецЕсли;
	
	
	Возврат ДоступныеДокументы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт 
	
	ПериодПоМесяцам = ПериодПоМесяцам(Параметры);
	
	ВидОперации = Параметры.ВидОперации;
	
	ДанныеРеглУчетаТекст = "";
	
	УсловиеНаПодразделение = "";
		
	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) И Параметры.ПорядокЗаполнения = 0 Тогда
		УсловиеНаПодразделение = " И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
	КонецЕсли;
		
	УсловиеНаПодразделение = УсловиеНаПодразделение + "И РаботникиОрганизацийСрезПоследних.СтруктурноеПодразделение = &парамСтруктурноеПодразделение";
	
	Если Параметры.ПорядокЗаполнения = 1 Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурнаяЕдиница = &СтруктурнаяЕдиница ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;

	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			ИНАЧЕ РаботникиОрганизации.Период
	|		КОНЕЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|	И РаботникиОрганизации.Период <= &парамНачало
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизаций
	|ИЗ
	|	ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|		ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|			И (ДатыПоследнихНазначений.Период = ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
	|			КОНЕЦ)
	|			И (РаботникиОрганизацийСрезПоследних.Организация = &парамГоловнаяОрганизация)
	|			И (РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизацийСрезПоследних.Активность)
	|			И (ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И ДатыПоследнихНазначений.Период < НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|					ТОГДА ДатыПоследнихНазначений.ФизЛицо <> РаботникиОрганизацийСрезПоследних.Организация.ИндивидуальныйПредприниматель
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			" + УсловиеНаПодразделение + "	
	|;
	|";
	
	ИмяПериода = "МесяцНалоговогоПериода";
	Если ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ИмяРегистра = "СОРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ИмяРегистра = "ООСМСРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		Если Параметры.ПоУдельномуВесу Тогда
			ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды";
			ИмяПериода = "МесяцВыплатыДоходов";
		Иначе
			ИмяРегистра = "ВОСМСРасчетыСФондами";
		КонецЕсли;
		ИмяРесурса = "Взнос";
	Иначе 
		Возврат;	
	КонецЕсли;
	
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСФондамиОстатки.Физлицо КАК ФизЛицо,
	|	РасчетыСФондамиОстатки." + ИмяРесурса + "Остаток КАК Сумма,
	|	РасчетыСФондамиОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&парамМесяцПериода КАК МесяцПериода
	|ИЗ
	|	РегистрНакопления." + ИмяРегистра + ".Остатки(
	|			&парамГраницаОстатков,
	|			Организация = &парамОрганизация" + УсловиеСтруктурноеПодразделение + "
	|			" + ?(НЕ Параметры.ПоУдельномуВесу, "И ВидПлатежа = &парамВидПлатежа", "") + "
	|			И " + ?(Параметры.ПоОстаткам, "
	|				" + ИмяПериода + " <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
	|				" + ИмяПериода + " МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + ") КАК РасчетыСФондамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.ФизЛицо = РасчетыСФондамиОстатки.ФизЛицо";
	
	Если (ВидОперации <> Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС И ВидОперации <> Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений) Тогда //  по сотрудникам организации
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	(НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL) ИЛИ (РасчетыСФондамиОстатки.Физлицо = РасчетыСФондамиОстатки.Организация.ИндивидуальныйПредприниматель)
		|";
	ИначеЕсли Параметры.ПорядокЗаполнения = 0 Тогда //  по сотрудникам организации
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";
	Иначе  // по непринятым лицам
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";
	КонецЕсли;
		
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
	"
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСФондамиОстатки.Физлицо.Наименование
	|";
	
	Если НЕ ПериодПоМесяцам ИЛИ Параметры.ПорядокЗаполнения = 1 Тогда 		
		ДанныеРеглУчетаТекст = СтрЗаменить(ДанныеРеглУчетаТекст, "РасчетыСФондамиОстатки.МесяцНалоговогоПериода", "&парамМесяцПериода");		
	КонецЕсли;
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	Если Параметры.ПорядокЗаполнения = 1 Тогда
		Если ЗначениеЗаполнено(Параметры.парамСтруктурноеПодразделение) Тогда
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамСтруктурноеПодразделение);
		Иначе
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамМесяцПериода", ?(ПериодПоМесяцам, НачалоМесяца(Параметры.парамМесяц), ""));
	
	ТаблицаДанныеРеглУчета = Запрос.Выполнить().Выгрузить();

	// настройки периода действия получаем на период заполнения документа
	// при расчете по периоду действия расчет ОСМС будет разноситься по месяцу действия события,
	// делить сумму ОСМС по периодам необходимости нет
	Если ПериодПоМесяцам И Параметры.ПорядокЗаполнения = 0 Тогда
		
		ДанныеПериодыОплатыМедицинскогоСтрахования = ПолучитьДанныеОплатыМедицинскогоСтрахования(Параметры, ТаблицаДанныеРеглУчета); 
				
		ТаблицаДанныеРеглУчета = РаспределитьДанныеМедстрахования(Параметры, ТаблицаДанныеРеглУчета, ДанныеПериодыОплатыМедицинскогоСтрахования); 
						
	КонецЕсли;  
	
	СтруктураДанных = Новый Структура();
	
	Для Каждого СтрокаТаблицыРеглУчета Из ТаблицаДанныеРеглУчета Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыРеглУчета.Сумма) И СтрокаТаблицыРеглУчета.Сумма > 0 Тогда
			НоваяСтрока = Параметры.ТаблицаСоциальныеОтчисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРеглУчета);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаСоциальныеОтчисления", Параметры.ТаблицаСоциальныеОтчисления); 
	 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
	   			
КонецПроцедуры 

Процедура ПодготовитьДанныеДляРасчета(Параметры, АдресХранилища) Экспорт  
		
	ИмяПериода = "МесяцНалоговогоПериода";
	Если Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ИмяРегистра = "СОРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ИмяРегистра = "ООСМСРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		Если Параметры.ПоУдельномуВесу Тогда
			ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды";
			ИмяПериода = "МесяцВыплатыДоходов";
		Иначе
			ИмяРегистра = "ВОСМСРасчетыСФондами";
		КонецЕсли;
		ИмяРесурса = "Взнос";
	Иначе 
		Возврат;	
	КонецЕсли;
	
	ПериодПоМесяцам = ПериодПоМесяцам(Параметры);
	
	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо,
	|	СОПеречислениеВФондыСоциальныеОтчисления.НомерСтроки,
	|	РасчетыСФондамиОстатки." + ИмяРесурса + "Остаток КАК Сумма, 
	|	РасчетыСФондамиОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&парамМесяцПериода КАК МесяцПериода
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + ".Остатки(
	|				&парамГраницаОстатков,
	|				Организация = &парамОрганизация
	|					" + ?(НЕ Параметры.ПоУдельномуВесу, "И ВидПлатежа = &парамВидПлатежа", "") + "
	|					И ВЫБОР
	|						КОГДА &ПоОстаткам
	|							ТОГДА " + ИмяПериода + " <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|						ИНАЧЕ " + ИмяПериода + " МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|					КОНЕЦ
	|					И ФизЛицо В
	|						(ВЫБРАТЬ
	|							Док.ФизЛицо
	|						ИЗ
	|							Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК Док
	|						ГДЕ
	|							Док.Ссылка = &парамСсылка)) КАК РасчетыСФондамиОстатки
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = РасчетыСФондамиОстатки.ФизЛицо
	|ГДЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СОПеречислениеВФондыСоциальныеОтчисления.НомерСтроки";
	
	Если НЕ ПериодПоМесяцам Тогда 		
		ДанныеРеглУчетаТекст = СтрЗаменить(ДанныеРеглУчетаТекст, "РасчетыСФондамиОстатки.МесяцНалоговогоПериода", "&парамМесяцПериода");		
	КонецЕсли;
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("парамМесяцПериода", ?(ПериодПоМесяцам, НачалоМесяца(Параметры.парамМесяц), "")); 
	
	ТаблицаДанныеРеглУчета = Запрос.Выполнить().Выгрузить();
		
	// настройки периода действия получаем на период заполнения документа
	// при расчете по периоду действия расчет ОСМС будет разноситься по месяцу действия события,
	// делить сумму ОСМС по периодам необходимости нет
	Если ПериодПоМесяцам Тогда 
			
		ЗапросФизЛица = Новый Запрос;
		ЗапросФизЛица.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанныеРеглУчета.ФизЛицо КАК ФизЛицо,
		|	ТаблицаДанныеРеглУчета.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанныеРеглУчета.Сумма КАК Сумма,
		|	ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ТаблицаДанныеРеглУчета.МесяцПериода КАК МесяцПериода 
		|ПОМЕСТИТЬ ВТ_ТаблицаДанныеРеглУчета 
		|ИЗ
		|	&ТаблицаДанныеРеглУчета КАК ТаблицаДанныеРеглУчета
		|;
		|ВЫБРАТЬ
		|	ТаблицаДанныеРеглУчета.ФизЛицо КАК ФизЛицо,
		|	МИНИМУМ(ТаблицаДанныеРеглУчета.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДанныеРеглУчета.Сумма КАК Сумма,
		|	ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ТаблицаДанныеРеглУчета.МесяцПериода КАК МесяцПериода 
		|ИЗ 
		|	ВТ_ТаблицаДанныеРеглУчета КАК ТаблицаДанныеРеглУчета
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанныеРеглУчета.ФизЛицо,
		|	ТаблицаДанныеРеглУчета.Сумма,
		|	ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода,
		|	ТаблицаДанныеРеглУчета.МесяцПериода";
			
		ЗапросФизЛица.УстановитьПараметр("ТаблицаДанныеРеглУчета", ТаблицаДанныеРеглУчета); 
		ТаблицаДанныеРеглУчета = ЗапросФизЛица.Выполнить().Выгрузить();
		
		ДанныеПериодыОплатыМедицинскогоСтрахования = ПолучитьДанныеОплатыМедицинскогоСтрахования(Параметры, ТаблицаДанныеРеглУчета); 
				
		ТаблицаДанныеРеглУчета = РаспределитьДанныеМедстрахования(Параметры, ТаблицаДанныеРеглУчета, ДанныеПериодыОплатыМедицинскогоСтрахования); 	
			
		// Убираем нулевые строки
		УдаляемыеСтрокиСоциальныеОтчисления = Новый Массив;
		
		Для Каждого СтрокаТаблицаДанныеРеглУчета Из ТаблицаДанныеРеглУчета Цикл
			Если СтрокаТаблицаДанныеРеглУчета.Сумма <= 0 Тогда
				УдаляемыеСтрокиСоциальныеОтчисления.Добавить(СтрокаТаблицаДанныеРеглУчета);
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрокаСоциальныеОтчисления Из УдаляемыеСтрокиСоциальныеОтчисления Цикл
			ТаблицаДанныеРеглУчета.Удалить(УдаляемаяСтрокаСоциальныеОтчисления);
		КонецЦикла;
		
	КонецЕсли; 
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаСоциальныеОтчисления", ТаблицаДанныеРеглУчета); 
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
			
КонецПроцедуры

Процедура ЗаполнитьПоРасчетПениОПВиСО(Объект, Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Объект.ВидПлатежа = Основание.ВидПлатежа;
	
	Объект.ДокументОснование = Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетПени.ФизЛицо,
	|	СУММА(РасчетПени.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК РасчетПени
	|ГДЕ
	|	РасчетПени.Ссылка = &Основание
	|	И РасчетПени.МесяцНалоговогоПериода МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|СГРУППИРОВАТЬ ПО
	|	РасчетПени.ФизЛицо
	|";
	
	Объект.СоциальныеОтчисления.Загрузить(Запрос.Выполнить().Выгрузить());		
	
	Объект.ДокументОснование = Основание;

КонецПроцедуры

Функция ПолучитьДанныеОплатыМедицинскогоСтрахования(Параметры, ТаблицаДанныеРеглУчета) Экспорт  
	
	ПоЗадолженностиЗаМесяц = (Параметры.ПоОстаткам = Ложь); 
	
	ЗапросПериодыМедСтрахования = Новый Запрос;
	
	ЗапросПериодыМедСтрахования.УстановитьПараметр("ТаблицаДанныеРеглУчета", ТаблицаДанныеРеглУчета); 
		
	Если НЕ ПоЗадолженностиЗаМесяц Тогда
		
		ЗапросПериодыМедСтрахования.Текст = "ВЫБРАТЬ 
			|	ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода КАК МинимумМесяцНалоговогоПериода,
			|	ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода КАК МаксимумМесяцНалоговогоПериода
			|ПОМЕСТИТЬ  ТаблицаДанныеРеглУчета
			|ИЗ
		  	|&ТаблицаДанныеРеглУчета КАК ТаблицаДанныеРеглУчета
			|;
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МИНИМУМ(ТаблицаДанныеРеглУчета.МинимумМесяцНалоговогоПериода) КАК МинимумМесяцНалоговогоПериода,
			|   МАКСИМУМ(ТаблицаДанныеРеглУчета.МаксимумМесяцНалоговогоПериода) КАК МаксимумМесяцНалоговогоПериода
			|ИЗ
			|ТаблицаДанныеРеглУчета
			|";
		
		РезультатЗапроса = ЗапросПериодыМедСтрахования.Выполнить();
		ВыборкаРезультата = РезультатЗапроса.Выбрать();
		
		Если ВыборкаРезультата.Следующий() Тогда
			
			Если ВыборкаРезультата.МинимумМесяцНалоговогоПериода = NULL Тогда
				ЗапросПериодыМедСтрахования.УстановитьПараметр("НачалоПериода", НачалоМесяца(Параметры.парамМесяц));
				ЗапросПериодыМедСтрахования.УстановитьПараметр("КонецПериода", КонецМесяца(Параметры.парамМесяц));
			Иначе
				ЗапросПериодыМедСтрахования.УстановитьПараметр("НачалоПериода", ВыборкаРезультата.МинимумМесяцНалоговогоПериода);
				ЗапросПериодыМедСтрахования.УстановитьПараметр("КонецПериода", ВыборкаРезультата.МаксимумМесяцНалоговогоПериода);
			КонецЕсли;
			
		Иначе
			
			ЗапросПериодыМедСтрахования.УстановитьПараметр("НачалоПериода", НачалоМесяца(Параметры.парамМесяц));
			ЗапросПериодыМедСтрахования.УстановитьПараметр("КонецПериода", КонецМесяца(Параметры.парамМесяц));
			
		КонецЕсли;
		
	Иначе
		
		ЗапросПериодыМедСтрахования.УстановитьПараметр("НачалоПериода", НачалоМесяца(Параметры.парамМесяц));
		ЗапросПериодыМедСтрахования.УстановитьПараметр("КонецПериода", КонецМесяца(Параметры.парамМесяц));
	
	КонецЕсли;
			
	ЗапросПериодыМедСтрахования.Текст = "ВЫБРАТЬ
		   |   ТаблицаДанныеРеглУчета.ФизЛицо КАК ФизЛицо,
		   |   ТаблицаДанныеРеглУчета.Сумма КАК Сумма,
		   |   ТаблицаДанныеРеглУчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
		   |ПОМЕСТИТЬ  ТаблицаДанныеРеглУчета
		   |ИЗ
		   |   &ТаблицаДанныеРеглУчета КАК ТаблицаДанныеРеглУчета 
		   |;
		   |    ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	ПериодыОплатыДляМедицинскогоСтрахования.ПериодРегистрации КАК ПериодРегистрации,
           |	ПериодыОплатыДляМедицинскогоСтрахования.Организация КАК Организация,
           |	ПериодыОплатыДляМедицинскогоСтрахования.ФизическоеЛицо КАК ФизическоеЛицо,
           |	НАЧАЛОПЕРИОДА(ПериодыОплатыДляМедицинскогоСтрахования.МесяцСобытия, МЕСЯЦ) КАК МесяцПериода,
           |	МАКСИМУМ(ПериодыОплатыДляМедицинскогоСтрахования.УчитываемыеДниСобытия) КАК УчитываемыеДниСобытия,
           |	МАКСИМУМ(ПериодыОплатыДляМедицинскогоСтрахования.УчитываемыеДниПериода) КАК УчитываемыеДниПериода,
           |	СУММА(ПериодыОплатыДляМедицинскогоСтрахования.СуммаСобытия) КАК СуммаСобытия
           |ПОМЕСТИТЬ ВТДанныеПериодовОплатыМедстрахования
           |ИЗ
           |	ТаблицаДанныеРеглУчета КАК НалогиВзносыОтчисления
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОплатыДляМедицинскогоСтрахования КАК ПериодыОплатыДляМедицинскогоСтрахования
           |		ПО НалогиВзносыОтчисления.МесяцНалоговогоПериода = ПериодыОплатыДляМедицинскогоСтрахования.ПериодРегистрации
           |			И НалогиВзносыОтчисления.ФизЛицо = ПериодыОплатыДляМедицинскогоСтрахования.ФизическоеЛицо
           |
           |СГРУППИРОВАТЬ ПО
           |	ПериодыОплатыДляМедицинскогоСтрахования.ПериодРегистрации,
		   |	НАЧАЛОПЕРИОДА(ПериодыОплатыДляМедицинскогоСтрахования.МесяцСобытия, МЕСЯЦ),
           |	ПериодыОплатыДляМедицинскогоСтрахования.Организация,
           |	ПериодыОплатыДляМедицинскогоСтрахования.ФизическоеЛицо
           |;
           |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	ООСМССведенияОДоходахОбороты.ПериодМесяц КАК ПериодРегистрации,
		   |	ООСМССведенияОДоходахОбороты.Организация КАК Организация,
		   |	ООСМССведенияОДоходахОбороты.ФизЛицо КАК ФизическоеЛицо,
		   |	ООСМССведенияОДоходахОбороты.СуммаДоходаОборот КАК ОблагаемыйДоход
		   |ПОМЕСТИТЬ ВТДанныеОблагаемогоДоходаПоВидуОСМС
		   |ИЗ
		   |	РегистрНакопления.ООСМССведенияОДоходах.Обороты(
           |			&НачалоПериода,
           |			&КонецПериода,
           |			Авто,		   
		   |			(ФизЛицо, Организация) В
		   |					(ВЫБРАТЬ
		   |						ДанныеПериодовОплатыМедстрахования.ФизическоеЛицо,
		   |						ДанныеПериодовОплатыМедстрахования.Организация
		   |					ИЗ
		   |						ВТДанныеПериодовОплатыМедстрахования КАК ДанныеПериодовОплатыМедстрахования)
		   |				И СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		   |) КАК ООСМССведенияОДоходахОбороты               
		   |;
		   |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	ДанныеПериодовОплатыМедстрахования.ПериодРегистрации КАК ПериодРегистрации,
           |	ДанныеПериодовОплатыМедстрахования.Организация КАК Организация,
           |	ДанныеПериодовОплатыМедстрахования.МесяцПериода КАК МесяцПериода,
           |	ДанныеПериодовОплатыМедстрахования.УчитываемыеДниСобытия КАК УчитываемыеДниСобытия,
           |	ДанныеПериодовОплатыМедстрахования.УчитываемыеДниПериода КАК УчитываемыеДниПериода,
           |	ДанныеПериодовОплатыМедстрахования.СуммаСобытия КАК СуммаСобытия,
           |	ДанныеПериодовОплатыМедстрахования.ФизическоеЛицо КАК ФизическоеЛицо,
           |	ЕСТЬNULL(ДанныеОблагаемогоДоходаПоВидуОСМС.ОблагаемыйДоход, 0) КАК ОблагаемыйДоход
           |ПОМЕСТИТЬ ВТДанныеПериодаДействияДляМедицинскогоСтрахования
           |ИЗ
           |	ВТДанныеПериодовОплатыМедстрахования КАК ДанныеПериодовОплатыМедстрахования
		   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОблагаемогоДоходаПоВидуОСМС КАК ДанныеОблагаемогоДоходаПоВидуОСМС
		   |		ПО ДанныеПериодовОплатыМедстрахования.Организация = ДанныеОблагаемогоДоходаПоВидуОСМС.Организация 
		   |			И ДанныеПериодовОплатыМедстрахования.ПериодРегистрации = ДанныеОблагаемогоДоходаПоВидуОСМС.ПериодРегистрации
		   |			И ДанныеПериодовОплатыМедстрахования.ФизическоеЛицо = ДанныеОблагаемогоДоходаПоВидуОСМС.ФизическоеЛицо  
		   |;
		   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	ДанныеПериодовОплатыМедстрахования.ПериодРегистрации КАК МесяцНалоговогоПериода,
           |	ДанныеПериодовОплатыМедстрахования.МесяцПериода КАК МесяцПериода,
           |	ДанныеПериодовОплатыМедстрахования.УчитываемыеДниСобытия КАК УчитываемыеДниСобытия,
           |	ДанныеПериодовОплатыМедстрахования.УчитываемыеДниПериода КАК УчитываемыеДниПериода,
           |	ДанныеПериодовОплатыМедстрахования.СуммаСобытия КАК СуммаСобытия,
           |	ДанныеПериодовОплатыМедстрахования.ФизическоеЛицо КАК ФизическоеЛицо,
           |	ДанныеПериодовОплатыМедстрахования.ОблагаемыйДоход КАК ОблагаемыйДоход,
           |	ВЫБОР
           |		КОГДА ДанныеПериодовОплатыМедстрахования.ПериодРегистрации = ДанныеПериодовОплатыМедстрахования.МесяцПериода
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК Сортировка
           |ИЗ
           |	ВТДанныеПериодаДействияДляМедицинскогоСтрахования КАК ДанныеПериодовОплатыМедстрахования
           |
           |УПОРЯДОЧИТЬ ПО
           |	Сортировка УБЫВ";
	
	   ЗапросПериодыМедСтрахования.УстановитьПараметр("ПериодРегистрации", Параметры.парамМесяц);
	   
	   Если Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда 
		   		   
			ЗапросПериодыМедСтрахования.Текст = СтрЗаменить(ЗапросПериодыМедСтрахования.Текст, "ООСМССведенияОДоходах", "ВОСМССведенияОДоходах");
							
		КонецЕсли;
	   
	   Результат = ЗапросПериодыМедСтрахования.Выполнить().Выгрузить();	
	   
	   Возврат Результат; 
	
КонецФункции

Функция РаспределитьДанныеМедстрахования(Параметры, ТаблицаНалогиВзносы, ПериодыОплатыМедицинскогоСтрахования, ТолькоДобавить = Ложь)

	// рассчитываем данные в таблице ТаблицаНалогиВзносыИтерация
	// если при распределении нет проблем, то переносим в таблицу ТаблицаНалогиВзносыОбработанная
	// если при распределении есть проблемы, то данные не переносим
	ТаблицаНалогиВзносыИтерация = ТаблицаНалогиВзносы.СкопироватьКолонки();

	// создаем вторую временную таблицу, в которой формируем данные последовательно 
	// с учетом ранее произведенной в запросе сортировки по настройкам пользователя
	ТаблицаНалогиВзносыОбработанная = ТаблицаНалогиВзносы.СкопироватьКолонки();
	
	ОтборТаблицы = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода");
	ОтборОсновнойСтроки = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериода");
	МассивДополнительныхСообщений = Новый Массив;
	
	Для Каждого СтрокаНВО Из ТаблицаНалогиВзносы Цикл
		
		Если СтрокаНВО.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
        ЗаполнитьЗначенияСвойств(ОтборТаблицы, СтрокаНВО);
		ЗаполнитьЗначенияСвойств(ОтборОсновнойСтроки, СтрокаНВО);
		
		ОтборТаблицы.ФизическоеЛицо = СтрокаНВО.ФизЛицо;
		ОтборОсновнойСтроки.ФизическоеЛицо = СтрокаНВО.ФизЛицо;
		
		ПериодыОплатыФизическогоЛица = ПериодыОплатыМедицинскогоСтрахования.НайтиСтроки(ОтборТаблицы);
		
		// основную строку определяем по периоду регистрации
		ДанныеОсновнойСтроки = ПериодыОплатыМедицинскогоСтрахования.НайтиСтроки(ОтборОсновнойСтроки);
		
		ОсновнаяСтрока = Неопределено;
		
		// основную строку определяем по периоду регистрации
		Если ДанныеОсновнойСтроки.Количество() > 0 Тогда
			
			ОсновнаяСтрока = ДанныеОсновнойСтроки[0];
			
		КонецЕсли;
		
		МассивДополнительныхСообщений.Очистить();
		ТаблицаНалогиВзносыИтерация.Очистить();
		
		Если ПериодыОплатыФизическогоЛица.Количество() > 0 Тогда
			
            // если нет строки периода регистрации, то относим на последнюю строку
			Если ОсновнаяСтрока = Неопределено Тогда
				ОсновнаяСтрока = ПериодыОплатыФизическогоЛица[ПериодыОплатыФизическогоЛица.Количество() - 1];
			КонецЕсли;
			
			СуммаРаспределенияБезМесяцаЗаполнения = 0;
			
			ОшибкаАлгоритмаПриРаспределении = Ложь; 
			ОсновнаяСтрокаИтерации = Неопределено;
			
			Для Каждого ПериодОплаты Из ПериодыОплатыФизическогоЛица Цикл
				
				// проверим делитель
				Если ПериодОплаты.УчитываемыеДниСобытия = 0
					ИЛИ ПериодОплаты.ОблагаемыйДоход = 0 Тогда
					
					МассивДополнительныхСообщений.Добавить(НСтр("ru = ' - учитываемые дни события или облагаемый доход равен нулю'"));
					ОшибкаАлгоритмаПриРаспределении	= Истина;
					
					Продолжить;
					
				КонецЕсли;
					
				КоэффициентУчитываемыхДней = ПериодОплаты.УчитываемыеДниПериода / ПериодОплаты.УчитываемыеДниСобытия;
				КоэффициентСуммыОСМС = ПериодОплаты.СуммаСобытия / ПериодОплаты.ОблагаемыйДоход;
				
				СтрокаНВОИтерация = ТаблицаНалогиВзносыИтерация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНВОИтерация, СтрокаНВО);
							
				СтрокаНВОИтерация.МесяцПериода = ПериодОплаты.МесяцПериода;
				
                // распределяем целиком на отпуск, если нет других начислений в периоде КоэффициентСуммыОСМС = 1 
				Если ОсновнаяСтрока = ПериодОплаты
					И КоэффициентСуммыОСМС = 1 Тогда
					
					ОсновнаяСтрокаИтерации = СтрокаНВОИтерация;
					
				Иначе
										
					СтрокаНВОИтерация.Сумма = Окр(СтрокаНВОИтерация.Сумма * КоэффициентСуммыОСМС * КоэффициентУчитываемыхДней);
					СуммаРаспределенияБезМесяцаЗаполнения = СуммаРаспределенияБезМесяцаЗаполнения + СтрокаНВОИтерация.Сумма;

				КонецЕсли;
							
				// проверим сумму после распределения
				Если СтрокаНВОИтерация.Сумма = 0 Тогда
					
					МассивДополнительныхСообщений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - сумма в периоде события %1 равна 0'"), СтрокаНВОИтерация.Сумма));
					ОшибкаАлгоритмаПриРаспределении	= Истина;
					
					Продолжить;
					
				КонецЕсли;
						
			КонецЦикла;
			
			// выводим информационное сообщение пользователю и добавляем строку без распределения для самостоятельного распределения пользователем
			Если ОшибкаАлгоритмаПриРаспределении Тогда
				
				ТекстДополнительныхСообщений = "";
				
				Для Каждого СтрокаСообщения Из МассивДополнительныхСообщений Цикл
					
					ТекстДополнительныхСообщений = Символы.ПС + СтрокаСообщения;
					
				КонецЦикла;						
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось распределить сумму медицинского страхования по физическому лицу %1 в периоде %2%3
																								|Сумму необходимо распределить вручную по месяцам периода события в форме строки.'"), 
																								СтрокаНВО.ФизЛицо, СтрокаНВО.МесяцНалоговогоПериода, ТекстДополнительныхСообщений);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				СтрокаНВООбработанная = ТаблицаНалогиВзносыОбработанная.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНВООбработанная, СтрокаНВО);
				
			Иначе
				
				// при начислении в месяце регистрации сумм за будущие периоды и отсутствии в этом месяце дохода
				// добавляем строку остатка на период заполнения документа
				Если ОсновнаяСтрокаИтерации = Неопределено Тогда
					
					СтрокаНВООбработанная = ТаблицаНалогиВзносыИтерация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНВООбработанная, СтрокаНВО);
					
					ОсновнаяСтрокаИтерации = СтрокаНВООбработанная;
					
					ТаблицаНалогиВзносыИтерация.Сортировать("МесяцНалоговогоПериода, МесяцПериода");
					
				КонецЕсли;
				
				Для Каждого СтрокаИтерации Из ТаблицаНалогиВзносыИтерация Цикл
					
					СтрокаНВООбработанная = ТаблицаНалогиВзносыОбработанная.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНВООбработанная, СтрокаИтерации);
					
					Если ОсновнаяСтрокаИтерации = СтрокаИтерации Тогда
						СтрокаНВООбработанная.Сумма = СтрокаНВООбработанная.Сумма - СуммаРаспределенияБезМесяцаЗаполнения;		
					КонецЕсли;
					
				КонецЦикла;						
				
			КонецЕсли;				
			
		Иначе
			
			СтрокаНВООбработанная = ТаблицаНалогиВзносыОбработанная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНВООбработанная, СтрокаНВО);  	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаНалогиВзносыОбработанная.Свернуть("ФизЛицо, МесяцПериода", "Сумма");  
	ТаблицаНалогиВзносыОбработанная.Сортировать("ФизЛицо Возр, МесяцПериода Возр");
	                                                  
	Возврат ТаблицаНалогиВзносыОбработанная; 
	
КонецФункции

Функция ПериодПоМесяцам(Параметры)
	
	ИспользуетсяПериодДействия = НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Параметры.парамОрганизация, Параметры.парамМесяц);
	
	Возврат (Параметры.парамМесяц >= РасчетЗарплатыСервер.ДатаИзмененияПорядкаПеречисленияОСМС2024()
			И (Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС 
				ИЛИ Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС)
				И НЕ ИспользуетсяПериодДействия); 
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьВидОперацииПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СОПеречислениеВФонды.Ссылка
		|ИЗ
		|	Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
		|ГДЕ
		|	СОПеречислениеВФонды.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениевФонды.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СОПеречислениеВФонды.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	ВОПоУмолчанию = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ.СОПеречислениеВФонды");
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			ДокументОбъект.ВидОперации = ВОПоУмолчанию;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли