#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = ИсчислениеПени.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ИсчислениеПени);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");

	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		// если производился автоматический расчет, то обновим сумму документа
		СуммаДокумента = ИсчислениеПени.Итог("Сумма");
	КонецЕсли;	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениСО 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		
		Если ИсчислениеПени.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ИсчислениеПени.ДатаНачала");
			МассивНепроверяемыхРеквизитов.Добавить("ИсчислениеПени.ДатаОкончания");
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ИсчислениеПени Цикл
			
			Если СтрокаТЧ.ДатаНачала > СтрокаТЧ.ДатаОкончания Тогда
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""ИПН"": '"),СокрЛП(СтрокаТЧ.НомерСтроки));
				ТекстСообщения = НСтр("ru='дата начала периода расчета пени не может быть больше даты окончания!'");
				Поле = "ИсчислениеПени" + "[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДатаНачала";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РасчетПениОПВиСО.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	ТаблицаСведенияОДоходах = ПараметрыПроведения.ИсчислениеПени;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ОПВРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ОПВРасчетыСФондами", Движения, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.СОРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "СОРасчетыСФондами", Движения, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ОППВРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ОППВРасчетыСФондами", Движения, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ОПВРРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ОПВРРасчетыСФондами", Движения, Отказ);
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ВОСМСРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ВОСМСРасчетыСФондами", Движения, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ООСМСРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ООСМСРасчетыСФондами", Движения, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениЕП
		Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениЕП Тогда
		ТаблицаИсчислениеПени = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, 
																						ПараметрыПроведения.ИсчислениеПени,
																						Движения.ЕПРасчетыСФондами.ВыгрузитьКолонки(),
																						Отказ);
		РасчетЗарплатыСервер.СформироватьДвижения(ТаблицаИсчислениеПени, "ЕПРасчетыСФондами", Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли