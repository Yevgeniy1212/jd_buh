#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеПолучатель");
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником ТОГДА
		
		СписокФизЛиц = Новый Массив();
		СписокФизЛиц.Добавить(Контрагент);
		
		РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеПолучатель",СписокФизЛиц);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
    ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
        МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыдачаВПодотчет");
	КонецЕсли;
	
	Если НЕ ОрганизацияПлательщикНалогаНаПрибыль ИЛИ НЕ УчитыватьКПН Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;	
	
	Если НЕ НеобходимостьОтраженияВНУ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	Иначе
		
		Если НЕ ЕстьРасчетыПоКредитам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;
		
		Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;		
		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		И НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомБУ");
		Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		КонецЕсли;		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником
		И НЕ (Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации)) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		// Проверка соответствия суммы документа- расшифровке по строкам
		Если ВыдачаВПодотчет.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не совпадает сумма документа и суммы выплат по строкам документа'"), ЭтотОбъект, "ВыдачаВПодотчет", "Объект", Отказ);
		КонецЕсли;	
	КонецЕсли;	

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	
		Если ВалютаДокумента <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			ТекстСообщения = НСтр("ru = 'Возврат заработной платы можно оформлять только в %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ВалютаДокумента", ВалютаДокумента);
		Реквизиты.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Реквизиты.Вставить("Регистратор", Ссылка);
		
		Для Каждого СтрокаТабличнойЧасти Из РасшифровкаПлатежа Цикл
			
			Реквизиты.Вставить("ДоговорКонтрагента", СтрокаТабличнойЧасти.ДоговорКонтрагента); 
			Реквизиты.Вставить("ВалютаВзаиморасчетов", СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			
			ДополнениеКСообщению = НСтр("ru = 'Строка %1 - '");
			ДополнениеКСообщению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДополнениеКСообщению, СтрокаТабличнойЧасти.НомерСтроки);
			УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ, ДополнениеКСообщению);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
    ЕстьРасшифровкаПлатежа = Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);

    Если ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
        ДоговорКонтрагента            = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента            = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
    КонецЕсли;
    
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВыдачаВПодотчет.Очистить();	
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее	Тогда
		СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи); 
	
	// Изменение статуса счетов на оплату
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда  
		
		ЕстьСчетаНаОплату = Ложь;
		
		СчетаНаОплату = РасшифровкаПлатежа.ВыгрузитьКолонку("СчетНаОплату");
		
		Для Каждого СчетНаОплату Из СчетаНаОплату Цикл  
			
			Если СчетНаОплату <> Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
				ЕстьСчетаНаОплату = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСчетаНаОплату Тогда 
			
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			ТаблицаРеквизитов.Колонки.Добавить("Период");
			ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
			ТаблицаРеквизитов.Колонки.Добавить("Организация");
			
			СтрокаТабРеквизитов = ТаблицаРеквизитов.Добавить();
			СтрокаТабРеквизитов.Период      = Дата;
			СтрокаТабРеквизитов.Регистратор = Ссылка;
			СтрокаТабРеквизитов.Организация = Организация;
			
			ТаблицаОплатаСчетов = Документы.ПриходныйКассовыйОрдер.ТаблицаОплатаСчетов(ЭтотОбъект);
			
			ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
				ТаблицаОплатаСчетов, ТаблицаРеквизитов, Истина);
			
			СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
				ТаблицаСтатусовСчетов, ТаблицаРеквизитов);		
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ      = 0;
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПриходныйКассовыйОрдер.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
		
	// Изменение статуса счетов на оплату 
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;	
		
	Если Не ГрупповоеПерепроведение Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;	 	
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПрочееПоступление(ПараметрыПроведения.РеквизитыПрочее, 
		Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПеречислениеВПодотчет(ПараметрыПроведения.ТаблицаВозвратПодотчетником, 
		ПараметрыПроведения.РеквизитыВозвратПодотчетником, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Возврат ЗП
	РасчетЗарплатыСервер.СформироватьДвиженияВозвратЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаВозвратЗП, Движения, Истина, Отказ, Ложь);

	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);  

	// Изменение статуса счетов на оплату
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ГрупповоеПерепроведение Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли



