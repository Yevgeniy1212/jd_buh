#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "Касса");
	
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СтатьяДвиженияДенежныхСредств", "СтатьиДДС_РозничнаяВыручка");
	
	// возврат от подотчетника
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Подотчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПодотчетником");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ПодотчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПодотчетником");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// возврат от сотрудника
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Зарплата");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствРаботником");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ЗарплатаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствРаботником");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");

	// возврат ДС поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "РасчетыСПоставщикомПоВозвратам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПоставщикомНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// получение наличности в банке
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПолучениеНаличныхДенежныхСредствВБанке");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "БезналичныеДеньгиНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПолучениеНаличныхДенежныхСредствВБанке");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// расчеты по займам и кредитам
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКВыплате");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКВыплатеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	// прочие расчеты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПокупателемНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Касса");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	Для Каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасшифровкаПлатежа", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасчетыПоКредитам", "ВидОперации");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасшифровкаПлатежа") Тогда
		
		ДанныеЗаполнения.ЕстьРасшифровкаПлатежа = ЕстьРасшифровкаПлатежа(ДанныеЗаполнения.ВидОперации);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасчетыПоКредитам") Тогда
		
		ДанныеЗаполнения.ЕстьРасчетыПоКредитам = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	КонецЕсли;

КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПодотчетником");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПоставщиком");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствРаботником");
	ВидыОпераций.Добавить("ПолучениеНаличныхДенежныхСредствВБанке");
	ВидыОпераций.Добавить("РасчетыПоКредитамИЗаймамСКонтрагентами");
	ВидыОпераций.Добавить("ОплатаСтруктурногоПодразделения");
	ВидыОпераций.Добавить("ПриходДенежныхСредствПрочее");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда

		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам       = СчетаУчета.СчетВозвратов;

		Иначе

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам       = СчетаУчета.СчетАвансовПокупателя;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетаКассы(Касса, СчетКасса) Экспорт
	
	Если НЕ Касса.Пустая() Тогда
		СчетУчетаКассы = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(Касса, СчетКасса.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассы) Тогда
			СчетКасса = СчетУчетаКассы;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка = (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения);
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	Объект.ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Доверенность") Тогда
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОснование.Организация, 
		                                                ДокументОснование.Контрагент, ДокументОснование.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);		
		
	КонецЕсли;
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Доверенность") Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		
	КонецЕсли;
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПоРКО(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		Если ТипЗнч(ДокументОснование) = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")  Тогда
			Объект.ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению)
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС") И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению) Тогда
			Объект.ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения;
		Иначе
			Объект.ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		КонецЕсли; 
		
		Объект.Контрагент            = ПараметрыДокументаОснования.Контрагент;
		Объект.ДоговорКонтрагента    = ПараметрыДокументаОснования.ДоговорКонтрагента;
		
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(Объект.ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			Объект.ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		Если НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаНМА") тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(Объект.ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");

		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 

		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;  
		
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснованиеРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ТипЗнч(ДокументОснованиеРТУ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснованиеРТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			 
	КонецЕсли;
	
	//ЗаполнитьСчетаКассы(Объект.Касса, Объект.СчетКасса);	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
	Ответственный = Пользователи.ТекущийПользователь();

	Если Объект.ПринятоОт = "" И ЗначениеЗаполнено(Объект.Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			Объект.ПринятоОт = ?(Объект.Контрагент.НаименованиеПолное = "", Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);

		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Объект.Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Объект.Контрагент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда

				Объект.ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				              Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя),
				              " " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоРКО(Объект, ДокументОснование)
	
	Объект.СчетКасса = ДокументОснование.СчетКасса;
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование Из ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;						
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;			
			
		КонецЦикла;
		
		Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
			ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ПриходныйКассовыйОрдер"));
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ДокументОбъект.РасшифровкаПлатежа);
			ЗначениеВДанныеФормы(ДокументОбъект, Объект); 
		Иначе
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(Объект, Объект.РасшифровкаПлатежа);
		КонецЕсли;
		
		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				Объект.ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов	 = СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов		 = 1;
					СтрокаПлатеж.КратностьВзаиморасчетов = 1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					Объект.ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению Тогда		
		
		Запрос = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Организация
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Контрагент = &КонтрагентОрганизации");
		
		Запрос.УстановитьПараметр("КонтрагентОрганизации", ДокументОснование.Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ТекстСообщения  = НСтр("ru = 'Нет организации, соответствующей контрагенту документа-основания'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		ОрганизацияДокумента = ВыборкаРезультатов.Организация;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Контрагент
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", ДокументОснование.Организация);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ВыборкаРезультатов = Результат.Выбрать();
			ВыборкаРезультатов.Следующий();
			КонтрагентДокумента = ВыборкаРезультатов.Контрагент;
			
		Иначе
			
			КонтрагентДокумента = Справочники.Контрагенты.ПустаяСсылка();
			ТекстСообщения  = НСтр("ru = 'Нет контрагента, соответствующего организации документа-основания, контрагент не будет заполнен'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Касса = Справочники.Кассы.ПустаяСсылка();
		
		Организация = ОрганизацияДокумента;		
		
		СтрокаРасшифровкиОснования = ДокументОснование.РасшифровкаПлатежа[0];
		
		Если ЗначениеЗаполнено(КонтрагентДокумента) Тогда
			
			Контрагент = КонтрагентДокумента;
			
			ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаРасшифровкиОснования.ДоговорКонтрагента) Тогда
				ПараметрВалюта = СтрокаРасшифровкиОснования.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ПараметрВалюта = ДокументОснование.ВалютаДокумента
			КонецЕсли;
			
			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Контрагент.ОсновнойДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(ДоступныйОсновнойДоговорКонтрагента) Тогда
				Если (ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
					 (ДоступныйОсновнойДоговорКонтрагента.Организация = Организация) И
					 (ДоступныйОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрВалюта) Тогда
					ДоговорКонтрагентаДокумента = ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаДокумента) Тогда
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
				
				Запрос.УстановитьПараметр("Владелец", Контрагент);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрВалюта);
				
				Результат = Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					
					ВыборкаРезультатов = Результат.Выбрать();
					ВыборкаРезультатов.Следующий();
					ДоговорКонтрагента = ВыборкаРезультатов.Ссылка;
					
				Иначе
					
					ТекстСообщения  = НСтр("ru = 'Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
					ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорКонтрагентаДокумента.Владелец = Контрагент;
					ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(ПараметрВалюта) + ")"; 
					ДоговорКонтрагентаДокумента.Организация = Организация;
					ДоговорКонтрагентаДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов = ПараметрВалюта;
					ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорКонтрагентаДокумента.Записать();
					
					ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		
		НоваяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРасшифровки.СуммаПлатежа = СтрокаРасшифровкиОснования.СуммаПлатежа;
		НоваяСтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровкиОснования.СуммаВзаиморасчетов;
		НоваяСтрокаРасшифровки.КурсВзаиморасчетов = СтрокаРасшифровкиОснования.КурсВзаиморасчетов;
		НоваяСтрокаРасшифровки.КратностьВзаиморасчетов = СтрокаРасшифровкиОснования.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			НоваяСтрокаРасшифровки.ДоговорКонтрагента = ДоговорКонтрагента;
			СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			НоваяСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентомБУ = Объект.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		
		Объект.СуммаДокумента = ДокументОснование.СуммаДокумента;
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда		
		// Отказываем
		ТекстСообщения = НСтр("ru = 'Приходный кассовый ордер не предусмотрен для ""возврата денежных средств покупателю""'");
		ВызватьИсключение(ТекстСообщения);
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж      = Объект.РасшифровкаПлатежа.Добавить();
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		Объект.Контрагент                = ДокументОснование.Контрагент;
		СтруктураКурса                   = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ОбщегоНазначения.ТекущаяДатаПользователя());
		СтрокаПлатеж.КурсВзаиморасчетов	 = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		Объект.СчетУчетаРасчетовСКонтрагентомБУ     = ДокументОснование.СчетУчетаРасчетовСКонтрагентомБУ;		
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(Объект, СтрокаПлатеж);
		
		//заполняем табличную часть "Выдача в подотчет" сумму распределяем пропорционально
		//оставщейся сумме
		Если СтрокаПлатеж.СуммаПлатежа <> 0 Тогда
			Объект.ВыдачаВПодотчет.Загрузить(ДокументОснование.ВыдачаВПодотчет.Выгрузить());
			МассивСумм = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СтрокаПлатеж.СуммаПлатежа, Объект.ВыдачаВПодотчет.ВыгрузитьКолонку("СуммаПлатежа"));
			Объект.ВыдачаВПодотчет.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
		КонецЕсли;	
	
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
				ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником;
		
		Объект.СуммаДокумента = ДокументОснование.СуммаДокумента;
		
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			Объект.Контрагент = ДокументОснование.Контрагент;
		КонецЕсли;

		// Дальше заполняем по умолчанию
		Возврат;
			
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	Иначе
	
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
	
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(Объект, СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	
    Запрос.УстановитьПараметр("СчетРасчета", Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	Запрос.УстановитьПараметр("Сотрудник",   Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов",  ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) КАК СуммаОстаток,
	               |	ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстатокДт, 0) КАК ВалютнаяСуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаИтогов,
	               |			Счет = &СчетРасчета,
	               |			,
	               |			Организация = &Организация
	               |				И Субконто1 = &Сотрудник) КАК ТиповойОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда			
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаОстаток;
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.ВалютнаяСуммаОстаток;
		КонецЕсли; 
		
		Объект.СуммаДокумента = СтрокаПлатеж.СуммаВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры 

Функция ОпределитьКодыСчетСубсчет(ДанныеОбъекта, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам) 
	
	КодыСчетов = Новый Структура("Дебет,Кредит");
	СчетДт = ДанныеОбъекта.СчетКасса;
	
	// Определяем код счета дебета
	КассаВВалюте = Ложь;
	ВалютаРег    = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если СчетДт.Валютный Тогда
		КассаВВалюте = Истина;
	КонецЕсли; 		
	КодыСчетов.Дебет = СчетДт;
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда		
		СтрокаКредит = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентомБУ.Код;		
	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		СтрокаКредит = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда	
		СтрокаКредит = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентомБУ.Код;		
	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда		
		СтрокаКредит = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентомБУ.Код;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда		
		ТабСчет = ДанныеОбъекта.Ссылка.РасшифровкаПлатежа.Выгрузить();                        		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам", "СуммаПлатежа");		
		
		СтрокаКредит = "";		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентомБУ.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код) = 0 Тогда
				СтрокаКредит = СтрокаКредит+", " + Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовПоАвансам.Код) = 0 Тогда
				СтрокаКредит = СтрокаКредит + ", " + Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;		
		СтрокаКредит = Сред(СтрокаКредит,2);		
	КонецЕсли;	
	
	КодыСчетов.Кредит = СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	// Коэффициент пересчета сумм из валюты документа в тенге
	Если Реквизиты.ДокументВРеглВалюте Тогда
		КоэффициентРеглВалюты = 1;
	Иначе                                                                                                                                               
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
		КонецЕсли;
		
		КоэффициентРеглВалюты = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ПодразделениеДляРеглОпераций					= УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ); 	
	Реквизиты.Вставить("ПодразделениеДляРеглОпераций ", 			  	 ПодразделениеДляРеглОпераций);
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   ВедениеУчетаВременныхразницБалансовымМетодом);
				
	Запрос.УстановитьПараметр("КоэффициентРеглВалюты", КоэффициентРеглВалюты);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("РасчетыПоКредитамИЗаймам", НСтр("ru = 'Расчеты по кредитам и займам'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВозвратДенежныхСредствПодотчетником", НСтр("ru = 'Возврат средств от подотчетника'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Если Реквизиты.ЭтоВозвратЗП Тогда
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОбщегоНазначенияБК.ПолучитьПризнакВеденияУчетаПоСотрудникам(), "ВедениеУчетаПоСотрудникам");
		
		ПризнакиРаспределенияНалогов = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Реквизиты.Организация, Реквизиты.Дата);
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций, "РаспределятьНалогиПоПодразделениямОрганизаций");
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"), "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц,  ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц,      ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратПодотчетником(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратЗП(НомераТаблиц,      		   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы ИЗ НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, 						"НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПодразделениеДляРеглОпераций, 					"ПодразделениеДляРеглОпераций");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхразницБалансовымМетодом, 	"ВедениеУчетаВременныхразницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидЗадолженностиПодотчетногоЛица,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратЗП,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеДляРеглОпераций,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаПоСотрудникам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|				КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
	|				ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
	|			КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
	|	КОНЕЦ КАК СчетКассаНУ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
	|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО Реквизиты.СчетКасса = Типовой.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Период КАК Дата,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидЗадолженностиПодотчетногоЛица,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ДокументВРеглВалюте КАК ДокументВРеглВалюте,
	|	1 КАК КоэффициентРеглВалюты,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ЭтоВозвратЗП КАК ЭтоВозвратЗП,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СубконтоКтБУ1 КАК СубконтоКтБУ1,
	|	Реквизиты.СубконтоКтБУ2 КАК СубконтоКтБУ2,
	|	Реквизиты.СубконтоКтБУ3 КАК СубконтоКтБУ3,
	|	Реквизиты.СубконтоКтНУ1 КАК СубконтоКтНУ1,
	|	Реквизиты.СубконтоКтНУ2 КАК СубконтоКтНУ2,
	|	Реквизиты.СубконтоКтНУ3 КАК СубконтоКтНУ3,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаПоСотрудникам КАК ВедениеУчетаПоСотрудникам,
	|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПодразделениеДляРеглОпераций КАК ПодразделениеДляРеглОпераций,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.СчетКассаНУ КАК СчетКассаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	// в данных видах операций табличная часть Расшифровка платежа не используется
	Если ЕстьРасшифровкаПлатежа(Реквизиты.ВидОперации) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	Реквизиты.Период КАК Дата,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Касса КАК Касса,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав))
		|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	Реквизиты.СчетКасса КАК СчетКасса,
		|	Реквизиты.СчетКассаНУ КАК СчетКассаНУ,
		|	Реквизиты.ВидОперации КАК ВидОперации,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА &РасчетыПоКредитамИЗаймам
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда	
		
		ТекстЗапроса =  ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаВозвратПодотчетником.Ссылка КАК Ссылка,
		|	ТаблицаВозвратПодотчетником.ВидЗадолженностиПодотчетногоЛица КАК ВидЗадолженностиПодотчетногоЛица,
		|	ТаблицаВозвратПодотчетником.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаВозвратПодотчетником.СуммаПлатежа
		|ПОМЕСТИТЬ ТаблицаВозвратПодотчетником
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.ВыдачаВПодотчет КАК ТаблицаВозвратПодотчетником
		|ГДЕ
		|	ТаблицаВозвратПодотчетником.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
 		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратПодотчетником", НомераТаблиц.Количество());
		
	КонецЕсли;         	

	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - РасчетыПоКредитамИЗаймам
	// - ВозвратДенежныхСредствПоставщиком
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР 
		|		КОГДА ТаблицаРасшифровкаПлатежа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя) 
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам 
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.СчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.Касса КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.СчетКассаНУ КАК КорСчетНУ,
		|	ТаблицаРасшифровкаПлатежа.Касса КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл,
		|	ТаблицаРасшифровкаПлатежа.Содержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.СчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.Касса КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.СчетКассаНУ КАК КорСчетНУ,
		|	ТаблицаРасшифровкаПлатежа.Касса КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл,
		|	ТаблицаРасшифровкаПлатежа.Содержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
		
	Иначе
		
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
		
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПриходДенежныхСредствПрочее 
	// - ПолучениеНаличныхДенежныхСредствВБанке  
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Период							КАК Период,
		|	Реквизиты.Организация						КАК Организация,
		|	Реквизиты.ВалютаДокумента					КАК ВалютаДокумента,
		|	Реквизиты.Контрагент						КАК Контрагент,
		|	&НеобходимостьОтраженияВНУ					КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ						КАК ВидУчетаНУ,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ 	КАК СчетКтБУ,
		| 	Реквизиты.СубконтоКтБУ1						КАК СубконтоКтБУ1,
		| 	Реквизиты.СубконтоКтБУ2 					КАК СубконтоКтБУ2,
		|	Реквизиты.СубконтоКтБУ3 					КАК СубконтоКтБУ3,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ 	КАК СчетКтНУ,
		| 	Реквизиты.СубконтоКтНУ1		 				КАК СубконтоКтНУ1,
		| 	Реквизиты.СубконтоКтНУ2 					КАК СубконтоКтНУ2,
		|	Реквизиты.СубконтоКтНУ3 					КАК СубконтоКтНУ3,
		|	Реквизиты.СчетКасса 						КАК СчетДтБУ,
		|	Реквизиты.Касса			 					КАК СубконтоДтБУ1,
		| 	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоДтБУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтБУ3,
		|	Реквизиты.СчетКассаНУ						КАК СчетДтНУ,
		|	Реквизиты.Касса 							КАК СубконтоДтНУ1,
		| 	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоДтНУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтНУ3,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель  КАК СтруктурноеПодразделениеПолучатель,
		| 	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	 	|	Реквизиты.СуммаДокумента 					КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		| 	ВЫРАЗИТЬ(""Прочие поступления"" КАК СТРОКА(50)) КАК Содержание
	 	|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Период							КАК Период,
		|	Реквизиты.Организация						КАК Организация,
		|	Реквизиты.ВалютаДокумента					КАК ВалютаДокумента,
		|	Реквизиты.Контрагент						КАК Контрагент,
		|	&НеобходимостьОтраженияВНУ					КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ						КАК ВидУчетаНУ,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ 	КАК СчетКтБУ,
		| 	Реквизиты.СчетОрганизации 					КАК СубконтоКтБУ1,
		| 	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоКтБУ2,
		|	Реквизиты.СубконтоКтБУ3 					КАК СубконтоКтБУ3,
		|	ВЫБОР
		|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|				КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
		|				ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
		|			КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
		|	КОНЕЦ КАК СчетКтНУ,
		| 	Реквизиты.СчетОрганизации 					КАК СубконтоКтНУ1,
		| 	Реквизиты.СтатьяДвиженияДенежныхСредств 	КАК СубконтоКтНУ2,
		|	Реквизиты.СубконтоКтНУ3 					КАК СубконтоКтНУ3,
		|	Реквизиты.СчетКасса 						КАК СчетДтБУ,
		|	Реквизиты.Касса			 					КАК СубконтоДтБУ1,
		| 	ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СубконтоДтБУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтБУ3,
		|	Реквизиты.СчетКассаНУ						КАК СчетДтНУ,
		|	Реквизиты.Касса 							КАК СубконтоДтНУ1,
		| 	ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СубконтоДтНУ2,
		|	НЕОПРЕДЕЛЕНО 								КАК СубконтоДтНУ3,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель  КАК СтруктурноеПодразделениеПолучатель,
		| 	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	 	|	Реквизиты.СуммаДокумента 					КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		| 	ВЫРАЗИТЬ(""Получение наличных в банке"" КАК СТРОКА(50)) КАК Содержание
	 	|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО Реквизиты.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
		|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка"
		
	Иначе
		ПараметрыПроведения.Вставить("РеквизитыПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВозвратПодотчетником(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";

	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ПараметрыПроведения.Вставить("РеквизитыВозвратПодотчетником", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаВозвратПодотчетником", Неопределено);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Период КАК Период,
		              |	Реквизиты.Организация КАК Организация,
					  |	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,					  
					  |	Реквизиты.Контрагент КАК Контрагент,					  
		              |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		              |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ
		              |ИЗ
		              |	Реквизиты КАК Реквизиты
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Период											  КАК Период,
		              |	Реквизиты.Организация										  КАК Организация,
		              |	Реквизиты.ВидУчетаНУ										  КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ									  КАК НеобходимостьОтраженияВНУ,
		              |	Реквизиты.СчетКасса											  КАК СчетДтБУ,
		              |	Реквизиты.Касса	  											  КАК СубконтоДтБУ1,                           
					  |	ТаблицаВозвратПодотчетником.СтатьяДвиженияДенежныхСредств     КАК СубконтоДтБУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоДтБУ3,
					  |	Реквизиты.СчетКассаНУ										  КАК СчетДтНУ,
		              |	Реквизиты.Касса												  КАК СубконтоДтНУ1,
		              |	ТаблицаВозвратПодотчетником.СтатьяДвиженияДенежныхСредств	  КАК СубконтоДтНУ2,
		              |	НЕОПРЕДЕЛЕНО 												  КАК СубконтоДтНУ3,
		              |	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ					  КАК СчетКтБУ,
		              |	Реквизиты.Контрагент										  КАК СубконтоКтБУ1,
		              |	ТаблицаВозвратПодотчетником.ВидЗадолженностиПодотчетногоЛица  КАК СубконтоКтБУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоКтБУ3,
		              |	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)) КАК СчетКтНУ,
		              |	Реквизиты.Контрагент										  КАК СубконтоКтНУ1,
		              |	ТаблицаВозвратПодотчетником.ВидЗадолженностиПодотчетногоЛица  КАК СубконтоКтНУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоКтНУ3,
		              |	&ВозвратДенежныхСредствПодотчетником						  КАК Содержание,
		              |	ТаблицаВозвратПодотчетником.СуммаПлатежа					  КАК ВалютнаяСумма,
		              |	ВЫРАЗИТЬ(ТаблицаВозвратПодотчетником.СуммаПлатежа * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		              |ИЗ
		              |	ТаблицаВозвратПодотчетником КАК ТаблицаВозвратПодотчетником
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		              |		ПО ТаблицаВозвратПодотчетником.Ссылка = Реквизиты.Ссылка
					  |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
					  |		ПО Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка" 
					  
					  + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыВозвратПодотчетником", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаВозвратПодотчетником", НомераТаблиц.Количество());
		
	КонецЕсли;
	         	
	Возврат ТекстЗапроса 
	
КонецФункции

Функция ТекстЗапросаВозвратЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";

	Если НЕ Реквизиты.ЭтоВозвратЗП Тогда
		ПараметрыПроведения.Вставить("ТаблицаВозвратЗП", Неопределено);
		
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Контрагент КАК ФизЛицо,
		|	Реквизиты.СуммаДокумента КАК Сумма,
		|	Реквизиты.Период КАК ПериодВозврата,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СчетКассаНУ КАК СчетДтНУ,
		|	""ДенежныеСредства"" КАК ИмяСубконтоДт1,
		|	Реквизиты.Касса КАК СубконтоДт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоДт2,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу) КАК СпособВыплаты
		|ИЗ
		|	Реквизиты КАК Реквизиты "
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаВозвратЗП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции  

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДСРегл КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";  
	
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьКО1";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приходный кассовый ордер (с НДС)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьКО1СНДС";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер (с НДС)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьКО1,ПечатьКО1СНДС";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьКО1");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьКО1",
			НСтр("ru = 'Приходный кассовый ордер'"),
			ПечатьПКО(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПриходныйКассовыйОрдер.ПФ_MXL_КО1");
	КонецЕсли;

	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьКО1СНДС");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьКО1СНДС",
			НСтр("ru = 'Приходный кассовый ордер (с НДС)'"),
			ПечатьПКО(МассивОбъектов, ОбъектыПечати, "ПКОНДС"),
			,
			"Документ.ПриходныйКассовыйОрдер.ПФ_MXL_КО1");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьПКО(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПКО") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПриходныйКассовыйОрдер.Ссылка,
	              |	ПриходныйКассовыйОрдер.Номер,
	              |	ПриходныйКассовыйОрдер.ВидОперации,
	              |	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	              |	ПриходныйКассовыйОрдер.Организация КАК Орган,
	              |	ПриходныйКассовыйОрдер.Организация,
	              |	ПриходныйКассовыйОрдер.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	              |	ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	              |	ПриходныйКассовыйОрдер.Организация КАК Руководители,
	              |	ПриходныйКассовыйОрдер.Контрагент,
	              |	ПриходныйКассовыйОрдер.Контрагент.Представление КАК КонтрагентПредставление,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.ПринятоОт КАК СТРОКА(1000)) КАК ПринятоОт,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.Основание КАК СТРОКА(1000)) КАК Основание,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.Приложение КАК СТРОКА(1000)) КАК Приложение,
	              |	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	              |	ПриходныйКассовыйОрдер.Касса,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	              |	ПриходныйКассовыйОрдер.СтавкаНДС,
				  |	ПриходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентомБУ,
				  |	ПриходныйКассовыйОрдер.СчетКасса,
	              |	ЕСТЬNULL(ТаблицаРасшифровкиПлатежа.СуммаНДС, 0) КАК СуммаНДС
	              |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	              |ИЗ
	              |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
	              |			СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	              |		ИЗ
	              |			Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	              |		ГДЕ
	              |			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В(&МассивОбъектов)
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка) КАК ТаблицаРасшифровкиПлатежа
	              |		ПО (ТаблицаРасшифровкиПлатежа.Ссылка = ПриходныйКассовыйОрдер.Ссылка)
	              |ГДЕ
	              |	ПриходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	              |	ОтветственныеЛица.СтруктурнаяЕдиница КАК Касса,
	              |	ДанныеДокумента.Ссылка,
	              |	ДанныеДокумента.ДатаДокумента
	              |ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	              |ИЗ
	              |	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ДанныеДокумента
	              |		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ДанныеДокумента.Касса
	              |			И ОтветственныеЛица.Период <= ДанныеДокумента.ДатаДокумента
				  |			И ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ОтветственныеЛица.СтруктурнаяЕдиница,
	              |	ДанныеДокумента.Ссылка,
	              |	ДанныеДокумента.ДатаДокумента
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ПериодыОтвЛица.Ссылка КАК Ссылка,
	              |	ПериодыОтвЛица.Касса,
	              |	ОтветственныеЛица.ФизическоеЛицо,
	              |	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	              |ПОМЕСТИТЬ ВТ_ПериодыФИО
	              |ИЗ
	              |	ВТ_ПериодыОтвЛица КАК ПериодыОтвЛица
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	              |		ПО ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	              |			И ПериодыОтвЛица.Касса = ОтветственныеЛица.СтруктурнаяЕдиница
				  |			И ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)			
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	              |		ПО (ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо)
	              |			И (ФИОФизЛиц.Период <= ПериодыОтвЛица.ДатаДокумента)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПериодыОтвЛица.Ссылка,
	              |	ПериодыОтвЛица.Касса,
	              |	ОтветственныеЛица.ФизическоеЛицо
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ПериодыФИО.Ссылка,
	              |	ПериодыФИО.Касса,
	              |	ОтветственныеЛицаФИОФизЛиц.ФизЛицо КАК ФизическоеЛицо,
	              |	ОтветственныеЛицаФИОФизЛиц.Фамилия + ВЫБОР
	              |		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) <> """"
	              |			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) + "".""
	              |		ИНАЧЕ """"
	              |	КОНЕЦ + ВЫБОР
	              |		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) <> """"
	              |			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) + "".""
	              |		ИНАЧЕ """"
	              |	КОНЕЦ КАК Кассир
	              |ПОМЕСТИТЬ ВТ_ОтвЛицаФИО
	              |ИЗ
	              |	РегистрСведений.ФИОФизЛиц КАК ОтветственныеЛицаФИОФизЛиц
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыФИО КАК ПериодыФИО
	              |		ПО ОтветственныеЛицаФИОФизЛиц.ФизЛицо = ПериодыФИО.ФизическоеЛицо
	              |			И ОтветственныеЛицаФИОФизЛиц.Период = ПериодыФИО.Период
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВТ_ДанныеДокумента.Ссылка,
	              |	ВТ_ДанныеДокумента.Номер,
	              |	ВТ_ДанныеДокумента.ВидОперации,
	              |	ВТ_ДанныеДокумента.ДатаДокумента,
	              |	ВТ_ДанныеДокумента.Орган,
	              |	ВТ_ДанныеДокумента.Организация,
	              |	ВТ_ДанныеДокумента.СтруктурноеПодразделение,
	              |	ВТ_ДанныеДокумента.СтруктурноеПодразделениеОтправитель,
	              |	ВТ_ДанныеДокумента.Руководители,
	              |	ВТ_ДанныеДокумента.Контрагент,
	              |	ВТ_ДанныеДокумента.ПринятоОт,
	              |	ВТ_ДанныеДокумента.Основание,
	              |	ВТ_ДанныеДокумента.Приложение,
	              |	ВТ_ДанныеДокумента.Сумма,
	              |	ВТ_ДанныеДокумента.Касса,
	              |	ВТ_ДанныеДокумента.ВалютаДокумента,
	              |	ВТ_ДанныеДокумента.ВалютаПредставление,
	              |	ВТ_ДанныеДокумента.СтавкаНДС,
	              |	ВТ_ДанныеДокумента.СуммаНДС,
				  |	ВТ_ДанныеДокумента.СчетУчетаРасчетовСКонтрагентомБУ,
				  |	ВТ_ДанныеДокумента.СчетКасса,
	              |	ВТ_ОтвЛицаФИО.Кассир
	              |ИЗ
	              |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтвЛицаФИО КАК ВТ_ОтвЛицаФИО
	              |		ПО ВТ_ДанныеДокумента.Ссылка = ВТ_ОтвЛицаФИО.Ссылка";

	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	Макет       					= УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйКассовыйОрдер.ПФ_MXL_КО1");
	ТабДокумент 					= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);

		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(ДанныеДокументов.ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ДанныеДокументов.ВидОперации);
		
		Валютный = (НЕ ДанныеДокументов.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

		// Выводим шапку ПКО

		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.ДатаДокумента);
	    ТекстРНН_БИН 		  = "";
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДокументов);	
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		
		ОбластьМакетаШапка.Параметры.Сумма = Формат(ДанныеДокументов.Сумма,"ЧЦ=15; ЧДЦ=2");
		
		СуммаПрописью     = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ДанныеДокументов.Сумма, ДанныеДокументов.ВалютаДокумента);	
		Если ИмяМакета = "ПКОНДС" Тогда
			СуммаПрописью = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 В т.ч. НДС %2.'", КодЯзыка), СуммаПрописью, Формат(ДанныеДокументов.СуммаНДС,"ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;
			
		ОбластьМакетаШапка.Параметры.СуммаПрописью      = СуммаПрописью;
		
		ОбластьМакетаШапка.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ДанныеДокументов.ДатаДокумента, "ru");
		ОбластьМакетаШапка.Параметры.ДатаДокумента      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ=дд.ММ.гггг"));
		ОбластьМакетаШапка.Параметры.НомерДокумента     = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);

		КодыСчетСубсчет = ОпределитьКодыСчетСубсчет(ДанныеДокументов, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам);

		ОбластьМакетаШапка.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
		ОбластьМакетаШапка.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;

		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.ДатаДокумента),);
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		Кассир       = Руководители.Кассир;
	    	
		ОбластьМакетаШапка.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), НСтр("ru = 'Не предусмотрен'", КодЯзыка), Бухгалтер);
		ОбластьМакетаШапка.Параметры.ФИОКассира            = ДанныеДокументов.Кассир;

		ТекстПринятоОт = ДанныеДокументов.ПринятоОт;

		Если НЕ ЗначениеЗаполнено(ТекстПринятоОт) Тогда
			Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
				ОрганизацияПлательщик = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеОтправитель);
				ТекстВыдать = ?(ЗначениеЗаполнено(ОрганизацияПлательщик), ОрганизацияПлательщик.Наименование, ОрганизацияПлательщик.НаименованиеПолное);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДокументов.Контрагент) Тогда
				
				Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Дата"   , ДанныеДокументов.ДатаДокумента);
					Запрос.УстановитьПараметр("ФизЛицо", ДанныеДокументов.Контрагент);
					Запрос.Текст = "ВЫБРАТЬ
					|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
					|	ФИОФизЛицСрезПоследних.УдалитьНеСклонятьФамилию КАК неСклонятьФамилию
					|ИЗ
					|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
					Результат = Запрос.Выполнить().Выбрать();
					
					Если Результат.Следующий() Тогда
						СтруктураФИО = Новый Структура;
						СтруктураФИО.Вставить("Фамилия"	, Результат.Фамилия); 
						СтруктураФИО.Вставить("Имя"		, Результат.Имя);
						СтруктураФИО.Вставить("Отчество", Результат.Отчество);
						ФамилияИмяОтчество = ""+Результат.Фамилия +" "+ Результат.Имя +" "+ Результат.Отчество;
						ПринятоОт  = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчество, 2);
					КонецЕсли;
					
				ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
					
					ТекстПринятоОт = ?(ДанныеДокументов.Контрагент.НаименованиеПолное = "", ДанныеДокументов.Контрагент.Наименование, ДанныеДокументов.Контрагент.НаименованиеПолное);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		ОбластьМакетаШапка.Параметры.ПринятоОт = СокрЛП(ТекстПринятоОт);
		ОбластьМакетаШапка.Параметры.Основание = СокрЛП(ДанныеДокументов.Основание);

		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции, ВерсияФормата, СообщениеОбОшибке) Экспорт
	
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ДокументСсылка);
	
	РеквизитыПечатиЧека = ПараметрыПечатиЧека.РеквизитыПечатиЧека;
	Если РеквизитыПечатиЧека.Количество() = 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РеквизитыПечатиЧека[0]);
	
	ТипРасчета = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
	Реквизиты.Вставить("ТипРасчета",              ТипРасчета);
	Реквизиты.Вставить("НаименованиеВСтрокеЧека", НаименованиеВСтрокеЧека(Реквизиты));
	Реквизиты.Вставить("НомерСекции",             НомерСекции);
	Реквизиты.Вставить("ТипОплаты",               Перечисления.ТипыОплатыККТ.Наличные);
	Реквизиты.Вставить("ДокументОснование",        ДокументСсылка);
	
	ПараметрыОперацииФискализацииЧека = УправлениеДенежнымиСредствамиСервер.ПараметрыОперацииФискализацииЧека(Реквизиты, ПараметрыПечатиЧека, ВерсияФормата, СообщениеОбОшибке);

	Возврат ПараметрыОперацииФискализацииЧека;
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки)
	
	Если ЗначениеЗаполнено(СтруктураШапки.ПринятоОт) Тогда
		
		ШаблонНаименования = НСтр("ru = 'Оплата от: %1%2Основание: %3'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.ПринятоОт, " ", СтруктураШапки.Основание);
		
	Иначе
		
		ШаблонНаименования = НСтр("ru = 'Основание: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Основание);
		
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыПечатиЧека",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РасшифровкаПлатежа",       НомераТаблиц.Количество());
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер КАК Номер,
	|	ПриходныйКассовыйОрдер.Организация КАК Организация,
	|	ПриходныйКассовыйОрдер.Основание КАК Основание,
	|	ПриходныйКассовыйОрдер.ВидОперации КАК ВидОперации,
	|	ПриходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходныйКассовыйОрдер.ДокументОснование КАК ДокументРасшифровкиПозиций,
	|	ВЫБОР
	|		КОГДА ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее)
	|			ТОГДА ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель.ИдентификационныйНомер
	|		КОГДА (ПриходныйКассовыйОрдер.Контрагент ССЫЛКА Справочник.Контрагенты)
	|				ИЛИ (ПриходныйКассовыйОрдер.Контрагент ССЫЛКА Справочник.ФизическиеЛица)
	|			ТОГДА ПриходныйКассовыйОрдер.Контрагент.ИдентификационныйКодЛичности
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолучательИИН
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ПриходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ПриходныйКассовыйОрдер";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ПодготовитьПараметрыПечатиЧека(ДокументСсылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриходныйКассовыйОрдер", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц) ;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПечатиЧека = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация,СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизацияОтправитель,СтруктурноеПодразделениеОрганизацияПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение;СтруктурноеПодразделениеОрганизацияОтправительПрочее, СтруктурноеПодразделениеОрганизацияПолучательПрочее");  
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Касса");
	
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Контрагент; РасшифровкаПлатежаКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		
		// таб. часть ВыдачаВПодотчет
		БлокируемыеРеквизиты.Добавить("ВыдачаВПодотчет");
		БлокируемыеРеквизиты.Добавить("ВыдачаВПодотчет.СуммаПлатежа; ВыдачаВПодотчетСуммаПлатежа");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
		|	И ПриходныйКассовыйОрдер.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПокупателю
		|	И НЕ ПриходныйКассовыйОрдер.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|	И НЕ ПриходныйКассовыйОрдер.ДокументОснование ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
						
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
			
			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли

