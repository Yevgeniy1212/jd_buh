////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭСФСерверПереопределяемый.ЭСФФормаСпискаИВыбораПриСозданииНаСервере(ЭтаФорма);
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """"" КАК СтруктурноеПодразделение,", "ЭСФ.СтруктурноеПодразделение,");
	Иначе
		Элементы.СписокСтруктурноеПодразделение.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СчетФактура) Тогда
		ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбораСписка(Список, "СчетФактура", Параметры.СчетФактура);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
		ОтказПриОткрытии = Истина;
	КонецЕсли;
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйДокументВССоздатьЭлектронныйДокументВССписание", "Видимость", Ложь);
	
	Элементы.ОткрытьОповещенияЭСФ.Заголовок = ЭСФВызовСервера.ПолучитьТекстГиперссылкиОповещений();
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	Если не ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью Тогда
		Элементы.СписокДанныеАктивностиТикетов.Видимость = Ложь; 
	КонецЕсли;
	
	ЭСФСервер.ПроверитьИспользованиеСервернойКриптографии(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтказПриОткрытии Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ЭСФКлиентСервер.ТекстСообщенияНеУстановленыОбеКонстанты());
	КонецЕсли;
	
	КлючУникальности = Новый УникальныйИдентификатор;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ() Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ЭСФ_ПроверятьОповещенияФоновогоЗадания"
		И ЭтаФорма.КлючУникальности = Источник Тогда
		
		ЭСФКлиентПереопределяемый.ОбработкаОповещенияЭСФ_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр);
		
	ИначеЕсли ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьУведомленийИСЭСФ() Тогда
		
		Элементы.ОткрытьОповещенияЭСФ.Заголовок = ЭСФВызовСервера.ПолучитьТекстГиперссылкиОповещений();
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	УстановитьБыстрыйОтбор("Организация", Организация);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	УстановитьБыстрыйОтбор("Контрагент", Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	УстановитьБыстрыйОтбор("Состояние", Состояние);
КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	УстановитьБыстрыйОтбор("Вид", Вид);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОповещенияИСЭСФ(Команда)
	ЭСФКлиент.ОткрытьФормуОповещенийИСЭСФ(,);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОповещенияИСЭСФ(Команда)
	Элементы.ОткрытьОповещенияЭСФ.Заголовок = ЭСФВызовСервера.ПолучитьТекстГиперссылкиОповещений();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийМестоУстановкиБиблиотекиНаСервереОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЭСФКлиент.ОбработкаНавигационнойСсылкиМестоУстановкиБиблиотеки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьБыстрыйОтбор(ВидЭлемента, ЗначениеЭлемента)
	
	ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Список, ВидЭлемента, ЗначениеЭлемента, ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеАктивностиТикетов(Команда)
	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.РаботаСТикетами");

КонецПроцедуры
