#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДоступныеДокументыОснования() Экспорт
	
	ДоступныеДокументы = Новый Массив;
	ИсключаемыеДокументы = Новый Массив;

	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ);
	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ);
	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
  	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ);
	ИсключаемыеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ);

	Для Каждого ВидОперацииОснования Из Перечисления.ВидыОперацийРасчетПени Цикл
		Если ИсключаемыеДокументы.Найти(ВидОперацииОснования) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ДоступныеДокументы.Добавить(ВидОперацииОснования);
	КонецЦикла;
	
	Возврат ДоступныеДокументы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Функция ПолучитьКНПНВОДляЕП(ВидНалогаВзносаОтчисления, ВидПлатежа) Экспорт
	
	Если ТипЗнч(ВидНалогаВзносаОтчисления) = Тип("Строка") Тогда
		
		Если ВидНалогаВзносаОтчисления = "ОПВ" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;	
		ИначеЕсли  ВидНалогаВзносаОтчисления = "ВОСМС" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;	 	
		ИначеЕсли  ВидНалогаВзносаОтчисления = "ЕП" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;	 	
		ИначеЕсли  ВидНалогаВзносаОтчисления = "СО" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;	 	
		ИначеЕсли  ВидНалогаВзносаОтчисления = "ООСМС" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;	 	
		ИначеЕсли  ВидНалогаВзносаОтчисления = "ОПВР" Тогда
			ВидНалогаВзносаОтчисленияСсылка = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;	 	
		КонецЕсли;
		
	Иначе
		
		ВидНалогаВзносаОтчисленияСсылка = ВидНалогаВзносаОтчисления;
		
	КонецЕсли;
	
	КНП = "";
	
	Если ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.ПениАкт")
		Или ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.ПениСам") Тогда
		
		Если ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы") Тогда
			КНП = "019";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы") Тогда
			КНП = "009";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления") Тогда
			КНП = "017";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование") Тогда
			КНП = "123";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование") Тогда
			КНП = "124";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя") Тогда
			КНП = "098";
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж") Тогда
			КНП = "187";
		КонецЕсли;		
		
	Иначе
		
		Если ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.КодНазначенияПлатежа;
		ИначеЕсли ВидНалогаВзносаОтчисленияСсылка = ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж") Тогда
			КНП = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.КодНазначенияПлатежа;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат КНП;
	
КонецФункции

Функция ПолучитьТекстКНППлатежейДляЕП(СтрокаПеречисления, ВидПлатежа) Экспорт
	
	МассивВидовНВО = Новый Массив;
	МассивВидовНВО.Добавить("ОПВ");
	МассивВидовНВО.Добавить("ВОСМС");
	МассивВидовНВО.Добавить("СО");
	МассивВидовНВО.Добавить("ООСМС");
	МассивВидовНВО.Добавить("ОПВР");
	
	СтрокаКНП = "";
	
	Для Каждого СтрокаНВО Из МассивВидовНВО Цикл
		
		Если СтрокаПеречисления["Включает" + СтрокаНВО] = Истина Тогда
			СтрокаКНП = СтрокаКНП + ?(ЗначениеЗаполнено(СтрокаКНП), ",", "") + ПолучитьКНПНВОДляЕП(СтрокаНВО, ВидПлатежа);	
		КонецЕсли;
		
	КонецЦикла;
	
	КНПЕП = ПолучитьКНПНВОДляЕП(ПредопределенноеЗначение("Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж"), ВидПлатежа);
	
	СтрокаКНП = СтрокаКНП + ?(ЗначениеЗаполнено(СтрокаКНП), ",", "") + КНПЕП;
	
	СтруктураДанных = Новый Структура("СписокКНП, ТекстAssign");
	
	// округлим по правилам округления, принятым организацией
	ПериодПлатежа = Дата('00010101');
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПеречисления, "ПериодПлатежа") Тогда
		ПериодПлатежа = СтрокаПеречисления.ПериодПлатежа;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПеречисления, "ПериодРегистрации") Тогда
		ПериодПлатежа = СтрокаПеречисления.ПериодРегистрации;
	КонецЕсли;
	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж, ПериодПлатежа);
	
	СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаПеречисления.СуммаПлатежа, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
	
	СтруктураДанных.СписокКНП = СтрокаКНП;
	СтруктураДанных.ТекстAssign = "
		|/ASSIGN/(" + Формат(СуммаПлатежа, "ЧДЦ=2; ЧН=0; ЧГ=0") + "), " + "[" + СтрокаКНП + "]";
	
	Возврат	СтруктураДанных;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечатиШапка(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЕППеречислениеВФонды.Номер КАК Номер,
    |   ЕППеречислениеВФонды.Дата КАК ДатаДокумента,
    |   ЕППеречислениеВФонды.Организация КАК Организация,
    |   ЕППеречислениеВФонды.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
    |   ЕППеречислениеВФонды.Ответственный КАК Ответственный,
    |   ЕППеречислениеВФонды.Ссылка КАК Ссылка,
    |   ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК АвторФизЛицо,
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Номер, """") КАК НомерПлатежногоДокумента,
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Дата, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПлатежногоДокумента,
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК НомерСчета,
    |   ВЫБОР 
	|		КОГДА НЕ ПлатежноеПоручениеИсходящее.Контрагент ЕСТЬ NULL
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент
	|   	ИНАЧЕ ЕППеречислениеВФонды.Контрагент	
	|	КОНЕЦ КАК Получатель,
    |   СУММА(ЕППеречислениеВФонды.СуммаДокумента) КАК СуммаДокумента
    |ИЗ
    |   Документ.ЕППеречислениеВФонды КАК ЕППеречислениеВФонды
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей
    |       ПО ЕППеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей.Документ
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
    |       ПО ПлатежноеПоручениеИсходящее.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей.Ссылка
    |           И (ПлатежноеПоручениеИсходящее.Оплачено)
    |           И (ПлатежноеПоручениеИсходящее.Проведен)
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |       ПО ЕППеречислениеВФонды.Автор = ФизическиеЛица.Ссылка
    |ГДЕ
    |   ЕППеречислениеВФонды.Ссылка В(&МассивОбъектов)
    |
    |СГРУППИРОВАТЬ ПО
    |   ЕППеречислениеВФонды.Номер,
    |   ЕППеречислениеВФонды.Дата,
    |   ЕППеречислениеВФонды.Организация,
    |   ЕППеречислениеВФонды.СтруктурноеПодразделение,
    |   ЕППеречислениеВФонды.Ответственный,
    |   ЕППеречислениеВФонды.Ссылка,
    |   ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)),
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Номер, """"),
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Дата, ДАТАВРЕМЯ(1,1,1)),
    |   ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)),
    |   ВЫБОР 
	|		КОГДА НЕ ПлатежноеПоручениеИсходящее.Контрагент ЕСТЬ NULL
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент
	|   	ИНАЧЕ ЕППеречислениеВФонды.Контрагент	
	|	КОНЕЦ
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросДляПечатиТаблицаДокумента(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
    
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.Организация КАК Организация,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.Дата КАК Период,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка КАК Ссылка,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.ФизЛицо КАК Физлицо,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.НомерСтроки КАК НомерСтроки,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.Номер КАК Номер,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Сумма КАК Сумма,
    |   ЕППеречислениеВФондыЕдиныеПлатежи.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
    |ПОМЕСТИТЬ ВТ_ФизЛица
    |ИЗ
    |   Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕППеречислениеВФондыЕдиныеПлатежи
    |ГДЕ
    |   ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка В(&МассивОбъектов)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ПериодыФИОФИзЛиц.ФизЛицо КАК ФизЛицо,
    |   ПериодыФИОФИзЛиц.Период КАК Период,
    |   ФИОФизЛиц.Фамилия КАК Фамилия,
    |   ФИОФизЛиц.Имя КАК Имя,
    |   ФИОФизЛиц.Отчество КАК Отчество
    |ПОМЕСТИТЬ ВТ_ФИОФизЛиц
    |ИЗ
    |   РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |           ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
    |           МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
    |       ИЗ
    |           РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
    |               ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
    |               ПО ФИОФизЛиц.Период <= ВТ_ФизЛица.Период
    |                   И ФИОФизЛиц.ФизЛицо = ВТ_ФизЛица.Физлицо
    |       
    |       СГРУППИРОВАТЬ ПО
    |           ФИОФизЛиц.ФизЛицо) КАК ПериодыФИОФИзЛиц
    |       ПО ФИОФизЛиц.Период = ПериодыФИОФИзЛиц.Период
    |           И ФИОФизЛиц.ФизЛицо = ПериодыФИОФИзЛиц.ФизЛицо
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
    |   МАКСИМУМ(ПериодыРаботникиОрганизации.Период) КАК Период,
    |   МАКСИМУМ(ПериодыРаботникиОрганизации.Организация) КАК Организация,
    |   МАКСИМУМ(РаботникиОрганизации.Сотрудник.Код) КАК СотрудникКод
    |ПОМЕСТИТЬ ВТ_РаботникиОрганизации
    |ИЗ
    |   РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |           МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
    |           РаботникиОрганизаций.Сотрудник.Физлицо КАК СотрудникФизлицо,
    |           РаботникиОрганизаций.Организация КАК Организация
    |       ИЗ
    |           РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
    |               ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
    |               ПО РаботникиОрганизаций.Период <= ВТ_ФизЛица.Период
    |                   И РаботникиОрганизаций.Сотрудник.Физлицо = ВТ_ФизЛица.Физлицо
    |                   И РаботникиОрганизаций.Организация = ВТ_ФизЛица.Организация
    |       
    |       СГРУППИРОВАТЬ ПО
    |           РаботникиОрганизаций.Сотрудник.Физлицо,
    |           РаботникиОрганизаций.Организация) КАК ПериодыРаботникиОрганизации
    |       ПО РаботникиОрганизации.Период = ПериодыРаботникиОрганизации.Период
    |           И РаботникиОрганизации.Сотрудник.Физлицо = ПериодыРаботникиОрганизации.СотрудникФизлицо
    |           И РаботникиОрганизации.Организация = ПериодыРаботникиОрганизации.Организация
    |
    |СГРУППИРОВАТЬ ПО
    |   РаботникиОрганизации.Сотрудник.Физлицо
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ЕППеречислениеВФонды.Ссылка КАК Ссылка,
    |   ЕППеречислениеВФонды.НомерСтроки КАК НомерСтроки,
    |   ВЫБОР
    |       КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL
    |           ТОГДА ЕППеречислениеВФонды.ФизЛицо.Наименование
    |       ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
    |   КОНЕЦ КАК ФизЛицо,
    |   ЕППеречислениеВФонды.Ссылка.Организация КАК Организация,
    |   ЕППеречислениеВФонды.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
    |   ЕППеречислениеВФонды.Ссылка.Дата КАК ДатаДок,
    |   ЕППеречислениеВФонды.Ссылка.Номер КАК НомерДок,
    |   СУММА(ЕППеречислениеВФонды.Сумма) КАК Сумма,
    |   ЕППеречислениеВФонды.МесяцНалоговогоПериода КАК Период,
    |   ЕППеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
    |   ЕППеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения
    |ИЗ
    |   Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕППеречислениеВФонды
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК РаботникиОрганизацииСрезПоследних
    |       ПО ЕППеречислениеВФонды.ФизЛицо = РаботникиОрганизацииСрезПоследних.ФизЛицо
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    |       ПО (РаботникиОрганизацииСрезПоследних.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо)
    |           И (РаботникиОрганизацииСрезПоследних.Организация = РаботникиОрганизации.Организация)
    |           И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
    |           И (РаботникиОрганизацииСрезПоследних.Период = РаботникиОрганизации.Период)
    |           И (РаботникиОрганизацииСрезПоследних.СотрудникКод = РаботникиОрганизации.Сотрудник.Код)
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
    |       ПО ЕППеречислениеВФонды.ФизЛицо = ВТ_ФИОФизЛиц.ФизЛицо
    |ГДЕ
    |   ЕППеречислениеВФонды.Ссылка В(&МассивОбъектов)
    |
    |СГРУППИРОВАТЬ ПО
    |   ЕППеречислениеВФонды.Ссылка,
    |   ЕППеречислениеВФонды.НомерСтроки,
    |   ЕППеречислениеВФонды.Ссылка.Организация,
    |   ЕППеречислениеВФонды.Ссылка.СтруктурноеПодразделение,
    |   ЕППеречислениеВФонды.Ссылка.Дата,
    |   ЕППеречислениеВФонды.Ссылка.Номер,
    |   ЕППеречислениеВФонды.МесяцНалоговогоПериода,
    |   ВЫБОР
    |       КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL
    |           ТОГДА ЕППеречислениеВФонды.ФизЛицо.Наименование
    |       ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
    |   КОНЕЦ,
    |   ЕППеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности,
    |   ЕППеречислениеВФонды.ФизЛицо.ДатаРождения
    |
    |УПОРЯДОЧИТЬ ПО
    |   ФизЛицо
    |ИТОГИ
    |   СУММА(Сумма)
    |ПО
    |   Ссылка";

	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	ДанныеРеглУчетаТекст = "";
	
	УсловиеНаПодразделение = "";

	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) Тогда
		УсловиеНаПодразделение = " И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
	КонецЕсли;
	
	УсловиеНаПодразделение = УсловиеНаПодразделение + "И РаботникиОрганизацийСрезПоследних.СтруктурноеПодразделение = &парамСтруктурноеПодразделение";

	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) Тогда
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_РаботникиОрганизаций
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизации.Период
		|			КОНЕЦ) КАК Период
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		И РаботникиОрганизации.Период <= &парамНачало
		|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		И РаботникиОрганизации.Активность
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизации.Сотрудник.Физлицо) КАК ДатыПоследнихНазначений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
		|		ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
		|			И (ДатыПоследнихНазначений.Период = ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
		|			КОНЕЦ)
		|			И (РаботникиОрганизацийСрезПоследних.Организация = &парамГоловнаяОрганизация)
		|			И (РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизацийСрезПоследних.Активность)
		|			И (ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				И ДатыПоследнихНазначений.Период < НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ)
		|					ТОГДА ДатыПоследнихНазначений.ФизЛицо <> РаботникиОрганизацийСрезПоследних.Организация.ИндивидуальныйПредприниматель
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|								" + УсловиеНаПодразделение + "		
		|		
		|;
		|";
		
	КонецЕсли;
	
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕПРасчетыСФондамиОстатки.Налогоплательщик,
	|	ЕПРасчетыСФондамиОстатки.ФизЛицо,
    |	ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕПРасчетыСФондамиОстатки.СуммаПлатежаОстаток КАК Сумма
    |ПОМЕСТИТЬ ВТ_ОстаткиЕП
	|ИЗ РегистрНакопления.ЕПРасчетыСФондами.Остатки(
	|				&парамГраницаОстатков,
	|				Организация = &парамОрганизация
	|				И ВидПлатежа = &парамВидПлатежа
	|				И " + ?(Параметры.ПоОстаткам, "
	|					МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
	|					МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + ") КАК ЕПРасчетыСФондамиОстатки";
	
	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) Тогда
		
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.ФизЛицо = ЕПРасчетыСФондамиОстатки.ФизЛицо
		|ГДЕ
		|	НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";

	КонецЕсли;

	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиЕП.Налогоплательщик КАК Налогоплательщик,
	|	ОстаткиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
    |ПОМЕСТИТЬ ВТ_ПериодыСтавокЕП
	|ИЗ ВТ_ОстаткиЕП КАК ОстаткиЕП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОстаткиЕП.МесяцНалоговогоПериода) КАК МинимумМесяцНалоговогоПериода,
    |	МАКСИМУМ(КОНЕЦПЕРИОДА(ОстаткиЕП.МесяцНалоговогоПериода, МЕСЯЦ)) КАК МаксимумМесяцНалоговогоПериода
	|ИЗ ВТ_ОстаткиЕП КАК ОстаткиЕП
	|";

	Запрос.Текст = ДанныеРеглУчетаТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И НЕ Выборка.МинимумМесяцНалоговогоПериода = Null Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода", Выборка.МинимумМесяцНалоговогоПериода);	
		Запрос.УстановитьПараметр("КонецПериода",  Выборка.МаксимумМесяцНалоговогоПериода);
		
	Иначе
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ТаблицаЕдиныйПлатеж", Параметры.ТаблицаЕдиныйПлатеж); 
		 
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
		
		Возврат;
		
	КонецЕсли;

	ДанныеРеглУчетаТекст = "ВЫБРАТЬ
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |	1 КАК Приоритет,
           |	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК Период,
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
           |ПОМЕСТИТЬ ВТ_ДанныеСтавокОбщиеДанные
           |ИЗ
           |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
           |		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
           |			И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ПериодыСтавкиЕП.Налогоплательщик
           |			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
           |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода)
           |
           |СГРУППИРОВАТЬ ПО
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	2,
           |	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |ИЗ
           |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
           |		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
           |			И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ПериодыСтавкиЕП.Налогоплательщик
           |			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
           |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода)
           |
           |СГРУППИРОВАТЬ ПО
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	3,
           |	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |ИЗ
           |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
           |		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
           |			И (СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация)
           |			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
           |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода)
           |
           |СГРУППИРОВАТЬ ПО
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	4,
           |	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |ИЗ
           |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
           |		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
           |			И (СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация)
           |			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
           |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода)
           |
           |СГРУППИРОВАТЬ ПО
           |	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
           |	СведенияОСтавкахНалоговСборовОтчислений.Ставка
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ДанныеСтавокПоПриоритетам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |	МАКСИМУМ(ДанныеСтавокПоПриоритетам.Период) КАК Период
           |ПОМЕСТИТЬ ВТ_ДанныеСтавокПриоритетПоПериоду
           |ИЗ
           |	ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокПоПриоритетам
           |
           |СГРУППИРОВАТЬ ПО
           |	ДанныеСтавокПоПриоритетам.МесяцНалоговогоПериода
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ДанныеСтавокПриоритетПоПериоду.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |	ДанныеСтавокПриоритетПоПериоду.Период КАК Период,
           |	МИНИМУМ(ДанныеСтавокПоПриоритетам.Приоритет) КАК Приоритет
           |ПОМЕСТИТЬ ВТ_ДанныеСтавокПриоритетПоПериодуИПриоритету
           |ИЗ
           |	ВТ_ДанныеСтавокПриоритетПоПериоду КАК ДанныеСтавокПриоритетПоПериоду
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокПоПриоритетам
           |		ПО ДанныеСтавокПриоритетПоПериоду.Период = ДанныеСтавокПоПриоритетам.Период
           |
           |СГРУППИРОВАТЬ ПО
           |	ДанныеСтавокПриоритетПоПериоду.МесяцНалоговогоПериода,
           |	ДанныеСтавокПриоритетПоПериоду.Период
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |	ДанныеСтавокОбщиеДанные.Период КАК Период,
           |	ДанныеСтавокОбщиеДанные.Ставка КАК Ставка
           |ПОМЕСТИТЬ ВТ_ДанныеСтавок
           |ИЗ
           |	ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокОбщиеДанные
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавокПриоритетПоПериодуИПриоритету КАК ДанныеСтавокПриоритетПоПериодуИПриоритету
           |		ПО ДанныеСтавокОбщиеДанные.Период = ДанныеСтавокПриоритетПоПериодуИПриоритету.Период
           |			И ДанныеСтавокОбщиеДанные.Приоритет = ДанныеСтавокПриоритетПоПериодуИПриоритету.Приоритет
           |			И ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода = ДанныеСтавокПриоритетПоПериодуИПриоритету.МесяцНалоговогоПериода
           |
           |ИНДЕКСИРОВАТЬ ПО
           |	ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	ВТКомпонентыЕПГруппировка.ФизЛицо КАК ФизЛицо,
           |	ВТКомпонентыЕПГруппировка.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.ОПВ > 0 
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетОПВ,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.ВОСМС > 0 
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетВОСМС,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.ИПН > 0 
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетИПН,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.СО > 0
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетСО,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.ООСМС > 0 
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетООСМС,
           |	ВЫБОР
           |		КОГДА ВТКомпонентыЕПГруппировка.ОПВР > 0 
           |			ТОГДА ИСТИНА
           |		ИНАЧЕ ЛОЖЬ
           |	КОНЕЦ КАК ВключаетОПВР
           |ПОМЕСТИТЬ ВТ_ЕПКомпоненты
           |ИЗ
           |	(ВЫБРАТЬ
           |		ЕПКомпоненты.ФизЛицо КАК ФизЛицо,
           |		ЕПКомпоненты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
           |		СУММА(ЕПКомпоненты.СуммаОПВОборот) КАК ОПВ,
           |		СУММА(ЕПКомпоненты.СуммаВОСМСОборот) КАК ВОСМС,
           |		СУММА(ЕПКомпоненты.СуммаИПНОборот) КАК ИПН,
           |		СУММА(ЕПКомпоненты.СуммаООСМСОборот) КАК ООСМС,
           |		СУММА(ЕПКомпоненты.СуммаСООборот) КАК СО,
           |		СУММА(ЕПКомпоненты.СуммаОПВРОборот) КАК ОПВР
           |	ИЗ
           |		РегистрНакопления.ЕПКомпоненты.Обороты(
           |				,
           |				КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ),
           |				Месяц,
           |				&парамПеречислениеЕдиногоПлатежа
           |					И Организация = &парамОрганизация
           |					И (МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &КонецПериода)
           |					И ФизЛицо В
           |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
           |							Сотрудники.Физлицо
           |						ИЗ
           |							ВТ_ОстаткиЕП КАК Сотрудники)) КАК ЕПКомпоненты
           |	
           |	СГРУППИРОВАТЬ ПО
           |		ЕПКомпоненты.ФизЛицо,
           |		ЕПКомпоненты.МесяцНалоговогоПериода) КАК ВТКомпонентыЕПГруппировка
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
           |	ЕПСведенияОДоходах.Период КАК МесяцНалоговогоПериода,
           |	СУММА(ЕПСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОбъектИсчисления
           |ПОМЕСТИТЬ ВТ_ОбъектИсчисленияЕП
           |ИЗ
           |	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
           |			&НачалоПериода,
           |			&КонецПериода,
           |			Месяц,
           |			&парамПеречислениеЕдиногоПлатежа
           |				И Организация = &парамОрганизация
           |				И ФизЛицо В
           |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
           |						Сотрудники.Физлицо
           |					ИЗ
           |						ВТ_ОстаткиЕП КАК Сотрудники)) КАК ЕПСведенияОДоходах
           |
           |СГРУППИРОВАТЬ ПО
           |	ЕПСведенияОДоходах.ФизЛицо,
           |	ЕПСведенияОДоходах.Период
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ОстаткиЕП.ФизЛицо КАК ФизЛицо,
		   |	ОстаткиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		   |	ОстаткиЕП.Сумма КАК Сумма,
		   |	ЕСТЬNULL(ОбъектИсчисленияЕП.ОбъектИсчисления, 0) * ЕСТЬNULL(ДанныеСтавок.Ставка, 0) / 100 КАК СуммаПлатежа,
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ИСТИНА
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетОПВ, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетОПВ, 
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ИСТИНА
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетВОСМС, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетВОСМС, 
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ИСТИНА
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетИПН, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетИПН,
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ИСТИНА
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетСО, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетСО,       
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ИСТИНА
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетООСМС, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетООСМС,    
		   |	ВЫБОР
		   |		КОГДА  &парамПеняЕдиногоПлатежа
		   |			ТОГДА ЛОЖЬ
		   |		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетОПВР, ЛОЖЬ)
		   |	КОНЕЦ КАК ВключаетОПВР  		   
		   |ИЗ
           |	ВТ_ОстаткиЕП КАК ОстаткиЕП
           |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕПКомпоненты КАК ЕПКомпоненты
           |		ПО ОстаткиЕП.ФизЛицо = ЕПКомпоненты.ФизЛицо
           |			И ОстаткиЕП.МесяцНалоговогоПериода = ЕПКомпоненты.МесяцНалоговогоПериода
           |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъектИсчисленияЕП КАК ОбъектИсчисленияЕП
           |		ПО ОстаткиЕП.ФизЛицо = ОбъектИсчисленияЕП.ФизЛицо
           |			И ОстаткиЕП.МесяцНалоговогоПериода = ОбъектИсчисленияЕП.МесяцНалоговогоПериода
           |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавок КАК ДанныеСтавок
           |		ПО (ДанныеСтавок.МесяцНалоговогоПериода = ОстаткиЕП.МесяцНалоговогоПериода)
           |
           |УПОРЯДОЧИТЬ ПО
           |	ОстаткиЕП.Физлицо.Наименование,
           |	ОстаткиЕП.МесяцНалоговогоПериода";

	Запрос.Текст = ДанныеРеглУчетаТекст;
	
	// округлим по правилам округления, принятым организацией
	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж, Параметры.парамМесяц);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Сумма) И Выборка.Сумма > 0 Тогда
			НоваяСтрока = Параметры.ТаблицаЕдиныйПлатеж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НоваяСтрока.СуммаПлатежа, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаЕдиныйПлатеж", Параметры.ТаблицаЕдиныйПлатеж); 
	 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
	
КонецПроцедуры 

// Процедура выполняет расчет строк табличной части документа по данным регистров.
//
// Параметры: ВариантРасчета = "НаДатуДокумента" на дату, "НаКонецМесяца" на конец месяца
//            Исчисление (тип "Булево") = Истина в случае заполнения исчисленными суммами ОПВ
//            							  Ложь в случае заполнения удержанными суммами ОПВ по НУ (суммы к перечислению)
//
Процедура ПодготовитьДанныеДляРасчета(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;

	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕППеречислениеВФонды.НомерСтроки,
	|	ЕППеречислениеВФонды.Физлицо,
    |	ЕСТЬNULL(ЕПРасчетыСФондамиОстатки.Налогоплательщик, &парамОрганизация) КАК Налогоплательщик,
    |	ЕСТЬNULL(ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода, НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ)) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ЕПРасчетыСФондамиОстатки.СуммаПлатежаОстаток, 0) КАК Сумма
    |ПОМЕСТИТЬ ВТ_ОстаткиЕП
	|ИЗ Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕППеречислениеВФонды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕПРасчетыСФондами.Остатки(
	|					&парамГраницаОстатков,
	|					Организация = &парамОрганизация
	|					И ВидПлатежа = &парамВидПлатежа
	|					И " + ?(Параметры.ПоОстаткам, "
	|						МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
	|						МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + "
	|					И ФизЛицо В (ВЫБРАТЬ
	|										ФизЛицо
	|									ИЗ
	|										Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК Док
	|									ГДЕ
	|										Док.Ссылка = &парамСсылка)) КАК ЕПРасчетыСФондамиОстатки
	|			ПО ЕППеречислениеВФонды.ФизЛицо = ЕПРасчетыСФондамиОстатки.ФизЛицо
	|				И ЕППеречислениеВФонды.МесяцНалоговогоПериода = ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|
	|ГДЕ
	|	ЕППеречислениеВФонды.Ссылка = &парамСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиЕП.Налогоплательщик КАК Налогоплательщик,
	|	ОстаткиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
    |ПОМЕСТИТЬ ВТ_ПериодыСтавокЕП
	|ИЗ ВТ_ОстаткиЕП КАК ОстаткиЕП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОстаткиЕП.МесяцНалоговогоПериода) КАК МинимумМесяцНалоговогоПериода,
    |	МАКСИМУМ(КОНЕЦПЕРИОДА(ОстаткиЕП.МесяцНалоговогоПериода, МЕСЯЦ)) КАК МаксимумМесяцНалоговогоПериода
	|ИЗ ВТ_ОстаткиЕП КАК ОстаткиЕП
	|";

	Запрос.Текст = ДанныеРеглУчетаТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И НЕ Выборка.МинимумМесяцНалоговогоПериода = Null Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода", Выборка.МинимумМесяцНалоговогоПериода);	
		Запрос.УстановитьПараметр("КонецПериода",  Выборка.МаксимумМесяцНалоговогоПериода);
		
	Иначе
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ТаблицаЕдиныйПлатеж", Параметры.ТаблицаЕдиныйПлатеж); 
		 
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
		
		Возврат;
		
	КонецЕсли;

	ДанныеРеглУчетаТекст = "ВЫБРАТЬ
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	1 КАК Приоритет,
	|	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ПОМЕСТИТЬ ВТ_ДанныеСтавокОбщиеДанные
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
	|		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
	|			И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ПериодыСтавкиЕП.Налогоплательщик
	|			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
	|			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	2,
	|	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
	|		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
	|			И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ПериодыСтавкиЕП.Налогоплательщик
	|			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
	|			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	3,
	|	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
	|		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
	|			И (СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация)
	|			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
	|			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	4,
	|	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период),
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыСтавокЕП КАК ПериодыСтавкиЕП
	|		ПО (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ЕдиныйПлатеж))
	|			И (СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация)
	|			И СведенияОСтавкахНалоговСборовОтчислений.Период <= ПериодыСтавкиЕП.МесяцНалоговогоПериода
	|			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСтавкиЕП.МесяцНалоговогоПериода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтавокПоПриоритетам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	МАКСИМУМ(ДанныеСтавокПоПриоритетам.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДанныеСтавокПриоритетПоПериоду
	|ИЗ
	|	ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокПоПриоритетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСтавокПоПриоритетам.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтавокПриоритетПоПериоду.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеСтавокПриоритетПоПериоду.Период КАК Период,
	|	МИНИМУМ(ДанныеСтавокПоПриоритетам.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ДанныеСтавокПриоритетПоПериодуИПриоритету
	|ИЗ
	|	ВТ_ДанныеСтавокПриоритетПоПериоду КАК ДанныеСтавокПриоритетПоПериоду
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокПоПриоритетам
	|		ПО ДанныеСтавокПриоритетПоПериоду.Период = ДанныеСтавокПоПриоритетам.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСтавокПриоритетПоПериоду.МесяцНалоговогоПериода,
	|	ДанныеСтавокПриоритетПоПериоду.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеСтавокОбщиеДанные.Период КАК Период,
	|	ДанныеСтавокОбщиеДанные.Ставка КАК Ставка
	|ПОМЕСТИТЬ ВТ_ДанныеСтавок
	|ИЗ
	|	ВТ_ДанныеСтавокОбщиеДанные КАК ДанныеСтавокОбщиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавокПриоритетПоПериодуИПриоритету КАК ДанныеСтавокПриоритетПоПериодуИПриоритету
	|		ПО ДанныеСтавокОбщиеДанные.Период = ДанныеСтавокПриоритетПоПериодуИПриоритету.Период
	|			И ДанныеСтавокОбщиеДанные.Приоритет = ДанныеСтавокПриоритетПоПериодуИПриоритету.Приоритет
	|			И ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода = ДанныеСтавокПриоритетПоПериодуИПриоритету.МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеСтавокОбщиеДанные.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТКомпонентыЕПГруппировка.ФизЛицо КАК ФизЛицо,
	|	ВТКомпонентыЕПГруппировка.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.ОПВ > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетОПВ,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.ВОСМС > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетВОСМС,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.ИПН > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетИПН,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.СО > 0  
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетСО,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.ООСМС > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетООСМС,
	|	ВЫБОР
	|		КОГДА ВТКомпонентыЕПГруппировка.ОПВР > 0  
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключаетОПВР
	|ПОМЕСТИТЬ ВТ_ЕПКомпоненты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕПКомпоненты.ФизЛицо КАК ФизЛицо,
	|		ЕПКомпоненты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		СУММА(ЕПКомпоненты.СуммаОПВОборот) КАК ОПВ,
	|		СУММА(ЕПКомпоненты.СуммаВОСМСОборот) КАК ВОСМС,
	|		СУММА(ЕПКомпоненты.СуммаИПНОборот) КАК ИПН,
	|		СУММА(ЕПКомпоненты.СуммаООСМСОборот) КАК ООСМС,
	|		СУММА(ЕПКомпоненты.СуммаСООборот) КАК СО,
	|		СУММА(ЕПКомпоненты.СуммаОПВРОборот) КАК ОПВР
	|	ИЗ
	|		РегистрНакопления.ЕПКомпоненты.Обороты(
	|				,
	|				КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ),
	|				Месяц,
	|				&парамПеречислениеЕдиногоПлатежа
	|				И Организация = &парамОрганизация
	|					И (МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &КонецПериода)
	|					И ФизЛицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Сотрудники.Физлицо
	|						ИЗ
	|							ВТ_ОстаткиЕП КАК Сотрудники)) КАК ЕПКомпоненты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕПКомпоненты.ФизЛицо,
	|		ЕПКомпоненты.МесяцНалоговогоПериода) КАК ВТКомпонентыЕПГруппировка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	ЕПСведенияОДоходах.Период КАК МесяцНалоговогоПериода,
	|	СУММА(ЕПСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОбъектИсчисления
	|ПОМЕСТИТЬ ВТ_ОбъектИсчисленияЕП
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			&парамПеречислениеЕдиногоПлатежа
	|			И Организация = &парамОрганизация
	|				И ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Сотрудники.Физлицо
	|					ИЗ
	|						ВТ_ОстаткиЕП КАК Сотрудники)) КАК ЕПСведенияОДоходах
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЕПСведенияОДоходах.ФизЛицо,
	|	ЕПСведенияОДоходах.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕП.НомерСтроки КАК НомерСтроки,
	|	ОстаткиЕП.ФизЛицо КАК ФизЛицо,
	|	ОстаткиЕП.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОстаткиЕП.Сумма КАК Сумма,
    |	ЕСТЬNULL(ОбъектИсчисленияЕП.ОбъектИсчисления, 0) * ЕСТЬNULL(ДанныеСтавок.Ставка, 0) / 100 КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетОПВ, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетОПВ, 
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетВОСМС, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетВОСМС, 
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетИПН, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетИПН,
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетСО, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетСО,       
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетООСМС, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетООСМС,    
	|	ВЫБОР
	|		КОГДА  &парамПеняЕдиногоПлатежа
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(ЕПКомпоненты.ВключаетОПВР, ЛОЖЬ)
	|	КОНЕЦ КАК ВключаетОПВР  
	|ИЗ
	|	ВТ_ОстаткиЕП КАК ОстаткиЕП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕПКомпоненты КАК ЕПКомпоненты
	|		ПО ОстаткиЕП.ФизЛицо = ЕПКомпоненты.ФизЛицо
	|			И ОстаткиЕП.МесяцНалоговогоПериода = ЕПКомпоненты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъектИсчисленияЕП КАК ОбъектИсчисленияЕП
	|		ПО ОстаткиЕП.ФизЛицо = ОбъектИсчисленияЕП.ФизЛицо
	|			И ОстаткиЕП.МесяцНалоговогоПериода = ОбъектИсчисленияЕП.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСтавок КАК ДанныеСтавок
	|		ПО ОстаткиЕП.МесяцНалоговогоПериода = ДанныеСтавок.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиЕП.НомерСтроки
	|";
	
	Запрос.Текст = ДанныеРеглУчетаТекст;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаЕдиныйПлатеж", Запрос.Выполнить().Выгрузить()); 
	
	// округлим по правилам округления, принятым организацией
	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж, Параметры.парамМесяц);
	
	Для Каждого СтрокаРасчетов Из СтруктураДанных.ТаблицаЕдиныйПлатеж Цикл
		СтрокаРасчетов.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаРасчетов.СуммаПлатежа, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
	
КонецПроцедуры

Процедура ЗаполнитьПоРасчетПениОПВиСО(Объект, Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РаспределениеПениЕП
		И Основание.ВидОперации <> Перечисления.ВидыОперацийРасчетПени.РасчетПениЕП Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидПлатежа = Основание.ВидПлатежа;
	
	Объект.ДокументОснование = Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетПени.ФизЛицо,
	|	РасчетПени.МесяцНалоговогоПериода,
	|	СУММА(РасчетПени.Сумма) КАК Сумма,
	|	ИСТИНА КАК ВключаетОПВ,
	|	ИСТИНА КАК ВключаетВОСМС,
	|	ИСТИНА КАК ВключаетИПН,
	|	ИСТИНА КАК ВключаетСО,
	|   ИСТИНА КАК ВключаетООСМС,
	|	ВЫБОР
	|		КОГДА &ПериодРегистрации < ДАТАВРЕМЯ(2024, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВключаетОПВР
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК РасчетПени
	|ГДЕ
	|	РасчетПени.Ссылка = &Основание
	|	И РасчетПени.МесяцНалоговогоПериода МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|СГРУППИРОВАТЬ ПО
	|	РасчетПени.ФизЛицо,
	|	РасчетПени.МесяцНалоговогоПериода
	|";
	
	Объект.ЕдиныеПлатежи.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Объект.ДокументОснование = Основание;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
    
    // Приказ на каждого сотрудника
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЕППеречислениеВФонды_ЗаявлениеНаВозвратЕдиногоПлатежа";
	КомандаПечати.Представление = НСтр("ru = 'Заявление на возврат ошибочно уплаченных сумм единого платежа'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приказ на список сотрудников
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЕППеречислениеВФонды_ЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм";
	КомандаПечати.Представление = НСтр("ru = 'Заявление вкладчика о согласии списания ошибочно зачисленных сумм'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
    
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать приказа на каждого сотрудника
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЕППеречислениеВФонды_ЗаявлениеНаВозвратЕдиногоПлатежа") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЕППеречислениеВФонды_ЗаявлениеНаВозвратЕдиногоПлатежа",
			НСтр("ru = 'Заявление на возврат ошибочно уплаченных сумм единого платежа'"),
			ПечатьЗаявлениеНаВозвратЕдиногоПлатежа(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЕППеречислениеВФонды.ПФ_MXL_ЗаявлениеНаВозвратЕдиногоПлатежа");
	КонецЕсли;

	// Печать приказа на список сотрудников
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЕППеречислениеВФонды_ЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЕППеречислениеВФонды_ЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм",
			НСтр("ru = 'Заявление вкладчика о согласии списания ошибочно зачисленных сумм'"),
			ПечатьЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЕППеречислениеВФонды.ПФ_MXL_ПриказСписком");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой "ЗаявлениеНаВозвратЕдиногоПлатежа"
//
Функция ПечатьЗаявлениеНаВозвратЕдиногоПлатежа(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ЕППеречислениеВФонды_ЗаявлениеНаВозвратЕдиногоПлатежа";	
	
	// получаем данные для печати
	ВыборкаПоРегистратору = СформироватьЗапросДляПечатиШапка(МассивОбъектов).Выбрать();
	ВыборкаПоДокументам   = СформироватьЗапросДляПечатиТаблицаДокумента(МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

   	ВсегоСтрокДокумента = ВыборкаПоДокументам.Количество();

	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЕППеречислениеВФонды.ПФ_MXL_ЗаявлениеНаВозвратЕдиногоПлатежа"); 
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
                                                                   
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
        
		// Выводим шапку 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаПоРегистратору);
        ОбластьМакетаШапка.Параметры.ДатаПлатежногоДокумента =  Формат(ВыборкаПоРегистратору.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
        ОбластьМакетаШапка.Параметры.Сумма = ВыборкаПоРегистратору.СуммаДокумента;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоРегистратору.Организация, ВыборкаПоРегистратору.СтруктурноеПодразделение);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента), "ПолноеНаименование,");
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = ПредставлениеОрганизации;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0;
		
		ВыборкаПоДокументам.Сбросить();
		
        Если ВыборкаПоДокументам.НайтиСледующий(ВыборкаПоРегистратору.Ссылка) Тогда
        	ВыборкаСтрокРаб = ВыборкаПоДокументам.Выбрать();
        Иначе
        	ВыборкаСтрокРаб = Неопределено;
        КонецЕсли;
		
		Если ВыборкаСтрокРаб <> Неопределено Тогда
			
			Пока ВыборкаСтрокРаб.Следующий() Цикл
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокРаб);
				
				// разбиение на страницы
				ВыведеноСтрок = ВыведеноСтрок + 1;
				ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;
				ОбластьМакетаСтрока.Параметры.СуммаВозврата = ВыборкаСтрокРаб.Сумма;  
                
                // Проверим, уместится ли строка на странице или надо открывать новую страницу
                ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
                Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
                	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
                	ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
                КонецЕсли;
                
                Если ВывестиПодвалЛиста Тогда
                	
                	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
                	ВыведеноСтраниц = ВыведеноСтраниц + 1;
                	ИтогоНаСтранице = 0;
                	
                КонецЕсли;
                
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
			КонецЦикла;
		КонецЕсли;
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента, ВыборкаПоРегистратору.Ответственный);
        СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента);
        Банк = Общегоназначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистратору.НомерСчета, "Банк");
        РеквизитыБанка = Справочники.Банки.ПолучитьРеквизитыБанка(Банк);

        ОбластьМакетаПодвал.Параметры.НазваниеОрганизации 	 = ПредставлениеОрганизации;
        ОбластьМакетаПодвал.Параметры.ИИНОрганизации 		 = СведенияОбОрганизации.БИН_ИИН;
        ОбластьМакетаПодвал.Параметры.НомерСчета 		     = ВыборкаПоРегистратору.НомерСчета;     
        ОбластьМакетаПодвал.Параметры.БИКБанка 	             = РеквизитыБанка.БИК;
        ОбластьМакетаПодвал.Параметры.Банк 		             = Банк;

        // Вывести подписи
		ОбластьМакетаПодвал.Параметры.Руководитель 		= Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ГлавныйБухгалтер	= Руководители.ГлавныйБухгалтер;
		ОбластьМакетаПодвал.Параметры.ЮридическийАдрес 	= СведенияОбОрганизации.ЮридическийАдрес;
		ОбластьМакетаПодвал.Параметры.Телефон 		    = СведенияОбОрганизации.Телефоны;

        ТабДокумент.Вывести(ОбластьМакетаПодвал); 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоРегистратору.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;	

КонецФункции 

// Функция формирует табличный документ с печатной формой "ПечатьЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм".
//
Функция ПечатьЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ПолеСлева  = 0;
    ТабДокумент.ПолеСправа = 0;
    
    ТабДокумент.КлючПараметровПечати = "ЕППеречислениеВФонды_ЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм";
    
	// получаем данные для печати
	ВыборкаПоРегистратору = СформироватьЗапросДляПечатиШапка(МассивОбъектов).Выбрать();
	ВыборкаПоДокументам   = СформироватьЗапросДляПечатиТаблицаДокумента(МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

   	ВсегоСтрокДокумента = ВыборкаПоДокументам.Количество();
    
    // запоминаем области макета
    Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЕППеречислениеВФонды.ПФ_MXL_ЗаявлениеОСогласииСписанияОшибочноЗачисленныхСумм");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
    
    ОбластьМакетаШапка 		 = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
                                                                       
    Пока ВыборкаПоРегистратору.Следующий() Цикл
        
        Если ВыборкаПоДокументам.НайтиСледующий(ВыборкаПоРегистратору.Ссылка) Тогда
            ВыборкаСтрокРаб = ВыборкаПоДокументам.Выбрать();
        Иначе
            ВыборкаСтрокРаб = Неопределено;
        КонецЕсли;
        
        Если ВыборкаСтрокРаб <> Неопределено Тогда
            
            Пока ВыборкаСтрокРаб.Следующий() Цикл
                
                Если ТабДокумент.ВысотаТаблицы > 0 Тогда
                    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
                КонецЕсли;
                
                НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
                                
                // Выводим шапку 
                ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаСтрокРаб);
                ОбластьМакетаШапка.Параметры.ДатаРождения =  Формат(ВыборкаСтрокРаб.ДатаРождения, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
                ОбластьМакетаШапка.Параметры.ДатаРождения =  Формат(ВыборкаСтрокРаб.ДатаРождения, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
                ОбластьМакетаШапка.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ВыборкаСтрокРаб.Сумма, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
                
                ТабДокумент.Вывести(ОбластьМакетаШапка);
                
                УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоРегистратору.Ссылка);
                
            КонецЦикла;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ТабДокумент;

КонецФункции 

#КонецЕсли