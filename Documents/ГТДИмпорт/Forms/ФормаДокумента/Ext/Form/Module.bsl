////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьВидимостьСчетовУчета();
	УправлениеФормой(ЭтаФорма);
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	СформироватьСписокВыбораПризнакаПроисхождения();
	УстановитьУсловноеОформление();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

	ЭСФСерверПереопределяемый.ДокументыИмпортаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	//УстановитьВидимостьЭлементовСУчетомВариантовОтражения(Объект);

	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.Товары, "Товары", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
		УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.ОС, "ОС", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")	И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиДокументаНаСервере(Параметр, "Товары");
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы[Параметр.ИмяТаблицы], Параметр.ИмяТаблицы, Элементы.Разделы.ТекущиеДанные.НомерСтроки);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	ЗаполнитьДополнительныеКолонкиРазделов(Объект.Разделы);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ГТДИмпорт", ПараметрыЗаписи, Объект.Ссылка);	
	
	// При записи документа изменяются элементы справочника НомераГТД.
	// Если не выполнить метод ниже, то в форме документа не изменятся наименования номеров ГТД.
	ОповеститьОбИзменении(Тип("СправочникСсылка.НомераГТД"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""гтд по импорту"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТолькоПросмотрИзменен = Ложь;
	Если Элемент.ТолькоПросмотр И НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ТолькоПросмотрИзменен = Истина;
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);
	
	Если ТолькоПросмотрИзменен Тогда
		ЭтотОбъект.ТолькоПросмотр = Ложь;
	КонецЕсли;
	     
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	УправлениеФормой(ЭтаФорма);
	
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовПошлина);
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты", ЭтотОбъект, СтруктураРезультатаВыполненияПриИзмененииДаты);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры             

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, 
		Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
						
			Если Объект.Разделы.Количество() > 0 Тогда
				ПоказатьВопросПроОчисткуДогворов(Результат);
			Иначе		
				Если Объект.ОС.Количество() > 0 Тогда
					ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Да, Результат);
				Иначе
					ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Результат);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НомерГТДПриИзменении(Элемент)    	
	
	Объект.НомерВходящегоДокумента = СокрЛП(Строка(Объект.НомерГТД)); 
	 
	 Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГТД", ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка"));
		МассивСтрокСПустымИсточником = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокСПустымИсточником.Количество() <> Объект.Товары.Количество() Тогда		
			НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Объект.Товары, Истина);
		КонецЕсли;  		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	НоваяВалютаВзаиморасчетов 		= Объект.ВалютаВзаиморасчетов;
	ПрежнийКурсВзаиморасчетов		= Объект.КурсВзаиморасчетов;
	ПрежняяКратностьВзаиморасчетов	= Объект.КратностьВзаиморасчетов;	
	СтрокаВалютыВзаиморасчетов      = Объект.ВалютаВзаиморасчетов;
			
	//обработаем изменение валюты в табличной части Разделы
	Если ЗначениеЗаполнено(ТекущаяВалютаВзаиморасчетов)
		И ЗначениеЗаполнено(НоваяВалютаВзаиморасчетов)		
		И (ТекущаяВалютаВзаиморасчетов <> НоваяВалютаВзаиморасчетов) Тогда
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("НоваяВалютаВзаиморасчетов",      НоваяВалютаВзаиморасчетов);
		ДопПараметры.Вставить("ПрежнийКурсВзаиморасчетов",      ПрежнийКурсВзаиморасчетов);
		ДопПараметры.Вставить("ПрежняяКратностьВзаиморасчетов", ПрежняяКратностьВзаиморасчетов);
		ДопПараметры.Вставить("ТекущаяВалютаВзаиморасчетов",    ЭтаФорма.ТекущаяВалютаВзаиморасчетов);
		ДопПараметры.Вставить("ВалютаДокумента",			    Объект.ВалютаДокумента);
		
		ТекстВопроса = НСтр("ru='Изменилась валюта таможенных платежей. Будут очищены договоры взаиморасчетов в валюте, валюта которых не соответствует новому значению и сумма сбора в валюте.
								|Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбИзмененииВалютыВзаиморасчетов", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0); 
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовПошлина);
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаРазделыГТД" Тогда
		
		Элементы.РазделыТаможеннаяСтоимость.Заголовок = СформироватьЗаголовокПоВалюте(НСтр("ru = 'Таможенная стоимость'"), СтрокаВалютыДокумента);
		Элементы.РазделыТаможенныйСбор.Заголовок      = СформироватьЗаголовокПоВалюте(НСтр("ru = 'Таможенный сбор'")     , СтрокаВалютыДокумента);
		Элементы.РазделыТаможенныйСборВал.Заголовок   = СформироватьЗаголовокПоВалюте(НСтр("ru = 'Таможенный сбор'")     , СтрокаВалютыВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
		
	Если Объект.Разделы.Количество() > 0 И ТекущийКонтрагент <> Объект.Контрагент Тогда
        Если НЕ ВестиУчетПоДоговорам Тогда
            ПослеЗакрытияВопросаДоговорКонтрагентаПриИзмененииНаСервере();
        Иначе
            Режим = РежимДиалогаВопрос.ДаНет;
            Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, Параметры);
            ПоказатьВопрос(Оповещение, НСтр("ru = 'Изменился контрагент. Очистить договоры взаиморасчетов по таможенным платежам?'"), Режим, 0);		
        КонецЕсли;
	КонецЕсли; 
		
КонецПроцедуры  


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РАЗДЕЛЫ

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	ТЧТовары = Элементы.Товары;
	ТЧОС = Элементы.ОС;
	ТЧРазделы = Элементы.Разделы;
	
	ТекущаяСтрокаТовары = ТЧТовары.ТекущаяСтрока;
	ТекущаяСтрокаОС = ТЧОС.ТекущаяСтрока;
	
	ТекущийЭлементТовары = ТЧТовары.ТекущийЭлемент;
	ТекущийЭлементОС     = ТЧОС.ТекущийЭлемент;

	ТекущиеДанные = ТЧРазделы.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено Тогда
		ТЧТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерРаздела", ТекущиеДанные.НомерСтроки);   
		ТЧОС.ОтборСтрок     = Новый ФиксированнаяСтруктура("НомерРаздела", ТекущиеДанные.НомерСтроки); 	
		ВалютаПошлины = ТекущиеДанные.ВалютаПошлины;
		ВалютаНДС = ТекущиеДанные.ВалютаНДС;
		УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(ТЧТовары, "Товары", ТекущиеДанные.НомерСтроки);
		УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(ТЧОС,     "ОС",     ТекущиеДанные.НомерСтроки);  
		
		ТекущийРаздел = ТекущиеДанные.НомерСтроки;
			
		Если ТекущаяСтрокаТовары <> Неопределено Тогда
			ТЧТовары.ТекущаяСтрока = ТекущаяСтрокаТовары;
		КонецЕсли;
			
		Если ТекущийЭлементТовары <> Неопределено Тогда
			ТЧТовары.ТекущийЭлемент = ТекущийЭлементТовары;
		КонецЕсли;
       		
		Если ТекущаяСтрокаОС <> Неопределено Тогда
			ТЧОС.ТекущаяСтрока = ТекущаяСтрокаОС;
		КонецЕсли;
       		
		Если ТекущийЭлементОС <> Неопределено Тогда
			ТЧОС.ТекущийЭлемент = ТекущийЭлементОС;
		КонецЕсли;
		
	Иначе
		ТЧТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерРаздела", 0);
		ТЧОС.ОтборСтрок     = Новый ФиксированнаяСтруктура("НомерРаздела", 0);
		ВалютаПошлины = "";
		ВалютаНДС = "";
		
		ТекущийРаздел = 0;
	КонецЕсли;
	
	Элементы.ТоварыСуммаПошлины.Заголовок = СформироватьЗаголовокПоВалюте(НСтр("ru = 'Пошлина'"), ?(Не ЗначениеЗаполнено(ВалютаПошлины), СтрокаВалютыДокумента, ВалютаПошлины));
	Элементы.ТоварыСуммаНДС.Заголовок = СформироватьЗаголовокПоВалюте(НСтр("ru = 'НДС'"), ?(Не ЗначениеЗаполнено(ВалютаНДС), СтрокаВалютыДокумента, ВалютаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыДоговорВзаиморасчетовПошлинаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);
	
	РазделыДоговорПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти();		
КонецПроцедуры

&НаКлиенте
Процедура РазделыДоговорВзаиморасчетовНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);

	РазделыДоговорПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыДоговорВзаиморасчетовСборПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможенныйСборПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура РазделыДоговорВзаиморасчетовСборВалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	
	РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные);
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможенныйСборВалПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		СтрукутраДанных = Новый Структура("ДоговорВзаиморасчетовПошлина, ДоговорВзаиморасчетовНДС, 
											|ДоговорВзаиморасчетовСбор, ДоговорВзаиморасчетовСборВал, СтавкаНДС");
		
		ЗаполнитьЗначенияСвойств(СтрукутраДанных, ТекущиеДанные);
		РазделыПриНачалеРедактированияНаСервере(СтрукутраДанных, Объект.Организация, Объект.Контрагент, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрукутраДанных);
		
		РазделыДоговорПриИзменении(ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)
	
	НомерРаздела = Элементы.Товары.ОтборСтрок.НомерРаздела;
	
	//Удаляем все записи этого раздела
	МассивСтрокТовары = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	МассивСтрокОС = Объект.ОС.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));

	Для каждого ЭлементМассива Из МассивСтрокТовары Цикл
		Объект.Товары.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Для каждого ЭлементМассива Из МассивСтрокОС Цикл
		Объект.ОС.Удалить(ЭлементМассива);
	КонецЦикла;
	
	// Нужно переименовать все последующие разделы
	Для Сч = НомерРаздела + 1 По Объект.Разделы.Количество()+ 1 Цикл
        
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", Сч));
		КоличествоСтрок = МассивСтрок.Количество();
		Для каждого ЭлементМассива Из МассивСтрок Цикл
			ЭлементМассива.НомерРаздела = Сч - 1;
		КонецЦикла;
		
		МассивСтрокОС = Объект.ОС.НайтиСтроки(Новый Структура("НомерРаздела", Сч));
		КоличествоСтрок = МассивСтрокОС.Количество();
		Для каждого ЭлементМассива Из МассивСтрокОС Цикл
			ЭлементМассива.НомерРаздела = Сч - 1;
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда 
		ТекстСообщения = НСтр("ru='Не выбран раздел ГТД, к которому относится строка!'");
		Поле = "Разделы";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		Отказ = Истина;
	КонецЕсли;                                       	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент) 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		ТекущиеДанные.НомерГТД = Неопределено;		
		ТекущиеДанные.НомерРаздела = Элементы.Товары.ОтборСтрок.НомерРаздела;
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ВидНДС, НДСВидПоступления, НДСВидОборота");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, НДСВключенВСтоимость");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, НаименованиеТовара, КодТНВЭД, ЕдиницаИзмерения, Коэффициент, Количество, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ, ВидНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, , ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.Товары, "Товары", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораКодаТНВЭД("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыФактурнаяСтоимостьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСбораПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСбораВалПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПризнакПроисхожденияПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда 
		ТекстСообщения = НСтр("ru='Не выбран раздел ГТД, к которому относится строка!'");
		Поле = "Разделы";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		
		ТекущиеДанные.НомерГТД = Неопределено;
		ТекущиеДанные.НомерРаздела = Элементы.ОС.ОтборСтрок.НомерРаздела;
			
		ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, ВидНДС, НДСВидПоступления, НДСВидОборота");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, НДСВключенВСтоимость");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "ОС", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, 
										|НДСВидПоступления, СчетУчетаНУ, ПодразделениеОрганизации, МОЛОрганизации");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		Элементы.ОС.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
		
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.ОС, "ОС", Элементы.Разделы.ТекущиеДанные.НомерСтроки);	
КонецПроцедуры

&НаКлиенте
Процедура ОСФактурнаяСтоимостьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаСбораПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаСбораВалПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ОСНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.ОС.ТекущиеДанные, "ОсновноеСредство");
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РаспределитьРаздел(Команда)
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда 
		ТекстСообщения = НСтр("ru='Не выбран раздел ГТД!'");
		Поле = "Разделы";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		Возврат;
	КонецЕсли;

	
	//СтруктураДанных = Новый Структура("ТаможеннаяСтоимость, СтавкаПошлины, СтавкаНДС, СуммаПошлины, СуммаНДС,
	//| ТаможенныйСбор, ТаможенныйСборВал, ДоговорВзаиморасчетовПошлина, ДоговорВзаиморасчетовНДС, 
	//| ДоговорВзаиморасчетовСбор, ДоговорВзаиморасчетовСборВал");
	//
	//ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);
	РаспределитьТаможеннуюСтоимость(Элементы.Товары.ОтборСтрок.НомерРаздела);
	РаспределитьПошлиныСборНДС(Элементы.Товары.ОтборСтрок.НомерРаздела);
	//ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.Товары, "Товары", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.ОС, "ОС", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры   


&НаКлиенте
Процедура ДобавитьИзПоступленияТовары(Команда)
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", НСтр("ru = 'Товары'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияОС(Команда)
	ОткрытьФормуВыбораПоступленияТоваровУслуг("ОС");
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.Товары, "Товары", Элементы.Разделы.ТекущиеДанные.НомерСтроки);	

	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияДляВсехСтрок(Команда)
	
	КоличествоСтрок = 0;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПризнакПроисхождения) Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		//задать вопрос
		ТекстВопроса = НСтр("ru = 'Заполненные признаки происхождения будут очищены перед заполнением. Продолжить заполнение?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеПризнакаВоВсехСтроках", ЭтотОбъект, Новый Структура("ТабличнаяЧасть", "Товары"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		//сразу выполняем заполнение
		ЗаполнитьПризнакПроисхожденияДляСтрокТЧ("Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияДляПустыхСтрок(Команда)
	ЗаполнитьПризнакПроисхожденияДляСтрокТЧ("Товары", Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

/// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.УчитыватьКПН.Видимость = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ВидУчетаНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ГруппаСчетаУчетаРасчетов.Видимость          = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ГруппаНДС.Видимость                         = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.ГруппаСчетаУчетаРасчетовСБюджетом.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетУчетаНДСПоРеализацииПоИмпорту.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    
	Элементы.ТоварыПризнакПроисхождения.Видимость   = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	Элементы.ТоварыГруппаЗаполнитьПризнак.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
	Если Форма.ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНомерГТД", "Заголовок", НСтр("ru = 'Источник происхождения'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНомерГТД", "Заголовок", НСтр("ru = 'Номер ГТД'"));
	КонецЕсли;
	
	УстановитьВидимостьЭлементовСУчетомВариантовОтражения(Форма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеКолонкиРазделов(Разделы)
	
	Для Каждого ТекСтрока Из Разделы Цикл
		ЗаполнитьДополнительныеКолонкиСтрокиРазделов(ТекСтрока);		
	КонецЦикла; 
	
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеКолонкиСтрокиРазделов(ТекущиеДанные)
	
	ТекущиеДанные.ВалютаПошлины = СокрЛП(Строка(ТекущиеДанные.ДоговорВзаиморасчетовПошлина.ВалютаВзаиморасчетов));
	ТекущиеДанные.ВалютаНДС = СокрЛП(Строка(ТекущиеДанные.ДоговорВзаиморасчетовНДС.ВалютаВзаиморасчетов));
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Форма.Объект);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
    ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	Если Параметры.Ключ.Пустая() Тогда
		
	  	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		Объект.УчитыватьКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		// При импорте, лицо импортирующее товар автоматически считается плательщиком НДС
		// В том случае, если организация не состоит на учете по НДС
		// сумму уплаченного НДС будем включать в стоимость приобретаемого товара
		Объект.УчитыватьНДС = Истина;
		Объект.НДСВключенВСтоимость = НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		
		Если Параметры.ЗначениеКопирования = Неопределено 
			ИЛИ (Параметры.ЗначениеКопирования <> Неопределено И Параметры.ЗначениеКопирования.Пустая()) Тогда
			
			Объект.Контрагент = Объект.Организация.НалоговыйКомитет;
			Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
			Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
			
			СтруктураКурсаДокумента         = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			Объект.КурсДокумента            = СтруктураКурсаДокумента.Курс;
			Объект.КратностьДокумента       = СтруктураКурсаДокумента.Кратность;
			Объект.КурсВзаиморасчетов       = СтруктураКурсаДокумента.Курс;
			Объект.КратностьВзаиморасчетов  = СтруктураКурсаДокумента.Кратность;
			
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		
			Если ПустаяСтрока(Объект.ВидВходящегоДокумента) Тогда 
				Объект.ВидВходящегоДокумента = НСтр("ru = 'Грузовая таможенная декларация'");
			КонецЕсли;	
			
			Если Объект.Разделы.Количество() = 0 Тогда
				СтрокаРаздела = Объект.Разделы.Добавить();
				СтрокаРаздела.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			Иначе
				СтрокаРаздела = Объект.Разделы[0];
			КонецЕсли;                                    			
			Договор = Документы.ГТДИмпорт.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента); 
			Документы.ГТДИмпорт.ЗаполнитьДоговорыВСтрокеТабЧастиРазделов(Договор, СтрокаРаздела, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента);
												
		КонецЕсли; 
		
	КонецЕсли;
	
	СтрокаВалютыДокумента = Объект.ВалютаДокумента;
	ТекущаяВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
	СтрокаВалютыВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущийКонтрагент = Объект.Контрагент;
	
	ЗаполнитьДополнительныеКолонкиРазделов(Объект.Разделы);
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовПошлина);
	УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовНДС);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	УстановитьВидимостьЭлементовСУчетомВариантовОтражения(ЭтотОбъект);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	 	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсДокумента") Тогда
		Объект.КурсДокумента = Параметры.КурсДокумента;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьДокумента") Тогда
		Объект.КратностьДокумента = Параметры.КратностьДокумента;
	КонецЕсли;
	
	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		
		Если Результат.ИзмененаОрганизация И Объект.Разделы.Количество() > 0 Тогда
			ПоказатьВопросПроОчисткуДогворов(Результат);
		Иначе		
			
			Если Объект.ОС.Количество() > 0 Тогда
				ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Да, Результат);
			Иначе
				ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Результат);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да); 
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПроОчисткуДогворов(Параметры)
	
	ТекстВопроса = НСтр("ru='Изменилась организация. Заполнить договоры взаиморасчетов по таможенным платежам?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроОчисткуДоговоров", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроОчисткуДоговоров(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчиститьДоговора", Результат = КодВозвратаДиалога.Да);
	
	Если Объект.ОС.Количество() > 0 Тогда
		ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Да, Параметры);
	Иначе
		ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	Если СтруктураПараметров <> Неопределено И (СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") 
			И СтруктураПараметров.ОчищатьНекорректныеЗначения) Тогда
		ПроверитьВладельцаПодразделенияОС(Объект);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВладельцаПодразделенияОС(Объект)
	
	Для Каждого ТекСтрока Из Объект.ОС Цикл
		
		ВладелецПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ПодразделениеОрганизации, "Владелец");
		Если Объект.Организация <> ВладелецПодразделения Тогда
			ТекСтрока.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;

	КонецЦикла; 
		
КонецПроцедуры     

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, ПричиныИзмененияСчетовУчета = Неопределено)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПричиныИзмененияСчетовУчета = Неопределено Тогда
		ПричиныИзмененияСчетовУчета = Новый Массив;
	КонецЕсли;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если СтруктураПараметров.Свойство("ОчиститьДоговора") Тогда
		
		Если СтруктураПараметров.ОчиститьДоговора Тогда
			Договор = Документы.ГТДИмпорт.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента); 
		КонецЕсли;	
		
		Для Каждого ТекСтрока Из Объект.Разделы Цикл
			
			ТекСтрока.ДоговорВзаиморасчетовПошлина = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекСтрока.ДоговорВзаиморасчетовНДС     = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекСтрока.ДоговорВзаиморасчетовСбор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ТекСтрока.ДоговорВзаиморасчетовСборВал = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если СтруктураПараметров.ОчиститьДоговора Тогда
				Документы.ГТДИмпорт.ЗаполнитьДоговорыВСтрокеТабЧастиРазделов(Договор, ТекСтрока, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента);	
			КонецЕсли; 
			
		КонецЦикла; 
			
	КонецЕсли; 
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбИзмененииВалютыВзаиморасчетов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Объект.ВалютаВзаиморасчетов    = Параметры.ТекущаяВалютаВзаиморасчетов;  
		Объект.КурсВзаиморасчетов 	   = Параметры.ПрежнийКурсВзаиморасчетов;
		Объект.КратностьВзаиморасчетов = Параметры.ПрежняяКратностьВзаиморасчетов;
			
		УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовПошлина);
		УстановитьПараметрыВыбораДоговора(ЭтотОбъект, Элементы.РазделыДоговорВзаиморасчетовНДС);
		
        Возврат;
		
	КонецЕсли;
	
	ВалютаВзаиморасчетовПриИзмененииНаСервере(Параметры);

	КонецПроцедуры

&НаСервере
Процедура РассчитатьПошлинуИНДСРаздела(Раздел)
	
	Раздел.СуммаПошлины = РассчитатьСуммуПошлиныГТД(Раздел.ТаможеннаяСтоимость, Раздел.СтавкаПошлины, Раздел.ДоговорВзаиморасчетовПошлина, Раздел.НомерСтроки);

	Раздел.СуммаНДС = РассчитатьСуммуНДСГТД(Раздел.ТаможеннаяСтоимость, Раздел.СуммаПошлины, Раздел.СуммаПошлиныСпец, Раздел.ДоговорВзаиморасчетовПошлина, 
					Раздел.ТаможенныйСбор, Раздел.ТаможенныйСборВал, Раздел.СтавкаНДС, Раздел.ДоговорВзаиморасчетовНДС, Раздел.НомерСтроки);
		
КонецПроцедуры

&НаСервере
Функция РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтавкаПошлины, ДоговорПошлины, НомерСтроки)

	ВалютаПошлины           = ДоговорПошлины.ВалютаВзаиморасчетов;
	ВалютаДокумента         = Объект.ВалютаДокумента;
	КурсВзаиморасчетов      = Объект.КурсВзаиморасчетов;
	КратностьВзаиморасчетов = Объект.КратностьВзаиморасчетов;
	
	Если НЕ ЗначениеЗаполнено(ДоговорПошлины)  Тогда
		Если ЗначениеЗаполнено(СтавкаПошлины) И ВестиУчетПоДоговорам Тогда
			// если значение договора не заполнено расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлен договор взаиморасчетов по пошлине!'");
			Поле = "Разделы[" + (НомерСтроки - 1) + "].ДоговорВзаиморасчетовПошлина";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		
		ВалютаПошлины 			= ВалютаДокумента;
		ТаможеннаяСтоимостьВал 	= ТаможеннаяСтоимость;
	КонецЕсли;	                              	                            	
	
	Если НЕ ЗначениеЗаполнено(ВалютаПошлины) Тогда
		Если ЗначениеЗаполнено(СтавкаПошлины) И ВестиУчетПоДоговорам Тогда
			// если в договоре пошлины не заполнена валюта расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлена валюта в договоре взаиморасчетов по пошлине!'");
			Поле = "Разделы[" + (НомерСтроки - 1) + "].ДоговорВзаиморасчетовПошлина";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
	
		ВалютаПошлины = ВалютаДокумента;
		ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
	
	ИначеЕсли ВалютаПошлины = ВалютаДокумента Тогда
    	ТаможеннаяСтоимостьВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
		                         ВалютаДокумента, ВалютаРегламентированногоУчета,
		                         ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),1,
		                         ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), 1);
	Иначе							 
		ТаможеннаяСтоимостьВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
			                         ВалютаДокумента, ВалютаПошлины, ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
			                         КурсВзаиморасчетов, ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
		
	КонецЕсли;

	Возврат ТаможеннаяСтоимостьВал * СтавкаПошлины / 100;

КонецФункции

&НаСервере
Функция РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, СуммаПошлиныСпец, ДоговорПошлины, СуммаСбора, СуммаСбораВал, СтавкаНДС, ДоговорНДС, НомерСтроки)
	
	ВалютаДокумента         = Объект.ВалютаДокумента;
	ВалютаВзаиморасчетов    = Объект.ВалютаВзаиморасчетов;
	КурсВзаиморасчетов      = Объект.КурсВзаиморасчетов;
	КратностьВзаиморасчетов = Объект.КратностьВзаиморасчетов;
	
	// Определяем валюту пошлины
	ВалютаПошлины = ДоговорПошлины.ВалютаВзаиморасчетов;
	
	Если НЕ ЗначениеЗаполнено(ДоговорПошлины) Тогда
		Если ЗначениеЗаполнено(СуммаПошлины) И ВестиУчетПоДоговорам Тогда
			// если значение договора не заполнено расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлен договор взаиморасчетов по пошлине!'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Разделы", НомерСтроки, "ДоговорВзаиморасчетовПошлина");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		
		ВалютаПошлины 			= ВалютаДокумента;
		ТаможеннаяСтоимостьВал 	= ТаможеннаяСтоимость;
	КонецЕсли;	                              	                            	
	
	Если НЕ ЗначениеЗаполнено(ВалютаПошлины) Тогда
		Если ЗначениеЗаполнено(СуммаПошлины) И ВестиУчетПоДоговорам Тогда
			// если в договоре пошлины не заполнена валюта расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлена валюта в договоре взаиморасчетов по пошлине!'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Разделы", НомерСтроки, "ДоговорВзаиморасчетовПошлина");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		ВалютаПошлины = ВалютаДокумента;
		ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
	КонецЕсли;	
	
	// Определяем валюту НДС
	ВалютаНДС = ДоговорНДС.ВалютаВзаиморасчетов;
	
	Если НЕ ЗначениеЗаполнено(ДоговорНДС) Тогда
		Если ЗначениеЗаполнено(СтавкаНДС) И ВестиУчетПоДоговорам ТОгда 
			// если значение договора не заполнено расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлен договор взаиморасчетов по НДС!'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Разделы", НомерСтроки, "ДоговорВзаиморасчетовНДС");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		
		ВалютаНДС	 			= ВалютаДокумента;
		ТаможеннаяСтоимостьВал 	= ТаможеннаяСтоимость;
	КонецЕсли;	                              	                            	
	
	Если НЕ ЗначениеЗаполнено(ВалютаНДС) Тогда
		Если ЗначениеЗаполнено(СтавкаНДС) И ВестиУчетПоДоговорам ТОгда 
			// если в договоре НДС не заполнена валюта расчет ведем в валюте документа
			ТекстСообщения = НСтр("ru='Не установлена валюта в договоре взаиморасчетов по НДС!'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Разделы", НомерСтроки, "ДоговорВзаиморасчетовНДС");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЕсли;
		
		ВалютаНДС 				= ВалютаДокумента;
		ТаможеннаяСтоимостьВал 	= ТаможеннаяСтоимость;
	КонецЕсли;	
	
	// Пересчет сумм в валюту НДС
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		БазаНДС = 0;
		
	Иначе
		
		Если НЕ ВалютаНДС = ВалютаДокумента Тогда  
			// Надо все пересчитать в валюту расчетов с таможней по НДС.
			
			// КурсВзаиморасчетов и КратностьВзаиморасчетов определяют параметры валютного пересчета
			// Т.к. документ имеет только две валюты - регламентированную валюту документа
			// и валюту взаиорасчетов в случае валютных расчетов
				ТаможеннаяСтоимостьВал = 
					ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
												ВалютаДокумента, ВалютаНДС, 
												ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), КурсВзаиморасчетов,
												ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
						
			Если ВалютаНДС = ВалютаПошлины Тогда
				СуммаПошлиныВал = СуммаПошлины + СуммаПошлиныСпец;
			Иначе
				// Если Валюта НДС не равна валюте документа и не равна валюте пошлины, значит 
				// Валюта Пошлины = Валюте документа.
				СуммаПошлиныВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаПошлины + СуммаПошлиныСпец,
								  				ВалютаПошлины, ВалютаНДС, 
								  				ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), КурсВзаиморасчетов,
								  				ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
				
			КонецЕсли;
			// Рассчитаем общую сумму сборов.
			// Валютный сбор уже в нужнго нам валюте, сбор в тенге персчитываем в валюту НДС
			СуммаТаможенногоСбораДляНДСВал = СуммаСбораВал + 
									ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаСбора,
												ВалютаДокумента, ВалютаНДС, 
												ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), КурсВзаиморасчетов,
												ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
															
			БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал + СуммаТаможенногоСбораДляНДСВал;
			
		Иначе 
			// Если НДС в валюте документа,
			// то выполняем валютный пересчет в валюту документа (валюту регламентированного учета)			
			
			ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
			
			Если ВалютаНДС = ВалютаПошлины Тогда
				СуммаПошлиныВал = СуммаПошлины + СуммаПошлиныСпец;
			Иначе	
				СуммаПошлиныВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаПошлины + СуммаПошлиныСпец,
												ВалютаВзаиморасчетов,ВалютаДокумента,
												КурсВзаиморасчетов,ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
												КратностьВзаиморасчетов, ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));
				
			КонецЕсли;
			
			СуммаТаможенногоСбораДляНДС = СуммаСбора + ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаСбораВал,
														ВалютаВзаиморасчетов,ВалютаДокумента,
														КурсВзаиморасчетов,ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
														КратностьВзаиморасчетов, ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

			БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал + СуммаТаможенногоСбораДляНДС;
			
		КонецЕсли;
	КонецЕсли;
		
	Возврат УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(БазаНДС, Истина, Ложь, СтавкаНДС.Ставка); // УчитыватьНДС, Сумма не включает НДС.

КонецФункции

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииНаСервере(Параметры)

	НоваяВалютаВзаиморасчетов  = Параметры.НоваяВалютаВзаиморасчетов;
	ВалютаДокумента			   = Параметры.ВалютаДокумента;  
		
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(НоваяВалютаВзаиморасчетов, Объект.Дата);
	// установим курс и кратность новой валюты взаиморасчетов,
	// так как они используются в процедуре расчета сумм по разделу
	Объект.КурсВзаиморасчетов      = СтруктураКурса.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		   
	// Проверим табличную часть разделов
	СтруктураРеквизитовДоговоров = Новый Структура("ДоговорВзаиморасчетовНДС,ДоговорВзаиморасчетовСбор,
												   |ДоговорВзаиморасчетовСборВал,ДоговорВзаиморасчетовПошлина");
	ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Для Каждого Раздел Из Объект.Разделы Цикл
		// Признак устанавливаем всегда в ИСТИНА, т.к. поле "ДоговорВзаиморасчетовСборВал" очищается автоматически
		ПризнакНеобходимостиПересчетаРаздела = Истина;
		Раздел.ТаможенныйСборВал = 0;
		Для Каждого ТекущийДоговор Из СтруктураРеквизитовДоговоров Цикл
			ВалютаТекущегоДоговора = Раздел[ТекущийДоговор.Ключ].ВалютаВзаиморасчетов;					
			// Валюта договора не соответствует ни валюте документа,
			// ни новой валюте взаиморасчетов - очистим такой договор
			Если ЗначениеЗаполнено(ВалютаТекущегоДоговора) И
				ВалютаТекущегоДоговора <> ВалютаДокумента И
				ВалютаТекущегоДоговора <> НоваяВалютаВзаиморасчетов Тогда 
				
				Раздел[ТекущийДоговор.Ключ] 			= ПустойДоговор;
				ПризнакНеобходимостиПересчетаРаздела 	= Истина;
			КонецЕсли;
		КонецЦикла;	   	   
		
		// рассчитаем суммы по разделу при необходимости
		Если ПризнакНеобходимостиПересчетаРаздела Тогда 
			РассчитатьПошлинуИНДСРаздела(Раздел);
		КонецЕсли;	
		
	КонецЦикла;	  	
	
	ТекущаяВалютаВзаиморасчетов = НоваяВалютаВзаиморасчетов;
	СтрокаВалютыВзаиморасчетов = НоваяВалютаВзаиморасчетов;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Документы.ГТДИмпорт.ЗаполнитьПоДокументуОснования(Объект, Объект.ДокументОснование);
	
	Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда

		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаОС",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ГТДИмпорт,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"ОС",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;

		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаТовары",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ГТДИмпорт,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"Товары",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Новый Массив);
		
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДополнительныеКолонкиРазделов(Объект.Разделы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислимСуммы()
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеСтрокиТаблицы = Новый Структура("ТаможеннаяСтоимость, ТаможенныйСбор, ТаможенныйСборВал, СуммаПошлины, СуммаПошлиныСпец, СуммаНДС, СтавкаПошлины,
	|ДоговорВзаиморасчетовПошлина, НомерСтроки, СтавкаНДС, ДоговорВзаиморасчетовНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ВычислимСуммыНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ВычислимТаможенныйСборНаСервере();
	
КонецПроцедуры
            
&НаСервере
Процедура ВычислимСуммыНаСервере(Раздел)
	
	ВсегоСтоимость   = 0;
	ВсегоПошлина     = 0;
	ВсегоПошлинаСпец = 0;
	ВсегоНДС         = 0;
	ВсегоСбор        = 0;
	ВсегоСборВал     = 0;
	
	НомерРаздела = Раздел.НомерСтроки;
	
	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоПошлинаСпец, ВсегоНДС, ВсегоСбор, ВсегоСборВал);
    
	Раздел.ТаможеннаяСтоимость 	= ВсегоСтоимость;
	Раздел.ТаможенныйСбор 		= ВсегоСбор;
	Раздел.ТаможенныйСборВал 	= ВсегоСборВал;
	
	Раздел.СуммаПошлины = 
    	РассчитатьСуммуПошлиныГТД(Раздел.ТаможеннаяСтоимость, Раздел.СтавкаПошлины, Раздел.ДоговорВзаиморасчетовПошлина, НомерРаздела);

	Раздел.СуммаНДС =
		РассчитатьСуммуНДСГТД(Раздел.ТаможеннаяСтоимость, Раздел.СуммаПошлины, Раздел.СуммаПошлиныСпец, Раздел.ДоговорВзаиморасчетовПошлина, Раздел.ТаможенныйСбор, 
		Раздел.ТаможенныйСборВал, Раздел.СтавкаНДС, Раздел.ДоговорВзаиморасчетовНДС, НомерРаздела);
		
	Раздел.СуммаПошлиныСпец 	= ВсегоПошлинаСпец;

КонецПроцедуры

&НаСервере
Процедура ПосчитатьИтогиПоТабличнойЧасти(МассивСтрок, ВсегоСтоимость, ВсегоПошлина, ВсегоПошлинаСпец, ВсегоНДС, ВсегоСбор, ВсегоСборВал)	
	
	Для каждого ЭлементМассива Из МассивСтрок Цикл		
		ВсегоСтоимость   = ВсегоСтоимость   + ЭлементМассива.ТаможеннаяСтоимость;
		ВсегоПошлина     = ВсегоПошлина     + ЭлементМассива.СуммаПошлины;
		ВсегоПошлинаСпец = ВсегоПошлинаСпец + ЭлементМассива.СуммаПошлиныСпец;
		ВсегоНДС         = ВсегоНДС         + ЭлементМассива.СуммаНДС;
		ВсегоСбор        = ВсегоСбор        + ЭлементМассива.СуммаСбора;
		ВсегоСборВал     = ВсегоСборВал     + ЭлементМассива.СуммаСбораВал;				
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоПошлинаСпец, ВсегоНДС, ВсегоСбор, ВсегоСборВал)  Экспорт
	
	ВсегоСтоимость   = 0;
	ВсегоПошлина     = 0;
	ВсегоПошлинаСпец = 0;
	ВсегоНДС         = 0;
	ВсегоСбор        = 0;
	ВсегоСборВал     = 0;
	ВсегоНДС         = 0;
	
	МассивСтрок    = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	ПосчитатьИтогиПоТабличнойЧасти(МассивСтрок, ВсегоСтоимость, ВсегоПошлина, ВсегоПошлинаСпец, ВсегоНДС, ВсегоСбор, ВсегоСборВал);	
	
	МассивСтрокОС  = Объект.ОС.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	ПосчитатьИтогиПоТабличнойЧасти(МассивСтрокОС, ВсегоСтоимость, ВсегоПошлина, ВсегоПошлинаСпец, ВсегоНДС, ВсегоСбор, ВсегоСборВал);		
	
КонецПроцедуры

&НаСервере
Процедура ВычислимТаможенныйСборНаСервере()
	
	ВсегоТаможенныйСбор = 0;
	
	Для Каждого Раздел Из Объект.Разделы Цикл
		ВсегоТаможенныйСбор = ВсегоТаможенныйСбор + Раздел.ТаможенныйСбор;
	КонецЦикла;
	
	Объект.ТаможенныйСбор = ВсегоТаможенныйСбор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ГТДИмпорт,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидНДСПриИмпорте(Номенклатура)
	
	ЗначениеПоУмолчанию = Перечисления.ВидыНДС.НДС;
	
	Если ЗначениеЗаполнено(Номенклатура.ВидНДСПриИмпорте) Тогда
		ЗначениеПоУмолчанию = Номенклатура.ВидНДСПриИмпорте;
	КонецЕсли;
	
	Возврат	ЗначениеПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, ЗаполнитьЕдИзмКоэффициент = Истина, СчетаУчетаКЗаполнению)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура, "КодТНВЭД, НаименованиеПолное, Наименование");
	
	СтрокаТабличнойЧасти.КодТНВЭД 			= ЗначениеРеквизитаНоменклатура.КодТНВЭД;
	СтрокаТабличнойЧасти.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
														, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
														, ЗначениеРеквизитаНоменклатура.Наименование);
		
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьЕдИзмКоэффициент Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент	  = СведенияОНоменклатуре.Коэффициент;		
	КонецЕсли; 
						
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ГТДИмпорт,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПошлиныВСтрокеТабличнойЧасти(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	КонецЕсли; 
		
	ТекущиеДанные.СуммаПошлины = РассчитатьСуммуПошлиныГТД(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СтавкаПошлины,  
			ТекущиеДанные.ДоговорВзаиморасчетовПошлина, ТекущиеДанные.НомерСтроки);
				
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСВСтрокеТабличнойЧасти(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	КонецЕсли; 
			
	ТекущиеДанные.СуммаНДС = РассчитатьСуммуНДСГТД(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СуммаПошлины, ТекущиеДанные.СуммаПошлиныСпец,
			ТекущиеДанные.ДоговорВзаиморасчетовПошлина,	ТекущиеДанные.ТаможенныйСбор, ТекущиеДанные.ТаможенныйСборВал, 
			ТекущиеДанные.СтавкаНДС, ТекущиеДанные.ДоговорВзаиморасчетовНДС, ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ГТДИмпорт,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.ГТДИмпорт.ЗаполнитьПоПоступлению(ВыбранноеЗначение, Элементы.Товары.ОтборСтрок.НомерРаздела, ТабличнаяЧасть, Объект);	
	
	Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда

		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаОС",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ГТДИмпорт,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"ОС",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;

		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрокаТовары",
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ГТДИмпорт,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"Товары",
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТаблицы)
	
	СтруктураОтбора = Новый Структура("НомерРаздела", Элементы[ИмяТаблицы].ОтборСтрок.НомерРаздела);	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(СтруктураОтбора), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");

	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;

	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);

	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;        

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			МетаданныеОбъекта = Объект.Ссылка.Метаданные();
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
				
				ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура, "КодТНВЭД, НаименованиеПолное, Наименование");
				
				СтрокаТабличнойЧасти.КодТНВЭД 			= ЗначениеРеквизитаНоменклатура.КодТНВЭД;
				СтрокаТабличнойЧасти.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
																	, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
																	, ЗначениеРеквизитаНоменклатура.Наименование);
			КонецЕсли;
			
			СтрокаТабличнойЧасти.НомерРаздела = Элементы.Товары.ОтборСтрок.НомерРаздела; 			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();		
				
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ГТДИмпорт);
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетов Цикл
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
				"НоваяСтрока" + ИмяТаблицы,
				Объект,
				СтрокаТабличнойЧасти);
			Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ГТДИмпорт,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				ИмяТаблицы,
				СтрокаТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазделыПриНачалеРедактированияНаСервере(СтрукутраДанных, Организация, Контрагент, ВалютаВзаиморасчетов, ВалютаДокумента)
	
	Договор = Документы.ГТДИмпорт.ПолучитьДоговорКонтрагента(Организация, Контрагент, ВалютаВзаиморасчетов, ВалютаДокумента); 
	Документы.ГТДИмпорт.ЗаполнитьДоговорыВСтрокеТабЧастиРазделов(Договор, СтрукутраДанных, ВалютаВзаиморасчетов, ВалютаДокумента);
	СтрукутраДанных.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
КонецПроцедуры    

&НаСервере
Процедура РаспределитьТаможеннуюСтоимость(НомерРаздела)
	
	Товары = Объект.Товары;
	ОС = Объект.ОС;
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	Индекс = ТаблицаТовары.Количество() - 1;
	Пока Индекс >= 0 Цикл 
		Если ТаблицаТовары[Индекс].НомерРаздела <> НомерРаздела Тогда 
			ТаблицаТовары.Удалить(Индекс); 
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	Индекс = ТаблицаОС.Количество() - 1;
	Пока Индекс >= 0 Цикл 
		Если ТаблицаОС[Индекс].НомерРаздела <> НомерРаздела Тогда 
			ТаблицаОС.Удалить(Индекс); 
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	ДанныеРаздела= Объект.Разделы.Получить(НомерРаздела - 1);
	ТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость;
	
	Если ЗначениеЗаполнено(ТаможеннаяСтоимость) Тогда 
		
		БазисРаспределения = ТаблицаТовары.ВыгрузитьКолонку("ФактурнаяСтоимость");
		
		Для Каждого Строка ИЗ ТаблицаОС Цикл
			БазисРаспределения.Добавить(Строка["ФактурнаяСтоимость"]);
		КонецЦикла;
		
		ИтогРаспределения  = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(ТаможеннаяСтоимость,БазисРаспределения);
		Если ИтогРаспределения <> Неопределено Тогда
			
			Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
				
				Если НомерСтрокиТаблицы >= ТаблицаТовары.Количество() Тогда
					ТаблицаОС[НомерСтрокиТаблицы-ТаблицаТовары.Количество()].ТаможеннаяСтоимость = ИтогРаспределения[НомерСтрокиТаблицы];
				Иначе
					ТаблицаТовары[НомерСтрокиТаблицы].ТаможеннаяСтоимость  = ИтогРаспределения[НомерСтрокиТаблицы];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Товар Из ТаблицаТовары Цикл
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Товар.НомерСтроки));
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.ТаможеннаяСтоимость = Товар.ТаможеннаяСтоимость;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОС Из ТаблицаОС Цикл
		МассивСтрок = Объект.ОС.НайтиСтроки(Новый Структура("НомерСтроки", ОС.НомерСтроки));
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.ТаможеннаяСтоимость = ОС.ТаможеннаяСтоимость;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

	&НаСервере
Процедура РаспределитьПошлиныСборНДС(НомерРаздела)
	
	Товары = Объект.Товары;
	ОС = Объект.ОС;
	
	ДанныеРаздела= Объект.Разделы.Получить(НомерРаздела - 1);
	
	СуммаПошлины        = ДанныеРаздела.СуммаПошлины;
	СуммаПошлиныСпец    = ДанныеРаздела.СуммаПошлиныСпец;
	СуммаНДС            = ДанныеРаздела.СуммаНДС;
	СуммаСбора			= ДанныеРаздела.ТаможенныйСбор;
	СуммаСбораВал		= ДанныеРаздела.ТаможенныйСборВал;    	
	
	// Посчитаем общую помеченных позиций
	МассивСтрок   = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	МассивСтрокОС = ОС.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	
	ОбщаяСтоимость = Товары.Итог("ТаможеннаяСтоимость");	
	БазисРаспределенияТС = Новый Массив();
	
	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ТаможеннаяСтоимость;
		БазисРаспределенияТС.Добавить(ЭлементМассива.ТаможеннаяСтоимость);
	КонецЦикла;
	
	ВсегоСтоимостьОС = 0;
	Для каждого ЭлементМассива Из МассивСтрокОС Цикл
		ВсегоСтоимостьОС = ВсегоСтоимостьОС + ЭлементМассива.ТаможеннаяСтоимость;
		БазисРаспределенияТС.Добавить(ЭлементМассива.ТаможеннаяСтоимость);
		
		// Доабвлем строки по ОС в общий массив к распределению
		МассивСтрок.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если (ВсегоСтоимость + ВсегоСтоимостьОС) = 0 Тогда
		ТекстСообщения = НСтр("ru='Общая сумма таможенной стоимости раздела нулевая! Распределение невозможно.'");
		Поле = "Товары";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		Возврат;
	КонецЕсли;
	
	// Теперь распределяем
	РаспределитьПоСтрокамРаздела(МассивСтрок, БазисРаспределенияТС, СуммаПошлины, СуммаПошлиныСпец, СуммаНДС, СуммаСбора, СуммаСбораВал);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РаспределитьПоСтрокамРаздела(МассивСтрок, БазисРаспределения, СуммаПошлины = 0, СуммаПошлиныСпец = 0, СуммаНДС = 0, СуммаСбора = 0, СуммаСбораВал = 0)
	
	Если НЕ СуммаПошлины = 0 Тогда
		МассивРезультатаРаспределения_Пошлина = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаПошлины, БазисРаспределения);
	КонецЕсли;
	Если НЕ СуммаПошлиныСпец = 0 Тогда
		МассивРезультатаРаспределения_ПошлинаСпец = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаПошлиныСпец, БазисРаспределения);
	КонецЕсли;
	Если НЕ СуммаНДС = 0 Тогда
		МассивРезультатаРаспределения_НДС = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаНДС, БазисРаспределения);
	КонецЕсли;
	Если НЕ СуммаСбора = 0 Тогда
		МассивРезультатаРаспределения_СуммаСбора = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаСбора, БазисРаспределения);
	КонецЕсли;
	Если НЕ СуммаСбораВал = 0 Тогда
		МассивРезультатаРаспределения_СуммаСбораВал = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаСбораВал, БазисРаспределения);
	КонецЕсли;
	
	Для ИндексСтроки = 0 по МассивСтрок.Количество()-1 Цикл
		Если не СуммаПошлины = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаПошлины = МассивРезультатаРаспределения_Пошлина[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаПошлины = 0;
		КонецЕсли;
		Если не СуммаПошлиныСпец = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаПошлиныСпец = МассивРезультатаРаспределения_ПошлинаСпец[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаПошлиныСпец = 0;
		КонецЕсли;
		Если не СуммаНДС = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаНДС = МассивРезультатаРаспределения_НДС[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаНДС = 0;
		КонецЕсли;
		Если не СуммаСбора = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаСбора = МассивРезультатаРаспределения_СуммаСбора[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаСбора = 0;
		КонецЕсли;
		Если не СуммаСбораВал = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаСбораВал = МассивРезультатаРаспределения_СуммаСбораВал[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаСбораВал = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьЗаголовокПоВалюте(Знач ТекстЗаголовка, Знач Валюта)
	
	Возврат ТекстЗаголовка + " (" + ?(ЗначениеЗаполнено(Валюта), Валюта, "<>") + ")"
	
КонецФункции

&НаКлиенте
Процедура РазделыДоговорПриИзменении(ТекущиеДанные)
	
	СтрукутраДанных = Новый Структура("ДоговорВзаиморасчетовНДС, ДоговорВзаиморасчетовПошлина, ВалютаПошлины, ВалютаНДС");
	ЗаполнитьЗначенияСвойств(СтрукутраДанных, ТекущиеДанные);
	ЗаполнитьДополнительныеКолонкиСтрокиРазделов(СтрукутраДанных);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрукутраДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Контрагент = ТекущийКонтрагент;
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияВопросаДоговорКонтрагентаПриИзмененииНаСервере();
		
	ТекущийКонтрагент = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзмененииНаСервере()
	
	НовыйДоговор = Документы.ГТДИмпорт.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента);

	Для Каждого Раздел Из Объект.Разделы Цикл
		
		Документы.ГТДИмпорт.ЗаполнитьДоговорыВСтрокеТабЧастиРазделов(НовыйДоговор, Раздел, Объект.ВалютаВзаиморасчетов, Объект.ВалютаДокумента);			
				
		// пересчитываем сумму по разделам
		РассчитатьПошлинуИНДСРаздела(Раздел);
		
	КонецЦикла;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Разделы.ТолькоПросмотр       = Ложь;
	Элементы.Разделы.ИзменятьСоставСтрок  = Ложь;
	Элементы.Разделы.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр       = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Распределить.Доступность    = Ложь;
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;

	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции
 
&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
		
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговора(Форма, Элемент)
	
	ПараметрыВыбора = Новый Массив;
		
	МассивВалют = Новый Массив;
	
	Объект = Форма.Объект;
	
	МассивВалют.Добавить(Объект.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		МассивВалют.Добавить(Объект.ВалютаВзаиморасчетов);
	КонецЕсли; 
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", МассивВалют);
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВедениеВзаиморасчетов", ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом"));
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(ЭлементТабличнаяЧасть, ИмяТабличнойЧасти, НомерРаздела)
	
	ФактурнаяСтоимость  = 0;
	ТаможеннаяСтоимость = 0;
	СуммаПошлины        = 0;
	СуммаПошлиныСпец    = 0;
	СуммаСбора          = 0;
	СуммаСбораВал       = 0;
	СуммаНДС            = 0;
	
	КоличествоСтрокРаздела = 0;
		
	СтрокиРаздела = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Если СтрокиРаздела <> Неопределено И СтрокиРаздела.Количество() > 0 Тогда
		КоличествоСтрокРаздела = СтрокиРаздела.Количество();
		Для Каждого ТекСтрока Из СтрокиРаздела Цикл
			ФактурнаяСтоимость  = ФактурнаяСтоимость + ТекСтрока.ФактурнаяСтоимость;
			ТаможеннаяСтоимость = ТаможеннаяСтоимость + ТекСтрока.ТаможеннаяСтоимость;
			СуммаПошлины        = СуммаПошлины + ТекСтрока.СуммаПошлины;
			СуммаПошлиныСпец    = СуммаПошлиныСпец + ТекСтрока.СуммаПошлиныСпец;
			СуммаСбора          = СуммаСбора + ТекСтрока.СуммаСбора;
			СуммаСбораВал       = СуммаСбораВал + ТекСтрока.СуммаСбораВал;
			СуммаНДС            = СуммаНДС + ТекСтрока.СуммаНДС;
		КонецЦикла; 		
	КонецЕсли; 
	
	Элементы[ИмяТабличнойЧасти + "ФактурнаяСтоимость"].ТекстПодвала  = ?(ФактурнаяСтоимость = 0, "", Формат(ФактурнаяСтоимость, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "ТаможеннаяСтоимость"].ТекстПодвала = ?(ТаможеннаяСтоимость = 0, "", Формат(ТаможеннаяСтоимость, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "СуммаПошлины"].ТекстПодвала        = ?(СуммаПошлины = 0, "", Формат(СуммаПошлины, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "СуммаПошлиныСпец"].ТекстПодвала    = ?(СуммаПошлиныСпец = 0, "", Формат(СуммаПошлиныСпец, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "СуммаСбора"].ТекстПодвала          = ?(СуммаСбора = 0, "", Формат(СуммаСбора, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "СуммаСбораВал"].ТекстПодвала       = ?(СуммаСбораВал = 0, "", Формат(СуммаСбораВал, "ЧЦ=15; ЧДЦ=2"));
	Элементы[ИмяТабличнойЧасти + "СуммаНДС"].ТекстПодвала            = ?(СуммаНДС = 0, "", Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2"));
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Элементы.ГруппаТМЗ.Заголовок = НСтр("ru = 'ТМЗ'") + ?(КоличествоСтрокРаздела > 0, " (" + КоличествоСтрокРаздела + ")", "");
	Иначе
		Элементы.ГруппаОС.Заголовок = НСтр("ru = 'ОС'") + ?(КоличествоСтрокРаздела > 0, " (" + КоличествоСтрокРаздела + ")", "");
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКодаТНВЭД(ИмяТабличнойЧасти);
	
	ТекущееЗначение = Элементы[ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипКодаГСВС", ПредопределенноеЗначение("Перечисление.ТипыКодовГСВС.ТНВЭД"));
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ТекущийКодТНВЭД"	  , ?(НЕ ЗначениеЗаполнено(ТекущееЗначение), Неопределено, СокрЛП(ТекущееЗначение)));
	
	ДопПараметры = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияОкнаВыбораКодаТНВЭД", ЭтаФорма, ДопПараметры);

	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Истина,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаВыбораКодаТНВЭД(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД = Результат.КодСтроки;
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.НоменклатураГСВС") Тогда
		Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные.КодТНВЭД = ПолучитьКодТНВЭД(Результат);
	Иначе
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФактурнаяСтоимость");
	СтруктураРеквизитов.Вставить("ТаможеннаяСтоимость");
	СтруктураРеквизитов.Вставить("СуммаПошлины");
	СтруктураРеквизитов.Вставить("СуммаСбора");
	СтруктураРеквизитов.Вставить("СуммаСбораВал");
	СтруктураРеквизитов.Вставить("СуммаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
	СтруктураРеквизитов.Вставить("НомерГТД");

	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураРеквизитов.Вставить("СтранаПроисхождения");
		СтруктураРеквизитов.Вставить("ВидНДС");
	КонецЕсли;
	
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиДокументаНаСервере(Параметры, ИмяТаблицы)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	ТаблицаОбработки.ЗаполнитьЗначения(Элементы[ИмяТаблицы].ОтборСтрок.НомерРаздела, "НомерРаздела");
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация, УчитыватьНДС, УчитыватьКПН, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТаблицы = "Товары" Тогда
		СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта);
		ИмяПоля = "Номенклатура";
	Иначе
		СоответствиеСведенийОНоменклатуре = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаСпискаОС(
			ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "ОсновноеСредство", Истина), ДанныеОбъекта);
		ИмяПоля = "ОсновноеСредство";
	КонецЕсли;     	
			
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрока" + ИмяТаблицы,
			Объект,
			СтрокаТабличнойЧасти);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			ИмяТаблицы + "." + ИмяПоля,
			Объект,
			СтрокаТабличнойЧасти);
		
		Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ГТДИмпорт,
			ПараметрыЗаполненияСчетовУчета.КЗаполнению,
			Объект,
			ИмяТаблицы,
			СтрокаТабличнойЧасти);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		
	КонецЦикла;
	
	Объект[ИмяТаблицы].Загрузить(ТаблицаОбработки);
			
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	ТаблицаДокумента = Объект[ИмяТабличнойЧасти].Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ТекущийРаздел"	, ТекущийРаздел);
	Запрос.УстановитьПараметр("ТаблицаОбработки", ТаблицаОбработки);
	
	ТекстЗапроса = "ВЫБРАТЬ 
	|	";
	
	ПерваяКолонка = Истина; 
	Для Сч = 1 По ТаблицаДокумента.Колонки.Количество() Цикл
		ИмяКолонки = ТаблицаДокумента.Колонки[Сч-1].Имя;
		Если ИмяКолонки <> "ИсходныйНомерСтроки" Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ПерваяКолонка, "", ", " ) + "
					|ТаблДокумента." + ИмяКолонки;
			ПерваяКолонка = Ложь;		
		КонецЕсли;			
	КонецЦикла;	
	
	ТекстЗапроса = ТекстЗапроса + "
	| 
    |ПОМЕСТИТЬ ВТ_ТаблицаДокумента 
	| 
	|ИЗ
	| 
   	|	&ТаблицаДокумента КАК ТаблДокумента
	| 
   	|ГДЕ
   	|	ТаблДокумента.НомерРаздела <> &ТекущийРаздел
	|
	|;
	|
	|ВЫБРАТЬ";
			
	ПерваяКолонка = Истина; 
	Для Сч = 1 По ТаблицаОбработки.Колонки.Количество() Цикл
		ИмяКолонки = ТаблицаОбработки.Колонки[Сч-1].Имя;
		Если ИмяКолонки <> "Пометка" 
			И ИмяКолонки <> "ИсходныйНомерСтроки" Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ПерваяКолонка, "", ", " ) + "
					|ТаблОбработки." + ИмяКолонки;
			ПерваяКолонка = Ложь;		
		КонецЕсли;			
	КонецЦикла;	
	ТекстЗапроса = ТекстЗапроса + "
	| 
    |ПОМЕСТИТЬ ВТ_ТаблицаОбработки 
	| 
	|ИЗ
	| 
   	|	&ТаблицаОбработки КАК ТаблОбработки
	|
	|;
	|
	|ВЫБРАТЬ * 
	|ИЗ 
	| 
	| 	ВТ_ТаблицаДокумента Как ТаблицаДокумента 
	| 
	|ОБЪЕДИНИТЬ ВСЕ 
	| 
	|ВЫБРАТЬ * 
	|ИЗ 
	| 
	| 	ВТ_ТаблицаОбработки Как ТаблицаОбработки"; 
			
			
	Запрос.Текст = ТекстЗапроса;
	Объект[ИмяТабличнойЧасти].Загрузить(Запрос.Выполнить().Выгрузить());
	
	УправлениеФормой(ЭтаФорма);         
		
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеТовараПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСпособПроисхожденияТовараПриИзменении(Элемент)
	
	Если Объект.Проведен И ВедетсяУчетПоТоварамОрганизацийБУ  Тогда
		МассивСтрокТоварыРаздела = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", Элементы.Разделы.ТекущиеДанные.НомерСтроки));
		НужноИнформивароние = Ложь;
		Для Каждого СтрокаРаздела ИЗ МассивСтрокТоварыРаздела Цикл
			Если ЗначениеЗаполнено(СтрокаРаздела.НомерГТД) Тогда
				НужноИнформивароние = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;  
		Если НужноИнформивароние Тогда    
			НомераГТДКлиент.КлючевоеПолеИсточникаПроисхожденияПриИзменении(Объект.Товары, Истина);
		КонецЕсли; 		
	КонецЕсли;

КонецПроцедуры

//Признак происхождения

&НаСервере
Процедура СформироватьСписокВыбораПризнакаПроисхождения()
	
	ПредставленияПризнаков = НомераГТДКлиентСервер.ПредставленияПризнаковПроисхождения();
	
	Элементы.ТоварыПризнакПроисхождения.РежимВыбораИзСписка = Истина;
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Очистить();
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("1", ПредставленияПризнаков[0]);
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("2", ПредставленияПризнаков[1]);
	Элементы.ТоварыПризнакПроисхождения.СписокВыбора.Добавить("5", ПредставленияПризнаков[4]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//устанавливаем условное оформление для реквизита Признак происхождения
	Для Каждого ЭлемСЗ Из Элементы.ТоварыПризнакПроисхождения.СписокВыбора Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		// оформляемое поле
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПризнакПроисхождения.Имя);
		// отбор
		ОтборУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПризнакПроисхождения");
		ОтборУО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборУО.ПравоеЗначение = ЭлемСЗ.Значение;
		// оформление
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ЭлемСЗ.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеПризнакаВоВсехСтроках(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ТабличнаяЧасть, ЗаполнятьВсе = Истина)
	
	ЭСФСервер.ЗаполнитьПустыеПризнакиПроисхождения(Объект, ТабличнаяЧасть, ЗаполнятьВсе);
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("НДСВидОборота");
	СписокСвойств.Добавить("НДСВидПоступления");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("КодТНВЭД");
	СписокСвойств.Добавить("СтранаПроисхождения");


	Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда		
		СписокСвойств.Добавить("НаименованиеТовара");      		
		СписокСвойств.Добавить("КоличествоМест"); 		
		СписокСвойств.Добавить("ДокументПартии");
		СписокСвойств.Добавить("НДССрокПлатежа");
		СписокСвойств.Добавить("ВидНДС");
		СписокСвойств.Добавить("ФактурнаяСтоимость");
		СписокСвойств.Добавить("ТаможеннаяСтоимость");
		СписокСвойств.Добавить("СуммаСбора");
		СписокСвойств.Добавить("СуммаСбораВал");
		СписокСвойств.Добавить("СуммаНДС");
	КонецЕсли;
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчетаБУ");
		СписокСвойств.Добавить("СчетУчетаНУ");

		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда			
			СписокСвойств.Добавить("СчетУчетаНДС");				
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
	
				
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение(,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьВсе(Команда)
	
	РаспределитьТаможенныйСбор();

	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	//	
	//Если ТекущиеДанные = Неопределено Тогда 
	//	ТекстСообщения = НСтр("ru='Не выбран раздел ГТД!'");
	//	Поле = "Разделы";
	//	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
	//	Возврат;
	//КонецЕсли;

	
	//СтруктураДанных = Новый Структура("ТаможеннаяСтоимость, СтавкаПошлины, СтавкаНДС, СуммаПошлины, СуммаНДС,
	//| ТаможенныйСбор, ТаможенныйСборВал, ДоговорВзаиморасчетовПошлина, ДоговорВзаиморасчетовНДС, 
	//| ДоговорВзаиморасчетовСбор, ДоговорВзаиморасчетовСборВал");
	//
	//ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);
	Для Каждого Раздел Из Объект.Разделы Цикл
		РаспределитьТаможеннуюСтоимость(Раздел.НомерСтроки);
		РаспределитьПошлиныСборНДС(Раздел.НомерСтроки);
	КонецЦикла;
	//ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.Товары, "Товары", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
	УстановитьЗначенияКолонокВПодвалеТабличнойЧасти(Элементы.ОС, "ОС", Элементы.Разделы.ТекущиеДанные.НомерСтроки);
	
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьТаможенныйСбор()
	
	Разделы = Объект.Разделы;
	ОбщаяСуммаТаможенногоСбора = 0;
	Если ЗначениеЗаполнено(Объект.ТаможенныйСбор) Тогда
		Если Разделы.Количество() > 0 Тогда
			
			ТаможенныйСборРаздела = Объект.ТаможенныйСбор / Разделы.Количество();
			Для Каждого ЭлементМассива Из Разделы Цикл
				
				ЭлементМассива.ТаможенныйСбор =  ТаможенныйСборРаздела;
				ОбщаяСуммаТаможенногоСбора = ОбщаяСуммаТаможенногоСбора + ЭлементМассива.ТаможенныйСбор;
				ЭлементМассива.СуммаНДС = РассчитатьСуммуНДСГТД(ЭлементМассива.ТаможеннаяСтоимость, ЭлементМассива.СуммаПошлины, ЭлементМассива.СуммаПошлиныСпец, 
				       ЭлементМассива.ДоговорВзаиморасчетовПошлина,	ЭлементМассива.ТаможенныйСбор, ЭлементМассива.ТаможенныйСборВал, 
				       ЭлементМассива.СтавкаНДС, ЭлементМассива.ДоговорВзаиморасчетовНДС, ЭлементМассива.НомерСтроки);

			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщаяСуммаТаможенногоСбора <> Объект.ТаможенныйСбор Тогда
		Разделы[Разделы.Количество()-1].ТаможенныйСбор = Разделы[Разделы.Количество()-1].ТаможенныйСбор - ОбщаяСуммаТаможенногоСбора + Объект.ТаможенныйСбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтраженияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовСУчетомВариантовОтражения(ЭтотОбъект);
	ЗаполнитьСчетаУчетаРасчетовСУчетомВариантовОтражения();	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовСУчетомВариантовОтражения(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВариантОтражения > 0 Тогда
		
		Элементы.ГруппаСчетаУчетаРасчетовСБюджетом.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
		Элементы.ГруппаВидовНалогов.Видимость                = Истина;
		Элементы.ГруппаСчетаУчетаРасчетов.Видимость          = Ложь;
		Элементы.ГруппаНДС.Видимость                         = Ложь;
		Элементы.ГруппаНДСПриИмпорте.Видимость               = Истина;
		Элементы.СчетУчетаНДСПоРеализацииПоИмпорту.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
		
	Иначе
		
		Элементы.ГруппаСчетаУчетаРасчетовСБюджетом.Видимость = Ложь;
		Элементы.ГруппаВидовНалогов.Видимость 				 = Ложь;
		Элементы.ГруппаСчетаУчетаРасчетов.Видимость 	     = Форма.ПоказыватьВДокументахСчетаУчета;
		Элементы.ГруппаНДС.Видимость 						 = Форма.ПоказыватьВДокументахСчетаУчета;
		Элементы.ГруппаНДСПриИмпорте.Видимость 	    	     = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаРасчетовСУчетомВариантовОтражения()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВариантОтражения");
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВариантОтражения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяСтоимостьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОСТаможеннаяСтоимостьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТоварам(Команда)
	ВычислимСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДетализацияИмпортаГТД()
	
	ВыделенныеСтроки = Элементы.Разделы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите только один раздел для детализации.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	НомерСтроки = ТекущиеДанные.НомерСтроки;
		
	СтруктураДляДетализИмпорта = Новый Структура;
	СтруктураДляДетализИмпорта.Вставить("ДокументСсылка",Параметры.Ключ);
	СтруктураДляДетализИмпорта.Вставить("НомерСтроки"	,НомерСтроки);
	
	ВСКлиент.ВыполнитьКомандуСоздатьЭДВС(СтруктураДляДетализИмпорта);	

КонецПроцедуры

&НаКлиенте
Процедура ДетализацияИмпортаГТД(Команда) 
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для детализации.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для детализации необходимо записать документ.'"));
	ИначеЕсли Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ был изменен. Для детализации необходимо записать документ.'"));
	Иначе		
		ВыполнитьДетализацияИмпортаГТД();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Дополнительно(Команда)
	
	СтруктураДопПараметров = Новый Структура;
	
	СтруктураДопПараметров.Вставить("ВидВходящегоДокумента",	Объект.ВидВходящегоДокумента);
	СтруктураДопПараметров.Вставить("ДатаВходящегоДокумента",	Объект.ДатаВходящегоДокумента);
	СтруктураДопПараметров.Вставить("НомерВходящегоДокумента",	Объект.НомерВходящегоДокумента);
	СтруктураДопПараметров.Вставить("Комментарий",				Объект.Комментарий);
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(ЭтаФорма, "ГТДИмпорт",СтруктураДопПараметров)
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыГруппаСчета");
	
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОСГруппаСчета");
	
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентомВал");
	ЭлементыСчетов.Добавить("СчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("СчетУчетаНДСПоРеализацииПоИмпорту");
	ЭлементыСчетов.Добавить("СчетУчетаСБюджетом");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ГТДИмпорт",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомВал");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДСПоРеализации");
	КонецЕсли;
	
	// НоваяСтрокаОС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаОС") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.ВидНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ВидНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;
	
	// ВариантОтражения
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВариантОтражения") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомВал");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомВал");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомВал");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ВидНДС");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// ОС.ОсновноеСредство
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВариантОтражения
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВариантОтражения") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВариантОтражения");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомВал");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВариантОтражения");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомВал");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВариантОтражения");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомВал");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			ПараметрыЗаполнения.Заполнять = Истина;
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидНДС");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
		КонецЕсли;

		// ОС.ОсновноеСредство
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РазделыСуммаПошлиныСпецПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаСервере
Функция ПолучитьКодТНВЭД(НомеклатураГСВС)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомеклатураГСВС, "КодГСВС");
	
КонецФункции
