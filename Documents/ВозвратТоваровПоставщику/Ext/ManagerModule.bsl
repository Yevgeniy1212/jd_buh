#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоВозвратам", "РасчетыСПоставщикомПоВозвратам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетОтнесенияСебестоимостиБУ", "СебестоимостьРеализации");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетОтнесенияСебестоимостиНУ", "СебестоимостьРеализацииНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоОтнесенияСебестоимостиБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоОтнесенияСебестоимостиБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоОтнесенияСебестоимостиНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоОтнесенияСебестоимостиБУ3");
	
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "ЗапасыКромеПринятыхВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыЗаказчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ",      "ЗапасыКромеПринятыхВПереработкуНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыЗаказчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ",      "МатериалыПринятыеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "МатериалыЗаказчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыЗаказчика");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота",   "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыЗаказчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления",   "ВидПоступленияНДС_ВозвратТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыЗаказчика");
	
	// Табличная часть Услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратБУ", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1",        "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2",        "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3",        "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетУчетаНДС",   "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "НДСВидПоступления", "ВидПоступленияНДС_ВозвратТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатратНУ", "ЗатратыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3", "СубконтоЗатратБУ3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СубконтоЗатратБУ3");
	
	// Табличная часть ОсновныеСредства
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаБУ", "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНУ", "ОсновныеСредстваНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДС", "ПредъявленныйНДС_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидПоступления", "ВидПоступленияНДС_ВозвратТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОсновныеСредства");
	
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "МатериалыЗаказчика", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов",  "ВидОперации, ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МатериалыЗаказчика") Тогда
		
		ДанныеЗаполнения.МатериалыЗаказчика = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Тогда
		
		ОсобенностиДокумента = ОсобенностиУчетаРасчетов(ДанныеЗаполнения.ВидОперации, ДанныеЗаполнения.ДоговорКонтрагента);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ОсновныеСредства") Тогда
		
		ДанныеЗаполнения.ОсновныеСредства = (ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОсобенностиУчетаРасчетов(ВидОперации, ДоговорКонтрагента) Экспорт
	
	ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Возврат ОсобенностиДокумента;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	КолонкаНоменклатура = ?(ИмяТабличнойЧасти = "ОС", "ОсновноеСредство", "Номенклатура");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(
				ДанныеОбъекта.Организация, СтрокаТабличнойЧасти[КолонкаНоменклатура], ДанныеОбъекта.Дата);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	Иначе
		
		СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, КолонкаНоменклатура, Истина), ДанныеОбъекта.Дата);
			
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[КолонкаНоменклатура]);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации  = ДанныеОбъекта.ВидОперации;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И (ИмяТабличнойЧасти = "ОС" ИЛИ ИмяТабличнойЧасти = "Услуги") Тогда
		Возврат;	
	КонецЕсли;

	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		Если НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// для вида операции "Из переработки" таб. часть "Услуги" и "ОС"не заполняется
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаДавСырья) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья;
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Если ИмяТабличнойЧасти = "Услуги" Тогда
			Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
				Если СтрокаТабличнойЧасти.СчетЗатратБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
			КонецЕсли;
			Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
				Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
					Для Счетчик = 1 По 3 Цикл
						СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
					КонецЦикла;
				КонецЕсли;
				СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
					СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
				КонецЕсли; 
				
			КонецЕсли;
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда 
				Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
					СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;					
				КонецЕсли;     				
			Иначе 
				СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетаУчета.СчетУчетаБУ));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда
				СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь(), Истина);

КонецПроцедуры

// Заполняет счета расчетов с контрагентом в документе
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратов;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("Склад");
		БлокируемыеРеквизиты.Добавить("Сделка");
		БлокируемыеРеквизиты.Добавить("СтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Сумма");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыГруппаЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСГруппаЗаполнить, ОСПодборОС, ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; УслугиГруппаЗаполнить, УслугиПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьДокументПоСчетФактураПолученный(Объект, Основание) Экспорт
	
	Если Основание.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  
	
	Объект.Дата = Основание.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка;
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.ОС.Очистить();

	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание);
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
		УчестьСуммуНДС = Истина;
	Иначе
		УчестьСуммуНДС = Ложь;
	КонецЕсли;
		
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если УчестьСуммуНДС Тогда
			СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
		КонецЕсли;
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
	Объект.ДокументОснование = Основание;
	
КонецПроцедуры

// Процедура выполняет заполниение табличной части по поступлению ТМЗ.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьПоПоступлениюТоваров(Объект, Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, ВидОперации, СуммаВключаетНДС, ВалютаДокумента, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	// Заполним вид операции
	Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Объект.ВидОперации          = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
		Объект.УчитыватьНДС         = Ложь;
		Объект.НДСВключенВСтоимость = Ложь;
		Объект.СуммаВключаетНДС     = Ложь;	
	Иначе
		Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка;
	КонецЕсли;
	
	Если Основание.Проведен Тогда
		
		ДанныеДляРасчета = Новый Структура("Курс, Кратность, КурсОсн, КратностьОсн");
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ДанныеДляРасчета.Курс         = ОбщегоНазначенияБК.КурсДокумента(Объект,    ВалютаРегламентированногоУчета);
		ДанныеДляРасчета.КурсОсн      = ОбщегоНазначенияБК.КурсДокумента(Основание, ВалютаРегламентированногоУчета);
		ДанныеДляРасчета.Кратность    = ОбщегоНазначенияБК.КратностьДокумента(Объект,    ВалютаРегламентированногоУчета);
		ДанныеДляРасчета.КратностьОсн = ОбщегоНазначенияБК.КратностьДокумента(Основание, ВалютаРегламентированногоУчета);
		
		ЗаполнитьТабличнуюЧастьПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание, "Товары");
		ЗаполнитьТабличнуюЧастьПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание, "Услуги");
		ЗаполнитьТабличнуюЧастьПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание, "ОС");
		
		ЗаполнитьУчастникиСовместнойДеятельностиПоОснованию(Объект, Основание);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
			
	Объект.ДокументОснование = Основание;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание, ИмяТаблицы, Режим = "Заполнить") Экспорт
	
	Если ИмяТаблицы = "Товары" Тогда
		ТаблицаЗначенийОснования = ПолучитьТоварыПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание);
		
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ТаблицаЗначенийОснования = ПолучитьУслугиПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание);
		
	ИначеЕсли ИмяТаблицы = "ОС" Тогда
		ТаблицаЗначенийОснования = ПолучитьОСПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если Режим = "Заполнить" Тогда
		Объект[ИмяТаблицы].Очистить();
	КонецЕсли;
	
	Если ТаблицаЗначенийОснования.Количество() > 0 Тогда
		
		Если Режим = "Заполнить" Тогда
			Объект[ИмяТаблицы].Загрузить(ТаблицаЗначенийОснования);
			
		ИначеЕсли Режим = "Добавить" И (ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "Услуги") Тогда
			
			Для Каждого СтрокаТовара Из ТаблицаЗначенийОснования Цикл
				
				// Ищем выбранную позицию в таблице подобранной номенклатуры.
				// Если найдем - увеличим количество; не найдем - добавим новую строку.
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
				Если ИмяТаблицы = "Товары" Тогда
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
					СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
				КонецЕсли;

				СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					// Нашли, увеличиваем количество в первой найденной строке.
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
					
				Иначе
					// Не нашли - добавляем новую строку.
					СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТоварыПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание) Экспорт
	
	ТаблицаЗначенийТовары = Объект.Товары.Выгрузить().СкопироватьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  Основание);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	               |	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	               |	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	               |	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	               |	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	               |	ПоступлениеТоваровУслугТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	ПоступлениеТоваровУслугТовары.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	ПоступлениеТоваровУслугТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	               |	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоступлениеТоваровУслугТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ТаблицаЗначенийТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, СтавкаНДС, Цена, СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС, НомерГТД");
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
										  ДанныеДляРасчета.КурсОсн, ДанныеДляРасчета.Курс, ДанныеДляРасчета.КратностьОсн, ДанныеДляРасчета.Кратность);
										  
		СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										  ДанныеОбъекта.УчитыватьНДС, ДанныеОбъекта.СуммаВключаетНДС,
										  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма,
			|СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ, Всего");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийТовары;

КонецФункции

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Функция ПолучитьУслугиПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание) Экспорт
	
	ТаблицаЗначенийУслуги = Объект.Услуги.Выгрузить().СкопироватьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  Основание);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента,
	|	Номенклатура,
	|	Содержание,
	|	Количество,
	|	Цена,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СчетЗатратБУ,
	|	СубконтоЗатратБУ1,
	|	СубконтоЗатратБУ2,
	|	СубконтоЗатратБУ3,
	|	СчетЗатратНУ,
	|	СубконтоЗатратНУ1,
	|	СубконтоЗатратНУ2,
	|	СубконтоЗатратНУ3,
	|	СчетУчетаНДС,
	|	Ссылка.СуммаВключаетНДС,
	|	Ссылка.УчитыватьНДС,
	|	Ссылка.НДСВключенВСтоимость
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗначенийУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "Номенклатура, Содержание, Количество, СтавкаНДС, Цена, СчетЗатратБУ, СчетЗатратНУ, СчетУчетаНДС, 
																 |СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
										  ДанныеДляРасчета.КурсОсн, ДанныеДляРасчета.Курс, ДанныеДляРасчета.КратностьОсн, ДанныеДляРасчета.Кратность);
										  
		СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										  ДанныеОбъекта.УчитыватьНДС, ДанныеОбъекта.СуммаВключаетНДС,
										  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
			|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
			|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
			|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, Всего,
			|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
			|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
			|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
			|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийУслуги;

КонецФункции

Функция ПолучитьОСПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, Основание) Экспорт
	
	ТаблицаЗначенийОС = Объект.ОС.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОС.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОС.ОсновноеСредство,
	|	ПоступлениеТоваровУслугОС.Сумма,
	|	ПоступлениеТоваровУслугОС.СтавкаНДС,
	|	ПоступлениеТоваровУслугОС.СуммаНДС,
	|	ПоступлениеТоваровУслугОС.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугОС.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугОС.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугОС.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОС.Ссылка.УчитыватьНДС,
	|	ПоступлениеТоваровУслугОС.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугОС.ПодразделениеОрганизации,
	|	ПоступлениеТоваровУслугОС.МОЛОрганизации
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
	|ГДЕ
	|	ПоступлениеТоваровУслугОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугОС.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	// видимость местонахождения ОС
	ЗаполнятьПодразделенияОС = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(ДанныеОбъекта.Дата);
	ЗаполнятьМОЛОС 			 = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(ДанныеОбъекта.Дата);

	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗначенийОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "ОсновноеСредство, СтавкаНДС, Сумма, СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС");
		
		Если ЗаполнятьПодразделенияОС Тогда 
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		
		Если ЗаполнятьМОЛОС Тогда
			СтрокаТабличнойЧасти.МОЛОрганизации = Выборка.МОЛОрганизации;
		КонецЕсли;
		
		Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Выборка.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
										  ДанныеДляРасчета.КурсОсн, ДанныеДляРасчета.Курс, ДанныеДляРасчета.КратностьОсн, ДанныеДляРасчета.Кратность);
										  
		СтрокаТабличнойЧасти.Сумма = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма,
										  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										  ДанныеОбъекта.УчитыватьНДС, ДанныеОбъекта.СуммаВключаетНДС,
										  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
										  
		ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, 
											|НДСВидПоступления, СчетУчетаНУ, ПодразделениеОрганизации, МОЛОрганизации, Всего");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийОС;
	
КонецФункции

Процедура ЗаполнитьУчастникиСовместнойДеятельностиПоОснованию(Объект, Основание) Экспорт
	
	УчастникиСовместнойДеятельностиОбъект    = Объект.УчастникиСовместнойДеятельности;
	УчастникиСовместнойДеятельностиОснование = Основание.УчастникиСовместнойДеятельности;
	
	УчастникиСовместнойДеятельностиОбъект.Загрузить(УчастникиСовместнойДеятельностиОснование.Выгрузить());
		
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоОстаткамНаСчете(Объект, ДанныеДляРасчета, ТабличнаяЧасть) Экспорт
	
	СчетМатериалыВПереработке = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",  Объект.Контрагент);
	Запрос.УстановитьПараметр("Счет",        СчетМатериалыВПереработке);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто2 КАК Номенклатура,
	               |	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество,
				   |	СУММА(ТиповойОстатки.СуммаОстаток) КАК Сумма,
	               |	ТиповойОстатки.Счет
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет = &Счет, , Организация = &Организация) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1 = &Контрагент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Счет";
	 
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстСообщения  = НСтр("ru = 'На счете ""%1"" - ""%2""  нет остатков.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, СчетМатериалыВПереработке.Код, СчетМатериалыВПереработке.Наименование);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
	Иначе
		Выборка = Результат.Выбрать();
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
		Пока Выборка.Следующий() Цикл

			Если  Выборка.Счет.уровень() > 1 ИЛИ Выборка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Коэффициент  = 1;
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			СтрокаТабличнойЧасти.Цена         = Окр(Выборка.Сумма/Выборка.Количество,2);
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
				// Пересчитаем цену 
				СтрокаТабличнойЧасти.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
												СтрокаТабличнойЧасти.Цена, РеквизитыДоговора.ВалютаВзаиморасчетов,
												ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),
												1, ДанныеДляРасчета.Курс, 1, ДанныеДляРасчета.Кратность);
			
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

			Иначе
				СтрокаТабличнойЧасти.Сумма = Выборка.Сумма;
				
			КонецЕсли;                                            		
			
			СтрокаТабличнойЧасти.СчетУчетаБУ = Выборка.Счет;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьОСДляСписка(Объект) Экспорт
	
	ТаблицаЗначенийОС = ОпределитьСтоимостьПоСпискуОСДокумента(Объект, Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	
	Если ТаблицаЗначенийОС.Количество() > 0 Тогда
		
		Для Каждого СтрокаОС Из Объект.ОС Цикл
			
			СтрокаТЗ = ТаблицаЗначенийОС.Найти(СтрокаОС.ОсновноеСредство, "ОС_БУ");
			
			Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета) Тогда
				
				Если СтрокаТЗ = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> не отражалось в учете по указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство, СтрокаОС.ОсновноеСредство.Код);
					Поле = "ОС[" + (СтрокаОС.НомерСтроки - 1) + "].ОсновноеСредство";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
					
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> снято с учета в указанной организации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство, СтрокаОС.ОсновноеСредство.Код);
					Поле = "ОС[" + (СтрокаОС.НомерСтроки - 1) + "].ОсновноеСредство";
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
					
				КонецЕсли;
				
				СтрокаОС.Сумма = 0;
				
			Иначе
				
				Если СтрокаТЗ.ПервоначальнаяСтоимость <> 0 Тогда 
					СтрокаОС.Сумма = СтрокаТЗ.ПервоначальнаяСтоимость;
				Иначе
					СтрокаОС.Сумма = СтрокаТЗ.СтоимостьБУ;
				КонецЕсли;
				
				ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, 
													|НДСВидПоступления, СчетУчетаНУ, ПодразделениеОрганизации, МОЛОрганизации, Всего");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаОС);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, Объект);	
				ЗаполнитьЗначенияСвойств(СтрокаОС, ДанныеСтрокиТаблицы);
				
				ЗаполнитьРеквизитыНалоговогоУчета(Объект, СтрокаОС, "ОС");
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Данные для заполнения стоимости ОС отсутствуют.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
	КонецЕсли; 
    	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьОСПоНаименованию(Объект, ОсновноеСредство) Экспорт
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Другие элементы справочника с наименованием <%1> в справочнике ""Основные средства"" отсутствуют.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОсновноеСредствоНаименование);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 	
	
КонецПроцедуры

Функция ОпределитьСтоимостьПоСпискуОСДокумента(Объект, СписокОС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("СписокОС",      СписокОС);
	Запрос.УстановитьПараметр("НачалоПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ЭтотДокумент",  Объект.Ссылка);											   
  	Запрос.УстановитьПараметр("СубконтоОС",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
		УсловиеСтруктурноеПодразделение1= " И СостоянияОСОрганизацииСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе 
		УсловиеСтруктурноеПодразделение = "";
		УсловиеСтруктурноеПодразделение1= "";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
		|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
		|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ОС КАК ОС_БУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация" + УсловиеСтруктурноеПодразделение + "И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
		|		ПО ОС_БУ.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И ОС_БУ.СчетУчетаБУ = СтоимостьОС_БУ.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация"+ УсловиеСтруктурноеПодразделение + " И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
		|		
		|		ГДЕ 
		|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &НачалоПериода И
		|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация " + УсловиеСтруктурноеПодразделение1+ "
		|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В (&СписокОС) И
		|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
		|		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
		|		ГДЕ ОС_БУ.Ссылка = &ЭтотДокумент";
		
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапросаТаблица;

КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	МассивСсылокНаОснования = Новый Массив;
	Для Каждого ТекущийДокументОснование Из ДокументСсылка.Метаданные().ВводитсяНаОсновании Цикл
		МассивСсылокНаОснования.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийДокументОснование.ПолноеИмя()).ПустаяСсылка());
	КонецЦикла;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Возврат ТМЗ'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("ПустыеСсылкиОснований", МассивСсылокНаОснования);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоПодразделениям",   УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период));
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоМОЛ",              УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период));
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст  = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль 
														И Реквизиты.УчитыватьКПН 
														И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) 
														И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаРаботыСоСтруктурнымиПодразделениями    = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаРаботыСоСтруктурнымиПодразделениями   , "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом",   ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	Налогоплательщик = Реквизиты.Организация;

	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
								Реквизиты.СтруктурноеПодразделение,
								Реквизиты.Организация,
								Перечисления.РазделыНалоговогоУчета.НДС);
																	
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик",		 Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом  , "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 					  , "Налогоплательщик");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаВозвратТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	                + ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСобытияОСОрганизацийТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСоставОСТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСостоянияОСТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаЗемельногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТранспортногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Запрос.УстановитьПараметр("СинонимТовары",	           НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимУслуги",	           НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("СинонимОС",	               НСтр("ru = 'ОС'"));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС",      НСтр("ru = 'Возврат суммы НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеЗачетАванса",     НСтр("ru = 'Зачет неоплаченной части'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("Дата",     				   Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",     		   Реквизиты.Организация);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомНУ", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом));
		
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;

	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьОС,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация ЕСТЬ NULL
	|				ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Сделка КАК Сделка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.УчастникСРП, НЕОПРЕДЕЛЕНО) КАК ПризнакУчастникСРП,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам КАК СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ(Реквизиты.ДокументОснование = НЕОПРЕДЕЛЕНО
	|					ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.ДокументОснование) = ТИП(Документ.СчетФактураВыданный)
	|					ИЛИ Реквизиты.ДокументОснование В (&ПустыеСсылкиОснований))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОтгрузки,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанСчетВозвратов,
	|	Реквизиты.СчетОтнесенияСебестоимостиБУ КАК СчетЗатратБУ,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиБУ1 КАК СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиБУ2 КАК СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиБУ3 КАК СубконтоЗатратБУ3,
	|	Реквизиты.СчетОтнесенияСебестоимостиНУ КАК СчетЗатратНУ,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиНУ1 КАК СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиНУ2 КАК СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоОтнесенияСебестоимостиНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ВидВходящегоДокумента КАК ВидВходящегоДокумента,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету КАК ОтложитьПринятиеНДСКЗачету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Реквизиты.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности КАК ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ПризнакУчастникСРП КАК ПризнакУчастникСРП,
	|	Реквизиты.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоВозвратам КАК СчетУчетаРасчетовПоВозвратам,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ДокументОснование КАК ДокументОтгрузки,
	|	Реквизиты.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	Реквизиты.УказанСчетВозвратов КАК УказанСчетВозвратов,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
	|	Реквизиты.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
	|	Реквизиты.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.Содержание КАК Содержание,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ВЫБОР
	|		КОГДА НЕ СоставДокумента.ЕстьУслуги ЕСТЬ NULL
	|				И Реквизиты.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
	|			ТОГДА СоставДокумента.ЕстьУслуги
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьУслуги,
	|	ВЫБОР
	|		КОГДА НЕ СоставДокумента.ЕстьОС ЕСТЬ NULL
	|				И Реквизиты.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
	|			ТОГДА СоставДокумента.ЕстьОС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ВидВходящегоДокумента КАК ВидВходящегоДокумента,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету КАК ОтложитьПринятиеНДСКЗачету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаУслуги.НДСВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Услуги КАК ТаблицаУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	1 КАК Количество,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитическийУчетОСПоПодразделениям
		|			ТОГДА ТаблицаОС.ПодразделениеОрганизации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитическийУчетОСПоМОЛ
		|			ТОГДА ТаблицаОС.МОЛОрганизации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК МОЛОрганизации
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты);
	КонецЕсли;
	Если Реквизиты.ЕстьОС Тогда
		СуммыТаблицыОС = Результат[НомераТаблиц["СуммыТаблицыОС"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыОС, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыОС", СуммыТаблицыОС);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаОС", "ПОМЕСТИТЬ ВременнаяТаблицаОС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.Ссылка = &Ссылка", "ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыОС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки,
		|	ВременнаяТаблицаОС.СтавкаНДС,
		|	ВременнаяТаблицаОС.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаОС.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаОС.Сумма,
		|	ВременнаяТаблицаОС.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма КАК Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.НДСВидОборота,
	|	ВременнаяТаблицаТовары.НДСВидПоступления,
	|	ВременнаяТаблицаТовары.НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Количество,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.Сумма КАК Сумма,
	|	СуммыТаблицыУслуги.СуммаНДС,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДС,
	|	ВременнаяТаблицаУслуги.НДСВидОборота,
	|	ВременнаяТаблицаУслуги.НДСВидПоступления,
	|	ВременнаяТаблицаУслуги.СчетЗатратБУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаУслуги.СчетЗатратНУ,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаУслуги.СубконтоЗатратНУ3
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыОС.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыОС
	|ИЗ
	|	&СуммыТаблицыОС КАК СуммыТаблицыОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОС.Ссылка,
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.ОсновноеСредство,
	|	ВременнаяТаблицаОС.Количество,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма КАК Сумма,
	|	СуммыТаблицыОС.СуммаНДС,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаНДС,
	|	ВременнаяТаблицаОС.НДСВидОборота,
	|	ВременнаяТаблицаОС.НДСВидПоступления,
	|	ВременнаяТаблицаОС.СчетУчетаБУ,
	|	ВременнаяТаблицаОС.СчетУчетаНУ,
	|	ВременнаяТаблицаОС.ПодразделениеОрганизации,
	|	ВременнаяТаблицаОС.МОЛОрганизации
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыОС КАК СуммыТаблицыОС
	|		ПО ВременнаяТаблицаОС.НомерСтроки = СуммыТаблицыОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчетаБУЗабалансовый
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.СтруктурноеПодразделение 
		|	КОНЕЦ КАК КорСтруктурноеПодразделение,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанДокументОтгрузки
		|			ТОГДА Реквизиты.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОприходования,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВал,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
		|			ИЛИ ТаблицаТовары.СчетУчетаБУЗабалансовый
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
		|		КОГДА Реквизиты.УказанСчетВозвратов 
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК КорСчетСписанияБУ,
		|	Реквизиты.Контрагент КАК КорСубконтоБУ1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконтоБУ2,
		|	Реквизиты.Ссылка КАК КорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	ВЫБОР 
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
		|		ИНАЧЕ &СчетУчетаРасчетовСКонтрагентомНУ 
		|	КОНЕЦ КАК КорСчетСписанияНУ,
		|	Реквизиты.Контрагент КАК КорСубконтоНУ1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконтоНУ2,
		|	Реквизиты.Ссылка КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	&СодержаниеСписаныТМЗ КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВозвратТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги И НЕ Реквизиты.ЕстьОС ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда 
		ПараметрыПроведения.Вставить("ВозвратТоваровТаблицаДокумента", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаВозвратТоваров", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратТоваровТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ИмяСписка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Стоимость,
	|	НЕОПРЕДЕЛЕНО КАК СтоимостьНУ,
	|	НЕОПРЕДЕЛЕНО КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СуммаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СуммаНДСВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаБУ,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНУ,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетДоходовНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратБУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратБУ3,
	|	НЕОПРЕДЕЛЕНО КАК СчетЗатратНУ,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоЗатратНУ3,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК МОЛОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	|	НЕОПРЕДЕЛЕНО КАК ВедетсяАналитическийУчетОСПоМОЛ,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоОС
	|ПОМЕСТИТЬ ВременнаяТаблицаВозвратТоваров
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары И НЕ Реквизиты.УказанСчетВозвратов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	0 КАК СтоимостьНУ,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ КАК СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
		|	Реквизиты.СчетЗатратБУ КАК СчетДоходовБУ,
		|	Реквизиты.СубконтоЗатратБУ1 КАК СубконтоДоходовБУ1,
		|	Реквизиты.СубконтоЗатратБУ2 КАК СубконтоДоходовБУ2,
		|	Реквизиты.СубконтоЗатратБУ3 КАК СубконтоДоходовБУ3,
		|	Реквизиты.СчетЗатратНУ КАК СчетДоходовНУ,
		|	Реквизиты.СубконтоЗатратНУ1 КАК СубконтоДоходовНУ1,
		|	Реквизиты.СубконтоЗатратНУ2 КАК СубконтоДоходовНУ2,
		|	Реквизиты.СубконтоЗатратНУ3 КАК СубконтоДоходовНУ3,
		|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
		|	Реквизиты.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
		|	Реквизиты.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
		|	Реквизиты.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
		|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
		|	Реквизиты.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
		|	Реквизиты.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
		|	Реквизиты.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ТаблицаТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	НЕОПРЕДЕЛЕНО КАК ПодразделениеОрганизации,
		|	НЕОПРЕДЕЛЕНО КАК МОЛОрганизации,
		|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоПодразделениям,
		|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоМОЛ,
		|	ЛОЖЬ КАК ЭтоУслуга,
		|	ЛОЖЬ КАК ЭтоОС
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	0 КАК СтоимостьНУ,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетУчетаБУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка) КАК СчетУчетаНУ,
		|	ТаблицаУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаУслуги.СчетЗатратБУ КАК СчетДоходовБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1 КАК СубконтоДоходовБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2 КАК СубконтоДоходовБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3 КАК СубконтоДоходовБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ КАК СчетДоходовНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1 КАК СубконтоДоходовНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2 КАК СубконтоДоходовНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3 КАК СубконтоДоходовНУ3,
		|	ТаблицаУслуги.СчетЗатратБУ,
		|	ТаблицаУслуги.СубконтоЗатратБУ1,
		|	ТаблицаУслуги.СубконтоЗатратБУ2,
		|	ТаблицаУслуги.СубконтоЗатратБУ3,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.СубконтоЗатратНУ1,
		|	ТаблицаУслуги.СубконтоЗатратНУ2,
		|	ТаблицаУслуги.СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа,
		|	НЕОПРЕДЕЛЕНО КАК ПодразделениеОрганизации,
		|	НЕОПРЕДЕЛЕНО КАК МОЛОрганизации,
		|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоПодразделениям,
		|	ЛОЖЬ КАК ВедетсяАналитическийУчетОСПоМОЛ,
		|	ИСТИНА КАК ЭтоУслуга,
		|	ЛОЖЬ КАК ЭтоОС
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяСписка,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК Номенклатура,
		|	1 КАК Количество,
		|	0 КАК Стоимость,
		|	0 КАК СтоимостьНУ,
		|	ТаблицаОС.Сумма КАК Сумма,
		|	ТаблицаОС.СуммаНДС КАК СуммаНДС,
		|	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ КАК СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаОС.СчетУчетаБУ КАК СчетДоходовБУ,
		|	ТаблицаОС.ОсновноеСредство КАК СубконтоДоходовБУ1,
		|	ТаблицаОС.ПодразделениеОрганизации КАК СубконтоДоходовБУ2,
		|	ТаблицаОС.МОЛОрганизации КАК СубконтоДоходовБУ3,
		|	ТаблицаОС.СчетУчетаНУ КАК СчетДоходовНУ,
		|	ТаблицаОС.ОсновноеСредство КАК СубконтоДоходовНУ1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Поступление) КАК СубконтоДоходовНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДоходовНУ3,
		|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
		|	Реквизиты.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
		|	Реквизиты.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
		|	Реквизиты.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
		|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
		|	Реквизиты.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
		|	Реквизиты.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
		|	Реквизиты.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа,
		|	ТаблицаОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации КАК МОЛОрганизации,
		|	&ВедетсяАналитическийУчетОСПоПодразделениям КАК ВедетсяАналитическийУчетОСПоПодразделениям,
		|	&ВедетсяАналитическийУчетОСПоМОЛ КАК ВедетсяАналитическийУчетОСПоМОЛ,
		|	ЛОЖЬ КАК ЭтоУслуга,
		|	ИСТИНА КАК ЭтоОС
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаВозвратТоваров.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаВозвратТоваров.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаВозвратТоваров.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаВозвратТоваров.Количество КАК Количество,
	|	ВременнаяТаблицаВозвратТоваров.Стоимость КАК Стоимость,
	|	ВременнаяТаблицаВозвратТоваров.СтоимостьНУ КАК СтоимостьНУ,
	|	ВременнаяТаблицаВозвратТоваров.Сумма КАК Сумма,
	|	ВременнаяТаблицаВозвратТоваров.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаВозвратТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаВозвратТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВременнаяТаблицаВозвратТоваров.СчетУчетаБУ КАК СчетУчета,
	|	ВременнаяТаблицаВозвратТоваров.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ВременнаяТаблицаВозвратТоваров.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаВозвратТоваров.Партия КАК Партия,
	|	ВременнаяТаблицаВозвратТоваров.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаВозвратТоваров.ЭтоОС КАК ЭтоОС,
	|	ВременнаяТаблицаВозвратТоваров.СчетДоходовБУ КАК СчетДоходовБУ,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	|	ВременнаяТаблицаВозвратТоваров.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	|	ВременнаяТаблицаВозвратТоваров.СчетЗатратБУ КАК СчетЗатратБУ,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	|	ВременнаяТаблицаВозвратТоваров.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратНУ1 КАК СубконтоЗатратНУ1,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратНУ2 КАК СубконтоЗатратНУ2,
	|	ВременнаяТаблицаВозвратТоваров.СубконтоЗатратНУ3 КАК СубконтоЗатратНУ3,
	|	ВременнаяТаблицаВозвратТоваров.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВременнаяТаблицаВозвратТоваров.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВременнаяТаблицаВозвратТоваров.МОЛОрганизации КАК МОЛОрганизации,
	|	ВременнаяТаблицаВозвратТоваров.ВедетсяАналитическийУчетОСПоПодразделениям КАК ВедетсяАналитическийУчетОСПоПодразделениям,
	|	ВременнаяТаблицаВозвратТоваров.ВедетсяАналитическийУчетОСПоМОЛ КАК ВедетсяАналитическийУчетОСПоМОЛ,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка) КАК КорСчетНУ,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК КорСубконтоНУ1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконтоНУ2,
	|	Реквизиты.Ссылка КАК КорСубконтоНУ3
	|ИЗ
	|	ВременнаяТаблицаВозвратТоваров КАК ВременнаяТаблицаВозвратТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда 
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК СуммаРегл,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.СуммаНДСВзаиморасчетов,
		|		ТаблицаТовары.Сумма КАК Сумма,
		|		ТаблицаТовары.СуммаНДС
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаУслуги.СуммаВзаиморасчетов,
		|		ТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|		ТаблицаУслуги.Сумма,
		|		ТаблицаУслуги.СуммаНДС
		|	ИЗ
		|		ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаОС.СуммаВзаиморасчетов,
		|		ТаблицаОС.СуммаНДСВзаиморасчетов,
		|		ТаблицаОС.Сумма,
		|		ТаблицаОС.СуммаНДС
		|	ИЗ
		|		ТаблицаОС КАК ТаблицаОС";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.НДСВключенВСтоимость,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанСчетВозвратов
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРегл + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДС
	|	КОНЕЦ КАК СуммаРегл,
	|	&СодержаниеЗачетАванса КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКорректировкиОборота,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК УплаченныйНДС,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДСВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииКорректировки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаТовары.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""УслугиНДС"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК ТМЗ,
		|	ТаблицаУслуги.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаУслуги.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКорректировкиОборота,
		|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаНДС КАК ЧИСЛО(15, 2)) КАК УплаченныйНДС,
		|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.НДСВидОборота КАК ВидОборота,
		|	ТаблицаУслуги.НДСВидПоступления КАК ВидОперацииКорректировки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаУслуги.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОСНДС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКорректировкиОборота,
		|	ВЫРАЗИТЬ(ТаблицаОС.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(ТаблицаОС.СуммаНДС КАК ЧИСЛО(15, 2)) КАК УплаченныйНДС,
		|	ВЫРАЗИТЬ(ТаблицаОС.СуммаНДСВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаОС.НДСВидОборота КАК ВидОборота,
		|	ТаблицаОС.НДСВидПоступления КАК ВидОперацииКорректировки,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаОС.СчетУчетаНДС КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанСчетВозвратов
		|			ТОГДА Реквизиты.СчетУчетаРасчетовПоВозвратам
		|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
		|	КОНЕЦ КАК Счет,
		|	Реквизиты.Контрагент КАК Субконто1,
		|	Реквизиты.ДоговорКонтрагента КАК Субконто2,
		|	Реквизиты.Ссылка КАК Субконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСобытияОСОрганизацийТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОССобытияОСОрганизаций", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОССобытияОСОрганизаций",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаОССобытияОСОрганизаций"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	"""" КАК НазваниеДокумента,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство,
		|	0 КАК СуммаЗатратБУ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаСоставОСТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаСоставОС", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаСоставОС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаСоставОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	"""" КАК НазваниеДокумента,
		|	ТаблицаОС.ОсновноеСредство,
		|	Значение(Перечисление.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) КАК СостояниеВСоставеОС,
		|	СоставОССрезПоследних.ВСоставеОС КАК ВСоставеОС
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(
	    |		&Дата,
	    |		ОсновноеСредство В (ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)
	    |			И СостояниеВСоставеОС = Значение(Перечисление.ВидыСостоянийВСоставеОС.ВключеноВСостав)) КАК СоставОССрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = СоставОССрезПоследних.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСостоянияОСТаблицаОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаСостоянияОС", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаСостоянияОС",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаСостоянияОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Дата КАК ДатаСостояния,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ТаблицаОС.ОсновноеСредство,
		|	Реквизиты.СобытиеОС,
		|	Значение(Перечисление.ВидыСостоянийОС.СнятоСУчета) КАК СостояниеОС
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаЗемельногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаЗемельногоНалога", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаЗемельногоНалога",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ИзменениеЗемельногоНалогаТаблицаОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
		|	ЛОЖЬ КАК НачислятьНалог,
		|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&Дата,
		|				ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
		|				&Дата,
		|				ОбъектНалогообложения В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Налогоплательщик = &Организация) КАК ОбъектыЗемельногоНалогаСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбъектыИмущественногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОбъектыИмущественногоНалога", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОбъектыИмущественногоНалога",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаОбъектыИмущественногоНалога"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
		|	ЛОЖЬ КАК НачислятьНалог,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&Дата,
		|				ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
		|				&Дата,
		|				ОбъектНалогообложения В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Налогоплательщик = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТранспортногоНалога(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТранспортногоНалога", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТранспортногоНалога",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаТранспортногоНалога"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС,
		|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
		|	ЛОЖЬ КАК НачислятьНалог,
		|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&Дата,
		|				ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
		|				&Дата,
		|				ОбъектНалогообложения В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)
		|					И Налогоплательщик = &Организация) КАК ОбъектыТранспортногоНалогаСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаФиксированныеАктивыУчитываемыеОтдельно"						, Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФА"										, Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаФиксированныеАктивыУчитываемыеОтдельно"						 , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА"										 , НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	""ТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ТаблицаОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТаблицаОС.ОсновноеСредство КАК ФиксированныйАктив,
		|	ТаблицаОС.Сумма,
		|	ВЫБОР
		|		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПризнакФА,
		|	ВЫБОР
		|		КОГДА ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПризнакВыделенногоУчетаФА,
		|	ОбъектыНалоговогоУчетаФАСрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ОбъектыНалоговогоУчетаФАСрезПоследних.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,  
		|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА,	
		|	Значение(Перечисление.ВидыСостоянийФА.Выбыл) КАК СостояниеФиксированногоАктива,
		|	Значение(Перечисление.СобытияФАУчитываемыхОтдельно.Выбытие) КАК Событие
		|ПОМЕСТИТЬ ВТТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
		|				&Дата,
		|				ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.ОсновныеСредства) В
		|						(ВЫБРАТЬ
		|							ТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ТаблицаОС КАК ТаблицаОС)
		|					И СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
		|			И Реквизиты.Организация = ОбъектыНалоговогоУчетаФАСрезПоследних.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
		|				&Дата,
		|				ФиксированныйАктив В
		|						(ВЫБРАТЬ
		|							ТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ТаблицаОС КАК ТаблицаОС)
		|					И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
		|			И Реквизиты.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ТаблицаФиксированныеАктивыУчитываемыеОтдельно"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Период,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Регистратор,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Организация,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.СтруктурноеПодразделение,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ПодразделениеОрганизации,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Сумма,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ПризнакФА,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ПризнакВыделенногоУчетаФА,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ГруппаНУ,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ПорядокПогашенияСтоимостиНУ,  
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА,	
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.СостояниеФиксированногоАктива,
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.Событие
		|ИЗ
		|	ВТТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно КАК ТаблицаФиксированныеАктивыУчитываемыеОтдельно
		|ГДЕ
		|	ТаблицаФиксированныеАктивыУчитываемыеОтдельно.ПризнакВыделенногоУчетаФА = Истина
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ТаблицаОбъектыНалоговогоУчетаФА"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОбъектыНалоговогоУчетаФА.Период,
		|	ТаблицаОбъектыНалоговогоУчетаФА.Регистратор,
		|	ТаблицаОбъектыНалоговогоУчетаФА.Организация,
		|	ТаблицаОбъектыНалоговогоУчетаФА.СтруктурноеПодразделение,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ПодразделениеОрганизации,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ФиксированныйАктив,
		|	ТаблицаОбъектыНалоговогоУчетаФА.Сумма,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ПризнакФА,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ПризнакВыделенногоУчетаФА,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ГруппаНУ,
		|	ТаблицаОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,  
		|	ТаблицаОбъектыНалоговогоУчетаФА.ВидЛьготыФА,	
		|	ТаблицаОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива,
		|	ТаблицаОбъектыНалоговогоУчетаФА.Событие
		|ИЗ
		|	ВТТаблицаОбъектыНалоговогоУчетаФАФиксированныеАктивыУчитываемыеОтдельно КАК ТаблицаОбъектыНалоговогоУчетаФА
		|ГДЕ
		|	ТаблицаОбъектыНалоговогоУчетаФА.ПризнакФА = Истина" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНачислениеАмортизацииОСБухгалтерскийУчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОС_ПринятыеКУчету"						  , Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОС_ПринятыеКУчету"					   , НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостоянияОСОрганизации.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ОС_ПринятыеКУчету
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизации
		|ГДЕ
		|	СостоянияОСОрганизации.ДатаСостояния < &Дата
		|	И СостоянияОСОрганизации.Организация = &Организация
		|	И СостоянияОСОрганизации.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|							ТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ТаблицаОС КАК ТаблицаОС)
		|	И СостоянияОСОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЛОЖЬ КАК НачислятьАмортизацию
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОС_ПринятыеКУчету КАК ОС_ПринятыеКУчету
		|		ПО ТаблицаОС.ОсновноеСредство = ОС_ПринятыеКУчету.ОсновноеСредство" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары 
		И Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Реквизиты.Склад КАК Склад
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|ГДЕ НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета(); 		
	 Иначе 		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);		
		
		Возврат ТекстЗапроса;
		
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции

Процедура ПроставитьСторноТаблиц(ТаблицаСписанныеТовары, ТаблицаНДС, ТаблицаРеквизиты) Экспорт

	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания, СуммаСписанияНУ,
		|СуммаСписанияВР");
	
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, СуммаНалога, СуммаНалогаВал");
	Если ТаблицаНДС <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаНДС, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если СтрокаТаблицы.ЭтоУслуга Тогда 
			СтрокаТаблицы.Содержание = НСтр("ru = 'Возврат услуг'", КодОсновногоЯзыка);
		ИначеЕсли СтрокаТаблицы.ЭтоОС Тогда 
			СтрокаТаблицы.Содержание = НСтр("ru = 'Возврат основных средств'", КодОсновногоЯзыка);
		Иначе 
			СтрокаТаблицы.Содержание = НСтр("ru = 'Разница в стоимости товаров'", КодОсновногоЯзыка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОСебестоимостиТоваровИзДокумента(ТаблицаДокумента, ТаблицаСписанныеТовары, ТаблицаРеквизиты) Экспорт 
	
	Если ТаблицаСписанныеТовары = Неопределено 
		ИЛИ ТаблицаСписанныеТовары.Количество() = 0
		ИЛИ ТаблицаДокумента = Неопределено
		ИЛИ ТаблицаДокумента.Количество() = 0
		ИЛИ ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСписанныеТовары, "СебестоимостьВал", 0);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСписанныеТовары, "ЭтоСтрокаРазницы", Ложь);
	
	ТаблицаРазницыСтоимости = ТаблицаСписанныеТовары.СкопироватьКолонки();
	
	СтруктураПоиска = Новый Структура("ИмяСписка, НомерСтроки, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете");
	СтруктураУчет   = Новый Структура("БУ, НУ");
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы, "ИмяСписка, НомерСтроки");
		Для Каждого ТекУчет Из СтруктураУчет Цикл
			СуффиксКолонкиСуммаСписания = ?(ТекУчет.Ключ = "БУ", "", "НУ");
			СтруктураПоиска.ОтражатьВБухгалтерскомУчете = ТекУчет.Ключ = "БУ";
			СтруктураПоиска.ОтражатьВНалоговомУчете     = ТекУчет.Ключ = "НУ";
			
			СтрокиСписанныхПартий = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураПоиска);
			ИтогоСебестоимость    = 0;
			ИтогоСебестоимостьВал = 0;
			СтрокаСМаксСуммой     = Неопределено;
			
			УказаннаяСтоимость    = СтрокаТаблицы.Сумма;
			УказаннаяСтоимостьВал = СтрокаТаблицы.СуммаВал;
			КоличествоОсталосьПогасить = СтрокаТаблицы.Количество;
			
			Для Каждого СтрокаПартии Из СтрокиСписанныхПартий Цикл
				
				Если СтрокаСМаксСуммой = Неопределено ИЛИ СтрокаСМаксСуммой["СуммаСписания" + СуффиксКолонкиСуммаСписания] < СтрокаПартии["СуммаСписания" + СуффиксКолонкиСуммаСписания] Тогда
					СтрокаСМаксСуммой = СтрокаПартии;
				КонецЕсли;

				КоэффициентПересчета = СтрокаПартии.Количество / КоличествоОсталосьПогасить;
				СебестоимостьВал     = Окр(УказаннаяСтоимостьВал * КоэффициентПересчета, 2);
				Себестоимость        = Окр(УказаннаяСтоимость    * КоэффициентПересчета, 2);
				
				СтрокаПартии.СебестоимостьВал = СебестоимостьВал;
				СтрокаПартии.Себестоимость    = Себестоимость; 
				
				УказаннаяСтоимость    = УказаннаяСтоимость    - Себестоимость;
				УказаннаяСтоимостьВал = УказаннаяСтоимостьВал - СебестоимостьВал;
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаПартии.Количество;
				
				Если СтрокаПартии.Себестоимость <> СтрокаПартии["СуммаСписания" + СуффиксКолонкиСуммаСписания] Тогда
					СтрокаРазницы = ТаблицаРазницыСтоимости.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРазницы, СтрокаПартии);
					СтрокаРазницы.НомерСтроки     = 0;
					СтрокаРазницы.Себестоимость   = 0;
					
					СтрокаРазницы.Количество      = 0;
					СтрокаРазницы["СуммаСписания" + СуффиксКолонкиСуммаСписания]   = СтрокаПартии["СуммаСписания" + СуффиксКолонкиСуммаСписания] - СтрокаПартии.Себестоимость;
					
					СтрокаРазницы.КорСчетСписанияБУ = Реквизиты.СчетЗатратБУ;
					Для Индекс = 1 По 3 Цикл
						Если ТипЗнч(Реквизиты["СубконтоЗатратБУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							СтрокаРазницы["КорСубконтоБУ" + Индекс] = СтрокаПартии.Номенклатура.НоменклатурнаяГруппа;
						Иначе
							СтрокаРазницы["КорСубконтоБУ" + Индекс] = Реквизиты["СубконтоЗатратБУ" + Индекс];
						КонецЕсли;
					КонецЦикла;
					
					СтрокаРазницы.КорСчетСписанияНУ = Реквизиты.СчетЗатратНУ;
					Для Индекс = 1 По 3 Цикл
						Если ТипЗнч(Реквизиты["СубконтоЗатратНУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							СтрокаРазницы["КорСубконтоНУ" + Индекс] = СтрокаПартии.Номенклатура.НоменклатурнаяГруппа;
						Иначе
							СтрокаРазницы["КорСубконтоНУ" + Индекс] = Реквизиты["СубконтоЗатратНУ" + Индекс];
						КонецЕсли;
					КонецЦикла;
					
					СтрокаРазницы.ЭтоСтрокаРазницы = Истина;
					
					СтрокаРазницы.Содержание = НСтр("ru = 'Разница в стоимости товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;
				
				СтрокаПартии.СуммаСписанияВал = СтрокаПартии.СебестоимостьВал;
				СтрокаПартии.СуммаСписания    = СтрокаПартии.Себестоимость;
				СтрокаПартии.СуммаСписанияНУ  = СтрокаПартии.Себестоимость;

				ИтогоСебестоимостьВал = ИтогоСебестоимостьВал + СтрокаПартии.СебестоимостьВал;
				ИтогоСебестоимость    = ИтогоСебестоимость    + СтрокаПартии.Себестоимость;
			КонецЦикла;
			
			Если ИтогоСебестоимостьВал > 0 И ИтогоСебестоимостьВал <> СтрокаТаблицы.СуммаВал Тогда 
				СтрокаСМаксСуммой.СебестоимостьВал = СтрокаСМаксСуммой.СебестоимостьВал + (СтрокаТаблицы.СуммаВал - ИтогоСебестоимостьВал);
				СтрокаСМаксСуммой.СуммаСписанияВал = СтрокаСМаксСуммой.СебестоимостьВал;
			КонецЕсли;
			
			Если ИтогоСебестоимость > 0 И ИтогоСебестоимость <> СтрокаТаблицы.Сумма Тогда 
				СтрокаСМаксСуммой.Себестоимость    = СтрокаСМаксСуммой.Себестоимость + (СтрокаТаблицы.Сумма - ИтогоСебестоимость);
				СтрокаСМаксСуммой.СуммаСписания    = СтрокаСМаксСуммой.Себестоимость;
				СтрокаСМаксСуммой.СуммаСписанияНУ  = СтрокаСМаксСуммой.Себестоимость;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	КолонкиГруппировки  = "";
	КолонкиСуммирования = "";
	Для Каждого Колонка Из ТаблицаРазницыСтоимости.Колонки Цикл
		Если НЕ Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			КолонкиГруппировки = КолонкиГруппировки + "," + Колонка.Имя;
		Иначе
			КолонкиСуммирования = КолонкиСуммирования + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРазницыСтоимости.Свернуть(Сред(КолонкиГруппировки, 2), Сред(КолонкиСуммирования, 2));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРазницыСтоимости, ТаблицаСписанныеТовары);
	
КонецПроцедуры

Процедура РаспределитьАвансыПоСписаннымТоварам(ТаблицаСписанныеТовары, ТаблицаЗачетАвансов, ТаблицаРеквизиты) Экспорт
	
	Если ТаблицаСписанныеТовары = Неопределено 
		ИЛИ ТаблицаСписанныеТовары.Количество() = 0
		ИЛИ ТаблицаЗачетАвансов = Неопределено
		ИЛИ ТаблицаЗачетАвансов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	ТаблицаРезультат = ТаблицаСписанныеТовары.СкопироватьКолонки();
	
	Для Каждого СтрокаТовары Из ТаблицаСписанныеТовары Цикл
		
		Если СтрокаТовары.ЭтоСтрокаРазницы Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		// Проводки по НУ зачитывать не нужно.
		Если СтрокаТовары.ОтражатьВНалоговомУчете Тогда
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.СуммаСписанияНУ  = СтрокаТовары.Себестоимость;
			Продолжить;
		КонецЕсли;
		
		ОсталосьПогаситьВал  = СтрокаТовары.СебестоимостьВал;
		ОсталосьПогаситьРегл = СтрокаТовары.Себестоимость;
		Если ОсталосьПогаситьВал = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ПерваяСтрока = Истина;
		Для Каждого СтрокаАванса Из ТаблицаЗачетАвансов Цикл
			Если СтрокаАванса.ОстатокВзаиморасчетов <= 0 ИЛИ СтрокаАванса.СуммаВзаиморасчетов <= 0 ИЛИ ОсталосьПогаситьВал = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаКПогашениюВал  = Мин(СтрокаАванса.ОстатокВзаиморасчетов, ОсталосьПогаситьВал);
			СуммаКПогашениюРегл = ?(СуммаКПогашениюВал = ОсталосьПогаситьВал, ОсталосьПогаситьРегл, СтрокаАванса.СуммаРегл * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов);
			СуммаКПогашениюРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов;
			
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТовары, , "КорСубконтоБУ3");
			
			Если НЕ ПерваяСтрока Тогда 
				СтрокаРезультат.Количество = 0;
			КонецЕсли;
			
			СтрокаРезультат.СуммаСписанияВал    = СуммаКПогашениюВал;
			СтрокаРезультат.СуммаСписания       = СуммаКПогашениюРеглПоКурсуАванса;
			
			СтрокаАванса.ОстатокВзаиморасчетов  = СтрокаАванса.ОстатокВзаиморасчетов  - СуммаКПогашениюВал;
			СтрокаАванса.СуммаВзаиморасчетов    = СтрокаАванса.СуммаВзаиморасчетов    - СуммаКПогашениюВал;
			СтрокаАванса.СуммаРегл              = СтрокаАванса.СуммаРегл              - СуммаКПогашениюРегл;
			СтрокаАванса.СуммаРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса - СуммаКПогашениюРеглПоКурсуАванса;
			
			ОсталосьПогаситьВал  = ОсталосьПогаситьВал  - СуммаКПогашениюВал;
			ОсталосьПогаситьРегл = ОсталосьПогаситьРегл - СуммаКПогашениюРеглПоКурсуАванса;
			
			СтрокаРезультат.КорСубконтоБУ3 = СтрокаАванса.ДокументРасчетов;
			
			ПерваяСтрока = Ложь;
		КонецЦикла;
		
		// если после распределения осталась сумма, то добавим строку задолженности.
		Если ОсталосьПогаситьВал <> 0 ИЛИ ОсталосьПогаситьРегл <> 0 Тогда 
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТовары, , "Количество");
			
			Если ПерваяСтрока Тогда
				СтрокаРезультат.Количество = СтрокаТовары.Количество
			КонецЕсли;
			
			// все суммы будем относить на данные ресурсы.
			СтрокаРезультат.СуммаСписанияВал = ОсталосьПогаситьВал;
			СтрокаРезультат.СуммаСписания    = ОсталосьПогаситьРегл;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанныеТовары = ТаблицаРезультат;
	
КонецПроцедуры
	
Функция РаспределитьТаблицуЗачетаАвансовПоТаблицеВзаиморасчетов(ТаблицаДокумента, ТаблицаЗачетАвансов, ТаблицаРеквизиты) Экспорт
	
	Если ТаблицаДокумента = Неопределено ИЛИ ТаблицаДокумента.Количество() = 0
		ИЛИ ТаблицаЗачетАвансов = Неопределено ИЛИ ТаблицаЗачетАвансов.Количество() = 0 Тогда 
		ДобавитьКолонкуСодержание(ТаблицаДокумента);
		Возврат ТаблицаДокумента;
	КонецЕсли;
	
	СписокОбязательныхКолонок = "ИмяСписка, НомерСтроки, СчетУчетаНДС";
	КопияТаблицыДокумента = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок);
	
	ТаблицаРезультат = ТаблицаДокумента.СкопироватьКолонки();
	СтрокаКолонокДоходов = "СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3";
	КолонкиДоходов = Новый Структура(СтрокаКолонокДоходов + ", КорСубконто1, КорСубконто2, КорСубконто3");
	Для Каждого Колонка Из КолонкиДоходов Цикл
		ТаблицаРезультат.Колонки.Удалить(Колонка.Ключ);
		ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРезультат, "Содержание", "");
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРезультат, "ЗнакПроводкиНУ", 1);
	
	Если Реквизиты.НДСВключенВСтоимость Тогда 
		СтрокаПоказателей = "СуммаВзаиморасчетов, Сумма";
		СтруктураПоказателей = Новый Структура("СуммаВзаиморасчетов", "Сумма");
	Иначе 
		СтрокаПоказателей = "СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов, Сумма, СуммаНДС";
		СтруктураПоказателей = Новый Структура("СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов", "Сумма", "СуммаНДС");
	КонецЕсли;
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		
		Суффикс = Сред(Показатель.Значение, 6);
		
		// сначала пытаемся распределить сумму.
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			Если СтрокаДокумента.ИмяСписка = "Товары" И Суффикс <> "НДС" Тогда
				Продолжить;
			КонецЕсли;
			
			ОсталосьПогаситьВал  = СтрокаДокумента[Показатель.Ключ];
			ОсталосьПогаситьРегл = СтрокаДокумента[Показатель.Значение];
			Если ОсталосьПогаситьВал = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаАванса Из ТаблицаЗачетАвансов Цикл
				Если СтрокаАванса.ОстатокВзаиморасчетов <= 0 ИЛИ СтрокаАванса.СуммаВзаиморасчетов <= 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				СуммаКПогашениюВал  = Мин(СтрокаАванса.ОстатокВзаиморасчетов, ОсталосьПогаситьВал);
				СуммаКПогашениюРегл = СтрокаАванса.СуммаРегл * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов;
				СуммаКПогашениюРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса * СуммаКПогашениюВал / СтрокаАванса.СуммаВзаиморасчетов;
				
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, , СтрокаПоказателей + "," + СтрокаКолонокДоходов + ",КорСубконто3");
				
				// все суммы будем относить на данные ресурсы.
				СтрокаРезультат.СуммаВзаиморасчетов = СуммаКПогашениюВал;
				СтрокаРезультат.Сумма               = СуммаКПогашениюРеглПоКурсуАванса;
				
				СтрокаРезультат.ЗнакПроводкиНУ      = 1;
				
				СтрокаАванса.ОстатокВзаиморасчетов  = СтрокаАванса.ОстатокВзаиморасчетов  - СуммаКПогашениюВал;
				СтрокаАванса.СуммаВзаиморасчетов    = СтрокаАванса.СуммаВзаиморасчетов    - СуммаКПогашениюВал;
				СтрокаАванса.СуммаРегл              = СтрокаАванса.СуммаРегл              - СуммаКПогашениюРегл;
				СтрокаАванса.СуммаРеглПоКурсуАванса = СтрокаАванса.СуммаРеглПоКурсуАванса - СуммаКПогашениюРеглПоКурсуАванса;
				
				ОсталосьПогаситьВал  = ОсталосьПогаситьВал - СуммаКПогашениюВал;
				ОсталосьПогаситьРегл = ОсталосьПогаситьРегл - СуммаКПогашениюРеглПоКурсуАванса;
				
				Если Суффикс = "НДС"  Тогда 
					СтрокаРезультат.Стоимость   = 0;
					СтрокаРезультат.СтоимостьНУ = 0;  
					СтрокаРезультат.Содержание  = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НСтр("ru = 'Возврат суммы НДС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
							НСтр("ru = 'Отложенное принятие НДС к зачету'", ОбщегоНазначения.КодОсновногоЯзыка())) ;
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НайденныеСтроки[0].СчетУчетаНДС, ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);
						СтрокаРезультат.СубконтоДоходовБУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовБУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(НайденныеСтроки[0].СчетУчетаНДС, Реквизиты.Период), ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаРезультат.СчетДоходовБУ, Реквизиты.Период));
						СтрокаРезультат.СубконтоДоходовНУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовНУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;						
					КонецЕсли;
					
					СтрокаРезультат.КорСчет = СтрокаАванса.СчетАвансов;
					СтрокаРезультат.КорСубконто1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконто2 = СтрокаАванса.ДоговорКонтрагента;
					СтрокаРезультат.КорСубконто3 = СтрокаАванса.ДокументРасчетов;
					
					СтрокаРезультат.КорСчетНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаАванса.СчетРасчетов);
					СтрокаРезультат.КорСубконтоНУ1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконтоНУ2 = СтрокаАванса.ДоговорКонтрагента;
				Иначе 
					Если СтрокаДокумента.ЭтоУслуга Тогда 
						СтрокаРезультат.Содержание = НСтр("ru = 'Возврат услуг'", КодОсновногоЯзыка);
					ИначеЕсли СтрокаДокумента.ЭтоОС Тогда 
						СтрокаРезультат.Содержание = НСтр("ru = 'Возврат основных средств'", КодОсновногоЯзыка);
					Иначе
						СтрокаРезультат.Содержание = НСтр("ru = 'Разница в стоимости товаров'", КодОсновногоЯзыка);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, СтрокаКолонокДоходов);
					Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3 = Неопределено;
					ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3 = СтрокаДокумента.Партия;
					Иначе 
						СтрокаРезультат.КорСубконто3 = СтрокаАванса.ДокументРасчетов;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// для ТМЗ особый случай, если зачли по курсу авансов и в итоге осталось тенговая сумма для зачета, то отразим задолженность на возврате.
			Если НЕ СтрокаДокумента.ЭтоУслуга И НЕ СтрокаДокумента.ЭтоОС И ОсталосьПогаситьВал = 0 И ОсталосьПогаситьРегл <> 0 Тогда
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, , СтрокаПоказателей + ",КорСубконто3, КорСубконтоНУ3");
				
				СтрокаРезультат.ЗнакПроводкиНУ      = -1;
				
				// все суммы будем относить на данные ресурсы.
				СтрокаРезультат.СуммаВзаиморасчетов = ОсталосьПогаситьВал;
				СтрокаРезультат.Сумма               = ОсталосьПогаситьРегл;
				
				СтрокаРезультат.Стоимость   = 0;
				СтрокаРезультат.СтоимостьНУ = 0;
				
				Суффикс = Сред(Показатель.Значение, 6);
				Если Суффикс = "НДС"  Тогда 
					СтрокаРезультат.Содержание  = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НСтр("ru = 'Возврат суммы НДС'", КодОсновногоЯзыка),
							НСтр("ru = 'Отложенное принятие НДС к зачету'", ОбщегоНазначения.КодОсновногоЯзыка())) ;
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НайденныеСтроки[0].СчетУчетаНДС, ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);
						СтрокаРезультат.СубконтоДоходовБУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовБУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(НайденныеСтроки[0].СчетУчетаНДС, Реквизиты.Период), ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаРезультат.СчетДоходовБУ, Реквизиты.Период));
						СтрокаРезультат.СубконтоДоходовНУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовНУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;						
					КонецЕсли;
					
					СтрокаРезультат.КорСчет = СтрокаАванса.СчетАвансов;
					СтрокаРезультат.КорСубконто1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконто2 = СтрокаАванса.ДоговорКонтрагента;
					СтрокаРезультат.КорСубконто3 = Реквизиты.Регистратор;
					
					СтрокаРезультат.КорСчетНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаАванса.СчетРасчетов);
					СтрокаРезультат.КорСубконтоНУ1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконтоНУ2 = СтрокаАванса.ДоговорКонтрагента;
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// если после распределения осталась сумма, то добавим строку задолженности.
			Если ОсталосьПогаситьВал <> 0 ИЛИ ОсталосьПогаситьРегл <> 0 Тогда 
				
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, , СтрокаПоказателей + ",КорСубконто3, КорСубконтоНУ3");
				
				СтрокаРезультат.ЗнакПроводкиНУ      = 1;
				
				// все суммы будем относить на данные ресурсы.
				СтрокаРезультат.СуммаВзаиморасчетов = ОсталосьПогаситьВал;
				СтрокаРезультат.Сумма               = ОсталосьПогаситьРегл;
				
				Суффикс = Сред(Показатель.Значение, 6);
				Если Суффикс = "НДС"  Тогда 
					СтрокаРезультат.Стоимость   = 0;
					СтрокаРезультат.СтоимостьНУ = 0;
					СтрокаРезультат.Содержание  = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НСтр("ru = 'Возврат суммы НДС'", КодОсновногоЯзыка),
							НСтр("ru = 'Отложенное принятие НДС к зачету'", ОбщегоНазначения.КодОсновногоЯзыка())) ;
					СтрокаРезультат.ЗнакПроводкиНУ = -1;
					
					НайденныеСтроки = КопияТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяСписка, НомерСтроки", СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтроки));
					Если НайденныеСтроки.Количество() <> 0 Тогда 
						СтрокаРезультат.СчетДоходовБУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, НайденныеСтроки[0].СчетУчетаНДС, ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);
						СтрокаРезультат.СубконтоДоходовБУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовБУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовБУ3 = Неопределено;
						
						СтрокаРезультат.СчетДоходовНУ = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(НайденныеСтроки[0].СчетУчетаНДС, Реквизиты.Период), ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаРезультат.СчетДоходовБУ, Реквизиты.Период));
						СтрокаРезультат.СубконтоДоходовНУ1 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость, СтрокаАванса.Контрагент);
						СтрокаРезультат.СубконтоДоходовНУ2 = ?(НЕ Реквизиты.ОтложитьПринятиеНДСКЗачету, Перечисления.ВидыПлатежейВБюджетИФонды.Налог, Реквизиты.Регистратор);
						СтрокаРезультат.СубконтоДоходовНУ3 = Неопределено;						
					КонецЕсли;
					
					СтрокаРезультат.КорСчет = СтрокаАванса.СчетАвансов;
					СтрокаРезультат.КорСубконто1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконто2 = СтрокаАванса.ДоговорКонтрагента;
					СтрокаРезультат.КорСубконто3 = Реквизиты.Регистратор;
					
					СтрокаРезультат.КорСчетНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаАванса.СчетРасчетов);
					СтрокаРезультат.КорСубконтоНУ1 = СтрокаАванса.Контрагент;
					СтрокаРезультат.КорСубконтоНУ2 = СтрокаАванса.ДоговорКонтрагента;
				Иначе 
					Если ОсталосьПогаситьРегл < 0 Тогда
						СтрокаРезультат.ЗнакПроводкиНУ     = 0;
					КонецЕсли;
					
					Если СтрокаДокумента.ЭтоУслуга Тогда 
						СтрокаРезультат.Содержание = НСтр("ru = 'Возврат услуг'", КодОсновногоЯзыка);
					ИначеЕсли СтрокаДокумента.ЭтоОС Тогда 
						СтрокаРезультат.Содержание = НСтр("ru = 'Возврат основных средств'", КодОсновногоЯзыка);
					Иначе
						СтрокаРезультат.Содержание = НСтр("ru = 'Разница в стоимости товаров'", КодОсновногоЯзыка);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДокумента, СтрокаКолонокДоходов);
					
					Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3   = Неопределено;
						СтрокаРезультат.КорСубконтоНУ3 = Неопределено;
					ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаРезультат.КорСчет)
						И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаРезультат.КорСчет) Тогда 
						СтрокаРезультат.КорСубконто3   = СтрокаДокумента.Партия;
						СтрокаРезультат.КорСубконтоНУ3 = СтрокаДокумента.Партия;
					Иначе 
						СтрокаРезультат.КорСубконто3   = Реквизиты.Регистратор;
						СтрокаРезультат.КорСубконтоНУ3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПоказателей, ",", , Истина);
	МассивПоказателей.Добавить("Количество");
	МассивПоказателей.Добавить("НомерСтроки");
	МассивПоказателей.Добавить("Стоимость");
	МассивПоказателей.Добавить("СтоимостьНУ");
	
	КолонкиГруппировки = "";
	Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
		Если МассивПоказателей.Найти(Колонка.Имя) = Неопределено Тогда 
			КолонкиГруппировки = КолонкиГруппировки + ", " + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	КолонкиГруппировки = "НомерСтроки" + КолонкиГруппировки;
	
	ТаблицаРезультат.Свернуть(КолонкиГруппировки + ", Стоимость, СтоимостьНУ", СтрокаПоказателей + ", Количество");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура СвернутьДвиженияРегистровБухгалтерии(Движения, Отказ) Экспорт
	
	Если НЕ Движения.Типовой.Записывать И НЕ Движения.Налоговый.Записывать Тогда 
		Возврат;
	КонецЕсли;
	
	Если Движения.Типовой.Записывать Тогда 
		ТаблицаДвижений = Движения.Типовой.Выгрузить();
		КолонкиСуммирования = "Сумма,КоличествоДт,КоличествоКт,ВалютнаяСуммаДт,ВалютнаяСуммаКт";
		МассивКолонокСуммирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСуммирования, ",", Истина, Истина);
		КолонкиГруппировки = "Период";
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			Если МассивКолонокСуммирования.Найти(Колонка.Имя) <> Неопределено ИЛИ Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Период" Тогда 
				Продолжить;
			КонецЕсли;
			КолонкиГруппировки = КолонкиГруппировки + "," + Колонка.Имя;
		КонецЦикла;
		ТаблицаДвижений.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
		// удалим проводки с нулевыми показателями, могли образоваться при свертке.
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.КоличествоДт = 0 И СтрокаТаблицы.КоличествоКт = 0 И СтрокаТаблицы.Сумма = 0 И НЕ
				((ЗначениеЗаполнено(СтрокаТаблицы.ВалютаДт) И СтрокаТаблицы.ВалютнаяСуммаДт <> 0)
					ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВалютаКт) И СтрокаТаблицы.ВалютнаяСуммаКт <> 0)) Тогда 
				ТаблицаДвижений.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Движения.Типовой.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
	Если Движения.Налоговый.Записывать Тогда 
		ТаблицаДвижений = Движения.Налоговый.Выгрузить();
		КолонкиСуммирования = "Сумма,КоличествоДт,КоличествоКт";
		МассивКолонокСуммирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСуммирования, ",", Истина, Истина);
		КолонкиГруппировки = "Период";
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			Если МассивКолонокСуммирования.Найти(Колонка.Имя) <> Неопределено ИЛИ Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Период" Тогда 
				Продолжить;
			КонецЕсли;
			КолонкиГруппировки = КолонкиГруппировки + "," + Колонка.Имя;
		КонецЦикла;
		ТаблицаДвижений.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
		// удалим проводки с нулевой суммой, могли образоваться при свертке.
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.КоличествоДт = 0 И СтрокаТаблицы.КоличествоКт = 0 И СтрокаТаблицы.Сумма = 0 Тогда 
				ТаблицаДвижений.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Движения.Налоговый.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратПоставщику_Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Возврат поставщику (накладная)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратПоставщику_Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать накладной
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВозвратПоставщику_Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВозвратПоставщику_Накладная",
			НСтр("ru = 'Возврат поставщику (накладная)'"),
			ПечатьВозвратаПоставщику(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ВозвратПоставщику_Накладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
    ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КодОС = Ложь;
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС			= Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК Основание,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.СтруктурноеПодразделение,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Склад
	|ПОМЕСТИТЬ ВТ_Доки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Склад,
	|	ВТ_Доки.Ссылка
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Доки КАК ВТ_Доки
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ВТ_Доки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ВТ_Доки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ВТ_ПериодыОтвЛица.Склад,
	|	ОтветственныеЛица.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_МОЛ
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ВТ_ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ВТ_ПериодыОтвЛица.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Доки.Ссылка,
	|	ВТ_Доки.Номер,
	|	ВТ_Доки.Дата,
	|	ВТ_Доки.Основание,
	|	ВТ_Доки.Контрагент,
	|	ВТ_Доки.Организация,
	|	ВТ_Доки.СтруктурноеПодразделение,
	|	ВТ_Доки.СуммаДокумента,
	|	ВТ_Доки.ВалютаДокумента,
	|	ВТ_Доки.УчитыватьНДС,
	|	ВТ_Доки.СуммаВключаетНДС,
	|	ВТ_Доки.Склад,
	|	ВТ_МОЛ.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	ВТ_Доки КАК ВТ_Доки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МОЛ КАК ВТ_МОЛ
	|		ПО ВТ_Доки.Ссылка = ВТ_МОЛ.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	|	ВозвратТоваровПоставщикуТовары.Количество,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС,
	|	0 КАК Метка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуУслуги.Ссылка,
	|	ВозвратТоваровПоставщикуУслуги.НомерСтроки,
	|	ВозвратТоваровПоставщикуУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВозвратТоваровПоставщикуУслуги.Номенклатура."+ТекстКодАртикул+",
	|	ВозвратТоваровПоставщикуУслуги.Количество,
	|	"""+ НСтр("ru = 'ед.'", КодЯзыка) + """,
	|	ВозвратТоваровПоставщикуУслуги.Цена,
	|	ВозвратТоваровПоставщикуУслуги.Сумма,
	|	ВозвратТоваровПоставщикуУслуги.СуммаНДС,
	|	1
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Услуги КАК ВозвратТоваровПоставщикуУслуги
	|ГДЕ
	|	ВозвратТоваровПоставщикуУслуги.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуОС.Ссылка,
	|	ВозвратТоваровПоставщикуОС.НомерСтроки,
	|	ВозвратТоваровПоставщикуОС.ОсновноеСредство,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
	|	"+?(КодОС ,"ВозвратТоваровПоставщикуОС.ОсновноеСредство.Код","""""")+",
	|	1,   	   // количество всегда 1
	|	"""+ НСтр("ru = 'ед.'", КодЯзыка) + """,
	|	ВозвратТоваровПоставщикуОС.Сумма,  // цена равна сумме
	|	ВозвратТоваровПоставщикуОС.Сумма,
	|	ВозвратТоваровПоставщикуОС.СуммаНДС,
	|	2
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
	|ГДЕ
	|	ВозвратТоваровПоставщикуОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная", КодЯзыка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ВозвратТоваровПоставщику_Накладная";
	
	ЗаголовокШапка = Макет.ПолучитьОбласть("Заголовок");
	Поставщик      = Макет.ПолучитьОбласть("Поставщик");
	Покупатель     = Макет.ПолучитьОбласть("Покупатель");
	Основание      = Макет.ПолучитьОбласть("Основание");
	Итого          = Макет.ПолучитьОбласть("Итого");
	ИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ИтогоСНДС      = Макет.ПолучитьОбласть("ИтогоСНДС");
	СуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	Подписи        = Макет.ПолучитьОбласть("Подписи");
	ШапкаТаблицы   = Макет.ПолучитьОбласть(ОбластьШапки);
	Строка         = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
		
		// Выводим шапку накладной.
		
		ЗаголовокШапка.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Возврат поставщику'", КодЯзыка));
		ТабДокумент.Вывести(ЗаголовокШапка);
		
		Поставщик.Параметры.ПредставлениеПоставщика = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,"));
		Поставщик.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(Поставщик);
		
		Покупатель.Параметры.ПредставлениеПолучателя = СокрЛП(ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"));
		Покупатель.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(Покупатель);
		
		Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
			Основание.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(Основание);
		КонецЕсли;
		
		// Выводим табличную часть.
		Если ВыводитьКоды Тогда
			ШапкаТаблицы.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(ШапкаТаблицы);

		НомПП    = 0;
		Сумма    = 0;
		СуммаНДС = 0;
		
		Если ВыборкаСтрокТовары <> Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					ТекстСообщения  = НСтр("ru = 'В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Шапка.Ссылка, , );
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				НомПП = НомПП + 1;
				Строка.Параметры.НомерСтроки = НомПП;
				
				Строка.Параметры.Товар = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар), СокрЛП(ВыборкаСтрокТовары.Товар), ВыборкаСтрокТовары.Номенклатура);
				
				Если ВыводитьКоды Тогда
					Строка.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;   
				ТабДокумент.Вывести(Строка);
				
				Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		// Вывести Итого.
		Итого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(Итого);

		// Вывести ИтогоНДС.
		Если Шапка.УчитыватьНДС Тогда
			ИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС);
			ИтогоНДС.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'", КодЯзыка), НСтр("ru = 'Сумма НДС:'", КодЯзыка));
			ТабДокумент.Вывести(ИтогоНДС);
			
			Если НЕ Шапка.СуммаВключаетНДС ТОгда
				ИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
				ТабДокумент.Вывести(ИтогоСНДС);
			КонецЕсли;
			
		КонецЕсли;

		// Вывести Сумму прописью.
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %1, на сумму %2'", КодЯзыка);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИтоговаяСтрока, ?(ВыборкаСтрокТовары = Неопределено, 0, ВыборкаСтрокТовары.Количество()), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
		СуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		СуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(СуммаПрописью);

		// Вывести подписи.
		Подписи.Параметры.Заполнить(Шапка);
	
		// заполняем МОЛ.
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.Дата);
			Подписи.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
		КонецЕсли;	
	
		ТабДокумент.Вывести(Подписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции
	
#КонецЕсли
	