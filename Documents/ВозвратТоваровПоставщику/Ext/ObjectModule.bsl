#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.ПолучитьСкладПоУмолчанию();
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, Константы.ВалютаРегламентированногоУчета.Получить());

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), , , ОбъектКопирования.Ссылка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНДС, ПроверятьЗаполнениеСчетаУчетаНУ, ПроверятьСтатусыОС", 
													УчитыватьНДС И НЕ НДСВключенВСтоимость И ПользовательУправляетСчетамиУчета, 
													Товары.Количество() > 0,
													ОС.Количество() > 0);
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");

	ИначеЕсли ЭтотОбъект.Товары.Количество() > 0 
		ИЛИ ЭтотОбъект.Услуги.Количество() > 0
			ИЛИ ЭтотОбъект.ОС.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		
	КонецЕсли;
	
	Если ЭтотОбъект.Товары.Количество() = 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		
	КонецЕсли;
    
	ОрганизацияПлательщикНалогаНаПрибыль           = УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	
	
	Если УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
		ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ = Истина;	
	КонецЕсли;
	
	// Проверка заполнения табличной части "Товары"
	Если НЕ (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) 
		ИЛИ НЕ УчитыватьКПН ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОтнесенияСебестоимостиНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНУ");
		
		ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ = Ложь;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка
		И ЭтотОбъект.Товары.Количество() = 0
		И ЭтотОбъект.Услуги.Количество() = 0 Тогда
		
		// Счет отнесения стоимости нужно проверять только в том случае
		// если есть данные в табличных частях Товары или Услуги, а для ОС счет с/сти не нужен
		МассивНепроверяемыхРеквизитов.Добавить("СчетОтнесенияСебестоимостиБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОтнесенияСебестоимостиНУ");
			
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОтнесенияСебестоимостиБУ");
		
		// таб. части ОС и Услуги при записи документа с видом операции "Из переработки" будут очищены
		Если ОС.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ОС.ОсновноеСредство");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОборота");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидПоступления");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.ПодразделениеОрганизации");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.МОЛОрганизации");
		КонецЕсли;
		Если Услуги.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетЗатратБУ");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетЗатратНУ");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОборота");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидПоступления");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки 
		ИЛИ ОтложитьПринятиеНДСКЗачету Тогда
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНДС", Ложь);
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
		
	КонецЕсли;
	
	Если НЕ УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС.ПодразделениеОрганизации");
		
	КонецЕсли;
	
	Если НЕ УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС.МОЛОрганизации");
		
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	НеобходимаПострочнаяПроверка = Ложь;
	Для Каждого КлючЗначение Из ПараметрыПострочнойПроверки Цикл
		Если КлючЗначение.Значение Тогда 
			НеобходимаПострочнаяПроверка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимаПострочнаяПроверка Тогда
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			Если Товары.Количество() > 0 Тогда
				ПроверитьЗаполнениеТабличнойЧастиПострочно(Товары, "Товары", НСтр("ru = 'ТМЗ'")   , Отказ, ПараметрыПострочнойПроверки);
			КонецЕсли;
			
		Иначе
			Если ОС.Количество() > 0 Тогда
				ПроверитьЗаполнениеТабличнойЧастиПострочно(ОС    , "ОС"    , НСтр("ru = 'ОС'")    , Отказ, ПараметрыПострочнойПроверки);
			КонецЕсли;
			Если Товары.Количество() > 0 Тогда
				ПроверитьЗаполнениеТабличнойЧастиПострочно(Товары, "Товары", НСтр("ru = 'ТМЗ'")   , Отказ, ПараметрыПострочнойПроверки);
			КонецЕсли;
			Если Услуги.Количество() > 0 Тогда
				ПроверитьЗаполнениеТабличнойЧастиПострочно(Услуги, "Услуги", НСтр("ru = 'Услуги'"), Отказ, ПараметрыПострочнойПроверки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда		
		ОС.Очистить();
		Услуги.Очистить();	
	КонецЕсли;
	
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);
	
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	
	РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВозвратТоваровПоставщику.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.Реквизиты, Отказ);
		
	Если ТаблицаСписанныеТовары <> Неопределено И ТаблицаСписанныеТовары.Количество() > 0 Тогда 
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(0, "СуммаСписанияВР");
	КонецЕсли;
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	Если ПараметрыПроведения.Реквизиты[0].ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И ТаблицаСписанныеТовары.Количество() > 0 Тогда 

		// дополним таблицу списанных товаров себестоимостью из документа
		Документы.ВозвратТоваровПоставщику.ЗаполнитьДанныеОСебестоимостиТоваровИзДокумента(ПараметрыПроведения.ТаблицаТовары, ТаблицаСписанныеТовары, ПараметрыПроведения.Реквизиты);
		
		Если НЕ ПараметрыПроведения.Реквизиты[0].УказанСчетВозвратов Тогда
			// распределим авансы по стоимости товаров
			Документы.ВозвратТоваровПоставщику.РаспределитьАвансыПоСписаннымТоварам(ТаблицаСписанныеТовары, ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПроведения.Реквизиты[0].ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки 
		И ТаблицаСписанныеТовары.Количество() > 0 Тогда 
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(ИСТИНА, "ОтражатьВБухгалтерскомУчете");
	КонецЕсли;
	
	Если НЕ ПараметрыПроведения.Реквизиты[0].УказанСчетВозвратов Тогда 
		ТаблицаВозвратТоваровПоставщику = Документы.ВозвратТоваровПоставщику.РаспределитьТаблицуЗачетаАвансовПоТаблицеВзаиморасчетов(ПараметрыПроведения.ВозвратТоваровТаблицаДокумента, ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты);
		ТаблицаВзаиморасчеты = Неопределено;
	Иначе 
		ТаблицаВозвратТоваровПоставщику = ПараметрыПроведения.ВозвратТоваровТаблицаДокумента;
		Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ТаблицаВозвратТоваровПоставщику);
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", "");
	
	//КОНТРОЛЬ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ
	НомераГТДСервер.ВыполнитьКонтрольТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,ПараметрыПроведения.Реквизиты, , Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,ПараметрыПроведения.Реквизиты, Движения, Отказ);		
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияВозвратТоваровПоставщику(
		ТаблицаВозвратТоваровПоставщику, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетОС.СформироватьДвиженияВозвратТоваровПоставщику(
		ТаблицаВозвратТоваровПоставщику, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетОС.СформироватьДвиженияРегистрацияСобытияОС(ПараметрыПроведения.ТаблицаОССобытияОСОрганизаций,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияСоставОС(ПараметрыПроведения.ТаблицаСоставОС,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияИзменениеСостоянияОС(ПараметрыПроведения.ТаблицаСостоянияОС,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияИзменениеЗемельногоНалога(ПараметрыПроведения.ТаблицаЗемельногоНалога,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияОбъектыИмущественногоНалога(ПараметрыПроведения.ТаблицаОбъектыИмущественногоНалога,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияИзменениеТранспортногоНалога(ПараметрыПроведения.ТаблицаТранспортногоНалога,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УчетОС.СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОС(ПараметрыПроведения.ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УправлениеВнеоборотнымиАктивамиСервер.СформироватьДвиженияОбъектыНалоговогоУчетаФА(ПараметрыПроведения.ТаблицаОбъектыНалоговогоУчетаФА,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
												
	УправлениеВнеоборотнымиАктивамиСервер.СформироватьДвиженияФАУчитываемыхОтдельно(ПараметрыПроведения.ТаблицаФиксированныеАктивыУчитываемыеОтдельно,
												ПараметрыПроведения.Реквизиты,
												Движения, Отказ);
	
	УчетНДСИАкциза.СформироватьДвиженияВозвратТоваровПоставщику(ПараметрыПроведения.ТаблицаНДС,  
		ПараметрыПроведения.ТаблицаУчастникиСовместнойДеятельности, ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Свернем проводки в регистрах бухгалтерии
	Документы.ВозвратТоваровПоставщику.СвернутьДвиженияРегистровБухгалтерии(Движения, Отказ);
	
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Синхронизация счетов-фактур
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьПоПоступлениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьДокументПоСчетФактураПолученный(ЭтотОбъект, Основание);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументуОснования()

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		
		СписокОС = ПроверяемаяТабличнаячасть.Выгрузить(, "ОсновноеСредство");
		
		РезультатЗапросаПоОсновнымСредствам = СформироватьЗапросПоТабличнойЧастиОС(СписокОС);
		
		Если НЕ РезультатЗапросаПоОсновнымСредствам[5].Пустой() Тогда
			СнятыеСУчетаОС = РезультатЗапросаПоОсновнымСредствам[5].Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
		Иначе
			СнятыеСУчетаОС = Новый Массив;
		КонецЕсли;
		
		Если НЕ РезультатЗапросаПоОсновнымСредствам[6].Пустой() Тогда
			НеПоступившиеОС = РезультатЗапросаПоОсновнымСредствам[6].Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
		Иначе
			НеПоступившиеОС = Новый Массив;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		ПутьКСтрокеТЧ = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]";
		Если ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНДС") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНДС
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) <> 0 Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ПутьКСтрокеТЧ + ".СчетУчетаНДС";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Товары" И ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ПутьКСтрокеТЧ + ".СчетУчетаНУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "ОС" И ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьСтатусыОС") И ПараметрыПроверки.ПроверятьСтатусыОС Тогда
			
			Если НЕ СнятыеСУчетаОС.Найти(СтрокаТабличнойЧасти.ОсновноеСредство) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" снято с учета в указанной организации.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТабличнойЧасти.ОсновноеСредство);
				Поле = ПутьКСтрокеТЧ + ".ОсновноеСредство";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если НЕ НеПоступившиеОС.Найти(СтрокаТабличнойЧасти.ОсновноеСредство) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не поступало в указанную организацию.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТабличнойЧасти.ОсновноеСредство);
				Поле = ПутьКСтрокеТЧ + ".ОсновноеСредство";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЗапросПоТабличнойЧастиОС(ТаблицаОС) 
	
	Запрос = Новый Запрос();
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ТаблицаОС",     ТаблицаОС);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
		
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
				   |ПОМЕСТИТЬ СписокОС
				   |ИЗ
				   |	&ТаблицаОС КАК ТаблицаОС
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	СостоянияОСОрганизации.ОсновноеСредство КАК ОсновноеСредство
				   |ПОМЕСТИТЬ ОС_Поступившие
				   |ИЗ
				   |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизации
				   |ГДЕ
				   |	СостоянияОСОрганизации.ДатаСостояния < &ДатаДокумента
				   |	И СостоянияОСОрганизации.Организация = &Организация
				   |	И СостоянияОСОрганизации.ОсновноеСредство В
				   |			(ВЫБРАТЬ
				   |				СписокОС.ОсновноеСредство
				   |			ИЗ
				   |				СписокОС КАК СписокОС)
				   |	И СостоянияОСОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
				   |ПОМЕСТИТЬ ОС_СнятыеСУчета
				   |ИЗ
				   |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
				   |ГДЕ
				   |	СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
				   |	И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
				   |	И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В
				   |			(ВЫБРАТЬ
				   |				СписокОС.ОсновноеСредство
				   |			ИЗ
				   |				СписокОС КАК СписокОС)
				   |	И СостоянияОСОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	СостоянияОСОрганизации.ОсновноеСредство КАК ОсновноеСредство
				   |ПОМЕСТИТЬ ОС_ПринятыеКУчету
				   |ИЗ
				   |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизации
				   |ГДЕ
				   |	СостоянияОСОрганизации.ДатаСостояния < &ДатаДокумента
				   |	И СостоянияОСОрганизации.Организация = &Организация
				   |	И СостоянияОСОрганизации.ОсновноеСредство В
				   |			(ВЫБРАТЬ
				   |				СписокОС.ОсновноеСредство
				   |			ИЗ
				   |				СписокОС КАК СписокОС)
				   |	И СостоянияОСОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СписокОС.ОсновноеСредство,
				   |	ВЫБОР
				   |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК СнятоСУчета,
				   |	ВЫБОР
				   |		КОГДА ОС_Поступившие.ОсновноеСредство ЕСТЬ NULL 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК Поступило,
				   |	ВЫБОР
				   |		КОГДА ОС_ПринятыеКУчету.ОсновноеСредство ЕСТЬ NULL 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ПринятоКУчету
				   |ПОМЕСТИТЬ ОС_СостояниеОС
				   |ИЗ
				   |	СписокОС КАК СписокОС
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
				   |		ПО СписокОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_Поступившие КАК ОС_Поступившие
				   |		ПО СписокОС.ОсновноеСредство = ОС_Поступившие.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_ПринятыеКУчету КАК ОС_ПринятыеКУчету
				   |		ПО СписокОС.ОсновноеСредство = ОС_ПринятыеКУчету.ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ОС_СостояниеОС.ОсновноеСредство
				   |ИЗ
				   |	ОС_СостояниеОС КАК ОС_СостояниеОС
				   |ГДЕ
				   |	ОС_СостояниеОС.СнятоСУчета
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ОС_СостояниеОС.ОсновноеСредство
				   |ИЗ
				   |	ОС_СостояниеОС КАК ОС_СостояниеОС
				   |ГДЕ
				   |	НЕ ОС_СостояниеОС.Поступило
				   |	И НЕ ОС_СостояниеОС.ПринятоКУчету";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Результат;
	
КонецФункции


#КонецЕсли