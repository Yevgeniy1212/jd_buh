
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы, ИсточникВыбора.СпособЗаполнения);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Модифицированность = Истина;
		КонецЕсли;  	
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ СчетФактура = Источник) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_СчетФактура" Тогда   //При создании СФ из СНТ
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	//СсылкаНаСНТ +
	ИначеЕсли ИмяСобытия = "Запись_СНТ" Тогда
		ОбработкаОповещенияЗаписиСНТНаСервере();
	//СсылкаНаСНТ -
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_АктПриемаПередачи" Тогда
		//ИСМПТ
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_АктПриемаПередачиИСЦЭДМ" Тогда
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если ТребуетсяСчетФактура И ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;
	
	СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	ПараметрыЗаписи.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_ВозвратТоваровПоставщику", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""возврат тмз поставщику"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСчетФактуру();
	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполненияПриИзмененииДаты);
	        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
			
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0
				ИЛИ ЗначениеЗаполнено(Объект.СчетОтнесенияСебестоимостиБУ)
				ИЛИ ЗначениеЗаполнено(Объект.СчетОтнесенияСебестоимостиНУ) Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтотОбъект, , , , ПараметрыОткрытияФормыЦеныИВалюта());

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Новый Структура;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ВозвратТоваровПоставщику.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока И НЕ Копирование Тогда		
		
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, 
												|НДСВидПоступления, СчетУчетаНУ, ПодразделениеОрганизации, МОЛОрганизации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			СтрокаТабличнойЧасти,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "ОС", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, НДСВидОборота, 
										|НДСВидПоступления, ПодразделениеОрганизации, МОЛОрганизации, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		Элементы.ОС.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
	Структура 			 = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		Элементы.Товары.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	                	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");

		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	ПараметрыВыбораНомераГТД.ПоказыватьТолькоОстатки = Истина;	
	
	Если ВедетсяУчетПоСкладам Тогда	
		ПараметрыВыбораНомераГТД.Склад = Объект.Склад;	
	КонецЕсли;
	
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УСЛУГИ

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			Элементы.Услуги.ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
		|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
		|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, Всего,
		|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
		|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
		|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
		|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		Элементы.Услуги.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");
								
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация, ПодразделениеОрганизации");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетЗатратБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация, ПодразделениеОрганизации");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетЗатратНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  1, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  2, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  3, "СчетЗатратНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ2, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ3, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоЗатратНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru = 'ОС'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги", НСтр("ru = 'Услуги'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОстаткамСчетаМатериалыНаСкладе(Команда)
	
	ЗаполнитьТабличнуюЧастьПоОстаткамСчетаМатериалыНаСкладе("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОСДляСпискаОС(Команда)
	
	Если Объект.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""ОС"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение возможно только в непроведенном документе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ТекстВопроса = НСтр("ru = 'Для заполнения табличной части документа необходимо его записать. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru= 'При заполнении существующие данные будут пересчитаны. Продолжить?'");
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьОСДляСписка", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОСПоНаименованию(Команда)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения отсутствуют.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения отсутствуют.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОСПоНаименованиюНаСервере(СтрокаТабличнойЧасти.ОсновноеСредство);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("ДатаВходящего" , ДатаСчетаФактурыПолученного);
	ДанныеСчетаФактуры.Вставить("НомерВходящего", НомерСчетаФактурыПолученного);
			
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный", ДанныеСчетаФактуры);
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru = 'Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru = 'Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоПоступлению(Команда)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОСПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ОС", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоПоступлению(Команда)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("Услуги", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУслугиИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Услуги", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ГруппаИтогиНДС.Видимость        = Объект.УчитыватьНДС;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.УслугиГруппаАналитикаЗатратНУ.Видимость         = Форма.ВидимостьНалоговогоУчета;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ИзПереработки = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	
	Элементы.УчитыватьКПН.Доступность = Объект.ВидОперации <> ИзПереработки;
	Элементы.ТоварыЗаполнитьПоОстаткамСчетаМатериалыНаСкладе.Доступность = Объект.ВидОперации = ИзПереработки;;

	// Видимость счетов учета
	Элементы.ГруппаРасчеты.Видимость =
		Форма.ПоказыватьВДокументахСчетаУчета И Объект.ВидОперации <> ИзПереработки;
    Элементы.УслугиГруппаАналитикаЗатратБУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;    
    Элементы.УслугиГруппаАналитикаЗатратНУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
        
	Элементы.ГруппаОС.Видимость     = Объект.ВидОперации <> ИзПереработки;
	Элементы.ГруппаУслуги.Видимость = Объект.ВидОперации <> ИзПереработки;
	
	Элементы.ОСПодразделениеОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям;
	Элементы.ОСМОЛОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.Сделка.Доступность = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;

	Элементы.ТоварыНомерГТД.Видимость     = Форма.ВедетсяУчетПоТоварамОрганизацийБУ 
											И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка") ;
	
	Элементы.ТоварыСчетУчетаНДС.Видимость = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОССчетУчетаНДС.Видимость     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиСчетУчетаНДС.Видимость = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.ТоварыНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	Элементы.ОСНДСВидПоступления.АвтоОтметкаНезаполненного  = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.АвтоОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету; 	
	Элементы.ОСНДСВидПоступления.ОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.ОтметкаНезаполненного          = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	 	
	Элементы.УслугиНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.УслугиНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	СформироватьЗаголовокСчетаУчета(Форма);
	
КонецПроцедуры
																		
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	УчитыватьОС     = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	УчитыватьУслуги = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + ?(УчитыватьУслуги, Объект.Услуги.Итог("СуммаНДС"), 0) + ?(УчитыватьОС, Объект.ОС.Итог("СуммаНДС"), 0);
	Форма.ИтогиВсего    = Объект.Товары.Итог("Сумма")    + ?(УчитыватьУслуги, Объект.Услуги.Итог("Сумма"), 0)    + ?(УчитыватьОС, Объект.ОС.Итог("Сумма"), 0);
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Счет-фактура
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	Если НЕ Параметры.Ключ.Пустая() И ТребуетсяСчетФактура Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
	СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);

	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И  НЕ ЗначениеЗаполнено(Параметры.Основание) И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено, Новый Массив);
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			Объект.УчитыватьНДС     = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
			Объект.УчитыватьКПН	    = Ложь;                        
			
		Иначе
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);

		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	Иначе 
		Элементы.Сделка.Доступность = Ложь;		
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;
	
	УстановитьПараметрыВыбораСчетовУчета(ЭтаФорма,Объект.ВидОперации);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонок "Всего" в табличных частях
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	ВедениеУчетаВременныхРазницБалансовымМетодом   = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ   			= НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);	
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Объект.УчитыватьКПН = Ложь;
		Объект.НДСВключенВСтоимость = Истина;
		Объект.УчитыватьНДС         = Ложь;
		Объект.СуммаВключаетНДС     = Ложь;
	Иначе
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Если Объект.ДоговорКонтрагента <> ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Услуги");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Услуги");
	КонецЕсли;
		
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаУслуги,
												Объект.Организация, 
												Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
																|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
																"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
																СтрокаУслуги.СубконтоЗатратБУ1, СтрокаУслуги.СубконтоЗатратБУ2, СтрокаУслуги.СубконтоЗатратБУ3));
																
		
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаУслуги,
												Объект.Организация, 
												Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
																|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
																"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
																СтрокаУслуги.СубконтоЗатратНУ1, СтрокаУслуги.СубконтоЗатратНУ2, СтрокаУслуги.СубконтоЗатратНУ3));
																
	КонецЦикла;

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		СписокАналитикиСчетов = Новый СписокЗначений;
		
		СписокАналитикиСчетов.Добавить("ЗатратБУ"); 	// СчетЗатратБУ
		СписокАналитикиСчетов.Добавить("ЗатратНУ"); 	// СчетЗатратНУ
		
		СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетов); 
		СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Если Объект.ОС.Количество() > 0 Тогда
		
		СписокРеквизитовПодразделения = Новый СписокЗначений;
		
		СписокРеквизитовПодразделения.Добавить("ПодразделениеОрганизации");
		
		СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения", Объект.ОС, СписокРеквизитовПодразделения);
		СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	ПараметрСписокТабличныхЧастей = ?(СписокТабличныхЧастей.Количество() > 0, СписокТабличныхЧастей, Неопределено);

	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ОтнесенияСебестоимостиБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ОтнесенияСебестоимостиНУ"); 
	
	СтруктураРеквизитов = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , ПараметрСписокТабличныхЧастей, СтруктураРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.ОС.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0
			ИЛИ ЗначениеЗаполнено(Объект.СчетОтнесенияСебестоимостиБУ)
			ИЛИ ЗначениеЗаполнено(Объект.СчетОтнесенияСебестоимостиНУ) Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Ложь);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru = 'По справочнику'"));
	Если ИмяТаблицы = "Товары" Тогда
		СписокЗапросов.Добавить("ОстаткиНоменклатуры"     , НСтр("ru = 'Остатки номенклатуры'"));
		СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", НСтр("ru = 'Остатки и цены номенклатуры'"));
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		СписокЗапросов.Добавить("Услуги"   , НСтр("ru = 'Услуги'"));
		СписокЗапросов.Добавить("ЦеныУслуг", НСтр("ru = 'Цены услуг'"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
	
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, , ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ВозвратТоваровПоставщику, Истина);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСчетФактуру()

	ТребуетсяСчетФактура = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	Если  НЕ ТребуетсяСчетФактура И ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'При записи документа с видом операции ""Из переработки"" будет очищен документ счет-фактура.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	                             
	СписокСвойств = Неопределено;
	  
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;	
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ЕстьЦена = (ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено);

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта.Дата);
		
		
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);

	СтрокиДляЗаполненияСчетов =  Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// При копировании всегда добавляем новые строки, если это вставка из буфера
		СтрокаТабличнойЧасти = Неопределено; 		
		Если Не ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
						
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
			КонецЕсли;
			Если ИмяТаблицы = "Услуги" Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Услуги", Объект.Ссылка.Метаданные()); 
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ИмяТаблицы, Объект.Ссылка.Метаданные());
			Если ЭтоВставкаИзБуфера Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);  
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ВозвратТоваровПоставщику);
	
	Если ИмяТаблицы = "Услуги" Тогда
		УстановитьДоступностьСубконто();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
 	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	УстановитьТекущуюСтраницуОсновнойПанели();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда

		Объект.УчитыватьКПН  = Ложь;

		Объект.НДСВключенВСтоимость = Истина;
		Объект.УчитыватьНДС         = Ложь;
		Объект.СуммаВключаетНДС     = Ложь;
		
	Иначе
		Если Не Объект.УчитыватьНДС Тогда
			Объект.НДСВключенВСтоимость = Ложь;
			Объект.УчитыватьНДС         = Истина;
			Объект.СуммаВключаетНДС     = Истина;
		КонецЕсли;

		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораСчетовУчета(ЭтаФорма,Объект.ВидОперации);
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	// Проверить текущий договор
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И СписокВидовДоговоров.НайтиПоЗначению(Объект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	ТекущийВидОперации   = Объект.ВидОперации;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыЦеныИВалюта()
	
	ПараметрыОткрытия = Неопределено;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда 
		ОграничениеДоступности = Новый Соответствие;
		ОграничениеДоступности.Вставить("Доступность", Ложь);
		
		НедоступныеРеквизиты   = Новый Структура;
		НедоступныеРеквизиты.Вставить("УчитыватьНДС"                , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("СуммаВключаетНДС"            , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("НДСВключенВСтоимость"        , ОграничениеДоступности);
		
		ПараметрыОткрытия = Новый Структура("НедоступныеРеквизиты", НедоступныеРеквизиты);
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	СписокВидовДоговоров.Очистить();
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Иначе
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);		
	КонецЕсли;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров.ВыгрузитьЗначения());

	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(НовыйПараметр);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	КонецЕсли;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Объект.Сделка = Неопределено;
	Объект.УчастникиСовместнойДеятельности.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
		
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
	Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	
	Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);

	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьПоПоступлениюТоваров(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьДокументПоСчетФактураПолученный(Объект, ДокументОснование);

	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, "Услуги");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаЗатрат = "СубконтоЗатрат";
	ИмяСчетаЗатрат    = "СчетЗатрат";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс +"%Индекс%", ИмяСчетаЗатрат + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаЗатрат + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаЗатрат + Префикс + "%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "", ЗаменаСубконтоНУ = Ложь)
	
	Если Не Форма.ПоказыватьВДокументахСчетаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "" Тогда
		// Обработка полей Субконто для счетов СчетОтнесенияСебестоимости
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
		
	Иначе
		// Обработка полей Субконто в ТЧ "Услуги"
		Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
			СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
					
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров(Объект.ВидОперации));
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	КонтрагентОбработатьИзменение(Неопределено, Новый Массив);
	ТекущийВидОперации = Объект.ВидОперации;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 	ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 			Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 		Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 	Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 			Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Товары", МетаданныеДокумента); 
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
				
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);

	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран договор контрагента.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДоговорКонтрагента", "Объект");
		Возврат;
	КонецЕсли; 
	
	ПараметрыВопроса = Новый Структура("ТабличнаяЧасть, СпособЗаполнения, ОчищатьТовары", ТабличнаяЧасть, СпособЗаполнения, СпособЗаполнения = "Заполнить" И Объект[ТабличнаяЧасть].Количество() > 0);
	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоПоступлению", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоПоступлению(КодВозвратаДиалога.Да, ПараметрыВопроса);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамСчетаМатериалыНаСкладе(ТабличнаяЧасть)
	
	ЕстьОшибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан контрагент.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВопроса = Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть);
	Если Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоОстаткамНаСчете", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоОстаткамНаСчете(КодВозвратаДиалога.Да, ПараметрыВопроса);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоОстаткамНаСчете(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект[Параметры.ТабличнаяЧасть].Очистить();
	
	ЗаполнитьТабличнуюЧастьПоОстаткамНаСчетеНаСервере(Параметры.ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамНаСчетеНаСервере(ТабличнаяЧасть)
	
	ДанныеДляРасчета = Новый Структура("Курс, Кратность, КурсОсн, КратностьОсн");
	ДанныеДляРасчета.Курс      = ОбщегоНазначенияБК.КурсДокумента     (Объект, ВалютаРегламентированногоУчета);
	ДанныеДляРасчета.Кратность = ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	
	Если ТабличнаяЧасть = "Товары" Тогда
		
		Документы.ВозвратТоваровПоставщику.ЗаполнитьТабличнуюЧастьПоОстаткамНаСчете(Объект, ДанныеДляРасчета, ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьТабличнуюЧастьПоПоступлению(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Если Параметры.ОчищатьТовары Тогда
		Объект[Параметры.ТабличнаяЧасть].Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(Объект.ДокументОснование, Параметры.ТабличнаяЧасть, Параметры.СпособЗаполнения);
		
	Иначе
		ОткрытьФормуВыбораПоступленияТоваровУслуг(Параметры.ТабличнаяЧасть, Параметры.СпособЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть, СпособЗаполнения)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	СтруктураОтбора.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	ВидОперации = Новый СписокЗначений;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
	Иначе
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия"));
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства"));
	КонецЕсли;
	СтруктураОтбора.Вставить("ВидОперации",	ВидОперации);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	СтруктураПараметров.Вставить("СпособЗаполнения", 		   СпособЗаполнения);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;

	ДанныеДляРасчета = Новый Структура("Курс, Кратность, КурсОсн, КратностьОсн");
	ДанныеДляРасчета.Курс         = ОбщегоНазначенияБК.КурсДокумента(Объект,              ВалютаРегламентированногоУчета);
	ДанныеДляРасчета.КурсОсн      = ОбщегоНазначенияБК.КурсДокумента(ДокументПоступления, ВалютаРегламентированногоУчета);
	ДанныеДляРасчета.Кратность    = ОбщегоНазначенияБК.КратностьДокумента(Объект,              ВалютаРегламентированногоУчета);
	ДанныеДляРасчета.КратностьОсн = ОбщегоНазначенияБК.КратностьДокумента(ДокументПоступления, ВалютаРегламентированногоУчета);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, Организация, ВидОперации, СуммаВключаетНДС, ВалютаДокумента, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьТабличнуюЧастьПоОснованию(Объект, ДанныеОбъекта, ДанныеДляРасчета, ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);
		
	Если ТабличнаяЧасть = "Услуги" Тогда
		УстановитьДоступностьСубконто();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьОСДляСписка(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ЗаполнитьОСДляСпискаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОСДляСпискаНаСервере()
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьТабличнуюЧастьОСДляСписка(Объект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОСПоНаименованиюНаСервере(ОсновноеСредство)
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьТабличнуюЧастьОСПоНаименованию(Объект, ОсновноеСредство);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

	Иначе
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры, ПараметрыОткрытияФормыЦеныИВалюта());
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетовУчета(Форма, ВидОперации)
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	// "Счет учета БУ" табличной части "Товары"	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		НовыйМассивПараметров = Новый Массив;	
        Для каждого СтарыйПараметр Из Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора Цикл
            Если СтарыйПараметр.Имя <> "Отбор.Забалансовый" Тогда
                НовыйМассивПараметров.Добавить(СтарыйПараметр);
            КонецЕсли;
        КонецЦикла; 
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
		Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		НовыйМассивПараметров = Новый Массив;	
        Для каждого СтарыйПараметр Из Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора Цикл
            Если СтарыйПараметр.Имя <> "Отбор.Забалансовый" Тогда
                НовыйМассивПараметров.Добавить(СтарыйПараметр);
            КонецЕсли;
        КонецЦикла; 
		Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетОтнесенияСебестоимостиБУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
											ДанныеОбъекта.Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"СубконтоОтнесенияСебестоимостиБУ1", "СубконтоОтнесенияСебестоимостиБУ2", "СубконтоОтнесенияСебестоимостиБУ3", 
															ДанныеОбъекта.СубконтоОтнесенияСебестоимостиБУ1, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиБУ2, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
											ДанныеОбъекта.Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"СубконтоОтнесенияСебестоимостиНУ1", "СубконтоОтнесенияСебестоимостиНУ2", "СубконтоОтнесенияСебестоимостиНУ3", 
															ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ1, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ2, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетОтнесенияСебестоимостиНУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
											ДанныеОбъекта.Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"СубконтоОтнесенияСебестоимостиНУ1", "СубконтоОтнесенияСебестоимостиНУ2", "СубконтоОтнесенияСебестоимостиНУ3", 
															ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ1, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ2, ДанныеОбъекта.СубконтоОтнесенияСебестоимостиНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратБУ, СубконтоЗатратБУ1,
								 |СубконтоЗатратБУ2, СубконтоЗатратБУ3", СтрокаТабличнойЧасти.СчетЗатратБУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров(ВидОперации)
        
    СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС");
		СтруктураРеквизитов.Вставить("СчетУчетаБУ");
		СтруктураРеквизитов.Вставить("СчетУчетаНДС");
		СтруктураРеквизитов.Вставить("НДСВидОборота");
		СтруктураРеквизитов.Вставить("НДСВидПоступления");
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтруктураРеквизитов.Вставить("Количество");
		СтруктураРеквизитов.Вставить("Цена");
		СтруктураРеквизитов.Вставить("СтавкаНДС");
		СтруктураРеквизитов.Вставить("СчетУчетаБУ");
		СтруктураРеквизитов.Вставить("НДСВидОборота");
		СтруктураРеквизитов.Вставить("НДСВидПоступления");
		
		СтруктураРеквизитов.Вставить("СчетЗатратБУ");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ1");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ2");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ3");
		
		СтруктураРеквизитов.Вставить("СчетЗатратНУ");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ1");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ2");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ3");
		
		СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратБУ", "СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3");
		СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Услуги.ТолькоПросмотр       = Ложь;
	Элементы.Услуги.ИзменятьСоставСтрок  = Ложь;
	Элементы.Услуги.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр       = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры


#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");
			СписокСвойств.Добавить("СчетУчетаНУ");			
			СписокСвойств.Добавить("СчетУчетаНДС");			
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОборота");
		СписокСвойств.Добавить("НДСВидПоступления");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
				СписокСвойств.Добавить("СчетЗатратБУ");
				СписокСвойств.Добавить("СчетЗатратНУ");			
					
				СписокСвойств.Добавить("СубконтоЗатратБУ1");	
				СписокСвойств.Добавить("СубконтоЗатратБУ2");	
				СписокСвойств.Добавить("СубконтоЗатратБУ3");
				СписокСвойств.Добавить("СубконтоЗатратНУ1");	
				СписокСвойств.Добавить("СубконтоЗатратНУ2");	
				СписокСвойств.Добавить("СубконтоЗатратНУ3");	
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;

	
КонецПроцедуры

Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратБУ");
	ЭлементыСчетов.Добавить("УслугиГруппаАналитикаЗатратБУ");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратНУ");
	ЭлементыСчетов.Добавить("УслугиГруппаАналитикаЗатратНУ");
	ЭлементыСчетов.Добавить("ОССчетУчетаБУ");
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОССчетУчетаНУ");
	ЭлементыСчетов.Добавить("ГруппаРазницыСтоимостиТоваров");
	ЭлементыСчетов.Добавить("ГруппаРасчеты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВозвратТоваровПоставщику",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
	КонецЕсли;
	
	// НоваяСтрокаОС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаОС") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаУслуги
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаУслуги") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидПоступления");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоВозвратам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетОтнесенияСебестоимостиНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;

	// СчетОтнесенияСебестоимостиБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОтнесенияСебестоимостиБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиБУ3");
	КонецЕсли;

	// СчетОтнесенияСебестоимостиНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОтнесенияСебестоимостиНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
	КонецЕсли;

	// СубконтоОтнесенияСебестоимостиБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ1");
	КонецЕсли;

	// СубконтоОтнесенияСебестоимостиБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ2");
	КонецЕсли;

	// СубконтоОтнесенияСебестоимостиБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоОтнесенияСебестоимостиНУ3");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ3");
	КонецЕсли;

	// Услуги.СчетЗатратБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратБУ3");
	КонецЕсли;

	// Услуги.СчетЗатратНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ3");
	КонецЕсли;

	// Услуги.СубконтоЗатратБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ1");
	КонецЕсли;

	// Услуги.СубконтоЗатратБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ2");
	КонецЕсли;

	// Услуги.СубконтоЗатратБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоЗатратНУ3");
	КонецЕсли;

	// ОС.ОсновноеСредство
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоВозвратам");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// СчетОтнесенияСебестоимостиБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОтнесенияСебестоимостиБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
		КонецЕсли;

		// СчетОтнесенияСебестоимостиНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОтнесенияСебестоимостиНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
		КонецЕсли;

		// СубконтоОтнесенияСебестоимостиБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоОтнесенияСебестоимостиБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоОтнесенияСебестоимостиБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоОтнесенияСебестоимостиБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоОтнесенияСебестоимостиНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОтнесенияСебестоимостиНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
		КонецЕсли;

		// Услуги.СчетЗатратБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
		КонецЕсли;

		// Услуги.СчетЗатратНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
		КонецЕсли;

		// Услуги.СубконтоЗатратБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.СубконтоЗатратБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.СубконтоЗатратБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СубконтоЗатратБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// ОС.ОсновноеСредство
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения) Тогда
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
				
				Если ИмяТабличнойЧасти = "Услуги" Тогда
					
					ПоляОбъектаЗатратыБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
												 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
					ПоляОбъектаЗатратыНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
												 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
					
					УслугиСчетЗатратБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетЗатратБУ") <> Неопределено;
					УслугиСчетЗатратНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетЗатратНУ") <> Неопределено;
					
					Если НЕ (УслугиСчетЗатратБУ ИЛИ УслугиСчетЗатратНУ) Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
						Если УслугиСчетЗатратБУ Тогда 
							ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыБУ, Истина);
						КонецЕсли;
						Если УслугиСчетЗатратНУ Тогда 
							ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыНУ, Истина);
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;
				
			КонецЦикла;
	
			СформироватьЗаголовокСчетаУчета(ЭтаФорма);
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Дополнительно(Команда)
	
	СтруктураДопПараметров = Новый Структура;
	
	СтруктураДопПараметров.Вставить("Комментарий",						Объект.Комментарий);
	СтруктураДопПараметров.Вставить("Грузополучатель",					Объект.Грузополучатель);
	СтруктураДопПараметров.Вставить("ВидВходящегоДокумента",			Объект.ВидВходящегоДокумента);
	СтруктураДопПараметров.Вставить("ДатаВходящегоДокумента",			Объект.ДатаВходящегоДокумента);
	СтруктураДопПараметров.Вставить("НомерВходящегоДокумента",			Объект.НомерВходящегоДокумента);
	СтруктураДопПараметров.Вставить("СобытиеОС",						Объект.СобытиеОС);
	СтруктураДопПараметров.Вставить("ВидОперации",						ПолучитьПараметрВидаОперации());
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(ЭтаФорма, "ВозвратТоваровПоставщику",СтруктураДопПараметров)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчастникиСовместнойДеятельности",  	Объект.УчастникиСовместнойДеятельности);
	СтруктураПараметров.Вставить("ТипОбъекта",                      	"ВозвратТоваровПоставщику");
	СтруктураПараметров.Вставить("Договор",                      		Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУчастникиСовместнойДеятельности", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Грузополучатель",  Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ТипОбъекта",       "ВозвратТоваровПоставщику");
	СтруктураПараметров.Вставить("ТолькоПросмотр",   ЭтаФорма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрВидаОперации()

	Возврат ?(Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки, "ИзПереработки", "");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции

#Область СНТ

&НаКлиенте
Процедура НадписьСНТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СНТКлиент.ОткрытьСНТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеСНТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСНТНаСервере()

	ЭтаФорма.СНТ = Неопределено;
	
	СНТСерверПереопределяемый.ОбновитьРеквизитыСНТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

//ИнтеграцияИСМПТК
#Область ИСМПТ

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК

