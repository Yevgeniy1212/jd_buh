#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//// Заявка на оплату
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ЗаявкаНаОплату";
	//КомандаПечати.Представление = НСтр("ru = 'Заявка на оплату'");
	//КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	//КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	//КомандаПечати.Порядок = 50;
	//
	//// Анализ по договору
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "АнализПоДоговору";
	//КомандаПечати.Представление = НСтр("ru = 'Анализ по договору'");
	//КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	//КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	//КомандаПечати.Порядок = 51;
	//
	//// Настраиваемый комплект документов
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ЗаявкаНаОплату,АнализПоДоговору";
	//КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	//КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	//КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	//КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//// Печать счета на оплату
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаОплату") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ЗаявкаНаОплату",
	//		НСтр("ru = 'Заявка на оплату'"),
	//		ПечатьЗаявкиНаОплату(МассивОбъектов, ОбъектыПечати),
	//		,
	//		"Документ.ЗаявкаНаОплату.ПФ_MXL_ЗаявкаНаОплату");
	//ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АнализПоДоговору") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"АнализПоДоговору",
	//		НСтр("ru = 'Анализ по договору'"),
	//		ПечатьАнализПоДокументамОснования(МассивОбъектов, ОбъектыПечати),
	//		,
	//		"Документ.ЗаявкаНаОплату.ПФ_MXL_АнализПоДоговору");
	//КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.
	
//// Формирует печатную форму документа "Заявка на оплату"
////
//// Параметры
////  <Параметр1>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////  <Параметр2>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////
//// Возвращаемое значение:
////   <Тип.Вид>   - <описание возвращаемого значения>
////
//Функция ПечатьЗаявкиНаОплату(МассивОбъектов, ОбъектыПечати)

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	ЗаявкаНаОплату.Ссылка,
//	               |	ЗаявкаНаОплату.ВерсияДанных,
//	               |	ЗаявкаНаОплату.ПометкаУдаления,
//	               |	ЗаявкаНаОплату.Номер,
//	               |	ЗаявкаНаОплату.Дата,
//	               |	ЗаявкаНаОплату.Проведен,
//	               |	ЗаявкаНаОплату.Организация,
//	               |	ЗаявкаНаОплату.ЦФО,
//	               |	ЗаявкаНаОплату.Контрагент,
//	               |	ЗаявкаНаОплату.Договор,
//	               |	ЗаявкаНаОплату.СчетОрганизации,
//	               |	ЗаявкаНаОплату.СчетКонтрагента,
//	               |	ЗаявкаНаОплату.НазначениеПлатежа,
//	               |	ЗаявкаНаОплату.ВидПлатежа,
//	               |	ЗаявкаНаОплату.ОплатитьДо,
//	               |	ЗаявкаНаОплату.Статус,
//	               |	ЗаявкаНаОплату.Сумма,
//	               |	ЗаявкаНаОплату.ДокументОснование,
//	               |	ЗаявкаНаОплату.РуководительАналитескогоЦентра,
//	               |	ЗаявкаНаОплату.Валюта,
//	               |	ЗаявкаНаОплату.Автор,
//	               |	ЗаявкаНаОплату.ДатаИзменения,
//	               |	ЗаявкаНаОплату.ПериодС,
//	               |	ЗаявкаНаОплату.ПериодПо,
//	               |	ЗаявкаНаОплату.ВидДвиженияДенежныхСредств,
//	               |	ЗаявкаНаОплату.Период,
//	               |	ЗаявкаНаОплату.Исполнитель,
//	               |	ЗаявкаНаОплату.ДатаРеестра,
//	               |	ЗаявкаНаОплату.ДатаОплаты,
//	               |	ЗаявкаНаОплату.Месторождение,
//	               |	ЗаявкаНаОплату.КоличествоЗаявокПоДоговору,
//	               |	ЗаявкаНаОплату.СрочныйПлатеж,
//	               |	ЗаявкаНаОплату.ФормаОплаты,
//	               |	ЗаявкаНаОплату.Комментарий,
//	               |	ЗаявкаНаОплату.ВнеРеестра,
//	               |	ЗаявкаНаОплату.РучнаяКорректировка,
//	               |	ЗаявкаНаОплату.СуммаДокумента,
//	               |	ЗаявкаНаОплату.Организация.ФайлЛоготипа КАК ЛоготипОрганизации
//	               |ИЗ
//	               |	Документ.ЗаявкаНаОплату КАК ЗаявкаНаОплату
//	               |ГДЕ
//	               |	ЗаявкаНаОплату.Ссылка В(&МассивОбъектов)";

//	Шапка = Запрос.Выполнить().Выбрать();

//	ТабДокумент = Новый ТабличныйДокумент;
//	ТабДокумент.ИмяПараметровПечати = "Имя_ПараметровПечати_ЗаявкаНаОплату";
//	
//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаОплату.ПФ_MXL_ЗаявкаНаОплату");
//	
//	Пока Шапка.Следующий() Цикл
//		
//		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
//			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//		
//		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
//		
//		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
//		
//		Если ЗначениеЗаполнено(Шапка.ЛоготипОрганизации) Тогда
//			СсылкаНаДвоичныеДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(Шапка.ЛоготипОрганизации).СсылкаНаДвоичныеДанныеФайла;
//			Если ЗначениеЗаполнено(СсылкаНаДвоичныеДанныеФайла) Тогда
//				ОбластьМакетаЗаголовок.Рисунки.Логотип.Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла));
//			КонецЕсли;
//		КонецЕсли;	
//		
//		ОбластьМакетаЗаголовок.Параметры.Статус = ?(Шапка.ВнеРеестра И Шапка.Статус = Справочники.СтатусыЗаявокНаОплату.ВРеестре, "Вне реестра", Шапка.Статус);
//		
//		Руководители = КТ_ОбщегоНазначенияВызовСервера.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
//		
//		//заполним уполномоченного за руководителя для подписи счета-фактуры
//		Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя) Тогда
//			ДолжностьРуководителя = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность), "", Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность + ": ");		
//			ОбластьМакетаЗаголовок.Параметры.Руководитель = ДолжностьРуководителя + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя;
//		ИначеЕсли ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда 
//			ДолжностьРуководителя = Руководители.РуководительДолжность + ": ";		
//			ОбластьМакетаЗаголовок.Параметры.Руководитель = ДолжностьРуководителя + Руководители.Руководитель;
//		Иначе 
//			ДолжностьРуководителя = "Руководитель: ";		
//			ОбластьМакетаЗаголовок.Параметры.Руководитель = ДолжностьРуководителя + Руководители.Руководитель;
//		КонецЕсли;  		
//		
//		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Заявка на оплату'"));		
//		ОбластьМакетаЗаголовок.Параметры.Наименование  = Шапка.НазначениеПлатежа;
//		Если ТипЗнч(Шапка.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
//			ОбластьМакетаЗаголовок.Параметры.Банк	   = Шапка.СчетОрганизации.Банк;		
//		Иначе
//			ОбластьМакетаЗаголовок.Параметры.Банк	   = Шапка.СчетОрганизации;
//		КонецЕсли;	
//		ОбластьМакетаЗаголовок.Параметры.Подразделение = Шапка.ЦФО;			
//		ОбластьМакетаЗаголовок.Параметры.Контрагент	  = Шапка.Контрагент;
//		ОбластьМакетаЗаголовок.Параметры.ВидПлатежа	  = Шапка.ВидПлатежа;
//		ОбластьМакетаЗаголовок.Параметры.Период        = Шапка.Период;
//		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
//		
//		ОбластьМакетаСтатья = Макет.ПолучитьОбласть("Статья");
//		Для Каждого Строка из Шапка.Ссылка.Бюджет Цикл
//			Если Строка.Сумма <> 0 Тогда
//				ОбластьМакетаСтатья.Параметры.Сумма  = Строка.Сумма;   
//				ОбластьМакетаСтатья.Параметры.Статья = Строка.Статья;
//				ОбластьМакетаСтатья.Параметры.Вал    = Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//				ТабДокумент.Вывести(ОбластьМакетаСтатья);
//			КонецЕсли;
//		КонецЦикла;	
//		
//		ОбластьМакетаОбщаяСумма = Макет.ПолучитьОбласть("ОбщаяСумма");
//		
//		ОбластьМакетаОбщаяСумма.Параметры.Сумма	    = Шапка.Ссылка.Бюджет.Итог("Сумма");	
//		ОбластьМакетаОбщаяСумма.Параметры.Вал         = Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//		Если Шапка.КоличествоЗаявокПоДоговору > 0 Тогда
//			ОбластьМакетаОбщаяСумма.Параметры.КоличествоЗаявокПоДоговору = "Количество заявок: " + Строка(Шапка.КоличествоЗаявокПоДоговору);
//		КонецЕсли;	
//		ОбластьМакетаОбщаяСумма.Параметры.ВидДвижения = Шапка.ВидДвиженияДенежныхСредств;
//		
//		ОбластьМакетаОбщаяСумма.Параметры.СуммаПоДоговору = Шапка.Договор.СуммаДоговора;
//		ОбластьМакетаОбщаяСумма.Параметры.ОстатокПоДоговору = КТ_ОбщегоНазначенияСервер.ПолучитьОстатокПоДоговору(Шапка.Договор);
//		ОбластьМакетаОбщаяСумма.Параметры.Вал         = Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//		
//		ТабДокумент.Вывести(ОбластьМакетаОбщаяСумма);
//		
//		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокОснование");
//		ОбластьМакета.Параметры.Договор = "Договор " + СокрЛП(Шапка.Договор.НомерДоговора) + " от " + Формат(Шапка.Договор.ДатаДоговора, "ДЛФ=Д");
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		ОбластьМакетаОснование = Макет.ПолучитьОбласть("Основание");
//		
//		Для Каждого Строка из Шапка.Ссылка.Основание Цикл
//			Если Строка.КОплате Тогда
//				Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "Счёт-фактура";
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетФактураПолученныйБезНДС") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "Счёт-фактура (без НДС)";
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетНаОплатуОтПоставщика") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "Счёт";
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СлужебнаяЗапискаНаОплату") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "Служебная записка";
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.РасчетПоДоговору") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "Расчёт";
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
//					ОбластьМакетаОснование.Параметры.док1 = "ГТД по импорту";
//				КонецЕсли;
//				
//				Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.НомерВходящегоДокумента;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.ДатаВходящегоДокумента, "ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.ДатаВходящегоДокумента, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетФактураПолученныйБезНДС") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.Номер;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.Дата, "ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.Дата, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СчетНаОплатуОтПоставщика") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.Номер;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.Дата, "ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.Дата, Шапка.Договор.ДнейОтсрочкиПлатежаПоСчету);
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.СлужебнаяЗапискаНаОплату") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.Номер;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.Дата, "ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.Дата, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.РасчетПоДоговору") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.Номер;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.Дата, "ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.Дата, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.НомерВходящегоДокумента;
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.ДатаВходящегоДокумента, "ДЛФ=Д");	 
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.ДатаВходящегоДокумента, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				Иначе
//					ОбластьМакетаОснование.Параметры.ном1	= Строка.Документ.Номер;   
//					ОбластьМакетаОснование.Параметры.дат1   = Формат(Строка.Документ.Дата,"ДЛФ=Д");
//					ОбластьМакетаОснование.Параметры.СрокОплаты = ВычислитьСрокОплатыПоДокументуОснование(Строка.Документ.Дата, Шапка.Договор.ДнейОтсрочкиПлатежаПоПоставке);
//				КонецЕсли;
//				
//				ТабДокумент.Вывести(ОбластьМакетаОснование);
//			КонецЕсли;
//		КонецЦикла;
//		
//		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
//		ТабДокумент.Вывести(ОбластьМакетаПодвал);
//		
//		//Подписанты
//		
//		ИндексПодписанта = 1;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПодписантыВДокументахСрезПоследних.Должность,
//		|	ПодписантыВДокументахСрезПоследних.ОтветственноеЛицо
//		|ИЗ
//		|	РегистрСведений.ПодписантыВДокументах.СрезПоследних КАК ПодписантыВДокументахСрезПоследних
//		|ГДЕ
//		|	ПодписантыВДокументахСрезПоследних.ОбъектПодписи = ЗНАЧЕНИЕ(Перечисление.ОбъектыПодписантов.ЗаявкаНаОплату)
//		|	И ПодписантыВДокументахСрезПоследних.Порядок > 0
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ПодписантыВДокументахСрезПоследних.Порядок";
//		
//		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
//		
//		ОбластьСтрокаПодвала = Макет.ПолучитьОбласть("СтрокаПодвала");
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			
//			ФизЛицоОтветственный = ВыборкаДетальныеЗаписи.ОтветственноеЛицо.ФизЛицо;
//			Если ФизЛицоОтветственный.Пустая() Тогда 
//				Сообщить("У пользователя " + ВыборкаДетальныеЗаписи.ОтветственноеЛицо + " не заполнено значение поля ""Физическое лицо"". Подписант не будет указан.");
//				Продолжить;
//			КонецЕсли;
//			
//			ИсходнаяСтрока = ФизЛицоОтветственный.Наименование;
//			
//			Фамилия 	= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 1);
//			Имя 		= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 2);
//			Отчество 	= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 3);
//			
//			ПредставлениеФизЛица = Фамилия + " " + Лев(Имя, 1) + "." + ?(Не ПустаяСтрока(Отчество), " " + Лев(Отчество, 1) + ".", "");
//			
//			ОбластьСтрокаПодвала.Параметры["Должность" + ИндексПодписанта] = "" + ВыборкаДетальныеЗаписи.Должность + ":";
//			ОбластьСтрокаПодвала.Параметры["ОтветственноеЛицо" + ИндексПодписанта] = ПредставлениеФизЛица;
//			
//			Если ИндексПодписанта = 2 Тогда 
//				ТабДокумент.Вывести(ОбластьСтрокаПодвала);
//				ИндексПодписанта = ИндексПодписанта - 1;
//				ОбластьСтрокаПодвала = Макет.ПолучитьОбласть("СтрокаПодвала");
//			Иначе 
//				ИндексПодписанта = ИндексПодписанта + 1;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	РуководителиЦФОСрезПоследних.Руководитель
//		|ИЗ
//		|	РегистрСведений.РуководителиЦФО.СрезПоследних(&ДатаЗаявки, ЦФО = &ЦФО) КАК РуководителиЦФОСрезПоследних";
//		
//		Запрос.УстановитьПараметр("ЦФО", Шапка.ЦФО);
//		Запрос.УстановитьПараметр("ДатаЗаявки", Шапка.Дата);
//		
//		ВыборкаРуководителей = Запрос.Выполнить().Выбрать();
//		
//		Если ВыборкаРуководителей.Следующий() Тогда
//			НачальникОтдела = ВыборкаРуководителей.Руководитель;
//		КонецЕсли;
//		
//		Руководители = КТ_ОбщегоНазначенияВызовСервера.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата, НачальникОтдела);
//		
//		//заполним исполнителя
//		Если ЗначениеЗаполнено(Руководители.Исполнитель) Тогда
//			ДолжностьИсполнитель = ?(НЕ ЗначениеЗаполнено(Руководители.ИсполнительДолжность), "<Должность не указана>: ", Руководители.ИсполнительДолжность + ": ");		
//			ОбластьСтрокаПодвала.Параметры["Должность" + ИндексПодписанта] = ДолжностьИсполнитель;
//			ОбластьСтрокаПодвала.Параметры["ОтветственноеЛицо" + ИндексПодписанта] = Руководители.Исполнитель;
//		Иначе
//			ДолжностьИсполнитель = "";	
//			ОбластьСтрокаПодвала.Параметры["Должность" + ИндексПодписанта] = "" + ДолжностьИсполнитель;
//			ОбластьСтрокаПодвала.Параметры["ОтветственноеЛицо" + ИндексПодписанта] = Руководители.Исполнитель;
//		КонецЕсли;
//		
//		Если ИндексПодписанта = 2 Тогда 
//			ТабДокумент.Вывести(ОбластьСтрокаПодвала);
//			ИндексПодписанта = ИндексПодписанта - 1;
//			ОбластьСтрокаПодвала = Макет.ПолучитьОбласть("СтрокаПодвала");
//		Иначе 
//			ИндексПодписанта = ИндексПодписанта + 1;
//		КонецЕсли;
//		
//		ИсходнаяСтрока = Шапка.Автор.ФизЛицо.Наименование;
//		
//		Фамилия 	= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 1);
//		Имя 		= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 2);
//		Отчество 	= КТ_ОбщегоНазначенияСервер.ВыделитьСлово(ИсходнаяСтрока, 3);
//		
//		ПредставлениеФизЛица = Фамилия + " " + Лев(Имя, 1) + "." + ?(Не ПустаяСтрока(Отчество), " " + Лев(Отчество, 1) + ".", "");
//		
//		ОбластьСтрокаПодвала.Параметры["Должность" + ИндексПодписанта] = "Исполнитель:";
//		ОбластьСтрокаПодвала.Параметры["ОтветственноеЛицо" + ИндексПодписанта] = ПредставлениеФизЛица;
//		ТабДокумент.Вывести(ОбластьСтрокаПодвала);    	
//		
//		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
//		
//	КонецЦикла;
//	
//	Возврат ТабДокумент;

//КонецФункции // ПечатьЗаявкиНаОплату()

//Функция ПечатьАнализПоДокументамОснования(МассивОбъектов, ОбъектыПечати)

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	ЗаявкаНаОплату.Ссылка,
//	               |	ЗаявкаНаОплату.ВерсияДанных,
//	               |	ЗаявкаНаОплату.ПометкаУдаления,
//	               |	ЗаявкаНаОплату.Номер,
//	               |	ЗаявкаНаОплату.Дата,
//	               |	ЗаявкаНаОплату.Проведен,
//	               |	ЗаявкаНаОплату.Организация,
//	               |	ЗаявкаНаОплату.ЦФО,
//	               |	ЗаявкаНаОплату.Контрагент,
//	               |	ЗаявкаНаОплату.Договор,
//	               |	ЗаявкаНаОплату.СчетОрганизации,
//	               |	ЗаявкаНаОплату.СчетКонтрагента,
//	               |	ЗаявкаНаОплату.НазначениеПлатежа,
//	               |	ЗаявкаНаОплату.ВидПлатежа,
//	               |	ЗаявкаНаОплату.ОплатитьДо,
//	               |	ЗаявкаНаОплату.Статус,
//	               |	ЗаявкаНаОплату.Сумма,
//	               |	ЗаявкаНаОплату.ДокументОснование,
//	               |	ЗаявкаНаОплату.РуководительАналитескогоЦентра,
//	               |	ЗаявкаНаОплату.Валюта,
//	               |	ЗаявкаНаОплату.Автор,
//	               |	ЗаявкаНаОплату.ДатаИзменения,
//	               |	ЗаявкаНаОплату.ПериодС,
//	               |	ЗаявкаНаОплату.ПериодПо,
//	               |	ЗаявкаНаОплату.ВидДвиженияДенежныхСредств,
//	               |	ЗаявкаНаОплату.Период,
//	               |	ЗаявкаНаОплату.Исполнитель,
//	               |	ЗаявкаНаОплату.ДатаРеестра,
//	               |	ЗаявкаНаОплату.ДатаОплаты,
//	               |	ЗаявкаНаОплату.Месторождение,
//	               |	ЗаявкаНаОплату.КоличествоЗаявокПоДоговору,
//	               |	ЗаявкаНаОплату.СрочныйПлатеж,
//	               |	ЗаявкаНаОплату.ФормаОплаты,
//	               |	ЗаявкаНаОплату.Комментарий,
//	               |	ЗаявкаНаОплату.ВнеРеестра,
//	               |	ЗаявкаНаОплату.РучнаяКорректировка,
//	               |	ЗаявкаНаОплату.СуммаДокумента,
//	               |	ЗаявкаНаОплату.Организация.ФайлЛоготипа КАК ЛоготипОрганизации
//	               |ИЗ
//	               |	Документ.ЗаявкаНаОплату КАК ЗаявкаНаОплату
//	               |ГДЕ
//	               |	ЗаявкаНаОплату.Ссылка В(&МассивОбъектов)";

//	Шапка = Запрос.Выполнить().Выбрать();

//	ТабДокумент = Новый ТабличныйДокумент;
//	ТабДокумент.ИмяПараметровПечати = "Имя_ПараметровПечати_АнализПоДокументамОснования";
//	
//	ТабДокумент.АвтоМасштаб = Истина;
//	
//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаОплату.ПФ_MXL_АнализПоДоговору");
//	
//	Пока Шапка.Следующий() Цикл
//		
//		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
//			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//		
//		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
//		
//		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
//		
//		Если ЗначениеЗаполнено(Шапка.ЛоготипОрганизации) Тогда
//			СсылкаНаДвоичныеДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(Шапка.ЛоготипОрганизации).СсылкаНаДвоичныеДанныеФайла;
//			Если ЗначениеЗаполнено(СсылкаНаДвоичныеДанныеФайла) Тогда
//				ОбластьЗаголовок.Рисунки.Логотип.Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла));
//			КонецЕсли;
//		КонецЕсли;	
//		
//		ОбластьЗаголовок.Параметры.Заголовок 						= "Анализ договора по состоянию на " + Формат(Шапка.Дата,"ДФ='dd.MM.yyyy ""г.""'");	
//		ОбластьЗаголовок.Параметры.Контрагент	     				= Шапка.Контрагент;
//		ОбластьЗаголовок.Параметры.Договор	 						= Шапка.Договор;
//		ОбластьЗаголовок.Параметры.ОбеспечениеИсполнениеДоговора 	= Формат(Шапка.Договор.ОбеспечениеИсполнениеДоговора, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//		ОбластьЗаголовок.Параметры.СуммаДоговора   					= Формат(Шапка.Договор.СуммаДоговора, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//		
//		// сколько оплачено по договору
//		ЗапросРКО = Новый Запрос;
//		ЗапросРКО.Текст = "ВЫБРАТЬ
//		|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента
//		|ИЗ
//		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
//		|ГДЕ
//		|	РасходныйКассовыйОрдер.РасшифровкаПлатежа.ДоговорКонтрагента = &Договор
//		|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
//		|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА";
//		
//		ЗапросРКО.УстановитьПараметр("Договор", Шапка.Договор);
//		
//		РезультатРКО = ЗапросРКО.Выполнить().Выгрузить();
//		
//		ИтогРКО = РезультатРКО.Итог("СуммаДокумента");
//		
//		ЗапросППИсходящее = Новый Запрос;
//		ЗапросППИсходящее.Текст = "ВЫБРАТЬ
//		|	СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента) КАК СуммаДокумента
//		|ИЗ
//		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
//		|ГДЕ
//		|	ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа.ДоговорКонтрагента = &Договор
//		|	И ПлатежноеПоручениеИсходящее.Оплачено = ИСТИНА
//		|	И ПлатежноеПоручениеИсходящее.Проведен";
//		
//		ЗапросППИсходящее.УстановитьПараметр("Договор", Шапка.Договор);
//		
//		РезультатППИсходящее = ЗапросППИсходящее.Выполнить().Выгрузить();
//		
//		ИтогППИсходящее = РезультатППИсходящее.Итог("СуммаДокумента");
//		СуммаВсегоОплачено = ИтогППИсходящее + ИтогРКО;
//		
//		СписокСчетов = Новый СписокЗначений;
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3310"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3320"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3330"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3397"));
//		
//		ЗапросИтогСМинусом = Новый Запрос;
//		ЗапросИтогСМинусом.Текст = "ВЫБРАТЬ
//		|	ТиповойДвиженияССубконто.Сумма,
//		|	ТиповойДвиженияССубконто.Регистратор.Ссылка КАК Ссылка,
//		|	ТиповойДвиженияССубконто.Регистратор.Дата КАК Дата,
//		|	ТиповойДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСумма
//		|ИЗ
//		|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
//		|			,
//		|			,
//		|			СчетДт = &СчетДт
//		|				И СчетКт В ИЕРАРХИИ (&СписокСчетов)
//		|				И СубконтоКт2 = &Договор) КАК ТиповойДвиженияССубконто";
//		
//		ЗапросИтогСМинусом.УстановитьПараметр("Договор", Шапка.Договор);
//		ЗапросИтогСМинусом.УстановитьПараметр("СчетДт", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);  // 1030
//		ЗапросИтогСМинусом.УстановитьПараметр("СписокСчетов", СписокСчетов);          
//		
//		РезультатИтогСМинусом = ЗапросИтогСМинусом.Выполнить().Выгрузить();
//		Если РезультатИтогСМинусом.Количество() > 0 Тогда
//			Если Шапка.Договор.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
//				СуммаВсегоОплачено = СуммаВсегоОплачено - РезультатИтогСМинусом.Итог("ВалютнаяСумма")
//			Иначе	
//				СуммаВсегоОплачено = СуммаВсегоОплачено - РезультатИтогСМинусом.Итог("Сумма")
//			КонецЕсли;
//		КонецЕсли;
//		
//		СписокСчетов = Новый СписокЗначений;
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3010"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3020"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3030"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3040"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3050"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3310"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3320"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3323"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3330"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3339"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3340"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3360"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3370"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3380"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3391"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3392"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3393"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3395"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3397"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3410"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3420"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3440"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3510"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3511"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3512"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3530"));
//		СписокСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("3540"));
//		
//		// рассчёт остатка по договору
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	СчетФактураПолученный.Ссылка,
//		|	СчетФактураПолученный.Дата КАК Дата,
//		|	СчетФактураПолученный.СуммаДокумента,
//		|	NULL КАК Содержание,
//		|	NULL КАК СубконтоДт1
//		|ИЗ
//		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
//		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
//		|		ИЗ
//		|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
//		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
//		|				ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = Сторнирование.ДокументОснование
//		|					И (СчетФактураПолученныйДокументыОснования.Ссылка.ДоговорКонтрагента = &Договор)
//		|					И (СчетФактураПолученныйДокументыОснования.Ссылка.Проведен)
//		|					И (НЕ Сторнирование.ПометкаУдаления)) КАК ВложенныйЗапрос
//		|		ПО СчетФактураПолученный.Ссылка = ВложенныйЗапрос.Ссылка
//		|ГДЕ
//		|	СчетФактураПолученный.ДоговорКонтрагента = &Договор
//		|	И СчетФактураПолученный.Проведен
//		|	И ВложенныйЗапрос.Ссылка ЕСТЬ NULL 
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ТиповойДвиженияССубконто.Регистратор,
//		|	ТиповойДвиженияССубконто.Период,
//		|	ТиповойДвиженияССубконто.ВалютнаяСуммаКт,
//		|	ТиповойДвиженияССубконто.Содержание,
//		|	ТиповойДвиженияССубконто.СубконтоДт1
//		|ИЗ
//		|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
//		|			,
//		|			,
//		|			Регистратор ССЫЛКА Документ.ОперацияБух
//		|				И СчетКт В (&СписокСчетов)
//		|				И СубконтоКт2 = &Договор,
//		|			,
//		|			) КАК ТиповойДвиженияССубконто
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ГТДИмпорт.ДокументОснование,
//		|	ГТДИмпорт.ДокументОснование.Дата,
//		|	ГТДИмпорт.ДокументОснование.СуммаДокумента,
//		|	NULL,
//		|	NULL
//		|ИЗ
//		|	Документ.ГТДИмпорт КАК ГТДИмпорт
//		|ГДЕ
//		|	ГТДИмпорт.ДокументОснование.ДоговорКонтрагента = &Договор
//		|	И ГТДИмпорт.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
//		|	И ГТДИмпорт.ДокументОснование.Проведен
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Дата
//		|АВТОУПОРЯДОЧИВАНИЕ";
//		
//		Запрос.УстановитьПараметр("Договор", Шапка.Договор);
//		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
//		
//		СписокОснований = Запрос.Выполнить().Выгрузить();
//		Результат = СписокОснований.Скопировать();
//		
//		СписокОснований.Свернуть("Ссылка");
//		
//		СуммаСФ = Результат.Итог("СуммаДокумента");
//		ИтогоОстатокПоДоговору = КТ_ОбщегоНазначенияСервер.ПолучитьОстатокПоДоговору(Шапка.Договор);
//		ОбластьЗаголовок.Параметры.ОстатокДоговора = Формат(ИтогоОстатокПоДоговору, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + Шапка.Договор.ВалютаВзаиморасчетов.Наименование;
//		ТабДокумент.Вывести(ОбластьЗаголовок);
//		
//		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
//		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОснованияДляОплатыОбороты.СуммаРасход,
//		|	ОснованияДляОплатыОбороты.ДокументОснование
//		|ИЗ
//		|	РегистрНакопления.ОснованияДляОплаты.Обороты(, , , ) КАК ОснованияДляОплатыОбороты
//		|ГДЕ
//		|	ОснованияДляОплатыОбороты.Договор = &Договор
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ОснованияДляОплатыОбороты.ДокументОснование.Дата";
//		
//		Запрос.УстановитьПараметр("Договор", Шапка.Договор);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		ИтогоПолучено = 0;
//		ИтогоОплачено = 0;
//		
//		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
//		
//		Пока Выборка.Следующий() Цикл
//			
//			ОбластьСтрокаТаблицы.Параметры.ДокументОснование = Выборка.ДокументОснование;
//			ОбластьСтрокаТаблицы.Параметры.СуммаПолучено = Выборка.ДокументОснование.СуммаДокумента;
//			ОбластьСтрокаТаблицы.Параметры.СуммаОплачено  = Выборка.СуммаРасход;
//			
//			ИтогоПолучено = ИтогоПолучено + Выборка.ДокументОснование.СуммаДокумента;
//			ИтогоОплачено = ИтогоОплачено + Выборка.СуммаРасход;
//			
//			ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
//			
//		КонецЦикла;
//		
//		ОбластьИтоги = Макет.ПолучитьОбласть("ИтогиТаблицы");
//		ОбластьИтоги.Параметры.ИтогоПолучено = ИтогоПолучено;
//		ОбластьИтоги.Параметры.ИтогоОплачено = ИтогоОплачено;
//		ТабДокумент.Вывести(ОбластьИтоги);
//		
//		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
//		ОбластьПодвал.Параметры.Исполнитель = Шапка.Автор;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	РуководителиЦФОСрезПоследних.Руководитель
//		|ИЗ
//		|	РегистрСведений.РуководителиЦФО.СрезПоследних(&ДатаЗаявки, ЦФО = &ЦФО) КАК РуководителиЦФОСрезПоследних";
//		
//		Запрос.УстановитьПараметр("ЦФО", Шапка.ЦФО);
//		Запрос.УстановитьПараметр("ДатаЗаявки", Шапка.Дата);
//		
//		ВыборкаРуководителей = Запрос.Выполнить().Выбрать();
//		
//		Пока ВыборкаРуководителей.Следующий() Цикл
//			ОбластьПодвал.Параметры.НачальникОтдела = ВыборкаРуководителей.Руководитель;
//		КонецЦикла;	
//		
//		ТабДокумент.Вывести(ОбластьПодвал);
//		
//	КонецЦикла;
//	
//	Возврат ТабДокумент;
//	
//КонецФункции

//Функция ВычислитьСрокОплатыПоДокументуОснование(Дата, КоличествоДней)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, &КоличествоДней) КАК Резульатат";
//	
//	Запрос.УстановитьПараметр("Дата", Дата);
//	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
//	
//	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//		Возврат Формат(ВыборкаДетальныеЗаписи.Резульатат, "ДФ=dd.MM.yyyy");
//	Иначе
//		Возврат "";
//	КонецЕсли;
//	
//КонецФункции

//// Функция формирует табличный документ с печатной формой заказа или счета,
//// разработанного методистами
////
//// Возвращаемое значение:
////  Табличный документ - сформированная печатная форма
////
//Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати) Экспорт

//	УстановитьПривилегированныйРежим(Истина);
//	
//	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
//		ВыводитьКоды    = Истина;
//		Колонка         = "Артикул";
//		ТекстКодАртикул = "Артикул";
//	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
//		ВыводитьКоды    = Истина;
//		Колонка         = "Код";
//		ТекстКодАртикул = "Код";		
//	Иначе
//		ВыводитьКоды    = Ложь;
//		Колонка         = "";
//		ТекстКодАртикул = "Код";
//	КонецЕсли;
//	
//	Если ВыводитьКоды Тогда
//		ОбластьШапки  = "ШапкаТаблицыСКодом";
//		ОбластьСтроки = "СтрокаСКодом";
//	Иначе
//		ОбластьШапки  = "ШапкаТаблицы";
//		ОбластьСтроки = "Строка";
//	КонецЕсли;

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
//	Запрос.Текст ="
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Ссылка,
//	|	Номер,
//	|	Дата,
//	|	ДоговорКонтрагента,
//	|	Организация,
//	|	Организация.ФайлЛоготипа КАК ЛоготипОрганизации,
//	|	СтруктурноеПодразделение,
//	|	Контрагент КАК Получатель,
//	|	Организация КАК Руководители,
//	|	Организация КАК Поставщик,
//	|	СтруктурнаяЕдиница,
//	|	СуммаДокумента,
//	|	ВалютаДокумента,
//	|	УчитыватьНДС,
//	|	СуммаВключаетНДС,
//	|   КодНазначенияПлатежа,
//	|	Ответственный
//	|ИЗ
//	|	Документ.СчетНаОплатуПокупателю КАК ЗаказПокупателя
//	|
//	|ГДЕ
//	|	ЗаказПокупателя.Ссылка В (&МассивОбъектов)";

//	Шапка = Запрос.Выполнить().Выбрать();

//	ТабДокумент = Новый ТабличныйДокумент;
//	ТабДокумент.КлючПараметровПечати = "СчетНаОплатуПокупателю_СчетЗаказ";
//                   
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	ВложенныйЗапрос.Ссылка КАК Ссылка,
//				   |	ВложенныйЗапрос.Номенклатура,
//				   |	ВложенныйЗапрос.Товар,
//				   |	ВложенныйЗапрос.КодАртикул,
//				   |	ВложенныйЗапрос.Количество,
//				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
//				   |	ВложенныйЗапрос.Цена,
//				   |	ВложенныйЗапрос.Сумма,
//				   |	ВложенныйЗапрос.СуммаНДС,
//				   |	ВложенныйЗапрос.НомерСтроки,
//				   |	ВложенныйЗапрос.ID
//				   |ИЗ
//				   |	(ВЫБРАТЬ 
//	               |	ВложенныйЗапрос.Ссылка КАК Ссылка,
//	               |	ВложенныйЗапрос.Номенклатура,
//	               |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
//	               |	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
//	               |	ВложенныйЗапрос.Количество,
//	               |	ВложенныйЗапрос.ЕдиницаИзмерения,
//	               |	ВложенныйЗапрос.Цена,
//	               |	ВложенныйЗапрос.Сумма,
//	               |	ВложенныйЗапрос.СуммаНДС,
//	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
//	               |	1 КАК ID
//	               |ИЗ
//	               |	(ВЫБРАТЬ
//	               |		ЗаказПокупателя.Ссылка КАК Ссылка,
//	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
//	               |		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
//	               |		ЗаказПокупателя.Цена КАК Цена,
//	               |		СУММА(ЗаказПокупателя.Количество) КАК Количество,
//	               |		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
//	               |		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
//	               |		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
//	               |	ИЗ
//	               |		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
//	               |	ГДЕ
//	               |		ЗаказПокупателя.Ссылка В (&МассивОбъектов)
//	               |	
//	               |	СГРУППИРОВАТЬ ПО
//	               |		ЗаказПокупателя.Ссылка,
//	               |		ЗаказПокупателя.Номенклатура,
//	               |		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
//	               |		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
//	               |
//	               |ОБЪЕДИНИТЬ ВСЕ
//	               |
//	               |ВЫБРАТЬ
//	               |	ЗаказПокупателя.Ссылка,
//	               |	ЗаказПокупателя.Содержание,
//	               |	ЗаказПокупателя.Содержание,
//	               |	ЗаказПокупателя.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
//	               |	ЗаказПокупателя.Количество,
//	               |	ЕСТЬNULL(ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование, ""--""),
//	               |	ЗаказПокупателя.Цена,
//	               |	ЗаказПокупателя.Сумма,
//	               |	ЗаказПокупателя.СуммаНДС,
//	               |	ЗаказПокупателя.НомерСтроки,
//	               |	2
//	               |ИЗ
//	               |	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
//	               |ГДЕ
//	               |	ЗаказПокупателя.Ссылка В (&МассивОбъектов)
//	               |
//	               |ОБЪЕДИНИТЬ ВСЕ
//	               |
//	               |ВЫБРАТЬ
//	               |	ЗаказПокупателя.Ссылка,
//	               |	ЗаказПокупателя.ОсновноеСредство,
//	               |	ВЫРАЗИТЬ(ЗаказПокупателя.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
//	               |	NULL,
//	               |	1,
//	               |	""шт"",
//	               |	ЗаказПокупателя.Сумма,
//	               |	ЗаказПокупателя.Сумма,
//	               |	ЗаказПокупателя.СуммаНДС,
//	               |	ЗаказПокупателя.НомерСтроки,
//	               |	3
//	               |ИЗ
//	               |	Документ.СчетНаОплатуПокупателю.ОС КАК ЗаказПокупателя
//	               |ГДЕ
//	               |	ЗаказПокупателя.Ссылка В (&МассивОбъектов)) КАК ВложенныйЗапрос
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	ID,
//				   |	НомерСтроки
//				   |
//				   |ИТОГИ ПО
//				   |	Ссылка";

//	ВыборкаДанныхПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//				   
//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");

//	Пока Шапка.Следующий() Цикл
//		
//		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
//			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//		
//		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
//		
//		// Выводим шапку накладной
//		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Поставщик, Шапка.СтруктурноеПодразделение); 
//		СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
//		
//		ОбластьМакетаЗаголовокСчета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
//		ОбластьМакетаЗаголовокСчета.Параметры.Заполнить(Шапка);
//		ОбластьМакетаЗаголовокСчета.Параметры.ПоставщикРНН_БИН = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПоставщике, Шапка.Дата);
//	    ОбластьМакетаЗаголовокСчета.Параметры.ПоставщикКБЕ	 = СведенияОПоставщике.КБЕ;
//		Если ТипЗнч(Шапка.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
//			
//			Банк             = Шапка.СтруктурнаяЕдиница.Банк;
//			РеквизитыБанка   = Справочники.Банки.ПолучитьРеквизитыБанка(Банк);
//			БИК              = Справочники.Банки.ПолучитьБИКБанка(Шапка.Дата, РеквизитыБанка);
//			ГородБанка       = РеквизитыБанка.Город;
//			СтрокаГородБанка = ?(ПустаяСтрока(ГородБанка), "", НСтр("ru = ' г.'") + " " + ГородБанка);
//			НомерСчета       = Шапка.СтруктурнаяЕдиница.НомерСчета;
//			
//			ОбластьМакетаЗаголовокСчета.Параметры.БИКБанкаПолучателя   = БИК;
//			ОбластьМакетаЗаголовокСчета.Параметры.БанкПолучателя       = СокрЛП(Банк) + СтрокаГородБанка;
//			ОбластьМакетаЗаголовокСчета.Параметры.НомерСчетаПолучателя = НомерСчета;
//			
//		КонецЕсли;   
//		ОбластьМакетаЗаголовокСчета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",, Шапка.Дата);
//		ТабДокумент.Вывести(ОбластьМакетаЗаголовокСчета);			
//		
//		Если ЗначениеЗаполнено(Шапка.ЛоготипОрганизации) Тогда
//			СсылкаНаДвоичныеДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(Шапка.ЛоготипОрганизации).СсылкаНаДвоичныеДанныеФайла;
//			Если ЗначениеЗаполнено(СсылкаНаДвоичныеДанныеФайла) Тогда
//				ТабДокумент.Область("Логотип").Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла));
//			КонецЕсли;
//		КонецЕсли;	
//		
//		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
//		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Счет на оплату'"));
//		
//		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);

//		ОбластьМакетаПоставщик = Макет.ПолучитьОбласть("Поставщик");
//		ОбластьМакетаПоставщик.Параметры.Заполнить(Шапка);
//		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ИдентификационныйНомер,ПолноеНаименование,ЮридическийАдрес,Телефоны,",,Шапка.Дата);
//		ТабДокумент.Вывести(ОбластьМакетаПоставщик);

//		СведенияОПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
//		ОбластьМакетаПокупатель = Макет.ПолучитьОбласть("Покупатель");
//		ОбластьМакетаПокупатель.Параметры.Заполнить(Шапка);
//		ОбластьМакетаПокупатель.Параметры.ПредставлениеПолучателя = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИдентификационныйНомер,ПолноеНаименование,ЮридическийАдрес,Телефоны,",,Шапка.Дата);
//		ТабДокумент.Вывести(ОбластьМакетаПокупатель);

//		ОбластьМакетаДоговор = Макет.ПолучитьОбласть("Договор");
//		ОбластьМакетаДоговор.Параметры.Заполнить(Шапка);
//		ТабДокумент.Вывести(ОбластьМакетаДоговор);

//		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьШапки + "|НомерСтроки");
//		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьШапки + "|Данные");
//		ОбластьСуммы  = Макет.ПолучитьОбласть(ОбластьШапки + "|Сумма");

//		ТабДокумент.Вывести(ОбластьНомера);
//		Если ВыводитьКоды Тогда
//			ОбластьДанных.Параметры.Колонка = Колонка;
//		КонецЕсли;	
//		ТабДокумент.Присоединить(ОбластьДанных);
//		ТабДокумент.Присоединить(ОбластьСуммы);

//		ОбластьКолонкаТовар = Макет.Область("Товар");

//		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьСтроки + "|НомерСтроки");
//		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьСтроки + "|Данные");
//		ОбластьСуммы  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Сумма");

//		Сумма    = 0;
//		СуммаНДС = 0;
//		ВсегоСкидок    = 0;
//		ВсегоБезСкидок = 0;
//		СчетчикСтрок = 0;

//		ВыборкаДанныхПоДокументам.Сбросить();
//		ВыборкаДанныхПоДокументам.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка));
//		ДанныеПоДокументу = ВыборкаДанныхПоДокументам.Выбрать();

//		Пока ДанныеПоДокументу.Следующий() Цикл 

//			СчетчикСтрок = СчетчикСтрок + 1;
//			
//			ОбластьНомера.Параметры.НомерСтроки = СчетчикСтрок;
//			ТабДокумент.Вывести(ОбластьНомера);

//			ОбластьДанных.Параметры.Заполнить(ДанныеПоДокументу);
//			ОбластьДанных.Параметры.Товар       = СокрЛП(ДанныеПоДокументу.Товар);
//			ОбластьДанных.Параметры.Количество  = Формат(ДанныеПоДокументу.Количество, "ЧДЦ=3");
//			Если ВыводитьКоды Тогда
//				ОбластьДанных.Параметры.КодАртикул = ?(ДанныеПоДокументу.ID = 3, ДанныеПоДокументу.Номенклатура.Код, ДанныеПоДокументу.КодАртикул);				
//			КонецЕсли;
//			ТабДокумент.Присоединить(ОбластьДанных);
//			
//			ОбластьСуммы.Параметры.Заполнить(ДанныеПоДокументу);
//			ТабДокумент.Присоединить(ОбластьСуммы);
//			Сумма          = Сумма       + ДанныеПоДокументу.Сумма;
//			СуммаНДС       = СуммаНДС    + ДанныеПоДокументу.СуммаНДС;

//		КонецЦикла;

//		// Вывести Итого
//		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
//		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
//		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

//		ТабДокумент.Вывести(ОбластьНомера);
//		ТабДокумент.Присоединить(ОбластьДанных);
//		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
//		ТабДокумент.Присоединить(ОбластьСуммы);

//		// Вывести ИтогоНДС
//		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
//		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
//		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
//		
//		ТабДокумент.Вывести(ОбластьНомера);
//		Если Шапка.УчитыватьНДС Тогда
//			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
//			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаНДС,, "-");
//		КонецЕсли;
//		ТабДокумент.Присоединить(ОбластьДанных);
//		
//		ТабДокумент.Присоединить(ОбластьСуммы);
//		
//		// Вывести Сумму прописью
//		ОбластьМакетаСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
//		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
//		ОбластьМакетаСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
//			ДанныеПоДокументу.Количество(), 
//			ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
//			
//		ОбластьМакетаСуммаПрописью.Параметры.СуммаПрописью = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Всего к оплате: %1'"),
//			ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
//			
//		ТабДокумент.Вывести(ОбластьМакетаСуммаПрописью);

//		// Вывести подписи
//	   	ОбластьМакетаПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");
//		ОбластьМакетаПодвалЗаказа.Параметры.ФИОИсполнителя = "/" + Шапка.Ответственный.Наименование + "/";
//		
//		ОбластьМакетаПодвалЗаказа.Параметры.Заполнить(Шапка);
//		ТабДокумент.Вывести(ОбластьМакетаПодвалЗаказа);
//		
//		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
//		
//	КонецЦикла;

//	Возврат ТабДокумент;

//КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить,"ВЫБРАТЬ РАЗЛИЧНЫЕ","ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ТаблицаДокумента.Контрагент КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Автор КАК Контакт
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Предмет
	|	И (НЕ ТаблицаДокумента.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ШаблонВыбрать%",ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецЕсли
