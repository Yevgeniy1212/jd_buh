#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура РассчитатьСтоимость(Объект) Экспорт 

	СтруктураСтоимости = УправлениеВнеоборотнымиАктивамиСервер.РасчитатьСтоимостьОбъектаСтроительства(ИСТИНА,,
																Объект.СчетУчетаОбъектаСтроительстваБУ, , 
																Объект.ОбъектСтроительства,Объект.Организация,Объект.Дата);

	Объект.СтоимостьОбъектаСтроительстваБУ = СтруктураСтоимости.СтоимостьБУ;

КонецПроцедуры

// Заполняет счета учета ОС в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти) Экспорт
		
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИнвентарныйНомер) Тогда
		СтрокаТабличнойЧасти.ИнвентарныйНомер = СтрокаТабличнойЧасти.ОсновноеСредство.Код;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.ОсновныеСредства.ЗапретитьИспользоватьВПроводках Тогда 
			
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Типовой.ОсновныеСредства;
		  	
			СтрокаТабличнойЧасти.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетНачисленияАмортизацииБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.АмортизацияОсновныхСредств.ЗапретитьИспользоватьВПроводках Тогда 
			СтрокаТабличнойЧасти.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.АмортизацияОсновныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоПриобретению) Тогда
		Если НЕ ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению.ЗапретитьИспользоватьВПроводках Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации) Тогда
		Если НЕ ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость.ЗапретитьИспользоватьВПроводках Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетДоходовОтРеализацииБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов.ЗапретитьИспользоватьВПроводках Тогда 
			
			СтрокаТабличнойЧасти.СчетДоходовОтРеализацииБУ = ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов;
		
			СтрокаТабличнойЧасти.СчетДоходовОтРеализацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетДоходовОтРеализацииБУ));
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетСебестоимостиПриРеализацииБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов.ЗапретитьИспользоватьВПроводках Тогда 
			
			СтрокаТабличнойЧасти.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;
		
			СтрокаТабличнойЧасти.СчетСебестоимостиПриРеализацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетСебестоимостиПриРеализацииБУ)); 
			
		КонецЕсли;
	КонецЕсли;	
	
	// счета учета отклонений при передаче структурным подразделениям
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.ПрочиеДоходы.ЗапретитьИспользоватьВПроводках Тогда 
			СтрокаТабличнойЧасти.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеДоходы;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ) Тогда
		Если НЕ ПланыСчетов.Типовой.ПрочиеРасходы.ЗапретитьИспользоватьВПроводках Тогда 
			СтрокаТабличнойЧасти.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеРасходы;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает ТЗ со стоимостью ОС по бух. данным по счетам учета, указанных в документе
//
Функция ОпределитьСтоимостьПоСпискуОСДокумента(Организация, СписокОС, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("СписокОС",          СписокОС);
	Запрос.УстановитьПараметр("НачалоПериода",     КонецДня(Дата));
	Запрос.УстановитьПараметр("СубконтоОС",        ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СнятоСУчета",       Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ОС_БУ.ОсновноеСредство,
	              |	ОС_БУ.СчетУчетаБУ,
	              |	ОС_БУ.СчетНачисленияАмортизацииБУ
	              |ПОМЕСТИТЬ ВТ_ОС_БУ
	              |ИЗ
	              |	&СписокОС КАК ОС_БУ
	              |;
	              |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
				  |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
				  |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
				  |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
				  |	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
				  |ИЗ
				  |	ВТ_ОС_БУ КАК ОС_БУ
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
				  |		ПО ОС_БУ.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И ОС_БУ.СчетУчетаБУ = СтоимостьОС_БУ.Счет
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация И Субконто1 В (&СписокОС)) КАК АмортизацияОС_БУ
				  |		ПО ОС_БУ.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И ОС_БУ.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
				  |		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
				  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				  |			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
				  |		ИЗ
				  |			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
				  |		
				  |		ГДЕ 
				  |			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &НачалоПериода И
				  |			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
				  |			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(&СписокОС) И
				  |			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
				  |		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство";
				  
	ТЗ = Запрос.Выполнить().Выгрузить();

	Возврат ТЗ;

КонецФункции // ОпределитьСтоимостьПоСпискуОСДокумента()

Процедура ЗаполнитьТабличнуюЧастьДляСпискаОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт 
	
	СписокОС = Объект.ОС.Выгрузить(,"ОсновноеСредство, СчетУчетаБУ, СчетНачисленияАмортизацииБУ");
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства Тогда
		ТЗ = ОпределитьСтоимостьПоСпискуОСДокумента(Объект.Организация, СписокОС, Объект.Дата);
		
		Если ТЗ.Количество() > 0 Тогда
			
			Для Каждого Строка Из Объект.ОС Цикл
				
				СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство, "ОС_БУ");
				
				Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета) Тогда
					
					Если СтрокаТЗ = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> не отражалось в учете по указанной организации.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
					Иначе
						ТекстСообщения = НСтр("ru = 'Основное средство <%1> код <%2> снято с учета в указанной организации.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ОсновноеСредство, СокрЛП(Строка.ОсновноеСредство.Код));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
					КонецЕсли;
					
					Строка.ПервоначальнаяСтоимостьБУ = 0;
				Иначе
					Строка.ПервоначальнаяСтоимостьБУ		   = СтрокаТЗ.СтоимостьБУ;
					Строка.СтоимостьДляВычисленияАмортизацииБУ = Строка.ПервоначальнаяСтоимостьБУ;	
				КонецЕсли; //Если ?(СтрокаТЗ = Неопределено, Истина, СтрокаТЗ.СнятоСУчета)...
				
			КонецЦикла;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Данные для заполнения стоимости ОС отсутствуют.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
		КонецЕсли; //Если ТЗ.Количество() > 0 Тогда...
    КонецЕсли;
	

	Для Каждого Строка Из Объект.ОС Цикл
		
		//заполним по умолчанию объекты имущественного налога
		Строка.ОбъектИмущественногоНалога = Истина;
		
	КонецЦикла;
	
	//если вводим в эксплуатацию объект строительства - то 
	//раскидаем его стоимость на ОС
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		КоличествоОС = Объект.ОС.Количество();	
		СтоимостьОС = ?(КоличествоОС <>0, Объект.СтоимостьОбъектаСтроительстваБУ/КоличествоОС,0);
		Для Каждого Строка Из Объект.ОС Цикл
			Если Строка.ПервоначальнаяСтоимостьБУ = 0 Тогда
				Строка.ПервоначальнаяСтоимостьБУ = СтоимостьОС; 
			КонецЕсли;	
		КонецЦикла;	
		
		НераспределеннаяСтоимость = Окр(Объект.СтоимостьОбъектаСтроительстваБУ - Объект.ОС.Итог("ПервоначальнаяСтоимостьБУ"),2);
		Если НераспределеннаяСтоимость <> 0 И Строка <> Неопределено Тогда
			Строка.ПервоначальнаяСтоимостьБУ = Строка.ПервоначальнаяСтоимостьБУ  + 	НераспределеннаяСтоимость ;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗаполнитьСчетаУчетаВТабЧасти(Объект.ОС, "ОС", ИСТИНА, Объект.УчитыватьКПН, Объект);

КонецПроцедуры

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, Объект)Экспорт 
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, Объект);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, Объект) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(Объект.Организация, СтрокаТЧ.ОсновноеСредство, Объект.Дата);
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		
		Если НЕ ЗначениеЗаполнено (СтрокаТЧ.СчетУчетаНУ)Тогда
			СтрокаТЧ.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТЧ.СчетУчетаБУ));
		КонецЕсли;	
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()
   
// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)
	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ                      = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетНачисленияАмортизацииБУ      = СчетаУчета.СчетНачисленияАмортизацииБУ;	
		СтрокаТЧ.СчетДоходовОтРеализацииБУ  	  = СчетаУчета.СчетДоходовОтРеализацииБУ;	
		СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ  = СчетаУчета.СчетУчетаЗатратПоМодернизацииБУ;
		СтрокаТЧ.СчетУчетаНДСПоРеализации 		  = СчетаУчета.СчетУчетаНДСПоРеализации;
		СтрокаТЧ.СчетУчетаНДСПоПриобретению    	  = СчетаУчета.СчетУчетаНДСПоПриобретению;
							
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетНачисленияАмортизацииБУ) Тогда
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.АмортизацияОсновныхСредств;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовОтРеализацииБУ) Тогда
			СтрокаТЧ.СчетДоходовОтРеализацииБУ = ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ) Тогда
			СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ) Тогда
			СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ = ПланыСчетов.Типовой.КапитальныйРемонтОС;
		КонецЕсли;
		     		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТЧ.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Объект, Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя принять к учету группу основных средств!'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли; 
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, , , , , Основание);

		Объект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства;
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Объект.Организация 	  		 	= Основание.Организация;
		Объект.СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		Объект.СпособПоступления 		= Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату; 
		Объект.ВидОперации		  		= Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства;
		Объект.ДокументОснование 		= Основание;
		
		ДанныеОбъекта = Новый Структура;
		
		Объект.ОС.Очистить();
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			НоваяСтрока = Объект.ОС.Добавить();
			НоваяСтрока.ОсновноеСредство 		   = ТекСтрокаОС.ОсновноеСредство;
			НоваяСтрока.ИнвентарныйНомер		   = ТекСтрокаОС.ОсновноеСредство.Код;
			НоваяСтрока.СчетУчетаБУ		 		   = ТекСтрокаОС.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНУ		 		   = ТекСтрокаОС.СчетУчетаНУ;
			НоваяСтрока.СчетУчетаНДСПоПриобретению = ТекСтрокаОС.СчетУчетаНДС;
			
			Сумма 	 = Окр((ТекСтрокаОС.Сумма * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0,1,Основание.КратностьВзаиморасчетов)),2);
			СуммаНДС = Окр((ТекСтрокаОС.СуммаНДС * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0,1,Основание.КратностьВзаиморасчетов)),2);
			
			НоваяСтрока.ПервоначальнаяСтоимостьБУ 			= Сумма;
			НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма;
			
			Если Основание.НДСВключенВСтоимость И НЕ Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.ПервоначальнаяСтоимостьБУ			= Сумма + СуммаНДС;
				НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма + СуммаНДС;								
			ИначеЕсли НЕ Основание.НДСВключенВСтоимость И Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.ПервоначальнаяСтоимостьБУ 			= Сумма - СуммаНДС;
				НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма - СуммаНДС;				
			КонецЕсли;
			
			НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаОС.ПодразделениеОрганизации;
			НоваяСтрока.МОЛ = ТекСтрокаОС.МОЛОрганизации;
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, НоваяСтрока);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Объект.Организация 			 	= Основание.Организация;
		Объект.СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		Объект.СпособПоступления 		= Перечисления.СпособыПоступленияАктивов.ПоРезультатамИнвентаризации; 
		Объект.ВидОперации		  		= Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
		Объект.ДокументОснование 		= Основание; 
		Объект.КорСчетОприходованияБУ 	= ПланыСчетов.Типовой.ПрочиеДоходы;
		
		Объект.ОС.Очистить();
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			Если НЕ ТекСтрокаОС.НаличиеПоДаннымУчета И ТекСтрокаОС.НаличиеФактическое Тогда
				НоваяСтрока = Объект.ОС.Добавить();
				НоваяСтрока.ОсновноеСредство 		  = ТекСтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПервоначальнаяСтоимостьБУ = ТекСтрокаОС.СтоимостьФактическая;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание)	 = Тип("ДокументСсылка.РеструктуризацияОС") Тогда
		
		Объект.Организация				= Основание.Организация;
		Объект.СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		Объект.СпособПоступления 		= Перечисления.СпособыПоступленияАктивов.Иное; 
		Объект.ВидОперации		 		= Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства;
		Объект.ДокументОснование		= Основание; 
		
		ЗаполнитьТабличнуюЧастьОСПоРеструктуризации(Объект, Основание);
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);

КонецПроцедуры

// Заполняет табличную часть ОС по данным документа-основания "Реструктуризация ОС"
//
Процедура ЗаполнитьТабличнуюЧастьОСПоРеструктуризации(Объект, Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РеструктуризацияОСОС.ОсновноеСредство,
				   |	РеструктуризацияОСОС.ОсновноеСредство.Код КАК КодОС,
				   |	РеструктуризацияОСОС.СтоимостьБУ,
				   |	РеструктуризацияОСОС.СчетУчетаБУ,
				   |	РеструктуризацияОСОС.СчетУчетаНУ
				   |ИЗ
				   |	Документ.РеструктуризацияОС.ОС КАК РеструктуризацияОСОС
				   |ГДЕ
				   |	РеструктуризацияОСОС.Ссылка = &Основание
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	РеструктуризацияОСОС.НомерСтроки";	
				   
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.ОС.Очистить();
		
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ОС.Добавить();
		
		СтрокаТЧ.ОсновноеСредство 					 = Выборка.ОсновноеСредство;
		СтрокаТЧ.ИнвентарныйНомер 					 = Выборка.КодОС;
		СтрокаТЧ.ПервоначальнаяСтоимостьБУ			 = Выборка.СтоимостьБУ;
		СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ = Выборка.СтоимостьБУ;
		СтрокаТЧ.СчетУчетаБУ 						 = Выборка.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНУ						 = Выборка.СчетУчетаНУ;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка"						  , ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимОС"				      , НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;          	
	            	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
		
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период);
	ВедетсяАналитУчетОсПоМОЛ 			= УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период);	
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");	           	
			          	
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхразницБалансовымМетодом", ВедениеУчетаВременныхразницБалансовымМетодом);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	Запрос.УстановитьПараметр("Содержание"   , НСтр("ru = 'Принят к учету объект ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВедетсяАналитУчетОсПоМОЛ",ВедетсяАналитУчетОсПоМОЛ);
	Запрос.УстановитьПараметр("ВедетсяАналитУчетОсПоПодразделениям",ВедетсяАналитУчетОсПоПодразделениям);
	Запрос.УстановитьПараметр("Содержание"   , НСтр("ru = 'Принят к учету объект ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	                       	
	Запрос.УстановитьПараметр("СинонимТовары"   , НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст =   ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
					+ ТекстЗапросаПервоначальныеСведенияОС(НомераТаблиц)
					+ ТекстЗапросаСостоянияОС(НомераТаблиц)
					+ ТекстЗапросаМестонахождениеОС(НомераТаблиц)
					+ ТекстЗапросаГрафикиАмортизацииОС(НомераТаблиц)
					+ ТекстЗапросаНачислениеАмортизацииОС(НомераТаблиц)
					+ ТекстЗапросаПараметрыАмортизацииОС(НомераТаблиц)
					+ ТекстЗапросаСпособыОтраженияРасходовПоАмортизацииОС(НомераТаблиц)
					+ ТекстЗапросаСобытияОС(НомераТаблиц)
					+ ТекстЗапросаСчетаУчетаОС(НомераТаблиц)
					+ ТекстЗапросаПоМестнымНалогам(НомераТаблиц) 				
					+ ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц,ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПринятиеКУчетуОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаОтраженияЗатратНУПреференций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТаблицаСписанияТоварыОрганизаций(НомераТаблиц,ПараметрыПроведения,Реквизиты)
					;
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	             	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");	

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ПринятиеКУчетуОС"" КАК ВидДокумента,
	|	&СинонимОС КАК ИмяСписка,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.Организация,
	|	Реквизиты.УчитыватьКПН,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету) КАК Состояние,
	|	Реквизиты.Номер,
	|	Реквизиты.ДокументОснованиеДата,
	|	Реквизиты.ДокументОснованиеНомер,
	|	Реквизиты.КорСубконтоОприходованияБУ1,
	|	Реквизиты.КорСубконтоОприходованияБУ2,
	|	Реквизиты.КорСубконтоОприходованияБУ3,
	|	Реквизиты.КорСубконтоОприходованияНУ1,
	|	Реквизиты.КорСубконтоОприходованияНУ2,
	|	Реквизиты.КорСубконтоОприходованияНУ3,
	|	Реквизиты.КорСчетОприходованияБУ,
	|	Реквизиты.КорСчетОприходованияНУ,
	|	Реквизиты.Номенклатура,
	|	Реквизиты.ОбъектСтроительства,
	|	Реквизиты.СобытиеОС,
	|	Реквизиты.СпособПоступления,
	|	Реквизиты.СтоимостьОбъектаСтроительстваБУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаНоменклатурыБУ,
	|	Реквизиты.СчетУчетаНоменклатурыНУ,
	|	Реквизиты.СчетУчетаОбъектаСтроительстваБУ,
	|	Реквизиты.СчетУчетаОбъектаСтроительстваНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Склад
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.ИмяСписка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.Состояние,
	|	Реквизиты.Номер,
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.ДокументОснованиеВид,
	|	Реквизиты.Организация,
	|	Реквизиты.ДокументОснованиеДата,
	|	Реквизиты.ДокументОснованиеНомер,
	|	Реквизиты.КорСубконтоОприходованияБУ1,
	|	Реквизиты.КорСубконтоОприходованияБУ2,
	|	Реквизиты.КорСубконтоОприходованияБУ3,
	|	Реквизиты.КорСубконтоОприходованияНУ1,
	|	Реквизиты.КорСубконтоОприходованияНУ2,
	|	Реквизиты.КорСубконтоОприходованияНУ3,
	|	Реквизиты.КорСчетОприходованияБУ,
	|	Реквизиты.КорСчетОприходованияНУ,
	|	Реквизиты.Номенклатура,
	|	Реквизиты.ОбъектСтроительства,
	|	Реквизиты.СобытиеОС,
	|	Реквизиты.СпособПоступления,
	|	Реквизиты.СтоимостьОбъектаСтроительстваБУ,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СчетУчетаНоменклатурыБУ,
	|	Реквизиты.СчетУчетаНоменклатурыНУ,
	|	Реквизиты.СчетУчетаОбъектаСтроительстваБУ,
	|	Реквизиты.СчетУчетаОбъектаСтроительстваНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.Склад
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	      	
	НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыДляИзмененияСостояний", НомераТаблиц.Количество()); 
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.Ссылка КАК Ссылка,
		|	ТаблицаОС.ГрафикАмортизацииБУ,
		|	ТаблицаОС.ГруппаНУ,
		|	ТаблицаОС.КоэффициентАмортизацииБУ,
		|	ТаблицаОС.КоэффициентУскоренияБУ,
		|	ТаблицаОС.МОЛ,
		|	ТаблицаОС.НачислятьАмортизациюБУ,
		|	ТаблицаОС.ОбъектЗемельногоНалога,
		|	ТаблицаОС.ОбъектИмущественногоНалога,
		|	ТаблицаОС.ОбъектТранспортногоНалога,
		|	ТаблицаОС.ОбъемПродукцииРаботБУ,
		|	ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ПараметрВыработкиБУ,
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.ПризнакФиксированногоАктива,
		|	ТаблицаОС.ПорядокПогашенияСтоимостиНУ,
		|	ТаблицаОС.СпособНачисленияАмортизацииБУ,
		|	ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ,
		|	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ,
		|	ТаблицаОС.СрокПолезногоИспользованияБУ,
		|	ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ,
		|	ТаблицаОС.СчетДоходовОтРеализацииБУ,
		|	ТаблицаОС.СчетДоходовОтРеализацииНУ,
		|	ТаблицаОС.СчетНачисленияАмортизацииБУ,
		|	ТаблицаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
		|	ТаблицаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
		|	ТаблицаОС.СчетСебестоимостиПриРеализацииБУ,
		|	ТаблицаОС.СчетСебестоимостиПриРеализацииНУ,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаЗатратПоМодернизацииБУ,
		|	ТаблицаОС.СчетУчетаНДСПоПриобретению,
		|	ТаблицаОС.СчетУчетаНДСПоРеализации,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.ИнвентарныйНомер
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаНомераГТД.Ссылка,
		|	ТаблицаНомераГТД.Количество КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
		|	ТаблицаНомераГТД.КлючСвязи
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.НомераГТД КАК ТаблицаНомераГТД
		|ГДЕ
		|	ТаблицаНомераГТД.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка КАК Регистратор,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Организация КАК Организация,
		|	&ПоддержкаРаботыСоСтруктурнымиПодразделениями,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СобытиеОС КАК СобытиеОС
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();		
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПервоначальныеСведенияОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПервоначальныеСведенияОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПервоначальныеСведенияОСБухгалтерскийУчет"" КАК ИмяСписка,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Ссылка КАК Регистратор,
	|	Реквизиты.СпособПоступления,
	|	ТаблицаОС.ИнвентарныйНомер,
	|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	ТаблицаОС.СпособНачисленияАмортизацииБУ КАК СпособНачисленияАмортизации,
	|	ТаблицаОС.ПараметрВыработкиБУ КАК ПараметрВыработки
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции  

Функция ТекстЗапросаСостоянияОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаСостоянияОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету) КАК СостояниеОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаМестонахождениеОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаМестонахождениеОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.Ссылка КАК Регистратор,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ТаблицаОС.ПодразделениеОрганизации КАК Местонахождение,
	               |	ТаблицаОС.МОЛ КАК МОЛ
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаГрафикиАмортизацииОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаГрафикиАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.Ссылка КАК Регистратор,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ТаблицаОС.ГрафикАмортизацииБУ КАК ГрафикАмортизации
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	НЕ ТаблицаОС.ГрафикАмортизацииБУ ЕСТЬ NULL 
	               |	И НЕ ТаблицаОС.ГрафикАмортизацииБУ = ЗНАЧЕНИЕ(Справочник.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаСобытияОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСобытияОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,	
	|	0 КАК СуммаЗатратБУ
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНачислениеАмортизацииОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНачислениеАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.НачислятьАмортизациюБУ КАК НачислятьАмортизацию
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаПараметрыАмортизацииОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаПараметрыАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.Ссылка КАК Регистратор,
	               |	Реквизиты.Организация КАК Организация,				   
	               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
				   |	ТаблицаОС.НачислятьАмортизациюБУ КАК НачислятьАмортизацию,
	               |	ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРабот,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ, 0) = 0
	               |			ТОГДА ТаблицаОС.СрокПолезногоИспользованияБУ
	               |		ИНАЧЕ ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ
	               |	КОНЕЦ КАК СрокИспользованияДляВычисленияАмортизации,
				   //|	ВЫБОР
				   //|		КОГДА ЕСТЬNULL(ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ, 0) = 0
				   //|			ТОГДА ТаблицаОС.ПервоначальнаяСтоимостьБУ
				   //|		ИНАЧЕ ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ
				   //|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизации,
				   |	
	               |		ЕСТЬNULL(ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ, 0) КАК СтоимостьДляВычисленияАмортизации,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ТаблицаОС.ПервоначальнаяСтоимостьБУ - ТаблицаОС.СтоимостьДляВычисленияАмортизацииБУ
	               |	КОНЕЦ КАК ЛиквидационнаяСтоимость,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ, 0) = 0
	               |			ТОГДА ТаблицаОС.ОбъемПродукцииРаботБУ
	               |		ИНАЧЕ ТаблицаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ
	               |	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	               |	ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	               |	ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	               |		ПО (ИСТИНА)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаСпособыОтраженияРасходовПоАмортизацииОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаСпособыОтраженияРасходовПоАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.НомерСтроки КАК Номер,
	               |	ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ КАК СпособОтраженияРасходовПоАмортизации
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |ГДЕ
	               |	ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
	               |	И НЕ ТаблицаОС.СпособОтраженияРасходовПоАмортизацииБУ ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаОС(НомераТаблиц)
		
	НомераТаблиц.Вставить("ТаблицаСчетаУчетаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	               |	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	ТаблицаОС.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	               |	Типовой.СчетНУ КАК СчетНачисленияАмортизацииНУ,
	               |	ТаблицаОС.СчетУчетаЗатратПоМодернизацииБУ КАК СчетУчетаЗатратПоМодернизацииБУ,
	               |	ТаблицаОС.СчетУчетаНДСПоПриобретению КАК СчетУчетаНДСПоПриобретению,
	               |	ТаблицаОС.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	               |	ТаблицаОС.СчетДоходовОтРеализацииБУ КАК СчетДоходовОтРеализацииБУ,
	               |	ТаблицаОС.СчетСебестоимостиПриРеализацииБУ КАК СчетСебестоимостиПриРеализацииБУ,
	               |	ТаблицаОС.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	ТаблицаОС.СчетДоходовОтРеализацииНУ КАК СчетДоходовОтРеализацииНУ,
	               |	ТаблицаОС.СчетСебестоимостиПриРеализацииНУ КАК СчетСебестоимостиПриРеализацииНУ,
	               |	ТаблицаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	               |	ТаблицаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	               |		ПО ТаблицаОС.СчетНачисленияАмортизацииБУ = Типовой.Ссылка" ;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
КонецФункции

Функция ТекстЗапросаСоставОС(НомераТаблиц,ПараметрыПроведения, Реквизиты)
	Если Не Реквизиты.ЕстьОС Тогда
		ПараметрыПроведения.Вставить("ТаблицаСоставОС", Неопределено);
		Возврат "";
	Иначе      
		
		НомераТаблиц.Вставить("ТаблицаСоставОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СоставОС.ОсновноеСредство,
		|	СоставОС.ВСоставеОС,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) КАК СостояниеВСоставеОС				   
		|ИЗ
		|	РегистрСведений.СоставОС.СрезПоследних(
		|		&НачалоПериода,
		|		ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство Из ТаблицаОС)
		|			И СостояниеВСоставеОС = Значение(Перечисление.ВидыСостоянийВСоставеОС.ВключеноВСостав)) КАК СоставОС";
		
		Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
КонецФункции
			   
Функция ТекстЗапросаОбъектыНалоговогоУчетаФА(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда		
		ПараметрыПроведения.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", Неопределено);		
	Иначе
		НомераТаблиц.Вставить("ТаблицаОбъектыНалоговогоУчетаФА", НомераТаблиц.Количество());		
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация,
		               	|	ТаблицаОС.ОсновноеСредство КАК ФиксированныйАктив,
		               	|	ТаблицаОС.ГруппаНУ,
		               	|	ТаблицаОС.ПорядокПогашенияСтоимостиНУ,
		               	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету) КАК СостояниеФиксированногоАктива
		               	|ИЗ
		               	|	ТаблицаОС КАК ТаблицаОС
		               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               	|		ПО (ИСТИНА)
		               	|ГДЕ
		               	|	ТаблицаОС.ПризнакФиксированногоАктива"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаФАУчитываемыеОтдельно(НомераТаблиц,ПараметрыПроведения,Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ   Тогда		
		ПараметрыПроведения.Вставить("ТаблицаФАУчитываемыеОтдельно", Неопределено);		
	Иначе  
		НомераТаблиц.Вставить("ТаблицаФАУчитываемыеОтдельно", НомераТаблиц.Количество());		
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТаблицаОС.ОСновноеСредство КАК ФиксированныйАктив,
		               |	ВЫБОР
		               |		КОГДА ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций)
		               |	КОНЕЦ КАК ВидЛьготыФА,
		               |	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету) КАК Событие
		               |ИЗ
		               |	ТаблицаОС КАК ТаблицаОС
		               |ГДЕ
		               |	ТаблицаОС.ПризнакФиксированногоАктива
		               |	И (ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме)
		               |			ИЛИ ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты)
		               |			ИЛИ ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями))"
					   
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоМестнымНалогам(НомераТаблиц)
	
	
	НомераТаблиц.Вставить("ТаблицаОбъектыИмущественногоНалога", НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаОбъектыТранспортногоНалога", НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаОбъектыЗемельногоНалога", НомераТаблиц.Количество());		
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ИСТИНА КАК НачислятьНалог,
	|	Реквизиты.СтруктурноеПодразделение КАК Местонахождение,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурнаяЕдиницаИмущественногоНалога
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОС.ОбъектИмущественногоНалога = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ИСТИНА КАК НачислятьНалог,
	|	Реквизиты.СтруктурноеПодразделение КАК Местонахождение,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурнаяЕдиницаТранспортногоНалога
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОС.ОбъектТранспортногоНалога = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектНалогообложения,
	|	ИСТИНА КАК НачислятьНалог,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	Реквизиты.СтруктурноеПодразделение КАК Местонахождение
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаОС.ОбъектЗемельногоНалога = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПринятиеКУчетуОС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства Тогда
		ПараметрыПроведения.Вставить("РеквизитыПринятиеКУчетуОС", Неопределено);		
		ПараметрыПроведения.Вставить("ТаблицаПринятиеКУчетуОС", Неопределено);		
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда		
		НомераТаблиц.Вставить("РеквизитыПринятиеКУчетуОС", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаПринятиеКУчетуОС", НомераТаблиц.Количество());
						
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Организация КАК Организация,
		|	&НеобходимостьОтраженияВНУ,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	&ВедетсяАналитУчетОсПоМОЛ КАК ВедетсяАналитУчетОсПоМОЛ,
		|	&ВедетсяАналитУчетОсПоПодразделениям КАК ВедетсяАналитУчетОсПоПодразделениям
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛ КАК МОЛ,
		|	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
		|	Реквизиты.КорСчетОприходованияБУ КАК КорСчет,
		|	Реквизиты.КорСубконтоОприходованияБУ1 КАК КорСубконтоОприходования1,
		|	Реквизиты.КорСубконтоОприходованияБУ2 КАК КорСубконтоОприходования2,
		|	Реквизиты.КорСубконтоОприходованияБУ3 КАК КорСубконтоОприходования3,
		|	ТаблицаОС.СчетУчетаНУ КАК СчетУчетаНУ,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Поступление) КАК ВидДвиженияСтоимостиФА,
		|	Реквизиты.КорСчетОприходованияНУ КАК КорСчетНУ,
		|	Реквизиты.КорСубконтоОприходованияНУ1 КАК КорСубконтоОприходованияНУ1,
		|	Реквизиты.КорСубконтоОприходованияНУ2 КАК КорСубконтоОприходованияНУ2,
		|	Реквизиты.КорСубконтоОприходованияНУ3 КАК КорСубконтоОприходованияНУ3,
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК Сумма,
		|	&Содержание КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
					   + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
					   
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда		
		НомераТаблиц.Вставить("РеквизитыПринятиеКУчетуОС", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаПринятиеКУчетуОС", НомераТаблиц.Количество());
						
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Организация КАК Организация,
		|	&НеобходимостьОтраженияВНУ,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	&ВедетсяАналитУчетОсПоМОЛ КАК ВедетсяАналитУчетОсПоМОЛ,
		|	&ВедетсяАналитУчетОсПоПодразделениям КАК ВедетсяАналитУчетОсПоПодразделениям
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛ КАК МОЛ,
		|	ТаблицаОС.СчетУчетаБУ КАК СчетУчетаБУ,
		|	Реквизиты.СчетУчетаОбъектаСтроительстваБУ КАК КорСчет,
		|	Реквизиты.ОбъектСтроительства КАК КорСубконтоОприходования1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоОприходования2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоОприходования3,
		|	ТаблицаОС.СчетУчетаНУ КАК СчетУчетаНУ,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Поступление) КАК ВидДвиженияСтоимостиФА,
		|	Реквизиты.СчетУчетаОбъектаСтроительстваНУ КАК КорСчетНУ,
		|	Реквизиты.ОбъектСтроительства КАК КорСубконтоОприходованияНУ1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоОприходованияНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоОприходованияНУ3,
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК Сумма,
		|	&Содержание КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
			
		КонецЕсли;
				   
	 Возврат ТекстЗапроса; 
	
КонецФункции

Функция ТекстЗапросаОтраженияЗатратНУПреференций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда				
		ПараметрыПроведения.Вставить("РеквизитыОтраженияЗатратНУ", Неопределено);		
		ПараметрыПроведения.Вставить("ТаблицаОтраженияЗатратНУ", Неопределено);				
	Иначе
		НомераТаблиц.Вставить("РеквизитыОтраженияЗатратНУ", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаОтраженияЗатратНУ", НомераТаблиц.Количество());
								
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Организация КАК Организация,
		|	&НеобходимостьОтраженияВНУ,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций) КАК СтатьяЗатрат,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.ЕдиновременноеСписаниеСтоимостиОбъектаПреференций) КАК ВидДвиженияСтоимостиФА,
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК Сумма,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам) КАК СчетДт,
		|	ТаблицаОС.СчетУчетаНУ КАК СчетКт
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаОС.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
					   
	КонецЕсли;
				   
	Возврат ТекстЗапроса; 
	
КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда 
		ПараметрыПроведения.Вставить("РеквизитыТовары",	Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("РеквизитыТовары",	НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());		
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Номер КАК Номер,
		|	Реквизиты.Организация КАК Организация,
		|	&НеобходимостьОтраженияВНУ,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
		|	&Содержание КАК Содержание
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.СчетУчетаНоменклатурыБУ КАК СчетУчетаБУ,
		|	Реквизиты.СчетУчетаНоменклатурыНУ КАК СчетУчетаНУ,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
		|	Реквизиты.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	1 КАК Количество,
		|	0 КАК Себестоимость,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Сумма,
		|	0 КАК СуммаВал,
		|	0 КАК СуммаНДСВал,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	Типовой.Забалансовый КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаОС.СчетУчетаБУ КАК КорСчетСписанияБУ,
		|	ТаблицаОС.СчетУчетаНУ КАК КорСчетСписанияНУ,
		|	ТаблицаОС.ОсновноеСредство КАК КорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоБУ3,
		|	ТаблицаОС.ОсновноеСредство КАК КорСубконтоНУ1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Поступление) КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитУчетОсПоМОЛ = ИСТИНА
		|			ТОГДА ТаблицаОС.МОЛ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК МОЛ,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитУчетОсПоПодразделениям = ИСТИНА
		|			ТОГДА ТаблицаОС.ПодразделениеОрганизации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	&Содержание КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО (Реквизиты.СчетУчетаНоменклатурыБУ = СпособОценкиЗапасовБУ.СчетЗапасов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетУчетаНоменклатурыБУ = Типовой.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСписанияТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения,  Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда 
		ПараметрыПроведения.Вставить("ТаблицаСписанияТоварыОрганизаций"  , Неопределено);
	Иначе
		
		НомераТаблиц.Вставить("ТаблицаСписанияТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НомераГТД.НомерГТД,
		|	НомераГТД.Количество КАК Количество,
		|	НомераГТД.КлючСвязи,
		|	Товары.Номенклатура КАК Товар,
		|	Товары.Склад,
		|	1 КАК Коэффициент,
		|	1 КАК НомерСтроки,
		|	"""" КАК ИмяСписка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаНомераГТД КАК НомераГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Товары
		|		ПО (НомераГТД.КлючСвязи = 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомераГТД.КлючСвязи" 
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();   				
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ДА-1 (Акт премки-передачи)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДА1";
	КомандаПечати.Представление = НСтр("ru = 'ДА-1 (Акт приемки-передачи)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;

	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДА1";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
	// Штрихкода ОС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБККлиент.ПечатьШтрихкодовОС";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ШтрихкодаОС";
	КомандаПечати.Представление = НСтр("ru = 'Штрихкоды ОС'");
	КомандаПечати.Порядок = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// ДА-1 (Акт премки-передачи)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДА1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДА1",
			НСтр("ru = 'ДА-1 (Акт приемки-передачи)'"),
			ПечатьДА1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_ДА1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьДА1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстПредседательКомиссии = НСтр("ru = 'Председатель комиссии'");
	ТекстЧленыКомиссии		  = НСтр("ru = 'Члены комиссии'");
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", ТекстПредседательКомиссии);
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        ТекстЧленыКомиссии);
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДокументОС.Ссылка КАК Ссылка,
	               |	ДокументОС.Дата КАК Дата,
	               |	ДокументОС.Номер КАК Номер,
	               |	ДокументОС.ВидОперации КАК ВидОперации,
	               |	ДокументОС.Организация КАК Организация,
	               |	ДокументОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ДокументОС.ДокументОснование КАК ДокументОснование,
	               |	ДокументОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	               |	ДокументОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	               |	ДокументОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	               |	ДокументОС.ДокументОснование.Контрагент КАК Контрагент,
	               |	ДокументОС.СчетУчетаОбъектаСтроительстваБУ КАК СчетУчетаОбъектаСтроительстваБУ,
	               |	ДокументОС.СчетУчетаНоменклатурыБУ КАК СчетУчетаНоменклатурыБУ,
	               |	ДокументОС.ИнвентаризационнаяКомиссия.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ФизЛицо КАК ФизЛицо,
	               |		Председатель КАК Председатель
	               |	) КАК ИнвентаризационнаяКомиссия,
	               |	ДокументОС.Подписант КАК Подписант,
	               |	ДокументОС.ДолжностьПодписанта КАК ДолжностьПодписанта
	               |ИЗ
	               |	Документ.ПринятиеКУчетуОС КАК ДокументОС
	               |ГДЕ
	               |	ДокументОС.Ссылка В(&Ссылка)
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаОС.Ссылка.Организация КАК Организация,
	               |	ТаблицаОС.Ссылка КАК Ссылка,
	               |	ТаблицаОС.МОЛ,
	               |	ТаблицаОС.ИнвентарныйНомер,
	               |	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ КАК СрокСлужбыПолезной,
	               |	ТаблицаОС.СчетУчетаБУ,
	               |	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК МаксПериод,
	               |	ТаблицаОС.НомерСтроки
	               |ПОМЕСТИТЬ ТаблицаОС
	               |ИЗ
	               |	Документ.ПринятиеКУчетуОС.ОС КАК ТаблицаОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	               |		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	               |			И ТаблицаОС.Ссылка.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	               |			И (ПервоначальныеСведенияОСБухгалтерскийУчет.Период <= КОНЕЦПЕРИОДА(ТаблицаОС.Ссылка.Дата, МЕСЯЦ))
	               |ГДЕ
	               |	ТаблицаОС.Ссылка В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОС.ОсновноеСредство,
	               |	ТаблицаОС.Ссылка.Организация,
	               |	ТаблицаОС.Ссылка,
	               |	ТаблицаОС.МОЛ,
	               |	ТаблицаОС.ИнвентарныйНомер,
	               |	ТаблицаОС.СрокИспользованияДляВычисленияАмортизацииБУ,
	               |	ТаблицаОС.СчетУчетаБУ,
	               |	ТаблицаОС.НомерСтроки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
	               |	ПОДСТРОКА(ТаблицаОС.ОсновноеСредство.ЗаводскойНомер, 1, 250) КАК ЗаводскойНомер,
	               |	ПОДСТРОКА(ТаблицаОС.ОсновноеСредство.НомерПаспорта, 1, 250) КАК НомерПаспорта,
	               |	ТаблицаОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	               |	ТаблицаОС.МОЛ,
	               |	ТаблицаОС.ИнвентарныйНомер,
	               |	ЕСТЬNULL(ПервоначальныеСведенияОС.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	               |	ТаблицаОС.СрокСлужбыПолезной,
	               |	ТаблицаОС.СчетУчетаБУ,
	               |	ТаблицаОС.Ссылка КАК Ссылка,
	               |	ТаблицаОС.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ТаблицаОС КАК ТаблицаОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОС
	               |		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	               |			И ТаблицаОС.Организация = ПервоначальныеСведенияОС.Организация
	               |			И ТаблицаОС.МаксПериод = ПервоначальныеСведенияОС.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |ИТОГИ ПО
	               |	Ссылка";
				   
   Запрос.Текст = ТекстЗапроса;
   ВыборкаСтрок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТабДокумент = Новый ТабличныйДокумент;
	
	
	// Загрузим настройки пользователя
	ТабДокумент.КлючПараметровПечати = "ПринятиеКУчетуОС_ДА1";

	//формирование печатной формы документа
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПринятиеКУчетуОС.киб_ПФ_MXL_ДА1");
	
	Пока ШапкаДокумента.Следующий() Цикл

		// Получаем области макета для вывода в табличный документ
		Шапка            		  = Макет.ПолучитьОбласть("Шапка");
		Таблица1		 		  = Макет.ПолучитьОбласть("Таблица1");
		СтрокаТаблицы1	 		  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		ЗаголовокТаблицы2		  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
		СтрокаТаблицы2   		  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
		ИтогоСтрокаТаблицы2		  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
		Приказ			 		  = Макет.ПолучитьОбласть("Приказ");
		Подвал           		  = Макет.ПолучитьОбласть("Подвал");	
		ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
		ОССдал			 		  = Макет.ПолучитьОбласть("ОССдал|Сдал");
		ПодвалВерх	     		  = Макет.ПолучитьОбласть("ПодвалВерх");
		ПодвалНиз	     		  = Макет.ПолучитьОбласть("ПодвалНиз");
		ПодвалДатаСдал   		  = Макет.ПолучитьОбласть("ПодвалДата|Сдал");
		ПодвалДатаПринял 		  = Макет.ПолучитьОбласть("ПодвалДата|Принял");
		ОСПринял		  		  = Макет.ПолучитьОбласть("ОССдал|Принял");
		Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
		ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера|Сдал");
		ПустаяСекцияСдал 		  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Сдал");
        //
		ПодвалМОЛ                 = Макет.ПолучитьОбласть("ПодвалМОЛ");
		киб_ПодвалНиз             = Макет.ПолучитьОбласть("киб_ПодвалНиз");
		ПодписьГлавБухаПринял     = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера|Принял");
		//
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок.Сбросить();
		
		Если ВыборкаСтрок.НайтиСледующий(ШапкаДокумента.Ссылка) Тогда
			ВыборкаСтрокОС = ВыборкаСтрок.Выбрать();
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно сформировать печатную форму ""ҰМА-1"" документа ""%1"", так как табличная часть ""ОС"" в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШапкаДокумента.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ШапкаДокумента.Ссылка);
			Продолжить;	
		КонецЕсли;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ШапкаДокумента.Организация, ШапкаДокумента.СтруктурноеПодразделение);
	
		////////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ШапкаДокумента.Дата);
		
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		
		// Организация-сдатчик
		ПредставлениеОрганизацииСдатчик = "";
		Если ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СведенияОбОрганизацииСдатчике					= ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ШапкаДокумента.Контрагент, ШапкаДокумента.Дата);
			ПредставлениеОрганизацииСдатчик				 	= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "ПолноеНаименование,");
			Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
			Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		ИначеЕсли ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.РеструктуризацияОС")
			ИЛИ ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
			ПредставлениеОрганизацииСдатчик					= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");			  
			Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;			
			Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		КонецЕсли;
		
		// Организация-получатель
		СведенияОбОрганизацииПолучателе					   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииПолучатель = СведенияОбОрганизацииПолучателе;
		Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ШапкаДокумента.Дата, "ru");
		
		Шапка.Параметры.НомерДок           		 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, ШапкаДокумента.Ссылка);
		Шапка.Параметры.ДатаДок           		 = Формат(ШапкаДокумента.Дата,"ДЛФ=Д"); 
		Шапка.Параметры.Дата           		 	 = СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года"); 
		
		
		ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();

	
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.Дата);
			Шапка.Параметры.ДолжностьПринял                = ДанныеПредседателя.Должность;
			Шапка.Параметры.РасшифровкаПодписиПринял       = ДанныеПредседателя.Представление;
		Иначе
			Шапка.Параметры.ДолжностьПринял                = "";
			Шапка.Параметры.РасшифровкаПодписиПринял       = "";
		КонецЕсли;
	
		//Шапка.Параметры.РасшифровкаПодписиПринял = Руководители.Руководитель;
		//Шапка.Параметры.ДолжностьПринял          = Руководители.РуководительДолжность;
		
		ТабДокумент.Вывести(Шапка);
					
		ТабДокумент.Вывести(Таблица1);
		
		//Заполняем раздел "Основание"
		Если ШапкаДокумента.ДокументОснование <> Неопределено И ЗначениеЗаполнено(ШапкаДокумента.ДокументОснование) Тогда 
			СтрокаТаблицы1.Параметры.НаимДокОсн	 = ШапкаДокумента.ДокументОснование.Метаданные().Синоним;
			СтрокаТаблицы1.Параметры.НомерДокОсн = ШапкаДокумента.ДокументОснование.Номер;
			СтрокаТаблицы1.Параметры.ДатаДокОсн	 = ШапкаДокумента.ДокументОснование.Дата;
		КонецЕсли;	
				
		Сдатчик    = "";
		СчетКт     = "";
		
		Сдатчик    = ПредставлениеОрганизацииСдатчик; 
		Получатель = СведенияОбОрганизацииПолучателе; 
		
		Если ШапкаДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства Тогда
			Если ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				СчетКт = ШапкаДокумента.ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;	
		ИначеЕсли ШапкаДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование   Тогда
			СчетКт = ШапкаДокумента.СчетУчетаНоменклатурыБУ;	
		ИначеЕсли ШапкаДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства   Тогда
			СчетКт = ШапкаДокумента.СчетУчетаОбъектаСтроительстваБУ;	
		КонецЕсли;
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПринятияКУчету = '00010101';
		
		Если ВыборкаСтрокОС <> Неопределено Тогда
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
					Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы1) Тогда
						
						// Выведем разрыв страницы
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						// Выведем переносимую часть заголовка таблицы	
						ТабДокумент.Вывести(Таблица1);
						
					КонецЕсли;
					
					СтрокаТаблицы1.Параметры.Заполнить(ВыборкаСтрокОС);
					
					Если НЕ ЗначениеЗаполнено(ВыборкаСтрокОС.НаименованиеОС) Тогда 
						СтрокаТаблицы1.Параметры.НаименованиеОС = ВыборкаСтрокОС.ОсновноеСредство;
				    КонецЕсли;
					
					УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(ВыборкаСтрокОС.ОсновноеСредство, ШапкаДокумента.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ШапкаДокумента.Дата, ДокументПринятияКУчетуБУ,  ДатаПринятияКУчету);
					ТабДокумент.Вывести(СтрокаТаблицы1);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// выводим вторую часть таблицы
		ЗаголовокТаблицы2.Параметры.Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ЗаголовокТаблицы2);
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПринятияКУчету 		 = '00010101';
		
		СписокМОЛ = Новый ТаблицаЗначений;
		СписокМОЛ.Колонки.Добавить("МОЛ",,"МОЛ");
		
		СписокНаименованийОС = Новый ТаблицаЗначений;
		СписокНаименованийОС.Колонки.Добавить("НаименованиеОС",,"НаименованиеОС");
		
		// Выведем строки таблицы
		
		ИтогоБалансоваяСтоимость = 0;
			
		Если ВыборкаСтрокОС <> Неопределено Тогда
			
			ВыборкаСтрокОС.Сбросить();
			
			Пока ВыборкаСтрокОС.Следующий() Цикл
				
				СтрТаблицыМОЛ 	  = СписокМОЛ.Добавить();
				СтрТаблицыМОЛ.МОЛ = ВыборкаСтрокОС.МОЛ;
				
				СтрТаблицыНаименованийОС 				= СписокНаименованийОС.Добавить();
				СтрТаблицыНаименованийОС.НаименованиеОС = СокрЛП(ВыборкаСтрокОС.НаименованиеОС);
				 				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем заголовок таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы2);
				КонецЕсли;
				
				СтрокаТаблицы2.Параметры.Заполнить(ВыборкаСтрокОС);
				
				СтрокаТаблицы2.Параметры.СчетКт 			 = СчетКт;
				СтрокаТаблицы2.Параметры.СчетДт 			 = ВыборкаСтрокОС.СчетУчетаБУ;
				СтрокаТаблицы2.Параметры.СуммаАмортизации	 = "";
				СтрокаТаблицы2.Параметры.БалансоваяСтоимость = ВыборкаСтрокОС.ПервоначальнаяСтоимость;
			
				ТабДокумент.Вывести(СтрокаТаблицы2);
				ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
				ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);
		
		//формируем список основных средств через запятую
		СписокОС = "";
		СписокНаименованийОС.Свернуть("НаименованиеОС");
		Для Каждого СтрокаОС ИЗ СписокНаименованийОС Цикл
			Если СписокОС = "" Тогда
				СписокОС = СтрокаОС.НаименованиеОС;
			Иначе
				СписокОС = СписокОС + ", " + СтрокаОС.НаименованиеОС;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеВид) Тогда
			Если ШапкаДокумента.ДокументОснованиеВид = "приказа" Тогда
				ТекстДокументОснованиеВид = НСтр("ru = 'приказа'");
				Приказ.Параметры.ДокументОснованиеВид = ТекстДокументОснованиеВид;
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "постановления" Тогда
				ТекстДокументОснованиеВид = НСтр("ru = 'постановления'");
				Приказ.Параметры.ДокументОснованиеВид = ТекстДокументОснованиеВид;
			ИначеЕсли ШапкаДокумента.ДокументОснованиеВид = "распоряжения" Тогда
				ТекстДокументОснованиеВид = НСтр("ru = 'распоряжения'");
				Приказ.Параметры.ДокументОснованиеВид = ТекстДокументОснованиеВид;
			КонецЕсли;	
		Иначе
			ТекстДокументОснованиеВид = НСтр("ru = 'приказа (распоряжения)'");
			Приказ.Параметры.ДокументОснованиеВид = ТекстДокументОснованиеВид;
		КонецЕсли;
		
		ТекстГод = НСтр("ru = '20_____года'");
			
		Стр 									= """_____"""+"________________________ " + ТекстГод;
		Приказ.Параметры.ДокументОснованиеДата 	= ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеДата), Формат(ШапкаДокумента.ДокументОснованиеДата, "ДФ=""дд ММММ гггг 'года'"""), Стр);
		Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(ШапкаДокумента.ДокументОснованиеНомер),ШапкаДокумента.ДокументОснованиеНомер,"__________ ");
		Приказ.Параметры.НаименованиеОбъекта	= СписокОС;
		ТабДокумент.Вывести(Приказ);
		
		ТабДокумент.Вывести(Подвал);
				
		//выводим комиссию
		
		//ТаблицаИнвентаризационнаяКомиссия = ШапкаДокумента.ИнвентаризационнаяКомиссия.Выгрузить();

		//сначала председатель 
		//ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		//Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		//	ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ПредседательКомиссии.ФизЛицо, ШапкаДокумента.Дата);
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		//	Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		//Иначе
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = "";
		//	Комиссия.Параметры.РасшифровкаПодписи       = "";
		//КонецЕсли;
		//
		//ТабДокумент.Вывести(Комиссия);
		//
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		//
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
				
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокЧленовКомиссии, ШапкаДокумента.Дата);
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ТаблицаИнвентаризационнаяКомиссия.Количество() < 1 Тогда
			ВыводитьЗаголовок = Истина;	
			
			Для Итератор = 1 По 3 Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии  = ?(ВыводитьЗаголовок, 
				                                                 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				                                                 "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		Иначе
			// Сначала выведем членов комиссии из выборки
			Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				КонецЕсли;
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
				                                                ЗаголовокРазделаКомиссии.ЧленыКомиссии,
				                                                "");
				Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		//  
		
		
		
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//ТабДокумент.Вывести(ШапкаОборотнойСтороны);
		//
		ТекстДолгосрочныйАктив = НСтр("ru = 'Долгосрочный актив'");
		ТекстСдал 			   = НСтр("ru = 'Сдал'");
				
		ОССдал.Параметры.ОбъектОсновныхСредств = ТекстДолгосрочныйАктив;
		ОССдал.Параметры.Сдал				   = ТекстСдал;
		ТабДокумент.Вывести(ОССдал);
				
		//список МОЛ
		СписокМОЛ.Свернуть("МОЛ");
		ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ШапкаДокумента.Организация, СписокМОЛ.ВыгрузитьКолонку("МОЛ"), ШапкаДокумента.Дата);
		
		ВыводитьПринял 	 = Истина;
		ВыведенаОСПринял = Ложь;
		ВыведенаДатаСдал = Ложь;
		
		Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОСПринял) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьПринял = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			ТекстПринял = НСтр("ru = 'Принял'");
		
			ОСПринял.Параметры.Принял = ?(ВыводитьПринял,	ТекстПринял,"");
			//ОСПринял.Параметры.Должность          = СтрокаМОЛ.Должность;
			//ОСПринял.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление; 
			ОСПринял.Параметры.Дата				  =  СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года");
			
			Если ВыведенаОСПринял Тогда
				Если НЕ ВыведенаДатаСдал Тогда
					ТабДокумент.Вывести(ПодвалДатаСдал);
					ВыведенаДатаСдал = Истина;
				Иначе
					ТабДокумент.Вывести(ПустаяСекцияСдал);
				КонецЕсли;
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОСПринял);
			
			ВыведенаОСПринял = Истина;
			
			ВыводитьПринял = Ложь;
			
		КонецЦикла;
		
		//Если НЕ ВыведенаДатаСдал Тогда 
		//	ПодвалДатаСдал.Параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года");
		//	ТабДокумент.Вывести(ПодвалДатаСдал);
		//	ВыведенаДатаСдал = Истина;
		//Иначе
		//	ТабДокумент.Вывести(ПустаяСекцияСдал);
		//КонецЕсли;
		
		//ПодвалДатаПринял.Параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года");
		//ТабДокумент.Присоединить(ПодвалДатаПринял);
		
		ТекстГод = НСтр("ru = '№_____________ от ""____""___________________ 20___ года'");
		
		ПодвалВерх.Параметры.Доверенность = ТекстГод;
		ПодвалВерх.параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года");
		ТабДокумент.Вывести(ПодвалВерх);
		ПодвалНиз.Параметры.Дата = СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года"); 
		ТабДокумент.Вывести(ПодвалНиз);
		
		
		Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл	
			киб_ПодвалНиз.Параметры.киб_Мол 		= СтрокаМОЛ.Представление;
			киб_ПодвалНиз.Параметры.киб_Должность 	= СтрокаМОЛ.Должность;; 
			киб_ПодвалНиз.Параметры.Дата 			= СтрЗаменить(Формат(ШапкаДокумента.Дата,"ДЛФ=DD"),"г.","года");
		КонецЦикла;
	    ТабДокумент.Вывести(киб_ПодвалНиз);

		
		
// проверяем на наличие солидарных МОЛ		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятиеКУчетуОССолидарныеМол.Ссылка КАК Ссылка,
		|	ПринятиеКУчетуОССолидарныеМол.ФизЛицо КАК ФизЛицо,
		|	ПринятиеКУчетуОССолидарныеМол.Ссылка.Дата КАК Дата,
		|	ПринятиеКУчетуОССолидарныеМол.Ссылка.СолидарноеМолДата КАК ДатаСолМол
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.СолидарныеМол КАК ПринятиеКУчетуОССолидарныеМол
		|ГДЕ
		|	ПринятиеКУчетуОССолидарныеМол.Ссылка В(&Ссылка)
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой()Тогда
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеМол = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, ВыборкаДетальныеЗаписи.ФизЛицо, ШапкаДокумента.Дата);
		киб_ПодвалНиз.Параметры.киб_Мол = ВыборкаДетальныеЗаписи.ФизЛицо;
		киб_ПодвалНиз.Параметры.киб_Должность = ДанныеМол.Должность; 
		киб_ПодвалНиз.Параметры.Дата = СтрЗаменить(Формат(ВыборкаДетальныеЗаписи.Дата,"ДЛФ=DD"),"г.","года"); 
		ПодвалМОЛ.Параметры.ДатаСолМол = СтрЗаменить(Формат(ВыборкаДетальныеЗаписи.ДатаСолМол,"ДЛФ=DD"),"г.","года"); 
		ТабДокумент.Вывести(киб_ПодвалНиз);
		ТабДокумент.Вывести(ПодвалМОЛ);
	КонецЦикла;
	
	
КонецЕсли;

		
		
		
		// Выведем подпись бухгалтера  
		//
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиСдал = Руководители.ГлавныйБухгалтер;
		ТабДокумент.Вывести(ПодписьГлавногоБухгалтера); 
	Если НЕ ШапкаДокумента.Подписант = Справочники.ФизическиеЛица.ПустаяСсылка()Тогда
		ПодписьГлавБухаПринял.Параметры.Должность = ШапкаДокумента.ДолжностьПодписанта;
		ПодписьГлавБухаПринял.Параметры.РасшифровкаПодписиПринял = ШапкаДокумента.Подписант; 
		ТабДокумент.Присоединить(ПодписьГлавБухаПринял);
	Иначе 
		 ПодписьГлавБухаПринял.Параметры.Должность = "Бухгалтер по ОС";
		 ПодписьГлавБухаПринял.Параметры.РасшифровкаПодписиПринял = Руководители.ГлавныйБухгалтер;
		 ТабДокумент.Присоединить(ПодписьГлавБухаПринял);
	КонецЕсли;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);
	
	КонецЦикла;
		// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 15;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
    ТабДокумент.АвтоМасштаб		   = Истина;

	Возврат ТабДокумент;
	
КонецФункции

#Область ПечатьШтрихкодовОС

Функция ДанныеДляПечатиШтрихкодовОС(МассивДокументов) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ПодключаемоеОборудованиеБКВызовСервера.ПолучитьДанныеДляПечатиОС("ПринятиеКУчетуОС", МассивДокументов));	
	
КонецФункции

#КонецОбласти

#КонецЕсли
