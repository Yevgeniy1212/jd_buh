
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	Иначе 
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьИнвентарныеНомераОС();
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;
				
				Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаПодбора" Тогда 
		ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение); 	

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ПринятиеКУчетуОС", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьШтрихкода(Команда)
	СформироватьШтрихкодаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	//Евгений+
	СолМол();   
	//Евгений-

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""принятие к учету ос"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	//Евгений+
	СолМолПриЗаписи();   
	//Евгений-
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 И НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПараметрыОбъекта = Новый Структура("Организация, Номенклатура, Дата, СчетУчетаНоменклатурыБУ, СчетУчетаНоменклатурыНУ");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	НоменклатураПриИзмененииНаСервере(ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНоменклатурыБУПриИзменении(Элемент)
	
	Объект.СчетУчетаНоменклатурыНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаНоменклатурыБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаОбъектаСтроительстваБУ) Тогда
		Объект.СчетУчетаОбъектаСтроительстваБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.НезавершенноеСтроительство");
		Объект.СчетУчетаОбъектаСтроительстваНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаОбъектаСтроительстваБУ));
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаОбъектаСтроительстваБУПриИзменении(Элемент)
	
	Объект.СчетУчетаОбъектаСтроительстваНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаОбъектаСтроительстваБУ));

КонецПроцедуры

&НаКлиенте
Процедура КорСчетОприходованияБУПриИзменении(Элемент)
	
	Объект.КорСчетОприходованияНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.КорСчетОприходованияБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокКорСубконтоОприходованияНУ1", "ЗаголовокКорСубконтоОприходованияНУ2", "ЗаголовокКорСубконтоОприходованияНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.КорСчетОприходованияНУ, Объект, ПоляФормы);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокКорСубконтоОприходованияБУ1", "ЗаголовокКорСубконтоОприходованияБУ2", "ЗаголовокКорСубконтоОприходованияБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.КорСчетОприходованияБУ, ПоляФормы, ЗаголовкиПолей, Объект.КорСчетОприходованияНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, КорСубконтоОприходованияБУ1, КорСубконтоОприходованияБУ2, КорСубконтоОприходованияБУ3,
									|КорСубконтоОприходованияНУ1, КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	КорСчетОприходованияБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.КорСчетОприходованияБУ, Объект.КорСчетОприходованияНУ, 1, Объект.КорСубконтоОприходованияБУ1, "КорСубконтоОприходованияНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.КорСчетОприходованияБУ, Объект.КорСчетОприходованияНУ, 2, Объект.КорСубконтоОприходованияБУ2, "КорСубконтоОприходованияНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.КорСчетОприходованияБУ, Объект.КорСчетОприходованияНУ, 3, Объект.КорСубконтоОприходованияБУ3, "КорСубконтоОприходованияНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 1, "КорСчетОприходованияБУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 2, "КорСчетОприходованияБУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияБУ", 3, "КорСчетОприходованияБУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КорСчетОприходованияНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокКорСубконтоОприходованияНУ1", "ЗаголовокКорСубконтоОприходованияНУ2", "ЗаголовокКорСубконтоОприходованияНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.КорСчетОприходованияНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, КорСубконтоОприходованияНУ1, КорСубконтоОприходованияНУ2, КорСубконтоОприходованияНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	КорСчетОприходованияНУПриИзмененииСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 1, "КорСчетОприходованияНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 2, "КорСчетОприходованияНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорСубконтоОприходованияНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "КорСубконтоОприходованияНУ", 3, "КорСчетОприходованияНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПризнакФиксированногоАктиваПриИзменении(Элемент)
	
	СтрокаОС = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаОС.ПризнакФиксированногоАктива Тогда
		СтрокаОС.ПорядокПогашенияСтоимостиНУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизации");			
	Иначе			
		СтрокаОС.ГруппаНУ = ПредопределенноеЗначение("Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка");			
		СтрокаОС.ПорядокПогашенияСтоимостиНУ = "";
	КонецЕсли;			                        			
		
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ 			= Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство 	= СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;

	ДанныеСтрокиТаблицы = Новый Структура(
		"ГрафикАмортизацииБУ, ГруппаНУ, ИнвентарныйНомер,
		|КоэффициентАмортизацииБУ, КоэффициентУскоренияБУ, МОЛ,
		|НачислятьАмортизациюБУ, ОбъектЗемельногоНалога, ОбъектИмущественногоНалога,
		|ОбъектТранспортногоНалога, ОбъемПродукцииРаботБУ, ОбъемПродукцииРаботДляВычисленияАмортизацииБУ, 
		|ОсновноеСредство, ПараметрВыработкиБУ, ПервоначальнаяСтоимостьБУ,
		|ПодразделениеОрганизации, ПорядокПогашенияСтоимостиНУ, ПризнакФиксированногоАктива, 
		|СпособНачисленияАмортизацииБУ, СпособОтраженияРасходовПоАмортизацииБУ, СрокИспользованияДляВычисленияАмортизацииБУ,
		|СрокПолезногоИспользованияБУ, СтоимостьДляВычисленияАмортизацииБУ, СчетДоходовОтРеализацииБУ, 
		|СчетДоходовОтРеализацииНУ, СчетНачисленияАмортизацииБУ, СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
		|СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ, СчетСебестоимостиПриРеализацииБУ, СчетСебестоимостиПриРеализацииНУ,
		|СчетУчетаБУ, СчетУчетаЗатратПоМодернизацииБУ, СчетУчетаНДСПоПриобретению, 
		|СчетУчетаНДСПоРеализации, СчетУчетаНУ"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
		|УчитыватьКПН");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если (ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = 0) и (ТекущиеДанные.СрокПолезногоИспользованияБУ <> 0) Тогда
		ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = ТекущиеДанные.СрокПолезногоИспользованияБУ;
	КонецЕсли;	
	
	ОССрокИспользованияДляВычисленияАмортизацииБУПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОССрокИспользованияДляВычисленияАмортизацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ <> 0 Тогда
		
		Если (ТекущиеДанные.СпособНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом"))
			Или (ТекущиеДанные.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом") И ТекущиеДанные.КоэффициентАмортизацииБУ = 0) Тогда
			ТекущиеДанные.КоэффициентАмортизацииБУ = Окр((12/ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ) * 100, 2);
		КонецЕсли;
			
	Иначе
		ТекущиеДанные.КоэффициентАмортизацииБУ = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСКоэффициентАмортизацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом") Тогда
		Если ТекущиеДанные.КоэффициентАмортизацииБУ <> 0 Тогда
			ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = Окр((12/ТекущиеДанные.КоэффициентАмортизацииБУ ) * 100, 2);
		Иначе
			ТекущиеДанные.СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССчетДоходовОтРеализацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ТекущиеДанные.СчетДоходовОтРеализацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетДоходовОтРеализацииБУ)); 

КонецПроцедуры

&НаКлиенте
Процедура ОССчетСебестоимостиПриРеализацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ТекущиеДанные.СчетСебестоимостиПриРеализацииНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетСебестоимостиПриРеализацииБУ)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ТекущиеДанные.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетУчетаБУ)); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОСПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ТекущиеДанные.ЛиквидационнаяСтоимостьБУ = ?(ТекущиеДанные.СтоимостьДляВычисленияАмортизацииБУ > 0, ТекущиеДанные.ПервоначальнаяСтоимостьБУ - ТекущиеДанные.СтоимостьДляВычисленияАмортизацииБУ, 0);

КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьДляВычисленияАмортизацииБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ТекущиеДанные.ЛиквидационнаяСтоимостьБУ = ?(ТекущиеДанные.СтоимостьДляВычисленияАмортизацииБУ > 0, ТекущиеДанные.ПервоначальнаяСтоимостьБУ - ТекущиеДанные.СтоимостьДляВычисленияАмортизацииБУ, 0);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Физическое лицо %1 уже включено в состав комиссии!'"), Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",			 Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",					 Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",			 Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",	 ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимость(Команда)
		
	ОтменаЗаполнения = Ложь;
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		ОтменаЗаполнения = Истина;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства)) Тогда
		ТекстСообщения = НСтр("ru='Не выбран объект строительства'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОбъектСтроительства", "Объект");
		ОтменаЗаполнения = Истина;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Объект.СчетУчетаОбъектаСтроительстваБУ)) Тогда
		ТекстСообщения = НСтр("ru='Не выбран счет бухгалтерского учета объекта строительства'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СчетУчетаОбъектаСтроительстваБУ", "Объект");
		ОтменаЗаполнения = Истина;
	КонецЕсли;

	Если ОтменаЗаполнения = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("НаименованиеПроцедуры", "ЗаполнитьТекущимиДанными");
		ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе! Отменить проведение?'");
		Режим 		 = РежимДиалогаВопрос.ДаНет;
		Оповещение 	 = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоОтменеПроведения", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе 
		
		РассчитатьСтоимостьСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСписка(Команда)
	
	Если Объект.Проведен Тогда 
		ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе! Отменить проведение?'");
		Режим 		 = РежимДиалогаВопрос.ДаНет;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("НаименованиеПроцедуры", "ЗаполнитьДляСпискаНаСервере"); 
		Оповещение 	 = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоОтменеПроведения", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе 
		
		ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		ЗаполнитьДляСпискаНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораОС("ОС", НСтр("ru='Основные средства'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
	ТекущийСклад         = Объект.Склад;
		
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);

	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если НЕ ЗначениеЗаполнено(Объект.СобытиеОС) Тогда
			Объект.СобытиеОС = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			Объект.СпособПоступления = Перечисления.СпособыПоступленияАктивов.Строительство; 			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокКорСубконтоОприходованияБУ1", "ЗаголовокКорСубконтоОприходованияБУ2", "ЗаголовокКорСубконтоОприходованияБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.КорСчетОприходованияБУ, ПоляФормы, ЗаголовкиПолей, Объект.КорСчетОприходованияНУ);
	
	// Включим предопределенные счета и их субсчета
	УправлениеВнеоборотнымиАктивамиСервер.ОграничитьВыборСчетамиУчетаОС(Элементы.ОССчетУчетаБУ, Истина);
	УправлениеВнеоборотнымиАктивамиСервер.ОграничитьВыборСчетамиУчетаНачисленияАмортизацииОС(Элементы.ОССчетНачисленияАмортизацииБУ, Истина);
		
	УправлениеФормой(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ПолучитьФункциональнуюОпцию("ШтрихкодУстанавливаетсяВГлавномУзлеРИБ") Тогда // В подчиненных узлах РИБ не выполняется
			Элементы.ОССформироватьШтрихкода.Доступность 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.ГруппаОборудованиеСоСклада.Видимость     	 = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование");
	Элементы.ГруппаПоРезультатамИнвентаризации.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации");
	Элементы.ГруппаОбъектыСтроительства.Видимость 		 = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства");
	
	Элементы.СчетУчетаНоменклатурыНУ.Видимость 		   = Форма.ВидимостьНалоговогоУчета;
	Элементы.ГруппаОприходованияНУ.Видимость 		   = Форма.ВидимостьНалоговогоУчета;
	Элементы.СчетУчетаОбъектаСтроительстваНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	// Видимость счетов учета
	Элементы.СчетУчетаНоменклатурыБУ.Видимость 			 = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетУчетаНоменклатурыНУ.Видимость 			 = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
	Элементы.СчетУчетаОбъектаСтроительстваБУ.Видимость   = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетУчетаОбъектаСтроительстваНУ.Видимость 	 = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;
	                                      	
	Элементы.ОткрытьНомераГТД.Видимость                  = Форма.ВедетсяУчетПоТоварамОрганизацийБУ И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование");
																		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование 
		И Объект.НомераГТД.Количество() <> 0 Тогда
		
		Объект.НомераГТД.Очистить();
		
	КонецЕсли;
		
	ТекущийВидОперации   = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ТекущийСклад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	    	
	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;
	
	ТекущийСклад = Объект.Склад;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НоменклатураПриИзмененииНаСервере(ПараметрыОбъекта)
	
	Организация  = ПараметрыОбъекта.Организация;
	Номенклатура = ПараметрыОбъекта.Номенклатура;
	Дата         = ПараметрыОбъекта.Дата;
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(
				Организация, Номенклатура, Дата);

	ПараметрыОбъекта.СчетУчетаНоменклатурыБУ = СчетаУчета.СчетУчетаБУ;
	ПараметрыОбъекта.СчетУчетаНоменклатурыНУ = СчетаУчета.СчетУчетаНУ;
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоОтменеПроведения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда

		Запись = Новый Структура;
		Запись.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	
		ЭтотОбъект.Записать(Запись);

		Если Параметры.НаименованиеПроцедуры = "ЗаполнитьТекущимиДанными" Тогда 
			
			РассчитатьСтоимостьСервере();
			
		КонецЕсли;
		
		Если Параметры.НаименованиеПроцедуры = "ЗаполнитьДляСпискаНаСервере" Тогда 
			
			ТекстСообщения = НСтр("ru='При заполнении существующие данные были пересчитаны.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

			ЗаполнитьДляСпискаНаСервере();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьСервере()
	
	Документы.ПринятиеКУчетуОС.РассчитатьСтоимость(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КорСчетОприходованияБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияБУ1", "КорСубконтоОприходованияБУ2", "КорСубконтоОприходованияБУ3", 
	                                                        ДанныеОбъекта.КорСубконтоОприходованияБУ1, ДанныеОбъекта.КорСубконтоОприходованияБУ2, ДанныеОбъекта.КорСубконтоОприходованияБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3", 
	                                                        ДанныеОбъекта.КорСубконтоОприходованияНУ1, ДанныеОбъекта.КорСубконтоОприходованияНУ2, ДанныеОбъекта.КорСубконтоОприходованияНУ3));
															
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "", ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "КорСубконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "КорСубконто" + Суффикс + "%Индекс%", "КорСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КорСчетОприходованияНУПриИзмененииСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "КорСубконтоОприходованияНУ1", "КорСубконтоОприходованияНУ2", "КорСубконтоОприходованияНУ3", 
	                                                        ДанныеОбъекта.КорСубконтоОприходованияНУ1, ДанныеОбъекта.КорСубконтоОприходованияНУ2, ДанныеОбъекта.КорСубконтоОприходованияНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	Документы.ПринятиеКУчетуОС.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПервоначальнаяСтоимостьБУ) Тогда
		
		ТаблицаОС = Новый ТаблицаЗначений;
		ТаблицаОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТаблицаОС.Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
		ТаблицаОС.Колонки.Добавить("СчетНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
		
		НоваяСтрока = ТаблицаОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
				
		ТЗ 		 = Документы.ПринятиеКУчетуОС.ОпределитьСтоимостьПоСпискуОСДокумента(ДанныеОбъекта.Организация, ТаблицаОС, ДанныеОбъекта.Дата);
		СтрокаТЗ = ТЗ.Найти(СтрокаТабличнойЧасти.ОсновноеСредство, "ОС_БУ");
		
		Если (СтрокаТЗ <> Неопределено)И (НЕ СтрокаТЗ.СнятоСУчета)  Тогда
			СтрокаТабличнойЧасти.ПервоначальнаяСтоимостьБУ = СтрокаТЗ.СтоимостьБУ;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ) Тогда
		СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ = СтрокаТабличнойЧасти.ПервоначальнаяСтоимостьБУ;	
	КонецЕсли;


КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();
					
	ТаблицаНомеров = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьТаблицуИнвентарныхНомеровОС(
		ТаблицаОС,
		Объект.Организация,
		Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)
	
	Возврат УправлениеВнеоборотнымиАктивамиСервер.СведенияОбИнвентарномНомереОСЗ(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, СписокТабличныхЧастей = "ОС")

	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "ЛиквидационнаяСтоимостьБУ"
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			
			СтрокаТаблицы.ЛиквидационнаяСтоимостьБУ = ?(СтрокаТаблицы.СтоимостьДляВычисленияАмортизацииБУ > 0, СтрокаТаблицы.ПервоначальнаяСтоимостьБУ - СтрокаТаблицы.СтоимостьДляВычисленияАмортизацииБУ, 0);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	ЗаполнитьИнвентарныеНомераОС();
	
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УправлениеВнеоборотнымиАктивамиСервер.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаНаСервере()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация 	= "Документ ""принятие к учету ос"" (заполнение)";
		ВремяНачалаЗамера 	= ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	Документы.ПринятиеКУчетуОС.ЗаполнитьТабличнуюЧастьДляСпискаОС(Объект, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныеТабЧасти = Объект.ОС.Количество();
	
	ПерезаполнитьСчетаУчета = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
	КонецЕсли;
	
	Если ПерезаполнитьСчетаУчета Тогда
		
		ПараметрыПерезаполненияСчетов = Новый Структура;
		Если ПоказыватьВДокументахСчетаУчета Тогда
			Если ЕстьЗаполненныеТабЧасти Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере()
	
	Документы.ПринятиеКУчетуОС.ЗаполнитьСчетаУчетаВТабЧасти(Объект.ОС, "ОС", Истина, Объект.УчитыватьКПН, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;     

	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияБУ", "КорСчетОприходованияБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ОприходованияНУ", "КорСчетОприходованияНУ");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ОприходованияБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ОприходованияНУ"); 
	
	СтруктураРеквизитов = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	СтруктураРеквизитов.Вставить("ПриставкаИмениСчета", "Кор");	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , , СтруктураРеквизитов);

	СписокРеквизитаПодразделений = Новый СписокЗначений;
	СписокРеквизитаПодразделений.Добавить("ПодразделениеОрганизации"); 
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения", Объект.ОС, СписокРеквизитаПодразделений); 
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
		
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	                    	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	Документы.ПринятиеКУчетуОС.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораОС(ИмяТаблицы, ПредставлениеТаблицы="")
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	                                                                                          
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор основных средств в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов",             ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок",                ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВыбиратьВсе",              Истина);	
	ПараметрыФормы.Вставить("ОбъектСсылка",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТаблицы",               ИмяТаблицы);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОСНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "ОС" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОС);						
		Иначе
			ТекстСообщения = НСтр("ru='Основное средство - %1 уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			Поле = "ОС[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;

	УдалитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхОСВХранилище);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
	СтруктураРеквизитов.Вставить("ГрафикАмортизацииБУ");
	СтруктураРеквизитов.Вставить("КоэффициентУскоренияБУ");
	СтруктураРеквизитов.Вставить("МОЛ");
	СтруктураРеквизитов.Вставить("НачислятьАмортизациюБУ");
	СтруктураРеквизитов.Вставить("ОбъемПродукцииРаботБУ");
	СтруктураРеквизитов.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("ПараметрВыработкиБУ");
	СтруктураРеквизитов.Вставить("СпособНачисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СпособОтраженияРасходовПоАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СрокПолезногоИспользованияБУ");
	СтруктураРеквизитов.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СчетНачисленияАмортизацииБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоПриобретению");
 	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("СчетУчетаЗатратПоМодернизацииБУ");
	СтруктураРеквизитов.Вставить("СчетДоходовОтРеализацииБУ");
	СтруктураРеквизитов.Вставить("СчетДоходовОтРеализацииНУ");
	СтруктураРеквизитов.Вставить("СчетСебестоимостиПриРеализацииБУ");
	СтруктураРеквизитов.Вставить("СчетСебестоимостиПриРеализацииНУ");
	СтруктураРеквизитов.Вставить("ГруппаНУ");
	СтруктураРеквизитов.Вставить("ПорядокПогашенияСтоимостиНУ");
	СтруктураРеквизитов.Вставить("ОбъектИмущественногоНалога");
	СтруктураРеквизитов.Вставить("ОбъектТранспортногоНалога");
	СтруктураРеквизитов.Вставить("ОбъектЗемельногоНалога");
	СтруктураРеквизитов.Вставить("ПризнакФиксированногоАктива");
	
	СтруктураСвязанныхРеквизитов = Новый Структура;	
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект);
	
	УправлениеФормой(ЭтаФорма);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	ПараметрыФормы = НомераГТДСервер.ПустыеПараметрыФормыРедактированияНомеровГТД();
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число"));
	ТаблицаТовары.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число"));
	ТаблицаТовары.Колонки.Добавить("Коэффициент",  Новый ОписаниеТипов("Число"));
	ТаблицаТовары.Колонки.Добавить("КлючСвязи",    Новый ОписаниеТипов("Число"));
	
	НоваяСтрока = ТаблицаТовары.Добавить();		
	НоваяСтрока.КлючСвязи    = 1;
	НоваяСтрока.Количество   = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование"), Объект.ОС.Количество(), 1);
	НоваяСтрока.Коэффициент  = 1;
	НоваяСтрока.НомерСтроки  = 1;
	НоваяСтрока.Номенклатура = Объект.Номенклатура;
	
	ПараметрыФормы.АдресТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.АдресНомераГТД = РаботаСДиалогами.АдресТаблицыЗначений(ЭтаФорма, "НомераГТД");
	ПараметрыФормы.ПоказыватьТолькоОстатки = Истина;
	ПараметрыФормы.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр; 		
	Возврат ПараметрыФормы; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;                                           

КонецПроцедуры

&НаСервере
Процедура СформироватьШтрихкодаНаСервере()
	
	МассивОС = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	Если МассивОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""ОС""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	ПодключаемоеОборудованиеБКВызовСервера.СформироватьШтрихкодаМассиваОС(МассивОС)
	
КонецПроцедуры	

//Евгений+
&НаСервере
Процедура СолМол()
	
	СолидарноеМолСтрока.Очистить();
	Для каждого текСтрока из Объект.СолидарныеМол цикл
		СолидарноеМолСтрока.Добавить(текСтрока.ФизЛицо);	
	Конеццикла;
	
КонецПроцедуры

&НаСервере
Процедура СолМолПриЗаписи()

	Объект.СолидарныеМол.Очистить();
	Для каждого Строка Из СолидарноеМолСтрока Цикл
		НовСтрока = Объект.СолидарныеМол.Добавить();
		НовСтрока.ФизЛицо = Строка.Значение;
	КонецЦикла; 
	
КонецПроцедуры 

//Евгений-

