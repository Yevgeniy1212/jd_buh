#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - стру ктура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетБУ) Тогда
				СтрокаТабличнойЧасти.СчетБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетНУ) Тогда
				СтрокаТабличнойЧасти.СчетНУ = СчетаУчета.СчетУчетаНУ;
			КонецЕсли;
		КонецЕсли;		
	Иначе         
		
		СтрокаТабличнойЧасти.СчетБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
		СтрокаТабличнойЧасти.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетБУ));		
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// З-1 (приходный ордер запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1";
	КомандаПечати.Представление = НСтр("ru = 'З-1 (приходный ордер запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Накладная на передачу готовой продукции
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьМХ18";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на передачу готовой продукции'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1,ПечатьМХ18";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1,ПечатьМХ18";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ1,ПечатьМХ18";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать накладной на передачу готовой продукции
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьМХ18") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьМХ18",
			НСтр("ru = 'Накладная на передачу готовой продукции'"),
			ПечатьМХ18(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ОтчетПроизводстваЗаСмену.ПФ_MXL_МХ18");
	КонецЕсли;

	// Печать формы З-1
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяЗ1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяЗ1",
			НСтр("ru = 'З-1 (приходный ордер запасов)'"),
			ПечатьЗ1(МассивОбъектов, ОбъектыПечати),
			,
			"ОбщийМакет.ПФ_MXL_З1");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ1(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов",  МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номер КАК Номер,
	|	ОтчетПроизводстваЗаСмену.Дата КАК Дата,
	|	ОтчетПроизводстваЗаСмену.Организация,
	|	ОтчетПроизводстваЗаСмену.СтруктурноеПодразделение,
	|	ОтчетПроизводстваЗаСмену.Склад,
	|	ОтчетПроизводстваЗаСмену.СчетЗатратБУ КАК КорреспондентскийСчет,
	|	ОтчетПроизводстваЗаСмену.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыОтчетПроизводстваЗаСмену
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК МОЛ
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Номер КАК НомерДокумента,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Организация,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.СтруктурноеПодразделение,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Склад,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.КорреспондентскийСчет,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Ссылка,
	|	ВТ_ОтветственныеЛица.МОЛ
	|ИЗ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыОтчетПроизводстваЗаСмену
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ВТ_ОтветственныеЛица
	|		ПО ВТ_ДокументыОтчетПроизводстваЗаСмену.Ссылка = ВТ_ОтветственныеЛица.Ссылка";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов",  МассивОбъектов);
	
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	СУММА(Продукция.Количество) КАК КоличествоПоДокументу,
	                        |	Продукция.ПлановаяСтоимость КАК Цена,
	                        |	СУММА(Продукция.СуммаПлановая) КАК ВсегоСНДС,
	                        |	Продукция.Номенклатура.Наименование КАК ТоварНаименование,
	                        |	Продукция.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	                        |	Продукция.Номенклатура.Код КАК ТоварКод,
	                        |	Продукция.ЕдиницаИзмерения.Код КАК ЕдиницаКод,
	                        |	Продукция.Ссылка КАК Ссылка
	                        |ИЗ
	                        |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Продукция
	                        |ГДЕ
	                        |	Продукция.Ссылка В(&МассивОбъектов)
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	Продукция.ПлановаяСтоимость,
	                        |	Продукция.Номенклатура.Наименование,
	                        |	Продукция.Номенклатура.Код,
	                        |	Продукция.ЕдиницаИзмерения.Код,
	                        |	Продукция.ЕдиницаИзмерения.Представление,
	                        |	Продукция.Ссылка
	                        |ИТОГИ ПО
	                        |	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();

	ВыборкаПоРегистратору = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З1");

	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ОтчетПроизводстваЗаСмену_З1";

	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		
		// Выводим шапку накладной
		ТекстРНН_БИН  = "";
		ОбластьМакетаЗаголовок.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьМакетаЗаголовок.Параметры.ПредставлениеСклада 	  = ВыборкаПоДокументам.Склад.Наименование;
		ОбластьМакетаЗаголовок.Параметры.ОрганизацияРНН_БИН 	  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");
		
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);

		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьМакетаЗаголовокДокумента.Параметры.ПредставлениеПоставщика = "";
		ОбластьМакетаЗаголовокДокумента.Параметры.НомерДокумента		  = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.НомерДокумента, ВыборкаПоДокументам.Ссылка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
		
		ОбластьМакетаЗаголовокТаблицы.Параметры.ВалютаПредставление = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Количество    = 0;
			Сумма    	  = 0;
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Вывести(ОбластьМакета);

				Сумма      = Сумма    	+ ВыборкаСтрокТовары.ВсегоСНДС;
				Количество = Количество + ВыборкаСтрокТовары.КоличествоПоДокументу;

			КонецЦикла;
			
		КонецЕсли;
		
		// Вывести Итого
		ОбластьМакетаИтого.Параметры.ИтогВсегоСНДС 			   = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма);
		ОбластьМакетаИтого.Параметры.ИтогКоличествоПоДокументу = Количество;
		ТабДокумент.Вывести(ОбластьМакетаИтого);
		
		// заполняем МОЛ
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Склад) Тогда
			ДанныеМОЛ						  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛ, ВыборкаПоДокументам.ДатаДокумента);
			ОбластьМакетаПодвал.Параметры.МОЛ = ДанныеМОЛ.Представление;
		КонецЕсли;	
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
		
	ТоварКод = "Код";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номер,
	|	ОтчетПроизводстваЗаСмену.Дата КАК Дата,
	|	ОтчетПроизводстваЗаСмену.Организация,
	|	ОтчетПроизводстваЗаСмену.СтруктурноеПодразделение,
	|	ОтчетПроизводстваЗаСмену.Склад,
	|	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизации КАК Подразделение,
	|	ОтчетПроизводстваЗаСмену.СчетЗатратБУ КАК КорреспондентскийСчет
	|ПОМЕСТИТЬ ВТ_ДокументыОтчетПроизводстваЗаСмену
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК МОЛ
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Ссылка,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Номер,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Организация,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.СтруктурноеПодразделение,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Склад,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.Подразделение,
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену.КорреспондентскийСчет,
	|	ВТ_ОтветственныеЛица.МОЛ
	|ИЗ
	|	ВТ_ДокументыОтчетПроизводстваЗаСмену КАК ВТ_ДокументыОтчетПроизводстваЗаСмену
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ВТ_ОтветственныеЛица
	|		ПО ВТ_ДокументыОтчетПроизводстваЗаСмену.Ссылка = ВТ_ОтветственныеЛица.Ссылка";

	ЗапросКТоварам = Новый Запрос;
	ЗапросКТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	ЗапросКТоварам.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номенклатура КАК Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код КАК ТоварКод,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество) КАК Количество,
	|	СУММА(ОтчетПроизводстваЗаСмену.СуммаПлановая) КАК СуммаПлановая,
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки) КАК НомерСтроки,
	|	ОтчетПроизводстваЗаСмену.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ВыборкаПоРегистратору = ЗапросКТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетПроизводстваЗаСмену.ПФ_MXL_МХ18");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка = КодЯзыка;
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "ОтчетПроизводстваЗаСмену_МХ18";

	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		// Выводим общие реквизиты шапки
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьМакетаШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = ВыборкаПоДокументам.ДатаДокумента;
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента);

		Если НЕ ВыборкаПоДокументам.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации   = ВыборкаПоДокументам.Организация;
				ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = ВыборкаПоДокументам.Организация.КодПоОКПО;
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации   = ВыборкаПоДокументам.СтруктурноеПодразделение.НаименованиеПолное;
				ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = ВыборкаПоДокументам.СтруктурноеПодразделение.КодПоОКПО;
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПредставлениеСтруктурноеПодразделение = ВыборкаПоДокументам.СтруктурноеПодразделение;
		Иначе
			Если ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента) Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеСтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Иначе			
				ОбластьМакетаШапка.Параметры.ПредставлениеСтруктурноеПодразделение = ВыборкаПоДокументам.Подразделение;
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = ВыборкаПоДокументам.Организация.КодПоОКПО;
		КонецЕсли;

		ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ВыборкаПоДокументам.Подразделение;
		ОбластьМакетаШапка.Параметры.Получатель = ВыборкаПоДокументам.Склад;
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		СтрокНаСтранице = 40;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;

		// Выводим заголовок таблицы
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Страница %1'", КодЯзыка), НомерСтраницы);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		КоличествоСтрок = 0;
		ИтогСумма       = 0;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();

			// инициализация итогов по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоКоличествоНаСтранице  = 0;

			// инициализация итогов по документу
			ИтогоМассаБрутто = 0;
			ИтогоКоличество  = 0;
			Ном              = 0;
			ИтогСумма        = 0;
			
			// Выводим многострочную часть докмента
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Ном           = Ном + 1;

				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакетаСтрока.Параметры.ТоварНаименование  = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);
				ОбластьМакетаСтрока.Параметры.Цена  = ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.СуммаПлановая / ВыборкаСтрокТовары.Количество);
				ОбластьМакетаСтрока.Параметры.Сумма = ВыборкаСтрокТовары.СуммаПлановая;

				Количество  = ВыборкаСтрокТовары.Количество;

				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакетаСтрока) Тогда
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоКоличествоНаСтранице  = 0;

					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Страница %1'", КодЯзыка), НомерСтраницы);
					ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
				// увеличим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
				ИтогСумма                  = ИтогСумма                  + ВыборкаСтрокТовары.СуммаПлановая;
				// увеличим итоги по дукументу
				ИтогоМассаБрутто = 0;
				ИтогоКоличество  = ИтогоКоличество  + Количество;

			КонецЦикла;

			// Выводим итоги по документу в целом
			ОбластьМакетаИтого.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
			ОбластьМакетаИтого.Параметры.ИтогКоличество  = ИтогоКоличество;
			ОбластьМакетаИтого.Параметры.ИтогСуммы       = ИтогСумма;

		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим подвал документа

		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ИтогСуммаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогСумма, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		// заполняем МОЛ
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Склад) Тогда
			ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛ, ВыборкаПоДокументам.ДатаДокумента);
			ОбластьМакетаПодвал.Параметры.МОЛ = ДанныеМОЛ.Представление;
			ОбластьМакетаПодвал.Параметры.ДолжностьМОЛ = ДанныеМОЛ.Должность;
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 


// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);

	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом, "ВедениеУчетаВременныхРазницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос.УстановитьПараметр("СинонимПродукция"               , НСтр("ru = 'Продукция'"));
	Запрос.УстановитьПараметр("СинонимУслуги"                  , НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("СинонимВозвратныеОтходы"        , НСтр("ru = 'Возвратные отходы'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиВыпускОтходов", НСтр("ru = 'Выпуск возвратных отходов'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеУслуг"                , НСтр("ru = 'Выпуск внутр.услуг'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеПродукции"            , НСтр("ru = 'Выпуск продукции'", КодОсновногоЯзыка));
	
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ" , НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом", ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПлановаяСтоимостьУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыпускПродукцииБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыпускПродукцииНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыпускУслугБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыпускУслугНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыпускОтходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты);
		
		
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьПродукция) КАК ЕстьПродукция,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвратныеОтходы) КАК ЕстьВозвратныеОтходы
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьПродукция,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьВозвратныеОтходы
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Склад,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.НоменклатурнаяГруппа,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Склад,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.НоменклатурнаяГруппа,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПродукция, ЛОЖЬ) КАК ЕстьПродукция,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвратныеОтходы, ЛОЖЬ) КАК ЕстьВозвратныеОтходы
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если Реквизиты.ЕстьПродукция Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаПродукция",	НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаПродукция.Ссылка,
		|	ТаблицаПродукция.НомерСтроки,
		|	ТаблицаПродукция.Номенклатура,
		|	ТаблицаПродукция.НоменклатурнаяГруппа,
		|	ТаблицаПродукция.СчетБУ КАК СчетУчетаБУ,
		|	ТаблицаПродукция.СчетНУ КАК СчетУчетаНУ,
		|	ТаблицаПродукция.Количество * ТаблицаПродукция.Коэффициент КАК Количество,
		|	ТаблицаПродукция.СуммаПлановая,
		|	ТаблицаПродукция.НомерГТД
		|ПОМЕСТИТЬ ТаблицаПродукция
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТаблицаПродукция
		|ГДЕ
		|	ТаблицаПродукция.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Если Реквизиты.ЕстьУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги",		НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.СчетБУ КАК СчетБУ,
		|	ТаблицаУслуги.СубконтоБУ1 КАК СубконтоБУ1,
		|	ТаблицаУслуги.СубконтоБУ2 КАК СубконтоБУ2,
		|	ТаблицаУслуги.СубконтоБУ3 КАК СубконтоБУ3,
		|	ТаблицаУслуги.СчетНУ КАК СчетНУ,
		|	ТаблицаУслуги.СубконтоНУ1 КАК СубконтоНУ1,
		|	ТаблицаУслуги.СубконтоНУ2 КАК СубконтоНУ2,
		|	ТаблицаУслуги.СубконтоНУ3 КАК СубконтоНУ3,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.СуммаПлановая
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратныеОтходы Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаОтходы",		НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОтходы.Ссылка,
		|	ТаблицаОтходы.НомерСтроки,
		|	ТаблицаОтходы.Номенклатура,
		|	ТаблицаОтходы.СчетБУ КАК СчетБУ,
		|	ТаблицаОтходы.СчетНУ КАК СчетНУ,
		|	ТаблицаОтходы.СтатьяЗатрат,
		|	ТаблицаОтходы.Количество * ТаблицаОтходы.Коэффициент КАК Количество,
		|	ТаблицаОтходы.Сумма,
		|	ТаблицаОтходы.НомерГТД
		|ПОМЕСТИТЬ ТаблицаОтходы
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ТаблицаОтходы
		|ГДЕ
		|	ТаблицаОтходы.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьПродукцииРеквизиты",	Неопределено);
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьПродукцииТаблица",	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииРеквизиты",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииТаблица",		НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратБУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратБУ2,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратНУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратНУ2,
	|	ТаблицаПродукция.СчетУчетаБУ КАК СчетБУ,
	|	ТаблицаПродукция.Номенклатура КАК СубконтоБУ1,
	|	ТаблицаПродукция.СчетУчетаНУ КАК СчетНУ,
	|	ТаблицаПродукция.Номенклатура КАК СубконтоНУ1,
	|	ТаблицаПродукция.Количество   КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК СуммаПлановая,
	|	&СодержаниеПродукции КАК Содержание,
	|	ВЫБОР
	|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
	|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВедетсяПартионныйУчет
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
	|		ПО ТаблицаПродукция.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПлановаяСтоимостьУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьУслугРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ПлановаяСтоимостьУслугТаблица", 	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ПлановаяСтоимостьУслугРеквизиты",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСтоимостьУслугТаблица",		НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	| 	Реквизиты.СчетЗатратБУ   КАК СчетЗатратБУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратБУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратБУ2,
	| 	Реквизиты.СчетЗатратНУ   КАК СчетЗатратНУ,
	|	Реквизиты.ПодразделениеОрганизации КАК СубконтоЗатратНУ1,
	|	Реквизиты.НоменклатурнаяГруппа КАК СубконтоЗатратНУ2,
	|	ТаблицаУслуги.СчетБУ КАК СчетБУ,
	|	ТаблицаУслуги.СубконтоБУ1 КАК СубконтоБУ1,
	|	ТаблицаУслуги.СубконтоБУ2 КАК СубконтоБУ2,
	|	ТаблицаУслуги.СубконтоБУ3 КАК СубконтоБУ3,
	|	ТаблицаУслуги.СчетНУ КАК СчетНУ,
	|	ТаблицаУслуги.СубконтоНУ1 КАК СубконтоНУ1,
	|	ТаблицаУслуги.СубконтоНУ2 КАК СубконтоНУ2,
	|	ТаблицаУслуги.СубконтоНУ3 КАК СубконтоНУ3,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК СуммаПлановая,
	|	&СодержаниеУслуг КАК Содержание,
	|	ЛОЖЬ  КАК ВедетсяПартионныйУчет
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускПродукцииБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ВыпускПродукцииРеквизитыБУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускПродукцииТаблицаБУ",	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускПродукцииРеквизитыБУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускПродукцииТаблицаБУ",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК   ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаПродукция.СчетУчетаБУ КАК СчетСписания,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания3,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаПродукция.СчетУчетаБУ = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускПродукцииНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьПродукция Тогда
		ПараметрыПроведения.Вставить("ВыпускПродукцииРеквизитыНУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускПродукцииТаблицаНУ", 	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускПродукцииРеквизитыНУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускПродукцииТаблицаНУ",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК   ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаПродукция.СчетУчетаНУ КАК СчетСписания,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады)
	|			ТОГДА Реквизиты.Склад
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии)
	|			ТОГДА Реквизиты.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоСписания3,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаПродукция.СчетУчетаНУ = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускУслугБУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ВыпускУслугРеквизитыБУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускУслугТаблицаБУ",	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускУслугРеквизитыБУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускУслугТаблицаБУ",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СчетБУ КАК СчетСписания,
	|	ТаблицаУслуги.СубконтоБУ1 КАК СубконтоСписания1,
	|	ТаблицаУслуги.СубконтоБУ2 КАК СубконтоСписания2,
	|	ТаблицаУслуги.СубконтоБУ3 КАК СубконтоСписания3,
	|	0 КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускУслугНУ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ВыпускУслугРеквизитыНУ",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускУслугТаблицаНУ",		Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускУслугРеквизитыНУ",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускУслугТаблицаНУ",		НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Продукция,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СчетНУ КАК СчетСписания,
	|	ТаблицаУслуги.СубконтоНУ1 КАК СубконтоСписания1,
	|	ТаблицаУслуги.СубконтоНУ2 КАК СубконтоСписания2,
	|	ТаблицаУслуги.СубконтоНУ3 КАК СубконтоСписания3,
	|	0 КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК ПлановаяСтоимость
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускОтходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьВозвратныеОтходы Тогда
		ПараметрыПроведения.Вставить("ВыпускОтходовРеквизиты",	Неопределено);
		ПараметрыПроведения.Вставить("ВыпускОтходовТаблица",	Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВыпускОтходовРеквизиты",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускОтходовТаблица",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратныеОтходы"" КАК ИмяСписка,
	|	&СинонимВозвратныеОтходы КАК СинонимСписка,
	|	ТаблицаОтходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОтходы.Номенклатура КАК Номенклатура,
	|	Реквизиты.СчетЗатратБУ КАК СчетЗатратБУ,
	|	Реквизиты.СчетЗатратНУ КАК СчетЗатратНУ,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаОтходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТаблицаОтходы.СчетБУ КАК СчетУчетаБУ,
	|	ТаблицаОтходы.СчетНУ КАК СчетУчетаНУ,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаОтходы.Количество КАК Количество,
	|	ТаблицаОтходы.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
	|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВедетсяПартионныйУчет
	|ИЗ
	|	ТаблицаОтходы КАК ТаблицаОтходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
	|		ПО ТаблицаОтходы.СчетБУ = СпособОценкиЗапасовБУ.СчетЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОтходы.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьПродукция
		ИЛИ Реквизиты.ЕстьВозвратныеОтходы Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		Если Реквизиты.ЕстьПродукция Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаТовары.НомерСтроки,
			|	""0"" КАК Приоритет,
			|	""Продукция"" КАК ИмяСписка,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.НомерГТД,
			|	ТаблицаТовары.Количество,
			|	Реквизиты.Склад,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
			|ИЗ
			|	ТаблицаПродукция КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
			|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка " ;			
		КонецЕсли;
		
		Если  Реквизиты.ЕстьВозвратныеОтходы Тогда
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ТаблицаТовары.НомерСтроки,
			|	""1"" КАК Приоритет,			
			|	""ВозвратныеОтходы"" КАК ИмяСписка,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.НомерГТД КАК НомерГТД,
			|	ТаблицаТовары.Количество,
			|	Реквизиты.Склад,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
			|ИЗ
			|	ТаблицаОтходы КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
			|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка ";
						
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + " 
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет, НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе 	 
		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);				
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецЕсли
