#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоРеквизитуТЧ(ЭтотОбъект, "Продукция", "Номенклатура");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
	СчетЗатратНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетЗатратБУ, Дата, ПланыСчетов.Налоговый.ОсновноеПроизводство);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНУ", Истина);

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	

	Если Продукция.Количество() > 0 
		ИЛИ Услуги.Количество() > 0 
		ИЛИ ВозвратныеОтходы.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Продукция");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы");		
		
	КонецЕсли;
	
	Если Продукция.Количество() = 0 И ВозвратныеОтходы.Количество() = 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		
	КонецЕсли;

	Если НЕ УчитыватьКПН ИЛИ (НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ НЕ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда 		
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.СчетНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.СчетНУ");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	Если НЕ УчитыватьКПН ИЛИ (НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ НЕ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
		ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ = Ложь;	
	КонецЕсли;

	ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, ПараметрыПострочнойПроверки);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОтчетПроизводстваЗаСмену.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(
			ПараметрыПроведения.ТаблицаТоварыОрганизаций,ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущенныхТоваров(
		ПараметрыПроведения.ПлановаяСтоимостьПродукцииТаблица,
		ПараметрыПроведения.ПлановаяСтоимостьПродукцииРеквизиты, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(
		ПараметрыПроведения.ПлановаяСтоимостьУслугТаблица,
		ПараметрыПроведения.ПлановаяСтоимостьУслугРеквизиты, Движения, Отказ);

	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускПродукцииТаблицаБУ,"БухгалтерскийУчет",
		ПараметрыПроведения.ВыпускПродукцииРеквизитыБУ, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускПродукцииТаблицаНУ,"НалоговыйУчет",
		ПараметрыПроведения.ВыпускПродукцииРеквизитыНУ, Движения, Отказ);

	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускУслугТаблицаБУ, "БухгалтерскийУчет",
		ПараметрыПроведения.ВыпускУслугРеквизитыБУ, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускУслугТаблицаНУ, "НалоговыйУчет",
		ПараметрыПроведения.ВыпускУслугРеквизитыНУ, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускОтходов(
		ПараметрыПроведения.ВыпускОтходовТаблица,
		ПараметрыПроведения.ВыпускОтходовРеквизиты, Движения, Отказ);

	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЗаполнитьКраткийСоставДокументаПоРеквизитуТЧ(ДокументОбъект, ИмяТЧ, ИмяРеквизита) Экспорт 

	КраткийСоставДокумента = "";
	
	ТабЧасть = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТЧ);
	Если ТабЧасть = Неопределено Тогда
		Возврат КраткийСоставДокумента;
	КонецЕсли;
	Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат КраткийСоставДокумента;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ДокументОбъект[ИмяТЧ] Цикл
			
		ЗначениеРеквизита = СокрЛП(СтрокаТЧ[ИмяРеквизита]);
		Если Найти(КраткийСоставДокумента, ЗначениеРеквизита) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ЗначениеРеквизита;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,245) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 250 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,245) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, ПараметрыПострочнойПроверки) 

	Для Каждого СтрокаТаблицы Из Услуги Цикл
                                               
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетБУ)
		   И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетБУ).Количественный Тогда

		  	ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Счет (БУ)'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Услуги'"), НСтр("ru = 'Необходимо указать счет затрат'"));
			Поле = "Услуги[" + (СтрокаТаблицы.НомерСтроки - 1) + "].СчетБУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

		КонецЕсли;

		                                           
		Если ПараметрыПострочнойПроверки.ПроверятьЗаполнениеСчетаУчетаНУ И ЗначениеЗаполнено(СтрокаТаблицы.СчетНУ)
		   И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНУ).Количественный Тогда

	  		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Счет (НУ)'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Услуги'"), НСтр("ru = 'Необходимо указать счет затрат'"));
			Поле = "Услуги[" + (СтрокаТаблицы.НомерСтроки - 1) + "].СчетНУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры 

#КонецЕсли
