
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	// Включим предопределенные счета и их субсчета
	УчетПроизводства.ОграничитьВыборСчетамиПроизводственныхРасходов(Элементы.СчетЗатратБУ);
	УчетПроизводства.ОграничитьВыборСчетамиПроизводственныхРасходов(Элементы.СчетЗатратНУ, "Налоговый");

	УстановитьТекущуюСтраницуОсновнойПанели();
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда     		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""отчет производства за смену"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		ДатаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
		Объект.ПодразделениеОрганизации = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ Продукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НоменклатурнаяГруппа, ЕдиницаИзмерения, Коэффициент, Количество, ПлановаяСтоимость, СуммаПлановая, 
		|Спецификация, СчетБУ, СчетНУ"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Продукция.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Продукция.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(Элементы.Продукция.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(Элементы.Продукция.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)

	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(Элементы.Продукция.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСчетБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	СтрокаТабличнойЧасти.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетБУ));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ Услуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, ПлановаяСтоимость, СуммаПлановая, 
		|Спецификация, СчетБУ, СчетНУ,
		|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|ВидСубконтоБУ1, ВидСубконтоБУ2, ВидСубконтоБУ3,
		|ВидСубконтоНУ1, ВидСубконтоНУ2, ВидСубконтоНУ3,
		|СубконтоБУ1Доступность, СубконтоБУ2Доступность, СубконтоБУ3Доступность,
		|СубконтоНУ1Доступность, СубконтоНУ2Доступность, СубконтоНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");
	
	// НУ
	СтрокаТаблицы.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги");

	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетБУ, СчетНУ, 
		|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация, ПодразделениеОрганизации");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	
	ДанныеОбъекта = Новый Структура("Организация, ПодразделениеОрганизации");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетБУ, ТекущиеДанные.СчетНУ, 1, ТекущиеДанные.СубконтоБУ1, "СубконтоНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ", 1, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетБУ, ТекущиеДанные.СчетНУ, 2, ТекущиеДанные.СубконтоБУ2, "СубконтоНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ", 2, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетБУ, ТекущиеДанные.СчетНУ, 3, ТекущиеДанные.СубконтоБУ3, "СубконтоНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ", 3, "СчетБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ", 1, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ", 2, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ", 3, "СчетНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги");

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, Цена, 
		|Сумма, СчетБУ, СчетНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Дата, Ссылка");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВозвратныеОтходы.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВозвратныеОтходы.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвратныеОтходы.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСчетБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвратныеОтходы.ТекущиеДанные;

	СтрокаТабличнойЧасти.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетБУ));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПереместитьПродукцию(Команда)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПереместитьПродукцию", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Действие может быть выполнено только после записи документа. Записать?'"), Режим);
	Иначе
		ПослеЗакрытияВопросаПереместитьПродукцию(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПереместитьПродукцию(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Объект.Проведен Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Иначе
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Записать(ПараметрыЗаписи);
	
	СтруктураПараметров = Новый Структура;
	
	ДанныеПеремещенияНаСервере(СтруктураПараметров);	
		
	Если СтруктураПараметров.Свойство("ТекстВопроса") Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПерезаполнитьПеремещение", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, СтруктураПараметров.ТекстВопроса, Режим);
		
	ИначеЕсли СтруктураПараметров.Свойство("СоздатьОбъект") Тогда
		
		СоздатьПеремещениеНаСервере(СтруктураПараметров, Объект.Ссылка);
		
		ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", Новый Структура("Ключ", СтруктураПараметров.Ссылка));
		
	Иначе
		
		ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", Новый Структура("Ключ", СтруктураПараметров.Ссылка));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПерезаполнитьПеремещение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", Новый Структура("Ключ", Параметры.Ссылка));
        Возврат;
    КонецЕсли;

	Попытка
		
		ЗаполнитьПеремещениеНаСервере(Параметры, Объект.Ссылка);
		ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", Новый Структура("Ключ", Параметры.Ссылка));
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось перезаполнить документ: ""%1""'"),
			СокрЛП(Параметры.Ссылка));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Параметры.Ссылка, "Объект");

	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПодборПродукция(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора();
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТребованияНакладные(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", 			  Объект.Организация);
	ПараметрыПодбора.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыПодбора.Вставить("ОтчетПроизводстваЗаСмену", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ЗаполнятьПриОткрытии", 	  Истина);
	
	ОткрытьФорму("Обработка.ФормированиеТребованийНакладных.Форма.Форма", ПараметрыПодбора,
		ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧастьУслуги("Услуги", НСтр("ru = 'Услуги'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПродукция(Команда)
	
	ИзменитьТабличнуюЧастьПродукция("Продукция", НСтр("ru = 'Продукция'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВозвратныеОтходы(Команда)
	
	ИзменитьТабличнуюЧастьВозвратныеОтходы("ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;

	Элементы.ВидУчетаНУ.Видимость   = Объект.УчитыватьКПН И Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
	Элементы.СчетЗатратНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	Элементы.ВидУчетаНУ.Видимость       	 = Форма.ВидимостьНалоговогоУчета;
	Элементы.УчитыватьКПН.Видимость 	 	 = Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;		

	Элементы.ПродукцияНомерГТД.Видимость 		= Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	Элементы.ВозвратныеОтходыНомерГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
    
    // Видимость счетов
    Элементы.ГруппаСчетаУчетаЗатрат.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.УслугиГруппаСубконтоСчетаБУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ВидимостьНалоговогоУчета;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ПоказыватьВДокументахСчетаУчета = Истина;
    
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		Если НЕ ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			Объект.УчитыватьКПН =  Ложь;
		КонецЕсли;			
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);				
	КонецЕсли;

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	УстановитьДоступностьСубконто();

	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл		
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетБУ, СтрокаТовары, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетНУ, СтрокаТовары, ПоляОбъекта);
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Продукция", "Продукция");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	СписокТабличныхЧастей.Добавить("ВозвратныеОтходы", "ВозвратныеОтходы");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);

КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);

	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ", "Услуги");
	
	Если СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда

		Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
			
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаУслуги,
													Объект.Организация, 
													Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
																	|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
																	"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3", 
																	СтрокаУслуги.СубконтоБУ1, СтрокаУслуги.СубконтоБУ2, СтрокаУслуги.СубконтоБУ3));
																	
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаУслуги,
													Объект.Организация, 
													Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
																	|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
																	"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
																	СтрокаУслуги.СубконтоНУ1, СтрокаУслуги.СубконтоНУ2, СтрокаУслуги.СубконтоНУ3));
																	
		КонецЦикла;

	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетовУслуги = Новый СписокЗначений;
	СписокАналитикиСубконтоУслуги = Новый Соответствие;
	
	СписокАналитикиСчетовУслуги.Добавить("БУ"); // СчетБУ
	СписокАналитикиСчетовУслуги.Добавить("НУ"); // СчетНУ
	
	СписокАналитикиСубконтоУслуги.Вставить("БУ", "БУ"); // СубконтоБУ
	СписокАналитикиСубконтоУслуги.Вставить("НУ", "НУ"); // СубконтоНУ
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов, СписокАналитикиСубконтоУслуги", Объект.Услуги, СписокАналитикиСчетовУслуги, СписокАналитикиСубконтоУслуги);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПодразделениеОрганизации, СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.Количество = 1;
	
	УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, ДанныеОбъекта.Дата, ДанныеОбъекта.Организация);
	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", Новый Структура("СчетБУ", Неопределено));
	
	ПоляОбъектаСубконто   = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
	ПоляОбъектаСубконтоНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоБУ1, СтрокаТабличнойЧасти.СубконтоБУ2, СтрокаТабличнойЧасти.СубконтоБУ3));
															
	РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетБУ, "СубконтоБУ", ДанныеОбъекта.ПодразделениеОрганизации);
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоНУ1, СтрокаТабличнойЧасти.СубконтоНУ2, СтрокаТабличнойЧасти.СубконтоНУ3));
															
	РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетНУ, "СубконтоНУ", ДанныеОбъекта.ПодразделениеОрганизации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
																
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоНУ1, СтрокаТабличнойЧасти.СубконтоНУ2, СтрокаТабличнойЧасти.СубконтоНУ3));
															
	РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СчетНУ, "СубконтоНУ", ДанныеОбъекта.ПодразделениеОрганизации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Спецификация      = УправлениеПроизводствомСервер.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
	
	УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, ДанныеОбъекта.Дата, ДанныеОбъекта.Организация);
	УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	
	ЗаполнитьПлановуюСтоимостьОтходов(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти, ЗаменаСубконтоНУ = Ложь)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратныеОтходы");
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
    
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Продукция'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , "Продукция");
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	ПараметрыФормы.Вставить("ЕстьСпецификация"        , Истина);	
	ПараметрыФормы.Вставить("ТипЦен"                  , ПолучитьТипЦенПлановойСебестоимостиНоменклатуры());
	ПараметрыФормы.Вставить("ВалютаДокумента"         , ВалютаРегламентированногоУчета);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику"                , НСтр("ru = 'По справочнику'"));
	СписокЗапросов.Добавить("ОстаткиНоменклатуры"          , НСтр("ru = 'Остатки номенклатуры'"));
	СписокЗапросов.Добавить("ОстаткиИПлановаяСебестоимость", НСтр("ru = 'Остатки и плановая себестоимость'"));
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЦенПлановойСебестоимостиНоменклатуры()
	
	Возврат Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда 		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;			
	Иначе  
		
		Если ИмяТаблицы <> "Продукция" Тогда
			// Ошибочное имя табличной части
			Возврат;
		КонецЕсли;
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СчетаУчетаСпискаНоменклатуры = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	Объект.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект.Дата);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти =  Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			СтруктураОтбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Рассчитать реквизиты табличной части.
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда 					
					Если ИмяТаблицы = "Продукция" ИЛИ ИмяТаблицы = "ВозвратныеОтходы" Тогда 						
						Продолжить;    						
					КонецЕсли;  					
				Иначе 					
					Если ИмяТаблицы = "Услуги" Тогда						
						Продолжить; 						
					КонецЕсли;  					
				КонецЕсли; 				
			КонецЕсли;
			
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если Не ИмяТаблицы = "Услуги"  Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
			КонецЕсли;
			
			Если Не ИмяТаблицы = "ВозвратныеОтходы" Тогда
				Если  Не ЭтоВставкаИзБуфера ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПлановаяСтоимость) Тогда
					УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Объект.Дата, Объект.Организация);
				КонецЕсли;
				
			КонецЕсли;
			
			СчетаУчета = СчетаУчетаСпискаНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);			
			Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТаблицы, СчетаУчета, НЕ ЭтоВставкаИзБуфера);			
		КонецЕсли;
		
		Если Не ИмяТаблицы = "ВозвратныеОтходы" Тогда				
			УправлениеПроизводствомКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		КонецЕсли;   	
		
	КонецЦикла;	
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПлановуюСтоимостьОтходов(СтрокаТабличнойЧасти, ДанныеОбъекта) 

	ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ВалютаРеглментированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда

		СтрокаТабличнойЧасти.Цена =
			УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
									 ТипЦенПлановойСебестоимости, ДанныеОбъекта.Дата,
									 ВалютаРеглментированногоУчета, 1, , ДанныеОбъекта.Организация);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ДанныеПеремещенияНаСервере(СтруктураПараметров)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ 
	|	ПеремещениеТоваров.ДокументОснование = &Основание"); 
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		ДокументПеремещения = ВыборкаРезультатов.Ссылка;
		НужноПерезаполнить = Ложь;
		
		Если Объект.Продукция.Количество() <> ДокументПеремещения.Товары.Количество() Тогда
			
			НужноПерезаполнить = Истина;
			
		Иначе
			
			Продукции = Объект.Продукция.Выгрузить();
			Продукции.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетБУ", "Количество");
			
			Товаров = ДокументПеремещения.Товары.Выгрузить();
			Товаров.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ", "Количество");
			
			Если Продукции.Количество() <> Товаров.Количество() Тогда
				
				НужноПерезаполнить = Истина;
				
			Иначе
				
				Для Каждого СтрокаПродукции Из Объект.Продукция Цикл
					
					МассивСтрокТоваров = Товаров.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, СчетУчетаБУ, Количество",
																			   СтрокаПродукции.Номенклатура, СтрокаПродукции.ЕдиницаИзмерения, СтрокаПродукции.Коэффициент, 
																			   СтрокаПродукции.СчетБУ, СтрокаПродукции.Количество));
					Если МассивСтрокТоваров.Количество() = 0 Тогда				
						НужноПерезаполнить = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;

			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноПерезаполнить Тогда
			
			СтруктураПараметров.Вставить("ТекстВопроса", НСтр("ru='Содержимое текущего документа и перемещения ТМЗ, введенного на основании, различно. Перезаполнить перемещение ТМЗ?'"));
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Ссылка", ДокументПеремещения.Ссылка);
		
	Иначе
		
		СтруктураПараметров.Вставить("СоздатьОбъект", Истина);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьПеремещениеНаСервере(СтруктураПараметров, ДокументОснование)
	
	ПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
	
	ПеремещениеТоваров.Заполнить(ДокументОснование);
	
	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
	
	СтруктураПараметров.Вставить("Ссылка", ПеремещениеТоваров.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПеремещениеНаСервере(СтруктураПараметров, ДокументОснование)
	
	ПеремещениеТоваров = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	
	ПеремещениеТоваров.Товары.Очистить();
	
	ПеремещениеТоваров.Заполнить(ДокументОснование);
	
	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Продукция.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.ВозвратныеОтходы.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьУслуги(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьПродукция(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧастьВозвратныеОтходы(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("Сумма");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры


#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаПродукция" Тогда		
		ИмяТаблицы = "Продукция";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги"; 		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаВозвратныеОтходы" Тогда		
		ИмяТаблицы = "ВозвратныеОтходы";   		
	КонецЕсли;

	Возврат ИмяТаблицы;

КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	Если ПараметрыВставки.ИмяТаблицы = "Продукция" Тогда
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НомерГТД");	
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("НоменклатурнаяГруппа");
			СписокСвойств.Добавить("ПлановаяСтоимость");
			СписокСвойств.Добавить("Спецификация");
			СписокСвойств.Добавить("СуммаПлановая");
		КонецЕсли;		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетБУ");		
			СписокСвойств.Добавить("СчетНУ");		
			СписокСвойств.Добавить("СчетЗатрат");				
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда 
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("НоменклатурнаяГруппа");
			СписокСвойств.Добавить("ПлановаяСтоимость");
			СписокСвойств.Добавить("СуммаПлановая");
		КонецЕсли;	
		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетБУ");		
			СписокСвойств.Добавить("СчетНУ");		
			СписокСвойств.Добавить("СчетЗатрат");	
			СписокСвойств.Добавить("СубконтоБУ1");
			СписокСвойств.Добавить("СубконтоБУ2");
			СписокСвойств.Добавить("СубконтоБУ3");
			
			СписокСвойств.Добавить("СубконтоНУ1");
			СписокСвойств.Добавить("СубконтоНУ2");
			СписокСвойств.Добавить("СубконтоНУ3");
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "ВозвратныеОтходы" Тогда 
		
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("Цена");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("СтатьяЗатрат");
		КонецЕсли;	
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетБУ");		
			СписокСвойств.Добавить("СчетНУ");		
			
		КонецЕсли; 
	КонецЕсли;
	 	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ПродукцияВставитьСтроки.Доступность				       = Доступность;
	Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность	       = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					       = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	       = Доступность;
	Элементы.ВозвратныеОтходыВставитьСтроки.Доступность				   = Доступность;
	Элементы.ВозвратныеОтходыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;


КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти
