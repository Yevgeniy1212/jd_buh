#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетУчетаБУ",      "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",     "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "СчетУчетаНУ",      "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",     "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "НовыйСчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",     "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары",           "НовыйСчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",     "Номенклатура");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СкладОтправитель");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СкладПолучатель");
	
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	//СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		СтрокаТабличнойЧасти.НовыйСчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СкладОтправитель; СтруктурноеПодразделениеОрганизацияОтправитель");
		БлокируемыеРеквизиты.Добавить("СкладПолучатель; СтруктурноеПодразделениеОрганизацияПолучатель");
		
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыГруппаЗаполнить, ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СодержаниеСписаныТМЗ", НСтр("ru='Перемещены ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) 
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	НеобходимостьОтраженияВНУ 					   = ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Запрос.УстановитьПараметр("СинонимТовары"				  , НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимТоварыНДС"			  , НСтр("ru = 'Товары НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ"	  , НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(Реквизиты, НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваров(Реквизиты, НомераТаблиц)
					+ ТекстЗапросаСписаниеТоварыОрганизаций(Реквизиты, НомераТаблиц)
					+ ТекстЗапросаОприходованиеТоварыОрганизаций(Реквизиты, НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ПараметрыПроведения.СписаниеТоваровТаблицаТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Истина);
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Реквизиты.Ссылка КАК Ссылка,
	               |	Реквизиты.Дата КАК Дата,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СтруктурноеПодразделениеОтправитель,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель,
	               |	Реквизиты.УчитыватьКПН,
	               |	Реквизиты.ВидУчетаНУ,
	               |	Реквизиты.СкладОтправитель,
	               |	Реквизиты.СкладПолучатель,
				   |	Реквизиты.СкладОтправитель КАК Склад,
	               |	&СодержаниеСписаныТМЗ КАК Содержание,
	               |	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	               |ПОМЕСТИТЬ Реквизиты
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК Реквизиты
	               |ГДЕ
	               |	Реквизиты.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реквизиты.Ссылка КАК Регистратор,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.Организация,
	               |	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	               |	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
	               |	Реквизиты.УчитыватьКПН,
	               |	Реквизиты.ВидУчетаНУ,
	               |	Реквизиты.СкладОтправитель,
	               |	Реквизиты.СкладПолучатель,
	               |	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	               |	Реквизиты.Содержание
	               |ИЗ
	               |	Реквизиты КАК Реквизиты";	
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(Реквизиты, НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.НовыйСчетУчетаБУ,
		|	ТаблицаТовары.НовыйСчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.Коэффициент,
		|	ТаблицаТовары.КлючСвязи
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНомераГТД.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаНомераГТД.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
		|	ТаблицаНомераГТД.НовыйНомерГТД КАК НовыйНомерГТД,
		|	ТаблицаНомераГТД.КлючСвязи
		|ПОМЕСТИТЬ ТаблицаНомераГТД
		|ИЗ
		|	Документ.ПеремещениеТоваров.НомераГТД КАК ТаблицаНомераГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
		|		ПО (ТаблицаТовары.КлючСвязи = ТаблицаНомераГТД.КлючСвязи)
		|ГДЕ
		|	ТаблицаНомераГТД.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(Реквизиты, НомераТаблиц)
	
	ТекстЗапроса = "";
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	""Списание"" КАК ТипСписания,
		|	Реквизиты.Ссылка КАК ДокументРеализации,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
		|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	НЕОПРЕДЕЛЕНО КАК Контрагент,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
		|	Реквизиты.Содержание КАК Содержание,
		|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	&ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.СкладОтправитель КАК Склад,
		|	Реквизиты.СкладПолучатель КАК КорСклад,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК КорСтруктурноеПодразделение,
		|	0 КАК Себестоимость,
		|	0 КАК Сумма,
		|	0 КАК СуммаВал,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.НовыйСчетУчетаБУ КАК КорСчетСписанияБУ,
		|	ТаблицаТовары.Номенклатура КАК КорСубконтоБУ1,
		|	Реквизиты.СкладПолучатель КАК КорСубконтоБУ2,
		|	"""" КАК КорСубконтоБУ3,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоБУ1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоБУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,		
		|	ТаблицаТовары.НовыйСчетУчетаНУ КАК КорСчетСписанияНУ,
		|	ТаблицаТовары.Номенклатура КАК КорСубконтоНУ1,
		|	Реквизиты.СкладПолучатель КАК КорСубконтоНУ2,
		|	"""" КАК КорСубконтоНУ3,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) КАК ВидКорСубконтоНУ1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Склады) КАК ВидКорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
		|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
		|ГДЕ
		|	(Реквизиты.СтруктурноеПодразделениеОтправитель <> Реквизиты.СтруктурноеПодразделениеПолучатель
		|			ИЛИ Реквизиты.СкладПолучатель <> Реквизиты.СкладОтправитель
		|			ИЛИ ТаблицаТовары.СчетУчетаБУ <> ТаблицаТовары.НовыйСчетУчетаБУ
		|			ИЛИ ТаблицаТовары.СчетУчетаНУ <> ТаблицаТовары.НовыйСчетУчетаНУ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки" 
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Возврат ТекстЗапроса ;
	
КонецФункции

Функция ТекстЗапросаСписаниеТоварыОрганизаций(Реквизиты,НомераТаблиц)
	
	ТекстЗапроса = "";
	
	НомераТаблиц.Вставить("ТаблицаРеквизитыСписаниеТоварыОрганизаций"  , НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаСписаниеТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	Реквизиты.Склад КАК Склад,
	|	НомераГТД.НомерГТД КАК НомерГТД,
	|	СУММА(НомераГТД.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	ТаблицаНомераГТД КАК НомераГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО НомераГТД.КлючСвязи = ТаблицаТовары.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НомераГТД.НомерГТД <> НомераГТД.НовыйНомерГТД
	|			ИЛИ Реквизиты.СтруктурноеПодразделениеОтправитель <> Реквизиты.СтруктурноеПодразделениеПолучатель
	|			ИЛИ Реквизиты.СкладОтправитель <> Реквизиты.СкладПолучатель)
	|           И НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	НомераГТД.НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОприходованиеТоварыОрганизаций(Реквизиты, НомераТаблиц)
	
	ТекстЗапроса = "";
	
	НомераТаблиц.Вставить("ТаблицаРеквизитыОприходованиеТоварыОрганизаций", НомераТаблиц.Количество());		
	НомераТаблиц.Вставить("ТаблицаОприходованиеТоварыОрганизаций", НомераТаблиц.Количество());		
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделение,
	|	Реквизиты.СкладПолучатель КАК Склад,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	НомераГТД.НовыйНомерГТД КАК НомерГТД,
	|	СУММА(НомераГТД.Количество) КАК Количество,
	|	Реквизиты.СкладПолучатель КАК Склад,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	ТаблицаНомераГТД КАК НомераГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО НомераГТД.КлючСвязи = ТаблицаТовары.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НомераГТД.НомерГТД <> НомераГТД.НовыйНомерГТД
	|			ИЛИ Реквизиты.СтруктурноеПодразделениеОтправитель <> Реквизиты.СтруктурноеПодразделениеПолучатель
	|			ИЛИ Реквизиты.СкладОтправитель <> Реквизиты.СкладПолучатель)
	|           И НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.СкладПолучатель,
	|	НомераГТД.НовыйНомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

	Возврат ТекстЗапроса;
		
КонецФункции	

// ЗАПОЛНЕНИЕ ДОКУМЕНТА

Процедура ЗаполнитьПоДокументуОтчетПроизводстваЗаСмену(Объект, Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ДокументОснование = Основание.Ссылка;
	Объект.СкладОтправитель  = Основание.Склад;
			
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура"); 		
	СтруктураПоиска.Вставить("ЕдиницаИзмерения");
	СтруктураПоиска.Вставить("СчетУчетаБУ");
	СтруктураПоиска.Вставить("СчетУчетаНУ");
	
	Для Каждого СтрокаТовары Из Основание.Продукция Цикл
		
		СтруктураПоиска.Вставить("Номенклатура",    СтрокаТовары.Номенклатура); 		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",СтрокаТовары.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СчетУчетаБУ",     СтрокаТовары.СчетБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",     СтрокаТовары.СчетНУ);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаТовары, Объект.Товары, Объект.НомераГТД);
		
		СтрокаТабличнойЧасти.СчетУчетаБУ 	  = СтрокаТовары.СчетБУ;
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СтрокаТовары.СчетБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ 	  = СтрокаТовары.СчетНУ;
		СтрокаТабличнойЧасти.НовыйСчетУчетаНУ = СтрокаТовары.СчетНУ; 		
				
	КонецЦикла;
	
	Для Каждого СтрокаГТД Из Объект.НомераГТД Цикл
		СтрокаГТД.НовыйНомерГТД = СтрокаГТД.НомерГТД;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуПоступлениеТоваровУслуг(Объект, Основание) Экспорт

	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Объект.ДокументОснование = Основание.Ссылка;
	Объект.СкладОтправитель  = Основание.Склад;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура"); 		
	СтруктураПоиска.Вставить("ЕдиницаИзмерения");
	СтруктураПоиска.Вставить("СчетУчетаБУ");
	СтруктураПоиска.Вставить("СчетУчетаНУ");
	
	Для Каждого СтрокаТовары Из Основание.Товары Цикл
		
		СтруктураПоиска.Вставить("Номенклатура",    СтрокаТовары.Номенклатура); 		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",СтрокаТовары.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СчетУчетаБУ",     СтрокаТовары.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",     СтрокаТовары.СчетУчетаНУ);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаТовары, Объект.Товары, Объект.НомераГТД);
		
		СтрокаТабличнойЧасти.СчетУчетаБУ 	  = СтрокаТабличнойЧасти.СчетУчетаБУ;
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СтрокаТабличнойЧасти.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ 	  = СтрокаТабличнойЧасти.СчетУчетаНУ;
		СтрокаТабличнойЧасти.НовыйСчетУчетаНУ = СтрокаТабличнойЧасти.СчетУчетаНУ; 		
				
	КонецЦикла;
	
	Для Каждого СтрокаГТД Из Объект.НомераГТД Цикл
		СтрокаГТД.НовыйНомерГТД = СтрокаГТД.НомерГТД;
	КонецЦикла;
	                                                 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на перемещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на перемещение товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// З-5 (накладная на перемещение запасов)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяЗ5";
	КомандаПечати.Представление = НСтр("ru = 'З-5 (накладная на перемещение запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение,НакладнаяЗ5";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение,НакладнаяЗ5";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение,НакладнаяЗ5";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать накладной на перемещение
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяНаПеремещение",
			НСтр("ru = 'Накладная на перемещение товаров'"),
			ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПеремещениеТоваров.ПФ_MXL_Накладная");  
						
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("НакладнаяНаПеремещение"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

	// Печать формы З-5
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяЗ5") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяЗ5",
			НСтр("ru = 'З-5 (накладная на перемещение запасов)'"),
			//Евгений+
			//ПечатьЗ5(МассивОбъектов, ОбъектыПечати),
			Киб_ПечатьЗ5(МассивОбъектов, ОбъектыПечати),
			//Евгений-
			,
			"Документ.ПеремещениеТоваров.ПФ_MXL_З5");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 

	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель
	|ПОМЕСТИТЬ ВТ_ПеремещенияТоваров                                                   

	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПеремещенияТоваров.Ссылка,
	|	ОтветственныеЛицаСкладОтправитель.ФизическоеЛицо КАК ОтветственноеЛицоОтправитель,
	|	ОтветственныеЛицаСкладПолучатель.ФизическоеЛицо КАК ОтветственноеЛицоПолучатель
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛицаПеремещения
	|ИЗ
	|	ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛицаОтправитель.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ПеремещенияТоваров.Отправитель = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаОтправитель
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛицаОтправитель.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛицаОтправитель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛицаОтправитель.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладОтправитель
	|		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладОтправитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛицаПолучатель.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ПеремещенияТоваров.Получатель = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаПолучатель
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛицаПолучатель.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛицаПолучатель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛицаПолучатель.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладПолучатель
	|		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладПолучатель.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаПеремещения.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаПеремещения.Ссылка.Номер КАК Номер,
	|	ОтветственныеЛицаПеремещения.Ссылка.Дата КАК Дата,
	|	ОтветственныеЛицаПеремещения.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	|		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель
	|	КОНЕЦ КАК ПредставлениеСЕОтправитель,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	|		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель
	|	КОНЕЦ КАК ПредставлениеСЕПолучатель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель КАК Отправитель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель.Представление КАК ПредставлениеОтправителя,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель КАК Получатель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	|	ОтветственныеЛицаПеремещения.ОтветственноеЛицоОтправитель КАК МОЛОтправителя,
	|	ОтветственныеЛицаПеремещения.ОтветственноеЛицоПолучатель КАК МОЛПолучателя,
	|	ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель
	|ИЗ
	|	ВТ_ОтветственныеЛицаПеремещения КАК ОтветственныеЛицаПеремещения";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ПеремещениеТоваров.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.Регистратор,
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов)) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.Регистратор,
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|			И ПеремещениеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаПоРегистратору = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПеремещениеТоваров_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_Накладная", КодЯзыка);

	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделениеОтправитель);
		
		// Выводим шапку накладной
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Ссылка, НСтр("ru='Накладная на перемещение'",КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);

		// Вывести табличную часть
		ОбластьМакетаШапка = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакетаШапка.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		МакетОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
		СуммаИтого 	  = 0;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
		
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				СуммаИтого = СуммаИтого + ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
				
				МакетОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
				МакетОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
				
				Если ВыводитьКоды Тогда
					МакетОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;    
				
				ТабДокумент.Вывести(МакетОбластьСтроки);
				
			КонецЦикла;

		КонецЕсли;
		
		// Вывести подвал
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвала.Параметры.СуммаИтого = СуммаИтого;
		ТабДокумент.Вывести(ОбластьПодвала);

		// Вывести подписи
		ОбластьМакетаПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакетаПодписи.Параметры.ПредставлениеМОЛОтправителя = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.МОЛОтправителя);
		ОбластьМакетаПодписи.Параметры.ПредставлениеМОЛПолучателя  = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.МОЛПолучателя);
		ТабДокумент.Вывести(ОбластьМакетаПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

// Функция формирует табличный документ с печатной формой "З-5".
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ5(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// сформируем запрос по данным шапки 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель
	|ПОМЕСТИТЬ ВТ_ПеремещенияТоваров                                                   

	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПеремещенияТоваров.Ссылка,
	|	ОтветственныеЛицаСкладОтправитель.ФизическоеЛицо КАК ОтветственноеЛицоОтправитель,
	|	ОтветственныеЛицаСкладПолучатель.ФизическоеЛицо КАК ОтветственноеЛицоПолучатель
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛицаПеремещения
	|ИЗ
	|	ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛицаОтправитель.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ПеремещенияТоваров.Отправитель = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаОтправитель
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛицаОтправитель.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛицаОтправитель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛицаОтправитель.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладОтправитель
	|		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладОтправитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛицаПолучатель.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ПеремещенияТоваров.Получатель = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаПолучатель
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛицаПолучатель.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛицаПолучатель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛицаПолучатель.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладПолучатель
	|		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладПолучатель.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаПеремещения.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаПеремещения.Ссылка.Номер КАК Номер,
	|	ОтветственныеЛицаПеремещения.Ссылка.Дата КАК Дата,
	|	ОтветственныеЛицаПеремещения.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	|		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель
	|	КОНЕЦ КАК ПредставлениеСЕОтправитель,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	|		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель
	|	КОНЕЦ КАК ПредставлениеСЕПолучатель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель КАК Отправитель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель.Представление КАК ПредставлениеОтправителя,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель КАК Получатель,
	|	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	|	ОтветственныеЛицаПеремещения.ОтветственноеЛицоОтправитель КАК МОЛОтправителя,
	|	ОтветственныеЛицаПеремещения.ОтветственноеЛицоПолучатель КАК МОЛПолучателя,
	|	ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель
	|ИЗ
	|	ВТ_ОтветственныеЛицаПеремещения КАК ОтветственныеЛицаПеремещения";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
		
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ПеремещениеТоваров.Номенклатура.Код КАК ТоварКод,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов)) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.Регистратор) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|			И ПеремещениеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|   СУММА(Сумма), КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	|ПО
	|	Ссылка
	|";
	
	ВыборкаПоРегистратору = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент 					 = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	 = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПеремещениеТоваров_З5";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_З5");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	// получим области макета
	Шапка 						= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы2			= Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ЗаголовокТаблицыДляПереноса = Макет.ПолучитьОбласть("ЗаголовокТаблицыДляПереноса");
	СтрокаТаблицы2				= Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоТаблицы2				= Макет.ПолучитьОбласть("ИтогоТаблицы2");
	Подвал						= Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделениеОтправитель);

		// Вывод шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.Дата);	
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");		
		Шапка.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.Дата, "ru");
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		Шапка.Параметры.Заполнить(ВыборкаПоДокументам);
		Шапка.Параметры.Отправитель = "" + ВыборкаПоДокументам.ПредставлениеСЕОтправитель + "/" + ВыборкаПоДокументам.ПредставлениеОтправителя;
		Шапка.Параметры.Получатель = "" + ВыборкаПоДокументам.ПредставлениеСЕПолучатель + "/" + ВыборкаПоДокументам.ПредставлениеПолучателя;	
			
		ТабДокумент.Вывести(Шапка);
		
		// вывод таблицы
		
		//заголовок
		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы2.Параметры.Валюта = Валюта;
		ТабДокумент.Вывести(ЗаголовокТаблицы2);
		ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаТовары = Неопределено;
		КонецЕсли;
		
		ВсегоКоличество = 0;
		Если НЕ ВыборкаТовары = Неопределено Тогда
		
			//выводим строки таблицы
			Пока ВыборкаТовары.Следующий() Цикл
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем переносимую часть заголовка таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы2);
					ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
					
				КонецЕсли;
				
				СуммаТовара = ?(ВыборкаТовары.Сумма = Null, 0, ВыборкаТовары.Сумма);
				
				СтрокаТаблицы2.Параметры.Заполнить(ВыборкаТовары);
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТовары.ТоварНаименование) Тогда 
					СтрокаТаблицы2.Параметры.ТоварНаименование = ВыборкаТовары.Номенклатура;
				КонецЕсли;
				
				СтрокаТаблицы2.Параметры.Количество = Формат(ВыборкаТовары.Количество, "ЧДЦ=3");
				СтрокаТаблицы2.Параметры.Сумма 		= Формат(СуммаТовара, "ЧДЦ=2");
				СтрокаТаблицы2.Параметры.Цена 		= Формат(?(ЗначениеЗаполнено(ВыборкаТовары.Количество), СуммаТовара/ВыборкаТовары.Количество, 0), "ЧДЦ=2");
				
				ТабДокумент.Вывести(СтрокаТаблицы2);
				
				ВсегоКоличество = ВсегоКоличество + ВыборкаТовары.Количество;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Подвал.Параметры.КоличествоОтпущено		= ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ВсегоКоличество, КодЯзыка);
		Подвал.Параметры.СуммаПрописью 			= ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ВыборкаПоРегистратору.Сумма),ВыборкаПоРегистратору.Сумма,0), Валюта, КодЯзыка);
		ИтогоТаблицы2.Параметры.ИтогоКоличество = ВсегоКоличество;
		ИтогоТаблицы2.Параметры.ИтогоСумма		=  ?(ЗначениеЗаполнено(ВыборкаПоРегистратору.Сумма),ВыборкаПоРегистратору.Сумма,0);			
		
		//МОЛ
		ДанныеОтправителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛОтправителя, ВыборкаПоДокументам.Дата);
		ДанныеПолучателя  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛПолучателя, ВыборкаПоДокументам.Дата);
		
		Подвал.Параметры.ДолжностьОтпустил = ДанныеОтправителя.Должность;
		Подвал.Параметры.ФИООтпустил 	   = ДанныеОтправителя.Представление;
		
		Подвал.Параметры.ДолжностьПолучил = ДанныеПолучателя.Должность;
		Подвал.Параметры.ФИОПолучил 	  = ДанныеПолучателя.Представление;
		
		Подвал.Параметры.Валюта = Валюта;
		
		ТабДокумент.Вывести(ИтогоТаблицы2);
		
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
				
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
		КонецЕсли;
	
		ТабДокумент.Вывести(Подвал);	

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

//Евгений+

// Функция формирует табличный документ с печатной формой "З-5".
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция Киб_ПечатьЗ5(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// сформируем запрос по данным шапки 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремещениеТоваров1.Ссылка КАК Ссылка,
	               |	ПеремещениеТоваров1.Номер КАК Номер,
	               |	ПеремещениеТоваров1.Дата КАК Дата,
	               |	ПеремещениеТоваров1.Организация КАК Организация,
	               |	ПеремещениеТоваров1.СкладОтправитель КАК Отправитель,
	               |	ПеремещениеТоваров1.СкладПолучатель КАК Получатель,
	               |	ПеремещениеТоваров1.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	               |	ПеремещениеТоваров1.ОтпускРазрешил КАК ОтпускРазрешил,
	               |	ПеремещениеТоваров1.Проверил КАК Проверил,
	               |	ПеремещениеТоваров1.СолидарноеМолДата КАК СолидарноеМолДата
	               |ПОМЕСТИТЬ ВТ_ПеремещенияТоваров
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров1
	               |ГДЕ
	               |	ПеремещениеТоваров1.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка,
	               |	ОтветственныеЛицаСкладОтправитель.ФизическоеЛицо КАК ОтветственноеЛицоОтправитель,
	               |	ОтветственныеЛицаСкладПолучатель.ФизическоеЛицо КАК ОтветственноеЛицоПолучатель,
	               |	ВТ_ПеремещенияТоваров.ОтпускРазрешил КАК ОтпускРазрешил,
	               |	ВТ_ПеремещенияТоваров.Проверил КАК Проверил,
	               |	ВТ_ПеремещенияТоваров.СолидарноеМолДата КАК СолидарноеМолДата
	               |ПОМЕСТИТЬ ВТ_ОтветственныеЛицаПеремещения
	               |ИЗ
	               |	ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПериодыОтвественныеЛицаОтправитель.Ссылка КАК Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |					ПО ВТ_ПеремещенияТоваров.Отправитель = ОтветственныеЛица.СтруктурнаяЕдиница
	               |						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОтветственныеЛица.СтруктурнаяЕдиница,
	               |				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаОтправитель
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |				ПО ПериодыОтвественныеЛицаОтправитель.Период = ОтветственныеЛица.Период
	               |					И ПериодыОтвественныеЛицаОтправитель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПериодыОтвественныеЛицаОтправитель.Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладОтправитель
	               |		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладОтправитель.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПериодыОтвественныеЛицаПолучатель.Ссылка КАК Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |				ВТ_ПеремещенияТоваров.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ПеремещенияТоваров КАК ВТ_ПеремещенияТоваров
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |					ПО ВТ_ПеремещенияТоваров.Получатель = ОтветственныеЛица.СтруктурнаяЕдиница
	               |						И ВТ_ПеремещенияТоваров.Дата >= ОтветственныеЛица.Период
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОтветственныеЛица.СтруктурнаяЕдиница,
	               |				ВТ_ПеремещенияТоваров.Ссылка) КАК ПериодыОтвественныеЛицаПолучатель
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	               |				ПО ПериодыОтвественныеЛицаПолучатель.Период = ОтветственныеЛица.Период
	               |					И ПериодыОтвественныеЛицаПолучатель.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПериодыОтвественныеЛицаПолучатель.Ссылка,
	               |			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаСкладПолучатель
	               |		ПО ВТ_ПеремещенияТоваров.Ссылка = ОтветственныеЛицаСкладПолучатель.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтветственныеЛицаПеремещения.Ссылка КАК Ссылка,
	               |	ОтветственныеЛицаПеремещения.Ссылка.Номер КАК Номер,
	               |	ОтветственныеЛицаПеремещения.Ссылка.Дата КАК Дата,
	               |	ОтветственныеЛицаПеремещения.Ссылка.Организация КАК Организация,
	               |	ВЫБОР
	               |		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	               |		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель
	               |	КОНЕЦ КАК ПредставлениеСЕОтправитель,
	               |	ВЫБОР
	               |		КОГДА ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |			ТОГДА ОтветственныеЛицаПеремещения.Ссылка.Организация.Наименование
	               |		ИНАЧЕ ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеПолучатель
	               |	КОНЕЦ КАК ПредставлениеСЕПолучатель,
	               |	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель КАК Отправитель,
	               |	ОтветственныеЛицаПеремещения.Ссылка.СкладОтправитель.Представление КАК ПредставлениеОтправителя,
	               |	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель КАК Получатель,
	               |	ОтветственныеЛицаПеремещения.Ссылка.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	               |	ОтветственныеЛицаПеремещения.ОтветственноеЛицоОтправитель КАК МОЛОтправителя,
	               |	ОтветственныеЛицаПеремещения.ОтветственноеЛицоПолучатель КАК МОЛПолучателя,
	               |	ОтветственныеЛицаПеремещения.Ссылка.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	               |	ОтветственныеЛицаПеремещения.ОтпускРазрешил КАК ОтпускРазрешил,
	               |	ОтветственныеЛицаПеремещения.Проверил КАК Проверил,
	               |	ПеремещениеТоваров2.СолидарныеМол.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ФизЛицо КАК ФизЛицо
	               |	) КАК СолидарныеМол,
	               |	ОтветственныеЛицаПеремещения.СолидарноеМолДата КАК СолидарноеМолДата,
	               |	ПеремещениеТоваров2.Комментарий КАК Комментарий,
	               |	ПеремещениеТоваров2.МОЛОтправитель КАК МОЛОтправитель,
	               |	ПеремещениеТоваров2.МОЛПолучатель КАК МОЛПолучатель,
	               |	ПеремещениеТоваров2.МОЛОтправитель2 КАК МОЛОтправитель2
	               |ИЗ
	               |	ВТ_ОтветственныеЛицаПеремещения КАК ОтветственныеЛицаПеремещения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров2
	               |		ПО ОтветственныеЛицаПеремещения.Ссылка = ПеремещениеТоваров2.Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();

	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ПеремещениеТоваров.Номенклатура.Код КАК ТоварКод,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.Регистратор) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|			И ПеремещениеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.НомерСтроки
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
	
	ВыборкаПоРегистратору = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент 					 = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	 = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_З5";
	
	Макет = Документы.ПеремещениеТоваров.ПолучитьМакет("Макет_35");
	
	// получим области макета
	Шапка 						= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы2			= Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ЗаголовокТаблицыДляПереноса = Макет.ПолучитьОбласть("ЗаголовокТаблицыДляПереноса");
	СтрокаТаблицы2				= Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоТаблицы2				= Макет.ПолучитьОбласть("ИтогТаблицы2");
	Подвал						= Макет.ПолучитьОбласть("Подвал");
	СолидарныеШ					 = Макет.ПолучитьОбласть("СолидарныеШ");
	СолидарныеС					 = Макет.ПолучитьОбласть("СолидарныеС");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделениеОтправитель);

		// Вывод шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.Дата);	
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Представление,");		
		Шапка.Параметры.ОрганизацияРНН = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.Дата, "ru");
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		Шапка.Параметры.Заполнить(ВыборкаПоДокументам);
		Шапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.Отправитель = ВыборкаПоДокументам.ПредставлениеОтправителя; //"" + ВыборкаПоДокументам.ПредставлениеСЕОтправитель + "/" + ВыборкаПоДокументам.ПредставлениеОтправителя;
		Шапка.Параметры.Получатель = ВыборкаПоДокументам.ПредставлениеПолучателя; //"" + ВыборкаПоДокументам.ПредставлениеСЕПолучатель + "/" + ВыборкаПоДокументам.ПредставлениеПолучателя;
		Шапка.Параметры.МОЛОтправитель = ВыборкаПоДокументам.МОЛОтправителя;
		Шапка.Параметры.Комментарий = "Комментарий: " + ВыборкаПоДокументам.Комментарий;
		
		ТабДокумент.Вывести(Шапка);
		
		// вывод таблицы
		
		//заголовок
		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы2.Параметры.Валюта = Валюта;
		ТабДокумент.Вывести(ЗаголовокТаблицы2);
		ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаТовары = Неопределено;
		КонецЕсли;
		
		ВсегоКоличество = 0;
		Если НЕ ВыборкаТовары = Неопределено Тогда
		
			//выводим строки таблицы
			Пока ВыборкаТовары.Следующий() Цикл
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					// Выведем переносимую часть заголовка таблицы	
					ТабДокумент.Вывести(ЗаголовокТаблицы2);
					ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
					
				КонецЕсли;
				
				СуммаТовара = ?(ВыборкаТовары.Сумма = Null, 0, ВыборкаТовары.Сумма);
				
				СтрокаТаблицы2.Параметры.Заполнить(ВыборкаТовары);
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТовары.ТоварНаименование) Тогда 
					СтрокаТаблицы2.Параметры.ТоварНаименование = ВыборкаТовары.Номенклатура;
				КонецЕсли;
				
				СтрокаТаблицы2.Параметры.Количество = Формат(ВыборкаТовары.Количество, "ЧДЦ=3");
				СтрокаТаблицы2.Параметры.Сумма 		= Формат(СуммаТовара, "ЧДЦ=2");
				СтрокаТаблицы2.Параметры.Цена 		= Формат(?(ЗначениеЗаполнено(ВыборкаТовары.Количество), СуммаТовара/ВыборкаТовары.Количество, 0), "ЧДЦ=2");
				
				ТабДокумент.Вывести(СтрокаТаблицы2);
				
				ВсегоКоличество = ВсегоКоличество + ВыборкаТовары.Количество;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Подвал.Параметры.КоличествоНаименований	= ОбщегоНазначенияБКВызовСервера.КоличествоПрописью(ВсегоКоличество);
		Подвал.Параметры.СуммаПрописью 			= ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ВыборкаПоРегистратору.Сумма),ВыборкаПоРегистратору.Сумма,0), Валюта);
		ИтогоТаблицы2.Параметры.Количество = ВсегоКоличество;
		ИтогоТаблицы2.Параметры.Сумма		=  ?(ЗначениеЗаполнено(ВыборкаПоРегистратору.Сумма),ВыборкаПоРегистратору.Сумма,0);			
		
		//МОЛ
		ДанныеРазрешил    = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтпускРазрешил, ВыборкаПоДокументам.Дата);
		ДанныеПроверил    = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Проверил, ВыборкаПоДокументам.Дата);
		ДанныеОтправителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛОтправитель,ВыборкаПоДокументам.Дата);
		ДанныеПолучателя  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛПолучателя,ВыборкаПоДокументам.Дата);
		
		Подвал.Параметры.ДолжностьОтпускРазрешил = ДанныеРазрешил.Должность;
		Подвал.Параметры.ФИООтпускРазрешил 	     = ДанныеРазрешил.Представление;
		
		Подвал.Параметры.ДолжностьПроверил		 = ДанныеПроверил.Должность;
		Подвал.Параметры.ФИОПроверил 	  		 = ДанныеПроверил.Представление;
		
		Подвал.Параметры.ДолжностьОтпустил		 = ДанныеОтправителя.Должность;
		Подвал.Параметры.ФИООтпустил 	  		 = ДанныеОтправителя.Представление;
		
		Подвал.Параметры.ДолжностьПолучил 		 = ДанныеПолучателя.Должность;
		Подвал.Параметры.ФИОПолучил 	  		 = ДанныеПолучателя.Представление;
		
		//Подвал.Параметры.Валюта = Валюта;
		
		ТабДокумент.Вывести(ИтогоТаблицы2);
		
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
				
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
		КонецЕсли;
	
		ТабДокумент.Вывести(Подвал);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.МОЛОтправитель2) Тогда
			ДанныеОтправителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МОЛОтправитель2,ВыборкаПоДокументам.Дата);
			СолидарныеШ.Параметры.ДолжностьОтпустил	= ДанныеОтправителя.Должность;
			СолидарныеШ.Параметры.ФИОКлад 	  		 = ДанныеОтправителя.Представление;
			СолидарныеШ.Параметры.СолДата = ВыборкаПоДокументам.СолидарноеМолДата; 
			ТабДокумент.Вывести(СолидарныеШ);
		КонецЕсли;
		
		Для каждого Солидарный из ВыборкаПоДокументам.СолидарныеМол.Выгрузить() Цикл
			
			СолидарныйМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, Солидарный.ФизЛицо, ВыборкаПоДокументам.Дата);
			СолидарныеС.Параметры.Должность = СолидарныйМОЛ.Должность;	
			СолидарныеС.Параметры.ФИО = СолидарныйМОЛ.Представление;
			
			ТабДокумент.Вывести(СолидарныеС);
			
		КонецЦикла;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

//Евгений-

#КонецЕсли