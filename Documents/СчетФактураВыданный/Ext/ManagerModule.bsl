#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СоздатьДокументНаОсновании(Основание, РеквизитыСчетаФактуры) Экспорт
	
	СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
	СчетФактура.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
	
	СчетФактура.Заполнить(Основание);
	
	РежимЗаписи = ?(Основание.Проведен, 
		РежимЗаписиДокумента.Проведение, 
		РежимЗаписиДокумента.Запись);
		
	СчетФактура.Записать(РежимЗаписи);
	
	Возврат СчетФактура.Ссылка;
	
КонецФункции

// Процедура определяет валюту, контрагента и организацию счета-фактуры
// на основе анализа данных документов оснований
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.СчетФактураВыданный - объект данных формы или объект документа счета-фактуры, параметры которого необходимо определить
//	ДокументОснование - ДокументСсылка - документ, на основании которого необходимо заполнить основные параметры счета-фактуры
//
Процедура ОпределениеПараметровСчетаФактуры(Объект, ДокументОснование = Неопределено) Экспорт
	
	Если Объект.ДатаОборотаВТабличнойЧасти Тогда
		
		СтруктураТабличныхЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
		
		Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда 
					СтрокаТаблицы.ДатаОборота = Объект.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если (Объект.ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование)) И НЕ ЗначениеЗаполнено(ДокументОснование) тогда
		// Основание не выбрано, установим датой совершения оборота дату выписки счета-фактуры, прочие параметры не определяем
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
			Объект.ДатаСовершенияОборотаПоРеализации = Объект.Дата;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
		ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) 
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)) Тогда
			
		МетаданныеДокумента = ДокументОснование.Метаданные();
		СписокРеквизитов = "";
		
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "ВалютаДокумента,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "Организация,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "Контрагент,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			СписокРеквизитов = СписокРеквизитов + "ДоговорКонтрагента,";
		КонецЕсли;
		СписокРеквизитов = Лев(СписокРеквизитов, СтрДлина(СписокРеквизитов) - 1);
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОснования);
		
	КонецЕсли;
	
	Если Объект.ДокументыОснования.Количество() = 1 Тогда
		Объект.ДокументОснование = ДокументОснование;
	КонецЕсли; 
	
	// установим плательщика и покупателя
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Объект.Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Организация);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Покупатель) Тогда
		Объект.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Контрагент);
	КонецЕсли;	
	
	// Страна назначения
	Если НЕ ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
		СтранаРезидентства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Покупатель, "СтранаРезидентства");
		Объект.СтранаНазначения = ?(ЗначениеЗаполнено(СтранаРезидентства), СтранаРезидентства, Справочники.КлассификаторСтранМира.Казахстан);
	КонецЕсли;
	
	// Дата совершения оборота = дата выписки документа реализации
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
		Объект.ДатаСовершенияОборотаПоРеализации = ДокументОснование.Дата;
	КонецЕсли;	
	
КонецПроцедуры        

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.СчетФактураВыданный - объект данных формы или объект документа счета-фактуры, реквизиты которого необходимо заполнить
//
Процедура ЗаполнитьРеквизитыДокумента(Объект, ДокументОснование = Неопределено) Экспорт
	
	Если ДокументОснование = Неопределено Тогда 
		ДокументОснование = Объект.ДокументОснование;
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Сторнирование") Тогда
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеОснования = ДокументОснование.Метаданные();
	
	ЕстьСчетОрганизации 	  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеОснования);
	ЕстьКонтрагент 			  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент"				, МетаданныеОснования);
	ЕстьГрузополучатель 	  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Грузополучатель"			, МетаданныеОснования);
	ЕстьДоверенностьНомер 	  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьНомер"	    , МетаданныеОснования);
	ЕстьДоверенностьДата  	  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьДата"         , МетаданныеОснования);
	ЕстьДоверенностьВыдана    = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьВыдана"       , МетаданныеОснования);
	ЕстьДоверенностьЛицо      = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьЛицо"	        , МетаданныеОснования);
	ЕстьАдресДоставки 		  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("АдресДоставки"			, МетаданныеОснования);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение), Объект.СтруктурноеПодразделение, Объект.Организация));
	Запрос.УстановитьПараметр("Контрагент" , Объект.Контрагент);
	Запрос.УстановитьПараметр("Основание"  , ДокументОснование);
	
	Запрос.УстановитьПараметр("ПустойКонтрагент"	, Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));   	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ОсновнойБанковскийСчет КАК СчетОрганизации
	|ПОМЕСТИТЬ ВТ_ДанныеОрганизации
	|ИЗ
	|	Справочник." + ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение), "ПодразделенияОрганизаций", "Организации") + " КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ОсновнойБанковскийСчет КАК СчетКонтрагента
	|ПОМЕСТИТЬ ВТ_ДанныеКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	" + ?(ЕстьКонтрагент, 		 "ДанныеДокумента.Контрагент", 				 "&ПустойКонтрагент") 	  + " КАК Контрагент,
	|	" + ?(ЕстьСчетОрганизации, 	 "ДанныеДокумента.БанковскийСчетОрганизации", "&ПустойБанковскийСчет") + " КАК СчетОрганизации,
	|	" + ?(ЕстьГрузополучатель, 	 "ДанныеДокумента.Грузополучатель", 			 "&ПустойКонтрагент") 	  + " КАК Грузополучатель,
	|	" + ?(ЕстьДоверенностьНомер, "ДанныеДокумента.ДоверенностьНомер", 		 """""") + " КАК ДоверенностьНомер,
	|	" + ?(ЕстьДоверенностьДата,  "ДанныеДокумента.ДоверенностьДата", 		"&ПустаяДата") + " КАК ДоверенностьДата,
	|	" + ?(ЕстьДоверенностьЛицо,  "ДанныеДокумента.ДоверенностьЛицо","""""") + " КАК ДоверенностьЛицо,
	|	" + ?(ЕстьДоверенностьВыдана,"ДанныеДокумента.ДоверенностьВыдана","""""") + " КАК ДоверенностьВыдана,
	|	" + ?(ЕстьАдресДоставки, 	"ДанныеДокумента.АдресДоставки", 			 """""") + " КАК АдресДоставки
	|ПОМЕСТИТЬ ВТ_ДанныеОснования
	|ИЗ
	|	" + МетаданныеОснования.ПолноеИмя() + " КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеОснования.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ВТ_ДанныеОснования.СчетОрганизации
	|		ИНАЧЕ ВТ_ДанныеОрганизации.СчетОрганизации
	|	КОНЕЦ КАК СчетОрганизации,
	|	ВТ_ДанныеКонтрагента.СчетКонтрагента КАК СчетКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеОснования.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВТ_ДанныеОснования.Грузополучатель
	|		ИНАЧЕ ВТ_ДанныеОснования.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	ВТ_ДанныеОснования.ДоверенностьНомер,
	|	ВТ_ДанныеОснования.ДоверенностьДата,
	|	ВТ_ДанныеОснования.ДоверенностьЛицо,
	|	ВТ_ДанныеОснования.ДоверенностьВыдана,
	|	ВТ_ДанныеОснования.АдресДоставки КАК АдресДоставки
	|ИЗ
	|	ВТ_ДанныеОснования КАК ВТ_ДанныеОснования,
	|	ВТ_ДанныеОрганизации КАК ВТ_ДанныеОрганизации,
	|	ВТ_ДанныеКонтрагента КАК ВТ_ДанныеКонтрагента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СписокСвойств = "";
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			СписокСвойств = СписокСвойств + "СчетОрганизации,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СписокСвойств = СписокСвойств + "СчетКонтрагента,";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
			СписокСвойств = СписокСвойств + "АдресДоставки,";
		КонецЕсли;

		СписокСвойств = СписокСвойств + "Грузополучатель, ДоверенностьНомер, ДоверенностьДата, ДоверенностьЛицо, ДоверенностьВыдана";		
		ЗаполнитьЗначенияСвойств(Объект, Выборка, СписокСвойств);                                                                                   		
	КонецЕсли;
	
	Объект.Грузоотправитель = Объект.Организация;
    	
	Объект.УсловияОплаты    = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента.УсловияОплаты), Объект.ДоговорКонтрагента.УсловияОплаты, "");
	Объект.УсловияПоставки  = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента.УсловияПоставки), Объект.ДоговорКонтрагента.УсловияПоставки, "XXX");

	Если НЕ ЗначениеЗаполнено(Объект.СпособОтправленияПоКлассификатору) Тогда
		Объект.СпособОтправленияПоКлассификатору = "99";
	КонецЕсли;

КонецПроцедуры

Функция РеализацияПоТоварамИзПеречня(Товары,Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО ВТ_Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ПО СправочникНоменклатура.КодТНВЭД = ГСВС.КодГСВС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&Дата, ПризнакАктивности) КАК СведенияОНоменклатуреГСВС
	|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ
	|	НЕ ГСВС.Ссылка ЕСТЬ NULL
	|   И СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий";
		
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());	
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("ПодтвержденДокументамиОтгрузки");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СчетКонтрагента");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Поставщик");
		БлокируемыеРеквизиты.Добавить("Покупатель");
		БлокируемыеРеквизиты.Добавить("СтранаНазначения");
		БлокируемыеРеквизиты.Добавить("ВидСчетаФактуры");
		БлокируемыеРеквизиты.Добавить("ДатаСовершенияОборотаПоРеализации");
		БлокируемыеРеквизиты.Добавить("ДатаОборотаВТабличнойЧасти");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыПодборТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаАкциза; ТоварыСуммаАкциза");
		БлокируемыеРеквизиты.Добавить("Товары.ОборотПоРеализации; ТоварыОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("Товары.ДатаОборота; ТоварыДатаОборота");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
		// таб. часть Услуги
		БлокируемыеРеквизиты.Добавить("Услуги; УслугиПодборУслуги, УслугиИзменитьУслуги,
			|УслугиСкопироватьСтроки, УслугиВставитьСтроки, УслугиКонтекстноеМенюСкопироватьСтроки, УслугиКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Услуги.Номенклатура; УслугиНоменклатура");
		БлокируемыеРеквизиты.Добавить("Услуги.Количество; УслугиКоличество");
		БлокируемыеРеквизиты.Добавить("Услуги.Цена; УслугиЦена");
		БлокируемыеРеквизиты.Добавить("Услуги.Сумма; УслугиСумма");
		БлокируемыеРеквизиты.Добавить("Услуги.СуммаНДС; УслугиСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.СтавкаНДС; УслугиСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Услуги.ОборотПоРеализации; УслугиОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("Услуги.ДатаОборота; УслугиДатаОборота");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСПодборОС, ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.СтавкаНДС; ОССтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.ОборотПоРеализации; ОСОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("ОС.ДатаОборота; ОСДатаОборота");
		
		// таб. часть НМА
		БлокируемыеРеквизиты.Добавить("НМА; НМАПодборНМА, НМАИзменитьНМА");
		БлокируемыеРеквизиты.Добавить("НМА.НематериальныйАктив; НМАНематериальныйАктив");
		БлокируемыеРеквизиты.Добавить("НМА.СтавкаНДС; НМАСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("НМА.Сумма; НМАСумма");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаНДС; НМАСуммаНДС");
		БлокируемыеРеквизиты.Добавить("НМА.ОборотПоРеализации; НМАОборотПоРеализации");
		БлокируемыеРеквизиты.Добавить("НМА.ДатаОборота; НМАДатаОборота");
		
		// таб. часть ДокументыОснования
		БлокируемыеРеквизиты.Добавить("ДокументыОснования");
		БлокируемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование; ДокументыОснованияДокументОснование");
		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

// Процедура выполняет заполниение табличной части по возврату ТМЗ.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Возврат товаров).
//
Процедура ЗаполнитьПоДокументуОснования(Объект, ДокументОснование, ЭтоВозвратОтчета = Ложь) Экспорт
	
	УчитыватьНДСОснования = Ложь;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Сторнирование") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, ДокументОснование");
		Если ЗначенияРеквизитов = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументОснование) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='В документе ""%1"" не заполнен сторнируемый документ. Нет данных для заполнения счета-фактуры'"),
									ДокументОснование);
		КонецЕсли;
		
		ДоступенВводНаОсновании = Ложь;
		Для Каждого ОбъектМетаданных Из Объект.Ссылка.Метаданные().ВводитсяНаОсновании Цикл 
			Если ТипЗнч(ЗначенияРеквизитов.ДокументОснование) = Тип("ДокументСсылка." + ОбъектМетаданных.Имя) Тогда
				ДоступенВводНаОсновании = Истина;
				УчитыватьНДСОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ДокументОснование, "УчитыватьНДС");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ДоступенВводНаОсновании Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Для сторнируемого документа ""%1"" не предусмотрен ввод счета-фактуры (выданного)'"),
									ЗначенияРеквизитов.ДокументОснование);
		КонецЕсли;
				
		ДатаОснования = ЗначенияРеквизитов.Дата;
		ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
	Иначе
		ДатаОснования = ДокументОснование.Дата;
		УчитыватьНДСОснования = ДокументОснование.УчитыватьНДС;
	КонецЕсли;
	
	Если ДатаОснования <> КонецДня(ДатаОснования) Тогда
		Объект.Дата = ДатаОснования + 1;
	Иначе
		Объект.Дата = ДатаОснования;
	КонецЕсли;
	
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	Иначе
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС") 
		И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	КонецЕсли;

	
	Объект.ДокументОснование = ДокументОснование;
	Объект.ПодтвержденДокументамиОтгрузки = Истина;
	
	НоваяСтрока = Объект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ДокументОснование;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	СНТ = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ДокументОснованиеСНТ", СНТ);
	Если СНТ <> Неопределено И ЗначениеЗаполнено(СНТ) Тогда
		СпособОтправленияПоКлассификатору = "";
		Если СНТ.МорскойТранспорт Тогда
			СпособОтправленияПоКлассификатору = "10";
		КонецЕсли;
		Если СНТ.ЖелезнодорожныйТранспорт Тогда
			СпособОтправленияПоКлассификатору = "20";
		КонецЕсли;
		Если СНТ.АвтомобильныйТранспорт Тогда
			СпособОтправленияПоКлассификатору = ?(СНТ.ГосномерПрицепа <> "", "31", "30");
		КонецЕсли;
		Если СНТ.ВоздушныйТранспорт Тогда
			СпособОтправленияПоКлассификатору = "40";
		КонецЕсли;
		Если СНТ.Трубопровод Тогда
			СпособОтправленияПоКлассификатору = "71";
		КонецЕсли;
		Если СНТ.ПрочийТранспорт Тогда
			СпособОтправленияПоКлассификатору = "99";
		КонецЕсли;
		Объект.СпособОтправленияПоКлассификатору = СпособОтправленияПоКлассификатору;
	КонецЕсли;
		
	ЗаполнитьРеквизитыДокумента(Объект, ДокументОснование);
	
	//заполним табличные части
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, ДокументОснование, ЭтоВозвратОтчета);
	СвернутьТабличныеЧасти(Объект);
	
	Объект.ДатаСовершенияОборотаПоРеализации = ДатаОснования;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаПодписанияГЗ", ДокументОснование.Метаданные())
		И  Объект.Услуги.Количество() > 0 Тогда
		ДатаПодписанияГЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаПодписанияГЗ");
		Если ЗначениеЗаполнено(ДатаПодписанияГЗ) Тогда
			Объект.ДатаСовершенияОборотаПоРеализации = ДатаПодписанияГЗ;
		КонецЕсли;
	КонецЕсли;
	   	
	УчетНДСИАкциза.ПроверитьСтавкиНДСВТабличныхЧастях(Объект, УчитыватьНДСОснования);
	
	Объект.ОсновнойСчетФактура = НайтиОсновнойСчетФактуру(Объект);
	
	// установим плательщика и покупателя
	Объект.Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Организация);
	Объект.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Объект.Контрагент);
	
	Если НЕ ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
		СтранаРезидентства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Покупатель, "СтранаРезидентства");
		Объект.СтранаНазначения = ?(ЗначениеЗаполнено(СтранаРезидентства), СтранаРезидентства, Справочники.КлассификаторСтранМира.Казахстан);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Объект.АдресДоставки = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Объект.Контрагент, Объект.Дата),"ЮридическийАдрес,");
	КонецЕсли;
	
	Объект.ПунктНазначения = Объект.АдресДоставки;
	
КонецПроцедуры

Процедура ЗаполнитьПунктНазначения(Объект) Экспорт

	УчастникТаможенногоСоюза = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтранаНазначения,"УчастникТаможенногоСоюза");
	
	Если ЗначениеЗаполнено(УчастникТаможенногоСоюза) 
		И РеализацияПоТоварамИзПеречня(Объект.Товары,Объект.Дата) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			Объект.ПунктНазначения = Объект.АдресДоставки;
		КонецЕсли;    			
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.СчетФактураВыданный - объект данных формы или объект документа счета-фактуры, табличные части которого необходимо свернуть
//
Процедура СвернутьТабличныеЧасти(Объект) Экспорт
	
	Если Объект.Товары.Количество() > 1 Тогда
		Объект.Товары.Свернуть("Номенклатура, КлючСвязи, Цена, СтавкаНДС, СтавкаАкциза, ЕдиницаИзмерения, Коэффициент, ДатаОборота", "Количество, Сумма, СуммаНДС, СуммаАкциза, ОборотПоРеализации");
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 1 Тогда
		Объект.Услуги.Свернуть("Номенклатура, Содержание, Цена, СтавкаНДС, ДатаОборота", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если Объект.ОС.Количество() > 1 Тогда
		Объект.ОС.Свернуть("ОсновноеСредство, СтавкаНДС, ДатаОборота", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если Объект.НМА.Количество() > 1 Тогда
		Объект.НМА.Свернуть("НематериальныйАктив, СтавкаНДС, ДатаОборота", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;   

КонецПроцедуры

// Для документа счет-фактура с установленным признаком УчитыватьНДС процедура проверяет
// заполнение реквизита СтавкаНДС в строках табличных частей и заполняет незаполненные.
// Параметры:
//    УчитыватьНДСОснования - Булево - признак УчитыватьНДС документа-основания.
// Приоритет определения значений ставки НДС, если УчитыватьНДСОснования=Истина:
//    1. Значение реквизита СтавкаНДС из справочника Номенклатура (для таб. частей Товары и Услуги)
//    2. ОсновнаяСтавкаНДС из настроек текущего пользователя
//    3. Ставка "Без НДС"
// Если УчитыватьНДСОснования=Ложь, тогда СтавкаНДС во всех строках заполняется значением "Без НДС"
//
Процедура ПроверитьСтавкиНДСВТабличныхЧастях(Объект, УчитыватьНДСОснования)
	
	СтавкаБезНДС = Справочники.СтавкиНДС.ПолучитьСтавкуБезНДС();
	
	Если НЕ УчитыватьНДСОснования Тогда
		СтавкаНДС = СтавкаБезНДС;
	Иначе
		НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		СтавкаНДС = НастройкиПользователя.ОсновнаяСтавкаНДС;
		
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = СтавкаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;
				СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "СтавкаНДС");;
				
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Товары Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Услуги.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;
				СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "СтавкаНДС");;
				
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Услуги Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ОС.Количество() > 0 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.ОС Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.НМА.Количество() > 1 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.НМА.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.НМА Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;   

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПустаяДата",	'0001-01-01');
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если НЕ Реквизиты.УчитыватьНДС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПлательщикНДС = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") ИЛИ ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
		ПлательщикНДС = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПлательщикНДС"								 , ПлательщикНДС);
	
	Запрос.УстановитьПараметр("Период"										 , Реквизиты.Период);
	Запрос.УстановитьПараметр("СинонимТовары"				  				 , НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимУслуги"				  				 , НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимОС"				  	  				 , НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимНМА"				  	  				 , НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимТаблицаУчастникиСовместнойДеятельности", НСтр("ru = 'УчастникиСовместнойДеятельности'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаСчетФактураВыданный(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначенияБКВызовСервера.СформироватьТаблицуУчастниковСовместнойДеятельности(ПараметрыПроведения.СчетФактураВыданныйТаблицаУчастникиСовместнойДеятельности);

	ТаблицаШапкиДокумента = ПараметрыПроведения.СчетФактураВыданныйРеквизиты;
	
	ТаблицаПоТоварам = ПараметрыПроведения.СчетФактураВыданныйТаблицаТовары;
	Если ТаблицаПоТоварам.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоУслугам = ПараметрыПроведения.СчетФактураВыданныйТаблицаУслуги;
	Если ТаблицаПоУслугам.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоОС = ПараметрыПроведения.СчетФактураВыданныйТаблицаОС;
	Если ТаблицаПоОС.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	ТаблицаПоНМА = ПараметрыПроведения.СчетФактураВыданныйТаблицаНМА;
	Если ТаблицаПоНМА.Количество() <> 0 Тогда 
		УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, ТаблицаШапкиДокумента, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = ТаблицаШапкиДокумента[0];

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоТоварам.Количество() <> 0 Тогда 
		ТаблицаПоТоварам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Истина);
	КонецЕсли;

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоУслугам.Количество() <> 0 Тогда 
		ТаблицаПоУслугам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь);
	КонецЕсли;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоОС.Количество() <> 0 Тогда 
		ТаблицаПоОС = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь);
	КонецЕсли;

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоНМА.Количество() <> 0 Тогда 
		ТаблицаПоНМА = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь);
	КонецЕсли;

	ПараметрыПроведения.СчетФактураВыданныйТаблицаТовары = ТаблицаПоТоварам; 
	ПараметрыПроведения.СчетФактураВыданныйТаблицаУслуги = ТаблицаПоУслугам;
	ПараметрыПроведения.СчетФактураВыданныйТаблицаОС     = ТаблицаПоОС;
	ПараметрыПроведения.СчетФактураВыданныйТаблицаНМА    = ТаблицаПоНМА;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты"				 , НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""СчетФактураВыданный"" КАК ВидДокумента,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДатаСовершенияОборотаПоРеализации = &ПустаяДата
	|				ИЛИ Реквизиты.ДатаОборотаВТабличнойЧасти
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаСовершенияОборотаПоРеализации
	|	КОНЕЦ КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Покупатель КАК Покупатель,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения КАК СтранаНазначения,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсДокумента,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьДокумента,
	|	Реквизиты.Дата,
	|	Реквизиты.ДатаОборотаВТабличнойЧасти,
	|	Реквизиты.СуммаВключаетАкциз,
	|	Реквизиты.УчитыватьАкциз
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ВидДокумента,
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Покупатель,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.ВалютаРегламентированногоУчета,
	|	Реквизиты.Дата,
	|	Реквизиты.ДатаОборотаВТабличнойЧасти
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары"						   , НомераТаблиц.Количество());
    НомераТаблиц.Вставить("ВременнаяТаблицаУслуги"						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОС"	  						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНМА"	  						   , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
 	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СтавкаАкциза,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС КАК НДС,
	|	ТаблицаТовары.СуммаАкциза КАК Акциз,
	|	ТаблицаТовары.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка КАК Ссылка,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС КАК НДС,
	|	ТаблицаУслуги.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	Документ.СчетФактураВыданный.Услуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	1 КАК Количество,
	|	ТаблицаОС.СтавкаНДС,
	|	ТаблицаОС.Сумма,
	|	ТаблицаОС.СуммаНДС КАК НДС,
	|	ТаблицаОС.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаОС.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.СчетФактураВыданный.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.Ссылка КАК Ссылка,
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив,
	|	1 КАК Количество,
	|	ТаблицаНМА.СтавкаНДС,
	|	ТаблицаНМА.Сумма,
	|	ТаблицаНМА.СуммаНДС КАК НДС,
	|	ТаблицаНМА.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаНМА.ДатаОборота
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	Документ.СчетФактураВыданный.НМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
	|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
	|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
	|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
	|ИЗ
	|	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
	|ГДЕ
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСчетФактураВыданный(НомераТаблиц)
	
	НомераТаблиц.Вставить("СчетФактураВыданныйРеквизиты"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураВыданныйТаблицаТовары"						 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураВыданныйТаблицаУслуги"						 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураВыданныйТаблицаОС"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураВыданныйТаблицаНМА"							 , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетФактураВыданныйТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*,
	|	&ПлательщикНДС КАК ПлательщикНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Покупатель КАК Покупатель,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СтавкаАкциза,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.НДС,
	|	ТаблицаТовары.Акциз,
	|	ТаблицаТовары.ОборотПоРеализации,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Покупатель КАК Покупатель,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.НДС,
	|	ТаблицаУслуги.ОборотПоРеализации,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслуги КАК ТаблицаУслуги
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ОС"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Покупатель КАК Покупатель,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК Номенклатура,
	|	ТаблицаОС.Количество,
	|	ТаблицаОС.СтавкаНДС,
	|	ТаблицаОС.Сумма,
	|	ТаблицаОС.НДС,
	|	ТаблицаОС.ОборотПоРеализации,
	|	ТаблицаОС.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НМА"" КАК ИмяСписка,
	|	&СинонимНМА КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СтранаНазначения,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	|	Реквизиты.Покупатель КАК Покупатель,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК Номенклатура,
	|	ТаблицаНМА.Количество,
	|	ТаблицаНМА.СтавкаНДС,
	|	ТаблицаНМА.Сумма,
	|	ТаблицаНМА.НДС,
	|	ТаблицаНМА.ОборотПоРеализации,
	|	ТаблицаНМА.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНМА КАК ТаблицаНМА
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаУчастникиСовместнойДеятельности"" КАК ИмяСписка,
	|	&СинонимТаблицаУчастникиСовместнойДеятельности КАК СинонимСписка,
	|	ТаблицаУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
	|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
	|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
	|ИЗ
	|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

// Добавляет движения, которые сторнируют исправляемый счет-фактуру и его дополнительные счета-фактуры.
//
Процедура ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(Объект, МассивСФПрекратившихДействие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ОсновнойСчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СторнируемыеСчетаФактуры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ОсновнойСчетФактура = &ОсновнойСчетФактура
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияСчетовФактурВыданных.Период,
	|	СведенияСчетовФактурВыданных.Регистратор,
	|	СведенияСчетовФактурВыданных.Налогоплательщик,
	|	СведенияСчетовФактурВыданных.Организация,
	|	СведенияСчетовФактурВыданных.СтруктурнаяЕдиница,
	|	СведенияСчетовФактурВыданных.СчетФактура,
	|	СведенияСчетовФактурВыданных.СтавкаНДС,
	|	СведенияСчетовФактурВыданных.Контрагент,
	|	СведенияСчетовФактурВыданных.ТМЗ,
	|	СведенияСчетовФактурВыданных.Покупатель,
	|	СведенияСчетовФактурВыданных.СтавкаАкциза,
	|	-СведенияСчетовФактурВыданных.СуммаВВалютеДоговора КАК СуммаВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаРегл КАК СуммаРегл,
	|	-СведенияСчетовФактурВыданных.СуммаНДСВВалютеДоговора КАК СуммаНДСВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаНДСРегл КАК СуммаНДСРегл,
	|	-СведенияСчетовФактурВыданных.ОборотПоРеализацииВВалютеДоговора КАК ОборотПоРеализацииВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.ОборотПоРеализацииРегл КАК ОборотПоРеализацииРегл,
	|	-СведенияСчетовФактурВыданных.СуммаАкцизаВВалютеДоговора КАК СуммаАкцизаВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаАкцизаРегл КАК СуммаАкцизаРегл,
	|	СведенияСчетовФактурВыданных.СтранаНазначения,
	|	СведенияСчетовФактурВыданных.УчастникСовместнойДеятельности
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурВыданных КАК СведенияСчетовФактурВыданных
	|ГДЕ
	|	СведенияСчетовФактурВыданных.Регистратор В
	|			(ВЫБРАТЬ
	|				СторнируемыеСчетаФактуры.СчетФактура
	|			ИЗ
	|				СторнируемыеСчетаФактуры КАК СторнируемыеСчетаФактуры)
	|	И СведенияСчетовФактурВыданных.Активность = ИСТИНА";	
	
	Запрос.УстановитьПараметр("ОсновнойСчетФактура", Объект.ОсновнойСчетФактура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Если исправляемый счет-фактура является исправленным, то сторнируются только движения, которые он сделал.
		// Движения, которые он сторнировал, не сторнируются, т.к. это приведет к двойному сторнированию.		
		Если Выборка.Регистратор = Объект.ОсновнойСчетФактура
			И Выборка.СчетФактура <> Объект.ОсновнойСчетФактура Тогда			
			Продолжить;	// Это движение, которое сторнировал исправляемый счет-фактура, его сторнировать не требуется.		
		КонецЕсли;
		
		СтрокаДвижения = Объект.Движения.СведенияСчетовФактурВыданных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, Выборка);
		
		Если МассивСФПрекратившихДействие.Найти(Выборка.Регистратор) = Неопределено Тогда
			МассивСФПрекратившихДействие.Добавить(Выборка.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сторнирующие движения записываются тем же периодом, что и сторнируемые движения. Этот период может быть закрыт.
	Объект.Движения.СведенияСчетовФактурВыданных.ДополнительныеСвойства.Вставить(ЭСФКлиентСервер.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);	
	Объект.Движения.СведенияСчетовФактурВыданных.Записывать = Истина;
	
КонецПроцедуры

// Добавляет движения, которые отмечают исправляемый счет-фактуру как прекративший действие
//
Процедура ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(Объект, МассивСФПрекратившихДействие) Экспорт
	
	МассивСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(Объект.Ссылка);
	Для Каждого Сторно Из МассивСторнирований Цикл
		Если НЕ Сторно.Ссылка.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Движения.СчетаФактурыПрекратившиеДействие.Записывать = Истина;
	
	Для Каждого СчетФактура Из МассивСФПрекратившихДействие Цикл
		СтрокаДвижения = Объект.Движения.СчетаФактурыПрекратившиеДействие.Добавить();
		СтрокаДвижения.Период = Объект.Дата;
		СтрокаДвижения.СчетФактура = СчетФактура;
		СтрокаДвижения.Состояние = Перечисления.СостоянияДокументов.Аннулирован;
	КонецЦикла;
	
КонецПроцедуры

// Процедура запрещает проведение документа,
// если связанный с ним исправляемый СФ не проведен
Процедура ПроверитьВозможностьПроведения(Объект, Отказ) Экспорт
		
	// Исправленный ЭСФ можно провести только если проведен документ, взамен которого он выписан
	// в противном случае сторно-записи не будут сформированы
	Если Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		
		Если НЕ Объект.ОсновнойСчетФактура.Проведен Тогда			
			
			ТекстСообщения = НСтр(
			"ru = 'Невозможно провести исправленный документ: ""%1"",
			|так как исправляемый документ не проведен: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка, Объект.ОсновнойСчетФактура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура запрещает отмену проведения документа,
// если для него выписаны и проведены исправленные документы
Процедура ПроверитьВозможностьОтменыПроведения(Объект, Отказ) Экспорт
		
	// Если текущий документ не актуален (исправлен другим), а так же сам влияет на актуальность др. документов
	// то отменять его проведение без корректировки связанных документов нельзя.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыПрекратившиеДействие.Регистратор
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(, СчетФактура = &Ссылка) КАК СчетаФактурыПрекратившиеДействие";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
				
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			ТекстСообщения = НСтр(
			"ru = 'Невозможно отменить проведение документа: ""%1"",
			|так как для документа проведен связанный документ: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Ссылка, Выборка.Регистратор);			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
			
		КонецЦикла;
					 
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Счет-фактура (в валюте регл. учета)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВВалютеРеглУчета";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (в валюте регл. учета)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Счет-фактура (с номерами ГТД)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураСНомерамиГТД";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (с источниками происхождения)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	ИдентификаторЭСФ = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
		
		// Электронный счет-фактура
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭСФ";
		КомандаПечати.Представление = НСтр("ru = 'Электронный счет-фактура'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
		КомандаПечати.Порядок = 52;

		ИдентификаторЭСФ = ",ЭСФ";
	КонецЕсли;

	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура,СчетФактураВВалютеРеглУчета,СчетФактураСНомерамиГТД" + ИдентификаторЭСФ;
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура,СчетФактураВВалютеРеглУчета,СчетФактураСНомерамиГТД" + ИдентификаторЭСФ;
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура,СчетФактураВВалютеРеглУчета,СчетФактураСНомерамиГТД" + ИдентификаторЭСФ;
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактура",
			НСтр("ru = 'Счет-фактура'"),
			ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати,, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура"); 
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактура"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалютеРеглУчета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВВалютеРеглУчета",
			НСтр("ru = 'Счет-фактура (в валюте регл. учета)'"),
			ПечатьСчетФактураВВалютеРеглУчета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");  
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураВВалютеРеглУчета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
		
	// Печать счета-фактуры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураСНомерамиГТД") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураСНомерамиГТД",
			НСтр("ru = 'Счет-фактура (с источниками происхождения)'"),
			ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, Истина, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура");   
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СчетФактураСНомерамиГТД"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Печать ЭСФ
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСФ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭСФ",
			НСтр("ru = 'Электронный счет-фактура'"),
			ПечатьЭСФ(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЭСФ.ПФ_MXL_ЭСФ");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, ПоказыватьНомераГТД = Ложь, КодЯзыка = Неопределено) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетФактураВыданный_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура", КодЯзыка);
		
	Если ПоказыватьНомераГТД Тогда
		ДанныеДляПечати = ПолучитьДанныеДляПечатиСчетФактурыСНомерамиГТД(МассивОбъектов, , КодЯзыка);
	Иначе
		ДанныеДляПечати = ПолучитьДанныеДляПечатиСчетФактурыБезНомеровГТД(МассивОбъектов, , КодЯзыка);
	КонецЕсли;	
	
	Для Каждого ТекДанныеДляПечати Из ДанныеДляПечати Цикл
		
		ПрефиксГТД = ?(ПоказыватьНомераГТД, "ГТД", "ТНВЭД");
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СтруктураДанныхПечати = ТекДанныеДляПечати;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		МассивОбластейМакета = Новый Массив;
		
		Если СтруктураДанныхПечати.Свойство("ДатаОборотаПоРеализации") Тогда
			Макет.УдалитьОбласть(Макет.Область("ШапкаТаблицы" + ПрефиксГТД +"|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Макет.УдалитьОбласть(Макет.Область("Строка" + ПрефиксГТД +"|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Макет.УдалитьОбласть(Макет.Область("Итого"  + ПрефиксГТД +"|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
				
		МассивОбластейМакета.Добавить("Шапка");
		МассивОбластейМакета.Добавить("ШапкаПокупателя");
		МассивОбластейМакета.Добавить("ШапкаТаблицы" + ПрефиксГТД);
		МассивОбластейМакета.Добавить("Строка" + ПрефиксГТД);
		МассивОбластейМакета.Добавить("Итого" + ПрефиксГТД);
		Если СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыУчастникиСовместнойДеятельности");
			МассивОбластейМакета.Добавить("СтрокаУчастникиСовместнойДеятельности");
			МассивОбластейМакета.Добавить("ИтогоУчастникиСовместнойДеятельности");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Подвал");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "Шапка" И НЕ СтруктураДанныхПечати.Свойство("ДатаОборотаПоРеализации") Тогда
				ОбластьМакета.Область("ДатаОборотаПоРеализации").Видимость = Ложь;
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				ОбластьМакета.Область("R1C2").ШиринаКолонки = ОбластьМакета.Область("R1C2").ШиринаКолонки + 9;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "ШапкаПокупателя" Тогда 
				Если НЕ СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				Иначе 
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицаПокупателей Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйСчетПокупателя) Тогда 
							ОбластьМакета.Область("РасчетныйСчетПокупателя").Видимость = Ложь;
						КонецЕсли;
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ИмяОбласти = "ШапкаТаблицыУчастникиСовместнойДеятельности" ИЛИ ИмяОбласти = "ИтогоУчастникиСовместнойДеятельности" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				Если СтруктураДанныхПечати.УчастникСРП Тогда
					ОбластьМакета.Параметры.ЗаголовокСД = НСтр("ru ='СРП'", КодЯзыка);
				ИначеЕсли СтруктураДанныхПечати.УчастникСовместнойДеятельности Тогда
					ОбластьМакета.Параметры.ЗаголовокСД = НСтр("ru ='совместной деятельности'", КодЯзыка);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

			ИначеЕсли ИмяОбласти <> "Строка" + ПрефиксГТД И ИмяОбласти <> "СтрокаУчастникиСовместнойДеятельности" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				
				Если ИмяОбласти = "Подвал" Тогда
					ОбластьМакетаПодвалПодтверждение = ОбластьМакета.Область("ПодвалПодтверждениеПолучения");
					Если СтруктураДанныхПечати.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный Тогда
						ОбластьМакетаПодвалПодтверждение.Видимость = Ложь;
					КонецЕсли;
				КонецЕСли;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти = "Строка" + ПрефиксГТД Тогда
				Если СтруктураДанныхПечати.ТаблицыДокумента <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицыДокумента Цикл
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ИмяОбласти = "СтрокаУчастникиСовместнойДеятельности" Тогда
				Если СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицаСовмДеятельности Цикл
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТабличныйДокумент.Области.ПервичныйСчетФактура.Текст = "" Тогда
			ТабличныйДокумент.Области.ПервичныйСчетФактура.Видимость = Ложь;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтруктураДанныхПечати.Ссылка);

	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ПечатьСчетФактураВВалютеРеглУчета(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетФактураВыданный_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураВыданный.ПФ_MXL_СчетФактура", КодЯзыка);
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиСчетФактурыБезНомеровГТД(МассивОбъектов, Истина, КодЯзыка);
	Для Каждого ТекДанныеДляПечати Из ДанныеДляПечати Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СтруктураДанныхПечати = ТекДанныеДляПечати;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		МассивОбластейМакета = Новый Массив;
		
		Если СтруктураДанныхПечати.Свойство("ДатаОборотаПоРеализации") Тогда
			Макет.УдалитьОбласть(Макет.Область("ШапкаТаблицыТНВЭД|ДатаОборотаТНВЭД"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Макет.УдалитьОбласть(Макет.Область("СтрокаТНВЭД|ДатаОборотаТНВЭД"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Макет.УдалитьОбласть(Макет.Область("ИтогоТНВЭД|ДатаОборотаТНВЭД"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
				
		МассивОбластейМакета.Добавить("Шапка");
		МассивОбластейМакета.Добавить("ШапкаПокупателя");
		МассивОбластейМакета.Добавить("ШапкаТаблицыТНВЭД");
		МассивОбластейМакета.Добавить("СтрокаТНВЭД");
		МассивОбластейМакета.Добавить("ИтогоТНВЭД");
		Если СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыУчастникиСовместнойДеятельности");
			МассивОбластейМакета.Добавить("СтрокаУчастникиСовместнойДеятельности");
			МассивОбластейМакета.Добавить("ИтогоУчастникиСовместнойДеятельности");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Подвал");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "Шапка" И НЕ СтруктураДанныхПечати.Свойство("ДатаОборотаПоРеализации") Тогда
				ОбластьМакета.Область("ДатаОборотаПоРеализации").Видимость = Ложь;
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				ОбластьМакета.Область("R1C2").ШиринаКолонки = ОбластьМакета.Область("R1C2").ШиринаКолонки + 9;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "ШапкаПокупателя" Тогда 
				Если НЕ СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				Иначе 
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицаПокупателей Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйСчетПокупателя) Тогда 
							ОбластьМакета.Область("РасчетныйСчетПокупателя").Видимость = Ложь;
						КонецЕсли;
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ИмяОбласти = "ШапкаТаблицыУчастникиСовместнойДеятельности" ИЛИ ИмяОбласти = "ИтогоУчастникиСовместнойДеятельности" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				Если СтруктураДанныхПечати.УчастникСРП Тогда
					ОбластьМакета.Параметры.ЗаголовокСД = НСтр("ru ='СРП'", КодЯзыка);
				ИначеЕсли СтруктураДанныхПечати.УчастникСовместнойДеятельности Тогда
					ОбластьМакета.Параметры.ЗаголовокСД = НСтр("ru ='совместной деятельности'", КодЯзыка);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти <> "СтрокаТНВЭД" И ИмяОбласти <> "СтрокаУчастникиСовместнойДеятельности" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураДанныхПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "СтрокаТНВЭД" Тогда
				Если СтруктураДанныхПечати.ТаблицыДокумента <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицыДокумента Цикл
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ИмяОбласти = "СтрокаУчастникиСовместнойДеятельности" Тогда
				Если СтруктураДанныхПечати.ДоговорСовместнойДеятельности Тогда 
					Для Каждого СтрокаТаблицы Из СтруктураДанныхПечати.ТаблицаСовмДеятельности Цикл
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТабличныйДокумент.Области.ПервичныйСчетФактура.Текст = "" Тогда
			ТабличныйДокумент.Области.ПервичныйСчетФактура.Видимость = Ложь;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтруктураДанныхПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ПолучитьДанныеДляПечатиСчетФактурыБезНомеровГТД(МассивОбъектов, ВВалютеРеглУчета = Ложь, КодЯзыка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СчетФактураВыданный.Дата КАК Дата,
	               |	СчетФактураВыданный.ДатаСовершенияОборотаПоРеализации КАК ДатаОборотаПоРеализации,
	               |	СчетФактураВыданный.Номер КАК Номер,
	               |	СчетФактураВыданный.Организация КАК Организация,
	               |	СчетФактураВыданный.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	СчетФактураВыданный.Поставщик КАК Поставщик,
	               |	СчетФактураВыданный.Контрагент КАК Контрагент,
	               |	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	СчетФактураВыданный.Покупатель КАК Покупатель,
	               |	СчетФактураВыданный.СчетОрганизации КАК СчетОрганизации,
	               |	СчетФактураВыданный.СчетКонтрагента КАК СчетКонтрагента,
	               |	СчетФактураВыданный.Грузоотправитель КАК Грузоотправитель,
	               |	СчетФактураВыданный.Грузополучатель КАК Грузополучатель,
	               |	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	               |	СчетФактураВыданный.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	               |	СчетФактураВыданный.ОсновнойСчетФактура.Номер КАК ОсновнойСчетФактураНомер,
	               |	СчетФактураВыданный.ОсновнойСчетФактура.Дата КАК ОсновнойСчетФактураДата,
	               |	СчетФактураВыданный.СтранаНазначения КАК СтранаНазначения,
	               |	СчетФактураВыданный.СтранаНазначения.УчастникТаможенногоСоюза КАК УчастникТаможенногоСоюза,
	               |	СчетФактураВыданный.ДатаОборотаВТабличнойЧасти = ЛОЖЬ КАК ВыводитьДатуОборотаПоРеализации,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Организация = СчетФактураВыданный.Поставщик
	               |			ТОГДА ВЫБОР
	               |					КОГДА НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |						ТОГДА СчетФактураВыданный.СтруктурноеПодразделение
	               |					ИНАЧЕ СчетФактураВыданный.Организация
	               |				КОНЕЦ
	               |		ИНАЧЕ СчетФактураВыданный.Поставщик
	               |	КОНЕЦ КАК ПоставщикДляПечати,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Поставщик = СчетФактураВыданный.Организация
	               |			ТОГДА ВЫБОР
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |							И СчетФактураВыданный.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре
	               |						ТОГДА СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |							И НЕ СчетФактураВыданный.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре
	               |						ТОГДА СчетФактураВыданный.Организация
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И СчетФактураВыданный.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							И СчетФактураВыданный.Организация <> СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |						ТОГДА СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				КОНЕЦ
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |	КОНЕЦ КАК ПоставщикГолова,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Покупатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА СчетФактураВыданный.Покупатель
	               |		ИНАЧЕ СчетФактураВыданный.Контрагент
	               |	КОНЕЦ КАК ПокупательДляПечати,
	               |	СчетФактураВыданный.Ответственный.ФизЛицо КАК Исполнитель,
	               |	СчетФактураВыданный.Ссылка КАК Ссылка,
	               |	СчетФактураВыданный.МоментВремени КАК МоментВремени,
	               |	СчетФактураВыданный.УчитыватьАкциз КАК УчитыватьАкциз,
	               |	СчетФактураВыданный.УчитыватьНДС КАК УчитыватьНДС,
	               |	СчетФактураВыданный.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	               |	СчетФактураВыданный.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	               |	ВЫБОР
	               |		КОГДА НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |			ТОГДА СчетФактураВыданный.СтруктурноеПодразделение
	               |		ИНАЧЕ СчетФактураВыданный.Организация
	               |	КОНЕЦ КАК СтруктурнаяЕдиницаОрганизация,
	               |	СчетФактураВыданный.УсловияОплаты КАК УсловияОплаты,
	               |	СчетФактураВыданный.СпособОтправления КАК СпособОтправления,
	               |	СчетФактураВыданный.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(СчетФактураВыданный.АдресДоставки КАК СТРОКА(1000))) <> """"
	               |			ТОГДА СчетФактураВыданный.АдресДоставки
	               |		ИНАЧЕ СчетФактураВыданный.ПунктНазначения
	               |	КОНЕЦ КАК ПунктНазначения,
	               |	СчетФактураВыданный.УдалитьДоверенность КАК УдалитьДоверенность,
	               |	СчетФактураВыданный.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	СчетФактураВыданный.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	СчетФактураВыданный.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	СчетФактураВыданный.ДоверенностьДата КАК ДоверенностьДата,
	               |	СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	СчетФактураВыданный.ДатаОборотаВТабличнойЧасти КАК ДатаОборотаВТабличнойЧасти
	               |ПОМЕСТИТЬ ВТ_ДанныеДокументов
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |	СчетФактураВыданныйДокументыОснования.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Основания
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	ВТ_ДанныеДокументов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ПериодыКурсовВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	               |		ПО КурсыВалют.Валюта = ВТ_ДанныеДокументов.ВалютаДокумента
	               |			И КурсыВалют.Период <= ВТ_ДанныеДокументов.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ВТ_ДанныеДокументов.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Курс КАК Курс,
	               |	КурсыВалют.Кратность КАК Кратность,
	               |	ВТ_ПериодыКурсовВалют.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыКурсовВалют КАК ВТ_ПериодыКурсовВалют
	               |		ПО КурсыВалют.Валюта = ВТ_ПериодыКурсовВалют.Валюта
	               |			И КурсыВалют.Период = ВТ_ПериодыКурсовВалют.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеДокументов.Дата КАК Дата,
	               |	ВТ_ДанныеДокументов.Номер КАК Номер,
	               |	ВТ_ДанныеДокументов.Организация КАК Организация,
	               |	ВТ_ДанныеДокументов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДанныеДокументов.Поставщик КАК Поставщик,
	               |	ВТ_ДанныеДокументов.Контрагент КАК Контрагент,
	               |	ВТ_ДанныеДокументов.ДоговорКонтрагента КАК ДоговорПокупателя,
	               |	ВТ_ДанныеДокументов.Покупатель КАК Покупатель,
	               |	ВТ_ДанныеДокументов.СчетОрганизации КАК СчетОрганизации,
	               |	ВТ_ДанныеДокументов.СчетКонтрагента КАК СчетКонтрагента,
	               |	ВТ_ДанныеДокументов.Грузоотправитель КАК Грузоотправитель,
	               |	ВТ_ДанныеДокументов.Грузополучатель КАК Грузополучатель,
	               |	ВТ_ДанныеДокументов.ВидСчетаФактуры КАК ВидСчетаФактуры,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактураНомер КАК ОсновнойСчетФактураНомер,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактураДата КАК ОсновнойСчетФактураДата,
	               |	ВТ_ДанныеДокументов.СтранаНазначения КАК СтранаНазначения,
	               |	ВТ_ДанныеДокументов.УчастникТаможенногоСоюза КАК УчастникТаможенногоСоюза,
	               |	ВТ_ДанныеДокументов.ВыводитьДатуОборотаПоРеализации КАК ВыводитьДатуОборотаПоРеализации,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати КАК ПоставщикДляПечати,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати КАК ПокупательДляПечати,
	               |	ВТ_ДанныеДокументов.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет
	               |	КОНЕЦ КАК СчетОрганизацииДляПечати,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.НомерСчета
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.НомерСчета
	               |	КОНЕЦ КАК СчетОрганизацииНомерСчета,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.Банк
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.Банк
	               |	КОНЕЦ КАК СчетОрганизацииБанк,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.Банк.БИК
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.Банк.БИК
	               |	КОНЕЦ КАК СчетОрганизацииБИК,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет
	               |	КОНЕЦ КАК СчетКонтрагентаДляПечати,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.НомерСчета
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.НомерСчета
	               |	КОНЕЦ КАК СчетКонтрагентаНомерСчета,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.Банк
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.Банк
	               |	КОНЕЦ КАК СчетКонтрагентаБанк,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.Банк.БИК
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.Банк.БИК
	               |	КОНЕЦ КАК СчетКонтрагентаБИК,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.ПоставщикДляПечати.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.ПоставщикДляПечати.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПоставщика,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.ПокупательДляПечати.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.ПокупательДляПечати.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПокупателя,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ДатаСвидетельстваПоНДС
	               |	КОНЕЦ КАК ДатаСвидетельстваПоНДС,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.НомерСвидетельстваПоНДС
	               |	КОНЕЦ КАК НомерСвидетельстваПоНДС,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.СерияСвидетельстваПоНДС
	               |	КОНЕЦ КАК СерияСвидетельстваПоНДС,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати.ИдентификационныйНомер КАК ПоставщикБИН_ИИН,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати.РНН КАК ПоставщикРНН,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати.ИдентификационныйКодЛичности КАК ПокупательБИН_ИИН,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати.РНН КАК ПокупательРНН,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.Грузоотправитель.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.Грузоотправитель.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузоотправитель.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.Грузополучатель.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.Грузополучатель.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузополучатель.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеГрузополучателя,
	               |	ВТ_ДанныеДокументов.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеДокументов.МоментВремени КАК МоментВремени,
	               |	ВТ_ДанныеДокументов.УчитыватьАкциз КАК УчитыватьАкциз,
	               |	ВТ_ДанныеДокументов.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВТ_ДанныеДокументов.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	               |	ВТ_ДанныеДокументов.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ВТ_ДанныеДокументов.ДатаОборотаПоРеализации КАК ДатаОборотаПоРеализации,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.Грузоотправитель) = ТИП(Справочник.Контрагенты)
	               |			ТОГДА ВТ_ДанныеДокументов.Грузоотправитель.ИдентификационныйКодЛичности
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузоотправитель.ИдентификационныйНомер
	               |	КОНЕЦ КАК ГрузоотправительБИН_ИИН,
	               |	ВТ_ДанныеДокументов.Грузоотправитель.РНН КАК ГрузоотправительРНН,
	               |	ВТ_ДанныеДокументов.Грузополучатель.ИдентификационныйКодЛичности КАК ГрузополучательБИН_ИИН,
	               |	ВТ_ДанныеДокументов.Грузополучатель.РНН КАК ГрузополучательРНН,
	               |	ВТ_ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
	               |	ВТ_Основания.ДокументОснование КАК ДокументОснование,
	               |	ВТ_ДанныеДокументов.СтруктурнаяЕдиницаОрганизация КАК СтруктурнаяЕдиницаОрганизация,
	               |	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_ДанныеДокументов.КурсВзаиморасчетов, 0) = 0
	               |			ТОГДА ВТ_КурсыВалют.Курс
	               |		ИНАЧЕ ВТ_ДанныеДокументов.КурсВзаиморасчетов
	               |	КОНЕЦ КАК КурсДокумента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_ДанныеДокументов.КратностьВзаиморасчетов, 0) = 0
	               |			ТОГДА ВТ_КурсыВалют.Кратность
	               |		ИНАЧЕ ВТ_ДанныеДокументов.КратностьВзаиморасчетов
	               |	КОНЕЦ КАК КратностьДокумента,
	               |	""СчетФактураВыданный"" КАК ВидДокумента,
	               |	ВТ_ДанныеДокументов.УсловияОплаты КАК УсловияОплаты,
	               |	ВТ_ДанныеДокументов.СпособОтправления КАК СпособОтправления,
	               |	ВТ_ДанныеДокументов.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	               |	ВТ_ДанныеДокументов.ПунктНазначения КАК ПунктНазначения,
	               |	ВТ_ДанныеДокументов.УдалитьДоверенность КАК УдалитьДоверенность,
	               |	ВТ_ДанныеДокументов.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	ВТ_ДанныеДокументов.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	ВТ_ДанныеДокументов.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	ВТ_ДанныеДокументов.ДоверенностьДата КАК ДоверенностьДата,
	               |	ВТ_ДанныеДокументов.ПоставщикГолова КАК ПоставщикГолова,
	               |	ВТ_ДанныеДокументов.ДатаОборотаВТабличнойЧасти КАК ДатаОборотаВТабличнойЧасти
	               |ИЗ
	               |	ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Основания КАК ВТ_Основания
	               |		ПО ВТ_ДанныеДокументов.Ссылка = ВТ_Основания.Ссылка
	               |			И (ВТ_Основания.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
	               |		ПО ВТ_ДанныеДокументов.ВалютаДокумента = ВТ_КурсыВалют.Валюта
	               |			И ВТ_ДанныеДокументов.Ссылка = ВТ_КурсыВалют.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ID КАК ID,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	               |	ВложенныйЗапрос.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Количество КАК Количество,
	               |	ВложенныйЗапрос.СтавкаАкциза КАК СтавкаАкциза,
	               |	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	               |	ВложенныйЗапрос.Цена КАК Цена,
	               |	ВложенныйЗапрос.Акциз КАК Акциз,
	               |	ВложенныйЗапрос.НДС КАК НДС,
	               |	ВложенныйЗапрос.Сумма КАК Сумма,
	               |	ВложенныйЗапрос.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА НЕ ВложенныйЗапрос.Содержание = """"
	               |			ТОГДА ВложенныйЗапрос.Содержание
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НЕ ПОДСТРОКА(ВложенныйЗапрос.Номенклатура.НаименованиеПолное, 1, 990) = """"
	               |					ТОГДА ВложенныйЗапрос.Номенклатура.НаименованиеПолное
	               |				ИНАЧЕ ВложенныйЗапрос.Номенклатура.Наименование
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТоварНаименование,
	               |	ВложенныйЗапрос.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
	               |	ВложенныйЗапрос.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
	               |	ВложенныйЗапрос.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ВложенныйЗапрос.КодТНВЭД КАК КодТНВЭД,
	               |	ВложенныйЗапрос.НомерСтрокиТаблицыГТД КАК НомерСтрокиТаблицыГТД,
	               |	ВложенныйЗапрос.БазисРаспределения КАК БазисРаспределения,
	               |	ВложенныйЗапрос.КлючСвязи КАК КлючСвязи,
	               |	ВложенныйЗапрос.ДатаОборота КАК ДатаОборота,
	               |	ЕСТЬNULL(ВложенныйЗапрос.ОборотПоРеализации, 0) КАК ОборотПоРеализации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК ID,
	               |		СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
	               |		СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
	               |		СчетФактураВыданныйТовары.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	               |		СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		СчетФактураВыданныйТовары.Количество КАК Количество,
	               |		СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
	               |		СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
	               |		СчетФактураВыданныйТовары.Цена КАК Цена,
	               |		СчетФактураВыданныйТовары.СуммаАкциза КАК Акциз,
	               |		СчетФактураВыданныйТовары.СуммаНДС КАК НДС,
	               |		СчетФактураВыданныйТовары.Сумма КАК Сумма,
	               |		СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
	               |		"""" КАК Содержание,
				   |		ВЫБОР 
				   |			КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерГТД, &НомерГТДПустаяСсылка) <> &НомерГТДПустаяСсылка  
				   |				ТОГДА СчетФактураВыданныйНомераГТД.НомерГТД.КодТНВЭД
				   |			ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.КодТНВЭД
				   |		КОНЕЦ КАК КодТНВЭД,
	               |		ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерСтроки, 0) КАК НомерСтрокиТаблицыГТД,
	               |		ВЫБОР  
				   |           КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 0) = 0
				   |               ТОГДА 1
				   |           ИНАЧЕ ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 1)
				   |        КОНЕЦ КАК БазисРаспределения,
	               |		СчетФактураВыданныйТовары.КлючСвязи КАК КлючСвязи,
	               |		СчетФактураВыданныйТовары.ДатаОборота КАК ДатаОборота,
	               |		СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.НомераГТД КАК СчетФактураВыданныйНомераГТД
	               |			ПО СчетФактураВыданныйТовары.КлючСвязи = СчетФактураВыданныйНомераГТД.КлючСвязи
	               |				И (СчетФактураВыданныйНомераГТД.Ссылка = СчетФактураВыданныйТовары.Ссылка)
	               |	ГДЕ
	               |		СчетФактураВыданныйТовары.Ссылка В(&МассивОбъектов)
	               |	
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		2,
	               |		МИНИМУМ(СчетФактураВыданныйУслуги.НомерСтроки),
	               |		СчетФактураВыданныйУслуги.Номенклатура,
	               |		СУММА(0),
	               |		СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	               |		СУММА(СчетФактураВыданныйУслуги.Количество),
	               |		"""",
	               |		СчетФактураВыданныйУслуги.СтавкаНДС,
	               |		СчетФактураВыданныйУслуги.Цена,
	               |		СУММА(0),
	               |		СУММА(СчетФактураВыданныйУслуги.СуммаНДС),
	               |		СУММА(СчетФактураВыданныйУслуги.Сумма),
	               |		СчетФактураВыданныйУслуги.Ссылка,
	               |		СчетФактураВыданныйУслуги.Содержание,
	               |		"""",
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйУслуги.ДатаОборота,
	               |		СчетФактураВыданныйУслуги.ОборотПоРеализации
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	               |	ГДЕ
	               |		СчетФактураВыданныйУслуги.Ссылка В(&МассивОбъектов)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	               |		СчетФактураВыданныйУслуги.СтавкаНДС,
	               |		СчетФактураВыданныйУслуги.Цена,
	               |		СчетФактураВыданныйУслуги.Ссылка,
	               |		СчетФактураВыданныйУслуги.Номенклатура,
	               |		СчетФактураВыданныйУслуги.Содержание,
	               |		СчетФактураВыданныйУслуги.ДатаОборота,
	               |		СчетФактураВыданныйУслуги.ОборотПоРеализации
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		3,
	               |		МИНИМУМ(СчетФактураВыданныйОС.НомерСтроки),
	               |		СчетФактураВыданныйОС.ОсновноеСредство,
	               |		СУММА(0),
	               |		""шт"",
	               |		1,
	               |		"""",
	               |		СчетФактураВыданныйОС.СтавкаНДС,
	               |		СчетФактураВыданныйОС.Сумма,
	               |		СУММА(0),
	               |		СУММА(СчетФактураВыданныйОС.СуммаНДС),
	               |		СУММА(СчетФактураВыданныйОС.Сумма),
	               |		СчетФактураВыданныйОС.Ссылка,
	               |		"""",
	               |		СчетФактураВыданныйОС.ОсновноеСредство.КодТНВЭД,
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйОС.ДатаОборота,
	               |		СчетФактураВыданныйОС.ОборотПоРеализации
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	               |	ГДЕ
	               |		СчетФактураВыданныйОС.Ссылка В(&МассивОбъектов)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СчетФактураВыданныйОС.ОсновноеСредство,
	               |		СчетФактураВыданныйОС.СтавкаНДС,
	               |		СчетФактураВыданныйОС.Сумма,
	               |		СчетФактураВыданныйОС.Ссылка,
	               |		СчетФактураВыданныйОС.ОсновноеСредство.КодТНВЭД,
	               |		СчетФактураВыданныйОС.ДатаОборота,
	               |		СчетФактураВыданныйОС.ОборотПоРеализации
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		4,
	               |		1,
	               |		СчетФактураВыданныйНМА.НематериальныйАктив,
	               |		СУММА(0),
	               |		""шт"",
	               |		1,
	               |		"""",
	               |		СчетФактураВыданныйНМА.СтавкаНДС,
	               |		СчетФактураВыданныйНМА.Сумма,
	               |		СУММА(0),
	               |		СУММА(СчетФактураВыданныйНМА.СуммаНДС),
	               |		СУММА(СчетФактураВыданныйНМА.Сумма),
	               |		СчетФактураВыданныйНМА.Ссылка,
	               |		"""",
	               |		СчетФактураВыданныйНМА.НематериальныйАктив.КодТНВЭД,
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйНМА.ДатаОборота,
	               |		СчетФактураВыданныйНМА.ОборотПоРеализации
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	               |	ГДЕ
	               |		СчетФактураВыданныйНМА.Ссылка В(&МассивОбъектов)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СчетФактураВыданныйНМА.НематериальныйАктив,
	               |		СчетФактураВыданныйНМА.СтавкаНДС,
	               |		СчетФактураВыданныйНМА.Сумма,
	               |		СчетФактураВыданныйНМА.Ссылка,
	               |		СчетФактураВыданныйНМА.НематериальныйАктив.КодТНВЭД,
	               |		СчетФактураВыданныйНМА.ДатаОборота,
	               |		СчетФактураВыданныйНМА.ОборотПоРеализации) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.ID,
	               |	ВложенныйЗапрос.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
	               |ПОМЕСТИТЬ ВТ_УчастникиСовместнойДеятельности
	               |ИЗ
	               |	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК СчетФактураВыданныйУчастникиСовместнойДеятельности
	               |ГДЕ
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	               |	СУММА(ВТ_УчастникиСовместнойДеятельности.ДоляУчастия) КАК СуммаДолейУчастия
	               |ПОМЕСТИТЬ ВТ_СуммыДолейУчастников
	               |ИЗ
	               |	ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_УчастникиСовместнойДеятельности.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СведенияСчетовФактурВыданныхОбороты.Покупатель КАК Покупатель,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаВВалютеДоговораОборот КАК СуммаВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСВВалютеДоговораОборот КАК СуммаНДСВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаВВалютеДоговораОборот КАК СуммаАкцизаВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаРеглОборот КАК СуммаРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСРеглОборот КАК СуммаНДСРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.ОборотПоРеализацииРеглОборот КАК ОборотПоРеализацииРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаРеглОборот КАК СуммаАкцизаРеглОборот,
	               |	УчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия,
	               |	УчастникиСовместнойДеятельности.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |	УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
	               |	СведенияСчетовФактурВыданныхОбороты.СтавкаНДС КАК СтавкаНДС,
	               |	СведенияСчетовФактурВыданныхОбороты.СтавкаАкциза КАК СтавкаАкциза,
	               |	СведенияСчетовФактурВыданныхОбороты.Регистратор КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_СведенияСчетовФактур
	               |ИЗ
	               |	РегистрНакопления.СведенияСчетовФактурВыданных.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Организация В
	               |				(ВЫБРАТЬ
	               |					ВТ_ДанныеДокументов.Организация
	               |				ИЗ
	               |					ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов)) КАК СведенияСчетовФактурВыданныхОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
	               |			ВТ_УчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия,
	               |			ВТ_СуммыДолейУчастников.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |			ВТ_УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки
	               |		ИЗ
	               |			ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуммыДолейУчастников КАК ВТ_СуммыДолейУчастников
	               |				ПО ВТ_УчастникиСовместнойДеятельности.Ссылка = ВТ_СуммыДолейУчастников.Ссылка) КАК УчастникиСовместнойДеятельности
	               |		ПО СведенияСчетовФактурВыданныхОбороты.Покупатель = УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности
	               |ГДЕ
	               |	СведенияСчетовФактурВыданныхОбороты.Регистратор В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СведенияСчетовФактур.Покупатель КАК Покупатель,
	               |	ВТ_СведенияСчетовФактур.СуммаВВалютеДоговораОборот КАК СуммаВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаНДСВВалютеДоговораОборот КАК СуммаНДСВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаАкцизаВВалютеДоговораОборот КАК СуммаАкцизаВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаРеглОборот КАК СуммаРеглОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаНДСРеглОборот КАК СуммаНДСРеглОборот,
	               |	ВТ_СведенияСчетовФактур.ОборотПоРеализацииРеглОборот КАК ОборотПоРеализацииРеглОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаАкцизаРеглОборот КАК СуммаАкцизаРеглОборот,
	               |	ВТ_СведенияСчетовФактур.ДоляУчастия КАК ДоляУчастия,
	               |	ВТ_СведенияСчетовФактур.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |	ВТ_СведенияСчетовФактур.НомерСтроки КАК НомерСтроки,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС КАК СтавкаНДС,
	               |	ВТ_СведенияСчетовФактур.СтавкаАкциза КАК СтавкаАкциза,
	               |	ВТ_СведенияСчетовФактур.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА Контрагенты.Наименование
	               |		ИНАЧЕ Контрагенты.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПокупателя,
	               |	Контрагенты.ИдентификационныйКодЛичности КАК ПокупательБИН_ИИН,
	               |	Контрагенты.РНН КАК ПокупательРНН,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	               |ИЗ
	               |	ВТ_СведенияСчетовФактур КАК ВТ_СведенияСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТ_СведенияСчетовФактур.Покупатель = Контрагенты.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_СведенияСчетовФактур.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Основания.Ссылка КАК Ссылка,
	               |	ВТ_Основания.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	ВТ_Основания КАК ВТ_Основания
	               |ИТОГИ ПО
	               |	Ссылка";
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("НомерГТДПустаяСсылка", Справочники.НомераГТД.ПустаяСсылка());
	
	Запрос.Текст = ТекстЗапроса;
	
	МассивРезультатов 	  	= Запрос.ВыполнитьПакет();
	ВыборкаПоШапке 		  	= МассивРезультатов[4].Выбрать();
	ТаблицаШапкиДокумента 	= МассивРезультатов[4].Выгрузить();
	ВыборкаПоТЧИтоги 	  	= МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаДанныхТаблЧастей = МассивРезультатов[5].Выгрузить();
	РезультатПоСовмДеят   	= МассивРезультатов[9];
	ВыборкаОснованияИтоги 	= МассивРезультатов[10].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляПечати = Новый Массив;
	
	Пока ВыборкаПоШапке.Следующий() Цикл 
		
		ДанныеПечати = Новый Структура("Ссылка, Организация, СтруктурноеПодразделение, Контрагент, Поставщик, Покупатель, 
		|СчетКонтрагента, СчетОрганизации, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз, 
		|ДоговорПокупателя, УсловияОплаты, ПунктНазначения, ВидСчетаФактуры");
		
		ЗаполнитьЗначенияСвойств(ДанныеПечати, ВыборкаПоШапке);
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.СпособОтправленияПоКлассификатору) Тогда
			
			МакетКодовСтрокСпособОтправленияПоКлассификатору = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СпособыОтправления");
			МакетКодовСтрокСпособОтправленияПоКлассификатору.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ОбластьСтрок = МакетКодовСтрокСпособОтправленияПоКлассификатору.Области.Найти("Классификатор");
			НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(
			МакетКодовСтрокСпособОтправленияПоКлассификатору, ОбластьСтрок, ВыборкаПоШапке.СпособОтправленияПоКлассификатору);
			Если НЕ ПустаяСтрока(НаименованиеСтроки) Тогда
				ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправленияПоКлассификатору +" ("+НаименованиеСтроки+")");
			Иначе
				ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправленияПоКлассификатору);
			КонецЕсли;
		Иначе
			ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправления);
		КонецЕсли;
		
		ДанныеПечати.Вставить("Номер", РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоШапке.Ссылка, НСтр("ru='Счет-фактура'", КодЯзыка),,,,КодЯзыка));
		
		// Сведения о дополнительном или исправленном счете-фактуре.
		Если ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный 
			ИЛИ ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
			
			Если ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
				ТекстДополнительныйИлиИсправленныйСчетФактура = НСтр("ru = 'Дополнительный счет-фактура %1'", КодЯзыка);
			ИначеЕсли ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
				ТекстДополнительныйИлиИсправленныйСчетФактура = НСтр("ru = 'Исправленный счет-фактура %1'", КодЯзыка);
			Иначе
				ТекстДополнительныйИлиИсправленныйСчетФактура = "%1";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ОсновнойСчетФактура) Тогда 
				ПредставлениеОсновногоСчетаФактуры = НСтр("ru = 'к Счету-фактуре №%1 от %2'");
				ПредставлениеОсновногоСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеОсновногоСчетаФактуры, 
				ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапке.ОсновнойСчетФактураНомер, ВыборкаПоШапке.ОсновнойСчетФактура), 
				Формат(ВыборкаПоШапке.ОсновнойСчетФактураДата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
			Иначе
				ПредставлениеОсновногоСчетаФактуры = "";
			КонецЕсли;
			
			ТекстДополнительныйИлиИсправленныйСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДополнительныйИлиИсправленныйСчетФактура, ПредставлениеОсновногоСчетаФактуры);
			ДанныеПечати.Вставить("ДополнительныйИлиИсправленныйСчетФактура", ТекстДополнительныйИлиИсправленныйСчетФактура);
			
		КонецЕсли;
		
		ТекстПервичныйСчетФактура = "";
		ПервичныйСчетФактура = ВыборкаПоШапке;
		Пока ЗначениеЗаполнено(ПервичныйСчетФактура.ОсновнойСчетФактура) И ЗначениеЗаполнено(ПервичныйСчетФактура.ВидСчетаФактуры) И НЕ ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный Цикл
			ПервичныйСчетФактура = ПервичныйСчетФактура.ОсновнойСчетФактура;
			Если ПервичныйСчетФактура = ВыборкаПоШапке.Ссылка Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный И НЕ ТипЗнч(ПервичныйСчетФактура) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			ТекстПервичныйСчетФактура =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Первичный счет-фактура №%1 от %2'", КодЯзыка),
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПервичныйСчетФактура.Номер, ПервичныйСчетФактура),
			Формат(ПервичныйСчетФактура.Дата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"))
		КонецЕсли;
		
		ДанныеПечати.Вставить("ПервичныйСчетФактура",ТекстПервичныйСчетФактура);
		
		Если ВыборкаПоШапке.ВыводитьДатуОборотаПоРеализации Тогда 
			ДанныеПечати.Вставить("ДатаОборотаПоРеализации", Формат(ВыборкаПоШапке.ДатаОборотаПоРеализации, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		
		//данные по доверенности 		
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ВыборкаПоШапке);
		
		ТекстДовереренности = ОбщегоНазначенияБК.ПолучитьТекстДоверенности(ДанныеДоверенности);
		Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьЛицо) Тогда
			ТекстДовереренности = ТекстДовереренности +  НСтр("ru=', выданной %1%2'", КодЯзыка);
			ПараметрВыдана = "";
			ПараметрЛицо   = "";
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьВыдана) Тогда
				ПараметрВыдана = СокрЛП(ВыборкаПоШапке.ДоверенностьВыдана);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьЛицо)Тогда
				Если ЗначениеЗаполнено(ПараметрВыдана) Тогда
					ПараметрЛицо = ", " + СокрЛП(ВыборкаПоШапке.ДоверенностьЛицо);
				Иначе
					ПараметрЛицо = СокрЛП(ВыборкаПоШапке.ДоверенностьЛицо);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   		
		
		ТекстДовереренности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДовереренности, ПараметрВыдана, ПараметрЛицо);
		Если Не ЗначениеЗаполнено(ТекстДовереренности) Тогда
			ТекстДовереренности = НСтр("ru='Без доверенности'", КодЯзыка)
		КонецЕсли;
		
		ДанныеПечати.Вставить("Доверенность", ТекстДовереренности);
		
		ВыводитьРНН = Ложь;
		СуффиксРНН_БИН = "БИН_ИИН";
		ПредставлениеРНН_БИН = НСтр("ru='БИН / ИИН'; kz='БСН / ЖСН'", КодЯзыка);
		
		Если Не ВыборкаПоШапке.Дата  = Неопределено Тогда 
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоШапке.Дата<ДатаПрекращенияВыводаРНН;
			Если ВыводитьРНН Тогда 
				СуффиксРНН_БИН = "РНН";
				ПредставлениеРНН_БИН = НСтр("ru='РНН'; kz='СТН'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		// Сведения о поставщике
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ВыборкаПоШапке.ПредставлениеПоставщика);
		
		Если ВыборкаПоШапке.ДатаСвидетельстваПоНДС <> Дата(1,1,1) И ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ВыборкаПоШапке.Поставщик, ВыборкаПоШапке.Дата) Тогда 
			ТекстСвидетельствоПоНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Свидетельство о постановке на регистрационный учет по НДС, серия %1, № %2, от %3'", КодЯзыка),
			ВыборкаПоШапке.СерияСвидетельстваПоНДС, 
			ВыборкаПоШапке.НомерСвидетельстваПоНДС, 
			Формат(ВыборкаПоШапке.ДатаСвидетельстваПоНДС, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
			ДанныеПечати.Вставить("СвидетельствоПоНДС", ТекстСвидетельствоПоНДС);
		КонецЕсли;
		
		ПредставлениеРНН_БИНПоставщика = "";
		Если ТипЗнч(ВыборкаПоШапке.ПоставщикДляПечати) =  Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДанныеОрганизации = Новый Структура;
			ДанныеОрганизации.Вставить("БИН_ИИН",		 ВыборкаПоШапке.ПоставщикДляПечати.ИдентификационныйНомер);
			ДанныеОрганизации.Вставить("РНН",		     ВыборкаПоШапке.ПоставщикДляПечати.РНН);
			ДанныеОрганизации.Вставить("ЮрФизЛицо",		 Перечисления.ЮрФизЛицо.ЮрЛицо);			
		Иначе
			ДанныеОрганизации = ВыборкаПоШапке.ПоставщикДляПечати;
		КонецЕсли;   			
		
		РННиБИНПоставщика = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ДанныеОрганизации, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПоставщика, , Истина);		
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.ПоставщикГолова) И ВыборкаПоШапке.ПоставщикГолова <> ВыборкаПоШапке.СтруктурнаяЕдиницаОрганизация Тогда
			СведенияГоловы          = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоШапке.ПоставщикГолова, ВыборкаПоШапке.Дата);
			РННиБИНПоставщикаГолова = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияГоловы, ВыборкаПоШапке.Дата, Ложь, , , Истина);		
			ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияГоловы, "ПолноеНаименование,", , ВыборкаПоШапке.Дата);
			РННиБИНПоставщика = РННиБИНПоставщика + "(" + ПредставлениеРНН_БИНПоставщика + " головной организации """ + ПредставлениеПоставщика + """: " + РННиБИНПоставщикаГолова + ")";						
		КонецЕсли;   
		
		ДанныеПечати.Вставить("РННИАдресПоставщика", РННиБИНПоставщика + ", " + КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.ПоставщикДляПечати, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНПоставщика", ПредставлениеРНН_БИНПоставщика);
		ДанныеПечати.Вставить("РасчетныйСчетПоставщика", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка), 
		ВыборкаПоШапке.СчетОрганизацииНомерСчета,
		ВыборкаПоШапке.СчетОрганизацииБанк,
		ВыборкаПоШапке.СчетОрганизацииБИК));
		
		// Сведения о грузоотправителе														
		ПредставлениеРНН_БИНГрузоотправителя = "";
		РННиБИНГрузоотправителя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Грузоотправитель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНГрузоотправителя, , Истина);		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, %2, %3'", КодЯзыка),
		РННиБИНГрузоотправителя,
		ВыборкаПоШапке.ПредставлениеГрузоотправителя,
		КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Грузоотправитель, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеГрузоотправителя", ?(ЗначениеЗаполнено(ВыборкаПоШапке.ПредставлениеГрузоотправителя), ПредставлениеГрузоотправителя, ""));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНГрузоотправителя", ПредставлениеРНН_БИНГрузоотправителя);
		
		// Сведения о грузополучателе
		ПредставлениеРНН_БИНГрузополучателя = "";
		РННиБИНГрузополучателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Грузополучатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНГрузополучателя, , Истина);		
		ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ВыборкаПоШапке.Грузополучатель);

		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, %2, %3'", КодЯзыка),
		РННиБИНГрузополучателя + ТекстНомерНалоговойРегистрации,
		ВыборкаПоШапке.ПредставлениеГрузополучателя,
		КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Грузополучатель, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеГрузополучателя", ?(ЗначениеЗаполнено(ВыборкаПоШапке.ПредставлениеГрузополучателя), ПредставлениеГрузополучателя, ""));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНГрузополучателя", ПредставлениеРНН_БИНГрузополучателя);
		
		// Сведения о покупателе
		ДанныеПечати.Вставить("ДоговорСовместнойДеятельности", НЕ РезультатПоСовмДеят.Пустой());
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПечати.ДоговорПокупателя, "ДоговорСовместнойДеятельности,УчастникСРП");
		
		ДанныеПечати.Вставить("УчастникСовместнойДеятельности", РеквизитыДоговора.ДоговорСовместнойДеятельности);
		ДанныеПечати.Вставить("УчастникСРП", РеквизитыДоговора.УчастникСРП);
		
		Если НЕ ДанныеПечати.ДоговорСовместнойДеятельности Тогда 
			ДанныеПечати.Вставить("Получатель", НСтр("ru='Получатель'", КодЯзыка));
			ДанныеПечати.Вставить("ПредставлениеПокупателя", ВыборкаПоШапке.ПредставлениеПокупателя);
			ДанныеПечати.Вставить("РасчетныйСчетПокупателя", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка), 
			ВыборкаПоШапке.СчетКонтрагентаНомерСчета,
			ВыборкаПоШапке.СчетКонтрагентаБанк,
			ВыборкаПоШапке.СчетКонтрагентаБИК));
			
			ПредставлениеРНН_БИНПокупателя = "";
			РННиБИНПокупателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Покупатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);		
			
			ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ВыборкаПоШапке.Покупатель);
			АдресЮрКонтрагента             = КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Покупатель, "Юридический");
			ДанныеПечати.Вставить("РННИАдресПокупателя", РННиБИНПокупателя 
			+ ?(ЗначениеЗаполнено(ТекстНомерНалоговойРегистрации),", " + ТекстНомерНалоговойРегистрации, "")
			+ ?(ЗначениеЗаполнено(АдресЮрКонтрагента),", " + АдресЮрКонтрагента, ""));

			ДанныеПечати.Вставить("ПредставлениеРНН_БИНПокупателя", ПредставлениеРНН_БИНПокупателя);
			
		Иначе 
			ТаблицаПокупателей = РезультатПоСовмДеят.Выгрузить();
			ТаблицаПокупателей.Свернуть("Покупатель, ПредставлениеПокупателя, ПокупательБИН_ИИН, ПокупательРНН");
			
			ТаблицаПокупателейПолная = ТаблицаПокупателей.СкопироватьКолонки();
			ТаблицаПокупателейПолная.Колонки.Добавить("Получатель", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("РННИАдресПокупателя", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("ПредставлениеРНН_БИНПокупателя", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("РасчетныйСчетПокупателя", Новый ОписаниеТипов("Строка"));
			
			Для Каждого СтрокаТаблицы Из ТаблицаПокупателей Цикл
				НоваяСтрока = ТаблицаПокупателейПолная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				ПредставлениеРНН_БИНПокупателя = "";
				РННиБИНПокупателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СтрокаТаблицы.Покупатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);		
				ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(СтрокаТаблицы.Покупатель);

				НоваяСтрока.РННИАдресПокупателя = РННиБИНПокупателя + ", " + ТекстНомерНалоговойРегистрации + ", " + КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(СтрокаТаблицы.Покупатель, "Юридический");
				НоваяСтрока.ПредставлениеРНН_БИНПокупателя = ПредставлениеРНН_БИНПокупателя;
				
				Если СтрокаТаблицы.Покупатель = ВыборкаПоШапке.ПокупательДляПечати Тогда
					НоваяСтрока.Получатель = НСтр("ru='Получатель'", КодЯзыка);
					НоваяСтрока.РасчетныйСчетПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка), 
					ВыборкаПоШапке.СчетКонтрагентаНомерСчета,
					ВыборкаПоШапке.СчетКонтрагентаБанк,
					ВыборкаПоШапке.СчетКонтрагентаБИК);
				Иначе 
					Если РеквизитыДоговора.ДоговорСовместнойДеятельности Тогда
						НоваяСтрока.Получатель = НСтр("ru='Участник совместной деятельности'", КодЯзыка);
					ИначеЕсли 
						РеквизитыДоговора.УчастникСРП Тогда
						НоваяСтрока.Получатель = НСтр("ru='Участник СРП'", КодЯзыка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			ДанныеПечати.Вставить("ТаблицаПокупателей", ТаблицаПокупателейПолная);
		КонецЕсли;
		
		ДанныеПечати.Вставить("Валюта", ?(ВВалютеРеглУчета, ВалютаРегламентированногоУчета, ВыборкаПоШапке.ВалютаДокумента));
		
		
		// Сведения о табличных частях
		ВыборкаПоТЧИтоги.Сбросить();
		НайденнаяСтрока = ТаблицаДанныхТаблЧастей.Найти(ВыборкаПоШапке.Ссылка, "Ссылка");
		Если НайденнаяСтрока = Неопределено Тогда
			ДанныеПечати.Вставить("ТаблицыДокумента", Неопределено);
		Иначе 
			ОбщаяТаблицаДляПечати = ТаблицаДанныхТаблЧастей.Скопировать(Новый Структура("Ссылка", ВыборкаПоШапке.Ссылка));
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.
			МассивНайденныхСтрок = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);
			ТаблицаТовары = ОбщаяТаблицаДляПечати.Скопировать(МассивНайденныхСтрок);
			
			МассивКлючейСвязи = ТаблицаТовары.ВыгрузитьКолонку("КлючСвязи");
			МассивКлючейСвязи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКлючейСвязи);
			
			Для Каждого КлючСвязи Из МассивКлючейСвязи Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КлючСвязи", КлючСвязи);
				МассивСтрокСКлючомСвязи = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				
				МассивБазисовРаспределения = Новый Массив;
				Для Каждого СтрокаСКлючомСвязи Из МассивСтрокСКлючомСвязи Цикл
					МассивБазисовРаспределения.Добавить(СтрокаСКлючомСвязи.БазисРаспределения);	
				КонецЦикла;
				
				КоличествоДляРаспределения = МассивСтрокСКлючомСвязи[0].Количество;
				Если КоличествоДляРаспределения <> 0 Тогда
					РаспределенныйКоличество = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(КоличествоДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйКоличество.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Количество = РаспределенныйКоличество[Индекс];
					КонецЦикла;
				КонецЕсли;		
				
				АкцизДляРаспределения = МассивСтрокСКлючомСвязи[0].Акциз;
				Если АкцизДляРаспределения <> 0 Тогда
					РаспределенныйАкциз = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(АкцизДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйАкциз.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Акциз = РаспределенныйАкциз[Индекс];
					КонецЦикла;
				КонецЕсли;
				
				НДСДляРаспределения = МассивСтрокСКлючомСвязи[0].НДС;
				Если НДСДляРаспределения <> 0 Тогда
					РаспределенныйНДС = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(НДСДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйНДС.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].НДС = РаспределенныйНДС[Индекс];
					КонецЦикла;
				КонецЕсли;

				СуммаДляРаспределения = МассивСтрокСКлючомСвязи[0].Сумма;
				Если СуммаДляРаспределения <> 0 Тогда
					РаспределенныйСумма = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйСумма.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Сумма = РаспределенныйСумма[Индекс];
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
			// Удалить из ОбщаяТаблицаДляПечати все записи по товарам.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.	
			Пока Истина Цикл
				МассивстрокДляУдаления = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);	
				Если МассивстрокДляУдаления.Количество() = 0 Тогда
					Прервать;
				Иначе
					ОбщаяТаблицаДляПечати.Удалить(МассивстрокДляУдаления[0]);	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
				НоваяСтрока = ОбщаяТаблицаДляПечати.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			КонецЦикла;
			
			// Группировка и сортировка перед выводом.
			ЗапросДляГруппировки = Новый Запрос;
			ЗапросДляГруппировки.Текст =
			"ВЫБРАТЬ
			|	ОбщаяТаблицаДляПечати.ID КАК ID,
			|	ОбщаяТаблицаДляПечати.НомерСтроки КАК НомерСтроки,
			|	ОбщаяТаблицаДляПечати.Номенклатура КАК Номенклатура,
			|	ОбщаяТаблицаДляПечати.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
			|	ОбщаяТаблицаДляПечати.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ОбщаяТаблицаДляПечати.Количество КАК Количество,
			|	ОбщаяТаблицаДляПечати.СтавкаАкциза КАК СтавкаАкциза,
			|	ОбщаяТаблицаДляПечати.СтавкаНДС КАК СтавкаНДС,
			|	ОбщаяТаблицаДляПечати.Цена КАК Цена,
			|	ОбщаяТаблицаДляПечати.Акциз КАК Акциз,
			|	ОбщаяТаблицаДляПечати.НДС КАК НДС,
			|	ОбщаяТаблицаДляПечати.Сумма КАК Сумма,
			|	ОбщаяТаблицаДляПечати.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ(ОбщаяТаблицаДляПечати.ТоварНаименование КАК СТРОКА(1000)) КАК ТоварНаименование,
			|	ОбщаяТаблицаДляПечати.СтавкаНДСДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
			|	ОбщаяТаблицаДляПечати.СтавкаНДСМестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
			|	ОбщаяТаблицаДляПечати.СтавкаНДССтавка КАК СтавкаНДССтавка,
			|	ОбщаяТаблицаДляПечати.КодТНВЭД КАК КодТНВЭД,
			|	ОбщаяТаблицаДляПечати.КлючСвязи КАК КлючСвязи,
			|	ОбщаяТаблицаДляПечати.НомерСтрокиТаблицыГТД КАК НомерСтрокиТаблицыГТД,
			|	ОбщаяТаблицаДляПечати.ДатаОборота КАК ДатаОборота
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&ОбщаяТаблицаДляПечати КАК ОбщаяТаблицаДляПечати
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ID КАК ID,
			|	МИНИМУМ(ВТ.НомерСтроки) КАК НомерСтроки,
			|	ВТ.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ.КоэффициентРасчетаОблагаемойБазыАкциза) КАК КоэффициентРасчетаОблагаемойБазыАкциза,
			|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СУММА(ВТ.Количество) КАК Количество,
			|	ВТ.СтавкаАкциза КАК СтавкаАкциза,
			|	ВТ.СтавкаНДС КАК СтавкаНДС,
			|	ВТ.Цена КАК Цена,
			|	СУММА(ВТ.Акциз) КАК Акциз,
			|	СУММА(ВТ.НДС) КАК НДС,
			|	СУММА(ВТ.Сумма) КАК Сумма,
			|	ВТ.Ссылка КАК Ссылка,
			|	ВТ.ТоварНаименование КАК ТоварНаименование,
			|	ВТ.СтавкаНДСДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
			|	ВТ.СтавкаНДСМестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
			|	ВТ.СтавкаНДССтавка КАК СтавкаНДССтавка,
			|	ВТ.КодТНВЭД КАК КодТНВЭД,
			|	МИНИМУМ(ВТ.НомерСтрокиТаблицыГТД) КАК НомерСтрокиТаблицыГТД,
			|	ВТ.ДатаОборота КАК ДатаОборота
			|ИЗ
			|	ВТ КАК ВТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ.ID,
			|	ВТ.Номенклатура,
			|	ВТ.ЕдиницаИзмерения,
			|	ВТ.СтавкаАкциза,
			|	ВТ.СтавкаНДС,
			|	ВТ.Цена,
			|	ВТ.Ссылка,
			|	ВТ.ТоварНаименование,
			|	ВТ.СтавкаНДСДляОсвобожденногоОборота,
			|	ВТ.СтавкаНДСМестоРеализацииНеРК,
			|	ВТ.СтавкаНДССтавка,
			|	ВТ.КодТНВЭД,
			|	ВТ.КлючСвязи,
			|	ВТ.ДатаОборота
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	НомерСтроки,
			|	НомерСтрокиТаблицыГТД";
			
			ЗапросДляГруппировки.УстановитьПараметр("ОбщаяТаблицаДляПечати", ОбщаяТаблицаДляПечати);
			ОбщаяТаблицаДляПечати = ЗапросДляГруппировки.Выполнить().Выгрузить();
			
			УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ОбщаяТаблицаДляПечати, ТаблицаШапкиДокумента.Скопировать(Новый Структура("Ссылка", ВыборкаПоШапке.Ссылка)), Истина);
			
			ТолькоУслуги  = Истина;
			НомерСтроки = 1;
			
			ТаблицыДокумента = ИнициализацияТаблицыСтрокДокументовДляПечати();
			
			Для Каждого СтрокаПечати ИЗ ОбщаяТаблицаДляПечати Цикл
				
				Строчка = ТаблицыДокумента.Добавить();
				Строчка.НомерСтроки         		 = НомерСтроки;
				Строчка.ТоварНаименование   		 = СокрЛП(СтрокаПечати.ТоварНаименование);
				Строчка.ЕдиницаИзмеренияНаименование = ?(СтрокаПечати.ЕдиницаИзмерения = "", "шт", СтрокаПечати.ЕдиницаИзмерения);
				Строчка.Количество 					 = СтрокаПечати.Количество;		
				Строчка.СтавкаАкциза				 = СтрокаПечати.СтавкаАкциза;
				Строчка.КодТНВЭД			     	 = СтрокаПечати.КодТНВЭД;
				Строчка.ДатаОборота			     	 = СтрокаПечати.ДатаОборота;
				
				Если ВВалютеРеглУчета Тогда 
					Строчка.СтоимостьБезНДС        	 = СтрокаПечати.Сумма - СтрокаПечати.НДС;
					Если СтрокаПечати.Сумма = Строчка.СтоимостьБезНДС И ВалютаРегламентированногоУчета = ВыборкаПоШапке.ВалютаДокумента Тогда
						Строчка.ЦенаБезНДС  = СтрокаПечати.Цена;
					Иначе
						Строчка.ЦенаБезНДС 				 = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
					КонецЕсли;
					Строчка.СуммаНДС       			 = СтрокаПечати.НДС;		
					Строчка.СуммаАкциза    			 = СтрокаПечати.Акциз;
					Строчка.Всего  					 = СтрокаПечати.Сумма;
				Иначе 
					Строчка.СтоимостьБезНДС          = СтрокаПечати.СуммаВал - СтрокаПечати.НДСВал;
					Если СтрокаПечати.СуммаВал = Строчка.СтоимостьБезНДС Тогда
						Строчка.ЦенаБезНДС           = СтрокаПечати.Цена;						
					Иначе
						Строчка.ЦенаБезНДС 				 = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
					КонецЕсли;  					
					Строчка.СуммаНДС          		 = СтрокаПечати.НДСВал;		
					Строчка.СуммаАкциза        		 = СтрокаПечати.АкцизВал;
					Строчка.Всего    				 = СтрокаПечати.СуммаВал;
				КонецЕсли;
				
				НомерСтроки 						 = НомерСтроки + 1;
				
				Если ЗначениеЗаполнено(СтрокаПечати.СтавкаНДС) Тогда
					Строчка.СтавкаНДС = ?(СтрокаПечати.СтавкаНДСДляОсвобожденногоОборота ИЛИ СтрокаПечати.СтавкаНДСМестоРеализацииНеРК, НСтр("ru='Без НДС'", КодЯзыка), "" + СтрокаПечати.СтавкаНДССтавка + "%");
				КонецЕсли;
				
				Если ТолькоУслуги И ((СтрокаПечати.ID = 1) ИЛИ (СтрокаПечати.ID = 3)) Тогда 
					ТолькоУслуги = ЛОЖЬ;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеПечати.Вставить("ТаблицыДокумента", ТаблицыДокумента);
			
			ДанныеПечати.Вставить("ИтогоСуммаНДС",			ТаблицыДокумента.Итог("СуммаНДС"));
			ДанныеПечати.Вставить("ИтогоСтоимостьБезНДС", 	ТаблицыДокумента.Итог("СтоимостьБезНДС"));
			ДанныеПечати.Вставить("ИтогоВсего",    			ТаблицыДокумента.Итог("Всего"));
			ДанныеПечати.Вставить("ИтогоСуммаАкциза", 		ТаблицыДокумента.Итог("СуммаАкциза"));
			
			ТТН = "";
			// В случае реализации товаров, заполняем данные о ТТН
			Если НЕ ТолькоУслуги Тогда		
				ТекущийНомер = 1;
				ВыборкаОснованияДетально = Неопределено;
				ВыборкаОснованияИтоги.Сбросить();
				Если ВыборкаОснованияИтоги.НайтиСледующий(ВыборкаПоШапке.Ссылка) Тогда 
					ВыборкаОснованияДетально = ВыборкаОснованияИтоги.Выбрать();
				КонецЕсли;
				
				Если ВыборкаОснованияДетально <> Неопределено Тогда 
					Пока ВыборкаОснованияДетально.Следующий() Цикл
						ПредставлениеДок = "";
						Если ЗначениеЗаполнено(ВыборкаОснованияДетально.ДокументОснование) Тогда
							Попытка
								ПредставлениеДок = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаОснованияДетально.ДокументОснование);
							Исключение
								ПредставлениеДок = Строка(ВыборкаОснованияДетально.ДокументОснование);
							КонецПопытки;
							ТТН 		 = ТТН + ?(ТекущийНомер = 1, "", ", ") + ПредставлениеДок;
							ТекущийНомер = ТекущийНомер + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеПечати.Вставить("ТТН", ТТН);
			
		КонецЕсли;
		
		Если ДанныеПечати.ДоговорСовместнойДеятельности Тогда
			
			ПрефиксПоля  = ?(ВВалютеРеглУчета, "Регл", "ВВалютеДоговора");
			НомерСтроки = 0;
			ТаблицаДолейУчастия = Новый ТаблицаЗначений;
			ТаблицаДолейУчастия.Колонки.Добавить("НомерСтроки");
			ТаблицаДолейУчастия.Колонки.Добавить("УчастникСовместнойДеятельности");
			ТаблицаДолейУчастия.Колонки.Добавить("ДоляУчастия");
			ТаблицаДолейУчастия.Колонки.Добавить("СтоимостьБезНДС");
			ТаблицаДолейУчастия.Колонки.Добавить("СуммаНДС");
			ТаблицаДолейУчастия.Колонки.Добавить("Всего");
			ТаблицаДолейУчастия.Колонки.Добавить("СтавкаАкциза");
			ТаблицаДолейУчастия.Колонки.Добавить("СуммаАкциза");
			ТаблицаДолейУчастия.Колонки.Добавить("СтавкаНДС");
			
			ВыборкаПоСовмДеят = РезультатПоСовмДеят.Выбрать();
			Пока ВыборкаПоСовмДеят.Следующий() Цикл 
				
				НомерСтроки = НомерСтроки + 1;
				НоваяСтрока = ТаблицаДолейУчастия.Добавить();
				
				НоваяСтрока.НомерСтроки		               = НомерСтроки;
				
				//Реквизиты покупателя	
				НоваяСтрока.УчастникСовместнойДеятельности = ВыборкаПоСовмДеят.ПредставлениеПокупателя;
				НоваяСтрока.ДоляУчастия                    = ""+ ВыборкаПоСовмДеят.ДоляУчастия +"/"+ ВыборкаПоСовмДеят.СуммаДолейУчастия;
				НоваяСтрока.СтоимостьБезНДС                = ВыборкаПоСовмДеят["Сумма" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"];
				НоваяСтрока.СуммаНДС                       = ВыборкаПоСовмДеят["СуммаНДС" + ПрефиксПоля + "Оборот"];
				НоваяСтрока.Всего	                       = ВыборкаПоСовмДеят["Сумма" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаНДС" + ПрефиксПоля + "Оборот"];
				
				НоваяСтрока.СтавкаАкциза = ВыборкаПоСовмДеят.СтавкаАкциза;
				НоваяСтрока.СуммаАкциза  = ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"];
				
				Если ЗначениеЗаполнено(ВыборкаПоСовмДеят.СтавкаНДС) Тогда
					НоваяСтрока.СтавкаНДС = ?(ВыборкаПоСовмДеят.СтавкаНДСДляОсвобожденногоОборота ИЛИ ВыборкаПоСовмДеят.СтавкаНДСМестоРеализацииНеРК, "Без НДС", "" + ВыборкаПоСовмДеят.СтавкаНДССтавка + "%");
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеПечати.Вставить("ТаблицаСовмДеятельности", ТаблицаДолейУчастия);
			
			ДанныеПечати.Вставить("ИтогоСуммаНДСУч",			ТаблицаДолейУчастия.Итог("СуммаНДС"));
			ДанныеПечати.Вставить("ИтогоСтоимостьБезНДСУч", 	ТаблицаДолейУчастия.Итог("СтоимостьБезНДС"));
			ДанныеПечати.Вставить("ИтогоВсегоУч",    			ТаблицаДолейУчастия.Итог("Всего"));
			ДанныеПечати.Вставить("ИтогоСуммаАкцизаУч", 		ТаблицаДолейУчастия.Итог("СуммаАкциза"));
			
		КонецЕсли;
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ВыборкаПоШапке.СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапке.Дата);
		//заполним уполномоченного за главного бухгалтера для подписи счета-фактуры
		Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера) Тогда
			ДолжностьГлБухгалтера = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность), НСтр("ru='<Должность не указана>: '", КодЯзыка), "" + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность + ": ");
			ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", ДолжностьГлБухгалтера + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера);
		Иначе
			ДолжностьГлБухгалтера = НСтр("ru='Главный бухгалтер: '", КодЯзыка);
			ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru='Не предусмотрен'", КодЯзыка), Руководители.ГлавныйБухгалтер);
			ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", ДолжностьГлБухгалтера + ГлавныйБухгалтер);
		КонецЕсли;
		
		//заполним уполномоченного за руководителя для подписи счета-фактуры
		Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя) Тогда
			ДолжностьРуководителя = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность), " ", Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность + ": ");
			ДанныеПечати.Вставить("ФИОРуководителя", ДолжностьРуководителя + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя);
		Иначе
			ДолжностьРуководителя = НСтр("ru='Руководитель: '", КодЯзыка);
			ДанныеПечати.Вставить("ФИОРуководителя", ДолжностьРуководителя + Руководители.Руководитель);
		КонецЕсли;  		
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.Исполнитель) Тогда
			ДанныеОтветственногоЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.Исполнитель, ВыборкаПоШапке.Дата);
			ДанныеПечати.Вставить("ФИОИсполнителя", ДанныеОтветственногоЛица.Представление);
			ДанныеПечати.Вставить("ДолжностьИсполнителя", ДанныеОтветственногоЛица.Должность);
		КонецЕсли;		
		
		МассивДанныхДляПечати.Добавить(ДанныеПечати);
		
	КонецЦикла;
	
	Возврат МассивДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиСчетФактурыСНомерамиГТД(МассивОбъектов, ВВалютеРеглУчета = Ложь, КодЯзыка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СчетФактураВыданный.Дата КАК Дата,
	               |	СчетФактураВыданный.ДатаСовершенияОборотаПоРеализации КАК ДатаОборотаПоРеализации,
	               |	СчетФактураВыданный.Номер КАК Номер,
	               |	СчетФактураВыданный.Организация КАК Организация,
	               |	СчетФактураВыданный.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	СчетФактураВыданный.Поставщик КАК Поставщик,
	               |	СчетФактураВыданный.Контрагент КАК Контрагент,
	               |	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	СчетФактураВыданный.Покупатель КАК Покупатель,
	               |	СчетФактураВыданный.СчетОрганизации КАК СчетОрганизации,
	               |	СчетФактураВыданный.СчетКонтрагента КАК СчетКонтрагента,
	               |	СчетФактураВыданный.Грузоотправитель КАК Грузоотправитель,
	               |	СчетФактураВыданный.Грузополучатель КАК Грузополучатель,
	               |	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	               |	СчетФактураВыданный.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	               |	СчетФактураВыданный.ОсновнойСчетФактура.Номер КАК ОсновнойСчетФактураНомер,
	               |	СчетФактураВыданный.ОсновнойСчетФактура.Дата КАК ОсновнойСчетФактураДата,
	               |	СчетФактураВыданный.СтранаНазначения КАК СтранаНазначения,
	               |	СчетФактураВыданный.СтранаНазначения.УчастникТаможенногоСоюза КАК УчастникТаможенногоСоюза,
	               |	СчетФактураВыданный.ДатаОборотаВТабличнойЧасти = ЛОЖЬ КАК ВыводитьДатуОборотаПоРеализации,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Организация = СчетФактураВыданный.Поставщик
	               |			ТОГДА ВЫБОР
	               |					КОГДА НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |						ТОГДА СчетФактураВыданный.СтруктурноеПодразделение
	               |					ИНАЧЕ СчетФактураВыданный.Организация
	               |				КОНЕЦ
	               |		ИНАЧЕ СчетФактураВыданный.Поставщик
	               |	КОНЕЦ КАК ПоставщикДляПечати,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Поставщик = СчетФактураВыданный.Организация
	               |			ТОГДА ВЫБОР
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |							И СчетФактураВыданный.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре
	               |						ТОГДА СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |							И НЕ СчетФактураВыданный.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре
	               |						ТОГДА СчетФактураВыданный.Организация
	               |					КОГДА СчетФактураВыданный.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |							И СчетФактураВыданный.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							И СчетФактураВыданный.Организация <> СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |						ТОГДА СчетФактураВыданный.Организация.ГоловнаяОрганизация
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				КОНЕЦ
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |	КОНЕЦ КАК ПоставщикГолова,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданный.Покупатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА СчетФактураВыданный.Покупатель
	               |		ИНАЧЕ СчетФактураВыданный.Контрагент
	               |	КОНЕЦ КАК ПокупательДляПечати,
	               |	СчетФактураВыданный.Ответственный.ФизЛицо КАК Исполнитель,
	               |	СчетФактураВыданный.Ссылка КАК Ссылка,
	               |	СчетФактураВыданный.МоментВремени КАК МоментВремени,
	               |	СчетФактураВыданный.УчитыватьАкциз КАК УчитыватьАкциз,
	               |	СчетФактураВыданный.УчитыватьНДС КАК УчитыватьНДС,
	               |	СчетФактураВыданный.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	               |	СчетФактураВыданный.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	               |	ВЫБОР
	               |		КОГДА НЕ СчетФактураВыданный.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	               |			ТОГДА СчетФактураВыданный.СтруктурноеПодразделение
	               |		ИНАЧЕ СчетФактураВыданный.Организация
	               |	КОНЕЦ КАК СтруктурнаяЕдиницаОрганизация,
	               |	СчетФактураВыданный.УсловияОплаты КАК УсловияОплаты,
	               |	СчетФактураВыданный.СпособОтправления КАК СпособОтправления,
	               |	СчетФактураВыданный.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(СчетФактураВыданный.АдресДоставки КАК СТРОКА(1000))) <> """"
	               |			ТОГДА СчетФактураВыданный.АдресДоставки
	               |		ИНАЧЕ СчетФактураВыданный.ПунктНазначения
	               |	КОНЕЦ КАК ПунктНазначения,
	               |	СчетФактураВыданный.УдалитьДоверенность КАК УдалитьДоверенность,
	               |	СчетФактураВыданный.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	СчетФактураВыданный.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	СчетФактураВыданный.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	СчетФактураВыданный.ДоверенностьДата КАК ДоверенностьДата,
	               |	СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	СчетФактураВыданный.ДатаОборотаВТабличнойЧасти КАК ДатаОборотаВТабличнойЧасти
	               |ПОМЕСТИТЬ ВТ_ДанныеДокументов
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	               |	СчетФактураВыданныйДокументыОснования.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Основания
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	ВТ_ДанныеДокументов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ПериодыКурсовВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	               |		ПО КурсыВалют.Валюта = ВТ_ДанныеДокументов.ВалютаДокумента
	               |			И КурсыВалют.Период <= ВТ_ДанныеДокументов.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ВТ_ДанныеДокументов.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Курс КАК Курс,
	               |	КурсыВалют.Кратность КАК Кратность,
	               |	ВТ_ПериодыКурсовВалют.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыКурсовВалют КАК ВТ_ПериодыКурсовВалют
	               |		ПО КурсыВалют.Валюта = ВТ_ПериодыКурсовВалют.Валюта
	               |			И КурсыВалют.Период = ВТ_ПериодыКурсовВалют.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеДокументов.Дата КАК Дата,
	               |	ВТ_ДанныеДокументов.Номер КАК Номер,
	               |	ВТ_ДанныеДокументов.Организация КАК Организация,
	               |	ВТ_ДанныеДокументов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДанныеДокументов.Поставщик КАК Поставщик,
	               |	ВТ_ДанныеДокументов.Контрагент КАК Контрагент,
	               |	ВТ_ДанныеДокументов.ДоговорКонтрагента КАК ДоговорПокупателя,
	               |	ВТ_ДанныеДокументов.Покупатель КАК Покупатель,
	               |	ВТ_ДанныеДокументов.СчетОрганизации КАК СчетОрганизации,
	               |	ВТ_ДанныеДокументов.СчетКонтрагента КАК СчетКонтрагента,
	               |	ВТ_ДанныеДокументов.Грузоотправитель КАК Грузоотправитель,
	               |	ВТ_ДанныеДокументов.Грузополучатель КАК Грузополучатель,
	               |	ВТ_ДанныеДокументов.ВидСчетаФактуры КАК ВидСчетаФактуры,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактураНомер КАК ОсновнойСчетФактураНомер,
	               |	ВТ_ДанныеДокументов.ОсновнойСчетФактураДата КАК ОсновнойСчетФактураДата,
	               |	ВТ_ДанныеДокументов.СтранаНазначения КАК СтранаНазначения,
	               |	ВТ_ДанныеДокументов.УчастникТаможенногоСоюза КАК УчастникТаможенногоСоюза,
	               |	ВТ_ДанныеДокументов.ВыводитьДатуОборотаПоРеализации КАК ВыводитьДатуОборотаПоРеализации,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати КАК ПоставщикДляПечати,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати КАК ПокупательДляПечати,
	               |	ВТ_ДанныеДокументов.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет
	               |	КОНЕЦ КАК СчетОрганизацииДляПечати,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.НомерСчета
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.НомерСчета
	               |	КОНЕЦ КАК СчетОрганизацииНомерСчета,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.Банк
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.Банк
	               |	КОНЕЦ КАК СчетОрганизацииБанк,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетОрганизации.Банк.БИК
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ОсновнойБанковскийСчет.Банк.БИК
	               |	КОНЕЦ КАК СчетОрганизацииБИК,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет
	               |	КОНЕЦ КАК СчетКонтрагентаДляПечати,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.НомерСчета
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.НомерСчета
	               |	КОНЕЦ КАК СчетКонтрагентаНомерСчета,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.Банк
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.Банк
	               |	КОНЕЦ КАК СчетКонтрагентаБанк,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеДокументов.СчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_ДанныеДокументов.СчетКонтрагента.Банк.БИК
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.ОсновнойБанковскийСчет.Банк.БИК
	               |	КОНЕЦ КАК СчетКонтрагентаБИК,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.ПоставщикДляПечати.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.ПоставщикДляПечати.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПоставщика,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.ПокупательДляПечати.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.ПокупательДляПечати.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПокупательДляПечати.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПокупателя,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.ДатаСвидетельстваПоНДС
	               |	КОНЕЦ КАК ДатаСвидетельстваПоНДС,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.НомерСвидетельстваПоНДС
	               |	КОНЕЦ КАК НомерСвидетельстваПоНДС,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.ПоставщикДляПечати) = ТИП(Справочник.ПодразделенияОрганизаций)
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТ_ДанныеДокументов.ПоставщикДляПечати.СерияСвидетельстваПоНДС
	               |	КОНЕЦ КАК СерияСвидетельстваПоНДС,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати.ИдентификационныйНомер КАК ПоставщикБИН_ИИН,
	               |	ВТ_ДанныеДокументов.ПоставщикДляПечати.РНН КАК ПоставщикРНН,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати.ИдентификационныйКодЛичности КАК ПокупательБИН_ИИН,
	               |	ВТ_ДанныеДокументов.ПокупательДляПечати.РНН КАК ПокупательРНН,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.Грузоотправитель.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.Грузоотправитель.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузоотправитель.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ВТ_ДанныеДокументов.Грузополучатель.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА ВТ_ДанныеДокументов.Грузополучатель.Наименование
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузополучатель.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеГрузополучателя,
	               |	ВТ_ДанныеДокументов.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеДокументов.МоментВремени КАК МоментВремени,
	               |	ВТ_ДанныеДокументов.УчитыватьАкциз КАК УчитыватьАкциз,
	               |	ВТ_ДанныеДокументов.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВТ_ДанныеДокументов.СуммаВключаетАкциз КАК СуммаВключаетАкциз,
	               |	ВТ_ДанныеДокументов.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ВТ_ДанныеДокументов.ДатаОборотаПоРеализации КАК ДатаОборотаПоРеализации,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ДанныеДокументов.Грузоотправитель) = ТИП(Справочник.Контрагенты)
	               |			ТОГДА ВТ_ДанныеДокументов.Грузоотправитель.ИдентификационныйКодЛичности
	               |		ИНАЧЕ ВТ_ДанныеДокументов.Грузоотправитель.ИдентификационныйНомер
	               |	КОНЕЦ КАК ГрузоотправительБИН_ИИН,
	               |	ВТ_ДанныеДокументов.Грузоотправитель.РНН КАК ГрузоотправительРНН,
	               |	ВТ_ДанныеДокументов.Грузополучатель.ИдентификационныйКодЛичности КАК ГрузополучательБИН_ИИН,
	               |	ВТ_ДанныеДокументов.Грузополучатель.РНН КАК ГрузополучательРНН,
	               |	ВТ_ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
	               |	ВТ_Основания.ДокументОснование КАК ДокументОснование,
	               |	ВТ_ДанныеДокументов.СтруктурнаяЕдиницаОрганизация КАК СтруктурнаяЕдиницаОрганизация,
	               |	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_ДанныеДокументов.КурсВзаиморасчетов, 0) = 0
	               |			ТОГДА ВТ_КурсыВалют.Курс
	               |		ИНАЧЕ ВТ_ДанныеДокументов.КурсВзаиморасчетов
	               |	КОНЕЦ КАК КурсДокумента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_ДанныеДокументов.КратностьВзаиморасчетов, 0) = 0
	               |			ТОГДА ВТ_КурсыВалют.Кратность
	               |		ИНАЧЕ ВТ_ДанныеДокументов.КратностьВзаиморасчетов
	               |	КОНЕЦ КАК КратностьДокумента,
	               |	""СчетФактураВыданный"" КАК ВидДокумента,
	               |	ВТ_ДанныеДокументов.УсловияОплаты КАК УсловияОплаты,
	               |	ВТ_ДанныеДокументов.СпособОтправления КАК СпособОтправления,
	               |	ВТ_ДанныеДокументов.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	               |	ВТ_ДанныеДокументов.ПунктНазначения КАК ПунктНазначения,
	               |	ВТ_ДанныеДокументов.УдалитьДоверенность КАК УдалитьДоверенность,
	               |	ВТ_ДанныеДокументов.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	ВТ_ДанныеДокументов.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	ВТ_ДанныеДокументов.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	ВТ_ДанныеДокументов.ДоверенностьДата КАК ДоверенностьДата,
	               |	ВТ_ДанныеДокументов.ПоставщикГолова КАК ПоставщикГолова,
	               |	ВТ_ДанныеДокументов.ДатаОборотаВТабличнойЧасти КАК ДатаОборотаВТабличнойЧасти
	               |ИЗ
	               |	ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Основания КАК ВТ_Основания
	               |		ПО ВТ_ДанныеДокументов.Ссылка = ВТ_Основания.Ссылка
	               |			И (ВТ_Основания.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
	               |		ПО ВТ_ДанныеДокументов.ВалютаДокумента = ВТ_КурсыВалют.Валюта
	               |			И ВТ_ДанныеДокументов.Ссылка = ВТ_КурсыВалют.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ID КАК ID,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	               |	ВложенныйЗапрос.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Количество КАК Количество,
	               |	ВложенныйЗапрос.СтавкаАкциза КАК СтавкаАкциза,
	               |	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	               |	ВложенныйЗапрос.Цена КАК Цена,
	               |	ВложенныйЗапрос.Акциз КАК Акциз,
	               |	ВложенныйЗапрос.НДС КАК НДС,
	               |	ВложенныйЗапрос.Сумма КАК Сумма,
	               |	ВложенныйЗапрос.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА НЕ ВложенныйЗапрос.Содержание = """"
	               |			ТОГДА ВложенныйЗапрос.Содержание
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НЕ ПОДСТРОКА(ВложенныйЗапрос.Номенклатура.НаименованиеПолное, 1, 990) = """"
	               |					ТОГДА ВложенныйЗапрос.Номенклатура.НаименованиеПолное
	               |				ИНАЧЕ ВложенныйЗапрос.Номенклатура.Наименование
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТоварНаименование,
	               |	ВложенныйЗапрос.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
	               |	ВложенныйЗапрос.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
	               |	ВложенныйЗапрос.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ВложенныйЗапрос.НомерГТД.Наименование КАК НомерГТД,
	               |	ВложенныйЗапрос.НомерСтрокиТаблицыГТД КАК НомерСтрокиТаблицыГТД,
	               |	ВложенныйЗапрос.БазисРаспределения КАК БазисРаспределения,
	               |	ВложенныйЗапрос.КлючСвязи КАК КлючСвязи,
	               |	ВложенныйЗапрос.ДатаОборота КАК ДатаОборота
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК ID,
	               |		СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
	               |		СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
	               |		СчетФактураВыданныйТовары.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	               |		СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		СчетФактураВыданныйТовары.Количество КАК Количество,
	               |		СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
	               |		СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
	               |		СчетФактураВыданныйТовары.Цена КАК Цена,
	               |		СчетФактураВыданныйТовары.СуммаАкциза КАК Акциз,
	               |		СчетФактураВыданныйТовары.СуммаНДС КАК НДС,
	               |		СчетФактураВыданныйТовары.Сумма КАК Сумма,
	               |		СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
	               |		"""" КАК Содержание,
	               |		ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерГТД, &НомерГТДПустаяСсылка) КАК НомерГТД,
	               |		ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерСтроки, 0) КАК НомерСтрокиТаблицыГТД,
	               |		ВЫБОР  
				   |           КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 0) = 0
				   |               ТОГДА 1
				   |           ИНАЧЕ ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 1)
				   |        КОНЕЦ КАК БазисРаспределения,
	               |		СчетФактураВыданныйТовары.КлючСвязи КАК КлючСвязи,
	               |		СчетФактураВыданныйТовары.ДатаОборота КАК ДатаОборота
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.НомераГТД КАК СчетФактураВыданныйНомераГТД
	               |			ПО СчетФактураВыданныйТовары.КлючСвязи = СчетФактураВыданныйНомераГТД.КлючСвязи
	               |				И (СчетФактураВыданныйНомераГТД.Ссылка = СчетФактураВыданныйТовары.Ссылка)
	               |	ГДЕ
	               |		СчетФактураВыданныйТовары.Ссылка В(&МассивОбъектов)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		2,
	               |		СчетФактураВыданныйУслуги.НомерСтроки,
	               |		СчетФактураВыданныйУслуги.Номенклатура,
	               |		0,
	               |		СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	               |		СчетФактураВыданныйУслуги.Количество,
	               |		"""",
	               |		СчетФактураВыданныйУслуги.СтавкаНДС,
	               |		СчетФактураВыданныйУслуги.Цена,
	               |		0,
	               |		СчетФактураВыданныйУслуги.СуммаНДС,
	               |		СчетФактураВыданныйУслуги.Сумма,
	               |		СчетФактураВыданныйУслуги.Ссылка,
	               |		СчетФактураВыданныйУслуги.Содержание,
	               |		&НомерГТДПустаяСсылка,
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйУслуги.ДатаОборота
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	               |	ГДЕ
	               |		СчетФактураВыданныйУслуги.Ссылка В(&МассивОбъектов)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		3,
	               |		СчетФактураВыданныйОС.НомерСтроки,
	               |		СчетФактураВыданныйОС.ОсновноеСредство,
	               |		0,
	               |		""шт"",
	               |		1,
	               |		"""",
	               |		СчетФактураВыданныйОС.СтавкаНДС,
	               |		СчетФактураВыданныйОС.Сумма,
	               |		0,
	               |		СчетФактураВыданныйОС.СуммаНДС,
	               |		СчетФактураВыданныйОС.Сумма,
	               |		СчетФактураВыданныйОС.Ссылка,
	               |		"""",
	               |		&НомерГТДПустаяСсылка,
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйОС.ДатаОборота
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	               |	ГДЕ
	               |		СчетФактураВыданныйОС.Ссылка В(&МассивОбъектов)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		4,
	               |		1,
	               |		СчетФактураВыданныйНМА.НематериальныйАктив,
	               |		0,
	               |		""шт"",
	               |		1,
	               |		"""",
	               |		СчетФактураВыданныйНМА.СтавкаНДС,
	               |		СчетФактураВыданныйНМА.Сумма,
	               |		0,
	               |		СчетФактураВыданныйНМА.СуммаНДС,
	               |		СчетФактураВыданныйНМА.Сумма,
	               |		СчетФактураВыданныйНМА.Ссылка,
	               |		"""",
	               |		&НомерГТДПустаяСсылка,
	               |		0,
	               |		1,
	               |		0,
	               |		СчетФактураВыданныйНМА.ДатаОборота
	               |	ИЗ
	               |		Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	               |	ГДЕ
	               |		СчетФактураВыданныйНМА.Ссылка В(&МассивОбъектов)) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.ID,
	               |	ВложенныйЗапрос.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
	               |ПОМЕСТИТЬ ВТ_УчастникиСовместнойДеятельности
	               |ИЗ
	               |	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК СчетФактураВыданныйУчастникиСовместнойДеятельности
	               |ГДЕ
	               |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка В(&МассивОбъектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
	               |	СУММА(ВТ_УчастникиСовместнойДеятельности.ДоляУчастия) КАК СуммаДолейУчастия
	               |ПОМЕСТИТЬ ВТ_СуммыДолейУчастников
	               |ИЗ
	               |	ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_УчастникиСовместнойДеятельности.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СведенияСчетовФактурВыданныхОбороты.Покупатель КАК Покупатель,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаВВалютеДоговораОборот КАК СуммаВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСВВалютеДоговораОборот КАК СуммаНДСВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаВВалютеДоговораОборот КАК СуммаАкцизаВВалютеДоговораОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаРеглОборот КАК СуммаРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСРеглОборот КАК СуммаНДСРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.ОборотПоРеализацииРеглОборот КАК ОборотПоРеализацииРеглОборот,
	               |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаРеглОборот КАК СуммаАкцизаРеглОборот,
	               |	УчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия,
	               |	УчастникиСовместнойДеятельности.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |	УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
	               |	СведенияСчетовФактурВыданныхОбороты.СтавкаНДС КАК СтавкаНДС,
	               |	СведенияСчетовФактурВыданныхОбороты.СтавкаАкциза КАК СтавкаАкциза,
	               |	СведенияСчетовФактурВыданныхОбороты.Регистратор КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_СведенияСчетовФактур
	               |ИЗ
	               |	РегистрНакопления.СведенияСчетовФактурВыданных.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Организация В
	               |				(ВЫБРАТЬ
	               |					ВТ_ДанныеДокументов.Организация
	               |				ИЗ
	               |					ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов)) КАК СведенияСчетовФактурВыданныхОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
	               |			ВТ_УчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия,
	               |			ВТ_СуммыДолейУчастников.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |			ВТ_УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки
	               |		ИЗ
	               |			ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуммыДолейУчастников КАК ВТ_СуммыДолейУчастников
	               |				ПО ВТ_УчастникиСовместнойДеятельности.Ссылка = ВТ_СуммыДолейУчастников.Ссылка) КАК УчастникиСовместнойДеятельности
	               |		ПО СведенияСчетовФактурВыданныхОбороты.Покупатель = УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности
	               |ГДЕ
	               |	СведенияСчетовФактурВыданныхОбороты.Регистратор В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СведенияСчетовФактур.Покупатель КАК Покупатель,
	               |	ВТ_СведенияСчетовФактур.СуммаВВалютеДоговораОборот КАК СуммаВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаНДСВВалютеДоговораОборот КАК СуммаНДСВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаАкцизаВВалютеДоговораОборот КАК СуммаАкцизаВВалютеДоговораОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаРеглОборот КАК СуммаРеглОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаНДСРеглОборот КАК СуммаНДСРеглОборот,
	               |	ВТ_СведенияСчетовФактур.ОборотПоРеализацииРеглОборот КАК ОборотПоРеализацииРеглОборот,
	               |	ВТ_СведенияСчетовФактур.СуммаАкцизаРеглОборот КАК СуммаАкцизаРеглОборот,
	               |	ВТ_СведенияСчетовФактур.ДоляУчастия КАК ДоляУчастия,
	               |	ВТ_СведенияСчетовФактур.СуммаДолейУчастия КАК СуммаДолейУчастия,
	               |	ВТ_СведенияСчетовФактур.НомерСтроки КАК НомерСтроки,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС КАК СтавкаНДС,
	               |	ВТ_СведенияСчетовФактур.СтавкаАкциза КАК СтавкаАкциза,
	               |	ВТ_СведенияСчетовФактур.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 990) = """"
	               |			ТОГДА Контрагенты.Наименование
	               |		ИНАЧЕ Контрагенты.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеПокупателя,
	               |	Контрагенты.ИдентификационныйКодЛичности КАК ПокупательБИН_ИИН,
	               |	Контрагенты.РНН КАК ПокупательРНН,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
	               |	ВТ_СведенияСчетовФактур.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	               |ИЗ
	               |	ВТ_СведенияСчетовФактур КАК ВТ_СведенияСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТ_СведенияСчетовФактур.Покупатель = Контрагенты.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_СведенияСчетовФактур.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Основания.Ссылка КАК Ссылка,
	               |	ВТ_Основания.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	ВТ_Основания КАК ВТ_Основания
	               |ИТОГИ ПО
	               |	Ссылка";
				   				   
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("НомерГТДПустаяСсылка", Справочники.НомераГТД.ПустаяСсылка());
	
	Запрос.Текст = ТекстЗапроса;
	
	МассивРезультатов 	  	= Запрос.ВыполнитьПакет();
	ВыборкаПоШапке 		  	= МассивРезультатов[4].Выбрать();
	ТаблицаШапкиДокумента 	= МассивРезультатов[4].Выгрузить();
	ВыборкаПоТЧИтоги 	  	= МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаДанныхТаблЧастей = МассивРезультатов[5].Выгрузить();
	РезультатПоСовмДеят   	= МассивРезультатов[9];
	ВыборкаОснованияИтоги 	= МассивРезультатов[10].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляПечати = Новый Массив;
	
	Пока ВыборкаПоШапке.Следующий() Цикл 
		
		ДанныеПечати = Новый Структура("Ссылка, Организация, СтруктурноеПодразделение, Контрагент, Поставщик, Покупатель, 
										|СчетКонтрагента, СчетОрганизации, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз, 
										|ДоговорПокупателя, УсловияОплаты, ПунктНазначения, ВидСчетаФактуры");
										
		ЗаполнитьЗначенияСвойств(ДанныеПечати, ВыборкаПоШапке);
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.СпособОтправленияПоКлассификатору) Тогда
			
			МакетКодовСтрокСпособОтправленияПоКлассификатору = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СпособыОтправления");
			МакетКодовСтрокСпособОтправленияПоКлассификатору.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ОбластьСтрок = МакетКодовСтрокСпособОтправленияПоКлассификатору.Области.Найти("Классификатор");
			НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(
				МакетКодовСтрокСпособОтправленияПоКлассификатору, ОбластьСтрок, ВыборкаПоШапке.СпособОтправленияПоКлассификатору);
			Если НЕ ПустаяСтрока(НаименованиеСтроки) Тогда
				ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправленияПоКлассификатору +" ("+НаименованиеСтроки+")");
			Иначе
				ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправленияПоКлассификатору);
			КонецЕсли;
		Иначе
			ДанныеПечати.Вставить("СпособОтправления",ВыборкаПоШапке.СпособОтправления);
		КонецЕсли;
		
		ДанныеПечати.Вставить("Номер", РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоШапке.Ссылка, НСтр("ru='Счет-фактура'", КодЯзыка),,,,КодЯзыка));
		
		// Сведения о дополнительном или исправленном счете-фактуре.
		Если ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный 
			ИЛИ ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
			
			Если ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
				ТекстДополнительныйИлиИсправленныйСчетФактура = НСтр("ru = 'Дополнительный счет-фактура %1'", КодЯзыка);
			ИначеЕсли ВыборкаПоШапке.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
				ТекстДополнительныйИлиИсправленныйСчетФактура = НСтр("ru = 'Исправленный счет-фактура %1'", КодЯзыка);
			Иначе
				ТекстДополнительныйИлиИсправленныйСчетФактура = "%1";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ОсновнойСчетФактура) Тогда 
				ПредставлениеОсновногоСчетаФактуры = НСтр("ru = 'к Счету-фактуре №%1 от %2'", КодЯзыка);
				ПредставлениеОсновногоСчетаФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ПредставлениеОсновногоСчетаФактуры, 
					ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапке.ОсновнойСчетФактураНомер, ВыборкаПоШапке.ОсновнойСчетФактура), 
					Формат(ВыборкаПоШапке.ОсновнойСчетФактураДата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
			Иначе
				ПредставлениеОсновногоСчетаФактуры = "";
			КонецЕсли;
			
			ТекстДополнительныйИлиИсправленныйСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДополнительныйИлиИсправленныйСчетФактура, ПредставлениеОсновногоСчетаФактуры);
			ДанныеПечати.Вставить("ДополнительныйИлиИсправленныйСчетФактура", ТекстДополнительныйИлиИсправленныйСчетФактура);
			
		КонецЕсли;
		
		ТекстПервичныйСчетФактура = "";
		ПервичныйСчетФактура = ВыборкаПоШапке;
		Пока ЗначениеЗаполнено(ПервичныйСчетФактура.ОсновнойСчетФактура) И ЗначениеЗаполнено(ПервичныйСчетФактура.ВидСчетаФактуры) И НЕ ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный Цикл
			ПервичныйСчетФактура = ПервичныйСчетФактура.ОсновнойСчетФактура;
			Если ПервичныйСчетФактура = ВыборкаПоШапке.Ссылка Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный И НЕ ТипЗнч(ПервичныйСчетФактура) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			ТекстПервичныйСчетФактура =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Первичный счет-фактура №%1 от %2'", КодЯзыка),
				ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПервичныйСчетФактура.Номер, ПервичныйСчетФактура),
				Формат(ПервичныйСчетФактура.Дата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"))
		КонецЕсли;
		
		ДанныеПечати.Вставить("ПервичныйСчетФактура",ТекстПервичныйСчетФактура);
		
		
		Если ВыборкаПоШапке.ВыводитьДатуОборотаПоРеализации Тогда 
			ДанныеПечати.Вставить("ДатаОборотаПоРеализации", Формат(ВыборкаПоШапке.ДатаОборотаПоРеализации, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		
		//данные по доверенности
		ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ВыборкаПоШапке);
		
		ТекстДовереренности = ОбщегоНазначенияБК.ПолучитьТекстДоверенности(ДанныеДоверенности);
		Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьЛицо) Тогда
			ТекстДовереренности = ТекстДовереренности +  НСтр("ru=', выданной %1%2'", КодЯзыка);
			ПараметрВыдана = "";
			ПараметрЛицо   = "";
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьВыдана) Тогда
				ПараметрВыдана = СокрЛП(ВыборкаПоШапке.ДоверенностьВыдана);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоШапке.ДоверенностьЛицо)Тогда
				Если ЗначениеЗаполнено(ПараметрВыдана) Тогда
					ПараметрЛицо = ", " + СокрЛП(ВыборкаПоШапке.ДоверенностьЛицо);
				Иначе
					ПараметрЛицо = СокрЛП(ВыборкаПоШапке.ДоверенностьЛицо);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   		
		
		ТекстДовереренности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДовереренности, ПараметрВыдана, ПараметрЛицо);
		Если Не ЗначениеЗаполнено(ТекстДовереренности) Тогда
			ТекстДовереренности = НСтр("ru='Без доверенности'", КодЯзыка)
		КонецЕсли;
			
		ДанныеПечати.Вставить("Доверенность", ТекстДовереренности);
				
		ВыводитьРНН = Ложь;
		СуффиксРНН_БИН = "БИН_ИИН";
		ПредставлениеРНН_БИН = НСтр("ru='БИН / ИИН'; kz='БСН / ЖСН'", КодЯзыка);
		
		Если Не ВыборкаПоШапке.Дата  = Неопределено Тогда 
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоШапке.Дата<ДатаПрекращенияВыводаРНН;
			Если ВыводитьРНН Тогда 
				СуффиксРНН_БИН = "РНН";
				ПредставлениеРНН_БИН = НСтр("ru='РНН'; kz='СТН'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		// Сведения о поставщике
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ВыборкаПоШапке.ПредставлениеПоставщика);
		
		Если ВыборкаПоШапке.ДатаСвидетельстваПоНДС <> Дата(1,1,1) И ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ВыборкаПоШапке.ПоставщикДляПечати, ВыборкаПоШапке.Дата) Тогда 
			ТекстСвидетельствоПоНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Свидетельство о постановке на регистрационный учет по НДС, серия %1, № %2, от %3'", КодЯзыка),
				ВыборкаПоШапке.СерияСвидетельстваПоНДС,
				ВыборкаПоШапке.НомерСвидетельстваПоНДС,
				Формат(ВыборкаПоШапке.ДатаСвидетельстваПоНДС, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
			ДанныеПечати.Вставить("СвидетельствоПоНДС", ТекстСвидетельствоПоНДС);
		КонецЕсли;
		
		ПредставлениеРНН_БИНПоставщика = "";
		Если ТипЗнч(ВыборкаПоШапке.ПоставщикДляПечати) =  Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДанныеОрганизации = Новый Структура;
			ДанныеОрганизации.Вставить("БИН_ИИН",		 ВыборкаПоШапке.ПоставщикДляПечати.ИдентификационныйНомер);
			ДанныеОрганизации.Вставить("РНН",		     ВыборкаПоШапке.ПоставщикДляПечати.РНН);
			ДанныеОрганизации.Вставить("ЮрФизЛицо",		 Перечисления.ЮрФизЛицо.ЮрЛицо);			
		Иначе
			ДанныеОрганизации = ВыборкаПоШапке.ПоставщикДляПечати;
		КонецЕсли;
		
		РННиБИНПоставщика = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ДанныеОрганизации, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПоставщика, , Истина);		
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.ПоставщикГолова) И ВыборкаПоШапке.ПоставщикГолова <> ВыборкаПоШапке.СтруктурнаяЕдиницаОрганизация Тогда
			СведенияГоловы          = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоШапке.ПоставщикГолова, ВыборкаПоШапке.Дата);
			РННиБИНПоставщикаГолова = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияГоловы, ВыборкаПоШапке.Дата, Ложь, , , Истина);		
			ПредставлениеПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияГоловы, "ПолноеНаименование,", , ВыборкаПоШапке.Дата);
			РННиБИНПоставщика = РННиБИНПоставщика + "(" + ПредставлениеРНН_БИНПоставщика + НСтр("ru=' головной организации ""'", КодЯзыка) + ПредставлениеПоставщика + """: " + РННиБИНПоставщикаГолова + ")";						
		КонецЕсли;   
		
		ДанныеПечати.Вставить("РННИАдресПоставщика", РННиБИНПоставщика + ", " + КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.ПоставщикДляПечати, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНПоставщика", ПредставлениеРНН_БИНПоставщика);
		ДанныеПечати.Вставить("РасчетныйСчетПоставщика", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка), 
																ВыборкаПоШапке.СчетОрганизацииНомерСчета,
																ВыборкаПоШапке.СчетОрганизацииБанк,
																ВыборкаПоШапке.СчетОрганизацииБИК));
		
		// Сведения о грузоотправителе
		ПредставлениеРНН_БИНГрузоотправителя = "";
		РННиБИНГрузоотправителя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Грузоотправитель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНГрузоотправителя, , Истина);		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2, %3",
											РННиБИНГрузоотправителя,
											ВыборкаПоШапке.ПредставлениеГрузоотправителя,
											КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Грузоотправитель, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеГрузоотправителя", ?(ЗначениеЗаполнено(ВыборкаПоШапке.ПредставлениеГрузоотправителя), ПредставлениеГрузоотправителя, ""));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНГрузоотправителя", ПредставлениеРНН_БИНГрузоотправителя);
		
		// Сведения о грузополучателе
		ПредставлениеРНН_БИНГрузополучателя = "";
		РННиБИНГрузополучателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Грузополучатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНГрузополучателя, , Истина);		
		
	    ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ВыборкаПоШапке.Грузополучатель);

		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2, %3",
											РННиБИНГрузополучателя + ТекстНомерНалоговойРегистрации,
											ВыборкаПоШапке.ПредставлениеГрузополучателя,
											КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Грузополучатель, "Юридический"));
		ДанныеПечати.Вставить("ПредставлениеГрузополучателя", ?(ЗначениеЗаполнено(ВыборкаПоШапке.ПредставлениеГрузополучателя), ПредставлениеГрузополучателя, ""));
		ДанныеПечати.Вставить("ПредставлениеРНН_БИНГрузополучателя", ПредставлениеРНН_БИНГрузополучателя);
		
		// Сведения о покупателе
		ДанныеПечати.Вставить("ДоговорСовместнойДеятельности", НЕ РезультатПоСовмДеят.Пустой());
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПечати.ДоговорПокупателя, "ДоговорСовместнойДеятельности,УчастникСРП");
		
		ДанныеПечати.Вставить("УчастникСовместнойДеятельности", РеквизитыДоговора.ДоговорСовместнойДеятельности);
		ДанныеПечати.Вставить("УчастникСРП", РеквизитыДоговора.УчастникСРП);

		Если НЕ ДанныеПечати.ДоговорСовместнойДеятельности Тогда 
			ДанныеПечати.Вставить("Получатель", НСтр("ru='Получатель'", КодЯзыка));
			ДанныеПечати.Вставить("ПредставлениеПокупателя", ВыборкаПоШапке.ПредставлениеПокупателя);
			ДанныеПечати.Вставить("РасчетныйСчетПокупателя", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка), 
																	ВыборкаПоШапке.СчетКонтрагентаНомерСчета,
																	ВыборкаПоШапке.СчетКонтрагентаБанк,
																	ВыборкаПоШапке.СчетКонтрагентаБИК));
			
			ПредставлениеРНН_БИНПокупателя = "";
			РННиБИНПокупателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапке.Покупатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);		
			
			ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ВыборкаПоШапке.Покупатель);

			ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ВыборкаПоШапке.Покупатель);
			АдресЮрКонтрагента             = КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоШапке.Покупатель, "Юридический");
			ДанныеПечати.Вставить("РННИАдресПокупателя", РННиБИНПокупателя 
			+ ?(ЗначениеЗаполнено(ТекстНомерНалоговойРегистрации),", " + ТекстНомерНалоговойРегистрации, "")
			+ ?(ЗначениеЗаполнено(АдресЮрКонтрагента),", " + АдресЮрКонтрагента, ""));
			
			ДанныеПечати.Вставить("ПредставлениеРНН_БИНПокупателя", ПредставлениеРНН_БИНПокупателя);
			
		Иначе 
			ТаблицаПокупателей = РезультатПоСовмДеят.Выгрузить();
			ТаблицаПокупателей.Свернуть("Покупатель, ПредставлениеПокупателя, ПокупательБИН_ИИН, ПокупательРНН");
			
			ТаблицаПокупателейПолная = ТаблицаПокупателей.СкопироватьКолонки();
			ТаблицаПокупателейПолная.Колонки.Добавить("Получатель", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("РННИАдресПокупателя", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("ПредставлениеРНН_БИНПокупателя", Новый ОписаниеТипов("Строка"));
			ТаблицаПокупателейПолная.Колонки.Добавить("РасчетныйСчетПокупателя", Новый ОписаниеТипов("Строка"));
			
			Для Каждого СтрокаТаблицы Из ТаблицаПокупателей Цикл
				НоваяСтрока = ТаблицаПокупателейПолная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				ПредставлениеРНН_БИНПокупателя = "";
				РННиБИНПокупателя = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СтрокаТаблицы.Покупатель, ВыборкаПоШапке.Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);		
				
				ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(СтрокаТаблицы.Покупатель);
				
				НоваяСтрока.РННИАдресПокупателя = РННиБИНПокупателя + ", " + ТекстНомерНалоговойРегистрации + ", " + КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(СтрокаТаблицы.Покупатель, "Юридический");
				НоваяСтрока.ПредставлениеРНН_БИНПокупателя = ПредставлениеРНН_БИНПокупателя;
				
				Если СтрокаТаблицы.Покупатель = ВыборкаПоШапке.ПокупательДляПечати Тогда
					НоваяСтрока.Получатель = НСтр("ru='Получатель'", КодЯзыка);
					НоваяСтрока.РасчетныйСчетПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			НСтр("ru='%1, в банке %2, БИК %3'", КодЯзыка),
																			ВыборкаПоШапке.СчетКонтрагентаНомерСчета,
																			ВыборкаПоШапке.СчетКонтрагентаБанк,
																			ВыборкаПоШапке.СчетКонтрагентаБИК);
				Иначе 
					Если РеквизитыДоговора.ДоговорСовместнойДеятельности Тогда
						НоваяСтрока.Получатель = НСтр("ru='Участник совместной деятельности'", КодЯзыка);
					ИначеЕсли 
						РеквизитыДоговора.УчастникСРП Тогда
						НоваяСтрока.Получатель = НСтр("ru='Участник СРП'", КодЯзыка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДанныеПечати.Вставить("ТаблицаПокупателей", ТаблицаПокупателейПолная);
		КонецЕсли;
		
		ДанныеПечати.Вставить("Валюта", ?(ВВалютеРеглУчета, ВалютаРегламентированногоУчета, ВыборкаПоШапке.ВалютаДокумента));
		  		
		// Сведения о табличных частях
		ВыборкаПоТЧИтоги.Сбросить();
		НайденнаяСтрока = ТаблицаДанныхТаблЧастей.Найти(ВыборкаПоШапке.Ссылка, "Ссылка");
		Если НайденнаяСтрока = Неопределено Тогда
			ДанныеПечати.Вставить("ТаблицыДокумента", Неопределено);
		Иначе 
			ОбщаяТаблицаДляПечати = ТаблицаДанныхТаблЧастей.Скопировать(Новый Структура("Ссылка", ВыборкаПоШапке.Ссылка));
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.
			МассивНайденныхСтрок = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);
			ТаблицаТовары = ОбщаяТаблицаДляПечати.Скопировать(МассивНайденныхСтрок);
			
			МассивКлючейСвязи = ТаблицаТовары.ВыгрузитьКолонку("КлючСвязи");
			МассивКлючейСвязи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКлючейСвязи);
			
			Для Каждого КлючСвязи Из МассивКлючейСвязи Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КлючСвязи", КлючСвязи);
				МассивСтрокСКлючомСвязи = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				
				МассивБазисовРаспределения = Новый Массив;
				Для Каждого СтрокаСКлючомСвязи Из МассивСтрокСКлючомСвязи Цикл
					МассивБазисовРаспределения.Добавить(СтрокаСКлючомСвязи.БазисРаспределения);	
				КонецЦикла;
				
				КоличествоДляРаспределения = МассивСтрокСКлючомСвязи[0].Количество;
				Если КоличествоДляРаспределения <> 0 Тогда
					РаспределенныйКоличество = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(КоличествоДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйКоличество.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Количество = РаспределенныйКоличество[Индекс];
					КонецЦикла;
				КонецЕсли;		
				
				АкцизДляРаспределения = МассивСтрокСКлючомСвязи[0].Акциз;
				Если АкцизДляРаспределения <> 0 Тогда
					РаспределенныйАкциз = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(АкцизДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйАкциз.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Акциз = РаспределенныйАкциз[Индекс];
					КонецЦикла;
				КонецЕсли;
				
				НДСДляРаспределения = МассивСтрокСКлючомСвязи[0].НДС;
				Если НДСДляРаспределения <> 0 Тогда
					РаспределенныйНДС = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(НДСДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйНДС.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].НДС = РаспределенныйНДС[Индекс];
					КонецЦикла;
				КонецЕсли;

				СуммаДляРаспределения = МассивСтрокСКлючомСвязи[0].Сумма;
				Если СуммаДляРаспределения <> 0 Тогда
					РаспределенныйСумма = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаДляРаспределения, МассивБазисовРаспределения);
					Для Индекс = 0 По РаспределенныйСумма.ВГраница() Цикл
						МассивСтрокСКлючомСвязи[Индекс].Сумма = РаспределенныйСумма[Индекс];
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
			// Удалить из ОбщаяТаблицаДляПечати все записи по товарам.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.	
			Пока Истина Цикл
				МассивстрокДляУдаления = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);	
				Если МассивстрокДляУдаления.Количество() = 0 Тогда
					Прервать;
				Иначе
					ОбщаяТаблицаДляПечати.Удалить(МассивстрокДляУдаления[0]);	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
				НоваяСтрока = ОбщаяТаблицаДляПечати.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			КонецЦикла;
			
			// Группировка и сортировка перед выводом.
			ЗапросДляГруппировки = Новый Запрос;
			ЗапросДляГруппировки.Текст =
			"ВЫБРАТЬ
			|	ОбщаяТаблицаДляПечати.ID КАК ID,
			|	ОбщаяТаблицаДляПечати.НомерСтроки КАК НомерСтроки,
			|	ОбщаяТаблицаДляПечати.Номенклатура КАК Номенклатура,
			|	ОбщаяТаблицаДляПечати.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
			|	ОбщаяТаблицаДляПечати.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ОбщаяТаблицаДляПечати.Количество КАК Количество,
			|	ОбщаяТаблицаДляПечати.СтавкаАкциза КАК СтавкаАкциза,
			|	ОбщаяТаблицаДляПечати.СтавкаНДС КАК СтавкаНДС,
			|	ОбщаяТаблицаДляПечати.Цена КАК Цена,
			|	ОбщаяТаблицаДляПечати.Акциз КАК Акциз,
			|	ОбщаяТаблицаДляПечати.НДС КАК НДС,
			|	ОбщаяТаблицаДляПечати.Сумма КАК Сумма,
			|	ОбщаяТаблицаДляПечати.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ(ОбщаяТаблицаДляПечати.ТоварНаименование КАК СТРОКА(1000)) КАК ТоварНаименование,
			|	ОбщаяТаблицаДляПечати.СтавкаНДСДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
			|	ОбщаяТаблицаДляПечати.СтавкаНДСМестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
			|	ОбщаяТаблицаДляПечати.СтавкаНДССтавка КАК СтавкаНДССтавка,
			|	ОбщаяТаблицаДляПечати.НомерГТД КАК НомерГТД,
			|	ОбщаяТаблицаДляПечати.КлючСвязи КАК КлючСвязи,
			|	ОбщаяТаблицаДляПечати.НомерСтрокиТаблицыГТД КАК НомерСтрокиТаблицыГТД,
			|	ОбщаяТаблицаДляПечати.ДатаОборота КАК ДатаОборота
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&ОбщаяТаблицаДляПечати КАК ОбщаяТаблицаДляПечати
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ID КАК ID,
			|	МИНИМУМ(ВТ.НомерСтроки) КАК НомерСтроки,
			|	ВТ.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ.КоэффициентРасчетаОблагаемойБазыАкциза) КАК КоэффициентРасчетаОблагаемойБазыАкциза,
			|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СУММА(ВТ.Количество) КАК Количество,
			|	ВТ.СтавкаАкциза КАК СтавкаАкциза,
			|	ВТ.СтавкаНДС КАК СтавкаНДС,
			|	ВТ.Цена КАК Цена,
			|	СУММА(ВТ.Акциз) КАК Акциз,
			|	СУММА(ВТ.НДС) КАК НДС,
			|	СУММА(ВТ.Сумма) КАК Сумма,
			|	ВТ.Ссылка КАК Ссылка,
			|	ВТ.ТоварНаименование КАК ТоварНаименование,
			|	ВТ.СтавкаНДСДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
			|	ВТ.СтавкаНДСМестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
			|	ВТ.СтавкаНДССтавка КАК СтавкаНДССтавка,
			|	ВТ.НомерГТД КАК НомерГТД,
			|	МИНИМУМ(ВТ.НомерСтрокиТаблицыГТД) КАК НомерСтрокиТаблицыГТД,
			|	ВТ.ДатаОборота КАК ДатаОборота
			|ИЗ
			|	ВТ КАК ВТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ.ID,
			|	ВТ.Номенклатура,
			|	ВТ.ЕдиницаИзмерения,
			|	ВТ.СтавкаАкциза,
			|	ВТ.СтавкаНДС,
			|	ВТ.Цена,
			|	ВТ.Ссылка,
			|	ВТ.ТоварНаименование,
			|	ВТ.СтавкаНДСДляОсвобожденногоОборота,
			|	ВТ.СтавкаНДСМестоРеализацииНеРК,
			|	ВТ.СтавкаНДССтавка,
			|	ВТ.НомерГТД,
			|	ВТ.КлючСвязи,
			|	ВТ.ДатаОборота
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	НомерСтроки,
			|	НомерСтрокиТаблицыГТД";
			
			ЗапросДляГруппировки.УстановитьПараметр("ОбщаяТаблицаДляПечати", ОбщаяТаблицаДляПечати);
			ОбщаяТаблицаДляПечати = ЗапросДляГруппировки.Выполнить().Выгрузить();
			
			УправлениеВзаиморасчетамиСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ОбщаяТаблицаДляПечати, ТаблицаШапкиДокумента.Скопировать(Новый Структура("Ссылка", ВыборкаПоШапке.Ссылка)), Истина);
			
			ТолькоУслуги  = Истина;
			НомерСтроки = 1;
			
			ТаблицыДокумента = ИнициализацияТаблицыСтрокДокументовДляПечати();
			
			Для Каждого СтрокаПечати ИЗ ОбщаяТаблицаДляПечати Цикл
				
				Строчка = ТаблицыДокумента.Добавить();
				Строчка.НомерСтроки         		 = НомерСтроки;
				Строчка.ТоварНаименование   		 = СокрЛП(СтрокаПечати.ТоварНаименование);
				Строчка.ЕдиницаИзмеренияНаименование = ?(СтрокаПечати.ЕдиницаИзмерения = "", "шт", СтрокаПечати.ЕдиницаИзмерения);
				Строчка.Количество 					 = СтрокаПечати.Количество;		
				Строчка.СтавкаАкциза				 = СтрокаПечати.СтавкаАкциза;
				Строчка.НомерГТД			     	 = СтрокаПечати.НомерГТД;
				Строчка.ДатаОборота			     	 = СтрокаПечати.ДатаОборота;
				
				Если ВВалютеРеглУчета Тогда 
					Строчка.СтоимостьБезНДС        	 = СтрокаПечати.Сумма - СтрокаПечати.НДС;
					Если СтрокаПечати.Сумма = Строчка.СтоимостьБезНДС И ВалютаРегламентированногоУчета = ВыборкаПоШапке.ВалютаДокумента Тогда
						Строчка.ЦенаБезНДС  = СтрокаПечати.Цена;
					Иначе
						Строчка.ЦенаБезНДС 				 = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
					КонецЕсли;
					Строчка.СуммаНДС       			 = СтрокаПечати.НДС;		
					Строчка.СуммаАкциза    			 = СтрокаПечати.Акциз;
					Строчка.Всего  					 = СтрокаПечати.Сумма;
				Иначе 
					Строчка.СтоимостьБезНДС          = СтрокаПечати.СуммаВал - СтрокаПечати.НДСВал;
					Если СтрокаПечати.СуммаВал = Строчка.СтоимостьБезНДС Тогда
						Строчка.ЦенаБезНДС           = СтрокаПечати.Цена;						
					Иначе
						Строчка.ЦенаБезНДС 				 = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
					КонецЕсли;  					
					Строчка.СуммаНДС          		 = СтрокаПечати.НДСВал;		
					Строчка.СуммаАкциза        		 = СтрокаПечати.АкцизВал;
					Строчка.Всего    				 = СтрокаПечати.СуммаВал;
				КонецЕсли;
				
				НомерСтроки 						 = НомерСтроки + 1;
				
				Если ЗначениеЗаполнено(СтрокаПечати.СтавкаНДС) Тогда
					Строчка.СтавкаНДС = ?(СтрокаПечати.СтавкаНДСДляОсвобожденногоОборота ИЛИ СтрокаПечати.СтавкаНДСМестоРеализацииНеРК, НСтр("ru='Без НДС'", КодЯзыка), "" + СтрокаПечати.СтавкаНДССтавка + "%");
				КонецЕсли;
				
				Если ТолькоУслуги И ((СтрокаПечати.ID = 1) ИЛИ (СтрокаПечати.ID = 3)) Тогда 
					ТолькоУслуги = ЛОЖЬ;
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеПечати.Вставить("ТаблицыДокумента", ТаблицыДокумента);
			
			ДанныеПечати.Вставить("ИтогоСуммаНДС",			ТаблицыДокумента.Итог("СуммаНДС"));
			ДанныеПечати.Вставить("ИтогоСтоимостьБезНДС", 	ТаблицыДокумента.Итог("СтоимостьБезНДС"));
			ДанныеПечати.Вставить("ИтогоВсего",    			ТаблицыДокумента.Итог("Всего"));
			ДанныеПечати.Вставить("ИтогоСуммаАкциза", 		ТаблицыДокумента.Итог("СуммаАкциза"));
			
			ТТН = "";
			// В случае реализации товаров, заполняем данные о ТТН
			Если НЕ ТолькоУслуги Тогда		
				ТекущийНомер = 1;
				ВыборкаОснованияДетально = Неопределено;
				ВыборкаОснованияИтоги.Сбросить();
				Если ВыборкаОснованияИтоги.НайтиСледующий(ВыборкаПоШапке.Ссылка) Тогда 
					ВыборкаОснованияДетально = ВыборкаОснованияИтоги.Выбрать();
				КонецЕсли;
				
				Если ВыборкаОснованияДетально <> Неопределено Тогда 
					Пока ВыборкаОснованияДетально.Следующий() Цикл
						ПредставлениеДок = "";
						Если ЗначениеЗаполнено(ВыборкаОснованияДетально.ДокументОснование) Тогда
							Попытка
								ПредставлениеДок = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаОснованияДетально.ДокументОснование);
							Исключение
								ПредставлениеДок = Строка(ВыборкаОснованияДетально.ДокументОснование);
							КонецПопытки;
							ТТН 		 = ТТН + ?(ТекущийНомер = 1, "", ", ") + ПредставлениеДок;
							ТекущийНомер = ТекущийНомер + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеПечати.Вставить("ТТН", ТТН);
			
		КонецЕсли;
		
		Если ДанныеПечати.ДоговорСовместнойДеятельности Тогда
			
			ПрефиксПоля  = ?(ВВалютеРеглУчета, "Регл", "ВВалютеДоговора");
			НомерСтроки = 0;
			ТаблицаДолейУчастия = Новый ТаблицаЗначений;
			ТаблицаДолейУчастия.Колонки.Добавить("НомерСтроки");
			ТаблицаДолейУчастия.Колонки.Добавить("УчастникСовместнойДеятельности");
			ТаблицаДолейУчастия.Колонки.Добавить("ДоляУчастия");
			ТаблицаДолейУчастия.Колонки.Добавить("СтоимостьБезНДС");
			ТаблицаДолейУчастия.Колонки.Добавить("СуммаНДС");
			ТаблицаДолейУчастия.Колонки.Добавить("Всего");
			ТаблицаДолейУчастия.Колонки.Добавить("СтавкаАкциза");
			ТаблицаДолейУчастия.Колонки.Добавить("СуммаАкциза");
			ТаблицаДолейУчастия.Колонки.Добавить("СтавкаНДС");
			
			ВыборкаПоСовмДеят = РезультатПоСовмДеят.Выбрать();
			Пока ВыборкаПоСовмДеят.Следующий() Цикл 
				
				НомерСтроки = НомерСтроки + 1;
				НоваяСтрока = ТаблицаДолейУчастия.Добавить();
				
				НоваяСтрока.НомерСтроки		               = НомерСтроки;
				
				//Реквизиты покупателя	
				НоваяСтрока.УчастникСовместнойДеятельности = ВыборкаПоСовмДеят.ПредставлениеПокупателя;
				НоваяСтрока.ДоляУчастия                    = ""+ ВыборкаПоСовмДеят.ДоляУчастия +"/"+ ВыборкаПоСовмДеят.СуммаДолейУчастия;
				НоваяСтрока.СтоимостьБезНДС                = ВыборкаПоСовмДеят["Сумма" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"];
				НоваяСтрока.СуммаНДС                       = ВыборкаПоСовмДеят["СуммаНДС" + ПрефиксПоля + "Оборот"];
				НоваяСтрока.Всего	                       = ВыборкаПоСовмДеят["Сумма" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"] + ВыборкаПоСовмДеят["СуммаНДС" + ПрефиксПоля + "Оборот"];
				
				НоваяСтрока.СтавкаАкциза = ВыборкаПоСовмДеят.СтавкаАкциза;
				НоваяСтрока.СуммаАкциза  = ВыборкаПоСовмДеят["СуммаАкциза" + ПрефиксПоля + "Оборот"];
				
				Если ЗначениеЗаполнено(ВыборкаПоСовмДеят.СтавкаНДС) Тогда
					НоваяСтрока.СтавкаНДС = ?(ВыборкаПоСовмДеят.СтавкаНДСДляОсвобожденногоОборота ИЛИ ВыборкаПоСовмДеят.СтавкаНДСМестоРеализацииНеРК, "Без НДС", "" + ВыборкаПоСовмДеят.СтавкаНДССтавка + "%");
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеПечати.Вставить("ТаблицаСовмДеятельности", ТаблицаДолейУчастия);
			
			ДанныеПечати.Вставить("ИтогоСуммаНДСУч",			ТаблицаДолейУчастия.Итог("СуммаНДС"));
			ДанныеПечати.Вставить("ИтогоСтоимостьБезНДСУч", 	ТаблицаДолейУчастия.Итог("СтоимостьБезНДС"));
			ДанныеПечати.Вставить("ИтогоВсегоУч",    			ТаблицаДолейУчастия.Итог("Всего"));
			ДанныеПечати.Вставить("ИтогоСуммаАкцизаУч", 		ТаблицаДолейУчастия.Итог("СуммаАкциза"));
			
		КонецЕсли;
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ВыборкаПоШапке.СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапке.Дата);
		//заполним уполномоченного за главного бухгалтера для подписи счета-фактуры
		Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера) Тогда
			ДолжностьГлБухгалтера = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность), НСтр("ru='<Должность не указана>: '", КодЯзыка), Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность + ": ");
			ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", ДолжностьГлБухгалтера + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера);
		Иначе
			ДолжностьГлБухгалтера = НСтр("ru='Главный бухгалтер: '", КодЯзыка);
			ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru='Не предусмотрен'", КодЯзыка), Руководители.ГлавныйБухгалтер);
			ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", ДолжностьГлБухгалтера + ГлавныйБухгалтер);
		КонецЕсли;
		
		//заполним уполномоченного за руководителя для подписи счета-фактуры
		Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя) Тогда
			ДолжностьРуководителя = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность), " ", Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность + ": ");
			ДанныеПечати.Вставить("ФИОРуководителя", ДолжностьРуководителя + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя);
		Иначе
			ДолжностьРуководителя = НСтр("ru='Руководитель: '", КодЯзыка);
			ДанныеПечати.Вставить("ФИОРуководителя", ДолжностьРуководителя + Руководители.Руководитель);
		КонецЕсли;  		
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.Исполнитель) Тогда
			ДанныеОтветственногоЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.Исполнитель, ВыборкаПоШапке.Дата);
			ДанныеПечати.Вставить("ФИОИсполнителя", ДанныеОтветственногоЛица.Представление);
			ДанныеПечати.Вставить("ДолжностьИсполнителя", ДанныеОтветственногоЛица.Должность);
		КонецЕсли;		
		
		МассивДанныхДляПечати.Добавить(ДанныеПечати);
		
	КонецЦикла;
	
	Возврат МассивДанныхДляПечати;
	
КонецФункции

Функция ПечатьЭСФ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктуальныеЭСФ.ЭСФ КАК ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивЭСФ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭСФ");
	
	Возврат Документы.ЭСФ.ПечатьЭСФ(МассивЭСФ, ОбъектыПечати);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция НайтиОсновнойСчетФактуру(Объект) Экспорт 
	
	ОсновнойСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	ТекстЗапроса = "";
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта("Ссылка, ДокументОснование, ВидСчетаФактуры");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный")
		ИЛИ ТипЗнч(Объект) = Тип("Структура")
		ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		ДанныеОбъекта = Объект;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование) Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	&Ссылка,
			|	&ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТ_ВремДанныеСчетФактуры"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		Иначе 
			ТекстЗапроса = "ВЫБРАТЬ
			|	&Ссылка,
			|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование
			|ПОМЕСТИТЬ ВТ_ВремДанныеСчетФактуры
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
		
	Иначе 
		// некорректный формат данных
		Возврат ОсновнойСчетФактура;
	КонецЕсли;
	
	Если ДанныеОбъекта.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК СчетФактура,
		|	ТаблицаДокумента.ДокументОснование.ДокументОснование КАК Основание
		|ПОМЕСТИТЬ ВТ_ДанныеСчетФактуры
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК ОсновнойСчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_ДанныеСчетФактуры.Основание
		|			ИЗ
		|				ВТ_ДанныеСчетФактуры КАК ВТ_ДанныеСчетФактуры)
		|	И ТаблицаДокумента.Ссылка <> &Ссылка
		|	И НЕ ТаблицаДокумента.Ссылка В
		|				(ВЫБРАТЬ
		|					СчетаФактурыПрекратившиеДействие.СчетФактура
		|				ИЗ
		|					РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие)";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			Запрос.Текст = ТекстЗапроса + СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "ВТ_ВремДанныеСчетФактуры");
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеОбъекта.ДокументОснование);
			Запрос.УстановитьПараметр("ТаблицаДокумента", ДанныеОбъекта.ДокументыОснования.Выгрузить());
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "Документ.СчетФактураВыданный" + ?(НЕ ЗначениеЗаполнено(ДанныеОбъекта.ДокументОснование), ".ДокументыОснования", ""))
		КонецЕсли;

		Запрос.УстановитьПараметр("Ссылка", ДанныеОбъекта.Ссылка);
		
		СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновнойСчетФактура");
				
		Если СписокСчетовФактур.Количество() = 1 Тогда	
			ОсновнойСчетФактура = СписокСчетовФактур[0];			
		Иначе			
			ТекстСообщения = НСтр("ru = 'В счете-фактуре не удалось заполнить реквизит ""Основной счет-фактура"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеОбъекта.Ссылка, "ОсновнойСчетФактура");
		КонецЕсли;
		
	КонецЕсли;  
	
	Возврат ОсновнойСчетФактура;
	
КонецФункции

Функция ИнициализацияТаблицыСтрокДокументовДляПечати()

	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("НомерСтроки");
	ТаблицаСтрок.Колонки.Добавить("ТоварНаименование");
	ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаСтрок.Колонки.Добавить("Количество");
	ТаблицаСтрок.Колонки.Добавить("ЦенаБезНДС");
	ТаблицаСтрок.Колонки.Добавить("ЦенаБезНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтоимостьБезНДС");
	ТаблицаСтрок.Колонки.Добавить("СтоимостьБезНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтавкаНДС");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДС");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтавкаАкциза");
	ТаблицаСтрок.Колонки.Добавить("СуммаАкциза");
	ТаблицаСтрок.Колонки.Добавить("СуммаАкцизаРегл");
	ТаблицаСтрок.Колонки.Добавить("Всего");
	ТаблицаСтрок.Колонки.Добавить("ВсегоРегл");
	ТаблицаСтрок.Колонки.Добавить("НомерГТД");
	ТаблицаСтрок.Колонки.Добавить("ДатаОборота");
	ТаблицаСтрок.Колонки.Добавить("КодТНВЭД");
	
	Возврат ТаблицаСтрок;
    
КонецФункции

Функция ТекстНомерНалоговойРегистрации(Контрагент)
	
	ЗначениеСтраныТС = Справочники.СтраныУчастникиТаможенногоСоюза.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.СтранаРезидентства КАК СтранаРезидентства,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
	|	СтраныУчастникиТаможенногоСоюза.Ссылка КАК ЗначениеСтраныТС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныУчастникиТаможенногоСоюза КАК СтраныУчастникиТаможенногоСоюза
	|			ПО КлассификаторСтранМира.УчастникТаможенногоСоюза = СтраныУчастникиТаможенногоСоюза.Ссылка
	|		ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтранаРезидентства							 = Выборка.СтранаРезидентства;
		
		ЗначениеСтраныТС							 = Выборка.ЗначениеСтраныТС;
		ЗначениеНомераРегистрацииВСтранеРезидентства = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;	
		
		Если ЗначениеЗаполнено(ЗначениеСтраныТС) И ЗначениеСтраныТС <> Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь 
			И ЗначениеСтраныТС <> Справочники.СтраныУчастникиТаможенногоСоюза.Россия 
			И СтранаРезидентства <> Справочники.КлассификаторСтранМира.Казахстан Тогда
			ТекстНомерНалоговойРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Номер налоговой регистрации в стране резидентства: %1'"),ЗначениеНомераРегистрацииВСтранеРезидентства);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстНомерНалоговойРегистрации;
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
	|	СчетФактураВыданныйТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|ГДЕ
	|	СчетФактураВыданныйТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйУслуги.Номенклатура,
	|	СчетФактураВыданныйУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|ГДЕ
	|	СчетФактураВыданныйУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецЕсли
