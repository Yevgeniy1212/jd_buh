#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВозвратТоваровПоОтчету") Тогда
		ЭтоВозвратОтчета = Истина;
		ДанныеЗаполнения = ДанныеЗаполнения.Основание;
	Иначе 
		ЭтоВозвратОтчета = Ложь;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") Или ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
		ЭтотОбъект.СпособВыставления = Перечисления.СпособыОбменаДокументами.Электронно;					
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения, ЭтоВозвратОтчета);
		
		// Без данного признака не имеет смысла выписка Сч.ф. 
		// Соответственно устанавливаем его даже в случае,если документ выписывается организацией
		// не плательщиком НДС
		Если НЕ УчитыватьНДС Тогда 
			УчитыватьНДС  = Истина;
			СтруктураТЧ   = Новый Структура("Товары, Услуги, ОС, НМА");
			
			ДанныеОбъекта = Новый Структура("Дата, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
			
			ДанныеСтрокиТабличнойЧасти = Новый Структура("СтавкаНДС, Сумма, СуммаНДС, ОборотПоРеализации");

			Для Каждого КлючЗначение Из СтруктураТЧ Цикл
				Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект[КлючЗначение.Ключ] Цикл
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда 
						ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТабличнойЧасти);
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТабличнойЧасти, ДанныеОбъекта);
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТабличнойЧасти);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		УчетНДСИАкциза.ЗаполнитьПоставщикПокупательПоОрганизации(ЭтотОбъект, "Поставщик");
	КонецЕсли;
	
	// Без данного признака не имеет смысла выписка Сч.ф. 
	// Соответственно устанавливаем его даже в случае,если документ выписывается организацией
	// не плательщиком НДС
	УчитыватьНДС = Истина;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);

	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ ДатаОборотаВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("ДатаСовершенияОборотаПоРеализации");
	КонецЕсли;
		
	Если ЭтотОбъект.Товары.Количество() > 0 
		ИЛИ ЭтотОбъект.Услуги.Количество() > 0
		ИЛИ ЭтотОбъект.ОС.Количество() > 0 
		ИЛИ ЭтотОбъект.НМА.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗаписьИзДокументаПодтверждающегоОтгрузку") Тогда
		Если ЭтотОбъект.ДополнительныеСвойства.ЗаписьИзДокументаПодтверждающегоОтгрузку = Истина Тогда
			
			// Проверка будет выполнена ниже.
			МассивНепроверяемыхРеквизитов.Добавить("ОсновнойСчетФактура");
			
			// Если реквизит ОсновнойСчетФактура будет пустым,
			// то будет показано сообщение, но отказ от проведения не произойдет,
			// так как иначе не удастся записать документ отгрузки или поступления.			
			Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный
			 ИЛИ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ОсновнойСчетФактура) Тогда					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Основной счет-фактура"" не заполнено.'"), ЭтотОбъект.Ссылка, "ОсновнойСчетФактура")					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры <> Перечисления.ВидыСчетовФактур.Дополнительный
		И ВидСчетаФактуры <> Перечисления.ВидыСчетовФактур.Исправленный Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОсновнойСчетФактура");
		
	КонецЕсли;	
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СтавкаНДС");
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ПодтвержденДокументамиОтгрузки И ДокументыОснования.Количество() > 1 Тогда 
		ПроверитьРеквизитыДокументовОснований(Отказ);
	КонецЕсли;
	
	Если УчитыватьАкциз Тогда
		ВыполнитьПроверкиСвязанныеСАкцизомВТабличнойЧасти(Товары, "Товары", Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		Если  НЕ ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") 
			ИЛИ (ДополнительныеСвойства.Свойство("ВыполненаПроверкаЗаполнения") И НЕ ДополнительныеСвойства.ВыполненаПроверкаЗаполнения) Тогда 
			
			Отказ = НЕ ПроверитьЗаполнение();
		КонецЕсли;
		
		Если Не Отказ Тогда
			ПроверитьЗаполнениеИсточниковПроисхождения(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		ПодтвержденДокументамиОтгрузки = Ложь;
	КонецЕсли;
	
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);

	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
	
	Документы.СчетФактураВыданный.ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
	
	ЭСФСервер.ПередЗаписьюСчетаФактуры(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.СчетФактураВыданный.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Документы.СчетФактураВыданный.ПроверитьВозможностьПроведения(ЭтотОбъект, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		МассивСФПрекратившихДействие = Новый Массив;
		Документы.СчетФактураВыданный.ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(ЭтотОбъект, МассивСФПрекратившихДействие);
		Документы.СчетФактураВыданный.ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(ЭтотОбъект, МассивСФПрекратившихДействие);
	КонецЕсли;
	
	ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
	
	// Если вдруг не удалось получить параметры проведения и не установлен флаг Отказ, то просто выйдем из проведения
	Если ПараметрыПроведения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ПараметрыПроведения.СчетФактураВыданныйТаблицаТовары.Количество() <> 0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияСчетФактураВыданный(ПараметрыПроведения.СчетФактураВыданныйТаблицаТовары,
			ПараметрыПроведения.СчетФактураВыданныйРеквизиты, Движения, Отказ);
	КонецЕсли;
	
	Если ПараметрыПроведения.СчетФактураВыданныйТаблицаУслуги.Количество() <> 0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияСчетФактураВыданный(ПараметрыПроведения.СчетФактураВыданныйТаблицаУслуги,
			ПараметрыПроведения.СчетФактураВыданныйРеквизиты, Движения, Отказ);
	КонецЕсли;
	
	Если ПараметрыПроведения.СчетФактураВыданныйТаблицаОС.Количество() <> 0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияСчетФактураВыданный(ПараметрыПроведения.СчетФактураВыданныйТаблицаОС,
			ПараметрыПроведения.СчетФактураВыданныйРеквизиты, Движения, Отказ);
	КонецЕсли;
	
	Если ПараметрыПроведения.СчетФактураВыданныйТаблицаНМА.Количество() <> 0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияСчетФактураВыданный(ПараметрыПроведения.СчетФактураВыданныйТаблицаНМА,
			ПараметрыПроведения.СчетФактураВыданныйРеквизиты, Движения, Отказ);
	КонецЕсли;
	
			
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Документы.СчетФактураВыданный.ПроверитьВозможностьОтменыПроведения(ЭтотОбъект, Отказ);
	
	Если НЕ Отказ Тогда
		ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЭСФСервер.ОбновитьСторнирующиеДокументы(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание, ЭтоВозвратОтчета = Ложь) Экспорт
	
	Документы.СчетФактураВыданный.ЗаполнитьПоДокументуОснования(ЭтотОбъект, Основание, ЭтоВозвратОтчета);

КонецПроцедуры

Процедура ПроверитьРеквизитыДокументовОснований(Отказ)
	
	ТекстЗапросаШаблон = "
	|
	|ВЫБРАТЬ 
	|	Док.Ссылка,
	|	%1,
	|	%2,
	|	%3
	|ИЗ
	|	Документ.%4 КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОснований)
	|";
	
	ТекстОбъединения = "
	|ОБЪЕДИНИТЬ ВСЕ";
	
	МассивОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование", Истина);
	МассивТиповОснований = Новый Массив;
	
	ПерваяТаблица = Истина;
	ТекстЗапроса = "";
	Для Каждого ТекОснование Из МассивОснований Цикл
		
		ТипЗначенияОснования = ТипЗнч(ТекОснование);
		Если МассивТиповОснований.Найти(ТипЗначенияОснования) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивТиповОснований.Добавить(ТипЗначенияОснования);

		МетаданныеДокументаОснования = ТекОснование.Метаданные();
		ЕстьРеквизитКонтрагент 		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования);
		ЕстьРеквизитДоговор 		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования);
		ЕстьРеквизитВалютаДокумента  = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования);
		
		Если НЕ ПерваяТаблица Тогда 
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		КонецЕсли;
		ПерваяТаблица = Ложь;
		
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ТекстЗапросаШаблон,
											?(ЕстьРеквизитКонтрагент, "Док.Контрагент", "НЕОПРЕДЕЛЕНО"),
											?(ЕстьРеквизитДоговор, "Док.ДоговорКонтрагента", "НЕОПРЕДЕЛЕНО"),
											?(ЕстьРеквизитВалютаДокумента, "Док.ВалютаДокумента", "НЕОПРЕДЕЛЕНО"),
											МетаданныеДокументаОснования.Имя);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого СтрокаТабличнойЧасти Из ДокументыОснования Цикл
		
		Если НЕ Выборка.НайтиСледующий(СтрокаТабличнойЧасти.ДокументОснование) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ Выборка.Контрагент = Неопределено И Контрагент <> Выборка.Контрагент Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", 
				"Корректность", 
				НСтр("ru='Документ-основание'"), 
				СтрокаТабличнойЧасти.НомерСтроки, 
				НСтр("ru='Документы-основания'"), 
				НСтр("ru='Значение контрагента не соответствует значению, установленному в счете-фактуре'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"ДокументыОснования[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДокументОснование",
				,
				Отказ);
		КонецЕсли;
		
		Если НЕ Выборка.ДоговорКонтрагента = Неопределено И ДоговорКонтрагента <> Выборка.ДоговорКонтрагента Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", 
				"Корректность", 
				НСтр("ru='Документ-основание'"), 
				СтрокаТабличнойЧасти.НомерСтроки, 
				НСтр("ru='Документы-основания'"), 
				НСтр("ru='Значение договора контрагента не соответствует значению, установленному в счете-фактуре'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"ДокументыОснования[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДокументОснование",
				,
				Отказ);
		КонецЕсли;
		
		Если НЕ Выборка.ВалютаДокумента = Неопределено И ВалютаДокумента <> Выборка.ВалютаДокумента Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", 
				"Корректность", 
				НСтр("ru='Документ-основание'"), 
				СтрокаТабличнойЧасти.НомерСтроки, 
				НСтр("ru='Документы-основания'"), 
				НСтр("ru='Значение валюты документа не соответствует значению, установленному в счете-фактуре'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"ДокументыОснования[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДокументОснование",
				,
				Отказ);
		КонецЕсли;
		
		Выборка.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиСвязанныеСАкцизомВТабличнойЧасти(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ)
	
	Если ПроверяемаяТабличнаячасть.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокумента", ПроверяемаяТабличнаячасть);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.СтавкаАкциза
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НомерСтроки,
	|	ВТ_ТаблицаДокумента.Номенклатура,
	|	ВТ_ТаблицаДокумента.СтавкаАкциза,
	|	СправочникНоменклатура.ВидПодакцизногоТМЗ,
	|	ЕстьNULL(СтавкиАкциза.Ставка, 0) КАК Ставка
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ТаблицаДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиАкциза КАК СтавкиАкциза
	|		ПО ВТ_ТаблицаДокумента.СтавкаАкциза = СтавкиАкциза.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(Выборка.ВидПодакцизногоТМЗ) И НЕ ЗначениеЗаполнено(Выборка.СтавкаАкциза) Тогда 
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Ставка акциза'"),
				Выборка.НомерСтроки, ?(ИмяТабличнойЧасти = "Товары", НСтр("ru='ТМЗ'"), ИмяТабличнойЧасти));
			Поле = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СтавкаАкциза";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидПодакцизногоТМЗ) И ЗначениеЗаполнено(Выборка.СтавкаАкциза) Тогда 
			ТекстСообщения = НСтр("ru='Необходимо очистить ставку акциза или указать ""Вид подакцизного товара"" у номенклатуры'");
			Поле = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СтавкаАкциза";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИсточниковПроисхождения(Отказ)
	
	Если НЕ НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ДатаСовершенияОборотаПоРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоРахождениямТоваровИНомеровГТД = НомераГТДСервер.ИзмениласьТЧТоварыОтносительноТЧНомеровГТД(Товары, НомераГТД);
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоРахождениямТоваровИНомеровГТД Цикл
		
		СтрокаТоваров = Товары.Найти(СтрокаТабличнойЧасти.НомерСтроки, "НомерСтроки");
		
		Если СтрокаТоваров = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Поле = "Товары[" + Формат(СтрокаТоваров.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
		
		КоличествоРазницы = ?(ВидСчетаФактуры =  Перечисления.ВидыСчетовФактур.Дополнительный, -1*(СтрокаТабличнойЧасти.Количество),(СтрокаТабличнойЧасти.Количество));
		
		Если КоличествоРазницы > 0  Тогда 
			ТекстСообщения = НСтр("ru = 'Для номенклатуры <%1> не заполнен источник происхождения в количестве %2 %3. Документ: ""%4"".'");	
			КоличествоРазницы = СтрокаТабличнойЧасти.Количество;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для номенклатуры <%1> количество, указанное в источниках происхождениях, превышает на %2 %3. Документ: ""%4"".'");
			КоличествоРазницы = ?(НЕ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный, -1*(СтрокаТабличнойЧасти.Количество),(СтрокаТабличнойЧасти.Количество));
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура, КоличествоРазницы, СтрокаТоваров.ЕдиницаИзмерения, ЭтотОбъект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
		
		//// Если в табличной части ДокументыОснования указано несколько реализаций,
		//// то в первой табличная часть НомераГТД будет заполнена, а во второй она может быть не заполнена,
		//// такое возможно, если дата начала использования ТоварыОрганизацийБУ была установлена после того, как пользователь создал документы.
		//Если ЭтотОбъект.ДокументыОснования.Количество() = 1 Тогда
		//	Отказ = Истина;
		//КонецЕсли;
		//
	КонецЦикла;

КонецПроцедуры 

#КонецЕсли
