&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем БыстроеОбновлениеДанных;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Коннект.Видимость = ПоказыватьКомандуКоннект();
		
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБКВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	РеквизитыОрганизации = Организация; // Ссылка, отображаемая при однофирменном учете
	Элементы.РеквизитыОрганизации.Видимость = Ложь; // Видимость управляется функциональными опциями
	
	ВариантОкругления = 1;
	
	ПоказыватьСравнениеСПрошлымГодом = ПоказыватьСравнениеСПрошлымГодом(Организация);
	
	ДанныеАктуальны = Истина;
	
	// Инициализация таблицы настроек
	ИнформационнаяПанель.ДобавитьПредопределенныеБлоки(ТаблицаБлоков);
	
	// Накладываем пользовательские настройки
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков);
	
	РасставитьБлоки();
	
	ПрочитатьДанныеБлоков();
	
	УправлениеБлокомПокупателиПриСозданииНаСервере();
	УправлениеБлокомПоставщикиПриСозданииНаСервере();
	УправлениеБлокомПоддержкаСервисаПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗадержкаПередЗапускомФоновыхЗаданий = 16;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ЗадержкаПередЗапускомФоновыхЗаданий, Истина);
	
	// Запланируем обновление на завтра
	Интервал = Макс(ИнтервалОбновленияДанных(ТекущаяДата()), ЗадержкаПередЗапускомФоновыхЗаданий);
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", Интервал, Истина);
	
	ЗапуститьПереключениеНовостей();
	
	ТекущийЭлемент = Элементы.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		Если Организация <> Параметр Тогда
			Организация = Параметр;
			ОрганизацияОбработатьИзменение();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаИнформационнойПанели" Тогда
		
		НастройкаИнформационнойПанелиПриИзменении();
		
		// Полное обновление всех блоков
		БыстроеОбновление = Ложь;
		ПрочитатьДанныеСтатическихБлоков = Истина;
		ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
		
		ЗапуститьПереключениеНовостей();
		
	ИначеЕсли ИмяСобытия = "ПериодическиеПлатежи_Изменение"
		ИЛИ ИмяСобытия = "СписокЗадачБухгалтера_Изменение" Тогда
		
		// Изменение данных блока задачи
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи();
		
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Новости. Новость прочтена"
		Или   ИмяСобытия = "Новости. Изменена прочтенность списка новостей"
		Или   ИмяСобытия = "Новости. Загружены новости" Тогда
		
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости();
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ДобавитьБлокИнформационнойПанели" Тогда
		
		ИмяБлока = Строка(Параметр);
		
		Если ДобавитьБлок(ИмяБлока) Тогда
			
			РасставитьБлоки();
			
			// Полное обновление всех блоков
			БыстроеОбновление = Ложь;
			ПрочитатьДанныеСтатическихБлоков = Истина;
			ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
			
			ЗапуститьПереключениеНовостей();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		// При записи новой организации необходимо добавить ее в список доступных организаций.
		ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);
		
	ИначеЕсли ИмяСобытия = "ИзменениеПоказыватьСчетаУчетаВДокументах" Тогда
		
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМетодическаяПоддержка();
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьУчетнуюЗапись"
		Или ИмяСобытия = "Изменение признака прочтенности"
		Или ИмяСобытия = "Получены новые сообщения 1С-Отчетности" Тогда
		// Если подключена 1С-Отчетность - обновляем виджет
		// Если изменился признак прочтенности у объекта - обновляем виджет
		// Если получены новые сообщения 1С-Отчетности - обновляем виджет
		
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОтчетность();
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияОбработатьИзменение();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказыватьКомандуКоннект()
	
	// ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект
	НастройкиПользователя = ИнтеграцияСКоннект.НастройкиИнтеграции();
	
	Возврат НастройкиПользователя.ОтображатьКнопкуЗапуска;
	// Конец ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройка(Команда)
	
	СписокБлоков = Новый СписокЗначений;
	Для Каждого Блок Из ТаблицаБлоков Цикл
		СписокБлоков.Добавить(Блок.Имя, Блок.Синоним, Блок.Пометка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокБлоков", СписокБлоков);
	
	ОткрытьФорму("ОбщаяФорма.ИнформационнаяПанельНастройка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	// Быстрое обновление динамических блоков
	БыстроеОбновление = Истина;
	ПрочитатьДанныеСтатическихБлоков = Ложь;
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВызовОнлайнПоддержки
&НаКлиенте
Процедура Коннект(Команда)
	
	ИнтеграцияСКоннектКлиент.СвязатьсяСоСпециалистом();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВызовОнлайнПоддержки

#КонецОбласти

#Область Задачи

&НаКлиенте
Процедура ЗадачиВсеЗадачиНажатие(Элемент)
	
	
КонецПроцедуры

#КонецОбласти


#Область Отчетность

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомОтчетность(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Покупатели.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ОтчетностьПодключена = Форма.Отчетность_ОтчетностьПодключена;
	
	Элементы.ГруппаОтчетностьНеПодключена.Видимость = Не ОтчетностьПодключена;
	Элементы.ГруппаОтчетность.Видимость       = ОтчетностьПодключена;
	Элементы.ОтчетностьВсеСообщения.Видимость = ОтчетностьПодключена;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьВсеСообщенияНажатие(Элемент)
	
	//ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.Открыть1СОтчетностьНаЗакладкеНовое();
	
КонецПроцедуры

&НаКлиенте
Процедура Отчетность_НеПодключенаСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ConnectReporting" Тогда
		СтандартнаяОбработка = Ложь;
		//ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиДенежныхСредств

&НаКлиенте
Процедура ОстаткиДенежныхСредствВсеОстаткиНажатие(Элемент)
	
	ГруппировкаПоВидуДенежныхСредств = Новый Структура;
	ГруппировкаПоВидуДенежныхСредств.Вставить("Поле",          "ВидДенежныхСредств");
	ГруппировкаПоВидуДенежныхСредств.Вставить("Представление",  НСтр("ru = 'Вид денежных средств'"));
	ГруппировкаПоВидуДенежныхСредств.Вставить("Использование",  Истина);
	ГруппировкаПоВидуДенежныхСредств.Вставить("ТипГруппировки", 0);
	
	ГруппировкаПоРазмещению = Новый Структура;
	ГруппировкаПоРазмещению.Вставить("Поле",           "Аналитика");
	ГруппировкаПоРазмещению.Вставить("Представление",  НСтр("ru = 'Аналитика'"));
	ГруппировкаПоРазмещению.Вставить("Использование",  Истина);
	ГруппировкаПоРазмещению.Вставить("ТипГруппировки", 0);
	
	ГруппировкаВалюта = Новый Структура;
	ГруппировкаВалюта.Вставить("Поле",           "Валюта");
	ГруппировкаВалюта.Вставить("Представление",  НСтр("ru = 'Валюта'"));
	ГруппировкаВалюта.Вставить("Использование",  Истина);
	ГруппировкаВалюта.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаПоВидуДенежныхСредств);
	ГруппировкиОтчета.Добавить(ГруппировкаПоРазмещению);
	
	ГруппировкаКолонки = Новый Массив;
	ГруппировкаКолонки.Добавить(ГруппировкаВалюта);
	
	ОтбораПоВидуДенежныхСредств = Новый Структура;
	ОтбораПоВидуДенежныхСредств.Вставить("Поле"        , "ВидДенежныхСредств");
	ОтбораПоВидуДенежныхСредств.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);
	ОтбораПоВидуДенежныхСредств.Вставить("Значение"    , НСтр("ru = 'Деньги у подотчетных лиц'"));
	
	ОтборыОтчета = Новый Массив;
	ОтборыОтчета.Добавить(ОтбораПоВидуДенежныхСредств);
	
	ОткрытьОтчет("Отчет.ОстаткиДенежныхСредств.Форма", ГруппировкиОтчета, ОтборыОтчета, , , , , ГруппировкаКолонки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомОстаткиДенежныхСредств(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ОстаткиДенежныхСредств.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	ИндексИтогов = Форма.ОстаткиДенежныхСредств_ИндексИтога;
	
	БезРамки = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Если ИндексИтогов = 0 Тогда
		
		ЧертаСверху = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		
		Элементы.ОстаткиДенежныхСредств_Остаток0.Рамка = ЧертаСверху; // Черта над итоговой строкой
		Для Индекс = 1 По ВГраница Цикл
			ЭлементФормы = Элементы[СтрШаблон("ОстаткиДенежныхСредств_Остаток%1", Индекс)];
			ЭлементФормы.Рамка = БезРамки;
		КонецЦикла;
		
	Иначе
		
		// Подчеркиваем элемент, расположенный над итоговой строкой
		
		Подчеркивание = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание);
		
		ЭлементСверху = Элементы.ОстаткиДенежныхСредств_Банк;
		Для Индекс = 0 По ВГраница Цикл
			ЭлементСверху.Рамка = ?(Индекс = ИндексИтогов, Подчеркивание, БезРамки);
			ЭлементСверху = Элементы[СтрШаблон("ОстаткиДенежныхСредств_Остаток%1", Индекс)];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Покупатели

&НаКлиенте
Процедура ПокупателиЗадолженностьНажатие(Элемент)
	
	ГруппировкаКонтрагенты = Новый Структура;
	ГруппировкаКонтрагенты.Вставить("Поле",           "Контрагент");
	ГруппировкаКонтрагенты.Вставить("Представление",  НСтр("ru = 'Контрагент'"));
	ГруппировкаКонтрагенты.Вставить("Использование",  Истина);
	ГруппировкаКонтрагенты.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаКонтрагенты);
	
	КлючВарианта = "Основной";
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателей.Форма", ГруппировкиОтчета, , , КлючВарианта, НачалоМесяца(Период), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПросроченнаяЗадолженностьНажатие(Элемент)
	
	Интервал7 = Новый Структура;
	Интервал7.Вставить("Значение"            , 7);
	Интервал7.Вставить("ИсходныйНомерСтроки" , 1);
	Интервал7.Вставить("НомерСтроки	"        , 1);
	Интервал7.Вставить("Представление"       , НСтр("ru = 'До 7 дней'"));
	
	Интервал15 = Новый Структура;
	Интервал15.Вставить("Значение"           , 15);
	Интервал15.Вставить("ИсходныйНомерСтроки", 2);
	Интервал15.Вставить("НомерСтроки"        , 2);
	Интервал15.Вставить("Представление"      , НСтр("ru = 'От 8 До 15 дней'"));
	
	Интервал30 = Новый Структура;
	Интервал30.Вставить("Значение"           , 30);
	Интервал30.Вставить("ИсходныйНомерСтроки", 3);
	Интервал30.Вставить("НомерСтроки"        , 3);
	Интервал30.Вставить("Представление"      , НСтр("ru = 'От 16 До 30 дней'"));
	
	Интервал60 = Новый Структура;
	Интервал60.Вставить("Значение"           , 60);
	Интервал60.Вставить("ИсходныйНомерСтроки", 4);
	Интервал60.Вставить("НомерСтроки"        , 4);
	Интервал60.Вставить("Представление"      , НСтр("ru = 'От 31 До 60 дней'"));
	
	Интервал90 = Новый Структура;
	Интервал90.Вставить("Значение"           , 90);
	Интервал90.Вставить("ИсходныйНомерСтроки", 5);
	Интервал90.Вставить("НомерСтроки"        , 5);
	Интервал90.Вставить("Представление"      , НСтр("ru = 'От 61 До 90 дней'"));
	
	ГруппировкаИнтервалы = Новый Массив;
	ГруппировкаИнтервалы.Добавить(Интервал7);
	ГруппировкаИнтервалы.Добавить(Интервал15);
	ГруппировкаИнтервалы.Добавить(Интервал30);
	ГруппировкаИнтервалы.Добавить(Интервал60);
	ГруппировкаИнтервалы.Добавить(Интервал90);
	
	ГруппировкаКонтрагенты = Новый Структура;
	ГруппировкаКонтрагенты.Вставить("Поле"          , "Контрагент");
	ГруппировкаКонтрагенты.Вставить("Представление" , НСтр("ru = 'Покупатель'"));
	ГруппировкаКонтрагенты.Вставить("Использование" , Истина);
	ГруппировкаКонтрагенты.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаКонтрагенты);	
	
	КлючВарианта = "Основной";
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателейПоСрокамДолга.Форма.ФормаОтчета", ГруппировкиОтчета, , , КлючВарианта, НачалоМесяца(Период), Период, ,ГруппировкаИнтервалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиНеоплаченныеСчетаНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.АнализНеоплаченныхСчетовПокупателям.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчет(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАкт(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладную(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеБлокомПокупателиПриСозданииНаСервере()
	
	Если Покупатели_ДоступностьРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Счет.Видимость = Покупатели_ДоступностьРазделов.СозданиеСчета;
	Элементы.Акт.Видимость       = Ложь;
	Элементы.Накладная.Видимость = Покупатели_ДоступностьРазделов.СозданиеРеализации;
	
	ПоказыватьПокупателиЗадолженность = Покупатели_ДоступностьРазделов.ЗадолженностьПокупателей;
	Элементы.ГруппаПокупателиЗадолженность.Видимость = ПоказыватьПокупателиЗадолженность;
	
	ПоказыватьПокупателиПросрочено = Покупатели_ДоступностьРазделов.ЗадолженностьПокупателейПоСрокамДолга;
	Элементы.ГруппаПокупателиПросрочено.Видимость = ПоказыватьПокупателиПросрочено;
	
	ПоказыватьПокупателиНеоплаченныеСчета = Покупатели_ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	Элементы.ГруппаПокупателиНеоплаченныеСчета.Видимость = ПоказыватьПокупателиНеоплаченныеСчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПокупатели(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Покупатели.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	Элементы.Покупатели_ЗадолженностьОтклонение.Видимость             = ПоказыватьСравнениеСПрошлымГодом;
	Элементы.Покупатели_ПросроченнаяЗадолженностьОтклонение.Видимость = ПоказыватьСравнениеСПрошлымГодом;
	
КонецПроцедуры

#КонецОбласти

#Область Поставщики

&НаКлиенте
Процедура ПоставщикиЗадолженностьНажатие(Элемент)
	
	ГруппировкаКонтрагенты = Новый Структура;
	ГруппировкаКонтрагенты.Вставить("Поле"          , "Контрагент");
	ГруппировкаКонтрагенты.Вставить("Представление" , НСтр("ru = 'Контрагент'"));
	ГруппировкаКонтрагенты.Вставить("Использование" , Истина);
	ГруппировкаКонтрагенты.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаКонтрагенты);
	
	КлючВарианта = "Основной";
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикам.Форма", ГруппировкиОтчета, , , КлючВарианта, НачалоМесяца(Период), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПросроченнаяЗадолженностьНажатие(Элемент)
	
	Интервал7 = Новый Структура;
	Интервал7.Вставить("Значение"            , 7);
	Интервал7.Вставить("ИсходныйНомерСтроки" , 1);
	Интервал7.Вставить("НомерСтроки	"        , 1);
	Интервал7.Вставить("Представление"       , НСтр("ru = 'До 7 дней'"));
	
	Интервал15 = Новый Структура;
	Интервал15.Вставить("Значение"           , 15);
	Интервал15.Вставить("ИсходныйНомерСтроки", 2);
	Интервал15.Вставить("НомерСтроки"        , 2);
	Интервал15.Вставить("Представление"      , НСтр("ru = 'От 8 До 15 дней'"));
	
	Интервал30 = Новый Структура;
	Интервал30.Вставить("Значение"           , 30);
	Интервал30.Вставить("ИсходныйНомерСтроки", 3);
	Интервал30.Вставить("НомерСтроки"        , 3);
	Интервал30.Вставить("Представление"      , НСтр("ru = 'От 16 До 30 дней'"));
	
	Интервал60 = Новый Структура;
	Интервал60.Вставить("Значение"           , 60);
	Интервал60.Вставить("ИсходныйНомерСтроки", 4);
	Интервал60.Вставить("НомерСтроки"        , 4);
	Интервал60.Вставить("Представление"      , НСтр("ru = 'От 31 До 60 дней'"));
	
	Интервал90 = Новый Структура;
	Интервал90.Вставить("Значение"           , 90);
	Интервал90.Вставить("ИсходныйНомерСтроки", 5);
	Интервал90.Вставить("НомерСтроки"        , 5);
	Интервал90.Вставить("Представление"      , НСтр("ru = 'От 61 До 90 дней'"));
	
	ГруппировкаИнтервалы = Новый Массив;
	ГруппировкаИнтервалы.Добавить(Интервал7);
	ГруппировкаИнтервалы.Добавить(Интервал15);
	ГруппировкаИнтервалы.Добавить(Интервал30);
	ГруппировкаИнтервалы.Добавить(Интервал60);
	ГруппировкаИнтервалы.Добавить(Интервал90);
	
	ГруппировкаКонтрагенты = Новый Структура;
	ГруппировкаКонтрагенты.Вставить("Поле"          , "Контрагент");
	ГруппировкаКонтрагенты.Вставить("Представление" , НСтр("ru = 'Поставщик'"));
	ГруппировкаКонтрагенты.Вставить("Использование" , Истина);
	ГруппировкаКонтрагенты.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаКонтрагенты);	
	
	КлючВарианта = "Основной";
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикамПоСрокамДолга.Форма.ФормаОтчета", ГруппировкиОтчета, , , КлючВарианта, НачалоМесяца(Период), Период, ,ГруппировкаИнтервалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиНеоплаченныеСчетаНажатие(Элемент)
	
	КлючВарианта = "АнализНеоплаченныхСчетовПоставщиков";
	
	ОткрытьОтчет("Отчет.АнализНеоплаченныхСчетовПоставщиков.Форма", , , , КлючВарианта);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеБлокомПоставщикиПриСозданииНаСервере()
	
	Если Поставщики_ДоступностьРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказыватьПоставщикиЗадолженность = Поставщики_ДоступностьРазделов.ЗадолженностьПоставщикам;
	Элементы.ГруппаПоставщикиЗадолженность.Видимость = ПоказыватьПоставщикиЗадолженность;
	
	ПоказыватьПоставщикиПросрочено = Поставщики_ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга;
	Элементы.ГруппаПоставщикиПросрочено.Видимость = ПоказыватьПоставщикиПросрочено;
	
	ПоказыватьПоставщикиНеоплаченныеСчета = Поставщики_ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	Элементы.ГруппаПоставщикиНеоплаченныеСчета.Видимость = ПоказыватьПоставщикиНеоплаченныеСчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПоставщики(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Поставщики.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	Элементы.Поставщики_ЗадолженностьОтклонение.Видимость            = ПоказыватьСравнениеСПрошлымГодом;
	Элементы.Поставщки_ПросроченнаяЗадолженностьОтклонение.Видимость = ПоказыватьСравнениеСПрошлымГодом;
	
КонецПроцедуры

#КонецОбласти

#Область Продажи

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПродажи(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Продажи.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		ОтклонениеПродаж = БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
		Элементы[ОтклонениеПродаж].Видимость = ПоказыватьСравнениеСПрошлымГодом;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период0ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца() Тогда
		
		КонецПериода  = КонецДня(Период);
		НачалоПериода = НачалоМесяца(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода() Тогда
		
		КонецПериода  = КонецДня(Период);
		НачалоПериода = НачалоГода(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца() Тогда
		
		КонецПериода  = КонецМесяца(ДобавитьМесяц(Период, -1));
		НачалоПериода = НачалоМесяца(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода() Тогда
		
		КонецПериода  = КонецМесяца(ДобавитьМесяц(Период, -1));
		НачалоПериода = НачалоГода(КонецПериода);
		
	КонецЕсли;
	
	КлючВарианта = "ПродажиПоКонтрагентам";
	
	ОткрытьОтчет("Отчет.Продажи.Форма", , , , КлючВарианта, НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

&НаКлиенте
Процедура НовостиВсеНовостиНажатие(Элемент)
	
	ИмяФормыНовостей = "Справочник.Новости.Форма.ФормаКонтекстныхНовостей";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМетаданных",                 "ИнформационнаяПанель");
	ПараметрыФормы.Вставить("ЗаголовокФормы",                НСтр("ru = 'Новости'"));
	ПараметрыФормы.Вставить("РежимОткрытияОкна",             "Независимый");
	ПараметрыФормы.Вставить("ПропуститьЗаполнениеНовостями", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуЛентаНовостей",  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуПодзаголовок",   Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуДатаПубликации", Истина);
	ПараметрыФормы.Вставить("ПоказыватьПанельНавигации",     Ложь);
	
	ОткрытьФорму(ИмяФормыНовостей, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Новости_НовостьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СсылкиНовостей.Количество() > Новости_Индекс Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Новость = СсылкиНовостей[Новости_Индекс].Значение;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Ключ", Новость);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца");
		
		ОбработкаНовостейКлиент.ПоказатьНовость(Новость, ПараметрыОткрытияФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Новости_ПереключательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексЭлементаФормы(Элемент.Имя);
	Если Индекс <> Неопределено Тогда
		ПоказатьНовость(Индекс);
	КонецЕсли;
	
	// Перезапускаем обработчик ожидания
	ЗапуститьПереключениеНовостей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереключениеНовостей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей");
	Если БлокВключен(БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости()) И ТекстыНовостей.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей", БлокиИнформационнойПанелиКлиентСервер.ИнтервалПереключенияНовостей());
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключениеНовостей()
	
	ВГраницаИндекса = ТекстыНовостей.Количество() - 1;
	Если 0 <= Новости_Индекс И Новости_Индекс < ВГраницаИндекса Тогда
		ИндексНовости = Новости_Индекс + 1;
	Иначе
		ИндексНовости = 0;
	КонецЕсли;
	
	ПоказатьНовость(ИндексНовости);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНовость(ИндексНовости)
	
	Если ТекстыНовостей.Количество() > ИндексНовости Тогда
		Новости_Индекс = ИндексНовости;
		Новости_Текст  = ТекстыНовостей[ИндексНовости].Значение;
	Иначе
		Новости_Индекс = 0;
		Новости_Текст  = БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияНовостей();
	КонецЕсли;
	
	УправлениеБлокомНовости(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомНовости(Форма)
	
	Элементы = Форма.Элементы;
	
	КоличествоНовостей = Форма.ТекстыНовостей.Количество();
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		
		ИмяПереключателя = БлокиИнформационнойПанелиКлиентСервер.СвойствоПереключатель(Индекс);
		
		ПереключательДоступен = (Индекс < КоличествоНовостей);
		Элементы[ИмяПереключателя].Доступность = ПереключательДоступен;
		
		Если ПереключательДоступен Тогда
			АктивностьПереключателя = (Индекс = Форма.Новости_Индекс);
			Форма[ИмяПереключателя] = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиПереключателя(АктивностьПереключателя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНовостей()
	
	Если ПустаяСтрока(Новости_АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыНовостей.Очистить();
	СсылкиНовостей.Очистить();
	
	Если ЭтоАдресВременногоХранилища(Новости_АдресХранилища) Тогда
		
		ДанныеНовостей = ПолучитьИзВременногоХранилища(Новости_АдресХранилища);
		Если ТипЗнч(ДанныеНовостей) = Тип("Структура") Тогда
			Для Каждого ТекстНовости Из ДанныеНовостей.ТекстыНовостей Цикл
				ТекстыНовостей.Добавить(ТекстНовости.Значение);
			КонецЦикла;
			Для Каждого СсылкаНовости Из ДанныеНовостей.СсылкиНовостей Цикл
				СсылкиНовостей.Добавить(СсылкаНовости.Значение);
			КонецЦикла;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(Новости_АдресХранилища);
		Новости_АдресХранилища = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоддержкаСервиса

&НаСервере
Процедура УправлениеБлокомПоддержкаСервисаПриСозданииНаСервере()
	
	ИспользоватьРазделениеПоОбластямДанных = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	//Элементы.ГруппаОбращенияВСлужбуПоддержки.Видимость = ИспользоватьРазделениеПоОбластямДанных
	//													И ИнформационныйЦентрСервер.УстановленаИнтеграцияСоСлужбойПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбращенияВПоддержкуНажатие(Элемент)
	
	//ИнформационныйЦентрКлиент.ОткрытьОбращенияВСлужбуПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрИдейНажатие(Элемент)
	
	//ИнформационныйЦентрКлиент.ОткрытьЦентрИдей();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорумНажатие(Элемент)
	
	КлючеваяОперация = "ИнформационнаяПанель_ОбсужденияНаФоруме";
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеСообщенияНажатие(Элемент)
	
	// ТехнологияСервиса.ИнформационныйЦентр
	//ИнформационныйЦентрКлиент.ПоказатьВсеСообщения();
	// Конец ТехнологияСервиса.ИнформационныйЦентр
	
КонецПроцедуры

#КонецОбласти

#Область МетодическаяПоддержка

&НаКлиенте
Процедура ВсеСсылкиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.МетодическаяПоддержка.Форма.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.КартинкаФоновоеЗаданиеЗапущено.Видимость = (Форма.ФоновоеЗаданиеЗапущено Или Не Форма.ДанныеАктуальны);
	
	УправлениеБлокомОтчетность(Форма);
	
	УправлениеБлокомНовости(Форма);
	
	УправлениеБлокомОстаткиДенежныхСредств(Форма);
	
	УправлениеБлокомПродажи(Форма);
	
	УправлениеБлокомПокупатели(Форма);
	
	УправлениеБлокомПоставщики(Форма);
	
	УправлениеБлокомСПАРКРиски(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков = Ложь)
	
	Если ПрочитатьДанныеСтатическихБлоков И Не ПустаяСтрока(СтатическиеБлоки) Тогда
		ПрочитатьДанныеБлоков(СтатическиеБлоки);
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		// Текущее фоновое задание неактуально
		ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеЗапущено);
	КонецЕсли;
	
	Если ПустаяСтрока(ДинамическиеБлоки) Тогда
		
		ДанныеАктуальны = Истина;
		
	Иначе
		
		Если ПрочитатьДанныеДинамическихБлоков Тогда
			// Принудительное чтение данных до начала выполнения фонового задания
			ПрочитатьДанныеБлоков(ДинамическиеБлоки);
		Иначе
			// Чтение данных после завершения фонового задания
			ИнициализироватьДанныеБлоков(ДинамическиеБлоки);
		КонецЕсли;
		
		БыстроеОбновлениеДанных = БыстроеОбновление;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", 0.1, Истина);
		
		ДанныеАктуальны = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасставитьБлоки()
	
	// Инициализация свойств
	
	ОбщиеСвойстваБлоков = ОбщиеСвойстваБлоков();
	
	ЭлементыБлоков = Новый Соответствие; // Соответствие элемента формы имени блока
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		ЭлементФормы = Элементы.Найти(Блок.Имя);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементыБлоков.Вставить(Блок.Имя, ЭлементФормы);
			ЭлементФормы.ЦветФона = Блок.ЦветФона;
			ЗаполнитьЗначенияСвойств(ЭлементФормы, ОбщиеСвойстваБлоков);
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем все блоки в невидимую группу БлокиПанели
	
	Для ИндексСтроки = 0 По ИнформационнаяПанель.КоличествоСтрок() - 1 Цикл
		Для ИндексКолонки = 0 По ИнформационнаяПанель.КоличествоКолонок() - 1 Цикл
			Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
			Для Каждого ПодчиненныйЭлемент Из Контейнер.ПодчиненныеЭлементы Цикл
				Элементы.Переместить(ПодчиненныйЭлемент, Элементы.БлокиПанели)
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Распределение блоков по контейнерам
	
	ИндексСтроки  = 0;
	ИндексКолонки = 0;
	
	ВГраницаСтрок   = ИнформационнаяПанель.КоличествоСтрок() - 1;
	ВГраницаКолонок = ИнформационнаяПанель.КоличествоКолонок() - 1;
	
	СтатическиеБлоки  = "";
	ДинамическиеБлоки = "";
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			// Блок выключен
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
			СтатическиеБлоки = СтатическиеБлоки + ?(ПустаяСтрока(СтатическиеБлоки), "", ",") + Блок.Имя;
		Иначе
			ДинамическиеБлоки = ДинамическиеБлоки + ?(ПустаяСтрока(ДинамическиеБлоки), "", ",") + Блок.Имя;
		КонецЕсли;
		
		// Перемещаем блок из группы БлокиПанели в контейнер
		Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
		Если Контейнер <> Неопределено Тогда
			Элементы.Переместить(ЭлементыБлоков[Блок.Имя], Контейнер);
		КонецЕсли;
		
		Если ИндексКолонки = ВГраницаКолонок Тогда
			ИндексКолонки = 0;
			ИндексСтроки  = ИндексСтроки + 1;
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
		Если ИндексСтроки > ВГраницаСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбщиеСвойстваБлоков()
	
	Возврат Новый Структура("Ширина,Высота,РастягиватьПоВертикали,РастягиватьПоГоризонтали", 30, 11, Ложь, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)
	
	Возврат СтрШаблон("Контейнер%1%2", ИндексСтроки, ИндексКолонки);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДанныеБлоков(СтрокаОтбора = "")
	
	ПолучитьДанныеБлоков(СтрокаОтбора, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеБлоков(СтрокаОтбора = "")
	
	ПолучитьДанныеБлоков(СтрокаОтбора, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеБлоков(СтрокаОтбора, Инициализация)
	
	ОбновитьЗаголовокФормы();
	
	УстановленОтбор = Не ПустаяСтрока(СтрокаОтбора);
	Если УстановленОтбор Тогда
		ОтборБлоков = СтрРазделить(СтрокаОтбора, ", ", Ложь);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УникальныйИдентификатор",          УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилища",                   АдресХранилища);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("ВариантОкругления",                ВариантОкругления);
	СтруктураПараметров.Вставить("ПоказыватьСравнениеСПрошлымГодом", ПоказыватьСравнениеСПрошлымГодом);
	СтруктураПараметров.Вставить("Инициализация",                    Инициализация);
	
	ПараметрыПроцедуры = Новый Массив();
	ПараметрыПроцедуры.Добавить(СтруктураПараметров);
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если УстановленОтбор И (ОтборБлоков.Найти(Блок.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Блок.ПроцедураПолученияДанных) Тогда
			
			ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Блок.ПроцедураПолученияДанных, ПараметрыПроцедуры);
			
			ДанныеБлока = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(ДанныеБлока) = Тип("Структура") Тогда
				Если Инициализация Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока, Блок.РеквизитыФормы);
				КонецЕсли;
			КонецЕсли;
			
			ОценкаПроизводительности.ЗакончитьЗамерВремени("ИнформационнаяПанельБлок" + Блок.Имя, ЗначениеТаймера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновитьСписокНовостей();
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ИнформационнаяПанельОбновлениеСпискаНовостей", ЗначениеТаймера);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
		АдресХранилища = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Период = ТекущаяДатаСеанса();
	
	ПредставлениеТекущейДаты = Формат(Период, "ДФ='d MMMM, dddd'");
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сегодня: %1'"), ПредставлениеТекущейДаты);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИнформационнойПанелиПриИзменении()
	
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков);
	
	РасставитьБлоки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработатьИзменение()
	
	РеквизитыОрганизации = Организация;
	
	ПоказыватьСравнениеСПрошлымГодом = ПоказыватьСравнениеСПрошлымГодом(Организация);
	
	БыстроеОбновление = Ложь;
	ПрочитатьДанныеСтатическихБлоков  = Ложь;
	ПрочитатьДанныеДинамическихБлоков = Истина;
	
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков);
	
КонецПроцедуры

&НаКлиенте
Функция ИндексЭлементаФормы(Знач Имя)
	
	Цифры = "1234567890";
	НомерСтрокой = "";
	
	ДлинаИмени = СтрДлина(Имя);
	
	ВГраница   = ДлинаИмени - 1;
	Для Индекс = 0 По ВГраница Цикл
		Позиция = ДлинаИмени - Индекс;
		Символ = Сред(Имя,Позиция,1);
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		НомерСтрокой = Символ + НомерСтрокой;
	КонецЦикла;
	
	Если ПустаяСтрока(НомерСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Число(НомерСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, Отборы = Неопределено, Показатели  = Неопределено, КлючВарианта = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ГруппировкаКолонки = Неопределено, ГруппировкаИнтервалы = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если ГруппировкаКолонки <> Неопределено И ТипЗнч(ГруппировкаКолонки) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("ГруппировкаКолонок", ГруппировкаКолонки);
	КонецЕсли;
	
	Если ГруппировкаИнтервалы <> Неопределено И ТипЗнч(ГруппировкаИнтервалы) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Интервалы", ГруппировкаИнтервалы);
	КонецЕсли;
	
	Если ТипЗнч(Отборы) = Тип("Массив") Тогда
		
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Показатели) = Тип("Массив") Тогда
		
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки"         , Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки"           , 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Организация);
	
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ДополнительныеСвойства.Вставить("Период", Период);
	
	Если НачалоПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Если ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		ЭлементУсловногоОформления.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление, "Формат", "ЧДЦ=; ЧС=3");
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Функция БлокВключен(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеБлоки.Количество() > 0 И НайденныеБлоки[0].Пометка;
	
КонецФункции

&НаКлиенте
Функция ДобавитьБлок(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеБлоки.Количество() > 0 И Не НайденныеБлоки[0].Пометка Тогда
		НайденныеБлоки[0].Пометка = Истина;
		СоставИзменен = Истина;
	Иначе
		СоставИзменен = Ложь;
	КонецЕсли;
	
	Возврат СоставИзменен;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказыватьСравнениеСПрошлымГодом(Знач Организация)
	
	ДатаНачалаВеденияУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	Если ДатаНачалаВеденияУчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ДатаНачалаВеденияУчета < НачалоГода(ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю().
		// Копируем их в новых массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	
	ПараметрыВыбораОрганизации = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойПанели

&НаКлиенте
Процедура Подключаемый_ОбновлениеДанныхБлоков()
	
	Если ПустаяСтрока(ДинамическиеБлоки) Тогда
		Возврат;
	КонецЕсли;
	
	БыстроеОбновление = ?(БыстроеОбновлениеДанных <> Неопределено, БыстроеОбновлениеДанных, Ложь);
	
	Если ЗапуститьОбновлениеДанныхБлоков(БыстроеОбновление) Тогда
		ЖдатьОбновленияДанныхБлоков();
	Иначе
		// Включен монопольный режим, попробуем обновить позже
		ИнтервалМеждуПопыткамиОбновления = 60;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ИнтервалМеждуПопыткамиОбновления, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕжедневноеОбновление()
	
	// Полное обновление всех блоков
	БыстроеОбновление = Ложь;
	ПрочитатьДанныеСтатическихБлоков = Истина;
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
	
	// Запланируем обновление на завтра
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", ИнтервалОбновленияДанных(ТекущаяДата()), Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхБлоков(БыстроеОбновление = Ложь)
	
	Если МонопольныйРежим() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если ФоновоеЗаданиеЗапущено И Не ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроцедурыОбновленияДанных = Новый Массив;
	Для Каждого Блок Из ТаблицаБлоков Цикл
		Если Блок.Пометка И Не ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
			ПроцедурыОбновленияДанных.Добавить(Блок.ПроцедураОбновленияДанных);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("БыстроеОбновление",                БыстроеОбновление);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("ПроцедурыОбновленияДанных",        ПроцедурыОбновленияДанных);
	СтруктураПараметров.Вставить("ПоказыватьСравнениеСПрошлымГодом", ПоказыватьСравнениеСПрошлымГодом);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ИнформационнаяПанель.ОбновитьДанныеБлоков",
		СтруктураПараметров,
		НСтр("ru = 'Обновление данных блоков Информационной панели'"));
	
	ФоновоеЗаданиеИдентификатор = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ДанныеАктуальны = Истина;
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
	Иначе
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЖдатьОбновленияДанныхБлоков()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ФоновоеЗаданиеЗапущено = Ложь;
		ДанныеАктуальны = Истина;
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
	Иначе
		ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации()
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания, ЗаданиеЗапущено)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ЗаданиеЗапущено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтервалОбновленияДанных(ДатаОбновленияДанных)
	
	Возврат (КонецДня(ДатаОбновленияДанных) + 1) - ДатаОбновленияДанных + 59;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура Сервис1СПАРКРиски_ВсеСобытияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомСПАРКРиски(Форма)
	
	Элементы = Форма.Элементы;
	Если ПустаяСтрока(Форма.Сервис1СПАРКРиски_События1) Тогда
		
		Элементы.Сервис1СПАРКРиски_События0.Высота = 3;
		Элементы.Сервис1СПАРКРиски_События1.Высота = 1;
		
	Иначе
		
		Если СтрЧислоСтрок(Форма.Сервис1СПАРКРиски_События0) = 1 Тогда
			
			Элементы.Сервис1СПАРКРиски_События0.Высота = 1;
			Элементы.Сервис1СПАРКРиски_События1.Высота = 3;
			
		Иначе
			
			Элементы.Сервис1СПАРКРиски_События0.Высота = 2;
			Элементы.Сервис1СПАРКРиски_События1.Высота = 2;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти