
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьСчетаЗП();
	
	ПрочитатьПараметрыУчета();
	
	УстановитьДоступностьВалютыУчета();
	
	ДоступноРедактированиеНастроекПараметровУчета = Пользователи.РолиДоступны("ДобавлениеИзменениеНастроекБухгалтерии");
	
	ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПрименитьПараметрыУчета(Отказ, ПараметрыЗаписи);
	
	//Если НЕ Отказ Тогда
	//	ОбработатьИзменениеПоддержкиРаботыСоСтруктурнымиПодразделениями();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейсПрограммы();
	ПодключитьОбработчикОжидания("Подключаемый_ПрочитатьПараметрыУчета", 0.5, Истина);
	
	Оповестить("Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ",           НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ, ЭтотОбъект);
	Оповестить("Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений", НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений, ЭтотОбъект);
	Если ПараметрыЗаписи.Свойство("Запись_КонстантаНастройкаЗаполненияЦеныПродажи") Тогда
		Оповестить("Запись_КонстантаНастройкаЗаполненияЦеныПродажи",      НаборКонстант.НастройкаЗаполненияЦеныПродажи, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастройкиВеденияАналитическогоУчетаОС" Тогда
		ОбновитьПараметрыВеденияУчетаОС();
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		Если Источник = "ПоддержкаРаботыСоСтруктурнымиПодразделениями" Тогда
			ОбновитьПоддержкаРаботыСоСтруктурнымиПодразделениями();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВестиСкладскойУчетБУПриИзменении(Элемент)
	
	Если ВестиСкладскойУчетБУ <> ТекущиеЗначения.ВестиСкладскойУчетБУ Тогда
		
		ВозможноИзменениеНастройки = ВозможноИзменениеПараметровСкладскогоУчета("Типовой");
		Если ВозможноИзменениеНастройки Тогда
			ВестиСуммовойУчетПоСкладамБУ = ВестиСкладскойУчетБУ;
			ТекущиеЗначения.ВестиСкладскойУчетБУ 		 = ВестиСкладскойУчетБУ;
			ТекущиеЗначения.ВестиСуммовойУчетПоСкладамБУ = ВестиСуммовойУчетПоСкладамБУ;
			
			// для НУ также как и в БУ
			ВестиСкладскойУчетНУ 		 = ВестиСкладскойУчетБУ;
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетБУ;
			ТекущиеЗначения.ВестиСкладскойУчетНУ 		 = ВестиСкладскойУчетБУ;
			ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамНУ;
		Иначе 
			ВестиСкладскойУчетБУ = ТекущиеЗначения.ВестиСкладскойУчетБУ;
			ПоказатьПредупреждение(, НСтр("ru = 'В оборотах счетов запасов имеются движения.
							                  |Аналитика по складам не может быть изменена!'"));
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиСкладскойУчетНУПриИзменении(Элемент)
	
	Если ВестиСкладскойУчетНУ <> ТекущиеЗначения.ВестиСкладскойУчетНУ Тогда
		
		ВозможноИзменениеНастройки = ВозможноИзменениеПараметровСкладскогоУчета("Налоговый");
		Если ВозможноИзменениеНастройки Тогда
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетНУ;
		Иначе 
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетНУ;
			ПоказатьПредупреждение(, НСтр("ru = 'В оборотах счетов запасов имеются движения. 
							|Необходимо перепровести документы с начала ведения временных разниц балансовым методом.'"));
		КонецЕсли;
		ТекущиеЗначения.ВестиСкладскойУчетНУ 		= ВестиСкладскойУчетНУ;
		ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамНУ;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиСуммовойУчетПоСкладамБУПриИзменении(Элемент)
	
	Если ВестиСуммовойУчетПоСкладамБУ <> ТекущиеЗначения.ВестиСуммовойУчетПоСкладамБУ Тогда
		
		ВозможноИзменениеНастройки = ВозможноИзменениеПараметровСкладскогоУчета("Типовой");
		Если ВозможноИзменениеНастройки Тогда
			ТекущиеЗначения.ВестиСуммовойУчетПоСкладамБУ = ВестиСуммовойУчетПоСкладамБУ;
			
			ВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамБУ;
			ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамНУ;
		Иначе 
			ВестиСуммовойУчетПоСкладамБУ = ТекущиеЗначения.ВестиСуммовойУчетПоСкладамБУ;
			ПоказатьПредупреждение(, НСтр("ru = 'В оборотах счетов запасов имеются движения.
												|Признак суммового учета по складам не может быть изменен!'"));
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиСуммовойУчетПоСкладамНУПриИзменении(Элемент)
	
	Если ВестиСуммовойУчетПоСкладамНУ <> ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ Тогда
		
		ВозможноИзменениеНастройки = ВозможноИзменениеПараметровСкладскогоУчета("Налоговый");
		Если ВозможноИзменениеНастройки Тогда
			ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамНУ;
		Иначе 
			ВестиСуммовойУчетПоСкладамНУ = ТекущиеЗначения.ВестиСуммовойУчетПоСкладамНУ;
			ПоказатьПредупреждение(, НСтр("ru = 'В оборотах счетов запасов имеются движения.
												|Признак суммового учета по складам не может быть изменен!'"));
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоПодразделениямПриИзменении(Элемент)
	
	Если ВестиУчетПоПодразделениям <> ТекущиеЗначения.ВестиУчетПоПодразделениям Тогда
		
		РезультатОбработкиИзмененияНастройки = ВозможноИзменениеПараметровУчетаПоПодразделениям(ТекущиеЗначения.ВестиУчетПоПодразделениям);
		Если РезультатОбработкиИзмененияНастройки.ВозможноИзменениеНастройки Тогда
			Если РезультатОбработкиИзмененияНастройки.Свойство("ТекстВопроса") Тогда
				ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВестиУчетПоПодразделениямПриИзмененииЗавершение", ЭтотОбъект);
				ПоказатьВопрос(
					ОписаниеОповещенияОЗавершении, 
					РезультатОбработкиИзмененияНастройки.ТекстВопроса,
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Нет);
			Иначе 
				ТекущиеЗначения.ВестиУчетПоПодразделениям = ВестиУчетПоПодразделениям;
			КонецЕсли;
		Иначе 
			ВестиУчетПоПодразделениям = ТекущиеЗначения.ВестиУчетПоПодразделениям;
			Если РезультатОбработкиИзмененияНастройки.Свойство("ТекстПредупреждения") Тогда
				ПоказатьПредупреждение(, РезультатОбработкиИзмененияНастройки.ТекстПредупреждения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСотрудникамПриИзменении(Элемент)
	
	Если ВестиУчетПоСотрудникам <> ТекущиеЗначения.ВестиУчетПоСотрудникам Тогда
		
		РезультатОбработкиИзмененияНастройки = ВозможноИзменениеПараметровУчетаПоСотрудникам(ТекущиеЗначения.ВестиУчетПоСотрудникам, СчетаЗП);
		Если РезультатОбработкиИзмененияНастройки.ВозможноИзменениеНастройки Тогда
			Если РезультатОбработкиИзмененияНастройки.Свойство("ТекстВопроса") Тогда
				ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВестиУчетПоСотрудникамПриИзмененииЗавершение", ЭтотОбъект);
				ПоказатьВопрос(
					ОписаниеОповещенияОЗавершении, 
					РезультатОбработкиИзмененияНастройки.ТекстВопроса,
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Нет);
			Иначе 
				ТекущиеЗначения.ВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
			КонецЕсли;
		Иначе 
			ВестиУчетПоСотрудникам = ТекущиеЗначения.ВестиУчетПоСотрудникам;
			Если РезультатОбработкиИзмененияНастройки.Свойство("ТекстВопроса") Тогда
				ПоказатьПредупреждение(, РезультатОбработкиИзмененияНастройки.ТекстВопроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОСВРазрезеПодразделенийПриИзменении(Элемент)
	
	// очистка даты при изменении признака
	Если ВестиУчетОСВРазрезеПодразделений Тогда
		НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ПараметрыФормы = Новый Структура("ДатаНачала,ВестиАналитическийУчетОС", НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений, 0);
		ОткрытьФорму("Обработка.ИзменениеНастроекУчета.Форма.ФормаИзмененияНастроекУчетаОС", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ЗадатьВопросОбИзмененииПараметровУчетаОС("Подразделения");
	КонецЕсли;	
	 
	// доступность связанных реквизитов
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОСВРазрезеМОЛПриИзменении(Элемент)
	
	// очистка даты при изменении признака
	Если ВестиУчетОСВРазрезеМОЛ Тогда
		НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ПараметрыФормы = Новый Структура("ДатаНачала,ВестиАналитическийУчетОС", НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ, 1);
		ОткрытьФорму("Обработка.ИзменениеНастроекУчета.Форма.ФормаИзмененияНастроекУчетаОС", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ЗадатьВопросОбИзмененииПараметровУчетаОС("МОЛ");
	КонецЕсли;	
	 
	// доступность связанных реквизитов
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	
	// устанавливаем аналогичное значение для остальных элементов.	
	ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов              = ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов     = ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезAPIПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодсказкаПоддержкаРаботыСоСтруктурнымиПодразделениямиНажатие(Элемент)
	
	ФормаФункциональности = ПолучитьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы",,ЭтотОбъект);
	ФормаФункциональности.Элементы.Страницы.ТекущаяСтраница = ФормаФункциональности.Элементы.ГруппаОрганизация;
	ФормаФункциональности.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_ПрочитатьПараметрыУчета()
	ПрочитатьПараметрыУчета();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	ОбновитьИнтерфейс();
	#КонецЕсли
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаЗП()
	
	СчетаЗП = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовСОтключаемойАналитикойРаботникиОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВалютыУчета()
	
	Если Элементы.Найти("ВалютаРегламентированногоУчета") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ""; 
	ПервыйДокумент = Истина;
	
	Для Каждого Док из Метаданные.Документы Цикл

		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ " + ?(ПервыйДокумент = Истина, "РАЗРЕШЕННЫЕ ","") +  "ПЕРВЫЕ 1
		|	Документ." + Док.Имя + ".Ссылка
		|
		|";
	    ПервыйДокумент = Ложь;
	КонецЦикла;

	// Уберем первое "ОБЪЕДИНИТЬ ВСЕ"
	Запрос.Текст  = Сред(Запрос.Текст, СтрДлина("ОБЪЕДИНИТЬ ВСЕ") + 1);

	ЕстьДокументы = (Не Запрос.Выполнить().Пустой());

	Элементы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;

	Если ЕстьДокументы Тогда
		Элементы.НадписьТекстВажногоСообщения.Заголовок = НСтр("ru = 'После ввода документов валюту регламентированного учета изменять нельзя.'");
	Иначе
		Элементы.НадписьТекстВажногоСообщения.Заголовок = НСтр("ru = 'Валюту регламентированного учета можно изменять пока не введены документы.'");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	#Если НаКлиенте Тогда
		БазоваяВерсия = Вычислить("СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации");
	#Иначе	
		БазоваяВерсия = Вычислить("СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()");
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НадписьПодсказкаСтруктурныеПодразделенияВБазовойВерсии", "Видимость", БазоваяВерсия);
		
	
	#Если НаКлиенте Тогда
		ВедетсяУчетЗарплатыИКадры = Вычислить("ПолучитьФункциональнуюОпциюИнтерфейса(""ВедетсяУчетЗарплатыИКадры"")");
	#Иначе	
		ВедетсяУчетЗарплатыИКадры = Вычислить("ПолучитьФункциональнуюОпцию(""ВедетсяУчетЗарплатыИКадры"")");
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СтраницаАналитическийУчетПоСотрудникам", "Видимость", ВедетсяУчетЗарплатыИКадры);
	
	#Если НаКлиенте Тогда
		ВедетсяПроизводственнаяДеятельность = Вычислить("ПолучитьФункциональнуюОпциюИнтерфейса(""ВедетсяПроизводственнаяДеятельность"")");
	#Иначе	
		ВедетсяПроизводственнаяДеятельность = Вычислить("ПолучитьФункциональнуюОпцию(""ВедетсяПроизводственнаяДеятельность"")");
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СтраницаПроизводство", "Видимость", ВедетсяПроизводственнаяДеятельность);
	
	#Если НаКлиенте Тогда
		ВедетсяУчетОсновныхСредств = Вычислить("ПолучитьФункциональнуюОпциюИнтерфейса(""ВедетсяУчетОсновныхСредств"")");
	#Иначе	
		ВедетсяУчетОсновныхСредств = Вычислить("ПолучитьФункциональнуюОпцию(""ВедетсяУчетОсновныхСредств"")");
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СтраницаАналитическийУчетОС", "Видимость", ВедетсяУчетОсновныхСредств);
	
	Если НЕ Форма.ДоступноРедактированиеНастроекПараметровУчета Тогда
		
		// Если пользователь не обладает правами на редактирование параметров учета, 
		// но обладает правами на открытие данной формы, то считается, 
		// что он может просматривать параметры учета.
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаРазделы", "ТолькоПросмотр", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаЗаписатьИЗакрыть", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаЗаписать", "Доступность", Ложь);
		
	Иначе
		
		Элементы = Форма.Элементы;
		НаборКонстант = Форма.НаборКонстант;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВестиСуммовойУчетПоСкладамБУ", "Доступность", Форма.ВестиСкладскойУчетБУ);
		
		// Возможность не доступна в базовой версии.
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов", "Доступность", 
			НЕ БазоваяВерсия И НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов", "Доступность", 
			НЕ БазоваяВерсия И НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
		// Вести авансовые платежит по НК можно только, если основные платежи ведутся по НК.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов", "Доступность", 
			Форма.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов И НЕ БазоваяВерсия И НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов", "Доступность", 
			Форма.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов И НЕ БазоваяВерсия И НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			
		// Доступность налоговых реквизитов.	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ГруппаНалоговыйУчетТМЗ", "Доступность", Форма.ВестиСкладскойУчетБУ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиСкладскойУчетНУ", "Доступность", Форма.ВестиСкладскойУчетБУ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВестиСуммовойУчетпоСкладамНУ", "Доступность", Форма.ВестиСкладскойУчетНУ И Форма.ВестиСуммовойУчетПоСкладамБУ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПомощникПереходаНаРегистрТоварыОрганизаций", "Доступность", ЗначениеЗаполнено(НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ));
			
	КонецЕсли;
	
	Форма.Элементы.СтраницаПроизводство.Видимость = Форма.ИспользоватьТипыЦенНоменклатуры;
	
	Если Форма.Параметры.Свойство("ОткрытаИзКарточкиНоменклатуры") Тогда 
		Форма.Элементы.ГруппаРазделы.ТекущаяСтраница       = Форма.Элементы.СтраницаЦенообразование;
		Форма.Элементы.ПодсказкаОНастройкахФормы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоддержкиРаботыСоСтруктурнымиПодразделениями()
	
	// значение константы не изменилось
	//Если ПервоначальныеЗначения.ПоддержкаРаботыСоСтруктурнымиПодразделениями = НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВеденияУчетаОС()
	
	НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	ВестиУчетОСВРазрезеМОЛ = ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ);
	ВестиУчетОСВРазрезеПодразделений = ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений);
	
	ПервоначальныеЗначения.ВестиУчетОСВРазрезеМОЛ = ВестиУчетОСВРазрезеМОЛ;
	ПервоначальныеЗначения.ВестиУчетОСВРазрезеПодразделений = ВестиУчетОСВРазрезеПодразделений;
	
	ТекущиеЗначения.ВестиУчетОСВРазрезеМОЛ = ВестиУчетОСВРазрезеМОЛ;
	ТекущиеЗначения.ВестиУчетОСВРазрезеПодразделений = ВестиУчетОСВРазрезеПодразделений;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоддержкаРаботыСоСтруктурнымиПодразделениями()
	
	НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	Если НЕ НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов     = Ложь;
		
		ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов     = Ложь;
		
		ПервоначальныеЗначения.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ПервоначальныеЗначения.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ПервоначальныеЗначения.ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ПервоначальныеЗначения.ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		
		ТекущиеЗначения.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ТекущиеЗначения.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ТекущиеЗначения.ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		ТекущиеЗначения.ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь;
		
	КонецЕсли;
	
	ПервоначальныеЗначения.ПоддержкаРаботыСоСтруктурнымиПодразделениями = НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	ТекущиеЗначения.ПоддержкаРаботыСоСтруктурнымиПодразделениями = НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыУчета()

	ПервоначальныеЗначения = Новый Структура;
	
	// Бухгалтерский учет
	ВестиСкладскойУчетБУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(ПланыСчетов.Типовой.Товары);
	ВестиСуммовойУчетПоСкладамБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Типовой.Товары);
	
	ПервоначальныеЗначения.Вставить("ВестиСкладскойУчетБУ", ВестиСкладскойУчетБУ);
	ПервоначальныеЗначения.Вставить("ВестиСуммовойУчетПоСкладамБУ", ВестиСуммовойУчетПоСкладамБУ);
	
	// Налоговый учет
	ВестиСкладскойУчетНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(ПланыСчетов.Налоговый.Товары);
	ВестиСуммовойУчетПоСкладамНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Налоговый.Товары);

	ПервоначальныеЗначения.Вставить("ВестиСкладскойУчетНУ", ВестиСкладскойУчетНУ);
	ПервоначальныеЗначения.Вставить("ВестиСуммовойУчетПоСкладамНУ", ВестиСуммовойУчетПоСкладамНУ);
			
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	ПервоначальныеЗначения.Вставить("ВестиРасчетыПоДокументам", ВестиРасчетыПоДокументам);
	
	// определим установлена ли аналитика "Подразделения" на счетах доходов/затрат
	ВестиУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
	ПервоначальныеЗначения.Вставить("ВестиУчетПоПодразделениям", ВестиУчетПоПодразделениям);
	
	//структурные подразделения
	//проверяем есть или нет субконто на счетах учета налога, 
	
	// Начисление: берем одни из счетов раздела 3100, кроме НДС, КПН и Акциза
	ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = 
		ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	ПервоначальныеЗначения.Вставить("ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов", ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов);
	
	// Авансы: счет 1430
	ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = 
		ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет);
	ПервоначальныеЗначения.Вставить("ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов", ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов);
	
	// Начисление: счет 3120
	ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = 
		ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог);
	ПервоначальныеЗначения.Вставить("ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов", ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов);
	
	// Авансы: счет 1430Н
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = 
		ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);
	ПервоначальныеЗначения.Вставить("ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов", ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов);
	                                                                                                     	
	// определим установлена ли аналитика "Работники организации" на счетах зар.платы
	ВестиУчетПоСотрудникам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); // счет 3350
	ПервоначальныеЗначения.Вставить("ВестиУчетПоСотрудникам", ВестиУчетПоСотрудникам);
	
	// Установка флагов аналитического учета ОС по Подразделениям и МОЛ
	ВестиУчетОСВРазрезеПодразделений 	= ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений);
	ВестиУчетОСВРазрезеМОЛ 				= ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ);
	
	ПервоначальныеЗначения.Вставить("ВестиУчетОСВРазрезеПодразделений", ВестиУчетОСВРазрезеПодразделений);
	ПервоначальныеЗначения.Вставить("ВестиУчетОСВРазрезеМОЛ",           ВестиУчетОСВРазрезеМОЛ);
	
	ПервоначальныеЗначения.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", НаборКонстант.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	// ведение учета по регистру накопления ТоварыОрганизацийБУ
	ПервоначальныеЗначения.Вставить("ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ", НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
	
	ТекущиеЗначения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПервоначальныеЗначения);
	
	КонтролироватьОстаткиЗапасов = НЕ НаборКонстант.ОтключитьКонтрольОтрицательныхОстатков;
	
	ПервоначальныеЗначения.Вставить("НастройкаЗаполненияЦеныПродажи", НаборКонстант.НастройкаЗаполненияЦеныПродажи);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыУчета(Отказ, ПараметрыЗаписи)
	
	Пользователь = Пользователи.ТекущийПользователь();
	УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи = УправлениеДоступомБК.ЕстьОграничениеПоОрганизацииНаУровнеЗаписи(Пользователь);
	
	СтрокаСообщения = НСтр("ru = 'У пользователя %1 включено ограничение доступа на уровне Организации. Изменение аналитики счетов не возможно.'");
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Пользователь);
	
	ВывестиСообщениеОбОшибке = Ложь;
	
	// Аналитический учет ТМЗ
	Если ВестиСкладскойУчетБУ <> ПервоначальныеЗначения.ВестиСкладскойУчетБУ
		ИЛИ ВестиСуммовойУчетПоСкладамБУ <> ПервоначальныеЗначения.ВестиСуммовойУчетПоСкладамБУ Тогда
		
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			Счета = Новый СписокЗначений();
			Счета.Добавить("ГотоваяПродукция");
			Счета.Добавить("СырьеИМатериалы");
			Счета.Добавить("Товары");
			Счета.Добавить("МонтажОборудования");
			Счета.Добавить("МатериалыПринятыеВПереработку");

			Для каждого Счет Из Счета Цикл
				ПрименитьПараметрыСубконтоСклады(Счет.Значение, "Типовой", Истина, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ, Истина);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	// Аналитический учет ТМЗ (НУ)
	Если ВестиСкладскойУчетНУ <> ПервоначальныеЗначения.ВестиСкладскойУчетНУ
		ИЛИ ВестиСуммовойУчетПоСкладамНУ <> ПервоначальныеЗначения.ВестиСуммовойУчетПоСкладамНУ Тогда
		
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			Счета = Новый СписокЗначений();
			Счета.Добавить("Товары");
			Счета.Добавить("ГотоваяПродукция");
			Счета.Добавить("СырьеИМатериалы");
			
			Для каждого Счет Из Счета Цикл
				ПрименитьПараметрыСубконтоСклады(Счет.Значение, "Налоговый", Истина, ВестиСкладскойУчетНУ, ВестиСуммовойУчетПоСкладамНУ, Истина);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
            		
	// аналит. учет расчетов с контрагентами	
	Если ВестиРасчетыПоДокументам <> ПервоначальныеЗначения.ВестиРасчетыПоДокументам Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			ТаблицаСчетов = УправлениеВзаиморасчетамиСервер.ПолучитьСписокСчетовВзаиморасчетов();
			
			Для каждого Строка Из ТаблицаСчетов Цикл
				ПрименитьПараметрыРасчетов(Строка.Ссылка, ВестиРасчетыПоДокументам);
			КонецЦикла;
		КонецЕсли;	
    КонецЕсли;
		
	// аналит. учет доходов/затрат по подразделениям
	Если ВестиУчетПоПодразделениям <> ПервоначальныеЗначения.ВестиУчетПоПодразделениям Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			СчетаДоходов = Новый СписокЗначений;
			СчетаДоходов.Добавить("ДоходОтРеализацииПродукцииИОказанияУслуг_"); //6000
			СчетаДоходов.Добавить("ДоходыОтФинансирования"); //6100
			СчетаДоходов.Добавить("ПрочиеДоходы_"); //6200
			СчетаДоходов.Добавить("ДоходыСвязанныеСПрекращаемойДеятельностью_"); //6300
			СчетаДоходов.Добавить("ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия"); //6400

			СчетаЗатрат = Новый СписокЗначений;
			СчетаЗатрат.Добавить("СебестоимостьРеализованнойПродукцииИОказанныхУслуг_"); //7000
			СчетаЗатрат.Добавить("РасходыНаФинансирование"); //7300
			СчетаЗатрат.Добавить("ПрочиеРасходы_"); //7400
			СчетаЗатрат.Добавить("РасходыСвязанныеСПрекращаемойДеятельностью_"); //7500
			СчетаЗатрат.Добавить("ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия"); //7600
			СчетаЗатрат.Добавить("РасходыПоКорпоративномуПодоходномуНалогу_"); //7700

			//установим субконто Подразделения для счетов доходов/затрат
			Для каждого Счет Из СчетаЗатрат Цикл
				ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетПоПодразделениям, Истина);
			КонецЦикла;
			
			Для каждого Счет Из СчетаДоходов Цикл
				ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетПоПодразделениям, Истина);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	
	// Начисленные налоги в разрезе налоговых комитетов: БУ
	Если ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> ПервоначальныеЗначения.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			СчетаНалогов = Новый СписокЗначений;
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог); 	//3120
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.СоциальныйНалог); 				//3150
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.ЗемельныйНалог);  				//3160
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.НалогНаТранспортныеСредства);  	//3170
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.НалогНаИмущество); 				//3180
			СчетаНалогов.Добавить(ПланыСчетов.Типовой.ПрочиеНалоги); 					//3190
			Для Каждого Счет Из СчетаНалогов Цикл
				ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение, ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Бух"); 
			КонецЦикла;  		
		КонецЕсли;	
	КонецЕсли;
	
	// Начисленные налоги в разрезе налоговых комитетов: НУ
	Если ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> ПервоначальныеЗначения.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			СчетаНалогов = Новый СписокЗначений;
			СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог); //3120Н
			СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги); 					//3190Н	
			Для Каждого Счет Из СчетаНалогов Цикл
				ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение, ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Нал"); 
			КонецЦикла;  		
		КонецЕсли;	
	КонецЕсли;

	// Авансовые платежи  в разрезе налоговых комитетов: БУ
	Если ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> ПервоначальныеЗначения.ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			СчетаАвансовНалогов = Новый СписокЗначений;
			СчетаАвансовНалогов.Добавить(ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет); // 1430
			Для Каждого Счет Из СчетаАвансовНалогов Цикл
				ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение, ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Бух"); 
			КонецЦикла;  		
		КонецЕсли;	
	КонецЕсли;
	
	// Авансовые платежи  в разрезе налоговых комитетов: НУ
	Если ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> ПервоначальныеЗначения.ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			СчетаАвансовНалогов = Новый СписокЗначений;
			СчетаАвансовНалогов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее); // 1430Н		
			
			Для Каждого Счет Из СчетаАвансовНалогов Цикл
				ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение, ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Нал"); 
			КонецЦикла;  		
		КонецЕсли;	
	КонецЕсли;

	// аналит. учет ОС в разрезе подразделений
	Если ВестиУчетОСВРазрезеПодразделений <> ПервоначальныеЗначения.ВестиУчетОСВРазрезеПодразделений Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			Счета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовУчетаВА();
			
			Для каждого Счет Из Счета Цикл
				ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетОСВРазрезеПодразделений, Истина, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// аналит. учет ОС в разрезе МОЛ
	Если ВестиУчетОСВРазрезеМОЛ <> ПервоначальныеЗначения.ВестиУчетОСВРазрезеМОЛ Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			Счета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовУчетаВА();
			
			Для каждого Счет Из Счета Цикл
				ПрименитьПараметрыСубконтоМОЛ(Счет.Значение, "Типовой", ВестиУчетОСВРазрезеМОЛ, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// аналит. учет доходов/затрат по сотрудникам
	Если ВестиУчетПоСотрудникам <> ПервоначальныеЗначения.ВестиУчетПоСотрудникам Тогда
		Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
			ВывестиСообщениеОбОшибке = Истина
		Иначе	
			ПрименитьПараметрыВеденияУчетаПоСотрудникам(Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	Если ВывестиСообщениеОбОшибке Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;	
	
	Если Не Отказ И НаборКонстант.НастройкаЗаполненияЦеныПродажи <> ПервоначальныеЗначения.НастройкаЗаполненияЦеныПродажи Тогда
		ПараметрыЗаписи.Вставить("Запись_КонстантаНастройкаЗаполненияЦеныПродажи", Истина);
	КонецЕсли;
	
	//контроль остатков ТМЗ
	Если Не Отказ Тогда
		Константы.ОтключитьКонтрольОтрицательныхОстатков.Установить(НЕ КонтролироватьОстаткиЗапасов);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчики окончания интерактивных действий пользователя

&НаКлиенте
Процедура ВестиУчетПоПодразделениямПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ВестиУчетПоПодразделениям = ТекущиеЗначения.ВестиУчетПоПодразделениям;
	Иначе 
		ТекущиеЗначения.ВестиУчетПоПодразделениям = ВестиУчетПоПодразделениям;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСотрудникамПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ВестиУчетПоСотрудникам = ТекущиеЗначения.ВестиУчетПоСотрудникам;
	Иначе 
		ТекущиеЗначения.ВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбИзмененииПараметровУчетаОСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Если ДополнительныеПараметры.Режим = "МОЛ" Тогда
			ВестиУчетОСВРазрезеМОЛ = Истина;
		Иначе 
			ВестиУчетОСВРазрезеПодразделений = Истина;
		КонецЕсли;
	Иначе 
		Если ДополнительныеПараметры.Режим = "МОЛ" Тогда
			НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Дата(1,1,1);
		Иначе 
			НаборКонстант.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// При изменении реквизитов

&НаКлиенте
Процедура ЗадатьВопросОбИзмененииПараметровУчетаОС(Режим)
	
	ТекстВопроса = НСтр("ru = 'При снятии признака уже имеющаяся аналитика на счетах учета ОС будет потеряна. Вы хотите продолжить?'");
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗадатьВопросОбИзмененииПараметровУчетаОСЗавершение", ЭтотОбъект, Новый Структура("Режим", Режим));
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноИзменениеПараметровСкладскогоУчета(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДвижений.СчетДт,
	|	ТаблицаДвижений.СчетКт,
	|	ТаблицаДвижений.Сумма
	|ИЗ
	|	РегистрБухгалтерии." + Источник + " КАК ТаблицаДвижений
	|ГДЕ
	|	(ТаблицаДвижений.СчетДт В ИЕРАРХИИ (&Запасы)
	|			ИЛИ ТаблицаДвижений.СчетКт В ИЕРАРХИИ (&Запасы))
	|	И ТаблицаДвижений.Активность = ИСТИНА";
	
	Запрос.УстановитьПараметр("Запасы", ПланыСчетов[Источник].Запасы);
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

&НаСервереБезКонтекста
Функция ВозможноИзменениеПараметровУчетаПоПодразделениям(ТекущееЗначениеВестиУчетПоПодразделениям)
		
	Результат = Новый Структура("ВозможноИзменениеНастройки", Ложь);
	
	ЕстьОборотыНаСчетахЗатрат = Ложь;
	ЕстьОборотыНаСчетахДоходов = Ложь;
	
	// инициализация списка счетов доходов, на которых можно устанавливать дополнительную аналитику "Подразделения"	
	СчетаДоходов = Новый СписокЗначений;
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_); //6000
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования); //6100
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_); //6200
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_); //6300
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия); //6400

	// инициализация списка счетов затрат, на которых можно устанавливать дополнительную аналитику "Подразделения"	
	СчетаЗатрат = Новый СписокЗначений;
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_); //7000
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование); //7300
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_); //7400
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_); //7500
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия); //7600
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_); //7700

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Типовой.СчетДт,
	               |	Типовой.СчетКт,
	               |	Типовой.Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой КАК Типовой
	               |ГДЕ               
	               |	(Типовой.СчетДт В ИЕРАРХИИ (&Счета)
	               |			ИЛИ Типовой.СчетКт В ИЕРАРХИИ (&Счета))
	               |	И Типовой.Активность = ИСТИНА";
	
	// необходимо проверить, есть ли обороты на счетах доходов
	//
	Запрос.УстановитьПараметр("Счета",СчетаДоходов);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьОборотыНаСчетахДоходов = Истина;
	КонецЕсли;	
	
	// еще нужно проверить, есть ли обороты на счетах затрат
	Запрос.УстановитьПараметр("Счета",СчетаЗатрат);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьОборотыНаСчетахЗатрат = Истина;
	КонецЕсли;
	
	Если ЕстьОборотыНаСчетахДоходов Или ЕстьОборотыНаСчетахЗатрат Тогда
		Если ТекущееЗначениеВестиУчетПоПодразделениям = Истина Тогда
			ТекстВопроса = НСтр("ru = 'На счетах доходов и затрат будет снята аналитика ""Подразделения""!
			|В данный момент на этих счетах имеются обороты.
			|Вы хотите снять аналитику?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'На счетах доходов и затрат будет установлена аналитика ""Подразделения""!
			|В данный момент на этих счетах имеются обороты.
			|Вы хотите установить аналитику?'");
		КонецЕсли;
		Результат.Вставить("ВозможноИзменениеНастройки", Истина);
		Результат.Вставить("ТекстВопроса"              , ТекстВопроса);
	Иначе 
		Результат.Вставить("ВозможноИзменениеНастройки", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможноИзменениеПараметровУчетаПоСотрудникам(ТекущееЗначениеВестиУчетПоСотрудникам, СчетаЗП)
	
	Результат = Новый Структура("ВозможноИзменениеНастройки", Истина);
	
	ЕстьОборотыНаСчетахЗП = Ложь;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", СчетаЗП);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Таблица.СчетДт,
	               |	Таблица.СчетКт,
	               |	Таблица.Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 1
	               |		Типовой.СчетДт КАК СчетДт,
	               |		Типовой.СчетКт КАК СчетКт,
	               |		Типовой.Сумма КАК Сумма
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой КАК Типовой
	               |	ГДЕ
	               |		(Типовой.СчетДт В (&Счета)
	               |				ИЛИ Типовой.СчетКт В (&Счета))
	               |		И Типовой.Активность = ИСТИНА
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ ПЕРВЫЕ 1
	               |		Налоговый.СчетДт,
	               |		Налоговый.СчетКт,
	               |		Налоговый.Сумма
	               |	ИЗ
	               |		РегистрБухгалтерии.Налоговый КАК Налоговый
	               |	ГДЕ
	               |		(Налоговый.СчетДт В (&Счета)
	               |				ИЛИ Налоговый.СчетКт В (&Счета))
	               |		И Налоговый.Активность = ИСТИНА) КАК Таблица";
	
	// необходимо проверить, есть ли обороты на счетах ЗП
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьОборотыНаСчетахЗП = Истина;
	КонецЕсли;	
	
	Если ТекущееЗначениеВестиУчетПоСотрудникам Тогда
		// если до этого субконто "Работники организации" было установлено, то можем без всяких проверок снять его, 
		// но должны предупредить пользователей, что последующая установка будет проблемной		
		Если ЕстьОборотыНаСчетахЗП Тогда
			ТекстВопроса = НСтр("ru = 'На счетах зар.платы будет снята аналитика ""Работники организации""!
			                          |В данный момент на этих счетах имеются обороты.
			                          |Вы хотите снять аналитику?'");
									  
			Результат.Вставить("ВозможноИзменениеНастройки", Истина);
			Результат.Вставить("ТекстВопроса", ТекстВопроса);
		КонецЕсли;					
	Иначе
		// если до этого не было установлено субконто "Работники организации", то если есть обороты на счетах зар.платы
		// необходимо отменить проведение документов по з/п, установить признак и перепровести документы
		Если ЕстьОборотыНаСчетахЗП Тогда
			ТекстВопроса = НСтр("ru = 'На счетах зар.платы будет установлена аналитика ""Работники организации""!
			                          |В данный момент на этих счетах имеются обороты.
			                          |Для установки аналитики требуется снять с проведения документы, список которых будет выведен далее.
			                          |При записи значений настроек параметров учета документы будут перепроведены вновь.
									  |
									  |Вы хотите снять с проведения документы по зар.плате и установить аналитический учет по сотрудникам?'");
									  
			Результат.Вставить("ВозможноИзменениеНастройки", Истина);
			Результат.Вставить("ТекстВопроса", ТекстВопроса);
		КонецЕсли;					
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Процедуры установки субконто на счетах

&НаСервере
Процедура ПрименитьПараметрыСубконтоСклады(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, Склады, Суммы, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";

	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	
	ПредставлениеПланаСчетов = Метаданные.ПланыСчетов[ИмяПланаСчетов].Представление();

	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");

				Если Склады = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда

						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;

						Если ЕстьКоличество Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;
							
						Сообщение = Сообщение + НСтр("ru = 'установлено субконто ""Склады"",'");

					КонецЕсли;

				ИначеЕсли Склады = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + НСтр("ru = 'удалено субконто ""Склады"",'");
					КонецЕсли;
						
				КонецЕсли;

				Если Склады Тогда
						
					Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
					Если Субконто.Суммовой <> Суммы Тогда
						Субконто.Суммовой = Суммы;
						Сообщение = Сообщение + НСтр("ru = 'у субконто ""Склады"" изменен признак суммового учета,'");
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, ПредставлениеПланаСчетов, Строка(Объект), Сообщение);
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ПредставлениеПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
				
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыСубконтоПодразделения(ИмяСчета, ИмяПланаСчетов, ВестиПоПодразделениям, ОбработкаПодчиненных = Истина, ТолькоОбороты = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	
	ПредставлениеПланаСчетов = Метаданные.ПланыСчетов[ИмяПланаСчетов].Представление();

	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Подразделения, "ВидСубконто");

				Если ВестиПоПодразделениям = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Подразделения;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = ТолькоОбороты;
												
						Сообщение = Сообщение + НСтр("ru = 'установлено субконто ""Подразделения"",'");

					КонецЕсли;

				ИначеЕсли ВестиПоПодразделениям = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + НСтр("ru = 'удалено субконто ""Подразделения"",'");
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, ПредставлениеПланаСчетов, Строка(Объект), Сообщение);
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ПредставлениеПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
			
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыРасчетов(СчетВзаиморасчетов, ВестиРасчетыПоДокументам)

	ШаблонСообщения = НСтр("ru = 'План счетов ""Типовой"", счет ""%1"": %2'");

	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счета = Новый СписокЗначений();
			Счета.Добавить(СчетВзаиморасчетов);
			
			Для каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами, "ВидСубконто");

				Если НЕ (Субконто = Неопределено) Тогда
					Если Субконто.Предопределенное Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ВестиРасчетыПоДокументам = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда

						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами;
						НовыйВид.Суммовой    = Истина;

						Если Объект.Количественный Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;

						Если Объект.Валютный Тогда
							НовыйВид.Валютный = Истина;
						КонецЕсли;

						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, Строка(Объект), НСтр("ru = 'установлено субконто ""Расчетные документы""'"));
						
					КонецЕсли;

				ИначеЕсли ВестиРасчетыПоДокументам = Ложь Тогда // Удаляем

					Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
						Возврат;
					КонецЕсли;

					Объект.ВидыСубконто.Удалить(Субконто);
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, Строка(Объект), НСтр("ru = 'удалено субконто ""Расчетные документы""'"));

				КонецЕсли;

				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				Если ЗначениеЗаполнено(Сообщение) Тогда 
					ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли;

				Объект.Записать();

			КонецЦикла;

		Исключение

			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Строка(КодСчета), ОписаниеОшибки());
			
			ОбщегоНазначения.СообщитьПользователю(Сообщение);

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыКонтрагентыНалогов(СчетУплатыНалога, ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, ВидУчета = "Бух")
	
	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	ИмяПланаСчетов  = ?(ВидУчета = "Бух",НСтр("ru = 'Типовой'"),НСтр("ru = 'Налоговый'"));
	
	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		// бухгалтерский план счето
		Попытка 			
			
			Объект   = СчетУплатыНалога.ПолучитьОбъект();
			КодСчета = Объект.Код;
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто");
			
			Сообщение = "";
			
			Если ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Истина Тогда // Добавляем 
				
				Если Субконто = Неопределено Тогда
					
					НовыйВид = Объект.ВидыСубконто.Добавить();
					
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;
					НовыйВид.Суммовой    = Истина;
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, ИмяПланаСчетов, Строка(Объект), НСтр("ru = 'установлено субконто ""Контрагенты""'"));
					
				КонецЕсли;
				
			ИначеЕсли ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь Тогда // Удаляем
				
				Если Субконто = Неопределено Тогда 
					Возврат;
				КонецЕсли;
				
				Объект.ВидыСубконто.Удалить(Субконто);
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, ИмяПланаСчетов, Строка(Объект), НСтр("ru = 'удалено субконто ""Контрагенты""'"));
				
			КонецЕсли;
			
			Если Прав(Сообщение, 1) = "," Тогда
				Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение) Тогда 
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЕсли;
			
			Объект.Записать();
			
		Исключение
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ИмяПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
				
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
			
		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетЗП, ИмяПланаСчетов, ВестиПоСотрудникам, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	
	ПредставлениеПланаСчетов = Метаданные.ПланыСчетов[ИмяПланаСчетов].Представление();

	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		Попытка
			
			Объект   = СчетЗП.ПолучитьОбъект();
			КодСчета = Объект.Код;
				
			Сообщение = "";

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");

			Если ВестиПоСотрудникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда
					
					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;

					Если ИмяПланаСчетов = "Типовой" Тогда						
						НовыйВид.Валютный = Истина;
					КонецЕсли;
					
					НовыйВид.Количественный = Истина;
					НовыйВид.Суммовой = Истина;
					
					// для счетов резерва устанавливаем "Только обороты"
					Если СчетЗП = ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430
						ИЛИ СчетЗП = ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430Н
							ИЛИ СчетЗП = ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам Тогда //4230					 
						НовыйВид.ТолькоОбороты = Истина;
					Иначе
						НовыйВид.ТолькоОбороты = Ложь;
					КонецЕсли;
											
					Сообщение = НСтр("ru = 'установлено субконто ""Работники организаций""'");

				КонецЕсли;

			ИначеЕсли ВестиПоСотрудникам = Ложь Тогда // Удаляем

				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = НСтр("ru = 'удалено субконто ""Работники организаций""'");
				КонецЕсли;
					
			КонецЕсли;

			Если Сообщение <> "" Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, ПредставлениеПланаСчетов, Строка(Объект), Сообщение);
				
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЕсли; 

			Объект.Записать();	

		Исключение

			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ПредставлениеПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
			
			ОбщегоНазначения.СообщитьПользователю(Сообщение);

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыСубконтоМОЛ(ИмяСчета, ИмяПланаСчетов, ВестиПоМОЛ, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	
	ПредставлениеПланаСчетов = Метаданные.ПланыСчетов[ИмяПланаСчетов].Представление();
	
	Если ДоступноРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");

				Если ВестиПоМОЛ = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = Ложь;
												
						Сообщение = Сообщение + НСтр("ru = 'установлено субконто ""Работники организации"",'");

					КонецЕсли;

				ИначеЕсли ВестиПоМОЛ = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + НСтр("ru = 'удалено субконто ""Работники организации"",'");
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, ПредставлениеПланаСчетов, Строка(Объект), Сообщение);
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;
					
					ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение

			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ПредставлениеПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
			
			ОбщегоНазначения.СообщитьПользователю(Сообщение);

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыВеденияУчетаПоСотрудникам(Отказ)
	
	ТаблицаДокументовСАналитикойПоСотрудникам = Неопределено;
	Если ВестиУчетПоСотрудникам Тогда 
		ТаблицаДокументовСАналитикойПоСотрудникам = ОтменитьПроведениеДокументов(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//установим субконто РаботникиОрганизации для счетов по зар.плате
	Для Каждого Счет ИЗ СчетаЗП Цикл
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, Счет.Значение.Метаданные().Имя, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;
	
	Если ВестиУчетПоСотрудникам Тогда
		ИмяСобытияЖурналаРегистрации    = НСтр("ru = 'Настройка параметров учета.Ведение учета по сотрудникам'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонСообщенияПроведенДокумент = НСтр("ru = 'Проведен документ ""%1"".'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонСообщенияОперацияБух      = НСтр("ru = 'Проведен документ ""%1"" по регистру бухгалтерии ""%2"", содержащий счет по заработной плате.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонСообщенияНеПроведен       = НСтр("ru = 'Не удалось провести документ ""%1"" по причине: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЕстьОшибки = Ложь;
		Для Каждого Док ИЗ ТаблицаДокументовСАналитикойПоСотрудникам Цикл
			МетаданныеДокумента = Док.Ссылка.Метаданные();
			ВидДокумента = МетаданныеДокумента.Имя;		
			Если ВидДокумента = "ОперацияБух" Тогда
				ДокОперацияБух = Док.Ссылка;
				Попытка 
					НаборЗаписейОперацииБух = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
					НаборЗаписейОперацииБух.Отбор.Регистратор.Установить(ДокОперацияБух);
					НаборЗаписейОперацииБух.Прочитать();
					Для Каждого Запись Из НаборЗаписейОперацииБух Цикл
						Запись.Активность = Истина;
					КонецЦикла;
					Если НаборЗаписейОперацииБух.Модифицированность() Тогда
						НаборЗаписейОперацииБух.Записать(Истина);
						ЗаписьЖурналаРегистрации(
							ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияОперацияБух, ДокОперацияБух, НСтр("ru = 'Типовой'")), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
					КонецЕсли;        					 									 
					НаборЗаписейОперацииНал = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
					НаборЗаписейОперацииНал.Отбор.Регистратор.Установить(ДокОперацияБух);
					НаборЗаписейОперацииНал.Прочитать();
					Для Каждого Запись Из НаборЗаписейОперацииНал Цикл
						Запись.Активность = Истина;
					КонецЦикла;
					Если НаборЗаписейОперацииНал.Модифицированность() Тогда
						НаборЗаписейОперацииНал.Записать(Истина);
						ЗаписьЖурналаРегистрации(
							ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияОперацияБух, ДокОперацияБух, НСтр("ru = 'Налоговый'")), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
					КонецЕсли;
				Исключение
					ЕстьОшибки = Истина;
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияНеПроведен, ДокОперацияБух, ОписаниеОшибки()), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				КонецПопытки;
			Иначе
				Попытка
					ДокументОбъект = Док.Ссылка.ПолучитьОбъект();						
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияПроведенДокумент, Док.Представление), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				Исключение
					ЕстьОшибки = Истина;
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияНеПроведен, Док.Представление, ОписаниеОшибки()), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				КонецПопытки;							
			КонецЕсли;
		КонецЦикла;	
		
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось перепровести некоторые документы. Подробнее см. Журнал регистрации.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьПроведениеДокументов(Отказ)
	
	Если НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеНастроекБухгалтерии") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Пользователь без установленной роли ""Полные права"" или ""Добавление изменение настроек бухгалтерии"" не может производить отмену проведения документов'"),,,,Отказ);
			
		ВестиУчетПоСотрудникам = ПервоначальныеЗначения.ВестиУчетПоСотрудникам;
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоРегистраторам = Новый Запрос;
	ЗапросПоРегистраторам.УстановитьПараметр("Счета",СчетаЗП);
	ЗапросПоРегистраторам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка,
	|	Таблица.Ссылка.Представление КАК Представление
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Типовой.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрБухгалтерии.Типовой КАК Типовой
	|	ГДЕ
	|		(Типовой.СчетДт В (&Счета)
	|				ИЛИ Типовой.СчетКт В (&Счета))
	|		И Типовой.Активность = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Налоговый.Регистратор
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый КАК Налоговый
	|	ГДЕ
	|		(Налоговый.СчетДт В (&Счета)
	|				ИЛИ Налоговый.СчетКт В (&Счета))
	|		И Налоговый.Активность = ИСТИНА) КАК Таблица";
	
	ТаблицаДокументовСАналитикойПоСотрудникам = ЗапросПоРегистраторам.Выполнить().Выгрузить();
	
	// передадим данные для отбора
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ПредставлениеТаблицы");
	ТаблицаОбъектов.Колонки.Добавить("ИмяТаблицы");
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументовОперБух = Новый СписокЗначений;
	ТекущийВидДокумента = Неопределено;
	ВидДокумента = Неопределено;
	
	Для Каждого Док Из ТаблицаДокументовСАналитикойПоСотрудникам Цикл		
		МетаданныеДокумента = Док.Ссылка.Метаданные();
		ВидДокумента = МетаданныеДокумента.Имя;		
		Если ВидДокумента = "ОперацияБух" Тогда
			СписокДокументовОперБух.Добавить(Док.Ссылка);		
			Продолжить;
		КонецЕсли;		
		СписокДокументов.Добавить(Док.Ссылка);		
		Если ВидДокумента <> ТекущийВидДокумента Тогда
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.ПредставлениеТаблицы = МетаданныеДокумента.Синоним;
			НоваяСтрока.ИмяТаблицы = ВидДокумента;
			ТекущийВидДокумента = ВидДокумента;
		КонецЕсли;
	КонецЦикла;    
	ТаблицаОбъектов.Свернуть("ПредставлениеТаблицы, ИмяТаблицы");
	
	ИмяСобытияЖурналаРегистрации   = НСтр("ru = 'Настройка параметров учета.Ведение учета по сотрудникам'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонСообщенияПрочиеДокументы = НСтр("ru = 'Отменено проведение документа ""%1"".'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонСообщенияОперацияБух     = НСтр("ru = 'Отменено проведение документа ""%1"" по регистру бухгалтерии ""%2"", содержащий счет по заработной плате.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонСообщенияНеУдалось       = НСтр("ru = 'Не удалось отменить проведение документа ""%1"" по причине: %2'", ОбщегоНазначения.КодОсновногоЯзыка());

	ЕстьОшибки = Ложь;
	// произведем отмену проведения документов "Операция бух"
	Для Каждого ЭлементСпискаОперацияБух Из СписокДокументовОперБух Цикл
		ДокОперацияБух = ЭлементСпискаОперацияБух.Значение;
		Попытка 
			НаборЗаписейОперацииБух = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
			НаборЗаписейОперацииБух.Отбор.Регистратор.Установить(ДокОперацияБух);
			НаборЗаписейОперацииБух.Прочитать();
			Для Каждого Запись Из НаборЗаписейОперацииБух Цикл
				Запись.Активность = Ложь;						 						 
			КонецЦикла;
			Если НаборЗаписейОперацииБух.Модифицированность() Тогда
				НаборЗаписейОперацииБух.Записать(Истина);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияОперацияБух, ДокОперацияБух, НСтр("ru = 'Типовой'")), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЕсли;        					 									 
			НаборЗаписейОперацииНал = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
			НаборЗаписейОперацииНал.Отбор.Регистратор.Установить(ДокОперацияБух);
			НаборЗаписейОперацииНал.Прочитать();
			Для Каждого Запись Из НаборЗаписейОперацииНал Цикл
				Запись.Активность = Ложь;						 						 
			КонецЦикла;
			Если НаборЗаписейОперацииНал.Модифицированность() Тогда
				НаборЗаписейОперацииНал.Записать(Истина);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияОперацияБух, ДокОперацияБух, НСтр("ru = 'Налоговый'")), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЕсли;        					 									 
		Исключение
			ЕстьОшибки = Истина;
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияНеУдалось, ДокОперацияБух, ОписаниеОшибки()), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СписокДокументов Цикл
		ДокументСсылка = СтрокаТаблицы.Значение;
		Попытка
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();						
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПрочиеДокументы, ДокументСсылка), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Исключение
			ЕстьОшибки = Истина;
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияНеУдалось, ДокументСсылка, ОписаниеОшибки()), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;							
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось отменить проведение некоторых документов. Подробнее см. Журнал регистрации.'"));
	КонецЕсли;

	// проверим наличие оборотов на счетах ЗП
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", СчетаЗП);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.СчетДт,
	|	Таблица.СчетКт,
	|	Таблица.Сумма
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Типовой.СчетДт КАК СчетДт,
	|		Типовой.СчетКт КАК СчетКт,
	|		Типовой.Сумма КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Типовой КАК Типовой
	|	ГДЕ
	|		(Типовой.СчетДт В (&Счета)
	|				ИЛИ Типовой.СчетКт В (&Счета))
	|		И Типовой.Активность = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Налоговый.СчетДт,
	|		Налоговый.СчетКт,
	|		Налоговый.Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый КАК Налоговый
	|	ГДЕ
	|		(Налоговый.СчетДт В (&Счета)
	|				ИЛИ Налоговый.СчетКт В (&Счета))
	|		И Налоговый.Активность = ИСТИНА) КАК Таблица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьОборотыНаСчетахЗП = Истина;
	Иначе
		ЕстьОборотыНаСчетахЗП = Ложь;
	КонецЕсли;	
	Если ЕстьОборотыНаСчетахЗП Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В оборотах счетов по зар.плате имеются движения. Аналитика по сотрудникам не может быть установлена'"), , , , Отказ);
		ВестиУчетПоСотрудникам = ПервоначальныеЗначения.ВестиУчетПоСотрудникам;
		Возврат Неопределено;
	КонецЕсли;			
	
	Возврат ТаблицаДокументовСАналитикойПоСотрудникам;
	
КонецФункции

&НаКлиенте
Процедура ПомощникПереходаНаРегистрТоварыОрганизаций(Команда)
	
	Если НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ <> ТекущиеЗначения.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'Для открытия Помощника необходимо записать значение даты перехода.'");
		Обработчик = Новый ОписаниеОповещения("ПомощникПереходаНаРегистрТоварыОрганизацийЗавершение", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПереходаНаРегистрТоварыОрганизацийЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДатаПереходаНаУчетПоТоварамОрганизацийЗаписатьНаСервере() Тогда
			ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций()
	
	ПараметрыФормы = Новый Структура("ДатаНачала", НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
	ОткрытьФорму("Обработка.ИзменениеНастроекУчета.Форма.ПомощникПереходаНаРегистрТоварыОрганизаций", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ДатаПереходаНаУчетПоТоварамОрганизацийЗаписатьНаСервере()
		
	НачатьТранзакцию();
	
	МенеджерЗаписи = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.СоздатьМенеджерЗначения();	
	МенеджерЗаписи.Значение = НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ;
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось изменить значение константы: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУПриИзменении(Элемент)
	
	Элементы.ПомощникПереходаНаРегистрТоварыОрганизаций.Доступность = ЗначениеЗаполнено(НаборКонстант.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
	
КонецПроцедуры

&НаСервере
Функция ВозможноИзменениеПараметровУчетаТоваровОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыОрганизаций.Товар,
		|	ТоварыОрганизаций.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийБУ КАК ТоварыОрганизаций";
				
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
