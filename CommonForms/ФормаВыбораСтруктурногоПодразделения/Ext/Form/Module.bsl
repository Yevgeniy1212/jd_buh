
////////////////////////////////////////////////////////////////////////////////
// Форма предназначена для выбора структурной единицы в формах объектов конфигурации. 
// Форма должна использоваться при включенной ФО "ПоддержкаРаботыСоСтруктурнымиПодразделениями"
// Параметры формы:
//  Организация - СправочникСсылка.Организации - Выбранная пользователем организация 
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - Выбранное пользователем подразделение организации с признаком "Является структурным подразделением"
//  ДоступноИзменениеОрганизации - Булево - Признак, влияющий на доступность поля ввода "Организация" данной формы
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Организация, СтруктурноеПодразделение, ДоступноИзменениеОрганизации");
	
	Если Параметры.Свойство("РежимРаботы") Тогда
		ЭтаФорма.РежимРаботы = Параметры.РежимРаботы;
		Элементы.ДеревоСтруктурныхПодразделений.ТолькоПросмотр = (Параметры.РежимРаботы <> "ПодборВОтчет" И Параметры.РежимРаботы <> "ПодборВОбработку");
		Элементы.ГруппаУстановкиПометок.Видимость = (Параметры.РежимРаботы = "ПодборВОтчет" ИЛИ Параметры.РежимРаботы = "ПодборВОбработку");
		Элементы.ДеревоСтруктурныхПодразделений.РежимВыбора = (Параметры.РежимРаботы <> "ПодборВОтчет" И  Параметры.РежимРаботы <> "ПодборВОбработку");
	КонецЕсли;
	
	Если ЭтаФорма.РежимРаботы = "ПодборВОбработку" ИЛИ ЭтаФорма.РежимРаботы = "ПодборВОтчет" Тогда
		Элементы.ДеревоСтруктурныхПодразделенийПометка.Видимость = Истина;
	Иначе
		Элементы.ДеревоСтруктурныхПодразделенийПометка.Видимость = Ложь;
	КонецЕсли;
	
	ИсходнаяОрганизация = Организация;
	ИсходноеСтруктурноеПодразделение = СтруктурноеПодразделение;
	
	СписокНастроек = "УчетПоВсемОрганизациям";
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		
		СписокНастроек = СписокНастроек + ",ОсновнаяОрганизация";
		
	КонецЕсли;
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), СписокНастроек);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПользователя);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = НастройкиПользователя.ОсновнаяОрганизация;
		ИсходнаяОрганизация = НастройкиПользователя.ОсновнаяОрганизация;
	КонецЕсли;
	
	Если РежимРаботы <> "ПодборВОтчет" И РежимРаботы <> "ПодборВОбработку" Тогда
		ЗаполнитьДеревоСтруктурныхПодразделений();
	Иначе
		СписокРеквизитов = "СписокСтруктурныхЕдиниц, СписокПодразделений, СписокВладельцевГоловныхПодразделений";
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокРеквизитов);
		Если Параметры.Свойство("ВыборСтруктурныхПодразделений") Тогда
			ПоддержкаРаботыСоСтруктурнымиПодразделениями = Параметры.ВыборСтруктурныхПодразделений;
		КонецЕсли;
		Если РежимРаботы = "ПодборВОтчет" Тогда
			ЗаполнитьДеревоСтруктурныхПодразделенийОтчеты();
		Иначе
			ЗаполнитьДеревоСтруктурныхПодразделений();
		КонецЕсли;					
		УстановитьПометкиНаСервере(ДеревоСтруктурныхПодразделений.ПолучитьЭлементы());
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	Для Каждого ТекЭлементДерева Из ДеревоСтруктурныхПодразделений.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтруктурныхПодразделений.Развернуть(ТекЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоСтруктурныхПодразделений

&НаКлиенте
Процедура ДеревоСтруктурныхПодразделенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РежимРаботы = "ПодборВОтчет" ИЛИ РежимРаботы = "ПодборВОбработку" Тогда
		Элемент.ТекущиеДанные.Пометка = НЕ Элемент.ТекущиеДанные.Пометка;
		ДеревоСтруктурныхПодразделенийПометкаПриИзменении(Элемент.ТекущийЭлемент);
	Иначе
		ВыбратьСтруктурноеПодразделение(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурныхПодразделенийПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктурныхПодразделений.ТекущиеДанные;
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если РежимРаботы <> "ПодборВОтчет" И РежимРаботы <> "ПодборВОбработку" Тогда
		ВыбратьСтруктурноеПодразделение(Элементы.ДеревоСтруктурныхПодразделений.ТекущиеДанные);
	Иначе	
		ВыбратьСписокСтруктурныхПодразделений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	КорневыеСтроки = ДеревоСтруктурныхПодразделений.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Установить", ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	КорневыеСтроки = ДеревоСтруктурныхПодразделений.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Снять", ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	
	КорневыеСтроки = ДеревоСтруктурныхПодразделений.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Инвертировать", ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьСтруктурноеПодразделение(ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока = Неопределено И ДеревоСтруктурныхПодразделений.ПолучитьЭлементы().Количество() <> 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктурноеПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	Если ВыбраннаяСтрока <> Неопределено Тогда 
		СтруктурноеПодразделение = ВыбраннаяСтрока.Ссылка;
	КонецЕсли;
	
	Результат = Новый Структура("Организация, СтруктурноеПодразделение, ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", 
								Организация, 
								СтруктурноеПодразделение,
								Организация <> ИсходнаяОрганизация,
								СтруктурноеПодразделение <> ИсходноеСтруктурноеПодразделение);
								
	Если РежимРаботы = "ВыборЗначенияДоступа" Тогда
		ОповеститьОВыборе(СтруктурноеПодразделение);							
	Иначе								
		Закрыть(Результат);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСписокСтруктурныхПодразделений()
	
	СписокСтруктурныхЕдиниц.Очистить(); 	
	СписокПодразделений.Очистить();
	СписокВладельцевГоловныхПодразделений.Очистить();
	
	//Обработаем полученное дерево
	СписокОтмеченныхСтруктурныхЕдиниц = Новый СписокЗначений;
	ВыгрузитьПомеченныеВСписок(СписокОтмеченныхСтруктурныхЕдиниц, ДеревоСтруктурныхПодразделений);
	
	Если НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СписокПодразделений.Очистить();
		СписокВладельцевГоловныхПодразделений.Очистить();
	КонецЕсли;
	
	Если РежимРаботы = "ПодборВОбработку" Тогда		
		СписокСтруктурныхЕдиниц.Добавить(Организация);		
		СписокВладельцевГоловныхПодразделений.Добавить(Организация);				
	КонецЕсли;
	
	Результат = Новый Структура("СписокСтруктурныхЕдиниц, СписокПодразделений, СписокВладельцевГоловныхПодразделений", СписокСтруктурныхЕдиниц, СписокПодразделений, СписокВладельцевГоловныхПодразделений);
	
	Если РежимРаботы = "ПодборВОбработку" Тогда 
		Если СписокПодразделений.Количество() = 1 И ЗначениеЗаполнено(СписокПодразделений[0].Значение) Тогда
			Результат.Вставить("СтруктурноеПодразделение", СписокПодразделений[0].Значение);
		КонецЕсли;				
		Результат.Вставить("Организация", Организация);
		Результат.Вставить("ИзмененаОрганизация", Организация <> ИсходнаяОрганизация);												
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПомеченныеВСписок(СписокОтмеченных, ДеревоДляВыгрузки)
	
	ЭлементыДерева = ДеревоДляВыгрузки.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Пометка Тогда
				
			Если ТипЗнч(ЭлементДерева.Ссылка) = Тип("СправочникСсылка.Организации")
				И ЭлементДерева.ПолучитьРодителя() <> Неопределено 
				И СписокСтруктурныхЕдиниц.НайтиПоЗначению(ЭлементДерева.Ссылка) = Неопределено Тогда 
				СписокСтруктурныхЕдиниц.Добавить(ЭлементДерева.Ссылка);
			КонецЕсли;
			
			Если ТипЗнч(ЭлементДерева.Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
				ТекущееПодразделение = СписокПодразделений.Добавить(ЭлементДерева.Ссылка);
				Если ЭлементДерева.Ссылка = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда
					// Значение ПодразделенияОрганизаций.ПустаяСсылка соответствует "Головному подразделению"
					// Вышестоящий элемент дерева является организацией-владельцем "Головного подразделения"
					Владелец = ЭлементДерева.ПолучитьРодителя();
					Если Владелец <> Неопределено Тогда
						СписокВладельцевГоловныхПодразделений.Добавить(Владелец.Ссылка);
						ТекущееПодразделение.Представление = "Головное подразделение";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлементДерева.ЕстьПодчиненные Тогда
				ВыгрузитьПомеченныеВсписок(СписокОтмеченных, ЭлементДерева)
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДеревоСтруктурныхПодразделений();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтруктурныхПодразделений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
	               |	ПодразделенияОрганизаций.Представление КАК Представление,
	               |	ПодразделенияОрганизаций.Код КАК Код,
	               |	ПодразделенияОрганизаций.Наименование КАК Наименование,
	               |	ПодразделенияОрганизаций.Родитель КАК Родитель
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
	               |	И ПодразделенияОрганизаций.Владелец = &Владелец
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Владелец", Организация);						  
	Результат = Запрос.Выполнить();	
	
	ДеревоСтруктурныхПодразделений.ПолучитьЭлементы().Очистить();
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Код, Наименование");
	
	// Добавляем строку корневого уровня	
	КорневаяСтрока = ДеревоСтруктурныхПодразделений.ПолучитьЭлементы().Добавить();
	КорневаяСтрока.Код 				= РеквизитыОрганизации.Код;
	КорневаяСтрока.Наименование 	= РеквизитыОрганизации.Наименование;
	
	Если РежимРаботы = "ПодборВОбработку" Тогда
		КорневаяСтрока.Ссылка 			= Организация;
	Иначе
		КорневаяСтрока.Ссылка 			= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
			
	НоваяВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	АктивноеПодразделениеИдентификатор = Неопределено;
	СоздатьГоловноеПодразделение = Ложь;
	Если РежимРаботы = "ПодборВОбработку" Тогда
		СоздатьГоловноеПодразделение = Истина;
	КонецЕсли;
	
	ВыдатьРекурсивноДеревоСтруктурныхПодразделений(КорневаяСтрока, НоваяВыборка, АктивноеПодразделениеИдентификатор, СоздатьГоловноеПодразделение); 
	
	// Позиционирование на строке с выбранным структурным подразделением
	Если ЗначениеЗаполнено(АктивноеПодразделениеИдентификатор) Тогда		
		Элементы.ДеревоСтруктурныхПодразделений.ТекущаяСтрока = АктивноеПодразделениеИдентификатор;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтруктурныхПодразделенийОтчеты()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияОрганизаций.Ссылка КАК Продразделение
		|ПОМЕСТИТЬ ВТ_ОбъектыДоступа
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ГруппыДоступа КАК ГруппыДоступа
		|			ГДЕ
		|				ГруппыДоступа.Ссылка В
		|					(ВЫБРАТЬ
		|						ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|					ИЗ
		|						Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|							ПО
		|								СоставыГруппПользователей.Пользователь = &ТекущийПользователь
		|									И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|				И ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
		|									ПО
		|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|											И Значения.ЗначениеДоступа = ПодразделенияОрганизаций.Ссылка
		|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ = ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|							ГДЕ
		|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(ПодразделенияОрганизаций.Ссылка)
		|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Организации.ГоловнаяОрганизация.Код КАК ГоловнаяОрганизацияКод,
		|	Организации.ГоловнаяОрганизация.Наименование КАК ГоловнаяОрганизацияНаименование,
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК ОрганизацияНаименование,
		|	Организации.Код КАК ОрганизацияКод,
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ПодразделенияОрганизаций.Наименование,
		|	ПодразделенияОрганизаций.Родитель КАК Родитель
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОбъектыДоступа КАК ВТ_ОбъектыДоступа
		|			ПО (ИСТИНА)
		|		ПО Организации.Ссылка = ПодразделенияОрганизаций.Владелец
		|			И (&ПоддержкаРаботыСоСтруктурнымиПодразделениями)
		|			И (ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &УчетПоВсемОрганизациям
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Организации.Ссылка = &ОтборПоОрганизации
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ Организации.Ссылка = Организации.ГоловнаяОрганизация
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	ОрганизацияНаименование
		|ИТОГИ ПО
		|	ГоловнаяОрганизация,
		|	Организация,
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", Организация);
	Запрос.УстановитьПараметр("УчетПоВсемОрганизациям", УчетПоВсемОрганизациям);
	
	ДеревоСтруктурныхПодразделений.ПолучитьЭлементы().Очистить();

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаГоловнаяОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	СоздатьГоловноеПодразделение = УправлениеДоступомБК.ЕстьДоступКГоловномуПодразделению(ТекущийПользователь); 
	
	Пока ВыборкаГоловнаяОрганизация.Следующий() Цикл
		
		ВыборкаОрганизация = ВыборкаГоловнаяОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		// Добавляем строку корневого уровня	
		КорневаяСтрокаГоловнаяОрганизация = ДеревоСтруктурныхПодразделений.ПолучитьЭлементы().Добавить();
		КорневаяСтрокаГоловнаяОрганизация.Код          = ВыборкаГоловнаяОрганизация.ГоловнаяОрганизацияКод;
		КорневаяСтрокаГоловнаяОрганизация.Наименование = ВыборкаГоловнаяОрганизация.ГоловнаяОрганизацияНаименование;
		КорневаяСтрокаГоловнаяОрганизация.Ссылка       = ВыборкаГоловнаяОрганизация.ГоловнаяОрганизация;

		Если ВыборкаОрганизация.Количество() <> 0 Тогда
			КорневаяСтрокаГоловнаяОрганизация.ЕстьПодчиненные = Истина;
		КонецЕсли;	
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			КорневаяСтрока = КорневаяСтрокаГоловнаяОрганизация.ПолучитьЭлементы().Добавить();
			КорневаяСтрока.Код 				= ВыборкаОрганизация.ОрганизацияКод;
			КорневаяСтрока.Наименование 	= ВыборкаОрганизация.ОрганизацияНаименование;
			КорневаяСтрока.Ссылка 			= ВыборкаОрганизация.Организация;				
			
			ВыборкаДетальныеЗаписи = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			АктивноеПодразделениеИдентификатор = Неопределено;
			ВыдатьРекурсивноДеревоСтруктурныхПодразделений(КорневаяСтрока, ВыборкаДетальныеЗаписи, АктивноеПодразделениеИдентификатор, ?(СоздатьГоловноеПодразделение, Истина, Ложь));
			
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыдатьРекурсивноДеревоСтруктурныхПодразделений(КорневаяСтрока, Выборка, АктивноеПодразделениеИдентификатор, СоздатьГоловноеПодразделение = Ложь) 	
	
	Перем НоваяВыборка;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) ИЛИ Выборка.Ссылка = КорневаяСтрока.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		
		КорневаяСтрока.ЕстьПодчиненные = Истина;
		
		Если СоздатьГоловноеПодразделение Тогда
			ГоловноеПодразделение        = КорневаяСтрока.ПолучитьЭлементы().Добавить();
			ГоловноеПодразделение.Ссылка = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ГоловноеПодразделение.Наименование = "Головное подразделение";
			СоздатьГоловноеПодразделение = Ложь;
		КонецЕсли;
		
		НоваяСтрока = КорневаяСтрока.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			НоваяВыборка  = Выборка.Выбрать(СпособВыборки, Выборка.Группировка());
		Иначе
			НоваяВыборка  = Выборка.Выбрать(СпособВыборки);
		КонецЕсли;
		
		Если Выборка.Ссылка = СтруктурноеПодразделение И РежимРаботы <> "ПодборВОтчет" Тогда 
			АктивноеПодразделениеИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		ВыдатьРекурсивноДеревоСтруктурныхПодразделений(НоваяСтрока, НоваяВыборка, АктивноеПодразделениеИдентификатор, СоздатьГоловноеПодразделение);
	
	КонецЦикла;
	
КонецПроцедуры // ВыдатьРекурсивноДеревоСтруктурныхПодразделений()

&НаСервере
Процедура УстановитьПометкиНаСервере(ДеревоДляПометки)
	
	ГоловноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Для Каждого ЭлементДерева Из ДеревоДляПометки Цикл
		
		Если СписокСтруктурныхЕдиниц.НайтиПоЗначению(ЭлементДерева.Ссылка) <> Неопределено Тогда
		    ЭлементДерева.Пометка = Истина;
			Владелец = ЭлементДерева.ПолучитьРодителя();
			Если Владелец <> Неопределено Тогда
				Владелец.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СписокПодразделений.НайтиПоЗначению(ЭлементДерева.Ссылка) <> Неопределено Тогда
			Если ЭлементДерева.Ссылка = ГоловноеПодразделение Тогда
				Владелец = ЭлементДерева.ПолучитьРодителя();
				Если Владелец <> Неопределено И СписокВладельцевГоловныхПодразделений.НайтиПоЗначению(Владелец.Ссылка) <> Неопределено Тогда
					ЭлементДерева.Пометка = Истина;
				КонецЕсли;
			Иначе
			    ЭлементДерева.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Если ВложенныеЭлементы.Количество() <> 0 Тогда
			УстановитьПометкиНаСервере(ВложенныеЭлементы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям ИЛИ НЕ ДоступноИзменениеОрганизации;
	
	Если РежимРаботы = "ПодборВОтчет" Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.ДеревоСтруктурныхПодразделенийНаименование.Заголовок = НСтр("ru='Организация'");
	КонецЕсли;
	
	Элементы.ГруппаУстановкиПометок.Видимость = (РежимРаботы = "ПодборВОтчет" ИЛИ РежимРаботы = "ПодборВОбработку");
	
КонецПроцедуры

&НаКлиенте
// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекущаяСтрока)
	
	Если НЕ ТекущаяСтрока.Пометка Тогда
		Возврат;
	КонецЕсли;

	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Родитель.Пометка = Истина;
	
	УстановитьПометкиРодителей(Родитель);

КонецПроцедуры // УстановитьПометкиРодителей()

&НаКлиенте
// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекущаяСтрока)

	Пометка	= ТекущаяСтрока.Пометка;
	Подчиненные	= ТекущаяСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого Подчиненный из Подчиненные Цикл
			Подчиненный.Пометка = Пометка;
			УстановитьПометкиПодчиненных(Подчиненный);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

&НаКлиенте
// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометки(ВидКоманды, ТекущаяСтрока)
	
	Если ВидКоманды = "Установить" Тогда
		ТекущаяСтрока.Пометка = Истина;
	ИначеЕсли ВидКоманды = "Снять" Тогда
		ТекущаяСтрока.Пометка = Ложь;
	ИначеЕсли ВидКоманды = "Инвертировать" Тогда
		ТекущаяСтрока.Пометка = НЕ ТекущаяСтрока.Пометка;
	КонецЕсли;

	Подчиненные	= ТекущаяСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого Подчиненный из Подчиненные Цикл
			УстановитьПометки(ВидКоманды, Подчиненный);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()


