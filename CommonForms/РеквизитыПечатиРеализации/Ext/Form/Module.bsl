
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца");
	
	СтруктураПараметров = ИзменяемыеРеквизиты(Параметры);
	
	МассивЭлементов = Новый Массив();
	
	Для Каждого ЭлементСтруктуры из СтруктураПараметров Цикл
		МассивЭлементов.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;

	Если ТолькоПросмотр Тогда 	
				
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;  
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		МетаданныеДокумента = Метаданные.Документы[Параметры.ТипОбъекта];
		ИмяРеквизита = Элемент;
		//Если Параметры.ТипОбъекта = "СчетФактураВыданный"  И ИмяРеквизита =  "АдресДоставки" Тогда
		//	ИмяРеквизита = "ПунктНазначения";
		//	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресДоставки", "Заголовок", "Пункт назначения");					
		//КонецЕсли;
		
		// скрываем видимость Дата подписания ГЗ для документов РТУ, Акт об оказании производственных услуг, Реализация услуг по переработке
		
		Если (Параметры.ТипОбъекта = "РеализацияТоваровУслуг" ИЛИ Параметры.ТипОбъекта = "РеализацияУслугПоПереработке" ИЛИ Параметры.ТипОбъекта = "АктОбОказанииПроизводственныхУслуг") И ИмяРеквизита =  "ДатаПодписанияГЗ"  Тогда 
			//Если (Параметры.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа")
			//	ИЛИ ЗначениеЗаполнено(Параметры.ДатаДокументаГЗ) ИЛИ ЗначениеЗаполнено(Параметры.НомерДокументаГЗ)) 	Тогда
			//	
			//	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаДокументаГЗ", "Видимость", Истина);
			//	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерДокументаГЗ", "Видимость", Истина);
			//Иначе
			//	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаДокументаГЗ", "Видимость", Ложь);
			//	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерДокументаГЗ", "Видимость", Ложь);
			//	
			//КонецЕсли;	
			Если (Параметры.ТипОбъекта = "РеализацияТоваровУслуг") И Параметры.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде")
			     И (ЗначениеЗаполнено(Параметры.ДатаДокументаГЗ) ИЛИ ЗначениеЗаполнено(Параметры.НомерДокументаГЗ) ) Тогда
				 ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПодписанияГЗ", "Видимость", Истина);
				 ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПодписанияГЗ", "ТолькоПросмотр", Истина);
			 Иначе
				 ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПодписанияГЗ", "Видимость", Ложь);
			 КонецЕсли;
			 
		КонецЕсли; 
		
		Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитДокумента(ИмяРеквизита,МетаданныеДокумента) Тогда
			ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элемент, "Видимость", Ложь);		
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.ТипОбъекта = "ВозвратТоваровПоставщику" Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПокупатель", "Заголовок", НСтр("ru = 'Реквизиты доставки'"));
	КонецЕсли; 
	
	Если НЕ Элементы.ДатаНачалаОтчетногоПериода.Видимость Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДополнительнаяИнформация", "Видимость", Ложь);		
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ДоверенностьДата) Тогда
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдалитьДоверенность", "Видимость", Ложь);		
	Иначе
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдалитьДоверенность", "Видимость", ЗначениеЗаполнено(УдалитьДоверенность));				
	КонецЕсли;   
	
	Если Элементы.УсловияПоставки.Видимость Тогда
		ОбновитьПредставлениеЭлемента("УсловияПоставки");
	КонецЕсли;
	Элементы.ГруппаУсловияПоставки.Видимость = Элементы.УсловияПоставки.Видимость;
	
	Если Элементы.СпособОтправленияПоКлассификатору.Видимость Тогда
		ОбновитьПредставлениеЭлемента("СпособОтправленияПоКлассификатору");
	КонецЕсли;
	Элементы.ГруппаСпособОтправленияПоКлассификатору.Видимость = Элементы.СпособОтправленияПоКлассификатору.Видимость;
	
	Если Не ЗначениеЗаполнено(СпособОтправления) Тогда
		Элементы.СпособОтправления.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("УсловияПоставки") Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				УсловияПоставки = ВыбранноеЗначение;
				ОбновитьПредставлениеЭлемента("УсловияПоставки");
			Иначе 
				УсловияПоставки										   = ВыбранноеЗначение.КодСтроки;
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = ВыбранноеЗначение.Наименование;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		ИначеЕсли ВРег(ИсточникВыбора.ИмяМакета) = ВРег("СпособыОтправления") Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				СпособОтправленияПоКлассификатору = ВыбранноеЗначение;
				ОбновитьПредставлениеЭлемента("СпособОтправленияПоКлассификатору");
			Иначе 
				СпособОтправленияПоКлассификатору										 = ВыбранноеЗначение.КодСтроки;
				Элементы.ДекорацияРасшифровкаСпособОтправленияПоКлассификатору.Заголовок = ВыбранноеЗначение.Наименование;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзменяемыеРеквизиты(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаОкончанияОтчетногоПериода",  Источник.ДатаОкончанияОтчетногоПериода);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Источник.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Источник.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Источник.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Источник.ДоверенностьНомер);	
	СтруктураПараметров.Вставить("УдалитьДоверенность",            Источник.УдалитьДоверенность);	
	СтруктураПараметров.Вставить("АдресДоставки",                  Источник.АдресДоставки);
	СтруктураПараметров.Вставить("Грузополучатель",                Источник.Грузополучатель);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Источник.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("ПереченьДокументации",      	   Источник.ПереченьДокументации);
	СтруктураПараметров.Вставить("ДатаНачалаОтчетногоПериода",     Источник.ДатаНачалаОтчетногоПериода); 	
	СтруктураПараметров.Вставить("УсловияОплаты", 				   Источник.УсловияОплаты);
	СтруктураПараметров.Вставить("Грузоотправитель",  			   Источник.Грузоотправитель);
	СтруктураПараметров.Вставить("СпособОтправления",  			   Источник.СпособОтправления); 	
	СтруктураПараметров.Вставить("ПунктНазначения",                Источник.ПунктНазначения);
	СтруктураПараметров.Вставить("НомерДокументаГЗ",               Источник.НомерДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаДокументаГЗ",                Источник.ДатаДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаПодписанияГЗ",               Источник.ДатаПодписанияГЗ);
	
	Если ТипЗнч(Источник) <> Тип("ФормаКлиентскогоПриложения") Тогда
		СтруктураПараметров.Вставить("УсловияПоставки",
			?(Источник.Свойство("УсловияПоставки"),                       Источник.УсловияПоставки,""));
		СтруктураПараметров.Вставить("СпособОтправленияПоКлассификатору", 
			?(Источник.Свойство("СпособОтправленияПоКлассификатору"),     Источник.СпособОтправленияПоКлассификатору,""));
	Иначе //источник упр. форма
		СтруктураПараметров.Вставить("УсловияПоставки",                   Источник.УсловияПоставки);
		СтруктураПараметров.Вставить("СпособОтправленияПоКлассификатору", Источник.СпособОтправленияПоКлассификатору);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ТолькоПросмотр И Модифицированность Тогда
		СохранитьПараметры = Истина;
	КонецЕсли;
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не СохранитьПараметры  Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Реквизиты печати были изменены. Закрыть форму без сохранения реквизитов?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеЗакрывать" Тогда
			Отказ = Истина;
			СохранитьПараметры = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если СохранитьПараметры Тогда
		
		СтруктураПараметров = ИзменяемыеРеквизиты(ЭтаФорма);
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	АдресДоставки = "";

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработчик           = Новый ОписаниеОповещения("АдресДоставкиЗавершениеВыбора", ЭтотОбъект, Новый Структура("КонтактнаяИнформация"));
	Режим                = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	КонтрагентАдресаДоставки = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Контрагент);
	
	СтруктураОтбора = Новый Структура("Объект, Тип", КонтрагентАдресаДоставки, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, Отбор", Истина, Истина, СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.КонтактнаяИнформация.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент); 

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.КонтактнаяИнформация") Тогда
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("КонтактнаяИнформация") Тогда
			АдресДоставки = Параметры.КонтактнаяИнформация;
		КонецЕсли;
	Иначе
		АдресДоставки = ВыбранноеЗначение;	
	КонецЕсли;
	
	ПунктНазначения = АдресДоставки;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.КонтактнаяИнформация") Тогда
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("КонтактнаяИнформация") Тогда
			ПунктНазначения = Параметры.КонтактнаяИнформация;
		КонецЕсли;
	Иначе
		ПунктНазначения = ВыбранноеЗначение;	
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период.ДатаНачала	= ДатаНачалаОтчетногоПериода;
	Диалог.Период.ДатаОкончания = ДатаОкончанияОтчетногоПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
    	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, Параметры) Экспорт

   Если Период <> Неопределено Тогда
      
      ДатаНачалаОтчетногоПериода    = Период.ДатаНачала;
      ДатаОкончанияОтчетногоПериода = Период.ДатаОкончания;
   
   КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "ПереченьДокументации");

    Оповещение = Новый ОписаниеОповещения("ПереченьДокументацииЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
   
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
             Оповещение,                                                   
			 ПереченьДокументации,
             НСтр("ru='Перечень документации'"));

КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументацииЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено И Строка <> ПереченьДокументации Тогда
		
		ПереченьДокументации = Строка;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработчик           = Новый ОписаниеОповещения("ПунктНазначенияЗавершениеВыбора", ЭтотОбъект, Новый Структура("КонтактнаяИнформация"));
	Режим                = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	КонтрагентАдресаДоставки = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Контрагент);
	
	СтруктураОтбора = Новый Структура("Объект, Тип", КонтрагентАдресаДоставки, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, Отбор", Истина, Истина, СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.КонтактнаяИнформация.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	ПунктНазначения = АдресДоставки;
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиПриИзменении(Элемент)
	
	ОбновитьПредставлениеЭлемента("УсловияПоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "УсловияПоставки");
	ПараметрыФормы.Вставить("ИмяСекции"			  , "Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(УсловияПоставки), Неопределено, СокрЛП(УсловияПоставки)));
	ПараметрыФормы.Вставить("ЯзыкМакета", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуПриИзменении(Элемент)
	
	ОбновитьПредставлениеЭлемента("СпособОтправленияПоКлассификатору");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "СпособыОтправления");
	ПараметрыФормы.Вставить("ИмяСекции"			  , "Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(СпособОтправленияПоКлассификатору), Неопределено, СокрЛП(СпособОтправленияПоКлассификатору)));
	ПараметрыФормы.Вставить("ЯзыкМакета", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "УсловияПоставки" Тогда
		
		Если ПустаяСтрока(УсловияПоставки) Тогда
			Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НСтр("ru ='<не указано>'");
		Иначе
			
			Если МакетКодовСтрокУсловияПоставки.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокУсловияПоставки = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УсловияПоставки");
				МакетКодовСтрокУсловияПоставки.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			КонецЕсли;
			
			ОбластьСтрок = МакетКодовСтрокУсловияПоставки.Области.Найти("Классификатор");
			
			НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокУсловияПоставки, ОбластьСтрок, УсловияПоставки);
			
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'строка с кодом %1 не найдена.'"), СокрЛП(УсловияПоставки));
			Иначе
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НаименованиеСтроки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СпособОтправленияПоКлассификатору" Тогда
		
		Если ПустаяСтрока(СпособОтправленияПоКлассификатору) Тогда
			Элементы.ДекорацияРасшифровкаСпособОтправленияПоКлассификатору.Заголовок = НСтр("ru ='<не указано>'");
		Иначе
			
			Если МакетКодовСтрокСпособОтправленияПоКлассификатору.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокСпособОтправленияПоКлассификатору = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СпособыОтправления");
				МакетКодовСтрокСпособОтправленияПоКлассификатору.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			КонецЕсли;
			
			ОбластьСтрок = МакетКодовСтрокСпособОтправленияПоКлассификатору.Области.Найти("Классификатор");
			
			НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокСпособОтправленияПоКлассификатору, ОбластьСтрок, СпособОтправленияПоКлассификатору);
			
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаСпособОтправленияПоКлассификатору.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'строка с кодом %1 не найдена.'"), СокрЛП(СпособОтправленияПоКлассификатору));
			Иначе
				Элементы.ДекорацияРасшифровкаСпособОтправленияПоКлассификатору.Заголовок = НаименованиеСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

