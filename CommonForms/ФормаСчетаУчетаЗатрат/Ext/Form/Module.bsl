
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ТипДокумента = "ПоступлениеДопРасходов" Тогда
		ЭтаФорма.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ПустаяСсылка");
	ИначеЕсли Параметры.ТипДокумента = "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС" Тогда 
		ЭтаФорма.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЦеляхНДС.ПустаяСсылка");
	ИначеЕсли Параметры.ТипДокумента = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов" Тогда
		Этаформа.Заголовок = НСтр("ru = 'Счета расчетов'");
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца");
	
	СтруктураПараметров = ИзменяемыеРеквизиты(Параметры);
	
	ЭтотОбъект.ЗначенияПриОткрытии = СтруктураПараметров;
	
	МассивЭлементов = Новый Массив();
	
	Для Каждого ЭлементСтруктуры из СтруктураПараметров Цикл
		МассивЭлементов.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;

	Если ТолькоПросмотр Тогда 	
				
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;  

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли  Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ПеренестиВДокумент И Модифицированность Тогда
		
		СтруктураРезультат = Новый Структура();
		
		Если ТипДокумента = "ПоступлениеДопРасходов" Тогда
			
			СтруктураРезультат.Вставить("СчетБУ", 	  	 ЭтотОбъект.СчетБУ);
			СтруктураРезультат.Вставить("СубконтоБУ1",   ЭтотОбъект.СубконтоБУ1);
			СтруктураРезультат.Вставить("СубконтоБУ2",   ЭтотОбъект.СубконтоБУ2);
			СтруктураРезультат.Вставить("СубконтоБУ3",	 ЭтотОбъект.СубконтоБУ3);
			
			СтруктураРезультат.Вставить("СчетНУ", 	  	 ЭтотОбъект.СчетНУ);
			СтруктураРезультат.Вставить("СубконтоНУ1",   ЭтотОбъект.СубконтоНУ1);
			СтруктураРезультат.Вставить("СубконтоНУ2",   ЭтотОбъект.СубконтоНУ2);
			СтруктураРезультат.Вставить("СубконтоНУ3",   ЭтотОбъект.СубконтоНУ3);
			
		ИначеЕсли ТипДокумента = "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС" ИЛИ
			ТипДокумента = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов" Тогда
			
			СтруктураРезультат.Вставить("СчетЗатратНДСБУ", 	  	  ЭтотОбъект.СчетБУ);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСБУ1",   ЭтотОбъект.СубконтоБУ1);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСБУ2",   ЭтотОбъект.СубконтоБУ2);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСБУ3",	  ЭтотОбъект.СубконтоБУ3);
			
			СтруктураРезультат.Вставить("СчетЗатратНДСНУ", 	  	  ЭтотОбъект.СчетНУ);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСНУ1",   ЭтотОбъект.СубконтоНУ1);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСНУ2",   ЭтотОбъект.СубконтоНУ2);
			СтруктураРезультат.Вставить("СубконтоЗатратНДСНУ3",   ЭтотОбъект.СубконтоНУ3);
			
		КонецЕсли;
		
		ОповеститьОВыборе(СтруктураРезультат);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолей

&НаКлиенте
Процедура СчетБУПриИзменении(Элемент)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(ЭтотОбъект.СчетБУ, ЭтотОбъект, ПоляФормы);

	ЭтотОбъект.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ЭтотОбъект.СчетБУ));

	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоБУ1", "ЗаголовокСубконтоБУ2", "ЗаголовокСубконтоБУ3"); 
		
	Если ЭтотОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда 
		НекорректныеСчетаНУ = Новый СписокЗначений();
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ОсновноеПроизводство"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПроизводствоИзДавальческогоСырья"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ВспомогательныеПроизводства"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НакладныеРасходы"));
		
		Если НЕ НекорректныеСчетаНУ.НайтиПоЗначению(ЭтотОбъект.СчетНУ) = Неопределено Тогда
			Текст = "ru = ""Производственный счет нельзя выбрать!""";
			Сообщить(НСтр(Текст), СтатусСообщения.Внимание);
			ЭтотОбъект.СчетБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
			ЭтотОбъект.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ЭтотОбъект.СчетБУ, ПоляФормы, ЗаголовкиПолей, ЭтотОбъект.СчетНУ);

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(ЭтотОбъект.СчетНУ, ЭтотОбъект, ПоляФормы);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоБУ1, СубконтоБУ2, СубконтоБУ3,
									|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		
	СчетБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СчетНУПриИзменении(Элемент)
	
    ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоНУ1", "ЗаголовокСубконтоНУ2", "ЗаголовокСубконтоНУ3"); 
		
	Если ЭтотОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда 
		НекорректныеСчетаНУ = Новый СписокЗначений();
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ОсновноеПроизводство"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПроизводствоИзДавальческогоСырья"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ВспомогательныеПроизводства"));
		НекорректныеСчетаНУ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НакладныеРасходы"));
			
		Если НЕ НекорректныеСчетаНУ.НайтиПоЗначению(ЭтотОбъект.СчетНУ) = Неопределено Тогда
			Текст = "ru = ""Производственный счет нельзя выбрать!""";
			Сообщить(НСтр(Текст), СтатусСообщения.Внимание);
			ЭтотОбъект.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ЭтотОбъект.СчетНУ, ПоляФормы, ЗаголовкиПолей);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		
	СчетНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, ЭтотОбъект, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, ЭтотОбъект.СчетБУ, ЭтотОбъект.СчетНУ, 1, ЭтотОбъект.СубконтоБУ1, "СубконтоНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ",,Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, ЭтотОбъект.СчетБУ, ЭтотОбъект.СчетНУ, 2, ЭтотОбъект.СубконтоБУ2, "СубконтоНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ",,Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ3ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, ЭтотОбъект.СчетБУ, ЭтотОбъект.СчетНУ, 3, ЭтотОбъект.СубконтоБУ3, "СубконтоНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "БУ", "СчетБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ",,Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  1, "СчетБУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  2, "СчетБУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоБУ",  3, "СчетБУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "НУ", "СчетНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  1, "СчетНУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  2, "СчетНУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоНУ",  3, "СчетНУ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетБУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3", 
											ДанныеОбъекта.СубконтоБУ1, ДанныеОбъекта.СубконтоБУ2, ДанныеОбъекта.СубконтоБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
											ДанныеОбъекта.СубконтоНУ1, ДанныеОбъекта.СубконтоНУ2, ДанныеОбъекта.СубконтоНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетНУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
											ДанныеОбъекта.СубконтоНУ1, ДанныеОбъекта.СубконтоНУ2, ДанныеОбъекта.СубконтоНУ3));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ЭтотОбъект.УчитыватьКПН И Не ЗначениеЗаполнено(ЭтотОбъект.СчетБУ) Тогда
		Текст = НСтр("ru='Поле ""Счет (БУ)"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,,Элементы.СчетБУ, "СчетБУ", Истина);
	ИначеЕсли ЭтотОбъект.УчитыватьКПН Тогда
		ОбязательныеПоляЗаполнены = ЭтаФорма.ПроверитьЗаполнение(); 
		Если ОбязательныеПоляЗаполнены Тогда
			ЗакрытьССохранением();
		КонецЕсли;
	Иначе
		ЗакрытьССохранением();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьССохранением()
	
	ПеренестиВДокумент = Истина;
	
	ЗначенияИзменились = ПроверитьЗначения();
	
	Если ЗначенияИзменились Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзменяемыеРеквизиты(Источник)
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("СчетБУ", 	  	 Источник.СчетБУ);
	СтруктураПараметров.Вставить("СубконтоБУ1",  Источник.СубконтоБУ1);
	СтруктураПараметров.Вставить("СубконтоБУ2",  Источник.СубконтоБУ2);
	СтруктураПараметров.Вставить("СубконтоБУ3",	 Источник.СубконтоБУ3);
	
	СтруктураПараметров.Вставить("СчетНУ", 	  	 Источник.СчетНУ);
	СтруктураПараметров.Вставить("СубконтоНУ1",  Источник.СубконтоНУ1);
	СтруктураПараметров.Вставить("СубконтоНУ2",  Источник.СубконтоНУ2);
	СтруктураПараметров.Вставить("СубконтоНУ3",  Источник.СубконтоНУ3);
			
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УсловияОтбораСчетов = Неопределено;
	ПризнакЗабалансовый = Неопределено;
	ПризнакСчетГруппа   = Ложь; // по умолчанию исключаются запрещенные для использования в проводках счета
	ПризнакВалютный     = Неопределено;
	
	Параметры.Свойство("УсловияОтбораСчетов", УсловияОтбораСчетов);
	
	Если УсловияОтбораСчетов <> Неопределено И ТипЗнч(УсловияОтбораСчетов) = Тип("Структура") Тогда
		
		УсловияОтбораСчетов.Свойство("Забалансовый", ПризнакЗабалансовый);
		УсловияОтбораСчетов.Свойство("Валютный"    , ПризнакВалютный);
		Если УсловияОтбораСчетов.Свойство("ЗапретитьИспользоватьВПроводках") Тогда
			ПризнакСчетГруппа = УсловияОтбораСчетов.ЗапретитьИспользоватьВПроводках;
		КонецЕсли;
		
	КонецЕсли;

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетБУ,, ПризнакВалютный, ПризнакЗабалансовый, ПризнакСчетГруппа);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетНУ,,, ПризнакЗабалансовый, ПризнакСчетГруппа);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоБУ1", "ЗаголовокСубконтоБУ2", "ЗаголовокСубконтоБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ЭтотОбъект.СчетБУ, ПоляФормы, ЗаголовкиПолей, ЭтотОбъект.СчетНУ);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "", ЗаменаСубконтоНУ = Ложь)
	
	Если ИмяТабличнойЧасти = "" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.ЭтотОбъект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.ЭтотОбъект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
	Иначе
		ТекущаяСтрока  = Форма.Элементы.Товары.ТекущаяСтрока;
		ТекущиеДанные = Форма.ЭтотОбъект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
			
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ТоварыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗначения()
	
	Для Каждого Реквизит Из ЗначенияПриОткрытии Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Если ЭтаФорма[ИмяРеквизита] <> Реквизит.Значение Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
				
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.ЭтотОбъект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСчетАналитикаНУ.Видимость = Объект.УчитыватьКПН;
	
	Если Не Объект.УчитыватьКПН Тогда 
		Объект.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", Форма.ЭтотОбъект.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ПараметрыОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);	

	Возврат СписокПараметров;

КонецФункции

#КонецОбласти