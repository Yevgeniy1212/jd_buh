////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ВозможноОткрытьФорму() Тогда
		
		ЕстьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
		ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
		
		Если Параметры.Свойство("ЭтоДокументРозничнойТорговли") И Параметры.ЭтоДокументРозничнойТорговли Тогда
			ЭтоДокументРозничнойТорговли = Истина;
			ОграничитьСписокВыбораТипЦенДляРозничнойТорговли();
		Иначе
			ЭтоДокументРозничнойТорговли = Ложь;
		КонецЕсли;
		
		ВалютаУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ДатаКурсаВзаиморасчетов = Параметры.ДанныеДокумента.Дата;
		ДатаКурсаДокумента = Параметры.ДанныеДокумента.Дата;
		
		СохранитьЗначенияПриОткрытии();
		ЗаполнитьКурсыВалют();
		ЗаполнитьРеквизитыФормы();
		ЗаполнитьСписокВыбораВалютаДокумента();
		ИзменитьФормуЕслиЭтоВызовПриИзмененииДоговора();
		
		УправлениеФормой(ЭтаФорма, Истина);
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	ОбработатьИзмененияТипаЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзмененияТипаЦен(Форма)
	
	Если Форма.УчитыватьНДС ИЛИ Форма.УчитыватьАкциз Тогда
		РеквизитыТипаЦен = РеквизитыТипаЦен(Форма.ТипЦен);
		Форма.СуммаВключаетНДС = ?(Форма.УчитыватьНДС, РеквизитыТипаЦен.ЦенаВключаетНДС, Ложь);
		Форма.СуммаВключаетАкциз = ?(Форма.УчитыватьАкциз, РеквизитыТипаЦен.ЦенаВключаетАкциз, Ложь);
	КонецЕсли;	
	
	Форма.ПерезаполнитьЦены = ЗначениеЗаполнено(Форма.ТипЦен) И НЕ Форма.ТипЦен = Форма.ЗначенияПриОткрытии.ТипЦен;
	
	Форма.Модифицированность = ЗначенияИзменились(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ОбработатьИзменениеВалютыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеВалютыДокумента(Форма)
	
	Если Форма.ВалютаВзаиморасчетов = Форма.ВалютаДокумента Тогда
		Форма.КурсДокумента = Форма.КурсВзаиморасчетов;	
	Иначе
		Форма.КурсДокумента = КурсВалюты(Форма.ВалютаДокумента, Форма.КурсыВалют)	
	КонецЕсли;
	
	Если Форма.ВалютаВзаиморасчетов = Форма.ВалютаДокумента Тогда
		Форма.КратностьДокумента = Форма.КратностьВзаиморасчетов;	
	Иначе
		Форма.КратностьДокумента = КратностьВалюты(Форма.ВалютаДокумента, Форма.КурсыВалют);	
	КонецЕсли;
	
	Форма.ПересчитатьЦены = ?(Форма.ВалютаДокумента = Форма.ЗначенияПриОткрытии.ВалютаДокумента, Ложь, Истина) И Форма.Параметры.ПараметрыОткрытия.ЕстьЗаполненныеТабличныеЧасти;
	
	Форма.Модифицированность = ЗначенияИзменились(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КратностьДокументаПриИзменении(Элемент)
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	КурсДокумента = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КурсВзаиморасчетов, КурсДокумента);	
	КратностьДокумента = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КратностьВзаиморасчетов, КратностьДокумента);
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КратностьВзаиморасчетовПриИзменении(Элемент)
	
	КратностьДокумента = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КратностьВзаиморасчетов, КратностьДокумента);
	
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	Если НЕ УчитыватьНДС Тогда
		СуммаВключаетНДС           = Ложь;	
		ОтложитьПринятиеНДСКЗачету = Ложь;	
		ОтложитьНачислениеНДС      = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)

	Если СуммаВключаетНДС И УчитыватьАкциз Тогда
		СуммаВключаетАкциз = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьАкцизПриИзменении(Элемент)
	
	Если УчитыватьАкциз И СуммаВключаетНДС Тогда
		СуммаВключаетАкциз = Истина;
	ИначеЕсли НЕ УчитыватьАкциз Тогда 
		СуммаВключаетАкциз = Ложь;	
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетАкцизПриИзменении(Элемент)
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НДСВключенВСтоимостьПриИзменении(Элемент)
	Модифицированность = ЗначенияИзменились(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьКурсВзаиморасчетов(Команда)
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаДатыКурсаВзаиморасчетов", ЭтаФорма);
		ПоказатьВводДаты(ОписаниеОповещения, ДатаКурсаВзаиморасчетов, НСтр("ru = 'Дата курса взаиморасчетов'"), ЧастиДаты.Дата);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Валюта взаиморасчетов не задана'"), , "ВалютаВзаиморасчетов");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыКурсаВзаиморасчетов(Дата, Параметры) Экспорт
	
	Если Дата <> Неопределено Тогда
		
		ДатаКурсаВзаиморасчетов = Дата;
		
		КурсКратность = КурсКратность(ВалютаВзаиморасчетов, ДатаКурсаВзаиморасчетов);
		КурсВзаиморасчетов = КурсКратность.Курс;
		КратностьВзаиморасчетов = КурсКратность.Кратность;
		
		КурсДокумента = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КурсВзаиморасчетов, КурсДокумента);
		КратностьДокумента = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КратностьВзаиморасчетов, КратностьДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсДокумента(Команда)
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаДатыКурсаДокумента", ЭтаФорма);
		ПоказатьВводДаты(ОписаниеОповещения, ДатаКурсаДокумента, НСтр("ru = 'Дата курса документа'"), ЧастиДаты.Дата);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Валюта документа не задана'"), , "ВалютаДокумента");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыКурсаДокумента(Дата, Параметры) Экспорт
	
	Если Дата <> Неопределено Тогда
		
		ДатаКурсаДокумента = Дата;
		
		КурсКратность = КурсКратность(ВалютаДокумента, ДатаКурсаДокумента);
		КурсДокумента = КурсКратность.Курс;
		КратностьДокумента = КурсКратность.Кратность;
		
		КурсВзаиморасчетов = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КурсДокумента, КурсВзаиморасчетов);
		КратностьВзаиморасчетов = ?(ВалютаВзаиморасчетов = ВалютаДокумента, КратностьДокумента, КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗакрытьСохраняяИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если Модифицированность ИЛИ ПерезаполнитьЦены ИЛИ ПересчитатьЦены Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗакрытьБезСохраненияИзменений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьСохраняяИзменения();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьБезСохраненияИзменений();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСохраняяИзменения()
	
	Если ФормаЗаполненаКорректно() Тогда
		
		Если Модифицированность ИЛИ ПерезаполнитьЦены ИЛИ ПересчитатьЦены Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ЗначенияПриОткрытии",              ЗначенияПриОткрытии);
			Результат.Вставить("ЗначенияПриЗакрытии",              ЗначенияПриЗакрытии());
			Результат.Вставить("ЗначенияИзменились",               Модифицированность);
			Результат.Вставить("ПерезаполнитьЦеныПоТипуЦен",       ПерезаполнитьЦены);
			Результат.Вставить("ПересчитатьЦеныПоВалютеДокумента", ПересчитатьЦены);		
			Закрыть(Результат);
			
		Иначе
			
			ЗакрытьБезСохраненияИзменений();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезСохраненияИзменений()
	
	Закрыть(Неопределено);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с курсами валют

&НаСервере
Процедура ЗаполнитьКурсыВалют()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних";
    Запрос.УстановитьПараметр("ДатаДокумента", Параметры.ДанныеДокумента.Дата);
	
	КурсыВалют.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КурсВалюты(Знач Валюта, Знач КурсыВалют)
	
	Перем КурсВалюты;
	
	МассивСтрок = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", Валюта));
	КурсВалюты = ?(МассивСтрок.Количество() <> 0, МассивСтрок[0].Курс, 1);
	
	Возврат КурсВалюты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КратностьВалюты(Знач Валюта, Знач КурсыВалют)
	
	Перем КратностьВалюты;
	
	МассивСтрок = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", Валюта));
	КратностьВалюты = ?(МассивСтрок.Количество() <> 0, МассивСтрок[0].Кратность, 1);
	
	Возврат КратностьВалюты;
	
КонецФункции

&НаСервереБезКонтекста
Функция КурсКратность(Знач Валюта, Знач Дата)
	
	КурсКратность = Новый Структура("Курс, Кратность", 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КурсКратность.Курс = Выборка.Курс;
		КурсКратность.Кратность = Выборка.Кратность;		
	КонецЕсли;
	
	Возврат КурсКратность;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

&НаСервере
Функция ВозможноОткрытьФорму()
	
	ВозможноОткрытьФорму = Истина;
	
	ДанныеДокумента = Параметры.ДанныеДокумента;
	
	Если ДанныеДокумента.Свойство("ДоговорКонтрагента") Тогда 
		
		Если НЕ Параметры.ПараметрыОткрытия.БезКонтроляВалютыВзаиморасчетов Тогда
			
			Если ЗначениеЗаполнено(ДанныеДокумента.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДанныеДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда 
				ВозможноОткрытьФорму = Ложь;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не выбрана валюта в договоре контрагента'"), , 
					"Объект.ДоговорКонтрагента");
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозможноОткрытьФорму;
	
КонецФункции

&НаСервере
Процедура ИзменитьФормуЕслиЭтоВызовПриИзмененииДоговора()

	Если НЕ Параметры.ВызовПриИзмененииДоговора Тогда
		Возврат;	
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.ДанныеДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов, ТипЦен");
	
	Если Параметры.ДанныеДокумента.Свойство("ТипЦен") 
	   И Параметры.ДанныеДокумента.ТипЦен <> РеквизитыДоговора.ТипЦен Тогда
	   
		ТипЦен = РеквизитыДоговора.ТипЦен;
		ОбработатьИзмененияТипаЦен(ЭтаФорма);
		
	КонецЕсли;
	                  
	Если Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") 
	   И Параметры.ДанныеДокумента.ВалютаДокумента <> РеквизитыДоговора.ВалютаВзаиморасчетов Тогда
	   
		ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ОбработатьИзменениеВалютыДокумента(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияИзменились(Форма)
	
	ЗначенияИзменились = Ложь; 
	
	Для Каждого НачальноеЗначение Из Форма.ЗначенияПриОткрытии Цикл
		ТекущееЗначение = Форма[НачальноеЗначение.Ключ];
		Если ТекущееЗначение <> НачальноеЗначение.Значение Тогда
			ЗначенияИзменились = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияИзменились;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначенияПриОткрытии()
	
	ЗначенияПриОткрытии = Новый Структура();
	
	Если Параметры.ДанныеДокумента.Свойство("ТипЦен") Тогда
		ЗначенияПриОткрытии.Вставить("ТипЦен", Параметры.ДанныеДокумента.ТипЦен);
	КонецЕсли;
	
	ЗначенияПриОткрытии.Вставить("ВалютаДокумента", ?(Параметры.ДанныеДокумента.Свойство("ВалютаДокумента"), Параметры.ДанныеДокумента.ВалютаДокумента, Справочники.Валюты.ПустаяСсылка()));
	ЗначенияПриОткрытии.Вставить("КурсДокумента", ?(Параметры.ДанныеДокумента.Свойство("КурсДокумента"), Параметры.ДанныеДокумента.КурсДокумента, 0));
	ЗначенияПриОткрытии.Вставить("КратностьДокумента", ?(Параметры.ДанныеДокумента.Свойство("КратностьДокумента"), Параметры.ДанныеДокумента.КратностьДокумента, 0));
	ЗначенияПриОткрытии.Вставить("ВалютаВзаиморасчетов", ?(Параметры.ДанныеДокумента.Свойство("ВалютаВзаиморасчетов"), Параметры.ДанныеДокумента.ВалютаВзаиморасчетов, Справочники.Валюты.ПустаяСсылка()));
	ЗначенияПриОткрытии.Вставить("КурсВзаиморасчетов", ?(Параметры.ДанныеДокумента.Свойство("КурсВзаиморасчетов"), Параметры.ДанныеДокумента.КурсВзаиморасчетов, 0));
	ЗначенияПриОткрытии.Вставить("КратностьВзаиморасчетов", ?(Параметры.ДанныеДокумента.Свойство("КратностьВзаиморасчетов"), Параметры.ДанныеДокумента.КратностьВзаиморасчетов, 0));
	ЗначенияПриОткрытии.Вставить("УчитыватьНДС", ?(Параметры.ДанныеДокумента.Свойство("УчитыватьНДС"), Параметры.ДанныеДокумента.УчитыватьНДС, Ложь));
	ЗначенияПриОткрытии.Вставить("СуммаВключаетНДС", ?(Параметры.ДанныеДокумента.Свойство("СуммаВключаетНДС"), Параметры.ДанныеДокумента.СуммаВключаетНДС, Ложь));
	ЗначенияПриОткрытии.Вставить("УчитыватьАкциз", ?(Параметры.ДанныеДокумента.Свойство("УчитыватьАкциз"), Параметры.ДанныеДокумента.УчитыватьАкциз, Ложь));
	ЗначенияПриОткрытии.Вставить("СуммаВключаетАкциз", ?(Параметры.ДанныеДокумента.Свойство("СуммаВключаетАкциз"), Параметры.ДанныеДокумента.СуммаВключаетАкциз, Ложь));
	ЗначенияПриОткрытии.Вставить("НДСВключенВСтоимость", ?(Параметры.ДанныеДокумента.Свойство("НДСВключенВСтоимость"), Параметры.ДанныеДокумента.НДСВключенВСтоимость, Ложь));
	ЗначенияПриОткрытии.Вставить("ОтложитьПринятиеНДСКЗачету", ?(Параметры.ДанныеДокумента.Свойство("ОтложитьПринятиеНДСКЗачету"), Параметры.ДанныеДокумента.ОтложитьПринятиеНДСКЗачету, Ложь));
	ЗначенияПриОткрытии.Вставить("ОтложитьНачислениеНДС", ?(Параметры.ДанныеДокумента.Свойство("ОтложитьНачислениеНДС"), Параметры.ДанныеДокумента.ОтложитьНачислениеНДС, Ложь));
	
КонецПроцедуры

&НаСервере
Функция ЗначенияПриЗакрытии()
	
	ЗначенияПриЗакрытии = Новый Структура;
	
	Для Каждого НачальноеЗначение Из ЗначенияПриОткрытии Цикл
		ИмяРеквизита = НачальноеЗначение.Ключ;
		ЗначенияПриЗакрытии.Вставить(ИмяРеквизита, ЭтаФорма[ИмяРеквизита]);	
	КонецЦикла;
	
	Возврат ЗначенияПриЗакрытии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	// Установить значения реквизитов формы.
	ТипЦен                     = ?(Параметры.ДанныеДокумента.Свойство("ТипЦен"),                  Параметры.ДанныеДокумента.ТипЦен,                  Неопределено);	
	ВалютаДокумента            = ?(Параметры.ДанныеДокумента.Свойство("ВалютаДокумента"),         Параметры.ДанныеДокумента.ВалютаДокумента,         Неопределено);	
	УчитыватьНДС               = ?(Параметры.ДанныеДокумента.Свойство("УчитыватьНДС"),            Параметры.ДанныеДокумента.УчитыватьНДС,            Неопределено);	
	СуммаВключаетНДС           = ?(Параметры.ДанныеДокумента.Свойство("СуммаВключаетНДС"),        Параметры.ДанныеДокумента.СуммаВключаетНДС,        Неопределено);	
	УчитыватьАкциз             = ?(Параметры.ДанныеДокумента.Свойство("УчитыватьАкциз"),          Параметры.ДанныеДокумента.УчитыватьАкциз,          Неопределено);	
	СуммаВключаетАкциз         = ?(Параметры.ДанныеДокумента.Свойство("СуммаВключаетАкциз"),      Параметры.ДанныеДокумента.СуммаВключаетАкциз,      Неопределено);	
	НДСВключенВСтоимость       = ?(Параметры.ДанныеДокумента.Свойство("НДСВключенВСтоимость"),    Параметры.ДанныеДокумента.НДСВключенВСтоимость,    Неопределено);
	ОтложитьПринятиеНДСКЗачету = ?(Параметры.ДанныеДокумента.Свойство("ОтложитьПринятиеНДСКЗачету"), Параметры.ДанныеДокумента.ОтложитьПринятиеНДСКЗачету,    Неопределено);
	ОтложитьНачислениеНДС      = ?(Параметры.ДанныеДокумента.Свойство("ОтложитьНачислениеНДС"),   Параметры.ДанныеДокумента.ОтложитьНачислениеНДС,    Неопределено);
	
	// Установить реквизит ВалютаВзаиморасчетов.
	Если Параметры.ДанныеДокумента.Свойство("ДоговорКонтрагента") Тогда
		ВалютаВзаиморасчетов = Параметры.ДанныеДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли Параметры.ДанныеДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
		ВалютаВзаиморасчетов = Параметры.ДанныеДокумента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	//Если валюта не передалась, установим по умолчанию валюту регламентированного учета
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) ИЛИ ВалютаВзаиморасчетов = Неопределено Тогда
		ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;	
	
	// Установить реквизиты КурсВзаиморасчетов, КратностьВзаиморасчетов.
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Если ВалютаВзаиморасчетов = ВалютаДокумента И Параметры.ДанныеДокумента.Свойство("КурсВзаиморасчетов") Тогда
			КурсВзаиморасчетов = Параметры.ДанныеДокумента.КурсВзаиморасчетов;
			КратностьВзаиморасчетов = Параметры.ДанныеДокумента.КратностьВзаиморасчетов;
		ИначеЕсли Параметры.ДанныеДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
			КурсВзаиморасчетов = Параметры.ДанныеДокумента.КурсВзаиморасчетов;
			КратностьВзаиморасчетов = Параметры.ДанныеДокумента.КратностьВзаиморасчетов;
		Иначе 
			КурсВзаиморасчетов = КурсВалюты(ВалютаВзаиморасчетов, КурсыВалют);
			КратностьВзаиморасчетов = КратностьВалюты(ВалютаВзаиморасчетов, КурсыВалют);			
		КонецЕсли;
	КонецЕсли;
	
	// Установить реквизиты КурсДокумента, КратностьДокумента.
	Если Параметры.ДанныеДокумента.Свойство("КурсДокумента") И Параметры.ДанныеДокумента.Свойство("КратностьДокумента") Тогда
		КурсДокумента = Параметры.ДанныеДокумента.КурсДокумента;
		КратностьДокумента = Параметры.ДанныеДокумента.КратностьДокумента;		
	Иначе
		// возможна ситуация, когда валюта документа передается, а курс - не передается
		// чтобы при этом не было нулевого курса, будем заполнять его руками
		// в случае наличия курса взаиморасчетов и совпадения валюты взаиморасчетов с валютой
		// документа - будем брать курс взаиморасчетов, иначе - текущий курс
		Если ВалютаДокумента = ВалютаВзаиморасчетов Тогда
			КурсДокумента = КурсВзаиморасчетов;
			КратностьДокумента = КратностьВзаиморасчетов;
		Иначе
			Если Параметры.ДанныеДокумента.Свойство("КурсВзаиморасчетов") И Параметры.ДанныеДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				КурсДокумента = ?(ЗначениеЗаполнено(Параметры.ДанныеДокумента.КурсВзаиморасчетов), Параметры.ДанныеДокумента.КурсВзаиморасчетов,  КурсВалюты(ВалютаДокумента, КурсыВалют));
				КратностьДокумента = ?(ЗначениеЗаполнено(Параметры.ДанныеДокумента.КратностьВзаиморасчетов), Параметры.ДанныеДокумента.КратностьВзаиморасчетов, КратностьВалюты(ВалютаДокумента, КурсыВалют));
			Иначе
				КурсДокумента = КурсВалюты(ВалютаДокумента, КурсыВалют);
				КратностьДокумента = КратностьВалюты(ВалютаДокумента, КурсыВалют);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияПриОткрытии.Вставить("КурсДокумента", КурсДокумента);
	ЗначенияПриОткрытии.Вставить("КратностьДокумента", КратностьДокумента);
	
	ЗначенияПриОткрытии = Новый ФиксированнаяСтруктура(ЗначенияПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВалютаДокумента()
	
	Если Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") Тогда
		
		Если НЕ Параметры.ПараметрыОткрытия.БезКонтроляВалютыВзаиморасчетов Тогда
			
			Элементы.ВалютаДокумента.СписокВыбора.Добавить(ВалютаУчета);
			
			Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) И ВалютаВзаиморасчетов <> ВалютаУчета Тогда
				Элементы.ВалютаДокумента.СписокВыбора.Добавить(ВалютаВзаиморасчетов);
			КонецЕсли;
			
		Иначе 
			
			Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
				
				Запрос = Новый Запрос;
				
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	Валюты.Ссылка КАК Валюта
				|ИЗ
				|	Справочник.Валюты КАК Валюты
				|УПОРЯДОЧИТЬ ПО
				|	Валюта";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ВалютаДокумента = Выборка.Валюта;
				КонецЕсли;
				
				Если Параметры.ПараметрыОткрытия.ЕстьЗаполненныеТабличныеЧасти Тогда
					ПересчитатьЦены = Истина;
				КонецЕсли;
				
			КонецЕсли;
				
			Элементы.ВалютаДокумента.КнопкаВыбора  = Истина;
			Элементы.ВалютаДокумента.РежимВыбораИзСписка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма, СозданиеФормы = Ложь)
	
	Объект = Форма.ЭтотОбъект;
	
	Если СозданиеФормы Тогда
		
		Форма.Элементы.ТипЦен.Видимость                       = Форма.Параметры.ДанныеДокумента.Свойство("ТипЦен");
		Форма.Элементы.ПерезаполнитьЦены.Видимость            = Форма.Параметры.ДанныеДокумента.Свойство("ТипЦен");
		
		Если Не Форма.ЭтоДокументРозничнойТорговли Тогда
			Форма.Элементы.ВалютаДокумента.Видимость              = Форма.Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.КурсДокумента.Видимость                = Форма.Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.КратностьДокумента.Видимость           = Форма.Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.ПересчитатьЦены.Видимость              = Форма.Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.УстановитьКурсДокумента.Видимость      = Форма.Параметры.ДанныеДокумента.Свойство("ВалютаДокумента") И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.ВалютаВзаиморасчетов.Видимость         = ЗначениеЗаполнено(Форма.ВалютаВзаиморасчетов) И Форма.ЕстьВалютныйУчет; 
			Форма.Элементы.КурсВзаиморасчетов.Видимость           = ЗначениеЗаполнено(Форма.ВалютаВзаиморасчетов) И Форма.ЕстьВалютныйУчет; 
			Форма.Элементы.КратностьВзаиморасчетов.Видимость      = ЗначениеЗаполнено(Форма.ВалютаВзаиморасчетов) И Форма.ЕстьВалютныйУчет;
			Форма.Элементы.УстановитьКурсВзаиморасчетов.Видимость = ЗначениеЗаполнено(Форма.ВалютаВзаиморасчетов) И Форма.ЕстьВалютныйУчет;
		Иначе
			Форма.Элементы.ГруппаВалютаДокумента.Видимость 		  = Ложь;
			Форма.Элементы.ГруппаВалютаВзаимозачетов.Видимость	  = Ложь;
			Форма.Элементы.УстановитьКурсВзаиморасчетов.Видимость = Ложь;
			Форма.Элементы.УстановитьКурсДокумента.Видимость 	  = Ложь;
		КонецЕсли;
			
		Форма.Элементы.УчитыватьНДС.Видимость                 = Форма.Параметры.ДанныеДокумента.Свойство("УчитыватьНДС");
		Форма.Элементы.СуммаВключаетНДС.Видимость             = Форма.Параметры.ДанныеДокумента.Свойство("СуммаВключаетНДС");
		Форма.Элементы.УчитыватьАкциз.Видимость               = Форма.Параметры.ДанныеДокумента.Свойство("УчитыватьАкциз");
		Форма.Элементы.СуммаВключаетАкциз.Видимость           = Форма.Параметры.ДанныеДокумента.Свойство("СуммаВключаетАкциз");
		Форма.Элементы.НДСВключенВСтоимость.Видимость         = Форма.Параметры.ДанныеДокумента.Свойство("НДСВключенВСтоимость");	
		Форма.Элементы.ОтложитьПринятиеНДСКЗачету.Видимость   = Форма.Параметры.ДанныеДокумента.Свойство("ОтложитьПринятиеНДСКЗачету");	
		Форма.Элементы.ОтложитьНачислениеНДС.Видимость        = Форма.Параметры.ДанныеДокумента.Свойство("ОтложитьНачислениеНДС");	
		Форма.Элементы.ГруппаЦены.Видимость = Форма.ИспользоватьТипыЦенНоменклатуры;
		
		Форма.Элементы.КурсДокумента.Доступность      = Форма.Параметры.ДанныеДокумента.Свойство("КурсДокумента") И Форма.ЕстьВалютныйУчет;
		Форма.Элементы.КратностьДокумента.Доступность = Форма.Параметры.ДанныеДокумента.Свойство("КратностьДокумента") И Форма.ЕстьВалютныйУчет;
		
		Для Каждого НедоступныйРеквизит Из Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты Цикл
			
			Если НедоступныйРеквизит.Значение <> Неопределено
				И (ТипЗнч(НедоступныйРеквизит.Значение) = Тип("Соответствие")
					ИЛИ ТипЗнч(НедоступныйРеквизит.Значение) = Тип("Структура")) Тогда
					
				Для Каждого СвойствоЭлемента Из НедоступныйРеквизит.Значение Цикл
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Форма.Элементы, НедоступныйРеквизит.Ключ, СвойствоЭлемента.Ключ, СвойствоЭлемента.Значение);
				КонецЦикла;
			Иначе 
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы, НедоступныйРеквизит.Ключ, "Доступность", Ложь);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Форма.Параметры.ПараметрыОткрытия.ЕстьЗаполненныеТабличныеЧасти Тогда 
			Форма.Элементы.ПерезаполнитьЦены.Доступность            = Ложь;
			Форма.Элементы.ПересчитатьЦены.Доступность              = Ложь;
		КонецЕсли;  		
	КонецЕсли;
	
	// Доступность флажка СуммаВключаетНДС.
	Если Форма.УчитыватьНДС Тогда
		Если Форма.ЭтоДокументРозничнойТорговли Тогда
			Форма.Элементы.СуммаВключаетНДС.Доступность = Ложь;
			Объект.СуммаВключаетНДС = Форма.УчитыватьНДС;
		Иначе
			Форма.Элементы.СуммаВключаетНДС.Доступность           = Истина И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("СуммаВключаетНДС");
			Форма.Элементы.ОтложитьПринятиеНДСКЗачету.Доступность = Истина И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("ОтложитьПринятиеНДСКЗачету");
			Форма.Элементы.ОтложитьНачислениеНДС.Доступность      = Истина И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("ОтложитьНачислениеНДС");
		КонецЕсли;
	Иначе
		Форма.Элементы.СуммаВключаетНДС.Доступность           = Ложь;
		Форма.Элементы.ОтложитьПринятиеНДСКЗачету.Доступность = Ложь;	
		Форма.Элементы.ОтложитьНачислениеНДС.Доступность      = Ложь;	
	КонецЕсли;
	Если Не Форма.ТолькоПросмотр Тогда
	
	Форма.Элементы.ОтложитьПринятиеНДСКЗачету.Доступность = (Форма.УчитыватьНДС И НЕ Форма.НДСВключенВСтоимость) 
		И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("ОтложитьПринятиеНДСКЗачету");
	
	Форма.Элементы.ОтложитьНачислениеНДС.Доступность = (Форма.УчитыватьНДС) 
		И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("ОтложитьНачислениеНДС");
		
	Форма.Элементы.НДСВключенВСтоимость.Доступность =  НЕ Форма.ОтложитьПринятиеНДСКЗачету
		И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("НДСВключенВСтоимость");
	Иначе
		Форма.Элементы.ОтложитьПринятиеНДСКЗачету.Доступность = Ложь;
		Форма.Элементы.ОтложитьНачислениеНДС.Доступность      = Ложь;
		Форма.Элементы.НДСВключенВСтоимость.Доступность       = Ложь;
	КонецЕсли;
			
	// Доступность флажка СуммаВключаетАкциз.		
	Если Форма.ЭтоДокументРозничнойТорговли Тогда
		Форма.Элементы.СуммаВключаетАкциз.Доступность = Ложь;
		Объект.СуммаВключаетАкциз = Форма.УчитыватьАкциз;
	Иначе
		Если (НЕ Форма.УчитыватьАкциз) ИЛИ (Форма.УчитыватьАкциз И Форма.СуммаВключаетНДС) Тогда
			Форма.Элементы.СуммаВключаетАкциз.Доступность = Ложь;
		Иначе
			Форма.Элементы.СуммаВключаетАкциз.Доступность = Истина И НЕ Форма.Параметры.ПараметрыОткрытия.НедоступныеРеквизиты.Свойство("СуммаВключаетАкциз");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыТипаЦен(Знач ТипЦен)

	Реквизиты = Новый Структура("ЦенаВключаетНДС, ЦенаВключаетАкциз", 
		ТипЦен.ЦенаВключаетНДС, ТипЦен.ЦенаВключаетАкциз);
		
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Функция ФормаЗаполненаКорректно()

	ЗаполненыКорректно = Истина; 	

	// ТипЦен
	Если ПерезаполнитьЦены И НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Тип цен не задан'"), , "ТипЦен");
		ЗаполненыКорректно = Ложь;
	КонецЕсли;	
	
	// ВалютаДокумента
	Если Элементы.ВалютаДокумента.Видимость И НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Валюта документа не задана'"), , "ВалютаДокумента");	
		ЗаполненыКорректно = Ложь;	
	КонецЕсли;
	
	Если Не ЭтоДокументРозничнойТорговли Тогда
		// КурсВзаиморасчетов	
		Если Элементы.КурсВзаиморасчетов.Видимость И НЕ ЗначениеЗаполнено(КурсВзаиморасчетов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Курс взаиморасчетов не задан'"), , "КурсВзаиморасчетов");	
			ЗаполненыКорректно = Ложь;	
		КонецЕсли;
		
		// КратностьВзаиморасчетов
		Если Элементы.КратностьВзаиморасчетов.Видимость И НЕ ЗначениеЗаполнено(КратностьВзаиморасчетов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Кратность взаиморасчетов не задана'"), , "КратностьВзаиморасчетов");	
			ЗаполненыКорректно = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаполненыКорректно;

КонецФункции

&НаКлиенте
Процедура ОтложитьПринятиеНДСКЗачетуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьСписокВыбораТипЦенДляРозничнойТорговли()
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НовыйПараметрВалюта = Новый ПараметрВыбора("Отбор.ВалютаЦены", ВалютаРеглУчета);
	НовыйПараметрНДС 	= Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС", Истина);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметрВалюта);
	НовыйМассив.Добавить(НовыйПараметрНДС);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТипЦен.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНачислениеНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры
