
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВерсияКонфигурации 								= си_УчетСпецодеждыСервер.НомерВерсииТекущейКонфигурации();
	НоваяВерсияКонфигурации							= си_УчетСпецодеждыСервер.НомерВерсииКонфигурации();
	си_ВерсияКомпонентыСЛК 							= си_ЗащитаКлиентСервер.Версия();
	Если Не ВерсияКонфигурации = НоваяВерсияКонфигурации Тогда 
		Элементы.ТребуетсяОбновление.Заголовок 		= "Необходимо запустить обработку обновления конфигурации";
	Иначе
		Элементы.ТребуетсяОбновление.Заголовок 		= "";
	КонецЕсли;
	ЭтоБСО 											= си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО();
	Если ЭтоБСО Тогда 
		Элементы.ГруппаНастройкиСЛК.Видимость 		= Ложь;
	КонецЕсли;
	ЗагрузитьНастройкиУчетнойПолитики();
	Элементы.ГруппаИстория.Видимость				= Ложь;
	ПроверитьСчетаУчета();
	ПроверитьУчетФЛ();
	//ВерсияКонфигурацииПоставщика 					= Метаданные.Версия;
	//ВерсияИнформационнойБазыКлиента 				= ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя);
	ВерсияБиблиотек		 							= си_ПроцедурыМеханизмаЗащиты.ВерсияБиблиотекЗащиты();
	
	//си_ИнициализацияПараметровПодключения();
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюНормВыдачиНажатие(Элемент)
	Элементы.ГруппаИстория.Видимость 				= Не Элементы.ГруппаИстория.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяКонтрольВыдачиСпецодеждыПоНормамПриИзменении(Элемент)
	ПериодКонтрольНорм = ТекущаяДата();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы 										= Форма.Элементы;
	Элементы.СпособРасчетаНормВыдачи.Доступность 	= Форма.ВедетсяКонтрольВыдачиСпецодеждыПоНормам;
	Элементы.НаименованиеСчетаБУ.Заголовок 			= ПолучитьСвойство(Форма.мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации,"Наименование");
	Элементы.НаименованиеСчетаНУ.Заголовок 			= ПолучитьСвойство(Форма.мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе,"Наименование");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиУчетнойПолитики()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	запрос.Текст = "ВЫБРАТЬ
	               |	си_УчетнаяПолитикаСрезПоследних.Период,
	               |	си_УчетнаяПолитикаСрезПоследних.ВедетсяКонтрольВыдачиСпецодеждыПоНормам,
	               |	си_УчетнаяПолитикаСрезПоследних.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря,
	               |	си_УчетнаяПолитикаСрезПоследних.АмортизироватьМатериалыНаСкладеВМесяцВозврата,
	               |	си_УчетнаяПолитикаСрезПоследних.ПорядокНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.си_УчетнаяПолитика.СрезПоследних(&Период, ) КАК си_УчетнаяПолитикаСрезПоследних";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда 
		СпособРасчетаНормВыдачи 						= Выборка.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря;
		ВедетсяКонтрольВыдачиСпецодеждыПоНормам 		= Выборка.ВедетсяКонтрольВыдачиСпецодеждыПоНормам;
		ПериодКонтрольНорм 								= Выборка.Период;
		АмортизироватьМатериалыНаСкладеВМесяцВозврата	= Выборка.АмортизироватьМатериалыНаСкладеВМесяцВозврата;
		ПорядокНачисленияАмортизации					= Выборка.ПорядокНачисленияАмортизации;
		
		мСпособРасчетаНормВыдачи 						= Выборка.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря;
		мВедетсяКонтрольВыдачиСпецодеждыПоНормам 		= Выборка.ВедетсяКонтрольВыдачиСпецодеждыПоНормам;
		мПериодКонтрольНорм 							= Выборка.Период;
		мАмортизироватьМатериалыНаСкладеВМесяцВозврата	= Выборка.АмортизироватьМатериалыНаСкладеВМесяцВозврата;
		мПорядокНачисленияАмортизации					= Выборка.ПорядокНачисленияАмортизации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не СпособРасчетаНормВыдачи = мСпособРасчетаНормВыдачи 
		ИЛИ Не ПериодКонтрольНорм = мПериодКонтрольНорм
		ИЛИ Не ВедетсяКонтрольВыдачиСпецодеждыПоНормам = мВедетсяКонтрольВыдачиСпецодеждыПоНормам 
		ИЛИ Не АмортизироватьМатериалыНаСкладеВМесяцВозврата = мАмортизироватьМатериалыНаСкладеВМесяцВозврата
		ИЛИ Не ПорядокНачисленияАмортизации = мПорядокНачисленияАмортизации	Тогда 
		ЗаписатьНастройкиВУчетнуюПолитику();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиВУчетнуюПолитику()
	НаборЗаписей 													= РегистрыСведений.си_УчетнаяПолитика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(НачалоДня(ПериодКонтрольНорм));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись 												= НаборЗаписей.Добавить();
		НоваяЗапись.Период 											= ПериодКонтрольНорм;
		НоваяЗапись.ВедетсяКонтрольВыдачиСпецодеждыПоНормам 		= ВедетсяКонтрольВыдачиСпецодеждыПоНормам;
		НоваяЗапись.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря 	= СпособРасчетаНормВыдачи;
		НоваяЗапись.АмортизироватьМатериалыНаСкладеВМесяцВозврата 	= АмортизироватьМатериалыНаСкладеВМесяцВозврата;
		НоваяЗапись.ПорядокНачисленияАмортизации 					= ПорядокНачисленияАмортизации;
		НаборЗаписей.Записать(Истина);
		Элементы.УчетнаяПолитика.Обновить();
		
		мСпособРасчетаНормВыдачи 						= СпособРасчетаНормВыдачи;
		мВедетсяКонтрольВыдачиСпецодеждыПоНормам 		= ВедетсяКонтрольВыдачиСпецодеждыПоНормам;
		мПериодКонтрольНорм 							= ПериодКонтрольНорм;
		мАмортизироватьМатериалыНаСкладеВМесяцВозврата	= АмортизироватьМатериалыНаСкладеВМесяцВозврата;
		мПорядокНачисленияАмортизации					= ПорядокНачисленияАмортизации;
	Иначе
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке("На указанный период уже есть сохраненные настройки норм выдачи");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуОбновленияКонфигурацииНажатие(Элемент)
	си_УчетСпецодеждыКлиент.ПроверкаНеобходимостиОбновления();
	//ФормаОбновления = ПолучитьФорму("Обработка.си_ОбновлениеИнформационнойБазы.Форма.ЗапускОбработчиковОбновления");
	//ФормаОбновления.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСчетаУчета()
	Запрос = Новый Запрос;
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаУчета.Добавить(мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе);
	Запрос.УстановитьПараметр("Счет",СчетаУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Типовой.Период
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой КАК Типовой
	               |ГДЕ
	               |	(Типовой.СчетДт В (&Счет)
	               |			ИЛИ Типовой.СчетКт В (&Счет))";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации) Тогда
			Элементы.си_Константыси_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Доступность = Ложь;
			Элементы.СчетаКомментарий.Заголовок = "Редактирование счетов учета запрещено, т.к. имеются проводки по этим счетам";
		КонецЕсли;
		Если ЗначениеЗаполнено(мКонстанты.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе) Тогда
			Элементы.си_Константыси_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Доступность = Ложь;
			Элементы.СчетаКомментарий.Заголовок = "Редактирование счетов учета запрещено, т.к. имеются проводки по этим счетам";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура си_Константыси_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатацииПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура си_Константыси_СчетУчетаСпецоснасткаИСпецодеждаНаСкладеПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение, Свойство)
	Возврат Значение[Свойство];
КонецФункции

&НаСервере
Процедура си_ИнициализацияПараметровПодключения()
	си_АдресСервераСЛК = мКонстанты.си_АдресСервераСЛК;
	си_ПортСервераСЛК = мКонстанты.си_ПортСервераСЛК;
	си_Серия = си_ЗащитаКлиентСервер.Серия();
	Попытка
		си_ВерсияКомпонентыСЛК = си_ЗащитаКлиентСервер.Версия();
	Исключение
	КонецПопытки;
	Попытка
		си_ДанныеСеанса = си_ЗащитаКлиентСервер.ДанныеСеанса();
	Исключение
	КонецПопытки;
	Попытка
		си_ЛицензияДоступна = си_ЗащитаКлиентСервер.ПроверитьЛицензию();
	Исключение
	КонецПопытки;
	Попытка
		Если си_ЛицензияДоступна Тогда
			си_ИнформацияДляОтладки = си_ЗащитаКлиентСервер.ПолучитьОтладочнуюСтроку();
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если си_АдресСервераСЛК="" ИЛИ НРег(си_АдресСервераСЛК)=НРег("localhost") Тогда
		си_Расположение = Перечисления.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере;
		си_АдресСервераСЛК = "localhost";
		си_ПортСервераСЛК = 9099;
	Иначе
		си_Расположение = Перечисления.си_ВариантыРасположенияСервераСЛК.НаКомпьютереВСети;
	КонецЕсли;
	Элементы.си_ПортСервераСЛК.ТолькоПросмотр = (си_Расположение = Перечисления.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере); 
	Элементы.си_АдресСервераСЛК.ТолькоПросмотр = (си_Расположение = Перечисления.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере); 
	
	РезультатУстановкиСоединения = Истина;

КонецПроцедуры

&НаКлиенте
Процедура си_РасположениеПриИзменении(Элемент)
	Если си_Расположение = ПредопределенноеЗначение("Перечисление.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере") Тогда
		си_АдресСервераСЛК = "localhost";
	Иначе
		си_АдресСервераСЛК = "";
	КонецЕсли;
	си_ПортСервераСЛК = 9099;
	Элементы.си_ПортСервераСЛК.ТолькоПросмотр = (си_Расположение = ПредопределенноеЗначение("Перечисление.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере")); 
	Элементы.си_АдресСервераСЛК.ТолькоПросмотр = (си_Расположение = ПредопределенноеЗначение("Перечисление.си_ВариантыРасположенияСервераСЛК.НаЛокальномКомпьютере")); 
КонецПроцедуры

&НаКлиенте
Процедура си_УстановитьСоединение(Команда)
	
	Результат = УстановитьСоединениеССервером();
	си_РезультатУстановкиСоединения = Результат;
	Если Результат И ЭтаФорма.Открыта() Тогда
		//Закрыть(Истина);
	КонецЕсли;
	Если Результат Тогда
		Элементы.си_СостояниеПодключения.Заголовок = "Соединение установлено";
		Элементы.си_СостояниеПодключения.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		Элементы.си_СостояниеПодключения.Заголовок = "Ошибка подключения";
		Элементы.си_СостояниеПодключения.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	Попытка
		си_ВерсияКомпонентыСЛК = си_ЗащитаКлиентСервер.Версия();
	Исключение
	КонецПопытки;
	Попытка
		си_ДанныеСеанса = си_ЗащитаКлиентСервер.ДанныеСеанса();
	Исключение
	КонецПопытки;
	Попытка
		си_ЛицензияДоступна = си_ЗащитаКлиентСервер.ПроверитьЛицензию();
	Исключение
	КонецПопытки;
	Попытка
		си_ИнформацияДляОтладки = си_ЗащитаКлиентСервер.ПолучитьОтладочнуюСтроку();
	Исключение
	КонецПопытки;
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Функция УстановитьСоединениеССервером()
	Константы.си_АдресСервераСЛК.Установить(СокрЛП(си_АдресСервераСЛК));
	Константы.си_ПортСервераСЛК.Установить(си_ПортСервераСЛК);
	
	//Этаформа.Записать();
	Если СокрЛП(си_АдресСервераСЛК)="" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан адрес сервера лицензий!");
		Возврат Ложь;
	КонецЕсли;
	
	Результат = си_ЗащитаКлиентСервер.ЗапускМенеджераЛицензий();
	Если Результат Тогда
		мКонстанты.си_АдресСервераСЛК 	= Константы.си_АдресСервераСЛК.Получить();
		мКонстанты.си_ПортСервераСЛК 	= Константы.си_ПортСервераСЛК.Получить();
	КонецЕсли;
	
	Возврат Результат;
 КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере()
КонецПроцедуры
 
&НаСервере
Процедура ПриЗакрытииНаСервере()
	Если НЕ си_РезультатУстановкиСоединения Тогда 
		//ЗавершитьРаботуСистемы(Ложь);
	  	//Константы.си_АдресСервераСЛК.Установить(мКонстанты.си_АдресСервераСЛК);
	  	//Константы.си_ПортСервераСЛК.Установить(мКонстанты.си_ПортСервераСЛК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Декорация6Нажатие(Элемент)	
	ПерейтиПоНавигационнойСсылке("http://www.1c-rating.kz/sol/clothes");
КонецПроцедуры

&НаКлиенте
Процедура Декорация8Нажатие(Элемент)
	ПерейтиПоНавигационнойСсылке("http://www.1c-rating.kz");
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаНормВыдачиПриИзменении(Элемент)
	ПериодКонтрольНорм = ТекущаяДата();
КонецПроцедуры

&НаСервере
Процедура ПроверитьУчетФЛ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(си_МатериалыВЭксплуатации.Сотрудник) = ТИП(Справочник.ФизическиеЛица)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ФизЛицо
	               |ИЗ
	               |	РегистрНакопления.си_МатериалыВЭксплуатации КАК си_МатериалыВЭксплуатации";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ВедетсяУчетПоФизЛицам = Ложь;
	Элементы.надписьДоступностьФЛ.Видимость = Ложь;
	Если Выборка.Следующий() Тогда
		Элементы.си_ВестиУчетПоФизическимЛицам.Доступность = Ложь;
		Элементы.надписьДоступностьФЛ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНачисленияАмортизацииПриИзменении(Элемент)
	ПериодКонтрольНорм = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура АмортизироватьМатериалыНаСкладеВМесяцВозвратаПриИзменении(Элемент)
	ПериодКонтрольНорм = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура си_ВводНачальныхОстатковСпецодежды(Команда)
	ОткрытьФорму("Документ.си_ВводНачальныхОстатковМатериаловВЭксплуатации.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО() Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации)
			И НЕ ТекущийОбъект.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.ЗапретитьИспользоватьВПроводках Тогда
			ОбщегоНазначения.СообщитьПользователю("Для счета учета спецодежды в эксплуатации не установлен признак запрета использования в проводках!",,,,Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийОбъект.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе)
			И НЕ ТекущийОбъект.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.ЗапретитьИспользоватьВПроводках Тогда
			ОбщегоНазначения.СообщитьПользователю("Для счета учета спецодежды на складе не установлен признак запрета использования в проводках!",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
