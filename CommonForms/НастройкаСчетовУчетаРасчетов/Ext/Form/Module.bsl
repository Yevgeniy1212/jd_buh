////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры формы:
//  Тип - Число - Возможный вариант набора счетов: 1 - покупатель, 2 - поставщик, 3 - другое
//  СписокСчетовРасчета - СписокЗначений - список счетов по умолчанию
// Реквизиты формы:
//  Тип - Число - Возможный вариант набора счетов: 1 - покупатель, 2 - поставщик, 3 - другое
//  СписокСчетов - СписокЗначений - список счетов, исключенных пользователем из участия в расчете.
//  СписокСчетовРасчета - СписокЗначений - список счетов по умолчанию. Заполняется при открытии формы из праметра СписокСчетовРасчета, или фукцией ВозвратитьМассивСчетовДтКтЗадолженности().
//  СписокСчетовПользователя - СписокЗначений - список счетов, добавленных пользователем к предопределенному списку. Используется при Тип=1 или Тип=2.
//  
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Тип = Параметры.Тип;
	Краткосрочная = Параметры.Краткосрочная;
	Долгосрочная  = Параметры.Долгосрочная;
	СписокСчетовРасчета = Параметры.СписокСчетовРасчета;
	
	Если НЕ ЗначениеЗаполнено(СписокСчетовРасчета) Тогда
		
		Если Тип = 1 Тогда
			КредиторскаяЗадолженность = Ложь;
		Иначе
			КредиторскаяЗадолженность = Истина;
		КонецЕсли;
		
		СписокСчетовРасчета.ЗагрузитьЗначения(БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(КредиторскаяЗадолженность, Краткосрочная, Долгосрочная)); 
		
	КонецЕсли;
	
	СписокСчетов = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	Если СписокСчетов = Неопределено Тогда
		СписокСчетов = Новый Массив;
	КонецЕсли;
	
	Если Тип = 3 И ЗначениеЗаполнено(СписокСчетовРасчета) Тогда
		
		Элементы.ТаблицаСчетовРасчетаДобавить.Видимость = Ложь;
		Элементы.ТаблицаСчетовРасчетаУдалить.Видимость  = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Типовой.Ссылка В (&СписокСчетов)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использование,
		|	Типовой.Ссылка КАК Счет,
		|	Ложь КАК ЗапретитьИспользоватьВПроводках,
		|	Типовой.Родитель
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.Ссылка В(&СписокСчетовРасчета)
		|	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Типовой.Порядок";
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
		Запрос.УстановитьПараметр("СписокСчетовРасчета", СписокСчетовРасчета);
		
		ТаблицаСчетовРасчета.Загрузить(Запрос.Выполнить().Выгрузить());
		
	Иначе
		
		СписокСчетовПользователя = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(Тип);
		Если СписокСчетовПользователя = Неопределено Тогда
			СписокСчетовПользователя = Новый Массив;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Типовой.Ссылка,
		|	Типовой.Порядок,
		|	Типовой.Родитель
		|ПОМЕСТИТЬ ВТ_СчетаВзаиморасчетов
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
		|	И Типовой.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры)
		|	И НЕ Типовой.ЗапретитьИспользоватьВПроводках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СчетаВзаиморасчетов.Ссылка
		|ИЗ
		|	ВТ_СчетаВзаиморасчетов КАК ВТ_СчетаВзаиморасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СчетаВзаиморасчетов.Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетаВзаиморасчетов.Ссылка В (&СписокСчетов)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использование,
		|	СчетаВзаиморасчетов.Ссылка КАК Счет,
		|	ЛОЖЬ КАК ЗапретитьИспользоватьВПроводках,
		|	СчетаВзаиморасчетов.Родитель
		|ИЗ
		|	ВТ_СчетаВзаиморасчетов КАК СчетаВзаиморасчетов
		|ГДЕ
		|	(СчетаВзаиморасчетов.Ссылка В ИЕРАРХИИ (&СписокСчетовРасчета)
		|			ИЛИ СчетаВзаиморасчетов.Ссылка В (&СписокСчетовПользователя))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетаВзаиморасчетов.Порядок";
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
		Запрос.УстановитьПараметр("СписокСчетовРасчета", СписокСчетовРасчета);
		Запрос.УстановитьПараметр("СписокСчетовПользователя", СписокСчетовПользователя);
		
		Результат    = Запрос.ВыполнитьПакет();
		
		СписокВсеСчетаВзаиморасчетов.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		ТаблицаСчетовРасчета.Загрузить(Результат[2].Выгрузить());
		
	КонецЕсли;
	
	Элементы.ТаблицаСчетовРасчета.Подсказка = НСтр("ru = 'В таблице приведены счета учета расчетов, по которым формируется отчет.'");
												
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	НовыйСписокСчетов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		Если Не СтрокаТаблицы.Использование Тогда
			НовыйСписокСчетов.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	СписокИзменен = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СписокСчетов, НовыйСписокСчетов);
	Если СписокИзменен Тогда
		БухгалтерскиеОтчетыВызовСервера.СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(НовыйСписокСчетов, Тип);
	КонецЕсли;
	БухгалтерскиеОтчетыВызовСервера.СохранитьСписокСчетовПользователяДляРасчетаЗадолженности(СписокСчетовПользователя, Тип);

	Закрыть(СписокИзменен);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)

	Закрыть(Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТАБЛИЦАСЧЕТОВРАСЧЕТА

&НаКлиенте
Процедура ТаблицаСчетовРасчетаИспользованиеПриИзменении(Элемент)
		
	ЗапретитьИспользоватьВПроводках = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.ЗапретитьИспользоватьВПроводках;
	Родитель                        = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.Родитель;
	Использование                   = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.Использование;
	
	Если ЗапретитьИспользоватьВПроводках Тогда
		ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере();
	ИначеЕсли ЗначениеЗаполнено(Родитель) И Использование Тогда
		ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере(ИзменятьРодителей = Ложь) 
	
	ТекущиеДанные = ТаблицаСчетовРасчета.НайтиПоИдентификатору(Элементы.ТаблицаСчетовРасчета.ТекущаяСтрока);
	
	Если ТекущиеДанные <> Неопределено Тогда
		Счет = ТекущиеДанные.Счет;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
			Если СтрокаТаблицы.Счет = Счет Тогда
				Продолжить;
			КонецЕсли;
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетВИерархии(СтрокаТаблицы.Счет, Счет) Тогда
				СтрокаТаблицы.Использование = ТекущиеДанные.Использование;
			КонецЕсли;
			Если ИзменятьРодителей
				И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетВИерархии(Счет, СтрокаТаблицы.Счет) Тогда
				СтрокаТаблицы.Использование = ТекущиеДанные.Использование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовРасчетаПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ТаблицаСчетовРасчетаУдалить.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСчет = Элемент.ТекущиеДанные.Счет;
	СчетПользователя = СписокСчетовПользователя.НайтиПоЗначению(ТекущийСчет);
	Если СчетПользователя = Неопределено Тогда
		Элементы.ТаблицаСчетовРасчетаУдалить.Доступность = Ложь;
	Иначе
		Элементы.ТаблицаСчетовРасчетаУдалить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовРасчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	ЗначениеОтбора = Новый Структура("Ссылка", СписокВсеСчетаВзаиморасчетов);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ПараметрыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе"           , Истина);
	ПараметрыВыбора.Вставить("РежимВыбора"                  , Истина);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ТаблицаСчетовРасчетаПередНачаломДобавленияЗавершение", ЭтаФорма);

	ОткрытьФорму("ПланСчетов.Типовой.ФормаВыбора", ПараметрыВыбора, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовРасчетаПередНачаломДобавленияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСчетовРасчетаПередНачаломДобавленияЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСчетовРасчетаПередНачаломДобавленияЗавершениеНаСервере(Результат)
	
	СтруктураПоиска = Новый Структура("Счет", Результат);
	НайденныеСчета = ТаблицаСчетовРасчета.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСчета.Количество() = 0 Тогда
		СписокСчетовПользователя.Добавить(Результат);
	Иначе
		ТекстСообщения = НСтр("ru = 'Счет %1 уже добавлен в список счетов!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.Код);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСчетовРасчета.Добавить();
	НоваяСтрока.Использование = Истина;
	НоваяСтрока.Счет          = Результат;
	НоваяСтрока.Родитель      = Результат.Родитель;
	НоваяСтрока.ЗапретитьИспользоватьВПроводках = Ложь;
	Элементы.ТаблицаСчетовРасчета.ТекущаяСтрока = ТаблицаСчетовРасчета.Индекс(НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовРасчетаПередУдалением(Элемент, Отказ)
	
	УдаляемаяСтрока = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные;
	СчетПользователя = СписокСчетовПользователя.НайтиПоЗначению(УдаляемаяСтрока.Счет);
	Если СчетПользователя = Неопределено Тогда
		Отказ = Истина;
	Иначе
		СписокСчетовПользователя.Удалить(СчетПользователя);
	КонецЕсли;
	
КонецПроцедуры
	





