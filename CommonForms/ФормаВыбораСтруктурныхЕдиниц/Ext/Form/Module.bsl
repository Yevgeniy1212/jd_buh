
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Налогоплательщик = Параметры.Налогоплательщик;
	НалоговыйКомитет = Параметры.НалоговыйКомитет;
	
	Если Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнымОрганизациям"
		 ИЛИ Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнойОрганизацииДляУчетаЗарплаты" Тогда
		Элементы.ГруппаПанель.ТекущаяСтраница = Элементы.БухгалтерскийУчет;
	Иначе
		Элементы.ГруппаПанель.ТекущаяСтраница = Элементы.НалоговыйУчет;
	КонецЕсли;

	Если Параметры.ЗапретитьИзменениеПараметровОтбора Тогда
		Элементы.Налогоплательщик.ТолькоПросмотр = Истина;
		Элементы.НалоговыйКомитет.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьДерево();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДерево();
	
	Элементы.СтруктурныеЕдиницыБУПометка.ТриСостояния = Истина;
	Элементы.СтруктурныеЕдиницыНУПометка.ТриСостояния = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	ОбновитьДерево();
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйКомитетПриИзменении(Элемент)
	
	ОбновитьДерево();
	РазвернутьДерево();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СтруктурныеЕдиницы

&НаКлиенте
Процедура СтруктурныеЕдиницыБУПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтруктурныеЕдиницыБУ.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные);
	УстановитьПометкиРодителей(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурныеЕдиницыНУПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтруктурныеЕдиницыНУ.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные);
	УстановитьПометкиРодителей(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)

	СписокОтмеченныхСтруктурныхЕдиниц = Новый СписокЗначений;
	
	СписокВыбранныхЭлементов(СтруктурныеЕдиницы, СписокОтмеченныхСтруктурныхЕдиниц);

	Закрыть(СписокОтмеченныхСтруктурныхЕдиниц); 
	
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	УстановитьПометкиВоВсемДереве(СтруктурныеЕдиницы, "Инвертировать");

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги(Команда)
	
	УстановитьПометкиВоВсемДереве(СтруктурныеЕдиницы, "Снять");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)

	УстановитьПометкиВоВсемДереве(СтруктурныеЕдиницы, "Установить");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьДерево()

	ДеревоСтруктурныеЕдиницы = ДанныеФормыВЗначение(СтруктурныеЕдиницы, Тип("ДеревоЗначений"));
	
	// сохраним текущие отмеченные структурные единицы
	Если ДеревоСтруктурныеЕдиницы.Строки.Количество() = 0 Тогда
		СохраненныйСписок = Параметры.НачальныйСписокСтруктурныхЕдиниц;
	Иначе
		СохраненныйСписок = Новый СписокЗначений;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
		СтруктураПоиска.Вставить("Пометка", 1);
		
		НайденныеСтроки = ДеревоСтруктурныеЕдиницы.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			ЭлементСписка = СохраненныйСписок.Добавить();
			ЭлементСписка.Значение = СтрокаДерева.СтруктурнаяЕдиница;
		КонецЦикла;
		
		ДеревоСтруктурныеЕдиницы.Строки.Очистить();
		
	КонецЕсли;

	// составим список структурных единиц
	Запрос = Новый Запрос;
	
	Если Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнымОрганизациям"
		ИЛИ Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнойОрганизацииДляУчетаЗарплаты" Тогда
		
		Если Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнойОрганизацииДляУчетаЗарплаты"
			И ЗначениеЗаполнено(Параметры.ГоловнаяОрганизацияДляУчетаЗарплаты) Тогда
			
			Условие = "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
			|	ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
			|ГДЕ
			|	ВЫБОР
			|		КОГДА Организации.Ссылка.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.Ссылка.ГоловнаяОрганизация
			|	КОНЕЦ = &ГоловнаяОрганизацияДляЗП";
			
			Запрос.УстановитьПараметр("ГоловнаяОрганизацияДляЗП", Параметры.ГоловнаяОрганизацияДляУчетаЗарплаты);
		Иначе
			Условие = "";
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК ВидСтроки,
		|	Организации.Ссылка КАК СтруктурнаяЕдиница,
		|	NULL КАК ВладелецСтруктурнойЕдиницы,";
		
		Если Параметры.РежимВыбораСтруктурныхЕдиниц = "ПоГоловнойОрганизацииДляУчетаЗарплаты"
			И ЗначениеЗаполнено(Параметры.ГоловнаяОрганизацияДляУчетаЗарплаты) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА Организации.Ссылка.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.Ссылка.ГоловнаяОрганизация
			|	КОНЕЦ КАК РодительСтруктурнойЕдиницы,";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ГоловнаяОрганизация КАК РодительСтруктурнойЕдиницы,";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	Организации.Наименование КАК ПолеДляСортировки
		|ИЗ
		|	Справочник.Организации КАК Организации
		|";
		
		Запрос.Текст = Запрос.Текст + Условие;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ Организации.Ссылка = Организации.ГоловнаяОрганизация
		|			ТОГДА 1 // сначала упорядочиваем по организациям верхнего уровня
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	ПолеДляСортировки
		|";
	
	Иначе

		ОтборПоНалогоплательщику = ЗначениеЗаполнено(Налогоплательщик);
		ОтборПоНалоговомуКомитету = ЗначениеЗаполнено(НалоговыйКомитет);

		Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);
		Запрос.УстановитьПараметр("РазделНалоговогоУчета", 		Параметры.РазделНалоговогоУчета);
		Запрос.УстановитьПараметр("НалоговыйКомитет", 			НалоговыйКомитет);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК ВидСтроки,
		|	Организации.Ссылка КАК СтруктурнаяЕдиница,
		|	NULL КАК ВладелецСтруктурнойЕдиницы,
		|	NULL КАК РодительСтруктурнойЕдиницы,
		|	Организации.Наименование КАК ПолеДляСортировки,
		|	ПодразделенияОрганизаций.Ссылка КАК ПолеДляСортировкиПоИерархии
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций // чтобы сортировать ПО ИЕРАРХИИ, обязательно нужно обращение к самому справочнику, а не через константы в запросе
		|		ПО ПодразделенияОрганизаций.Ссылка = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|";
		
		Если ОтборПоНалогоплательщику ИЛИ ОтборПоНалоговомуКомитету Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ";
			
			Если ОтборПоНалогоплательщику Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) = &Налогоплательщик";
			КонецЕсли;
			
			Если ОтборПоНалоговомуКомитету Тогда
				
				Если ОтборПоНалогоплательщику Тогда
					Запрос.Текст = Запрос.Текст + " И ";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|	ЕСТЬNULL(ИсчислениеНалогов.НалоговыйКомитет, Организации.НалоговыйКомитет) = &НалоговыйКомитет";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ (Параметры.РазделНалоговогоУчета = Перечисления.РазделыНалоговогоУчета.КПН 
			ИЛИ Параметры.РазделНалоговогоУчета = Перечисления.РазделыНалоговогоУчета.НДС) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2 КАК ВидСтроки,
			|	ПодразделенияОрганизаций.Ссылка КАК СтруктурнаяЕдиница,
			|	ПодразделенияОрганизаций.Владелец КАК ВладелецСтруктурнойЕдиницы,
			|	ПодразделенияОрганизаций.Родитель КАК РодительСтруктурнойЕдиницы,
			|	ПодразделенияОрганизаций.Наименование КАК ПолеДляСортировки,
			|	ПодразделенияОрганизаций.Ссылка КАК ПолеДляСортировкиПоИерархии
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
			|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
			|			И ИсчислениеНалогов_Подр.РазделНалоговогоУчета = &РазделНалоговогоУчета
			|			
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
			|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
			|			И ИсчислениеНалогов_Орг.РазделНалоговогоУчета = &РазделНалоговогоУчета
			|ГДЕ
			|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
			|";
			
			Если ОтборПоНалогоплательщику Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ЕСТЬNULL(ИсчислениеНалогов_Подр.Налогоплательщик, ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)) = &Налогоплательщик";
			КонецЕсли;
			
			Если ОтборПоНалоговомуКомитету Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ЕСТЬNULL(ИсчислениеНалогов_Подр.НалоговыйКомитет, ЕСТЬNULL(ИсчислениеНалогов_Орг.НалоговыйКомитет, ПодразделенияОрганизаций.Владелец.НалоговыйКомитет)) = &НалоговыйКомитет";
			КонецЕсли;
			
		КонецЕсли;
			
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидСтроки,
		|	ПолеДляСортировкиПоИерархии ИЕРАРХИЯ,
		|	ПолеДляСортировки
		|";
		
	КонецЕсли;
	
	// соответствие для хранения ссылок на родительские уровни
	СоответствиеРодительскиеСтроки = Новый Соответствие();
	
	// заполняем дерево структурных единиц
	// при этом для того, чтобы точно понимать действие пользователя при выборе головных структурных подразделений
	// для таких структурных единиц создаем ветку-группу, внутри которой ветку-элемент (по образцу работы платформы
	// в режиме ИТОГИ ПО ИЕРАРХИИ)
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РодительскаяСтрока = ДеревоСтруктурныеЕдиницы; // по умолчанию считаем, что добавляем на самый верхний уровень
	
		Если ЗначениеЗаполнено(Выборка.ВладелецСтруктурнойЕдиницы) Тогда
			
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.ВладелецСтруктурнойЕдиницы];

			Если РодительскаяСтрока = Неопределено Тогда
				// добавляем организацию - владельца
				СтрокаДерева = ДеревоСтруктурныеЕдиницы.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.ВладелецСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа = Истина;
				СтрокаДерева.Картинка = Выборка.ВидСтроки - 1;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.ВладелецСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РодительСтруктурнойЕдиницы) Тогда
		
			Если СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы] = Неопределено Тогда
				// добавим подразделение - родителя
				СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.РодительСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа = Истина;
				СтрокаДерева.Картинка = Выборка.ВидСтроки - 1;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.РодительСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			Иначе
				РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы];
			КонецЕсли;
		
		КонецЕсли;
	
		// добавляем саму структурную единицу, причем если уровень-группа с такой структурной единицей
		// уже есть в дереве, то добавляем именно в этот уровень
		СоздаватьДваУровня = Истина;
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] <> Неопределено Тогда
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница];
			СоздаватьДваУровня = Ложь;
		КонецЕсли;
		
		СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
		
		СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		СтрокаДерева.ЭтоГруппа = ?(СоздаватьДваУровня, Истина, Ложь);
		СтрокаДерева.Картинка = Выборка.ВидСтроки - 1;
		
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] = Неопределено Тогда
			СоответствиеРодительскиеСтроки.Вставить(Выборка.СтруктурнаяЕдиница, СтрокаДерева);
		КонецЕсли;
		
		Если СоздаватьДваУровня Тогда
			СтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			СтрокаДерева.ЭтоГруппа = Ложь;
			СтрокаДерева.Картинка = Выборка.ВидСтроки - 1;
			
		КонецЕсли;
		
	КонецЦикла;

	// для тех структурных единиц, которые не имеют различных подчиненных, оставим только один уровень
	Стек = Новый Массив();
	Стек.Добавить(ДеревоСтруктурныеЕдиницы);	
	ПервыйШагЦикла = Истина;
	Пока Стек.Количество() > 0 Цикл
		ИндексЭлемента = Стек.Количество() - 1;
		РодительскаяСтрока = Стек[ИндексЭлемента];
		Стек.Удалить(ИндексЭлемента);
		Если Не ПервыйШагЦикла 
				И РодительскаяСтрока.Строки.Количество() = 1 
				И РодительскаяСтрока.СтруктурнаяЕдиница = РодительскаяСтрока.Строки[0].СтруктурнаяЕдиница Тогда
			// удалим лишную дочерную строку, т.к. она полностью соответствует родительской
			РодительскаяСтрока.ЭтоГруппа = Ложь;
			РодительскаяСтрока.Строки.Удалить(0);
		Иначе
			Для Каждого СтрокаДерева Из РодительскаяСтрока.Строки Цикл
				Стек.Добавить(СтрокаДерева);
			КонецЦикла;
		КонецЕсли;
		ПервыйШагЦикла = Ложь;
	КонецЦикла;

	// установим отметки возле структурных подразделений, сохраненных в СохраненныйСписок
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
	СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
	
	Для Каждого ЭлементСписка Из СохраненныйСписок Цикл
		СтруктураПоиска.СтруктурнаяЕдиница = ЭлементСписка.Значение;
		НайденныеСтроки = ДеревоСтруктурныеЕдиницы.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаДерева = НайденныеСтроки[0];
			СтрокаДерева.Пометка = 1;
			УстановитьПометкиРодителейНаСервере(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоСтруктурныеЕдиницы, СтруктурныеЕдиницы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Пометка;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		
		Если Строка.Пометка = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Пометка = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Пометка = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если НайденыВключенные И НайденыВыключенные Тогда
		Пометка = 2;
	ИначеЕсли НайденыВключенные И (НЕ НайденыВыключенные) Тогда
		Пометка = 1;
	ИначеЕсли (НЕ НайденыВключенные) И НайденыВыключенные Тогда
		Пометка = 0;
	ИначеЕсли (НЕ НайденыВключенные) И (НЕ НайденыВыключенные) Тогда
		Пометка = 2;
	КонецЕсли;

	Если Пометка = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиРодителейНаСервере(ТекущаяСтрока)

	Родитель = ТекущаяСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Пометка;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для Каждого Строка Из Родитель.Строки Цикл
		
		Если Строка.Пометка = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Пометка = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Пометка = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Пометка = 2;
	ИначеЕсли НайденыВключенные И (НЕ НайденыВыключенные) Тогда
		Пометка = 1;
	ИначеЕсли (НЕ НайденыВключенные) И НайденыВыключенные Тогда
		Пометка = 0;
	ИначеЕсли (НЕ НайденыВключенные) И (НЕ НайденыВыключенные) Тогда
		Пометка = 2;
	КонецЕсли;

	Если Пометка = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителейНаСервере(Родитель);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущиеДанные)

	Пометка	= ТекущиеДанные.Пометка;
	Подчиненные	= ТекущиеДанные.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		
		Для Каждого Строка Из Подчиненные Цикл
			Строка.Пометка = Пометка;
			УстановитьПометкиПодчиненных(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиВоВсемДереве(РодительскаяСтрока, ВыполняемоеДействие)

	Для Каждого СтрокаДерева Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ВыполняемоеДействие = "Установить" Тогда
			СтрокаДерева.Пометка = 1;
		ИначеЕсли ВыполняемоеДействие = "Снять" Тогда
			СтрокаДерева.Пометка = 0;
		Иначе
			СтрокаДерева.Пометка = ?(СтрокаДерева.Пометка = 1, 0, ?(СтрокаДерева.Пометка = 0, 1, СтрокаДерева.Пометка));
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			УстановитьПометкиВоВсемДереве(СтрокаДерева, ВыполняемоеДействие);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	Если Элементы.ГруппаПанель.ТекущаяСтраница = Элементы.БухгалтерскийУчет Тогда
		ЭлементФормыДерево = Элементы.СтруктурныеЕдиницыБУ;
	Иначе
		ЭлементФормыДерево = Элементы.СтруктурныеЕдиницыНУ;
	КонецЕсли;
	
	ЭлементыСтруктурныеЕдиницы = СтруктурныеЕдиницы.ПолучитьЭлементы();
	
	Для Каждого СтрокаВерхнегоУровня Из ЭлементыСтруктурныеЕдиницы Цикл
		ЭлементФормыДерево.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбранныхЭлементов(РодительскаяСтрока, СписокВыбранных)

	Для Каждого СтрокаДерева Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаДерева.ЭтоГруппа И СтрокаДерева.Пометка = 1 Тогда
			СписокВыбранных.Добавить(СтрокаДерева.СтруктурнаяЕдиница);	
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			СписокВыбранныхЭлементов(СтрокаДерева, СписокВыбранных);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
