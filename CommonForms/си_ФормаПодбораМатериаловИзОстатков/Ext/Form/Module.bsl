
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьХарактеристикиРаботника();
	СостояниеМатериалов 			= Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе;
	УчетПоХарактеристикам 			= Константы.си_УчетСпецодеждыПоХарактеристикам.Получить();
	ЗнакСравнения 					= "=";
	Элементы.ПанельОтбора.Видимость = Элементы.ОтобразитьПанельОтбора.Пометка;
	ИнициализироватьПараметры(Параметры);
	ПерестроитьКолонкиТаблицы();
	ЗагрузитьОстатки(ДатаПолученияОстатков);
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.Сотрудник);
	
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.ИспользоватьОтборСотрудник);
	си_УчетСпецодеждыСервер.ИнициализацияНаименованияСотрудникФизлицо(Элементы.ВыбранныеМатериалыСотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтбор();
	ПосчитатьИтоги();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	ИспользоватьОтборНоменклатура = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ИспользоватьОтборСклад = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	си_УчетСпецодеждыКлиент.СотрудникПриИзменении(Элемент);
	ЗагрузитьХарактеристикиРаботника();
	ИспользоватьОтборСотрудник = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеИспользованияПриИзменении(Элемент)
	ИспользоватьОтборНазначениеИспользования = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ДокументПередачиПриИзменении(Элемент)
	ИспользоватьОтборДокументПередачи = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтбор(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ЗнакСравненияПриИзменении(Элемент)
	ИспользоватьОтборСрокИспользования = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияПриИзменении(Элемент)
	ИспользоватьОтборСрокИспользования = Истина;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ЗнакСравненияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиРаботникаПриИзменении(Элемент)
	УстановитьОтбор();	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияОстатковПриИзменении(Элемент)
	ЗагрузитьОстатки(ДатаПолученияОстатков);
	УстановитьОтбор();
	ПосчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	ИспользоватьОтборПодразделениеОрганизации = Истина;
	УстановитьОтбор();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ КОМАНД

&НаКлиенте
Процедура ЗагрузитьВыбранные(Команда)
	СформироватьОтветВызывающейФорме();
	Если НЕ Адрес = Неопределено Тогда
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Идентификатор",ИдентификаторИсточника);
		ПараметрыВыбора.Вставить("Адрес",Адрес);
		Оповестить("ПолучитьВыбранныеЭлементы",ПараметрыВыбора);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТекущей(Команда)
	
	ТекущийЭлементСписка 								= Элементы.Материалы.ТекущийЭлемент;
	ТекущиеДанные 										= Элементы.Материалы.ТекущиеДанные;
	// если не выбрана строка, тогда прервать выполнение процедуры
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	// определение отбора по номенклатуре
	Если Не Найти(ТекущийЭлементСписка.Имя,"Номенклатура") = 0 Тогда
		ИспользоватьОтборНоменклатура 					= Истина;
		Номенклатура 									= ТекущиеДанные["Номенклатура"];
	КонецЕсли;
	// определение отбора по назначению
	Если Не Найти(ТекущийЭлементСписка.Имя,"НазначениеИспользования") = 0 Тогда
		ИспользоватьОтборНазначениеИспользования 		= Истина;
		НазначениеИспользования 						= ТекущиеДанные["НазначениеИспользования"];
	КонецЕсли;
	// определение отбора по Складу
	Если Не Найти(ТекущийЭлементСписка.Имя,"Местоположение") = 0 Тогда
		Если Элементы.Склад.Видимость Тогда
			ИспользоватьОтборСклад 						= Истина;
			Склад 										= ТекущиеДанные["Местоположение"];
		Иначе
			ИспользоватьОтборСотрудник 					= Истина;
			Сотрудник 									= ТекущиеДанные["Местоположение"];
		КонецЕсли;
	КонецЕсли;
	// определение отбора по документу передачи
	Если Не Найти(ТекущийЭлементСписка.Имя,"ДокументПередачи") = 0 Тогда
		ИспользоватьОтборДокументПередачи 				= Истина;
		ДокументПередачи 								= ТекущиеДанные["ДокументПередачи"];
	КонецЕсли;
	// определение отбора по сроку использования
	Если Не Найти(ТекущийЭлементСписка.Имя,"СрокИспользования") = 0 Тогда
		ИспользоватьОтборСрокИспользования 				= Истина;
		ЗнакСравнения 									= "=";
		СрокИспользования 								= ТекущиеДанные["СрокИспользования"];
	КонецЕсли;
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтбор(Команда)
	
	ИспользоватьОтборНоменклатура 				= Ложь;
	ИспользоватьОтборНазначениеИспользования 	= Ложь;
	ИспользоватьОтборСклад 						= Ложь;
	ИспользоватьОтборДокументПередачи 			= Ложь;
	ИспользоватьОтборСотрудник 					= Ложь;
	ИспользоватьОтборСрокИспользования 			= Ложь;
	ИспользоватьОтборПодразделениеОрганизации	= Ложь;
	УстановитьОтбор();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Элементы.Материалы.ВыделенныеСтроки.Очистить();
	
	Для каждого СтрокаТЧ Из Материалы.ПолучитьЭлементы() Цикл
		Элементы.Материалы.ВыделенныеСтроки.Добавить(СтрокаТЧ.ПолучитьИдентификатор())
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыделение(Команда)
	Элементы.Материалы.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	Если Не Найти(Команда.Имя,"Возр") = 0 Тогда
		Направление = " Возр"
	Иначе
		Направление = " Убыв";
	КонецЕсли;
	
	ТекущийЭлементСписка = Элементы.Материалы.ТекущийЭлемент;
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	// если не выбрана строка, тогда прервать выполнение процедуры
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	КСортировке = ""; 
	// определение отбора по номенклатуре
	Если Не Найти(ТекущийЭлементСписка.Имя,"Номенклатура") = 0 Тогда
		КСортировке = "Номенклатура" + Направление;
	КонецЕсли;
	// определение отбора по назначению
	Если Не Найти(ТекущийЭлементСписка.Имя,"НазначениеИспользования") = 0 Тогда
		КСортировке = "НазначениеИспользования" + Направление;
	КонецЕсли;
	// определение отбора по Складу
	Если Не Найти(ТекущийЭлементСписка.Имя,"Местоположение") = 0 Тогда
		КСортировке = "Местоположение" + Направление;
	КонецЕсли;
	// определение отбора по документу передачи
	Если Не Найти(ТекущийЭлементСписка.Имя,"ДокументПередачи") = 0 Тогда
		КСортировке = "ДокументПередачи" + Направление;
	КонецЕсли;
	Если Не Найти(ТекущийЭлементСписка.Имя,"Количество") = 0 Тогда
		КСортировке = "Количество" + Направление;
	КонецЕсли;
	Если Не Найти(ТекущийЭлементСписка.Имя,"Стоимость") = 0 Тогда
		КСортировке = "Стоимость" + Направление;
	КонецЕсли;
	Если Не Найти(ТекущийЭлементСписка.Имя,"СрокИспользования") = 0 Тогда
		КСортировке = "СрокИспользования" + Направление;
	КонецЕсли;
	Если НЕ КСортировке = "" Тогда
		СортироватьДерево(КСортировке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	МатериалыВыборЗначения(,,);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗагрузитьОстатки(ДатаПолученияОстатков);
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранные(Команда)
	ВыбранныеМатериалы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Группировка(Команда)
	Элементы.МатериалыГруппировка.Пометка 	= Не элементы.МатериалыГруппировка.Пометка;
	ТекущаяГруппировка 						= "Номенклатура";
	УстановитьОтбор();	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоТекущей(Команда)
	Элементы.МатериалыГруппировка.Пометка 	= Истина;
	ТекущийЭлементСписка 					= Элементы.Материалы.ТекущийЭлемент;
	ТекущиеДанные 							= Элементы.Материалы.ТекущиеДанные;
	// если не выбрана строка, тогда прервать выполнение процедуры
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппировка 					= Сред(ТекущийЭлементСписка.Имя,10,СтрДлина(ТекущийЭлементСписка.Имя)-9);
	КонецЕсли;
	УстановитьОтбор();	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПанельОтбора(Команда)
	Элементы.ОтобразитьПанельОтбора.Пометка 	= Не Элементы.ОтобразитьПанельОтбора.Пометка;
	Элементы.ПанельОтбора.Видимость 			= Элементы.ОтобразитьПанельОтбора.Пометка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура МатериалыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СчетаУчетаСпецодежды 									= ПолучитьСчетаУчета();
	СписокНомеровГрупп										= Новый Массив;
	СписокНомеров 											= Элементы.Материалы.ВыделенныеСтроки;
	Пока СписокНомеров.Количество()>0 Цикл
		
		
	Для Каждого СтрокаСписка Из СписокНомеров Цикл
		ТекущаяСтрока 										= Элементы.Материалы.ДанныеСтроки(СтрокаСписка);
		СтрокаДерева 										= Материалы.НайтиПоИдентификатору(СтрокаСписка);
		Если Не СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Для Каждого ЭлементСписка Из СтрокаДерева.ПолучитьЭлементы() Цикл
				СписокНомеровГрупп.Добавить(ЭлементСписка.ПолучитьИдентификатор());
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",			ТекущаяСтрока.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика",			ТекущаяСтрока.Характеристика);
		ПараметрыПоиска.Вставить("НазначениеИспользования",	ТекущаяСтрока.НазначениеИспользования);
		ПараметрыПоиска.Вставить("ДокументПередачи",		ТекущаяСтрока.ДокументПередачи);
		ПараметрыПоиска.Вставить("ДокументВозврата",		ТекущаяСтрока.ДокументВозврата);
		Если Элементы.Склад.Видимость Тогда 
			ПараметрыПоиска.Вставить("Склад",				ТекущаяСтрока.Местоположение);
		Иначе
			ПараметрыПоиска.Вставить("Сотрудник",			ТекущаяСтрока.Местоположение);
		КонецЕсли;
		НайденныеСтроки = ВыбранныеМатериалы.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() 					= 0 Тогда 
			НоваяСтрока 									= ВыбранныеМатериалы.Добавить();
			НоваяСтрока.Номенклатура 						= ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика 						= ТекущаяСтрока.Характеристика;
			НоваяСтрока.Количество 							= ТекущаяСтрока.Количество;
			НоваяСтрока.НазначениеИспользования 			= ТекущаяСтрока.НазначениеИспользования;
			НоваяСтрока.ДокументПередачи 					= ТекущаяСтрока.ДокументПередачи;
			НоваяСтрока.Включать 							= Истина;
			НоваяСтрока.Стоимость 							= ТекущаяСтрока.Стоимость;
			НоваяСтрока.ОстаточныйСрокИспользования 		= ТекущаяСтрока.СрокИспользования;
			Если Элементы.ВыбранныеМатериалыСклад.Видимость Тогда 
				НоваяСтрока.Склад 							= ТекущаяСтрока.Местоположение;
			Иначе
				НоваяСтрока.Сотрудник 						= ТекущаяСтрока.Местоположение;
			КонецЕсли;
			Если ТекущаяСтрока.СостояниеСпецодежды = ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая")
				ИЛИ ТекущаяСтрока.СостояниеСпецодежды = ПредопределенноеЗначение("Перечисление.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении") Тогда
				НоваяСтрока.СчетУчетаБУ						= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
				НоваяСтрока.СчетУчетаНУ						= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладеНУ;
			КонецЕсли;
			НоваяСтрока.Цена	 							= ТекущаяСтрока.Цена;
			НоваяСтрока.ДокументВозврата					= ТекущаяСтрока.ДокументВозврата;
		Иначе
			НоваяСтрока 									= НайденныеСтроки[0];
			НоваяСтрока.Номенклатура 						= ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика 						= ТекущаяСтрока.Характеристика;
			НоваяСтрока.Количество 							= ТекущаяСтрока.Количество;
			НоваяСтрока.НазначениеИспользования 			= ТекущаяСтрока.НазначениеИспользования;
			НоваяСтрока.ДокументПередачи 					= ТекущаяСтрока.ДокументПередачи;
			НоваяСтрока.Включать 							= Истина;
			НоваяСтрока.Стоимость 							= ТекущаяСтрока.Стоимость;
			НоваяСтрока.ОстаточныйСрокИспользования 		= ТекущаяСтрока.СрокИспользования;
			Если Элементы.Склад.Видимость Тогда 
				НоваяСтрока.Склад 							= ТекущаяСтрока.Местоположение;
			Иначе
				НоваяСтрока.Сотрудник 						= ТекущаяСтрока.Местоположение;
			КонецЕсли;
			НоваяСтрока.Цена	 							= ТекущаяСтрока.Цена;
			НоваяСтрока.ДокументВозврата					= ТекущаяСтрока.ДокументВозврата;
		КонецЕсли;
	КонецЦикла;
	СписокНомеров.Очистить();
	Если Не СписокНомеровГрупп.Количество() = 0 Тогда
		Для Каждого ЭлементМассива Из СписокНомеровГрупп Цикл
			СписокНомеров.Добавить(ЭлементМассива);
		КонецЦикла;
		СписокНомеровГрупп.Очистить();
	КонецЕсли;
	КонецЦикла;
	ПосчитатьИтоги();
	//ЭтаФорма.ТекущийЭлемент = Элементы.Материалы;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	МатериалыВыборЗначения(,,)
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриАктивизацииПоля(Элемент)
	
	Элементы.УстановитьОтборПоТекущей.Доступность = Истина;
	Если Элементы.Материалы.ТекущийЭлемент.Имя = "МатериалыКоличество" 
		Или Элементы.Материалы.ТекущийЭлемент.Имя = "МатериалыСписаннаяСтоимость" 
		Или Элементы.Материалы.ТекущийЭлемент.Имя = "МатериалыСтоимость" Тогда
		Элементы.УстановитьОтборПоТекущей.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	МатериалыВыборЗначения(,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМатериалыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Строки 			= ПараметрыПеретаскивания.Значение;
	Если Строки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		ПараметрыПоиска 									= Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура"				,ТекущаяСтрока.Номенклатура);
		ПараметрыПоиска.Вставить("НазначениеИспользования"	,ТекущаяСтрока.НазначениеИспользования);
		ПараметрыПоиска.Вставить("ДокументПередачи"			,ТекущаяСтрока.ДокументПередачи);
		Если Элементы.Склад.Видимость Тогда 
			ПараметрыПоиска.Вставить("Склад"				,ТекущаяСтрока.Местоположение);
		Иначе
			ПараметрыПоиска.Вставить("Сотрудник"			,ТекущаяСтрока.Местоположение);
		КонецЕсли;
		НайденныеСтроки 									= ВыбранныеМатериалы.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НоваяСтрока 									= ВыбранныеМатериалы.Добавить();
			НоваяСтрока.Номенклатура 						= ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Количество 							= ТекущаяСтрока.Количество;
			НоваяСтрока.НазначениеИспользования 			= ТекущаяСтрока.НазначениеИспользования;
			НоваяСтрока.ДокументПередачи 					= ТекущаяСтрока.ДокументПередачи;
			НоваяСтрока.Включать							= Истина;
			НоваяСтрока.Стоимость 							= ТекущаяСтрока.Стоимость;
			НоваяСтрока.ОстаточныйСрокИспользования 		= ТекущаяСтрока.СрокИспользования;
			Если Элементы.ВыбранныеМатериалыСклад.Видимость Тогда 
				НоваяСтрока.Склад 							= ТекущаяСтрока.Местоположение;
			Иначе
				НоваяСтрока.Сотрудник 						= ТекущаяСтрока.Местоположение;
			КонецЕсли;			
		Иначе
			НоваяСтрока 									= НайденныеСтроки[0];
			НоваяСтрока.Номенклатура 						= ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Количество 							= ТекущаяСтрока.Количество;
			НоваяСтрока.НазначениеИспользования 			= ТекущаяСтрока.НазначениеИспользования;
			НоваяСтрока.ДокументПередачи 					= ТекущаяСтрока.ДокументПередачи;
			НоваяСтрока.Включать 							= Истина;
			НоваяСтрока.Стоимость 							= ТекущаяСтрока.Стоимость;
			НоваяСтрока.ОстаточныйСрокИспользования 		= ТекущаяСтрока.СрокИспользования;
			Если Элементы.Склад.Видимость Тогда 
				НоваяСтрока.Склад 							= ТекущаяСтрока.Местоположение;
			Иначе
				НоваяСтрока.Сотрудник 						= ТекущаяСтрока.Местоположение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПосчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМатериалыКоличествоПриИзменении(Элемент)
	ТекущиеДанные 										= Элементы.ВыбранныеМатериалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура"				, ТекущиеДанные.Номенклатура);
	ПараметрыПоиска.Вставить("НазначениеИспользования"	, ТекущиеДанные.НазначениеИспользования);
	ПараметрыПоиска.Вставить("ДокументПередачи"			, ТекущиеДанные.ДокументПередачи);
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ПараметрыПоиска.Вставить("Местоположение"		, ТекущиеДанные.Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ПараметрыПоиска.Вставить("Местоположение"		, ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
	НайденныеСтроки 									= ОстаткиМатериалов.НайтиСтроки(ПараметрыПоиска);
	ОбщееКоличество 									= 0;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОбщееКоличество 								= ОбщееКоличество + НайденнаяСтрока.Количество;
	КонецЦикла;
	Если ТекущиеДанные.Количество > ОбщееКоличество Тогда 
		ТекущиеДанные.Количество 						= ОбщееКоличество;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Выбранное количество превышает остатки для данной позиции");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМатериалыПриИзменении(Элемент)
	ПосчитатьИтоги();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализироватьПараметры(Параметры)
	
	Если Параметры.Свойство("СостояниеМатериалов") Тогда
		СостояниеМатериалов = Параметры.СостояниеМатериалов;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктурноеПодразделение") Тогда
		СтруктурноеПодразделение = Параметры.СтруктурноеПодразделение;
	КонецЕсли;
	
	Если Параметры.Свойство("НазначениеИспользования") Тогда
		Если ЗначениеЗаполнено(Параметры.НазначениеИспользования) Тогда
			ИспользоватьОтборНазначениеИспользования 	= Истина;
			НазначениеИспользования 					= Параметры.НазначениеИспользования;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Склад") Тогда
		Если ЗначениеЗаполнено(Параметры.Склад) Тогда
			ИспользоватьОтборСклад 	= Истина;
			Склад = Параметры.Склад;
			// принудительная установка вида формы если указан этот параметр
			СостояниеМатериалов 	= Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Сотрудник") Тогда
		Если ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			ИспользоватьОтборСотрудник 	= Истина;
			Сотрудник = Параметры.Сотрудник;
			// принудительная установка вида формы если указан этот параметр
			СостояниеМатериалов 		= Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокументПередачи") Тогда
		Если ЗначениеЗаполнено(Параметры.ДокументПередачи) Тогда
			ИспользоватьОтборДокументПередачи 	= Истина;
			ДокументПередачи 					= Параметры.ДокументПередачи;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторИсточника") Тогда
		ИдентификаторИсточника = Параметры.ИдентификаторИсточника;
	КонецЕсли;
	
	Если Параметры.Свойство("СостояниеМатериаловНаСкладе") Тогда
		СостояниеМатериаловНаСкладе = Параметры.СостояниеМатериаловНаСкладе;
	КонецЕсли;
	
	ДатаПолученияОстатков = ТекущаяДата();
	Если Параметры.Свойство("Дата") Тогда
		ДатаПолученияОстатков = Параметры.Дата;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодразделениеОрганизации") Тогда
		Если ЗначениеЗаполнено(Параметры.ПодразделениеОрганизации) Тогда
			ИспользоватьОтборПодразделениеОрганизации 	= Истина;
			ПодразделениеОрганизации 					= Параметры.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;

	Элементы.ВыбранныеМатериалыХарактеристика.Видимость = УчетПоХарактеристикам;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	СтрокаПояснения = "Отбор: ";
	ПараметрыОтбора = Новый Структура;
	Элементы.УстановитьОтборПоТекущей.Пометка = Ложь;
	Если ИспользоватьОтборНоменклатура Тогда 
		ПараметрыОтбора.Вставить("Номенклатура",Номенклатура);
		Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
		СтрокаПояснения = СтрокаПояснения + "Номенклатура: " + Номенклатура + "; ";
	КонецЕсли;
	Если ИспользоватьОтборСклад Тогда 
		ПараметрыОтбора.Вставить("Местоположение",Склад);
		Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
		СтрокаПояснения = СтрокаПояснения + "Местоположение: " + Склад + "; ";
	КонецЕсли;
	Если ИспользоватьОтборСотрудник Тогда 
		Если СостояниеМатериалов = ПредопределенноеЗначение("Перечисление.си_СостоянияМатериалов.НаходящиесяВЭксплуатации") Тогда
			ПараметрыОтбора.Вставить("Местоположение",Сотрудник);
			Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
			СтрокаПояснения = СтрокаПояснения + "Местоположение: " + Сотрудник + "; ";
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьОтборНазначениеИспользования Тогда 
		ПараметрыОтбора.Вставить("НазначениеИспользования",НазначениеИспользования);
		Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
		СтрокаПояснения = СтрокаПояснения + "Назначение использования: " + НазначениеИспользования + "; ";
	КонецЕсли;
	Если ИспользоватьОтборДокументПередачи Тогда 
		ПараметрыОтбора.Вставить("ДокументПередачи",ДокументПередачи);
		Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
		СтрокаПояснения = СтрокаПояснения + "Документ передачи: " + ДокументПередачи + "; ";
	КонецЕсли;
	Если ИспользоватьОтборПодразделениеОрганизации Тогда 
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации",ПодразделениеОрганизации);
		Элементы.УстановитьОтборПоТекущей.Пометка = Истина;
		СтрокаПояснения = СтрокаПояснения + "Подразделение организации: " + ПодразделениеОрганизации + "; ";
	КонецЕсли;
	Если Не Элементы.МатериалыГруппировка.Пометка Тогда
		ОтобразитьТаблицу(ПараметрыОтбора);
	Иначе
		ОтобразитьДерево(ПараметрыОтбора);
	КонецЕсли;
	
	//Элементы.ГруппаМатериалы.Заголовок = ЭтаФорма.Заголовок + СтрокаПояснения;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруОтбораПоХарактеристикамСотрудника(Сотрудник, ПараметрыОтбора)
	
	Если Не УчетПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХарактеристик 	= ХарактеристикиРаботника.Выгрузить();
	ТаблицаХарактеристик.Очистить();
	Для Каждого СтрокаТЧ Из ХарактеристикиРаботника Цикл
		Если СтрокаТЧ.Использовать Тогда
			НоваяСтрока		= ТаблицаХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаХарактеристик.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	//СписокХарактеристик 	= ОстаткиМатериалов.Выгрузить(,"Характеристика");
	СписокСвойств 			= ТаблицаХарактеристик.Скопировать(,"Свойство");
	СписокЗначений 			= ТаблицаХарактеристик.Скопировать(,"Значение");
	
	Запрос 					= Новый Запрос;
	//Запрос.УстановитьПараметр("СписокХарактеристик",СписокХарактеристик);
	Запрос.УстановитьПараметр("СписокСвойств",СписокСвойств);
	Запрос.УстановитьПараметр("СписокЗначений",СписокЗначений);
	Запрос.Текст 			= "ВЫБРАТЬ
	             			  |	си_ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	             			  |	си_ЗначенияСвойствОбъектов.Свойство,
	             			  |	си_ЗначенияСвойствОбъектов.Значение
	             			  |ИЗ
	             			  |	РегистрСведений.си_ЗначенияСвойствОбъектов КАК си_ЗначенияСвойствОбъектов
	             			  |ГДЕ
	             			  |	си_ЗначенияСвойствОбъектов.Свойство В(&СписокСвойств)
	             			  |	И си_ЗначенияСвойствОбъектов.Значение В(&СписокЗначений)
	             			  |ИТОГИ ПО
	             			  |	Характеристика";
				   
	Результат 				= Запрос.Выполнить();
	ВыборкаХарактеристика 	= Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Результат.Пустой() Тогда
		//ПараметрыОтбора.Добавить(Справочники.си_ХарактеристикиСпецодеждыИИнвентаря.ПустаяСсылка());
		ПараметрыОтбора.Добавить(Неопределено);
	
	Иначе
			
		Пока ВыборкаХарактеристика.Следующий() Цикл
			ПараметрыОтбора.Добавить(ВыборкаХарактеристика.Характеристика);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТаблицу(ПараметрыОтбора)
	
	ПараметрыФильтрацииПоХарактеристикам = Новый Массив;
	ПолучитьСтруктуруОтбораПоХарактеристикамСотрудника(Сотрудник, ПараметрыФильтрацииПоХарактеристикам);
	
	Дерево = РеквизитФормыВЗначение("Материалы");
	СтрокиСОтбором = ОстаткиМатериалов.НайтиСтроки(ПараметрыОтбора);
	Дерево.Строки.Очистить();
	Для Каждого СтрокаОтбора Из СтрокиСОтбором Цикл
		Если ИспользоватьОтборСрокИспользования Тогда 
			ПараметрыСрокаИспользования = Новый Структура;
			Если ЗнакСравнения = "=" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования = СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования < СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования > СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьОтборСотрудник 
			И СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе 
			И УчетПоХарактеристикам Тогда
			Если Не ПараметрыФильтрацииПоХарактеристикам.Количество() = 0 И ПараметрыФильтрацииПоХарактеристикам.Найти(СтрокаОтбора.Характеристика) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПояснения = СтрокаПояснения + "Характеристика: " + СтрокаОтбора.Характеристика + "; ";
		КонецЕсли;
		
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбора);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево,"Материалы");
	ПерестроитьКолонкиТаблицы();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДерево(ПараметрыОтбора)
	
	ПараметрыФильтрацииПоХарактеристикам = Новый Массив;
	ПолучитьСтруктуруОтбораПоХарактеристикамСотрудника(Сотрудник, ПараметрыФильтрацииПоХарактеристикам);
	
	Дерево = РеквизитФормыВЗначение("Материалы");
	СтрокиСОтбором = ОстаткиМатериалов.НайтиСтроки(ПараметрыОтбора);
	Дерево.Строки.Очистить();
	Для Каждого СтрокаОтбора Из СтрокиСОтбором Цикл
		Если ИспользоватьОтборСрокИспользования Тогда 
			ПараметрыСрокаИспользования = Новый Структура;
			Если ЗнакСравнения = "=" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования = СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования < СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Если НЕ СтрокаОтбора.СрокИспользования > СрокИспользования Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьОтборСотрудник 
			И СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе 
			И УчетПоХарактеристикам Тогда
			Если Не ПараметрыФильтрацииПоХарактеристикам.Количество() = 0 
				И ПараметрыФильтрацииПоХарактеристикам.Найти(СтрокаОтбора.Характеристика) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ДобавитьСтрокуВДерево(Дерево, СтрокаОтбора);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево,"Материалы");
	ПерестроитьКолонкиТаблицы();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВДерево(мДерево, СтрокаТЧ)
	ПолеГруппировки 				= ТекущаяГруппировка;
	Если ПолеГруппировки 			= "" Тогда
		ПолеГруппировки 			= "Номенклатура";
	КонецЕсли;
	
	НайденныеСтроки 				= мДерево.Строки.НайтиСтроки(Новый Структура(ПолеГруппировки,СтрокаТЧ[ПолеГруппировки]),Истина);
	Если НайденныеСтроки.Количество()=0 Тогда
		СтрокаПриемник 				= мДерево;
	Иначе
		СтрокаПриемник 				= НайденныеСтроки[0];
	КонецЕсли;
	НС 								= СтрокаПриемник.Строки.Добавить();
	Если НС.Родитель 				= Неопределено  Тогда
		НС[ПолеГруппировки] 		= СтрокаТЧ[ПолеГруппировки];
		НС.Количество 				= 0;
		НС 							= НС.Строки.Добавить();
	КонецЕсли;	
	НС.Номенклатура 				= СтрокаТЧ.Номенклатура;
	НС.Количество 					= СтрокаТЧ.Количество;
	НС.Местоположение 				= СтрокаТЧ.Местоположение;
	НС.НазначениеИспользования 		= СтрокаТЧ.НазначениеИспользования;
	НС.ДокументПередачи 			= СтрокаТЧ.ДокументПередачи;
	НС.СрокИспользования 			= СтрокаТЧ.СрокИспользования;
	НС.СписаннаяСтоимость 			= СтрокаТЧ.СписаннаяСтоимость;
	НС.Стоимость 					= СтрокаТЧ.Стоимость;
	НС.Характеристика 				= СтрокаТЧ.Характеристика;
	НС.Картинка						= 0;
	НС.СостояниеСпецодежды			= СтрокаТЧ.СостояниеСпецодежды;
	НС.ДокументВозврата				= СтрокаТЧ.ДокументВозврата;
	
	НС.Родитель.Количество 			= НС.Родитель.Количество + НС.Количество;
	НС.Родитель.СписаннаяСтоимость 	= НС.Родитель.СписаннаяСтоимость + НС.СписаннаяСтоимость;
	НС.Родитель.Стоимость 			= НС.Родитель.Стоимость + НС.Стоимость;
	НС.Родитель.Картинка			= 1;
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьКолонкиТаблицы()
		
	Пока НЕ Элементы.Материалы.ПодчиненныеЭлементы.Количество()=0 Цикл
		Элементы.Удалить(Элементы.Материалы.ПодчиненныеЭлементы[0])
	КонецЦикла;
	
	КолонкиТаблицы = Новый Массив;
	Если СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе ИЛИ
		СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
		КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыСостояниеСпецодежды","Состояние","Материалы.СостояниеСпецодежды");
		КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КонецЕсли;
			
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыНоменклатура","Номенклатура","Материалы.Номенклатура");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	Если УчетПоХарактеристикам Тогда 
		КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыХарактеристика","Характеристика","Материалы.Характеристика");
		КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КонецЕсли;
	
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыКоличество","Кол-во","Материалы.Количество");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыМестоположение","Местоположение","Материалы.Местоположение");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыНазначениеИспользования","Назначение использования","Материалы.НазначениеИспользования");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыДокументПередачи","Документ передачи","Материалы.ДокументПередачи");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыСрокИспользования","Срок исп-я","Материалы.СрокИспользования");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыСписаннаяСтоимость","Спис. стоимость","Материалы.СписаннаяСтоимость");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыСтоимость","Стоимость","Материалы.Стоимость");
	КолонкиТаблицы.Добавить(КолонкаТаблицы);
	Если СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации Тогда
		КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыПодразделениеОрганизации","Подразделение организации","Материалы.ПодразделениеОрганизации");
		КолонкиТаблицы.Добавить(КолонкаТаблицы);
	Иначе
		КолонкаТаблицы = Новый Структура("Имя,Заголовок,ПутьКДанным","МатериалыДокументВозврата","Документ возврата","Материалы.ДокументВозврата");
		КолонкиТаблицы.Добавить(КолонкаТаблицы);
	КонецЕсли;
	
	
	// определение лидирующей колонки для группировки
	Для каждого СтрокаТЧ Из КолонкиТаблицы Цикл
		Если Не Найти(СтрокаТЧ.Имя,ТекущаяГруппировка)=0 Тогда 
			Если Элементы.Материалы.ПодчиненныеЭлементы.Найти(СтрокаТЧ.Имя) = Неопределено Тогда
				НовыйЭлемент = Элементы.Добавить(СтрокаТЧ.Имя,Тип("ПолеФормы"),Элементы.Материалы);
				НовыйЭлемент.Заголовок = СтрокаТЧ.Заголовок;
				НовыйЭлемент.ПутьКДанным = СтрокаТЧ.ПутьКДанным; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из КолонкиТаблицы Цикл
		Если Элементы.Материалы.ПодчиненныеЭлементы.Найти(СтрокаТЧ.Имя) = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить(СтрокаТЧ.Имя,Тип("ПолеФормы"),Элементы.Материалы);
			НовыйЭлемент.Заголовок = СтрокаТЧ.Заголовок;
			НовыйЭлемент.ПутьКДанным = СтрокаТЧ.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОстатки(Дата)
	Запрос 												= Новый Запрос;
	Запрос.УстановитьПараметр("Период",Новый Граница(КонецДня(Дата),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
	Если СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе Тогда
		// формирование запроса
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	си_МатериалыНаСкладеОстатки.Организация,
		               |	си_МатериалыНаСкладеОстатки.СтруктурноеПодразделение,
		               |	си_МатериалыНаСкладеОстатки.Номенклатура КАК Номенклатура,
		               |	си_МатериалыНаСкладеОстатки.Характеристика КАК Характеристика,
		               |	си_МатериалыНаСкладеОстатки.ДокументПередачи КАК ДокументПередачи,
		               |	си_МатериалыНаСкладеОстатки.НазначениеИспользования КАК НазначениеИспользования,
		               |	си_МатериалыНаСкладеОстатки.Склад КАК Местоположение,
		               |	си_МатериалыНаСкладеОстатки.ВидУчетаНУ КАК ВидУчетаНУ,
		               |	си_МатериалыНаСкладеОстатки.КоличествоОстаток КАК Количество,
		               |	си_МатериалыНаСкладеОстатки.СтоимостьОстаток КАК Стоимость,
		               |	си_МатериалыНаСкладеОстатки.СписаннаяСтоимостьОстаток КАК СписаннаяСтоимость,
		               |	си_МатериалыНаСкладеОстатки.ОстаточныйСрокИспользования,
		               |	си_МатериалыНаСкладеОстатки.ДокументВозврата,
		               |	си_МатериалыНаСкладеОстатки.СостояниеСпецодежды,
		               |	ВЫБОР
		               |		КОГДА си_МатериалыНаСкладеОстатки.КоличествоОстаток = 0
		               |			ТОГДА 0
		               |		ИНАЧЕ си_МатериалыНаСкладеОстатки.СтоимостьОстаток / си_МатериалыНаСкладеОстатки.КоличествоОстаток
		               |	КОНЕЦ КАК Цена
		               |ИЗ
		               |	РегистрНакопления.си_МатериалыНаСкладе.Остатки(
		               |			&Период,
		               |			Организация = &Организация
		               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыНаСкладеОстатки
		               |ГДЕ
		               |	си_МатериалыНаСкладеОстатки.СостояниеСпецодежды В(&СостояниеСпецодежды)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Номенклатура,
		               |	Местоположение,
		               |	НазначениеИспользования,
		               |	ДокументПередачи";
		Запрос.УстановитьПараметр("СостояниеСпецодежды",СостояниеМатериаловНаСкладе);
		Заголовок = "Спецодежда и инвентарь на складах: ";
		//СостояниеМатериаловНаСкладе;
		// установить видимость элементов формы
		Элементы.Склад.Видимость 										= Истина;
		Элементы.ИспользоватьОтборСклад.Видимость 						= Истина;
		Элементы.МатериалыМестоположение.Заголовок 						= "Склад";
		Элементы.ВыбранныеМатериалыСотрудник.Видимость 					= Ложь;
		Элементы.ВыбранныеМатериалыСклад.Видимость 						= Истина;
		Элементы.МатериалыСостояниеСпецодежды.Видимость 				= Истина;
		Элементы.ПодразделениеОрганизации.Видимость 					= Ложь;
		Элементы.ИспользоватьОтборПодразделениеОрганизации.Видимость	= Ложь;
	ИначеЕсли СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации Тогда
		// формирование запроса
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	си_МатериалыВЭксплуатацииОстатки.Организация,
		               |	си_МатериалыВЭксплуатацииОстатки.СтруктурноеПодразделение,
		               |	си_МатериалыВЭксплуатацииОстатки.Номенклатура КАК Номенклатура,
		               |	си_МатериалыВЭксплуатацииОстатки.Характеристика КАК Характеристика,
		               |	си_МатериалыВЭксплуатацииОстатки.ДокументПередачи КАК ДокументПередачи,
		               |	си_МатериалыВЭксплуатацииОстатки.НазначениеИспользования КАК НазначениеИспользования,
		               |	си_МатериалыВЭксплуатацииОстатки.Сотрудник КАК Местоположение,
		               |	си_МатериалыВЭксплуатацииОстатки.ВидУчетаНУ КАК ВидУчетаНУ,
		               |	си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток КАК Количество,
		               |	си_МатериалыВЭксплуатацииОстатки.СтоимостьОстаток КАК Стоимость,
		               |	си_МатериалыВЭксплуатацииОстатки.СписаннаяСтоимостьОстаток КАК СписаннаяСтоимость,
		               |	си_МатериалыВЭксплуатацииОстатки.ОстаточныйСрокИспользования КАК СрокИспользования,
		               |	си_МатериалыВЭксплуатацииОстатки.ПодразделениеОрганизации,
		               |	ВЫБОР
		               |		КОГДА си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток = 0
		               |			ТОГДА 0
		               |		ИНАЧЕ си_МатериалыВЭксплуатацииОстатки.СтоимостьОстаток / си_МатериалыВЭксплуатацииОстатки.КоличествоОстаток
		               |	КОНЕЦ КАК Цена
		               |ИЗ
		               |	РегистрНакопления.си_МатериалыВЭксплуатации.Остатки(
		               |			&Период,
		               |			Организация = &Организация
		               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК си_МатериалыВЭксплуатацииОстатки
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Номенклатура,
		               |	Местоположение,
		               |	НазначениеИспользования,
		               |	ДокументПередачи";
		Заголовок = "Спецодежда и инвентарь в эксплуатации";
		// установить видимость элементов формы
		Элементы.Склад.Видимость 										= Ложь;
		Элементы.ИспользоватьОтборСклад.Видимость 						= Ложь;
		Элементы.МатериалыМестоположение.Заголовок 						= "Сотрудник";
		Элементы.ВыбранныеМатериалыСотрудник.Видимость 					= Истина;
		Элементы.ВыбранныеМатериалыСклад.Видимость 						= Ложь;	
		Элементы.ПодразделениеОрганизации.Видимость 					= Истина;
		Элементы.ИспользоватьОтборПодразделениеОрганизации.Видимость	= Истина;
	КонецЕсли;
	Элементы.ГруппаМатериалы.Заголовок 									= Заголовок;
	Результат 															= Запрос.Выполнить();
	ОстаткиМатериалов.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура СформироватьОтветВызывающейФорме()
	ТЧ = ВыбранныеМатериалы.Выгрузить();
	Если СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе
		И ИспользоватьОтборСотрудник Тогда 
		ТЧ.ЗаполнитьЗначения(Сотрудник,"Сотрудник");
	КонецЕсли;
	Адрес = ПоместитьВоВременноеХранилище(ТЧ,ИдентификаторИсточника);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтоги()
	Для Каждого СтрокаТЧ Из ВыбранныеМатериалы Цикл
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
	КонецЦикла;
	
	Элементы.ВыбранныеМатериалыКоличество.ТекстПодвала 		= "Общее кол-во:	"	+ ВыбранныеМатериалы.Итог("Количество");
	Элементы.ВыбранныеМатериалыСумма.ТекстПодвала 			= "Общая ст-ть:	"		+ ВыбранныеМатериалы.Итог("Стоимость");
	Элементы.ВыбранныеМатериалыНоменклатура.ТекстПодвала 	= "Позиций:	"			+ ВыбранныеМатериалы.Количество();
КонецПроцедуры

&НаСервере
Процедура СортироватьДерево(КСортировке)
	мДерево 		= РеквизитФормыВЗначение("Материалы");
	СтрокиВСорт 	= мДерево.строки;
	СортироватьДеревоРекурсия(КСортировке,СтрокиВСорт);
	ЗначениеВРеквизитФормы(мДерево,"Материалы");
КонецПроцедуры

&НаСервере
Процедура СортироватьДеревоРекурсия(КСортировке,СтрокиВСорт)
	
	СтрокиВСорт.Сортировать(КСортировке);
	Для Каждого СтрокаТЧ Из СтрокиВСорт Цикл
		СортироватьДеревоРекурсия(КСортировке,СтрокаТЧ.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьХарактеристикиРаботника()
	Элементы.ГруппаХарактеристикиРаботника.Видимость 	= Ложь;
	Если Не УчетПоХарактеристикам 
		ИЛИ СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудник = Справочники[си_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаСотрудников()].ПустаяСсылка() Тогда
		
	Иначе
		Элементы.ГруппаХарактеристикиРаботника.Видимость 	= Истина;
	КонецЕсли;
	
	Запрос 													= Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	запрос.Текст = "ВЫБРАТЬ
	               |	си_ХарактеристикиРаботников.Сотрудник,
	               |	си_ХарактеристикиРаботников.Свойство,
	               |	си_ХарактеристикиРаботников.Значение,
	               |	ИСТИНА КАК Использовать
	               |ИЗ
	               |	РегистрСведений.си_ХарактеристикиРаботников КАК си_ХарактеристикиРаботников
	               |ГДЕ
	               |	си_ХарактеристикиРаботников.Сотрудник = &Сотрудник";
	Результат 												= Запрос.Выполнить();
	Выборка 												= результат.Выбрать();
	ХарактеристикиРаботника.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока 										= ХарактеристикиРаботника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетаУчета()
	СчетаУчетаСпецодежды = си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	Возврат СчетаУчетаСпецодежды;
КонецФункции

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	си_УчетСпецодеждыКлиент.НачалоВыбораСотрудникФизлицо(Элемент,Новый Структура("ТекущиеДанные", Новый Структура("Сотрудник",Сотрудник)),СтандартнаяОбработка);
КонецПроцедуры


#КонецОбласти
