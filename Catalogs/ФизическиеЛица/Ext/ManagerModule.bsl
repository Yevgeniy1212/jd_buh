#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	

	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РаботникиОрганизации") И Параметры.РаботникиОрганизации Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаПоиска = Неопределено;
		Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
		
		ТекстУсловия 	= "";
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		
		Если СтрокаПоиска <> Неопределено Тогда 
			ТекстУсловия = "ГДЕ РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &ШаблонНаименования ";
		КонецЕсли;
		
		ТекстУсловияОрганизации = "";
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			ТекстУсловияОрганизации = "И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация";
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Параметры.Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность
									 | И РаботникиОрганизации.Активность";
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.ПометкаУдаления,
		|	ФизическиеЛица.Ссылка,
		|	РаботникиОрганизации.Сотрудник.Физлицо
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО РаботникиОрганизации.Сотрудник.Физлицо = ФизическиеЛица.Ссылка
		| "+ ТекстУсловия + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
		
		Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений();
		
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ПометкаУдаления Тогда
				СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
				ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Ссылка,);
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли Параметры.Свойство("ВыбиратьТолькоРезидентовРК") И Параметры.ВыбиратьТолькоРезидентовРК Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаПоиска = Неопределено;
		Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
		
		ТекстУсловия 	= "";
		
		Запрос = Новый Запрос;
		
		Если СтрокаПоиска <> Неопределено Тогда 
			ТекстУсловия = " И ФизическиеЛица.Наименование ПОДОБНО &ШаблонНаименования ";
		КонецЕсли;
		
		ТекстУсловияРезидентРК = " И ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК = Ложь";
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних КАК ГражданствоФизЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ГражданствоФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		| " + ТекстУсловия + ТекстУсловияРезидентРК;
		
		Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений();
		
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ПометкаУдаления Тогда
				СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
				ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Ссылка,);
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьДубли(Ссылка, ЗаписьПаспортныхДанных, РНН, ИИН, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных 	= Ложь;
	ЕстьДублиРНН 				= Ложь;
	ЕстьДублиИИН 				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И
		 (ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи)) ТОГДА
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ПаспортныеДанныеФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		               |
		               |ГДЕ
		               |	ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид
					   |	И ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия
					   |	И ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер 
					   |	И ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи 
					   |	И ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка";
					   
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 					Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид", 				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",	 			ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер", 				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи", 		ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Физлицо: %1 имеет такие же паспортные данные как и у %2'"),
			                ВыборкаЗапроса.Физлицо,
							Строка(Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);							
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РНН) тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ФизическиеЛица.Ссылка КАК Физлицо
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |ГДЕ
		               |	ФизическиеЛица.РНН = &РНН
					   |	И ФизическиеЛица.Ссылка <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоДублям.УстановитьПараметр("РНН", 	РНН);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Физлицо: %1 имеет такой же РНН как и у %2'"),
			                ВыборкаЗапроса.Физлицо,
							Строка(Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);							
			ЕстьДублиРНН = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИИН) тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ФизическиеЛица.Ссылка КАК Физлицо
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |ГДЕ
		               |	ФизическиеЛица.ИдентификационныйКодЛичности = &ИИН
					   |	И ФизическиеЛица.Ссылка <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИИН", 	ИИН);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Физлицо: %1 имеет такой же ИИН как и у %2'"),
			                ВыборкаЗапроса.Физлицо,
							Строка(Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);							
			ЕстьДублиИИН = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиРНН И
		 НЕ ЕстьДублиПаспортныхДанных И
		 НЕ ЕстьДублиИИН тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ФИОФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		               |
		               |ГДЕ
		               |	(ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО)
					   |	И ФИОФизЛиц.ФизЛицо <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО", 	СтрЗаменить(ФИО, " ", ""));
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Физлицо с таким ФИО (%1) уже есть в справочнике %2'"),
			                ВыборкаЗапроса.Физлицо,
							Строка(Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);							
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет и создает при необходимости элемент справочника ФизическиеЛица по реквизиту документа Контрагент.
//
// Возвращаемое значение:
//	Истина - если все в порядке, иначе Ложь
//
Функция ПроверитьИСоздатьФизЛицоПоКонтрагенту(Объект, СоздаватьФизЛицо = Ложь, ВыводитьСообщения = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Не указан контрагент!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление",Метаданные.Справочники.ФизическиеЛица) Тогда
		СоздаватьФизЛицо = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент.ФизЛицо) Тогда
		// Если физ. лицо заполнено, то не обязательно оно доступно текущему пользователю
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.РНН,
		|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты).ФизЛицо";
		
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			Возврат Ложь;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		// не надо ничего создавать - проверим только РНН
		Если Объект.Контрагент.ИдентификационныйКодЛичности <> Выборка.ИИН И ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru='ИИН контрагента не совпадает с ИИН физического лица!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если НЕ СоздаватьФизЛицо Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка 
		КонтрагентОбъект = Объект.Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		ТекПользователь = Пользователи.ТекущийПользователь();

		НовоеФизЛицо 								= Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизЛицо.Родитель						= Справочники.ФизическиеЛица.НайтиПоНаименованию("Физические лица");
		Если НЕ НовоеФизЛицо.Родитель.ЭтоГруппа Тогда
			НовоеФизЛицо.Родитель					= Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		НовоеФизЛицо.Наименование 					= КонтрагентОбъект.Наименование;
		НовоеФизЛицо.РНН	        				= КонтрагентОбъект.РНН;
		НовоеФизЛицо.СИК	        				= КонтрагентОбъект.СИК;
		НовоеФизЛицо.ИдентификационныйКодЛичности	= КонтрагентОбъект.ИдентификационныйКодЛичности;
		НовоеФизЛицо.Комментарий					= КонтрагентОбъект.Комментарий;
		НовоеФизЛицо.ГруппаДоступа					= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяГруппаДоступаФизическогоЛица");
		НовоеФизЛицо.Записать();
		
		КонтрагентОбъект.ФизЛицо = НовоеФизЛицо.Ссылка;
		КонтрагентОбъект.Записать();
		
		// ФИОФизЛиц
		Если ЗначениеЗаполнено(КонтрагентОбъект.НаименованиеПолное) Тогда
			ФИОСтрокой = КонтрагентОбъект.НаименованиеПолное;
		Иначе
			ФИОСтрокой = КонтрагентОбъект.Наименование;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ФИОСтрокой) Тогда
			
			НаборЗаписей = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			НаборЗаписей.Отбор.ФизЛицо.Установить(Объект.Контрагент.ФизЛицо);
			НаборЗаписей.Прочитать();
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период  = Дата('19000101');
			Запись.ФизЛицо = НовоеФизЛицо.Ссылка;
			
			МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИОСтрокой, " ");
			Если МассивФИО.Количество() > 0 Тогда
				Запись.Фамилия = МассивФИО[0];
			КонецЕсли;
			Если МассивФИО.Количество() > 1 Тогда
				Запись.Имя = МассивФИО[1];
			КонецЕсли;
			Если МассивФИО.Количество() > 2 Тогда
				Запись.Отчество = МассивФИО[2];
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	Исключение
		Если ВыводитьСообщения Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При создании физлица возникла ошибка: %1'"), ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ПроверитьИСоздатьФизЛицоПоКонтрагенту() 

Функция СоздатьНайтиФизическоеЛицо(ДанныеЗаполнения, ПроверятьПраваДоступа = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ " + ?(ПроверятьПраваДоступа = Истина, "РАЗРЕШЕННЫЕ ", "") + "ПЕРВЫЕ 1
	|	ФизическиеЛица.Наименование КАК ФИО,
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(ФизическиеЛица.ИдентификационныйКодЛичности = &ИИН
	|			ИЛИ ФизическиеЛица.Наименование = &ФИО
	|				И НЕ ФизическиеЛица.ПометкаУдаления)
	|	И НЕ ФизическиеЛица.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ИИН", ДанныеЗаполнения.ИИН); 
	Запрос.УстановитьПараметр("ФИО", ДанныеЗаполнения.ФИОФизЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Если ПроверятьПраваДоступа = Истина И Не ПравоДоступа("Добавление",Метаданные.Справочники.ФизическиеЛица) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбъектФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ОбъектФЛ.Наименование = ДанныеЗаполнения.ФИОФизЛица;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ИИН) Тогда
		ОбъектФЛ.ИдентификационныйКодЛичности = ДанныеЗаполнения.ИИН;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Отчество) Тогда
		ОбъектФЛ.Пол = ПроцедурыУправленияПерсоналомСервер.УстановитьПол(ДанныеЗаполнения.Отчество);
	КонецЕсли; 

	ОбъектФЛ.Записать();
  	
	Если НЕ ПустаяСтрока(ДанныеЗаполнения.ФИОФизЛица) Тогда
		
		НаборЗаписей = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Отбор.ФизЛицо.Установить(ОбъектФЛ.Ссылка);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период  = Дата('19000101');
		Запись.ФизЛицо = ОбъектФЛ.Ссылка;
		
		Запись.Фамилия      = ТРег(ДанныеЗаполнения.Фамилия);
		Запись.Имя          = ТРег(ДанныеЗаполнения.Имя);
		Запись.Отчество     = ТРег(ДанныеЗаполнения.Отчество);
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Возврат ОбъектФЛ.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Данные по физлицу
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДанныеПоФизлицу";
	КомандаПечати.Представление = НСтр("ru = 'Данные по физическому лицу'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Данные по физическому лицу'");
	КомандаПечати.Порядок = 50;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДанныеПоФизлицу") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ДанныеПоФизлицу",
		НСтр("ru = 'Данные по физическому лицу'"),
		ПечатьДанныеПоФизЛицу(МассивОбъектов, ОбъектыПечати),
		,
		"Справочник.ФизическиеЛица.ПФ_MXL_ДанныеПоФизлицу");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникСозданияФаксимиле") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НапечататьПомощникСозданияФаксимиле",
			НСтр("ru='Как быстро и просто создать факсимиле подписи?'"),
			СформироватьПомощникСозданияФаксимилеПодписи(ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьДанныеПоФизЛицу(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ДанныеПоФизлицу";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ФизическиеЛица.ПФ_MXL_ДанныеПоФизлицу");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов" ,	МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаАктуальности" ,	ОбщегоНазначения.ТекущаяДатаПользователя());

	// Данные физлица
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.МестоРождения,
		|	ФизическиеЛица.РНН,
		|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН,
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.СИК,
		|	ФизическиеЛица.ИдентификационныйКодЛичности,
		|	ФизическиеЛица.Пол
		|ПОМЕСТИТЬ ВТ_ФизЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.МестоРождения КАК МестоРожденияРаботника,
		|	ФизическиеЛица.РНН,
		|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН,
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.СИК,
		|	ФизическиеЛица.ИдентификационныйКодЛичности,
		|	ФизическиеЛица.Пол,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	ВТ_ФизЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо В (&МассивОбъектов)) КАК ФИОФизЛицСрезПоследних
		|		ПО (ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо В (&МассивОбъектов)) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо";
	
	
	ВыборкаФизЛица = Запрос.Выполнить().Выбрать();
	
	// Кадровые данные
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок,
		|	РаботникиОрганизацииСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение.Представление КАК ОбособленноеПодразделение,
		|	РаботникиОрганизацииСрезПоследних.Организация.Представление КАК Организация,
		|	РаботникиОрганизацииСрезПоследних.Организация КАК ГоловнаяОрганизация,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_АктуальныеСведения
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ФизЛицо В (&МассивОбъектов)) КАК РаботникиОрганизацииСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Регистратор КАК Документ,
		|	РаботникиОрганизацийСрезПоследних.Регистратор.Представление КАК Представление,
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК Организация,
		|	РаботникиОрганизацийСрезПоследних.Организация КАК ГоловнаяОрганизация,
		|	РаботникиОрганизацийСрезПоследних.Регистратор.Дата КАК Дата,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаС,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	РаботникиОрганизацийСрезПоследних.Должность.Представление КАК Должность
		|ПОМЕСТИТЬ ВТ_КадровыеПерестановки
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник.ФизЛицо В (&МассивОбъектов)
		|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Регистратор,
		|	РаботникиОрганизаций.Регистратор.Представление,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ОбособленноеПодразделение,
		|	РаботникиОрганизаций.Организация,
		|	РаботникиОрганизаций.Регистратор.Дата,
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	РаботникиОрганизаций.ПодразделениеОрганизации.Представление,
		|	РаботникиОрганизаций.Должность.Представление
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
		|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = ВТ_ФизЛица.Ссылка
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение))
		|			И РаботникиОрганизаций.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Регистратор,
		|	РаботникиОрганизацийСрезПоследних.Регистратор.Представление,
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
		|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение,
		|	РаботникиОрганизацийСрезПоследних.Организация,
		|	РаботникиОрганизацийСрезПоследних.Регистратор.Дата,
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление,
		|	РаботникиОрганизацийСрезПоследних.Должность.Представление
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник.Физлицо В (&МассивОбъектов)
		|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АктуальныеСведения.ФизЛицо КАК ФизЛицо,
		|	ВТ_АктуальныеСведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВТ_АктуальныеСведения.Сотрудник КАК Сотрудник,
		|	ВТ_АктуальныеСведения.ТабельныйНомер КАК ТабельныйНомер,
		|	ВТ_АктуальныеСведения.Организация КАК АктуальнаяОрганизация,
		|	ВТ_АктуальныеСведения.ОбособленноеПодразделение КАК АктуальноеОбособленноеПодразделение,
		|	ВТ_АктуальныеСведения.Подразделение КАК АктуальноеПодразделение,
		|	ВТ_АктуальныеСведения.Должность КАК АктуальнаяДолжность,
		|	ВТ_КадровыеПерестановки.Представление,
		|	ВТ_КадровыеПерестановки.ДатаС КАК ДатаС,
		|	ВТ_КадровыеПерестановки.Подразделение,
		|	ВТ_КадровыеПерестановки.Должность
		|ИЗ
		|	ВТ_АктуальныеСведения КАК ВТ_АктуальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КадровыеПерестановки КАК ВТ_КадровыеПерестановки
		|		ПО ВТ_АктуальныеСведения.Сотрудник = ВТ_КадровыеПерестановки.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаС
		|ИТОГИ
		|	МАКСИМУМ(ТабельныйНомер),
		|	МАКСИМУМ(АктуальнаяОрганизация),
		|	МАКСИМУМ(АктуальноеОбособленноеПодразделение),
		|	МАКСИМУМ(АктуальноеПодразделение),
		|	МАКСИМУМ(АктуальнаяДолжность)
		|ПО
		|	ФизЛицо,
		|	ГоловнаяОрганизация,
		|	Сотрудник";
		
	ВыборкаМестаРаботы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФизЛицо");	
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	Пока ВыборкаФизЛица.Следующий() Цикл 
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим основные данные физлица
		
		ОбластьМакета = Макет.ПолучитьОбласть("ФизическиеЛица_Заголовок");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.НачатьГруппуСтрок("", Истина);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ФизическиеЛица_Данные");
		ОбластьМакета.Параметры.Заполнить(ВыборкаФизЛица);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПаспортныеДанныеФизЛиц_Заголовок");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.НачатьГруппуСтрок("", Ложь);
		ОбластьМакета = Макет.ПолучитьОбласть("ПаспортныеДанныеФизЛиц_Данные");
		ОбластьМакета.Параметры.Заполнить(ВыборкаФизЛица);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
		ВыборкаМестаРаботы.Сбросить();
		СтруктураПоиска = Новый Структура("ФизЛицо", ВыборкаФизЛица.ФизЛицо);
		
		Если ВыборкаМестаРаботы.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаОрганизация = ВыборкаМестаРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГоловнаяОрганизация"); 
			
			Пока ВыборкаОрганизация.Следующий() Цикл 
				
				ОбластьМакета = Макет.ПолучитьОбласть("Организация_Заголовок");
				ОбластьМакета.Параметры.Организация = ВыборкаОрганизация.АктуальнаяОрганизация;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.НачатьГруппуСтрок("", Ложь);
			
				ВыборкаСотрудник = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
				
				Пока ВыборкаСотрудник.Следующий() Цикл
					ОбластьМакета = Макет.ПолучитьОбласть("Организация_Данные");
					ОбластьМакета.Параметры.Заполнить(ВыборкаСотрудник);
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
					ВыборкаПеремещения = ВыборкаСотрудник.Выбрать();
					
					Если ВыборкаПеремещения.Количество() > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПеремещенияВОрганизации_Заголовок");
					    ТабличныйДокумент.Вывести(ОбластьМакета);
					    ТабличныйДокумент.НачатьГруппуСтрок("", Ложь);
						ОбластьМакета = Макет.ПолучитьОбласть("ПеремещенияВОрганизации_Шапка");
					    ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЕсли;
					
					НомерСтроки = 1;
					Пока ВыборкаПеремещения.Следующий() Цикл
						Если НомерСтроки > 1 Тогда
							ОбластьМакета.Параметры.ДатаПо = НачалоДня(ВыборкаПеремещения.ДатаС) - 1;
							ТабличныйДокумент.Вывести(ОбластьМакета);
						КонецЕсли;
						
						ОбластьМакета = Макет.ПолучитьОбласть("ПеремещенияВОрганизации_Данные");
						ОбластьМакета.Параметры.Заполнить(ВыборкаПеремещения);
						
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
					
					Если НомерСтроки > 1 Тогда
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ТабличныйДокумент.Вывести(ОбластьРазделитель);
						ТабличныйДокумент.ЗакончитьГруппуСтрок();
					КонецЕсли;
					
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаФизЛица.ФизЛицо);

	КонецЦикла;
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПомощникСозданияФаксимилеПодписи(ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ФизическиеЛица.ПомощникСозданияФаксимиле");
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнению"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнению"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнению"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

#КонецЕсли