
#Область ОбработчкикСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	 ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	//СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, ФизическоеЛицо.ФИО, "ФизическоеЛицо"); 
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФизическоеЛицоСсылка = Объект.Ссылка;
	
	// Заполним представление периодических сведений
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ФИОФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ПаспортныеДанныеФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ГражданствоФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "СведенияОПенсионномОбеспеченииФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "СведенияОбИнвалидностиФизлиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "СведенияОФизлицахУчастникахВОВ", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ИПННалоговыеВычетыФизлиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ИПНПрименениеВычетов", ФизическоеЛицоСсылка);
	
	// ФИО при присвоении СИК
	ФИОПриПрисвоенииСИКМенеджер = РегистрыСведений.ФИОФизЛицПриПрисвоенииСИК.СоздатьМенеджерЗаписи();
	ФИОПриПрисвоенииСИКМенеджер.ФизЛицо = ФизическоеЛицоСсылка;
	ФИОПриПрисвоенииСИКМенеджер.Прочитать();
	ЗаполнитьЗначенияСвойств(ФИОФизЛицПриПрисвоенииСИК, ФИОПриПрисвоенииСИКМенеджер);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
	// Сведения предыдущего места работы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапретаИзмененияДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.Доход,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ДоходНеОблагаемыйИПН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ДоходОблагаемыйСН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененныйВычет,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ОПВ,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ИПН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.СН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.СО,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС
		|ИЗ
		|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|ГДЕ
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = &ФизЛицо";
	
	СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
	// Карт-счета физических лиц
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВЫБОР
	//	|		КОГДА КартСчетаФизЛиц.Период <= &ДатаЗапрета
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ПериодЗакрыт,
	//	|	КартСчетаФизЛиц.Период,
	//	|	КартСчетаФизЛиц.ФизЛицо,
	//	|	КартСчетаФизЛиц.Банк,
	//	|	КартСчетаФизЛиц.НомерКартСчета,
	//	|	КартСчетаФизЛиц.АктивностьСчета
	//	|ИЗ
	//	|	РегистрСведений.КартСчетаФизЛиц КАК КартСчетаФизЛиц
	//	|ГДЕ
	//	|	КартСчетаФизЛиц.ФизЛицо = &ФизЛицо";
	//
	//	
	//КартСчетаФизЛицНаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	//КартСчетаФизЛицНаборЗаписей.Сортировать("Период");
	
	// Сбрасываем периодические сведения
	ФИОФизЛицНаборЗаписейПрочитан 								= Ложь;
	ПаспортныеДанныеФизЛицНаборЗаписейПрочитан 					= Ложь;
	ГражданствоФизЛицНаборЗаписейПрочитан 						= Ложь;
	СведенияОПенсионномОбеспеченииФизЛицНаборЗаписейПрочитан 	= Ложь;
	СведенияОбИнвалидностиФизлицНаборЗаписейПрочитан 			= Ложь;
	СведенияОФизлицахУчастникахВОВНаборЗаписейПрочитан 			= Ложь;
	ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан 				= Ложь;
	ИПНПрименениеВычетовНаборЗаписейПрочитан 					= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОтредактированаИстория" И Источник = ФизическоеЛицоСсылка Тогда
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтаФорма, ФизическоеЛицоСсылка, ИмяСобытия, Параметр, Источник);
		ОбновитьПредставлениеЭлемента(ЭтотОбъект, Параметр.ИмяРегистра);
		
		// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		ПараметрыСклонения = ПараметрыСклонения(Объект);
		СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
		// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		
	ИначеЕсли ИмяСобытия = "ФизЛицо_ИзменениеПодписи"
		И Источник <> ЭтаФорма
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка") И ЗначениеЗаполнено(Параметр.Ссылка) И Параметр.Ссылка = Объект.Ссылка
		И Параметр.Свойство("ФайлПодписи") И Параметр.ФайлПодписи <> Объект.ФайлПодписи Тогда
		УстановитьИзображение("Подписи", Параметр.ФайлПодписи);
		
	ИначеЕсли ИмяСобытия = "ФизЛицо_ЗапросПодписи"
		И Источник <> ЭтаФорма
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка") И ЗначениеЗаполнено(Параметр.Ссылка) И Параметр.Ссылка = Объект.Ссылка
		И Параметр.Свойство("ФайлПодписи") И Параметр.ФайлПодписи <> Объект.ФайлПодписи Тогда
		Оповестить("ФизЛицо_ИзменениеПодписи", Новый Структура("Ссылка, ФайлПодписи", Параметр.Ссылка, Объект.ФайлПодписи), ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ИзменениеМестаРождения" Тогда
		Если Объект.МестоРождения <> Параметр.МестоРожденияПослеРедактирования Тогда
			Объект.МестоРождения = Параметр.МестоРожденияПослеРедактирования;
			ОбновитьПредставлениеЭлемента(ЭтотОбъект, "МестоРождения");
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеФИОПриПрисвоенииСИК" Тогда
		МенеджерЗаписи = Параметр.МенеджерЗаписи;
		Если ФИОФизЛицПриПрисвоенииСИК.Фамилия <> МенеджерЗаписи.Фамилия
				ИЛИ ФИОФизЛицПриПрисвоенииСИК.Имя <> МенеджерЗаписи.Имя
				ИЛИ ФИОФизЛицПриПрисвоенииСИК.Отчество <> МенеджерЗаписи.Отчество Тогда
			ЗаполнитьЗначенияСвойств(ФИОФизЛицПриПрисвоенииСИК, МенеджерЗаписи);
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхСтандартныеВычеты" Тогда
		
		// ИПННалоговыеВычетыФизлиц
		ИПННалоговыеВычетыФизлицНаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.ИПННалоговыеВычетыФизлицНаборЗаписейНовый Цикл
				ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлицНаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		ИПННалоговыеВычетыФизлицНаборЗаписей.Сортировать("Период");
		
		Если ИПННалоговыеВычетыФизлицНаборЗаписей.Количество() > 0 Тогда
			ПоследняяЗапись = ИПННалоговыеВычетыФизлицНаборЗаписей[ИПННалоговыеВычетыФизлицНаборЗаписей.Количество()-1];
			ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлиц, ПоследняяЗапись);
		Иначе
			ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлиц, Новый Структура(ИПННалоговыеВычетыФизлицКлючСтруктуры));
		КонецЕсли;
	
		//ИПНПрименениеВычетов
		ИПНПрименениеВычетовНаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.ИПНПрименениеВычетовНаборЗаписейНовый Цикл
				ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетовНаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		ИПНПрименениеВычетовНаборЗаписей.Сортировать("Период");
		
		Если ИПНПрименениеВычетовНаборЗаписей.Количество() > 0 Тогда
			ПоследняяЗапись = ИПНПрименениеВычетовНаборЗаписей[ИПНПрименениеВычетовНаборЗаписей.Количество()-1];
			ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетов, ПоследняяЗапись);
		Иначе
			ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетов, Новый Структура(ИПНПрименениеВычетовКлючСтруктуры));
		КонецЕсли;
	
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхПрочиеВычеты" Тогда
		ПрочитатьСведенияПрочиеВычетыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхСведенияПредыдущегоМестаРаботы" Тогда
		Если Параметр.Свойство("СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписейНовый") Тогда
			СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Очистить();
			Для Каждого Строка Из Параметр.СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписейНовый Цикл				
				ЗаполнитьЗначенияСвойств(СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Добавить(), Строка);				
			КонецЦикла;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Для нового физического лица устанавливаем ссылку
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ФизическоеЛицоСсылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Справочники.ФизическиеЛица.ПроверитьДубли(ТекущийОбъект.Ссылка, ПаспортныеДанныеФизЛиц, ТекущийОбъект.РНН, ТекущийОбъект.ИдентификационныйКодЛичности, ТекущийОбъект.Наименование);
	
	// ФИО
	Если ФИОФизЛицНаборЗаписейПрочитан Тогда
		НаборФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборФИО.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборФИО.Отбор.ФизЛицо.Использование 	= Истина;
		НаборФИО.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборФИО.Загрузить(ФИОФизЛицНаборЗаписей.Выгрузить());
		НаборФИО.Записать(Истина);
	КонецЕсли;
			
	// ФИО при присвоении СИК
	Если ЗначениеЗаполнено(ФИОФизЛицПриПрисвоенииСИК.Фамилия) 
			Или ЗначениеЗаполнено(ФИОФизЛицПриПрисвоенииСИК.Имя)
			Или ЗначениеЗаполнено(ФИОФизЛицПриПрисвоенииСИК.Отчество) Тогда
		ЗаписьФИОПриПрисвоенииСИК = РегистрыСведений.ФИОФизЛицПриПрисвоенииСИК.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьФИОПриПрисвоенииСИК, ФИОФизЛицПриПрисвоенииСИК);
		ЗаписьФИОПриПрисвоенииСИК.ФизЛицо = ТекущийОбъект.Ссылка;
		ЗаписьФИОПриПрисвоенииСИК.Записать(Истина);
	Иначе 
		// Удалили сведения
		НаборФИОПриПрисвоенииСИК = РегистрыСведений.ФИОФизЛицПриПрисвоенииСИК.СоздатьНаборЗаписей();
		НаборФИОПриПрисвоенииСИК.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборФИОПриПрисвоенииСИК.Отбор.ФизЛицо.Использование 	= Истина;
		НаборФИОПриПрисвоенииСИК.Прочитать();
		Если НаборФИОПриПрисвоенииСИК.Количество() > 0 Тогда
			НаборФИОПриПрисвоенииСИК.Очистить();
			НаборФИОПриПрисвоенииСИК.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Паспортные данные
	Если ПаспортныеДанныеФизЛицНаборЗаписейПрочитан Тогда
		НаборПаспортныеДанные = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
		НаборПаспортныеДанные.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборПаспортныеДанные.Отбор.ФизЛицо.Использование 	= Истина;
		НаборПаспортныеДанные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборПаспортныеДанные.Загрузить(ПаспортныеДанныеФизЛицНаборЗаписей.Выгрузить());
		НаборПаспортныеДанные.Записать(Истина);
	КонецЕсли;
		
	// Гражданство
	Если ГражданствоФизЛицНаборЗаписейПрочитан Тогда
		НаборГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
		НаборГражданство.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборГражданство.Отбор.ФизЛицо.Использование 	= Истина;
		НаборГражданство.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборГражданство.Загрузить(ГражданствоФизЛицНаборЗаписей.Выгрузить());
		НаборГражданство.Записать(Истина);
	КонецЕсли;
		
	// Сведения о пенс. обеспечении
	Если СведенияОПенсионномОбеспеченииФизЛицНаборЗаписейПрочитан Тогда
		НаборСведенияОПенсОбеспечении = РегистрыСведений.СведенияОПенсионномОбеспеченииФизЛиц.СоздатьНаборЗаписей();
		НаборСведенияОПенсОбеспечении.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборСведенияОПенсОбеспечении.Отбор.ФизЛицо.Использование 	= Истина;
		НаборСведенияОПенсОбеспечении.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборСведенияОПенсОбеспечении.Загрузить(СведенияОПенсионномОбеспеченииФизЛицНаборЗаписей.Выгрузить());
		НаборСведенияОПенсОбеспечении.Записать(Истина);
	КонецЕсли;
		
	// Сведения об инвалидности
	Если СведенияОбИнвалидностиФизлицНаборЗаписейПрочитан Тогда	
		НаборСведенияОбИнвалидности = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
		НаборСведенияОбИнвалидности.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборСведенияОбИнвалидности.Отбор.ФизЛицо.Использование 	= Истина;
		НаборСведенияОбИнвалидности.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборСведенияОбИнвалидности.Загрузить(СведенияОбИнвалидностиФизлицНаборЗаписей.Выгрузить());
		НаборСведенияОбИнвалидности.Записать(Истина);
	КонецЕсли;
	
	// Сведения об участниках ВОВ
	Если СведенияОФизлицахУчастникахВОВНаборЗаписейПрочитан Тогда
		НаборСведенияОбУчатникахВОВ = РегистрыСведений.СведенияОФизлицахУчастникахВОВ.СоздатьНаборЗаписей();
		НаборСведенияОбУчатникахВОВ.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборСведенияОбУчатникахВОВ.Отбор.ФизЛицо.Использование 	= Истина;
		НаборСведенияОбУчатникахВОВ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборСведенияОбУчатникахВОВ.Загрузить(СведенияОФизлицахУчастникахВОВНаборЗаписей.Выгрузить());
		НаборСведенияОбУчатникахВОВ.Записать(Истина);
	КонецЕсли;
		
	// Стандартные вычеты
	Если ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан Тогда
		НаборИПННалоговыеВычеты = РегистрыСведений.ИПННалоговыеВычетыФизлиц.СоздатьНаборЗаписей();
		НаборИПННалоговыеВычеты.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборИПННалоговыеВычеты.Отбор.ФизЛицо.Использование 	= Истина;
		НаборИПННалоговыеВычеты.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборИПННалоговыеВычеты.Загрузить(ИПННалоговыеВычетыФизлицНаборЗаписей.Выгрузить());
		НаборИПННалоговыеВычеты.Записать(Истина);
	КонецЕсли;
	
	Если ИПНПрименениеВычетовНаборЗаписейПрочитан Тогда
		НаборИПНПрименениеВычетов = РегистрыСведений.ИПНПрименениеВычетов.СоздатьНаборЗаписей();
		НаборИПНПрименениеВычетов.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
		НаборИПНПрименениеВычетов.Отбор.ФизЛицо.Использование 	= Истина;
		НаборИПНПрименениеВычетов.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборИПНПрименениеВычетов.Загрузить(ИПНПрименениеВычетовНаборЗаписей.Выгрузить());
		НаборИПНПрименениеВычетов.Записать(Истина);
	КонецЕсли;
	
	// Сведения с предыдущего места работы
	НаборСведенияПредыдущегоМестаРаботы = РегистрыСведений.СведенияПредыдущегоМестаРаботыФизЛиц.СоздатьНаборЗаписей();
	НаборСведенияПредыдущегоМестаРаботы.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
	НаборСведенияПредыдущегоМестаРаботы.Отбор.ФизЛицо.Использование 	= Истина;
	НаборСведенияПредыдущегоМестаРаботы.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборСведенияПредыдущегоМестаРаботы.Загрузить(СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Выгрузить());
	НаборСведенияПредыдущегоМестаРаботы.Записать(Истина);
	
	// Карт-счета
	//НаборКартСчета = РегистрыСведений.КартСчетаФизЛиц.СоздатьНаборЗаписей();
	//НаборКартСчета.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.Ссылка;
	//НаборКартСчета.Отбор.ФизЛицо.Использование 	= Истина;
	//НаборКартСчета.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	//НаборКартСчета.Загрузить(КартСчетаФизЛицНаборЗаписей.Выгрузить());
	//НаборКартСчета.Записать(Истина);

	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = ПараметрыСклонения(Объект);
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ФизЛицо_ЗапросПодписи", Новый Структура("Ссылка, ФайлПодписи", Объект.Ссылка, Объект.ФайлПодписи), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчкикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФИО()
	
	ФИО = Объект.Наименование;
	
	Если ПустаяСтрока(ФИОФизЛиц.Фамилия) ИЛИ Параметры.Ключ.Пустая() Тогда
		МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ", , Истина);
		ФИОФизЛиц.Фамилия  = ?(МассивФИО.Количество() > 0, МассивФИО[0], "");
		ФИОФизЛиц.Имя      = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
		ФИОФизЛиц.Отчество = ?(МассивФИО.Количество() > 2, МассивФИО[2], "");
		
		Если ФИОФизЛицНаборЗаписей.Количество() = 0 Тогда
			НоваяСтрока = ФИОФизЛицНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФИОФизЛиц);
			НоваяСтрока.Период = Дата(1900, 1, 1);
			НоваяСтрока.ФизЛицо = ФизическоеЛицоСсылка;
			ФИОФизЛицНаборЗаписейПрочитан = Истина;
			ФИОФизЛицКлючСтруктуры = "Период, ФизЛицо, Фамилия, Имя, Отчество";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФИОФизЛиц.Отчество) Тогда
			Объект.Пол = ПроцедурыУправленияПерсоналомКлиентСервер.УстановитьПол(ФИОФизЛиц.Отчество)
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = ПараметрыСклонения(Объект);
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Ожидание = 0;
	
	ДанныеВыбора = Новый СписокЗначений;

	Фамилия 	= ФИОФизЛиц.Фамилия;
	Имя 		= ФИОФизЛиц.Имя;
	Отчество 	= ФИОФизЛиц.Отчество;
	
	Если ЗначениеЗаполнено(Фамилия) Тогда
		ДанныеВыбора.Добавить(Фамилия);
		Если ЗначениеЗаполнено(Имя) Тогда
			ДанныеВыбора.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));
			ДанныеВыбора.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");
			Если ЗначениеЗаполнено(Отчество) Тогда
				ДанныеВыбора.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
				ДанныеВыбора.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
 			КонецЕсли;
		 КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			ДанныеВыбора.Добавить(Имя);
			Если ЗначениеЗаполнено(Отчество) Тогда
				ДанныеВыбора.Добавить(СокрЛП(Имя) + " " + СокрЛП(Отчество));
				ДанныеВыбора.Добавить(СокрЛП(Имя) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Отчество) Тогда
				ДанныеВыбора.Добавить(Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияИзмененияФИОНажатие(Элемент)
	
	ФИОДоИзменения = СокрЛП(ФИОФизЛиц.Фамилия) + " " + СокрЛП(ФИОФизЛиц.Имя) + " " + СокрЛП(ФИОФизЛиц.Отчество);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияОкнаРедактированияФИО", ЭтаФорма);
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("ФИОФизЛиц", ФизическоеЛицоСсылка, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Представление", Объект.МестоРождения);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаМестаРождения", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеФизЛицНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("ПаспортныеДанныеФизЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоФизЛицНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("ГражданствоФизЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПенсионноеОбеспечениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("СведенияОПенсионномОбеспеченииФизЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьФИОПриПрисвоенииСИКНажатие(Элемент)
	
	СтруктураФИО = Новый Структура("ФизЛицо, Фамилия, Имя, Отчество", ФизическоеЛицоСсылка, ФИОФизЛицПриПрисвоенииСИК.Фамилия, ФИОФизЛицПриПрисвоенииСИК.Имя, ФИОФизЛицПриПрисвоенииСИК.Отчество);
	ПараметрыФормы = Новый Структура("СтруктураДанных", СтруктураФИО);
	ОткрытьФорму("РегистрСведений.ФИОФизЛицПриПрисвоенииСИК.Форма.РедактированиеЗаписи", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизлицНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("СведенияОбИнвалидностиФизлиц", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОФизлицахУчастникахВОВНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("СведенияОФизлицахУчастникахВОВ", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПНСтандартныеВычетыДо2018Года(Команда)
	
	ТолькоПросмотрИстории = ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 

	Если Не ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан Тогда
		ПрочитатьНаборЗаписейПериодическихСведений("ИПННалоговыеВычетыФизлиц", ФизическоеЛицоСсылка);
	КонецЕсли;
	Если Не ИПНПрименениеВычетовНаборЗаписейПрочитан Тогда
		ПрочитатьНаборЗаписейПериодическихСведений("ИПНПрименениеВычетов", ФизическоеЛицоСсылка);
	КонецЕсли;
	
	МассивИПННалоговыеВычетыФизлиц = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИсторииВФорме(ЭтотОбъект, "ИПННалоговыеВычетыФизлиц");
	МассивИПНПрименениеВычетов = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИсторииВФорме(ЭтотОбъект, "ИПНПрименениеВычетов");	
	
	ПараметрыФормы = Новый Структура("ФизЛицо, ТолькоПросмотр, МассивИПННалоговыеВычетыФизлиц, МассивИПНПрименениеВычетов, ДатаЗапретаИзмененияДанных", ФизическоеЛицоСсылка, ТолькоПросмотрИстории, МассивИПННалоговыеВычетыФизлиц, МассивИПНПрименениеВычетов, ДатаЗапретаИзмененияДанных);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаСтандартныеВычеты", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПНПрочиеВычетыДо2018Года(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиОбъекта", ЭтаФорма, Новый Структура("Действие", "ОткрытьПрочиеВычеты"));
		ТекстВопроса = НСтр("ru = 'Перед вводом сведений необходимо записать элемент. Записать?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПараметрыФормы = Новый Структура("ФизЛицо", ФизическоеЛицоСсылка);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаПрочиеВычеты", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияПредыдущегоМестаРаботыФизЛицНажатие(Элемент)
	
	ТолькоПросмотрИстории = ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("ФизЛицо, ТолькоПросмотр, СведенияПредыдущегоМестаРаботыФизЛиц", ФизическоеЛицоСсылка, ТолькоПросмотрИстории, СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаСведенияПредыдущегоМестаРаботы", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахИПННажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;	
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиЭлемента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед просмотром сведений о вычетах необходимо записать элемент. Записать?'"), Режим, 0);
	Иначе
		ПослеЗакрытияВопросаОЗаписиЭлемента(КодВозвратаДиалога.Пропустить, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписиЭлемента(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ТолькоПросмотрИстории = ТолькоПросмотр;
		
		Если Не ТолькоПросмотрИстории Тогда
			Попытка
				ЗаблокироватьДанныеФормыДляРедактирования();
				ТолькоПросмотрИстории = Ложь;
			Исключение
				ТолькоПросмотрИстории = Истина;
			КонецПопытки
		КонецЕсли; 
		
		ПараметрыФормы = Новый Структура("ФизическоеЛицо, ТолькоПросмотр", ФизическоеЛицоСсылка, ТолькоПросмотрИстории);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВычетыИПН", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИдентификационныйКодЛичностиПриИзменении(Элемент)
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "ИИН");
	
КонецПроцедуры

&НаКлиенте
Процедура РННПриИзменении(Элемент)
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "РНН");
	
КонецПроцедуры

&НаКлиенте
Процедура СИКПриИзменении(Элемент)
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "СИК");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура АдресПодписиНажатие(Элемент, СтандартнаяОбработка)
	
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОчисткаПодписиНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, "Подписи");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_КартСчетаФизЛиц

&НаКлиенте
Процедура КартСчетаФизЛицНаборЗаписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		Отказ = Истина;
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = НСтр("ru = 'Объект не записан. Перед добавлением сведений о карт-счетах необходимо записать объект. Выполнить запись?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиОбъекта", ЭтотОбъект, Новый Структура("Действие", "ДобавитьКартСчет"));
	    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КартСчетаФизЛицНаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если НоваяСтрока Тогда
			Элемент.ТекущиеДанные.ФизЛицо = ФизическоеЛицоСсылка;
			Если КартСчетаФизЛицНаборЗаписей.Количество() > 1 Тогда
				НовыйПериод = Макс(КонецДня(КартСчетаФизЛицНаборЗаписей.Получить(КартСчетаФизЛицНаборЗаписей.Количество() - 2).Период) + 1, КонецДня(ДатаЗапретаИзмененияДанных) + 1, НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
			Иначе
				НовыйПериод = Макс(КонецДня(ДатаЗапретаИзмененияДанных) + 1, Дата(1900, 1, 1));
			КонецЕсли; 
			Элемент.ТекущиеДанные.Период = НовыйПериод;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартСчетаФизЛицНаборЗаписейПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.Период <= ДатаЗапретаИзмененияДанных Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартСчетаФизЛицНаборЗаписейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НЕ ОтменаРедактирования Тогда
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			// Проверим корректность номера карт-счета
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НомерКартСчета) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Не заполнен карт-счет'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "КартСчетаФизЛицНаборЗаписей.НомерКартСчета", , Отказ);
			ИначеЕсли НЕ ПроверитьПринадлежностьКартСчетаБанку(Элемент.ТекущиеДанные.НомерКартСчета, Элемент.ТекущиеДанные.Банк) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Карт-счет не принадлежит указанному банку'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "КартСчетаФизЛицНаборЗаписей.НомерКартСчета", , Отказ);
			КонецЕсли;
			// Проверим корректность периода
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Необходимо указать период, с которого будет действовать запись сведений'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "КартСчетаФизЛицНаборЗаписей.Период", , Отказ);
			ИначеЕсли Элемент.ТекущиеДанные.Период <= ДатаЗапретаИзмененияДанных Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(				
					НСтр("ru = 'Период закрыт для редактирования, укажите период позже даты %1'"), Формат(ДатаЗапретаИзмененияДанных, "ДФ='дд ММММ гггг'"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "КартСчетаФизЛицНаборЗаписей.Период", , Отказ);
			Иначе
				НайденныеСтроки = КартСчетаФизЛицНаборЗаписей.НайтиСтроки(Новый Структура("Период, Банк", Элемент.ТекущиеДанные.Период, Элемент.ТекущиеДанные.Банк));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> Элемент.ТекущиеДанные Тогда
						СообщениеОбОшибке = НСтр("ru = 'Уже есть запись с указанным периодом сведений'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "КартСчетаФизЛицНаборЗаписей.Период", , Отказ);
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Если НЕ НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Необходимо указать период, с которого будет действовать запись сведений'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,,"КартСчетаФизЛицНаборЗаписей.Период", , Отказ);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КартСчетаФизЛицНаборЗаписейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактированиеПериодическихСведенийКлиент.УпорядочитьНаборЗаписейВФорме(ЭтаФорма, "КартСчетаФизЛицНаборЗаписей");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьАктивностьКартСчета(Команда)

	ТекущиеДанные = Элементы.КартСчетаФизЛицНаборЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;                                                                                                       
	КонецЕсли;
	
	ТекущиеДанные.АктивностьСчета = НЕ ТекущиеДанные.АктивностьСчета;
	Модифицированность = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьИзображениеПодписи(Команда)
	
	ДобавитьИзображение("Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодписьИзПрисоединенныхФайлов(Команда)
	
	ВыбратьИзображениеИзПрисоединенныхФайлов("Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеПодписи(Команда)
	
	ИзменитьИзображение("Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеПодписи(Команда)
	
	ОчиститьИзображение("Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеПодписи(Команда)
	
	ПросмотретьИзображение("Подписи");
	
КонецПроцедуры

&НаКлиенте
Процедура Склонения(Команда)
		
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = ПараметрыСклонения(Объект);
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФаксимилеПодписи

&НаКлиенте
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект["Файл" + ИмяЭлементаСКартинкой]) Тогда
		ПросмотретьИзображение(ИмяЭлементаСКартинкой);
	ИначеЕсли Не ТолькоПросмотр Тогда
		ДобавитьИзображение(ИмяЭлементаСКартинкой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, ИмяКартинки)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ЭтаФорма["Адрес" + ИмяКартинки]) Тогда
		ОчиститьИзображение(ИмяКартинки);
	Иначе
		ДобавитьИзображение(ИмяКартинки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(ИмяЭлементаСКартинкой)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект["Файл" + ИмяЭлементаСКартинкой]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(Объект["Файл" + ИмяЭлементаСКартинкой], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Адрес" + ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(ИмяЭлементаСКартинкой)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос", ЭтотОбъект, ИмяЭлементаСКартинкой), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос(РезультатВопроса, ИмяЭлементаСКартинкой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой)
	
	ВладелецФайла = Объект.Ссылка;
	
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		
		Фильтр = НСтр("ru = 'Формат PNG(*.png*)|*.png'");
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбратьИзображениеЗавершение", ЭтотОбъект, ИмяЭлементаСКартинкой);
		
		РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецФайла, ИдентификаторФайла, Фильтр, , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьИзображение(ИмяЭлементаСКартинкой)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект["Файл" + ИмяЭлементаСКартинкой]) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект["Файл" + ИмяЭлементаСКартинкой]);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Адрес" + ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзображение(ИмяЭлементаСКартинкой, Изображение)
	
	УстановитьОчиститьИзображение(ЭтаФорма, ИмяЭлементаСКартинкой, Изображение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(ИмяЭлементаСКартинкой)
	
	УстановитьОчиститьИзображение(ЭтаФорма, ИмяЭлементаСКартинкой, ПредопределенноеЗначение("Справочник.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОчиститьИзображение(Форма, ИмяЭлементаСКартинкой, Изображение)
	
	Объект = Форма.Объект;
	
	Если Объект["Файл" + ИмяЭлементаСКартинкой] <> Изображение Тогда
		
		Форма.Модифицированность = Истина;
		
		Объект["Файл" + ИмяЭлементаСКартинкой] = Изображение; 
		
		#Если Клиент Тогда
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Оповестить("ФизЛицо_Изменение" + ИмяЭлементаСКартинкой, Новый Структура("Ссылка, Файл" + ИмяЭлементаСКартинкой, Объект.Ссылка, Изображение), Форма);
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	Форма["Адрес" + ИмяЭлементаСКартинкой] = ?(ЗначениеЗаполнено(Изображение), НавигационнаяСсылкаКартинки(Изображение, Форма.УникальныйИдентификатор), "");

	Если ЗначениеЗаполнено(Изображение) Тогда
		Если ИмяЭлементаСКартинкой = "Подписи" Тогда
			ТекстКартинки = НСтр("ru = 'Очистить подпись'"); 
		Иначе
			ТекстКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Очистить %1'"), ИмяЭлементаСКартинкой);	
		КонецЕсли;
			
		Форма["ЗагрузкаОчистка" + ИмяЭлементаСКартинкой] = ТекстКартинки;
	Иначе 
		Если ИмяЭлементаСКартинкой = "Подписи" Тогда
			ТекстКартинки = НСтр("ru = 'Загрузить подпись'"); 
		Иначе
			ТекстКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Загрузить %1'"), ИмяЭлементаСКартинкой);	
		КонецЕсли;
		
		Форма["ЗагрузкаОчистка" + ИмяЭлементаСКартинкой] = ТекстКартинки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла"     , Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора"       , Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбратьИзображениеЗавершение", ЭтотОбъект, ИмяЭлементаСКартинкой);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы["Адрес" + ИмяЭлементаСКартинкой], , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбратьИзображениеЗавершение(Результат, ИмяЭлементаСКартинкой) Экспорт
	
	ФайлИзображения = Неопределено;
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если Результат.Количество() > 0 Тогда
			ФайлИзображения = Результат[0];
		КонецЕсли;
	Иначе
		ФайлИзображения = Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлИзображения) Тогда
		
		УстановитьИзображение(ИмяЭлементаСКартинкой, ФайлИзображения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "МестоРождения");
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "ПаспортныеДанныеФизЛиц");
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "ГражданствоФизЛиц");
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "СведенияОПенсионномОбеспеченииФизЛиц");
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "СведенияОбИнвалидностиФизлиц");
	ОбновитьПредставлениеЭлемента(ЭтотОбъект, "СведенияОФизлицахУчастникахВОВ");
	
	ПрочитатьСведенияПрочиеВычетыНаСервере();
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	
	ДанныеЗапретаИзменения = ДатыЗапретаИзмененияБК.ЗапретИзменения("РегистрСведений.ГражданствоФизЛиц");
	Если ДанныеЗапретаИзменения.ЗапретНайден Тогда
		ДатаЗапретаИзмененияДанных = ДанныеЗапретаИзменения.ДатаЗапрета;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодпись", "Доступность",
		ПравоДоступа("Изменение", Метаданные.Справочники.ФизическиеЛицаПрисоединенныеФайлы) И
		ПравоДоступа("Редактирование", Метаданные.Справочники.ФизическиеЛица.Реквизиты.ФайлПодписи));
	
	УстановитьОчиститьИзображение(ЭтаФорма, "Подписи", Объект.ФайлПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеЭлемента(Форма, ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "МестоРождения" Тогда
		МестоРожденияФизЛица = ПроцедурыУправленияПерсоналомКлиентСервер.ПредставлениеМестаРождения(Форма.Объект.МестоРождения);
		Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) Тогда
			МестоРожденияФизЛица = НСтр("ru = 'Ввести место рождения'");
		КонецЕсли;
		Форма.МестоРожденияФизЛица = МестоРожденияФизЛица;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ГражданствоФизЛиц" Тогда
		ГражданствоФизЛиц = Форма.ГражданствоФизЛиц;
		Если НЕ ЗначениеЗаполнено(ГражданствоФизЛиц.Период) Тогда
			ГражданствоФизЛицПредставлениеЗаписи = НСтр("ru = 'Ввести данные о гражданстве'");
		Иначе
	  
			Результат = Новый Массив;  
						
			Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ГражданствоФизЛиц.Страна));
			
			Результат.Добавить(?(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, НСтр("ru = ', не имеет право на пенсионное обеспечение'"), НСтр("ru = ', имеет право на пенсионное обеспечение'")));	
			Результат.Добавить(?(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию, НСтр("ru = ', не подлежит социальному страхованию'"), НСтр("ru = ', подлежит социальному страхованию'")));	
			Результат.Добавить(?(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию, НСтр("ru = ', не подлежит социальному медицинскому страхованию'"), НСтр("ru = ', подлежит социальному медицинскому страхованию'")));
			Результат.Добавить(?(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, НСтр("ru = ', не является налоговым резидентом РК'"), НСтр("ru = ', является налоговым резидентом РК'")));
			Результат.Добавить(?(ГражданствоФизЛиц.ИностранныйСпециалист, НСтр("ru = ', является иностранным специалистом'"), НСтр("ru = ', не является иностранным специалистом'")));
					  			
			ГражданствоФизЛицПредставлениеЗаписи = СтрСоединить(Результат);
					  					  
			Если НЕ ЗначениеЗаполнено(ГражданствоФизЛиц.Страна) Тогда
				ГражданствоФизЛицПредставлениеЗаписи = НСтр("ru = 'Лицо без гражданства'") + ГражданствоФизЛицПредставлениеЗаписи;
			КонецЕсли;
		КонецЕсли;
		Форма.ГражданствоФизЛицПредставлениеЗаписи = ГражданствоФизЛицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ПаспортныеДанныеФизЛиц" Тогда
		ПаспортныеДанныеФизЛиц = Форма.ПаспортныеДанныеФизЛиц;
		Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеФизЛиц.Период) Тогда
			ПаспортныеДанныеФизЛицПредставлениеЗаписи = НСтр("ru = 'Ввести данные об удостоверении личности'");
		Иначе						
						
			ПаспортныеДанныеФизЛицПредставлениеЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, %2 № %3, выдан: %4 года, %5'"),
				ПаспортныеДанныеФизЛиц.ДокументВид,
				?(ЗначениеЗаполнено(ПаспортныеДанныеФизЛиц.ДокументСерия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Серия: %1, '"),ПаспортныеДанныеФизЛиц.ДокументСерия),""),
				ПаспортныеДанныеФизЛиц.ДокументНомер,
				Формат(ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='...'"),
				ПаспортныеДанныеФизЛиц.ДокументКемВыдан
				);
								
		КонецЕсли;
		Форма.ПаспортныеДанныеФизЛицПредставлениеЗаписи = ПаспортныеДанныеФизЛицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СведенияОПенсионномОбеспеченииФизЛиц" Тогда
		СведенияОПенсионномОбеспеченииФизЛиц = Форма.СведенияОПенсионномОбеспеченииФизЛиц;
						
		Результат = Новый Массив;  		
		Результат.Добавить(?(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, НСтр("ru = 'Является пенсионером'"), НСтр("ru = 'Не является пенсионером'")));	
		Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; Пенсионный фонд: %1'"), ?(НЕ ЗначениеЗаполнено(СведенияОПенсионномОбеспеченииФизЛиц.ПенсионныйФонд), НСтр("ru = 'не указан'"), СведенияОПенсионномОбеспеченииФизЛиц.ПенсионныйФонд)));	
											
		СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи = СтрСоединить(Результат);
														
		Форма.СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи = СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СведенияОбИнвалидностиФизлиц" Тогда
		СведенияОбИнвалидностиФизлиц = Форма.СведенияОбИнвалидностиФизлиц;
		Если ЗначениеЗаполнено(СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности) Тогда

			СведенияОбИнвалидностиФизлицПредставлениеЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: %2 группы, справка серия: %3, номер: %4, выдана: %5 года , срок действия: %6 года '"), 
				СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности, 
				СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности,
				СведенияОбИнвалидностиФизлиц.СерияСправки,
				СведенияОбИнвалидностиФизлиц.НомерСправки,
				Формат(СведенияОбИнвалидностиФизлиц.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'"),
				Формат(СведенияОбИнвалидностиФизлиц.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'"));
			
		Иначе
			СведенияОбИнвалидностиФизлицПредставлениеЗаписи = НСтр("ru = 'Не является лицом с инвалидностью'");
		КонецЕсли;
		Форма.СведенияОбИнвалидностиФизлицПредставлениеЗаписи = СведенияОбИнвалидностиФизлицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СведенияОФизлицахУчастникахВОВ" Тогда
		СведенияОФизлицахУчастникахВОВ = Форма.СведенияОФизлицахУчастникахВОВ;
		Если ЗначениеЗаполнено(СведенияОФизлицахУчастникахВОВ.Статус) Тогда

			СведенияОФизлицахУчастникахВОВПредставлениеЗаписи =	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Статус: %1, удостоверение серия: %2, номер: %3, выдано: %4 года '"),
				СведенияОФизлицахУчастникахВОВ.Статус,
				СведенияОФизлицахУчастникахВОВ.СерияУдостоверения,
				СведенияОФизлицахУчастникахВОВ.НомерУдостоверения,
				Формат(СведенияОФизлицахУчастникахВОВ.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'"));
			
		Иначе
			СведенияОФизлицахУчастникахВОВПредставлениеЗаписи = НСтр("ru = 'Не является участником, лицом с инвалидностью ВОВ и лицом, приравненным к ним'");
		КонецЕсли;
		Форма.СведенияОФизлицахУчастникахВОВПредставлениеЗаписи = СведенияОФизлицахУчастникахВОВПредставлениеЗаписи;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаРедактированияФИО(Результат, Параметры) Экспорт
	
	НовоеФИО = СокрЛП(ФИОФизЛиц.Фамилия) + " " + СокрЛП(ФИОФизЛиц.Имя) + " " + СокрЛП(ФИОФизЛиц.Отчество);
	Если ВРег(ФИОДоИзменения) <> ВРег(НовоеФИО) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Изменить наименование элемента справочника на %1?'"), НовоеФИО);
		СтруктураПараметров = Новый Структура("НовоеФИО", НовоеФИО);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСменеНаименования", ЭтотОбъект, СтруктураПараметров);
	    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСменеНаименования(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Наименование = Параметры.НовоеФИО;
		ПриИзмененииФИО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРегламентированныеДанные(Форма, ПроверяемыеДанные = "ИИН, РНН, СИК")
	
	МассивПроверяемыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемыеДанные, ",", , Истина);
	Для Каждого Элемент Из МассивПроверяемыхДанных Цикл
		ИмяЭлементаНадписи = "НадписьПоясненияНекорректного" + Элемент;
		ТекстСообщения     = "";
		
		Если Форма.Элементы.Найти(ИмяЭлементаНадписи) <> Неопределено Тогда 
			Если Элемент = "ИИН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.ИдентификационныйКодЛичности) 
					ИЛИ РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(Форма.Объект.ИдентификационныйКодЛичности, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			ИначеЕсли Элемент = "РНН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.РНН) 
					ИЛИ РегламентированныеДанныеКлиентСервер.РННСоответствуетТребованиям(Форма.Объект.РНН, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			ИначеЕсли Элемент = "СИК" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.СИК) 
					ИЛИ РегламентированныеДанныеКлиентСервер.СИКСоответствуетТребованиям(Форма.Объект.СИК, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			КонецЕсли;
			Форма[ИмяЭлементаНадписи] = ТекстСообщения;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПринадлежностьКартСчетаБанку(НомерКартСчета, Банк)
	
	Если НомерКартСчета.Банк <> Банк Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписиОбъекта(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		Если ДопПараметры.Свойство("Действие") И ДопПараметры.Действие = "ОткрытьПрочиеВычеты" Тогда
			ПараметрыФормы = Новый Структура("ФизЛицо", ФизическоеЛицоСсылка);
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаПрочиеВычеты", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ДопПараметры.Свойство("Действие") И ДопПараметры.Действие = "ДобавитьКартСчет" Тогда
			//Элементы.КартСчетаФизЛицНаборЗаписей.ДобавитьСтроку();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#Область РедактированиеПериодическихСведений

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведенийСервер.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСведенияПрочиеВычетыНаСервере()
	
	ИПНПрочиеВычеты = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.Налогоплательщик.Представление КАК Налогоплательщик,
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.ВычетИПН,
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.СуммаВычета
		|ИЗ
		|	РегистрСведений.ИПНПлановыеНалоговыеВычетыФизлиц.СрезПоследних(
		|			,
		|			Физлицо = &Физлицо
		|				И НАЧАЛОПЕРИОДА(МесяцНалоговогоПериода, МЕСЯЦ) = &МесяцНалоговогоПериода) КАК ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних
		|ГДЕ
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.СуммаВычета <> 0";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда	
		
		Результат = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
														
			Если Результат.Количество() <> 0 Тогда
				Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; вычет ""%1"" в сумме %2, налогоплательщик %3'"),Выборка.ВычетИПН,Формат(Выборка.СуммаВычета, "ЧЦ=15; ЧДЦ=2; ЧРГ="),Выборка.Налогоплательщик));	
			Иначе
				Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предоставляется вычет ""%1"" в сумме %2, налогоплательщик %3'"),Выборка.ВычетИПН,Формат(Выборка.СуммаВычета, "ЧЦ=15; ЧДЦ=2; ЧРГ="),Выборка.Налогоплательщик));	
			КонецЕсли;  							
							
		КонецЦикла; 
		
		ИПНПрочиеВычеты = СтрСоединить(Результат);
	Иначе 
		ИПНПрочиеВычеты = НСтр("ru = 'Дополнительные вычеты не зарегистрированы'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСклонения(ФизическоеЛицо)
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ПараметрыСклонения.Пол    = ?(
		ЗначениеЗаполнено(ФизическоеЛицо.Пол),
		?(ФизическоеЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской"), 1, 2),
		Неопределено);
	Возврат ПараметрыСклонения;
КонецФункции

#КонецОбласти
