
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	ПодготовитьФормуНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	
	
	ПриЗакрытииНаСервере();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборПоСчетДтПриИзменении(Элемент)
	ОбновитьСписокХО();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСчетКтПриИзменении(Элемент)
	ОбновитьСписокХО();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриИзменении(Элемент)
	ОбновитьСписокХО();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСодержаниюПриИзменении(Элемент)
	
	ОбновитьСписокХО();
	
	Если Элемент.СписокВыбора.НайтиПоЗначению(Элемент.ТекстРедактирования) = Неопределено И Элемент.ТекстРедактирования <> "" Тогда
		Элемент.СписокВыбора.Вставить(0, Элемент.ТекстРедактирования);
	КонецЕсли;  
	
	Если Элемент.СписокВыбора.Количество() = 11 Тогда
		Элемент.СписокВыбора.Удалить(10);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПоследних Тогда 
		
		Если ПоследниеВыбранныеХО.Количество() > 0 Тогда
			ОбновитьСписокПоследнихХО();
		КонецЕсли; 
		
		Элементы.ОчиститьСписок.Видимость = Истина;
		
	Иначе
		Элементы.ОчиститьСписок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТабличноеПолеВсех

&НаКлиенте
Процедура ТабличноеПолеВсехВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элемент.ТекущиеДанные;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	Конецесли;
		
	ВвестиОперациюНаКлиенте(ВыбраннаяСтрока);
			
КонецПроцедуры  


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ОчиститьСписок(Команда)
	ПоследниеВыбранныеХО.Очистить();
	ТабличноеПолеПоследних.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОперацию(Команда)

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВсех Тогда
		ТекущиеДанные = Элементы.ТабличноеПолеВсех.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ТабличноеПолеПоследних.ТекущиеДанные;
	КонецЕсли; 
	
	Если ТекущиеДанные <> Неопределено Тогда
		ВвестиОперациюНаКлиенте(ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦ ФОРМЫ

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ  

&НаСервере
Процедура ОбновитьСписокХО()
	
	ТабличноеПолеВсех.Очистить();
	
	НайденныйЭлемент = Элементы.СписокДокументов.СписокВыбора.НайтиПоЗначению(СписокДокументов);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоСчетДт", ОтборПоСчетДт);			   
	Запрос.УстановитьПараметр("ОтборПоСчетКт", ОтборПоСчетКт);		
	Запрос.УстановитьПараметр("ПустойСчет",    ПланыСчетов.Типовой.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ТипДокумента",  ?(НайденныйЭлемент = Неопределено, "", НайденныйЭлемент.Представление));
		
	Условие = "";
	Если ЗначениеЗаполнено(ОтборПоСчетДт) Тогда
		Условие = Условие + ?(Условие = "", "", " И ") + " КорреспонденцииСчетов.СчетДт В Иерархии (&ОтборПоСчетДт) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПоСчетКт) Тогда
		Условие = Условие + ?(Условие = "", "", " И ") + " КорреспонденцииСчетов.СчетКт В Иерархии (&ОтборПоСчетКт) ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоСодержанию) Тогда
		
		МассивСтрок   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтборПоСодержанию, " ");
		НомерСтроки   = 0;
		УсловиеОтбора = "";
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			Если УсловиеОтбора = "" Тогда
				УсловиеОтбора = " (КорреспонденцииСчетов.Содержание Подобно &ОтборПоСодержанию" + НомерСтроки + " ";
			Иначе
				УсловиеОтбора = УсловиеОтбора + " И КорреспонденцииСчетов.Содержание Подобно &ОтборПоСодержанию" + НомерСтроки + " ";
			КонецЕсли;
			Запрос.УстановитьПараметр("ОтборПоСодержанию" + НомерСтроки, "%" + СтрокаМассива + "%");			   
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		УсловиеОтбора = УсловиеОтбора + ")";
		
		Условие = Условие + ?(Условие = "", УсловиеОтбора, " И " + УсловиеОтбора);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокДокументов) Тогда
		Условие = Условие + ?(Условие = "", "", " И ") + " КорреспонденцииСчетов.ТипДокумента=&ТипДокумента ";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КорреспонденцииСчетов.Содержание КАК Содержание,
	|	КорреспонденцииСчетов.Ссылка,
	|	КорреспонденцииСчетов.СчетДт КАК СчетДт,
	|	КорреспонденцииСчетов.СчетКт КАК СчетКт,
	|	ВЫБОР
	|		КОГДА КорреспонденцииСчетов.СчетДт = &ПустойСчет
	|				И КорреспонденцииСчетов.СчетКт = &ПустойСчет
	|			ТОГДА 3
	|		КОГДА КорреспонденцииСчетов.СчетДт = &ПустойСчет
	|				ИЛИ КорреспонденцииСчетов.СчетКт = &ПустойСчет
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДопПорядок,
	|	ВЫБОР
	|		КОГДА КорреспонденцииСчетов.ВидОперацииДокумента = """"
	|			ТОГДА """"
	|		ИНАЧЕ ""операция """""" + КорреспонденцииСчетов.ВидОперацииДокумента + """"""""
	|	КОНЕЦ КАК ВидОперацииДокумента,
	|	ВЫБОР
	|		КОГДА КорреспонденцииСчетов.ЗакладкаДокумента = """"
	|			ТОГДА """"
	|		ИНАЧЕ ""закладка """""" + КорреспонденцииСчетов.ЗакладкаДокумента + """"""""
	|	КОНЕЦ КАК ЗакладкаДокумента,
	|	"""" + КорреспонденцииСчетов.ТипДокумента + """" КАК Документ,
	|	""меню """""" + КорреспонденцииСчетов.Меню + """""""" КАК Меню,
	|	КорреспонденцииСчетов.Код КАК Код
	|ИЗ
	|	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов
	|
	|"+?(Условие = "", "", "ГДЕ " + Условие) + " 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДопПорядок,
	|	КорреспонденцииСчетов.СчетДт.Порядок,
	|	КорреспонденцииСчетов.СчетКт.Порядок,
	|	Содержание";
	
	ТабличноеПолеВсех.Загрузить(Запрос.Выполнить().Выгрузить()); 
	
	Область = ТабДокумент.ПолучитьОбласть("Номер");

	Для Ном = 1 По Область.ВысотаТаблицы Цикл 
		
		КодСтроки = СокрЛП(ТабДокумент.Область(Ном, 1).Текст);
		
		Строки = ТабличноеПолеВсех.НайтиСтроки(Новый Структура("Код", Формат(Число(КодСтроки),"ЧЦ=9; ЧВН=; ЧГ="))); 
		
		Если Строки.Количество() > 0 Тогда
			Строки[0].ИмяДокумента = СокрЛП(ТабДокумент.Область(Ном, 10).Текст);
			Строки[0].ИмяВидаОперации = СокрЛП(ТабДокумент.Область(Ном, 11).Текст);
		КонецЕсли;
		
	КонецЦикла;
					   
	КоличествоОтображаемых = ТабличноеПолеВсех.Количество();
	
	Если КоличествоОтображаемых = ОбщееКоличествоКорреспонденций Тогда
		Элементы.СтраницаВсех.Заголовок = СтрШаблон(НСтр("ru='Все (%1)'"), ОбщееКоличествоКорреспонденций);
	Иначе
		Элементы.СтраницаВсех.Заголовок = СтрШаблон(НСтр("ru='Все (%1 из %2)'"), КоличествоОтображаемых, ОбщееКоличествоКорреспонденций);	
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПоследних Тогда 
		ОбновитьСписокПоследнихХО();
		Элементы.ОчиститьСписок.Видимость = Истина;
	Иначе
		Элементы.ОчиститьСписок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПоследнихХО()
	
	Если ПоследниеВыбранныеХО = Неопределено ИЛИ ПоследниеВыбранныеХО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйЭлемент = Элементы.СписокДокументов.СписокВыбора.НайтиПоЗначению(СписокДокументов);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоследниеВыбранныеХО", ПоследниеВыбранныеХО.Выгрузить());			   
	Запрос.УстановитьПараметр("ОтборПоСчетДт", ОтборПоСчетДт);			   
	Запрос.УстановитьПараметр("ОтборПоСчетКт", ОтборПоСчетКт);			   
	Запрос.УстановитьПараметр("ТипДокумента",  ?(НайденныйЭлемент = Неопределено, "", НайденныйЭлемент.Представление));
	
	Условие = "";
	Если ЗначениеЗаполнено(ОтборПоСчетДт) Тогда
		Условие = Условие + ?(Условие = "", ""," И ") + " КорреспонденцииСчетов.СчетДт В Иерархии (&ОтборПоСчетДт) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПоСчетКт) Тогда
		Условие = Условие + ?(Условие = "", ""," И ") + " КорреспонденцииСчетов.СчетКт В Иерархии (&ОтборПоСчетКт) ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоСодержанию) Тогда
		
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтборПоСодержанию, " ");
		НомерСтроки = 0;
		УсловиеОтбора = "";
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			Если УсловиеОтбора = "" Тогда
				УсловиеОтбора = "(КорреспонденцииСчетов.Содержание Подобно &ОтборПоСодержанию" + НомерСтроки + " ";
			Иначе
				УсловиеОтбора = УсловиеОтбора + "И КорреспонденцииСчетов.Содержание Подобно &ОтборПоСодержанию" + НомерСтроки + " "
			КонецЕсли;
			Запрос.УстановитьПараметр("ОтборПоСодержанию" + НомерСтроки, "%" + СтрокаМассива + "%");			   
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		УсловиеОтбора = УсловиеОтбора + ")";
		
		Условие = Условие + ?(Условие = "", УсловиеОтбора, " И " + УсловиеОтбора);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокДокументов) Тогда
		Условие = Условие + ?(Условие = "", "", " И ") + " КорреспонденцииСчетов.ТипДокумента=&ТипДокумента ";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоследниеВыбранные.Ссылка,
	|	ПоследниеВыбранные.Момент
	|ПОМЕСТИТЬ Т_ПоследниеВыбранные
	|ИЗ
	|	&ПоследниеВыбранныеХО КАК ПоследниеВыбранные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеВыбранные.Момент КАК Момент,
	|	КорреспонденцииСчетов.Содержание,
	|	КорреспонденцииСчетов.Ссылка,
	|	КорреспонденцииСчетов.СчетДт,
	|	КорреспонденцииСчетов.СчетКт,
	|	ВЫБОР
	|		КОГДА КорреспонденцииСчетов.ВидОперацииДокумента = """"
	|			ТОГДА """"
	|		ИНАЧЕ ""операция """""" + КорреспонденцииСчетов.ВидОперацииДокумента + """"""""
	|	КОНЕЦ КАК ВидОперацииДокумента,
	|	ВЫБОР
	|		КОГДА КорреспонденцииСчетов.ЗакладкаДокумента = """"
	|			ТОГДА """"
	|		ИНАЧЕ ""закладка """""" + КорреспонденцииСчетов.ЗакладкаДокумента + """"""""
	|	КОНЕЦ КАК ЗакладкаДокумента,
	|	"""" + КорреспонденцииСчетов.ТипДокумента + """" КАК Документ,
	|	""меню """""" + КорреспонденцииСчетов.Меню + """""""" КАК Меню,
	|	КорреспонденцииСчетов.Код
	|ИЗ
	|	Т_ПоследниеВыбранные КАК ПоследниеВыбранные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов
	|		ПО ПоследниеВыбранные.Ссылка = КорреспонденцииСчетов.Ссылка
	|
	|" + ?(Условие = "", "", "ГДЕ " + Условие) + " 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Момент УБЫВ";
	
	ТабличноеПолеПоследних.Загрузить(Запрос.Выполнить().Выгрузить()); 
		
	Область = ТабДокумент.ПолучитьОбласть("Номер");

	Для Ном = 1 По Область.ВысотаТаблицы Цикл 
		
		КодСтроки = СокрЛП(ТабДокумент.Область(Ном, 1).Текст);
		
		Строки = ТабличноеПолеПоследних.НайтиСтроки(Новый Структура("Код", Формат(Число(КодСтроки),"ЧЦ=9; ЧВН=; ЧГ="))); 
		
		Если Строки.Количество() > 0 Тогда
			Строки[0].ИмяДокумента = СокрЛП(ТабДокумент.Область(Ном, 10).Текст);
			Строки[0].ИмяВидаОперации = СокрЛП(ТабДокумент.Область(Ном, 11).Текст);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры       
 
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбщееКоличествоКорреспонденций = ПолучитьОбщееКоличествоКорреспонденций();
	
	ТабДокумент = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет"); 
		
	Для Каждого Док Из Метаданные.Документы Цикл
		
		Элементы.СписокДокументов.СписокВыбора.Добавить(Док.Имя, Док.Синоним);
		
		СтрокаСоответствия = ТаблицаСоответствий.Добавить();
		СтрокаСоответствия.СинонимДокумента = Док.Синоним;
		СтрокаСоответствия.ИмяДокумента     = Док.Имя;
		
		ВидОперации = Док.Реквизиты.Найти("ВидОперации");
		Если ВидОперации <> Неопределено Тогда
			ВидОперацииТипы = ВидОперации.Тип.Типы();
			Если ВидОперацииТипы.Количество() = 1 И ОбщегоНазначения.ВидОбъектаПоТипу(ВидОперацииТипы[0]) = "Перечисление" Тогда
				ПеречислениеСсылка     = Новый(ВидОперацииТипы[0]);
				ПеречислениеМетаданные = ПеречислениеСсылка.Метаданные();
				СтрокаСоответствия.ИмяВидаОперации = ПеречислениеМетаданные.Имя;
				Для Каждого ЗначениеПеречисления Из ПеречислениеМетаданные.ЗначенияПеречисления Цикл
					СтрокаПеречисления = ТаблицаЗначенийПеречислений.Добавить();
					СтрокаПеречисления.ИмяПеречисления = ПеречислениеМетаданные.Имя;
					СтрокаПеречисления.ИмяЗначения     = ЗначениеПеречисления.Имя;
					СтрокаПеречисления.СинонимЗначения = ЗначениеПеречисления.Синоним;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановленныеНастройкиОбщие = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("КорреспонденцииСчетов", "Операции");
	Если ВосстановленныеНастройкиОбщие <>  Неопределено Тогда
		
		Если ВосстановленныеНастройкиОбщие.Свойство("ПоследниеВыбранныеХО") Тогда
			ПоследниеВыбранныеХО.Загрузить(ВосстановленныеНастройкиОбщие.ПоследниеВыбранныеХО);
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Найти(ВосстановленныеНастройкиОбщие.ТекущаяСтраница);
		КонецЕсли;
		
		Если ВосстановленныеНастройкиОбщие.Свойство("СписокСодержания") Тогда
			ВосстановленныйСписокСодержания = ВосстановленныеНастройкиОбщие.СписокСодержания; 
			Если ВосстановленныйСписокСодержания <> Неопределено Тогда
				Элементы.ОтборПоСодержанию.СписокВыбора.ЗагрузитьЗначения(ВосстановленныйСписокСодержания);
			КонецЕсли;
		КонецЕсли;
		
		Если ВосстановленныеНастройкиОбщие.Свойство("ОтборыПоСодержанию") Тогда
			ВосстановленныеОтборы = ВосстановленныеНастройкиОбщие.ОтборыПоСодержанию;      
			Если ВосстановленныеОтборы <> Неопределено Тогда
				ОтборПоСодержанию = Элементы.ОтборПоСодержанию.СписокВыбора.НайтиПоЗначению(ВосстановленныеОтборы);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьСписокХО();
	
	ГруппаОтчетов = Элементы.Найти("ПодменюОтчетыСмТакже");
	Если ГруппаОтчетов <> Неопределено Тогда
		ГруппаОтчетов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбщееКоличествоКорреспонденций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Количество(КорреспонденцииСчетов.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов
	|";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Количество;
	
КонецФункции		

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	СтрукутраСохранения = Новый Структура;
	СтрукутраСохранения.Вставить("ПоследниеВыбранныеХО", ПоследниеВыбранныеХО.Выгрузить());
	СтрукутраСохранения.Вставить("ТекущаяСтраница",      Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	СтрукутраСохранения.Вставить("ОтборыПоСодержанию",   ОтборПоСодержанию);
	СтрукутраСохранения.Вставить("СписокСодержания",     Элементы.ОтборПоСодержанию.СписокВыбора.ВыгрузитьЗначения()); 
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("КорреспонденцииСчетов", "Операции", СтрукутраСохранения);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяДокументаНаСервере(СинонимДокумента, Знач ТаблицаСоответствий)
	
	Условие = "";
	Индекс  = 1;         	
	Запрос  = Новый Запрос;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СинонимДокумента, " ");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл 		
		Условие = Условие + ?(Условие = "", "", " И ") + " ВТ_Синоним.СинонимДокумента ПОДОБНО &Парам" + Индекс;
		Запрос.УстановитьПараметр("Парам" + Индекс, "%" + СтрокаМассива + "%");
		Индекс = Индекс + 1;	
	КонецЦикла; 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокВыбора.СинонимДокумента КАК СинонимДокумента,
	|	СписокВыбора.ИмяДокумента
	|ПОМЕСТИТЬ ВТ_Синоним
	|ИЗ
	|	&СписокВыбора КАК СписокВыбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СинонимДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Синоним.ИмяДокумента,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_Синоним КАК ВТ_Синоним
	|ГДЕ
	|	" + Условие;
	Запрос.УстановитьПараметр("СписокВыбора", ТаблицаСоответствий.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("ИмяДокумента", "Количество");
	РезультатЗапроса.Сортировать("Количество Убыв");
	
	Возврат РезультатЗапроса[0].ИмяДокумента;  
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьВидОперацииНаСервере(ЗначениеВидаОперации, ИмяВидаОперации)
	
	СсылкаПеречисление = Перечисления[ИмяВидаОперации].ПустаяСсылка();
	
	ВидОперации = СсылкаПеречисление.Метаданные().ЗначенияПеречисления.Найти(ЗначениеВидаОперации); 
	
	Если НЕ ВидОперации = Неопределено Тогда
		ВидОперации = Перечисления[ИмяВидаОперации][ЗначениеВидаОперации];
	Иначе
		ВидОперации = СсылкаПеречисление;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрукутруПараметровДляЗакрытияМесяца(ИмяВидаОперации, ДанныеОбъекта)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидОперацииДокумента", ИмяВидаОперации);
	СтруктураВозврата.Вставить("УправлятьНУ", УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата));
			
	Возврат СтруктураВозврата
	
КонецФункции

&НаКлиенте
Процедура ВвестиОперациюНаКлиенте(ВыбраннаяСтрока)
	
	//Сохраняем выбранную операцию в списке последних выбранных
	НайденнаяХО = ПоследниеВыбранныеХО.НайтиСтроки(Новый Структура("Ссылка", ВыбраннаяСтрока.Ссылка));
	Если НайденнаяХО <> Неопределено И НайденнаяХО.Количество() > 0 Тогда
		НайденнаяХО[0].Момент = ТекущаяДата();
	Иначе
		ВыбраннаяХО = ПоследниеВыбранныеХО.Добавить();
		ВыбраннаяХО.Момент = ТекущаяДата();
		ВыбраннаяХО.Ссылка = ВыбраннаяСтрока.Ссылка;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаСоответствий.НайтиСтроки(Новый Структура("ИмяДокумента", ВыбраннаяСтрока.ИмяДокумента));
	Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Количество() > 0 Тогда
		ИмяДокумента = НайденнаяСтрока[0].ИмяДокумента;	
	Иначе
		НайденнаяСтрока = ТаблицаСоответствий.НайтиСтроки(Новый Структура("СинонимДокумента", ВыбраннаяСтрока.Документ));
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Количество() > 0 Тогда
			ИмяДокумента = НайденнаяСтрока[0].ИмяДокумента;
		Иначе // всвязи с тем, что синонимы некоторых документов были изменены, в уже существующих элементах справочника в реквизите "ТипДокумента"
			  // содержатся "не корректные" синонимы, по которым не возможно получить имя документа
			ИмяДокумента = ПолучитьИмяДокументаНаСервере(ВыбраннаяСтрока.Документ, ТаблицаСоответствий);		
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяДокумента = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Ошибка при попытке создать документ ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбраннаяСтрока.Документ);
		ВызватьИсключение ТекстСообщения; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.ВидОперацииДокумента) Тогда
		
		ПараметрыФормы = Неопределено;
		Для Каждого СтрокаСоответствия Из ТаблицаСоответствий.НайтиСтроки(Новый Структура("ИмяДокумента", ИмяДокумента)) Цикл
			// В ТаблицаСоответствий должна быть только одна строка для каждого вида документов
			Если ЗначениеЗаполнено(СтрокаСоответствия.ИмяВидаОперации) Тогда
				ВидОперацииДокумента = ЗаполнитьВидОперацииНаСервере(ВыбраннаяСтрока.ИмяВидаОперации, СтрокаСоответствия.ИмяВидаОперации);
				Если ЗначениеЗаполнено(ВидОперацииДокумента) Тогда
					ЗначенияЗаполнения = Новый Структура;
					ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперацииДокумента);
					ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараметрыФормы = Неопределено Тогда
			ФормаДокумента = ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", ПараметрыФормы);
		Иначе
			ФормаДокумента = ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента");
		КонецЕсли;
		
	Иначе
		
		ФормаДокумента = ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента");
		
	КонецЕсли;
	
	ФормаДокумента.Модифицированность = Истина;
	
	Если ИмяДокумента = "ОперацияБух" Тогда
		//Если открывается документ Операция - выполним первоначальное заполнение
		Движения = ФормаДокумента.ТиповойНаборЗаписей;
		НоваяПроводка = Движения.Добавить();
		НоваяПроводка.СчетДт = ВыбраннаяСтрока.СчетДт;
		НоваяПроводка.СчетКт = ВыбраннаяСтрока.СчетКт;
		НоваяПроводка.Содержание = ВыбраннаяСтрока.Содержание;
		ФормаДокумента.Объект.Содержание = ВыбраннаяСтрока.Содержание;
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяПроводка.СчетДт, НоваяПроводка, ПоляОбъекта, Истина);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(НоваяПроводка.СчетКт, НоваяПроводка, ПоляОбъекта, Истина);
		
	ИначеЕсли ИмяДокумента = "ЗакрытиеМесяца" Тогда
		
		ДанныеОбъекта = Новый Структура("Организация, Дата", ФормаДокумента.Объект.Организация, ФормаДокумента.Объект.Дата);
		ПараметрыДляДокумента = ПолучитьСтрукутруПараметровДляЗакрытияМесяца(ВыбраннаяСтрока.ИмяВидаОперации, ДанныеОбъекта);
		ИскомаяОперация = ПараметрыДляДокумента.ВидОперацииДокумента;
		УправлятьНУ = ПараметрыДляДокумента.УправлятьНУ;
		//установим флажок нужной операции
		Для Каждого СтрокаПервогоУровня Из ФормаДокумента.ДеревоВыполняемыхОпераций.ПолучитьЭлементы() Цикл
			
			СтрокаПервогоУровня.БУ = Ложь;
			СтрокаПервогоУровня.НУ = Ложь;
			
			СтрокиВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы();
			
			Если СтрокиВторогоУровня.Количество() > 0 Тогда
				Для Каждого СтрокаВторогоУровня ИЗ СтрокиВторогоУровня Цикл
					Если СтрокаВторогоУровня.ИмяДействия = ИскомаяОперация Тогда
						СтрокаВторогоУровня.БУ = Истина;
						СтрокаПервогоУровня.БУ = 2;
						Если УправлятьНУ = Истина Тогда
							СтрокаВторогоУровня.НУ = Истина;
							СтрокаПервогоУровня.НУ = 2;
						КонецЕсли						
					Иначе
						СтрокаВторогоУровня.БУ = Ложь;
						СтрокаВторогоУровня.НУ = Ложь;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Если СтрокаПервогоУровня.ИмяДействия = ИскомаяОперация Тогда
					СтрокаПервогоУровня.БУ = Истина;
					СтрокаПервогоУровня.БУ = 1;
					Если УправлятьНУ = Истина Тогда
						СтрокаПервогоУровня.НУ = Истина;
						СтрокаПервогоУровня.НУ = 1;
					КонецЕсли						
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
 
 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
