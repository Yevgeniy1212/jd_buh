#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует список головных организаций предприятия
//
Функция СписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|	ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция КонтрагентСоответствующийОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции

#Область ИспользованиеНесколькихОрганизаций

// Возвращает значение функциональной опции 
// "ИспользоватьНесколькоОрганизацийБухгалтерскийУчет".
//
// Возвращаемое значение:
//     Булево - признак использования нескольких организаций.
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(Организация = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		
		ОсновнаяОрганизацияПользователя = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизацияПользователя) Тогда 
			Возврат ОсновнаяОрганизацияПользователя;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "";
		Если Организация <> Неопределено Тогда 
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка,
			|	0 КАК Порядок
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(Организация = Неопределено, "РАЗРЕШЕННЫЕ", "") + " ПЕРВЫЕ 2
		|	Организации.Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Если в результате запроса 3 элемента справочника, то значит переданная организация доступна для пользователя
		// Если в результате запроса 1 элемент справочника, то значит пользователю доступна 1 организация, ее и выберем
		// В остальных случаях возвращаем пустую ссылку на элемент справочника
		Если Выборка.Количество() = 3 Тогда
			Возврат Организация;
		ИначеЕсли Выборка.Количество() = 1 Тогда 
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	Иначе
		// Ведется учет по единственной организации
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ НЕ Организации.ПометкаУдаления";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Константы.ИспользоватьНесколькоОрганизаций,,
				НСтр("ru = 'Исправлено некорректное значение константы ""Использовать несколько организаций""'"));
				
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru = 'Доступ к данным по организации ограничен. Обратитесь к администратору.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ЭтотСписок.Ссылка)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Печать

Функция СформироватьПомощникСозданияФаксимиле(Организация, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации.ПомощникСозданияФаксимиле");
	
	//Если Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюЮр"));
	//Иначе
	//	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюИП"));
	//КонецЕсли;
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникСозданияФаксимиле") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникСозданияФаксимиле", 
			НСтр("ru='Как быстро и просто создать факсимильную подпись и печать?'"), 
			СформироватьПомощникСозданияФаксимиле(МассивОбъектов[0], ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// В процедуре обрабатывается выбор подразделений организаций в зависимости от установленных параметров выбора.
// В части применения для структурных подразделений справедливы следующие параметры выбора:
// 	- ВыбиратьСтруктурныеЕдиницы - сигнализирует о том, что происходит выбор именно подразделения с флагом "Является структурным подразделением" или организации
//	- Отбор.Владелец - связь параметров выбора необходимо добавлять если необходимо, чтобы при выборе СП выполнялась фильтрация по организации
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВыбиратьСтруктурныеЕдиницы") И Параметры.ВыбиратьСтруктурныеЕдиницы Тогда
		
		ОбработкаПолученияДанныхВыбораВыбиратьСтруктурныеЕдиницы(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты") И Параметры.ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты Тогда	
		
		ОбработкаПолученияДанныхВыбораВыбиратьГоловныеОрганизацииДляУчетаЗарплаты(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("ВыбиратьГоловныеОрганизации") И Параметры.ВыбиратьГоловныеОрганизации Тогда
		
		ОбработкаПолученияДанныхВыбораВыбиратьГоловныеОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("ВыбиратьНалогоплательщиков") И Параметры.ВыбиратьНалогоплательщиков Тогда
		
		ОбработкаПолученияДанныхВыбораВыбиратьНалогоплательщиков(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("ВыбиратьОбособленныеПодразделенияДляУчетаЗарплаты") И Параметры.ВыбиратьОбособленныеПодразделенияДляУчетаЗарплаты Тогда
		
		ОбработкаПолученияДанныхВыбораВыбиратьОбособленныеПодразделенияДляУчетаЗарплаты(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьКонтрагентаОрганизации(Организация, Контрагент, Отказ) Экспорт
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Контрагент  = Контрагент;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника "Организации" и связанные с ним данные.
//
// Параметры:
//     Параметры - Структура - Параметры создания организации.
//     АдресХранилища - Строка - Адрес временного хранилища, в которое
//                               будет помещена ссылка на созданную
//                               организацию.
//
Процедура СоздатьОрганизацию(Параметры, АдресХранилища) Экспорт
	
	ВидОрганизации                    = Параметры.ВидОрганизации;
	ИдентификационныйНомер            = Параметры.ИИН;
	СистемаНалогообложения            = Параметры.СистемаНалогообложения;
	НаименованиеОрганизации           = Параметры.НаименованиеОрганизации;
	
	НачатьТранзакцию();
	
	Организация = Справочники.Организации.НайтиПоНаименованию(НСтр("ru = 'Укажите наименование Вашей организации'"), Истина);
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Организация = Справочники.Организации.НайтиПоНаименованию(Справочники.Организации.НаименованиеПоУмолчанию(), Истина);
	КонецЕсли;
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Организация = Справочники.Организации.СоздатьЭлемент();
	Иначе
		Организация = Организация.ПолучитьОбъект();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		Организация.Наименование = НаименованиеОрганизации;
	Иначе
		Организация.Наименование = Справочники.Организации.НаименованиеПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификационныйНомер) Тогда
		Организация.ИдентификационныйНомер = ИдентификационныйНомер;
	КонецЕсли;
	
	Организация.Заполнить(Новый Структура);
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		
		Предприниматель = Справочники.ФизическиеЛица.НайтиПоНаименованию(Организация.Наименование);
		Если Предприниматель = Справочники.ФизическиеЛица.ПустаяСсылка() ИЛИ Предприниматель.ЭтоГруппа = Истина Тогда
			ПредпринимательОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Иначе
			ПредпринимательОбъект = Предприниматель.ПолучитьОбъект();
		КонецЕсли;
		ПредпринимательОбъект.Наименование = Организация.Наименование;
		Если ЗначениеЗаполнено(Организация.ИдентификационныйНомер) Тогда
			ПредпринимательОбъект.ИдентификационныйКодЛичности = Организация.ИдентификационныйНомер;
		КонецЕсли;
		ПредпринимательОбъект.Записать();
		Организация.ИндивидуальныйПредприниматель = ПредпринимательОбъект.Ссылка;
		
	Иначе
		Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Организация.Записать();
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		ЗапросУчетнаяПолитика = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 УчетнаяПолитикаБухгалтерскийУчет.Период КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаБухгалтерскийУчет");
		
		ЗапросУчетнаяПолитика.УстановитьПараметр("Организация", Организация.Ссылка);
		
		ВыборкаДетальныеЗаписи = ЗапросУчетнаяПолитика.Выполнить().Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПериодУП = ВыборкаДетальныеЗаписи.Период;
		Иначе
			ПериодУП = '19800101';
		КонецЕсли;
		
		УчетнаяПолитикаБухгалтерскийУчет = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СоздатьНаборЗаписей();
		УчетнаяПолитикаБухгалтерскийУчет.Отбор.Организация.Установить(Организация.Ссылка);
		УчетнаяПолитикаБухгалтерскийУчет.Отбор.Период.Установить(ПериодУП);
		УчетнаяПолитикаБухгалтерскийУчет.Прочитать();
		Для Каждого Запись Из УчетнаяПолитикаБухгалтерскийУчет Цикл
			ЗаполнитьЗначенияСвойств(Запись, РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СтруктураУчетнойПолитики(ВидОрганизации, СистемаНалогообложения));
		КонецЦикла;
		УчетнаяПолитикаБухгалтерскийУчет.Записать();
		
		
		ЗапросУчетнаяПолитика = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 УчетнаяПолитикаНалоговыйУчет.Период КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчет");
		
		ЗапросУчетнаяПолитика.УстановитьПараметр("Организация", Организация.Ссылка);
		
		ВыборкаДетальныеЗаписи = ЗапросУчетнаяПолитика.Выполнить().Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПериодУП = ВыборкаДетальныеЗаписи.Период;
		Иначе
			ПериодУП = '19800101';
		КонецЕсли;
		
		УчетнаяПолитикаНалоговыйУчет = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		УчетнаяПолитикаНалоговыйУчет.Отбор.Организация.Установить(Организация.Ссылка);
		УчетнаяПолитикаНалоговыйУчет.Отбор.Период.Установить(ПериодУП);
		УчетнаяПолитикаНалоговыйУчет.Прочитать();
		Для Каждого Запись Из УчетнаяПолитикаНалоговыйУчет Цикл
			ЗаполнитьЗначенияСвойств(Запись, РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СтруктураУчетнойПолитики(ВидОрганизации, СистемаНалогообложения));
		КонецЦикла;
		УчетнаяПолитикаНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	УстановитьВидБизнеса(Параметры);
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Организация.Ссылка, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьВидБизнеса(Параметры)
	
	ИспользуетсяТрудНаемныхРаботников = Параметры.ИспользуетсяТрудНаемныхРаботников;
	
	ВидБизнеса = Неопределено;
	Если Параметры.Свойство("ВидБизнеса", ВидБизнеса) И ЗначениеЗаполнено(ВидБизнеса) Тогда
		ИменаКонстант = Перечисления.ВидыБизнеса.НеобходимаяФункциональность(ВидБизнеса);
		Если ИменаКонстант <> Неопределено Тогда
			
			Если ИспользуетсяТрудНаемныхРаботников Тогда
				ИменаКонстант.ФункциональностьПрограммы.Добавить("ВедетсяУчетЗарплатыИКадры");
			КонецЕсли;
			Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
				НеиспользуемаяФункциональность = ИменаКонстант.ФункциональностьПрограммы.Найти("ИспользоватьОбменВС");
				Если НеиспользуемаяФункциональность <> Неопределено Тогда
					ИменаКонстант.ФункциональностьПрограммы.Удалить(НеиспользуемаяФункциональность);
				КонецЕсли;
			КонецЕсли;
			
			// Нужно дополнить список необходимой функциональности родительской, т.к. если она не включена,
			// то дочерняя тоже не включится.
			ФункциональностьДляВключения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаКонстант.ФункциональностьПрограммы);
			Обработки.ФункциональностьПрограммы.ДополнитьРодительскойФункциональностью(ФункциональностьДляВключения);
			
			Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональности(ФункциональностьДляВключения, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает наименование по умолчанию, присваиваемое при программногом 
// создании организации без заполнения реквизитов.
//
// Возвращаемое значение:
//     Строка - Наименование по умолчанию.
Функция НаименованиеПоУмолчанию() Экспорт
	
	Возврат НСтр("ru='Наша организация'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры, реализующие исключительные случаи обработки получения данных выбора

Процедура ОбработкаПолученияДанныхВыбораВыбиратьСтруктурныеЕдиницы(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = Неопределено;
	
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	ТекстУсловияПоОрганизации 	= "";
	ТекстУсловияПоПодразделению = "";
	
	Если СтрокаПоиска <> Неопределено Тогда 
		ТекстУсловияПоОрганизации   = " ГДЕ Организации.Наименование ПОДОБНО &ШаблонНаименования ";
		ТекстУсловияПоПодразделению = " И ПодразделенияОрганизаций.Наименование ПОДОБНО &ШаблонНаименования ";
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда 
		ТекстУсловияПоОрганизации 	= ТекстУсловияПоОрганизации   + ?(ЗначениеЗаполнено(ТекстУсловияПоОрганизации), " И ", " ГДЕ ") + " Организации.Ссылка = &Владелец ";
		ТекстУсловияПоПодразделению = ТекстУсловияПоПодразделению + " И ПодразделенияОрганизаций.Владелец = &Владелец ";
		
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);
	КонецЕсли;
	
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	Если НЕ ЗначенияНастроекПользователя.УчетПоВсемОрганизациям Тогда
		ТекстУсловияПоОрганизации = ТекстУсловияПоОрганизации + "
		|	" + ?(ЗначениеЗаполнено(ТекстУсловияПоОрганизации), " И ", " ГДЕ ") + " Организации.Ссылка = &ОсновнаяОрганизация";
		
		ТекстУсловияПоПодразделению = ТекстУсловияПоПодразделению + "
		|	И ПодразделенияОрганизаций.Владелец = &ОсновнаяОрганизация";
		
		Запрос.УстановитьПараметр("ОсновнаяОрганизация", Справочники.Организации.ОрганизацияПоУмолчанию());
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации
	|" + ТекстУсловияПоОрганизации + "
	|";
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.ПометкаУдаления
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА"
		+ ТекстУсловияПоПодразделению;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда
			СтруктураЗначение = Новый Структура("Значение,ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка,);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораВыбиратьГоловныеОрганизацииДляУчетаЗарплаты(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПоиска = Неопределено;
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	Запрос = Новый Запрос;
	ТекстУсловия 	= "";
	Если СтрокаПоиска <> Неопределено Тогда 
		ТекстУсловия = "И Организации.Наименование ПОДОБНО &ШаблонНаименования ";
		Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
	КонецЕсли;
	
	ТекстУсловияПоОрганизации = "";
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	Если НЕ ЗначенияНастроекПользователя.УчетПоВсемОрганизациям Тогда
		ТекстУсловияПоОрганизации = "
		|	И ВЫБОР
		|			КОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации
		|				ТОГДА Организации.Ссылка = &ГоловнаяОрганизация
		|			ИНАЧЕ Организации.Ссылка = &ОсновнаяОрганизация
		|		КОНЕЦ";

		ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
		ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ОсновнаяОрганизация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.ПометкаУдаления,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации
	|				ТОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	" + ТекстУсловия + "
	|	" + ТекстУсловияПоОрганизации + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда
			СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка,);
		КонецЕсли;			
	КонецЦикла;
	
	Если Параметры.Свойство("ВариантПоВсемСотрудникам") И Параметры.ВариантПоВсемСотрудникам Тогда
		ДанныеВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='По всем сотрудникам'"));			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораВыбиратьГоловныеОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПоиска = Неопределено;
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	ТекстУсловия 	= "";
	Если СтрокаПоиска <> Неопределено Тогда 
		ТекстУсловия = "И Организации.Наименование ПОДОБНО &ШаблонНаименования ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.ПометкаУдаления,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	" + ТекстУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда
			СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка,);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораВыбиратьНалогоплательщиков(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	Если СтандартнаяОбработка Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = Неопределено;
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	РазделНалоговогоУчета = Неопределено;
	Параметры.Свойство("РазделНалоговогоУчета", РазделНалоговогоУчета);
	
	ТекстУсловия1 	= "";
	ТекстУсловия2	= "";
	Если СтрокаПоиска <> Неопределено Тогда 
		ТекстУсловия1 = "И Организации.Наименование ПОДОБНО &ШаблонНаименования ";
		ТекстУсловия2 = "И ИсчислениеНалогов.Налогоплательщик.Наименование ПОДОБНО &ШаблонНаименования ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"
	|// Самостоятельные организации-налогоплательщики, которых не заводили в регистр ИсчислениеНалоговСтруктурныхЕдиниц
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации	
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница";
	Если ЗначениеЗаполнено(РазделНалоговогоУчета) Тогда
		Запрос.Текст = Запрос.Текст + "
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	ИсчислениеНалогов.СтруктурнаяЕдиница ЕСТЬ NULL
	|	" + ТекстУсловия1 + "
	|
	|ОБЪЕДИНИТЬ // выбираем неповторяющиеся
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчислениеНалогов.Налогоплательщик,
	|	ИсчислениеНалогов.Налогоплательщик.ПометкаУдаления,
	|	ИсчислениеНалогов.Налогоплательщик.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов";
	Если ЗначениеЗаполнено(РазделНалоговогоУчета) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|	" + ТекстУсловия2;
	ИначеЕсли ЗначениеЗаполнено(ТекстУсловия2) Тогда
		Запрос.Текст = Запрос.Текст + "
		|" + СтрЗаменить(ТекстУсловия2, "И ", "ГДЕ ");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	
	Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("РазделНалоговогоУчета", РазделНалоговогоУчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда
			СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка,);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораВыбиратьОбособленныеПодразделенияДляУчетаЗарплаты(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Организация = Неопределено;
	СтандартнаяОбработка = НЕ Параметры.Отбор.Свойство("ГоловнаяОрганизация", Организация);
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	
	СтрокаПоиска = Неопределено;
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	ТекстУсловия = "";
	Если СтрокаПоиска <> Неопределено Тогда 
		ТекстУсловия = "И Организации.Наименование ПОДОБНО &ШаблонНаименования ";
		Запрос.УстановитьПараметр("ШаблонНаименования", СтрокаПоиска); 
	КонецЕсли;
	
	ТекстУсловияПоОрганизации = "";
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	Если НЕ ЗначенияНастроекПользователя.УчетПоВсемОрганизациям Тогда
		ТекстУсловияПоОрганизации = "
		|	И Организации.Ссылка = &ОсновнаяОрганизация";

		Запрос.УстановитьПараметр("ОсновнаяОрганизация", Справочники.Организации.ОрганизацияПоУмолчанию());
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.Организация,
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.ПометкаУдаления,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|		ПО Организации.Ссылка = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|ГДЕ
	|	((Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И ВЫБОР
	|					КОГДА Организации.Ссылка <> &ГоловнаяОрганизация
	|						ТОГДА ЕСТЬNULL(ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВестиУчетПоГоловнойОрганизации, ИСТИНА)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|			ИЛИ (Организации.Ссылка = &ГоловнаяОрганизация
	|				И НЕ ЕСТЬNULL(ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВестиУчетПоГоловнойОрганизации, ИСТИНА)))
	|	" + ТекстУсловия + "
	|	" + ТекстУсловияПоОрганизации + "
	|		
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда
			СтруктураЗначение = Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка,);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дату начала ведения учета в ИБ по дате ввода остатков или дате первого проведенного документа
//
// Параметры:
// Организация - СправочникСсылка.Организация
//
// Возвращаемое значение:
// Дата или Неопределено, если учет по организации не велся
//
Функция ДатаНачалаВеденияУчета(Организация) Экспорт
	
	ОдинДень = 86400;
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат НачалоДня(ДатаВводаНачальныхОстатков + ОдинДень);
	КонецЕсли;
	
	ДатаПервогоПроведенногоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(Организация);
	Если ДатаПервогоПроведенногоДокумента <> Неопределено Тогда
		Возврат НачалоДня(ДатаПервогоПроведенногоДокумента);
	КонецЕсли;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ПеренестиФайлЛоготипаВПрисоединенныеФайлы(ПараметрыОтложенногоОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	УдалитьХранилищеДополнительнойИнформации.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеДополнительнойИнформации КАК УдалитьХранилищеДополнительнойИнформации
	|		ПО Организации.УдалитьЛоготип = УдалитьХранилищеДополнительнойИнформации.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Если ПараметрыОтложенногоОбновления <> Неопределено Тогда
			ПараметрыОтложенногоОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтложенногоОбновления <> Неопределено Тогда
		ПараметрыОтложенногоОбновления.ОбработкаЗавершена = Ложь;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ФайлЛоготипа   = Выборка.ПрисоединенныйФайл;
		СправочникОбъект.УдалитьЛоготип = Справочники.УдалитьХранилищеДополнительнойИнформации.ПустаяСсылка();
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Организации,
				Выборка.Ссылка,
				НСтр("ru = 'Не удалось перенести файл из справочника ""Хранилище дополнительной информации""'", 
				Метаданные.ОсновнойЯзык.КодЯзыка));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли