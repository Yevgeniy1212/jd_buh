
#Область ОработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если Параметры.Ключ.Пустая() Тогда
		
		УстановитьОчиститьИзображение(ЭтаФорма, "Логотипа"                 , , Ложь);
		УстановитьОчиститьИзображение(ЭтаФорма, "Печати"                   , , Ложь);
		УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиРуководителя"      , , Ложь);
		УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиГлавногоБухгалтера", , Ложь);
		
		ЕстьПравоРедактирования = Истина;
		
		ПодготовитьФормуНаСервере();
		
	Иначе
		
		// Установим доступность
		// ... формы в целом 
		ЕстьПравоРедактирования   = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
		ЭтотОбъект.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
		// ... поля картинки и кнопок его панели  
		ЕстьПравоРедактированияПрисоединенныхФайлов = ПравоДоступа("Изменение", Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЛоготип", "Доступность",
			ЕстьПравоРедактированияПрисоединенныхФайлов И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации.Реквизиты.ФайлЛоготипа));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПечатьФаксимиле", "Доступность",
			ЕстьПравоРедактированияПрисоединенныхФайлов И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации.Реквизиты.ФайлПечати));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОчиститьИзображение(ЭтаФорма, "Логотипа", Объект.ФайлЛоготипа, Ложь);
	УстановитьОчиститьИзображение(ЭтаФорма, "Печати"  , Объект.ФайлПечати  , Ложь);
	
	ПрочитатьОтветственныхЛицОрганизации();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.Организации.ЗаписатьКонтрагентаОрганизации(ТекущийОбъект.Ссылка, КонтрагентОрганизации, Отказ);
	
	ЗаписатьОтветственныхЛицОрганизации(ТекущийОбъект.Ссылка, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
	ПрочитатьОсновнойБанковскийСчет();
	ПрочитатьОсновнуюКассу();
	
	ОбновитьОтборыДинамическихСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПараметрыЗаписиОрганизации = Новый Структура();
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") Тогда
		ПараметрыЗаписиОрганизации.Вставить("ЭтоНовый", ПараметрыЗаписи.ЭтоНовый);
	КонецЕсли;  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ОповеститьВФорме("Запись_Организации", ПараметрыЗаписиОрганизации, Объект.Ссылка);
	// --- Проверка заполненности реквизитов организации (банковский счет)

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" Тогда 
		Если Источник = Объект.ОсновнойВидДеятельности Тогда
			ОбновитьПредставлениеВидаДеятельности();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ФизЛицо_ИзменениеПодписи"
		И Источник <> ЭтаФорма
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка") И ЗначениеЗаполнено(Параметр.Ссылка)
		И Параметр.Свойство("ФайлПодписи") Тогда
		Если Параметр.Ссылка = ФизЛицоРуководитель Тогда
			Если Параметр.ФайлПодписи <> ФайлПодписиРуководителя Тогда
				УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиРуководителя", Параметр.ФайлПодписи, Ложь);
			КонецЕсли;
		ИначеЕсли Параметр.Ссылка = ФизЛицоГлавныйБухгалтер Тогда
			Если Параметр.ФайлПодписи <> ФайлПодписиГлавногоБухгалтера Тогда
				УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиГлавногоБухгалтера", Параметр.ФайлПодписи, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ФизЛицо_ЗапросПодписи"
		И Источник <> ЭтаФорма
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка") И ЗначениеЗаполнено(Параметр.Ссылка)
		И Параметр.Свойство("ФайлПодписи") Тогда
		Если Параметр.Ссылка = ФизЛицоРуководитель Тогда
			Если Параметр.ФайлПодписи <> ФайлПодписиРуководителя Тогда
				Оповестить("ФизЛицо_ИзменениеПодписи", Новый Структура("Ссылка, ФайлПодписи", Параметр.Ссылка, ФайлПодписиРуководителя), ЭтаФорма);
			КонецЕсли;
		ИначеЕсли Параметр.Ссылка = ФизЛицоГлавныйБухгалтер Тогда
			Если Параметр.ФайлПодписи <> ФайлПодписиГлавногоБухгалтера Тогда
				Оповестить("ФизЛицо_ИзменениеПодписи", Новый Структура("Ссылка, ФайлПодписи", Параметр.Ссылка, ФайлПодписиГлавногоБухгалтера), ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);
				
				ОповеститьВФорме("УстановкаОсновногоБанковскогоСчетаВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать(); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновнойКассы"
		ИЛИ ИмяСобытия = "УстановкаОсновнойКассыПриЗаписи" Тогда
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнуюКассу(Параметр.ОсновнаяКасса);
				
				ОповеститьВФорме("УстановкаОсновнойКассыВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать(); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ОрганизацияИзменилась_БанковскийСчет" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.ОсновнойБанковскийСчет = Параметр.БанковскийСчет Тогда
				
				Объект.ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ОрганизацияИзменилась_Касса" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.ОсновнаяКасса = Параметр.Касса Тогда
				
				Объект.ОсновнаяКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(ФизЛицоРуководитель) Тогда
		Оповестить("ФизЛицо_ЗапросПодписи", Новый Структура("Ссылка, ФайлПодписи", ФизЛицоРуководитель, ФайлПодписиРуководителя), ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоГлавныйБухгалтер) Тогда
		Оповестить("ФизЛицо_ЗапросПодписи", Новый Структура("Ссылка, ФайлПодписи", ФизЛицоГлавныйБухгалтер, ФайлПодписиГлавногоБухгалтера), ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
	Если Объект.УчетПоМестнымБюджетам И НЕ ЗначениеЗаполнено(Объект.МестныйБюджет) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не заполнен аппарат акима для форм налоговой отчетности'"),,"Объект.МестныйБюджет",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 
	
	ТекущийОбъект.ФайлЛоготипа = ФайлЛоготипа;
	ТекущийОбъект.ФайлПечати   = ФайлПечати;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ПрочитатьОтветственныхЛицОрганизации();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	ИндивидуальныйПредпринимательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификационныйНомерПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "БИН");
КонецПроцедуры

&НаКлиенте
Процедура РННПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "РНН");
КонецПроцедуры

&НаКлиенте
Процедура КБЕПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "КБЕ");
КонецПроцедуры

&НаКлиенте
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуреПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидДеятельностиПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПодписиРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПодписиГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОчисткаЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, "Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОчисткаПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, "Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОчисткаПодписиРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, "ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОчисткаПодписиГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, "ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоРуководительПриИзменении(Элемент)
	
	ДолжностьРуководитель = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Ссылка, ФизЛицоРуководитель, ТекущаяДата()).Должность;
	УстановитьИзображение("ПодписиРуководителя", ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(ФизЛицоРуководитель, "ФайлПодписи"));
	
	УправлениеФормой(ЭтаФорма);
	
	ПодписиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоГлавныйБухгалтерПриИзменении(Элемент)
	
	ДолжностьГлавныйБухгалтер = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Ссылка, ФизЛицоГлавныйБухгалтер, ТекущаяДата()).Должность;
	УстановитьИзображение("ПодписиГлавногоБухгалтера", ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(ФизЛицоГлавныйБухгалтер, "ФайлПодписи"));
	
	УправлениеФормой(ЭтаФорма);
	
	ПодписиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководительПриИзменении(Элемент)
	
	ПодписиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьГлавныйБухгалтерПриИзменении(Элемент)
	
	ПодписиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияРуководительНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие(ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияГлавныйБухгалтерНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие(ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения элемент необходимо записать. 
		|Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтрагентаПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе 
		СоздатьКонтрагентаЗавершение();
	КонецЕсли;
	
КонецПроцедуры

#Область ЛоготипИПечать

#Область Логотип

&НаКлиенте
Процедура ПросмотретьИзображениеЛоготипа(Команда)
	
	ПросмотретьИзображение("Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	ДобавитьИзображение("Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ИзменитьИзображение("Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	ОчиститьИзображение("Логотипа");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЛоготипИзПрисоединенныхФайлов(Команда)
	
	ВыбратьИзображениеИзПрисоединенныхФайлов("Логотипа");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ДобавитьИзображениеПечати(Команда)
	
	ДобавитьИзображение("Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеПечати(Команда)
	
	ИзменитьИзображение("Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеПечати(Команда)
	
	ОчиститьИзображение("Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеПечати(Команда)
	
	ПросмотретьИзображение("Печати");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПечатьИзПрисоединенныхФайлов(Команда)
	
	ВыбратьИзображениеИзПрисоединенныхФайлов("Печати");
	
КонецПроцедуры

#КонецОбласти

#Область ПодписьРуководителя

&НаКлиенте
Процедура ДобавитьИзображениеПодписиРуководителя(Команда)
	
	ДобавитьИзображение("ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеПодписиРуководителя(Команда)
	
	ИзменитьИзображение("ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеПодписиРуководителя(Команда)
	
	ОчиститьИзображение("ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеПодписиРуководителя(Команда)
	
	ПросмотретьИзображение("ПодписиРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодписьРуководителяИзПрисоединенныхФайлов(Команда)
	
	ВыбратьИзображениеИзПрисоединенныхФайлов("ПодписиРуководителя");
	
КонецПроцедуры

#КонецОбласти

#Область ПодписьГлавногоБухгалтера

&НаКлиенте
Процедура ДобавитьИзображениеПодписиГлавногоБухгалтера(Команда)
	
	ДобавитьИзображение("ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеПодписиГлавногоБухгалтера(Команда)
	
	ИзменитьИзображение("ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеПодписиГлавногоБухгалтера(Команда)
	
	ОчиститьИзображение("ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеПодписиГлавногоБухгалтера(Команда)
	
	ПросмотретьИзображение("ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодписьГлавногоБухгалтераИзПрисоединенныхФайлов(Команда)
	
	ВыбратьИзображениеИзПрисоединенныхФайлов("ПодписиГлавногоБухгалтера");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область УправлениеФормой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КонтрагентОрганизации = Справочники.Организации.КонтрагентСоответствующийОрганизации(Объект.Ссылка);
	
	ОбновитьОтборыДинамическихСписков(ЭтотОбъект);
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	
	ОбновитьПредставлениеВидаДеятельности();
	
	ВидимостьБанковскогоСчета = ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета);
	Элементы.ОсновнойБанковскийСчет.Видимость = ВидимостьБанковскогоСчета;
	
	ВидимостьКассы = ПравоДоступа("Просмотр", Метаданные.Справочники.Кассы);
	Элементы.ОсновнаяКасса.Видимость = ВидимостьКассы;
	
	ЕстьПравоРедактированияПодписиФизЛица = 
		ПравоДоступа("Изменение", Метаданные.Справочники.ФизическиеЛицаПрисоединенныеФайлы) И
		ПравоДоступа("Редактирование", Метаданные.Справочники.ФизическиеЛица.Реквизиты.ФайлПодписи);
	
	ЕстьПравоРедактированияОтветственныхЛиц = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОтветственныеЛицаОрганизаций);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФизЛицоРуководитель", "Доступность", ЕстьПравоРедактированияОтветственныхЛиц);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФизЛицоГлавныйБухгалтер", "Доступность", ЕстьПравоРедактированияОтветственныхЛиц);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	Элементы.ИндивидуальныйПредприниматель.Видимость      = НЕ ЭтоЮрЛицо;
	Элементы.ГруппаИностраннаяОрганизацияОтступ.Видимость = ЭтоЮрЛицо;
	Элементы.ГруппаИностраннаяОрганизация.Видимость       = ЭтоЮрЛицо И Объект.ИностраннаяОрганизация;
	Элементы.РНН.Доступность 							  = ЭтоЮрЛицо;
	Элементы.ИдентификационныйНомер.Доступность 		  = ЭтоЮрЛицо;
	
	Элементы.МестныйБюджет.Видимость = Объект.УчетПоМестнымБюджетам;
	
	// Логотип и печать
	Если //ЭтоЮрЛицо И // набор подписей для ИП как для юр.лица
		(Не ЗначениеЗаполнено(Форма.ФизЛицоРуководитель) Или Не ЗначениеЗаполнено(Форма.ФизЛицоГлавныйБухгалтер) Или Форма.ФизЛицоРуководитель <> Форма.ФизЛицоГлавныйБухгалтер) Тогда
		Элементы.ГруппаПодписьГлавногоБухгалтера.Видимость = Истина;
		Элементы.АдресПодписиРуководителя.Заголовок = НСтр("ru='
			|Подпись руководителя'"); 
		Элементы.АдресПодписиРуководителя.ТекстНевыбраннойКартинки = НСтр("ru='Загрузить подпись руководителя'"); 
	Иначе
		Элементы.ГруппаПодписьГлавногоБухгалтера.Видимость = Ложь;
		Элементы.АдресПодписиРуководителя.Заголовок = НСтр("ru='
			|Подпись'"); 
		Элементы.АдресПодписиРуководителя.ТекстНевыбраннойКартинки = НСтр("ru='Загрузить подпись'"); 
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодписьРуководителя", "Доступность",
		Форма.ЕстьПравоРедактированияПодписиФизЛица И ЗначениеЗаполнено(Форма.ФизЛицоРуководитель));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодписьГлавногоБухгалтера", "Доступность",
		Форма.ЕстьПравоРедактированияПодписиФизЛица И ЗначениеЗаполнено(Форма.ФизЛицоГлавныйБухгалтер));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДолжностьРуководитель", "Доступность",
		Элементы.ФизЛицоРуководитель.Доступность И ЗначениеЗаполнено(Форма.ФизЛицоРуководитель));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДолжностьГлавныйБухгалтер", "Доступность",
		Элементы.ФизЛицоГлавныйБухгалтер.Доступность И ЗначениеЗаполнено(Форма.ФизЛицоГлавныйБухгалтер));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборыДинамическихСписков(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.БанковскиеСчета, 
	"Владелец", 
	Форма.Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	НСтр("ru = 'Отбор по владельцу'"),
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Кассы, 
	"Владелец", 
	Форма.Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	НСтр("ru = 'Отбор по владельцу'"),
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРегламентированныеДанные(Форма, ПроверяемыеДанные = "БИН, РНН, КБЕ")
	
	МассивПроверяемыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемыеДанные, ",", , Истина);
	Для Каждого Элемент Из МассивПроверяемыхДанных Цикл
		ИмяЭлементаНадписи = "НадписьПоясненияНекорректного" + Элемент;
		ТекстСообщения     = "";
		Если Форма.Элементы.Найти(ИмяЭлементаНадписи) <> Неопределено Тогда 
			Если Элемент = "БИН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.ИдентификационныйНомер) 
					ИЛИ РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(Форма.Объект.ИдентификационныйНомер, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			ИначеЕсли Элемент = "РНН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.РНН) 
					ИЛИ РегламентированныеДанныеКлиентСервер.РННСоответствуетТребованиям(Форма.Объект.РНН, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			ИначеЕсли Элемент = "КБЕ" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.КБЕ) 
					ИЛИ РегламентированныеДанныеКлиентСервер.КБеСоответствуетТребованиям(Форма.Объект.КБЕ, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			КонецЕсли;
			Форма[ИмяЭлементаНадписи] = ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтветственныеЛицаОрганизации

&НаКлиентеНаСервереБезКонтекста
Процедура ПодписиУстановитьЗаголовок(Форма)
	
	СписокСтрок = Новый Массив;
	Если ЗначениеЗаполнено(Форма.ФизЛицоРуководитель) Тогда
		СписокСтрок.Добавить("Руководитель");
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ФизЛицоГлавныйБухгалтер) Тогда
		СписокСтрок.Добавить("ГлавныйБухгалтер");
	КонецЕсли;
	
	ПодписиЗаголовок = "";
	Для Индекс = 0 По СписокСтрок.Количество() - 1 Цикл
		ПодписиЗаголовок = СтрШаблон(НСтр("ru = '%1%2%3'"), ПодписиЗаголовок, ?(ПустаяСтрока(ПодписиЗаголовок), "", ", "),Строка(Форма["ФизЛицо" + СписокСтрок[Индекс]]));
		Если ЗначениеЗаполнено(Форма["Должность" + СписокСтрок[Индекс]]) Тогда
			ПодписиЗаголовок = СтрШаблон(НСтр("ru = '%1 (%2)'"),ПодписиЗаголовок, Строка(Форма["Должность" + СписокСтрок[Индекс]]));
		КонецЕсли;
	КонецЦикла;
	
	ПодписиЗаголовок = СтрШаблон(НСтр("ru = 'Подписи%1%2'"), ?(ПустаяСтрока(ПодписиЗаголовок), "", ": "), ПодписиЗаголовок);
	
	Форма.Элементы.ГруппаОтветственныеЛица.ЗаголовокСвернутогоОтображения = ПодписиЗаголовок;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтветственныхЛицОрганизации()
	
	//ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	// набор подписей для ИП как для юр.лица
	ЭтоЮрЛицо = Истина;
	
	Если ЭтоЮрЛицо Тогда
		ОтветственныеЛица = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОтветственныеЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Объект.Ссылка, ТекущаяДатаСеанса());
		КонецЕсли;
		ОтветственныеЛица.Свойство("РуководительФИзЛицо"            , ФизЛицоРуководитель);
		ОтветственныеЛица.Свойство("ГлавныйБухгалтерФИзЛицо"        , ФизЛицоГлавныйБухгалтер);
		ОтветственныеЛица.Свойство("РуководительДолжностьСсылка"    , ДолжностьРуководитель);
		ОтветственныеЛица.Свойство("ГлавныйБухгалтерДолжностьСсылка", ДолжностьГлавныйБухгалтер);
	Иначе
		ФизЛицоРуководитель = Объект.ИндивидуальныйПредприниматель;
		ФизЛицоГлавныйБухгалтер = Неопределено;
	КонецЕсли;
	
	УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиРуководителя"      , ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицоРуководитель    , "ФайлПодписи"), Ложь);
	УстановитьОчиститьИзображение(ЭтаФорма, "ПодписиГлавногоБухгалтера", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицоГлавныйБухгалтер, "ФайлПодписи"), Ложь);
	
	ПодписиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственныхЛицОрганизации(Организация, Отказ)
	
	Если ЗначениеЗаполнено(Организация) И ЕстьПравоРедактированияОтветственныхЛиц Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	1 КАК ПризнакИзменения,
		|	ОтветственныеЛицаОрганизаций.Период КАК Период,
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизаций.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&ДатаСреза,
		|			СтруктурнаяЕдиница = &Организация
		|				И ОтветственноеЛицо В (ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))) КАК ОтветственныеЛицаОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-1,
		|	ДАТАВРЕМЯ(1980, 1, 1),
		|	ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель),
		|	&ФизЛицоРуководитель,
		|	&ДолжностьРуководитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-1,
		|	ДАТАВРЕМЯ(1980, 1, 1),
		|	ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер),
		|	&ФизЛицоГлавныйБухгалтер,
		|	&ДолжностьГлавныйБухгалтер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтветственноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Данные.Период) КАК Период,
		|	Данные.ОтветственноеЛицо КАК ОтветственноеЛицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_Данные КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.ОтветственноеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтветственноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Данные.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	Данные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Данные.Должность КАК Должность
		|ИЗ
		|	ВТ_Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО (Периоды.ОтветственноеЛицо = Данные.ОтветственноеЛицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Данные.ОтветственноеЛицо,
		|	Данные.ФизическоеЛицо,
		|	Данные.Должность
		|
		|ИМЕЮЩИЕ
		|	СУММА(Данные.ПризнакИзменения) = -1");
		
		Запрос.УстановитьПараметр("ДатаСреза"                , ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Организация"              , Организация);
		Запрос.УстановитьПараметр("ФизЛицоРуководитель"      , ФизЛицоРуководитель);
		Запрос.УстановитьПараметр("ДолжностьРуководитель"    , ДолжностьРуководитель);
		Запрос.УстановитьПараметр("ФизЛицоГлавныйБухгалтер"  , ФизЛицоГлавныйБухгалтер);
		Запрос.УстановитьПараметр("ДолжностьГлавныйБухгалтер", ДолжностьГлавныйБухгалтер);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер
					И Выборка.ФизическоеЛицо = ФизЛицоГлавныйБухгалтер
					И НЕ ЗначениеЗаполнено(ФизЛицоГлавныйБухгалтер) Тогда
					// Новую запись с незаполненным физлицом не создаем
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель
					И Выборка.ФизическоеЛицо = ФизЛицоРуководитель
					И НЕ ЗначениеЗаполнено(ФизЛицоРуководитель) Тогда
					// Новую запись с незаполненным физлицом не создаем
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация);
				НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Выборка.ОтветственноеЛицо);
				
				НаборЗаписей.Прочитать();
				ЭтоЗаписьНового = НаборЗаписей.Количество() = 0;
				Если ЭтоЗаписьНового Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				КонецЕсли;
				НаборЗаписей.Очистить();

				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.СтруктурнаяЕдиница = Организация;
				
				ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(
					НаборЗаписей, Отказ, Истина);
					
				Если Отказ Тогда
					ПредставлениеОшибки = "";
					МассивСообщений = ПолучитьСообщенияПользователю(Истина);
					Для Каждого СообщениеПользователю Из МассивСообщений Цикл
						ПредставлениеОшибки = ПредставлениеОшибки + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					
					ВызватьИсключение ПредставлениеОшибки;
					//Возврат;
				КонецЕсли;
	
				Попытка
					НаборЗаписей.Записать(Истина);
				Исключение
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоРуководитель)
	   И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицоРуководитель, "ФайлПодписи") <> ФайлПодписиРуководителя Тогда
		УстановитьЗначениеРеквизитаИЗаписатьОбъект(ФизЛицоРуководитель, "ФайлПодписи", ФайлПодписиРуководителя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФизЛицоГлавныйБухгалтер) И ФизЛицоГлавныйБухгалтер <> ФизЛицоРуководитель
	   И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицоГлавныйБухгалтер, "ФайлПодписи") <> ФайлПодписиГлавногоБухгалтера Тогда
		УстановитьЗначениеРеквизитаИЗаписатьОбъект(ФизЛицоГлавныйБухгалтер, "ФайлПодписи", ФайлПодписиГлавногоБухгалтера);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРеквизитаИЗаписатьОбъект(СсылкаВладельцаРеквизита, ИмяРеквизита, ЗначениеРеквизита)
	
	ОбъектВладельцаРеквизита = СсылкаВладельцаРеквизита.ПолучитьОбъект();
	ОбщегоНазначения.УстановитьЗначениеРеквизита(ОбъектВладельцаРеквизита, ИмяРеквизита, ЗначениеРеквизита);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектВладельцаРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюОтветственныхЛицНажатие(ОтветственноеЛицо)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Объект.Ссылка, ОтветственноеЛицо);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьИсториюОтветственныхЛицНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"         , Отбор);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюОтветственныхЛицНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПрочитатьОтветственныхЛицОрганизации();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ЛоготипИПечать

&НаКлиенте
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтаФорма["Файл" + ИмяЭлементаСКартинкой]) Тогда
		ПросмотретьИзображение(ИмяЭлементаСКартинкой);
	ИначеЕсли Не ТолькоПросмотр Тогда
		ДобавитьИзображение(ИмяЭлементаСКартинкой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьКартинку(СтандартнаяОбработка, ИмяКартинки)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ЭтаФорма["Адрес" + ИмяКартинки]) Тогда
		ОчиститьИзображение(ИмяКартинки);
	Иначе
		ДобавитьИзображение(ИмяКартинки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(ИмяЭлементаСКартинкой)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ЭтаФорма["Файл" + ИмяЭлементаСКартинкой]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтаФорма["Файл" + ИмяЭлементаСКартинкой], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Адрес" + ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(ИмяЭлементаСКартинкой)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Или СтрНайти(ИмяЭлементаСКартинкой, "Подписи") Тогда
		
		ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос", ЭтотОбъект, ИмяЭлементаСКартинкой), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос(РезультатВопроса, ИмяЭлементаСКартинкой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВладельцаФайла(ИмяЭлементаСКартинкой);
	
	ВладелецФайла = Неопределено;
	
	Если ИмяЭлементаСКартинкой = "ПодписиРуководителя" Тогда
		ВладелецФайла = ФизЛицоРуководитель;
	ИначеЕсли ИмяЭлементаСКартинкой = "ПодписиГлавногоБухгалтера" Тогда
		ВладелецФайла = ФизЛицоГлавныйБухгалтер;
	Иначе
		ВладелецФайла = Объект.Ссылка;
	КонецЕсли;
	
	Возврат ВладелецФайла
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте(ИмяЭлементаСКартинкой)
	
	ВладелецФайла = ПолучитьВладельцаФайла(ИмяЭлементаСКартинкой);
	
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		
		Если Не ЕстьПравоРедактирования Тогда
			
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'");
			ВызватьИсключение ТекстИсключения
			
		КонецЕсли;
		
		Если СтрНайти(ИмяЭлементаСКартинкой, "Логотип") Тогда
			Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
			+ "|Все файлы(*.*)|*.*"
			+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
			+ "|Формат GIF(*.gif*)|*.gif"
			+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
			+ "|Формат PNG(*.png*)|*.png"
			+ "|Формат TIFF(*.tif)|*.tif"
			+ "|Формат icon(*.ico)|*.ico"
			+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'"); 
		Иначе
			Фильтр = НСтр("ru = 'Формат PNG(*.png*)|*.png'");
		КонецЕсли;
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбратьИзображениеЗавершение", ЭтотОбъект, ИмяЭлементаСКартинкой);
		
		РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецФайла, ИдентификаторФайла, Фильтр, , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(ИмяЭлементаСКартинкой)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ЭтаФорма["Файл" + ИмяЭлементаСКартинкой]) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ЭтаФорма["Файл" + ИмяЭлементаСКартинкой]);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Адрес" + ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзображение(ИмяЭлементаСКартинкой, Изображение)
	
	УстановитьОчиститьИзображение(ЭтаФорма, ИмяЭлементаСКартинкой, Изображение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(ИмяЭлементаСКартинкой)
	
	УстановитьОчиститьИзображение(ЭтаФорма, ИмяЭлементаСКартинкой);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОчиститьИзображение(Форма, ИмяЭлементаСКартинкой, Изображение = Неопределено, УстанавливатьМодифицированность = Истина)
	
	Форма["Файл" + ИмяЭлементаСКартинкой] = Изображение;
	Форма["Адрес" + ИмяЭлементаСКартинкой] = ?(ЗначениеЗаполнено(Изображение), НавигационнаяСсылкаКартинки(Изображение, Форма.УникальныйИдентификатор), "");
							
	Если ЗначениеЗаполнено(Изображение) Тогда
		
		Если ИмяЭлементаСКартинкой = "Логотипа" Тогда
			ТекстКартинки = НСтр("ru = 'Очистить логотип'");
		ИначеЕсли ИмяЭлементаСКартинкой = "Печати" Тогда
			ТекстКартинки = НСтр("ru = 'Очистить печать'");
		ИначеЕсли ИмяЭлементаСКартинкой = "ПодписиРуководителя" ИЛИ ИмяЭлементаСКартинкой = "ПодписиГлавногоБухгалтера" Тогда
			ТекстКартинки = НСтр("ru = 'Очистить подпись'");	
		Иначе
			ТекстКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Очистить %1'"), ИмяЭлементаСКартинкой);	
		КонецЕсли; 
		
		Форма["ЗагрузкаОчистка" + ИмяЭлементаСКартинкой] = ТекстКартинки;		
	Иначе 
		
		Если ИмяЭлементаСКартинкой = "Логотипа" Тогда
			ТекстКартинки = НСтр("ru = 'Загрузить логотип'");
		ИначеЕсли ИмяЭлементаСКартинкой = "Печати" Тогда
			ТекстКартинки = НСтр("ru = 'Загрузить печать'");
		ИначеЕсли ИмяЭлементаСКартинкой = "ПодписиРуководителя" ИЛИ ИмяЭлементаСКартинкой = "ПодписиГлавногоБухгалтера" Тогда
			ТекстКартинки = НСтр("ru = 'Загрузить подпись'");	
		Иначе
			ТекстКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Загрузить %1'"), ИмяЭлементаСКартинкой);	
		КонецЕсли;

		Форма["ЗагрузкаОчистка" + ИмяЭлементаСКартинкой] = ТекстКартинки;
	КонецЕсли;
	
	Форма.Модифицированность = Форма.Модифицированность Или УстанавливатьМодифицированность;
	
	#Если Клиент Тогда
		Если УстанавливатьМодифицированность Тогда
			Если ИмяЭлементаСКартинкой = "ПодписиРуководителя" Тогда
				Если ЗначениеЗаполнено(Форма.ФизЛицоРуководитель) Тогда
					Оповестить("ФизЛицо_ИзменениеПодписи", Новый Структура("Ссылка, ФайлПодписи", Форма.ФизЛицоРуководитель, Форма["Файл" + ИмяЭлементаСКартинкой]), Форма);
				КонецЕсли;
			ИначеЕсли ИмяЭлементаСКартинкой = "ПодписиГлавногоБухгалтера" Тогда
				Если ЗначениеЗаполнено(Форма.ФизЛицоГлавныйБухгалтер) Тогда
					Оповестить("ФизЛицо_ИзменениеПодписи", Новый Структура("Ссылка, ФайлПодписи", Форма.ФизЛицоГлавныйБухгалтер, Форма["Файл" + ИмяЭлементаСКартинкой]), Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла"     , ПолучитьВладельцаФайла(ИмяЭлементаСКартинкой));
	ПараметрыФормы.Вставить("РежимВыбора"       , Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбратьИзображениеЗавершение", ЭтотОбъект, ИмяЭлементаСКартинкой);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы["Адрес" + ИмяЭлементаСКартинкой], , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбратьИзображениеЗавершение(Результат, ИмяЭлементаСКартинкой) Экспорт
	
	ФайлИзображения = Неопределено;
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если Результат.Количество() > 0 Тогда
			ФайлИзображения = Результат[0];
		КонецЕсли;
	Иначе
		ФайлИзображения = Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлИзображения) Тогда
		
		УстановитьИзображение(ИмяЭлементаСКартинкой, ФайлИзображения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ИндивидуальныйПредпринимательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ИндивидуальныйПредприниматель, "ИдентификационныйКодЛичности, РНН");
		Объект.ИдентификационныйНомер = ЗначенияРеквизитов.ИдентификационныйКодЛичности;
		Объект.РНН = ЗначенияРеквизитов.РНН;
	Иначе 
		Объект.ИдентификационныйНомер = "";
		Объект.РНН = "";
	КонецЕсли;
	
	ПрочитатьОтветственныхЛицОрганизации();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВидаДеятельности()
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойВидДеятельности) Тогда
		КодОКЭД = НСтр("ru = '<укажите вид деятельности>'");
		НаименованиеОКЭД = НСтр("ru = '<укажите вид деятельности>'");
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОсновнойВидДеятельности, "КодОКЭД, ПолноеНаименование");
		
		КодОКЭД = ?(НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.КодОКЭД), НСтр("ru = '<не указан код ОКЭД для вида деятельности>'"),ЗначенияРеквизитов.КодОКЭД);
		НаименованиеОКЭД = ?(НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ПолноеНаименование), НСтр("ru = '<не указано полное наименование вида деятельности>'"),ЗначенияРеквизитов.ПолноеНаименование);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКонтрагентаЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаЗавершение()
	
	Если ЗначениеЗаполнено(КонтрагентОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Контрагент уже выбран'"),
		,
		"КонтрагентОрганизации",
		,
		);
		Возврат;
	КонецЕсли;
	
	МассивКонтрагентов = НайтиКонтрагентовПоНаименованиюБИНилиРНН(Объект.Наименование, Объект.ИдентификационныйНомер, Объект.РНН);
	Если МассивКонтрагентов.Количество() <> 0 Тогда 
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
		СписокКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), НСтр("ru = 'Создать нового контрагента'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтрагентаОбработкаВыбораЗначения", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКонтрагентов);
	Иначе 
		ДанныеОбъекта = Новый Структура("Ссылка, ОсновнойБанковскийСчет", Объект.Ссылка, Объект.ОсновнойБанковскийСчет);
		КонтрагентОрганизации = СоздатьКонтрагентаНаСервере(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), ДанныеОбъекта);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаОбработкаВыбораЗначения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент.Значение) Тогда 
		ДанныеОбъекта = Новый Структура("Ссылка, ОсновнойБанковскийСчет", Объект.Ссылка, Объект.ОсновнойБанковскийСчет);
		КонтрагентОрганизации = СоздатьКонтрагентаНаСервере(ВыбранныйЭлемент.Значение, ДанныеОбъекта);
	Иначе 
		КонтрагентОрганизации = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКонтрагентаНаСервере(ВыбранныйКонтрагент, Объект)
	
	НачатьТранзакцию();
	
	НовыйКонтрагент = ВыбранныйКонтрагент;
	Если НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Заполнить(Объект.Ссылка);
		
		НоваяСсылкаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку();
		НовыйКонтрагент.УстановитьСсылкуНового(НоваяСсылкаКонтрагента);
		
	КонецЕсли;
	
	ДоговорСсылкаНового = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
	БанковскийСчетСсылкаНового = Справочники.БанковскиеСчета.ПолучитьСсылку();
	
	НовыйКонтрагент.ОсновнойДоговорКонтрагента = ДоговорСсылкаНового;
	НовыйКонтрагент.ОсновнойБанковскийСчет = БанковскийСчетСсылкаНового;
	
	НовыйКонтрагент.Записать();
	
	СоздатьОсновнойДоговор(НовыйКонтрагент.Ссылка, Объект.Ссылка, ДоговорСсылкаНового);
	СоздатьОсновнойБанковскийСчет(НовыйКонтрагент.Ссылка, Объект, БанковскийСчетСсылкаНового);
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОсновнойДоговор(КонтрагентДоговора, Организация, СсылкаНового)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.Наименование          = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить()) + ")";
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	НовыйДоговор.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	НовыйДоговор.Организация = Организация;
	
	НовыйДоговор.Владелец    = КонтрагентДоговора;
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	НовыйДоговор.УстановитьСсылкуНового(СсылкаНового);
	
	СсылкаНовогоДоговора = Неопределено;
	Попытка
		НовыйДоговор.Записать();
		СсылкаНовогоДоговора = НовыйДоговор.Ссылка;
	Исключение
	КонецПопытки;
	
	Возврат СсылкаНовогоДоговора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОсновнойБанковскийСчет(КонтрагентБанковскогоСчета, Объект, СсылкаНового)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйБанковскийСчет = Объект.ОсновнойБанковскийСчет.Скопировать();
	
	НовыйБанковскийСчет.Владелец = КонтрагентБанковскогоСчета;
	
	НовыйБанковскийСчет.УстановитьСсылкуНового(СсылкаНового);
	
	НовыйБанковскийСчет.Записать();
	
	Возврат НовыйБанковскийСчет.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКонтрагентовПоНаименованиюБИНилиРНН(Наименование, БИН, РНН)
	
	Возврат Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(Наименование, БИН, РНН);
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УчетПоМестнымБюджетамПриИзменении(Элемент)
	
	Если НЕ Объект.УчетПоМестнымБюджетам Тогда
		Объект.МестныйБюджет = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьВФорме(ИмяСобытия, Параметр = Неопределено, Источник = Неопределено) 
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РассылкаОповещенияИзТекущейФормы = Истина;
	Оповестить(ИмяСобытия, Параметр, Источник);
	РассылкаОповещенияИзТекущейФормы = Ложь;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
	
	// Если основным назначен другой банковский счет, то разблокируем предыдущий основной
	Если Объект.ОсновнойБанковскийСчет <> ОсновнойБанковскийСчет
		И БанковскийСчетЗаблокирован Тогда
		
		РазблокироватьРеквизитПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
		БанковскийСчетЗаблокирован = Ложь;
		
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюКассу(ОсновнаяКасса)
	
	Прочитать();
	
	// Если основным назначена другая касса, то разблокируем предыдущую основную
	Если Объект.ОсновнаяКасса <> ОсновнаяКасса
		И КассаЗаблокирована Тогда
		
		РазблокироватьРеквизитПриРедактированииНаСервере(Объект.ОсновнаяКасса, УникальныйИдентификатор);
		КассаРазблокирована = Ложь;
		
	КонецЕсли;
	
	Объект.ОсновнаяКасса = ОсновнаяКасса;
	
	ПрочитатьОсновнуюКассу();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазблокироватьРеквизитПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнуюКассу()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.Кассы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяКасса) Тогда
		ОсновнаяКассаОбъект = Объект.ОсновнаяКасса.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.Кассы) Тогда
		ОсновнаяКассаОбъект = Справочники.Кассы.СоздатьЭлемент();
	Иначе
		ОсновнаяКассаОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти