
&НаСервере
Перем СозданныйДоговорКонтрагента;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ОтображатьРеквизитыЗаполненияпоДаннымКГД = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		
		ОтображатьРеквизитыЗаполненияпоДаннымКГД = Истина;
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	ОтображатьРеквизитыЗаполненияпоДаннымКГД = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьУстановитьОсновнойБанковскийСчет(ТекущийОбъект);
	Иначе 
		НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(НоваяСсылка);
		
		ПроверитьУстановитьОсновнойДоговорКонтрагента(ТекущийОбъект, НоваяСсылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СозданныйДоговорКонтрагента <> Неопределено Тогда
		Попытка
			СозданныйДоговорКонтрагента.Записать();
		Исключение
			ТекущийОбъект.ОсновнойДоговорКонтрагента = Неопределено;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось записать контрагента по причине: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		КонецПопытки
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой(ЭтотОбъект);
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	ПрочитатьОсновнойБанковскийСчет();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);
				
				ОповеститьВФорме("УстановкаОсновногоБанковскогоСчетаВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать(); 
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоКонтактногоЛица" Тогда
		
		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Объект.ОсновноеКонтактноеЛицо = Параметр.ОсновноеКонтактноеЛицо;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоКонтактногоЛицаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеКонтрагента" Тогда
	
		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Прочитать();
			
		КонецЕсли;
		
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСведенияОВзаиморасчетахСКонтрагентом", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)	
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ФизЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СИКПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "СИК");
КонецПроцедуры

&НаКлиенте
Процедура ИдентификационныйКодЛичностиПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "БИН");
	ПроверитьДубли(ЭтотОбъект, Истина, "БИН");
КонецПроцедуры

&НаКлиенте
Процедура РННПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "РНН");
	ПроверитьДубли(ЭтотОбъект, Истина, "РНН");
КонецПроцедуры

&НаКлиенте
Процедура КБЕПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "КБЕ");
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура БИН_ИИНПоказатьДублиНажатие(Элемент)
	ОбработатьСитуациюВыбораДубля(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РННПоказатьДублиНажатие(Элемент)
	ОбработатьСитуациюВыбораДубля(Элемент, "РНН", "РНН");
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательАдвокатЧастныйНотариусПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПокупателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоНеоплаченнымСчетамПокупателем();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗадолженностьПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПокупателей();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПокупателей(); 
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗадолженностьПоставщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПоставщикам();

КонецПроцедуры

&НаКлиенте
Процедура АвансПоставщикуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПоставщикам();
	
КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПоставщиковНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоНеоплаченнымСчетамПоставщиков();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ОбновитьСведенияОВзаиморасчетахСКонтрагентом()
	ОбновитьСведенияОВзаиморасчетахСКонтрагентом(ЭтотОбъект);
КонецПроцедуры 

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(Объект.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(Объект.Наименование);
		
	ПроверятьДубли = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "КонтрольДубликатовВСправочникеКонтрагенты");
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	
	ПроверитьДубли(ЭтотОбъект);
	
	ВидимостьБанковскогоСчета = ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета);
	Элементы.ГруппаОсновнойБанковскийСчет.Видимость = ВидимостьБанковскогоСчета;
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	Элементы.ГруппаЮрЛицо.Видимость       								   = ЭтоЮрЛицо;
	Элементы.ГруппаФизЛицо.Видимость      								   = НЕ ЭтоЮрЛицо;
	Элементы.НаименованиеПолное.Заголовок 								   = ?(ЭтоЮрЛицо, НСтр("ru = 'Полное наименование'"), НСтр("ru = 'ФИО'"));
	Элементы.ФизЛицо.Видимость            								   = НЕ ЭтоЮрЛицо;
	Элементы.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус.Видимость = НЕ ЭтоЮрЛицо;
	Элементы.ГосударственноеУчреждение.Видимость 						   = ЭтоЮрЛицо;
	Элементы.ГруппаЗаполненияПоДаннымКГД.Видимость 						   = Форма.ОтображатьРеквизитыЗаполненияпоДаннымКГД;	
	Элементы.ЗаполнитьПоБИН.Видимость									   = НЕ Форма.ОтображатьРеквизитыЗаполненияпоДаннымКГД И (ЭтоЮрЛицо ИЛИ Объект.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус); 
	Элементы.ЗаполнитьПоБИН.Заголовок									   = ?(ЭтоЮрЛицо,НСтр("ru = 'Заполнить по БИН'"), НСтр("ru = 'Заполнить по ИИН'"));  

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРегламентированныеДанные(Форма, ПроверяемыеДанные = "БИН, РНН, СИК, КБЕ")
	
	МассивПроверяемыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемыеДанные, ",", , Истина);
	Для Каждого Элемент Из МассивПроверяемыхДанных Цикл
		ИмяЭлементаНадписи = "НадписьПоясненияНекорректного" + Элемент;
		ТекстСообщения     = "";
		Если Форма.Элементы.Найти(ИмяЭлементаНадписи) <> Неопределено Тогда 
			Если Элемент = "БИН" Тогда 
				Форма.БИН_ИИНВведенКорректно = Ложь;
				Если НЕ ЗначениеЗаполнено(Форма.Объект.ИдентификационныйКодЛичности) 
					ИЛИ РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(Форма.Объект.ИдентификационныйКодЛичности, ТекстСообщения) Тогда 
					ТекстСообщения = "";
					Форма.БИН_ИИНВведенКорректно = Истина;
				КонецЕсли;
			ИначеЕсли Элемент = "РНН" Тогда 
				Форма.РННВведенКорректно = Ложь;
				Если НЕ ЗначениеЗаполнено(Форма.Объект.РНН) 
					ИЛИ РегламентированныеДанныеКлиентСервер.РННСоответствуетТребованиям(Форма.Объект.РНН, ТекстСообщения) Тогда 
					ТекстСообщения = "";
					Форма.РННВведенКорректно = Истина;
				КонецЕсли;
			ИначеЕсли Элемент = "СИК" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.СИК) 
					ИЛИ РегламентированныеДанныеКлиентСервер.СИКСоответствуетТребованиям(Форма.Объект.СИК, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			ИначеЕсли Элемент = "КБЕ" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.КБЕ) 
					ИЛИ РегламентированныеДанныеКлиентСервер.КБеСоответствуетТребованиям(Форма.Объект.КБЕ, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			КонецЕсли;
			Форма[ИмяЭлементаНадписи] = ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработка завершения интерактивных действий пользователя

&НаКлиенте
Процедура НаименованиеПолноеЗавершениеВвода(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.НаименованиеПолное = ВыбранноеЗначение;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервереБезКонтекста
Функция ПредставлениеТелефоновКонтактногоЛица(КонтактноеЛицо)
	
	СтрокаТелефонов = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Объект", КонтактноеЛицо);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТелефонов = СтрокаТелефонов + ", " + СокрЛП(Выборка.Представление);
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	
	Возврат СтрокаТелефонов;
	
КонецФункции

&НаСервере
Процедура ПроверитьУстановитьОсновнойБанковскийСчет(КонтрагентОбъект)
	
	Если ЗначениеЗаполнено(КонтрагентОбъект.ОсновнойБанковскийСчет) Тогда
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ
	|	Владелец = &Контрагент
	|";

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();

	Если ВыборкаСчетов.Следующий() Тогда
		
		КонтрагентОбъект.ОсновнойБанковскийСчет = ВыборкаСчетов.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУстановитьОсновнойДоговорКонтрагента(ТекущийОбъект, КонтрагентСсылка)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойДоговорКонтрагента) Тогда
		Возврат;
    КонецЕсли; 
    
    Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
        Возврат;
    КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент";

	ВыборкаДоговоров = Запрос.Выполнить().Выбрать();

	СозданныйДоговорКонтрагента = Неопределено;
	
	Если ВыборкаДоговоров.Следующий() Тогда
		НайденныйДоговор = ВыборкаДоговоров.Ссылка;

	Иначе
		
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Возврат;
		КонецЕсли;

		СтруктураЗаполненияДоговора = Новый Структура("Владелец, Наименование, Организация",
			КонтрагентСсылка, НСтр("ru = 'Без договора'", ОбщегоНазначения.КодОсновногоЯзыка()), ОрганизацияПоУмолчанию);
			
		НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НайденныйДоговорОбъект.Заполнить(СтруктураЗаполненияДоговора);
		
		НайденныйДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
		НайденныйДоговорОбъект.УстановитьСсылкуНового(НайденныйДоговор);
		
		СозданныйДоговорКонтрагента = НайденныйДоговорОбъект;
		
	КонецЕсли;

	ТекущийОбъект.ОсновнойДоговорКонтрагента = НайденныйДоговор;
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамДатаАктуальности", ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("парамФизЛицо", Объект.ФизЛицо);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Наименование,
	               |	ФизическиеЛица.РНН,
	               |	ФизическиеЛица.СИК,
	               |	ФизическиеЛица.ИдентификационныйКодЛичности,
	               |	ПаспортныеДанные.ДокументВид.Наименование КАК ДокументВид,
	               |	ПаспортныеДанные.ДокументСерия,
	               |	ПаспортныеДанные.ДокументНомер,
	               |	ПаспортныеДанные.ДокументДатаВыдачи,
	               |	ВЫРАЗИТЬ(ПаспортныеДанные.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
	               |	ФИОФизЛиц.Фамилия,
	               |	ФИОФизЛиц.Имя,
	               |	ФИОФизЛиц.Отчество
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамДатаАктуальности, ФизЛицо = &парамФизЛицо) КАК ПаспортныеДанные
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка = &парамФизЛицо";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = Выборка.Наименование;
		КонецЕсли;
		
		Если ФормироватьНаименованиеПолноеАвтоматически
				И ЗначениеЗаполнено(Выборка.Фамилия) Тогда
			Объект.НаименованиеПолное = Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество;
		КонецЕсли;
		
		Объект.РНН = Выборка.РНН;
		Объект.СИК = Выборка.СИК;
		Объект.ИдентификационныйКодЛичности = Выборка.ИдентификационныйКодЛичности;
		
		Если ЗначениеЗаполнено(Выборка.ДокументВид) Тогда
			
			Объект.ДокументУдостоверяющийЛичность = Выборка.ДокументВид;
			
			Если ЗначениеЗаполнено(Выборка.ДокументСерия) Тогда
				Объект.ДокументУдостоверяющийЛичность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, серия %2'"), Объект.ДокументУдостоверяющийЛичность, Выборка.ДокументСерия);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.ДокументНомер) Тогда
				Объект.ДокументУдостоверяющийЛичность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, № %2'"), Объект.ДокументУдостоверяющийЛичность, Выборка.ДокументНомер);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.ДокументДатаВыдачи) Тогда
				Объект.ДокументУдостоверяющийЛичность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, %2'"), Объект.ДокументУдостоверяющийЛичность, Формат(Выборка.ДокументДатаВыдачи, "ДФ='дд.ММ.гггг'"));
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.ДокументКемВыдан) Тогда
				Объект.ДокументУдостоверяющийЛичность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, %2'"), Объект.ДокументУдостоверяющийЛичность, СокрЛП(Выборка.ДокументКемВыдан));
			КонецЕсли;
		
		КонецЕсли;
		
		ПроверитьРегламентированныеДанные(ЭтотОбъект, "БИН, РНН, СИК");
		ПроверитьДубли(ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск дублей

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверяемыеДанные = "";
	Если ДополнительныеПараметры.Свойство("БИН_ИИН") Тогда 
		ПроверяемыеДанные = "БИН";
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("РНН") Тогда 
		ПроверяемыеДанные = ПроверяемыеДанные + ",РНН";
	КонецЕсли;
		
	ПроверитьДубли(ЭтотОбъект, Истина, ПроверяемыеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент, ПроверяемыеДанные = "БИН_ИИН", ИмяРеквизита = "ИдентификационныйКодЛичности")
		
	ПараметрыПередачи = Новый Структура;
	
	ПараметрыПередачи.Вставить("ПоискПо" + ПроверяемыеДанные, Истина); 
	ПараметрыПередачи.Вставить(ПроверяемыеДанные, ?(ЭтотОбъект.ПолеПоискаБИН <> "",ЭтотОбъект.ПолеПоискаБИН,Объект[ИмяРеквизита]));
	ПараметрыПередачи.Вставить(ПроверяемыеДанные, Объект[ИмяРеквизита]);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма, ПараметрыПередачи);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДубли(Форма, ПроверятьДубли = Ложь, ПроверяемыеДанные = "БИН, РНН")
			
	Объект = Форма.Объект;
	
	КоличествоЭлементовДублейБИН_ИИН = 0;
	КоличествоЭлементовДублейРНН = 0;
	
	Если Форма.Элементы.Найти("ПолеФормыПоискаБИН") <> Неопределено Тогда
		Если Форма.ПолеПоискаБИН <> "" Тогда
			
			Если Найти(ПроверяемыеДанные, "БИН") > 0 И (Форма.ПроверятьДубли ИЛИ ПроверятьДубли) Тогда
				
				КоличествоЭлементовДублейБИН_ИИН = ВыполнитьПоискДублейСервер(?(Форма.ПолеПоискаБИН <> "", Форма.ПолеПоискаБИН, Объект.ИдентификационныйКодЛичности), Объект.Ссылка, "БИН_ИИН");
				
			КонецЕсли;
		Иначе
			Если Найти(ПроверяемыеДанные, "БИН") > 0 И Форма.БИН_ИИНВведенКорректно И (Форма.ПроверятьДубли ИЛИ ПроверятьДубли) Тогда 
				
				КоличествоЭлементовДублейБИН_ИИН = ВыполнитьПоискДублейСервер(?(Форма.ПолеПоискаБИН <> "", Форма.ПолеПоискаБИН, Объект.ИдентификационныйКодЛичности), Объект.Ссылка, "БИН_ИИН");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Если Найти(ПроверяемыеДанные, "РНН") > 0 И Форма.РННВведенКорректно И (Форма.ПроверятьДубли ИЛИ ПроверятьДубли) Тогда 
		
		КоличествоЭлементовДублейРНН = ВыполнитьПоискДублейСервер(Объект.РНН, Объект.Ссылка, "РНН");
		
	КонецЕсли;
	
	Форма.ЕстьДубли = НЕ КоличествоЭлементовДублейБИН_ИИН = 0 ИЛИ НЕ КоличествоЭлементовДублейРНН = 0;

	ПрописатьИнформационныеНадписиДляДублей(Форма, КоличествоЭлементовДублейБИН_ИИН, КоличествоЭлементовДублейРНН);

	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ПрописатьИнформационныеНадписиДляДублей(Форма, КоличествоЭлементовДублейБИН_ИИН, КоличествоЭлементовДублейРНН)
	
	Объект = Форма.Объект;
	
	Элементы = Форма.Элементы;
	
	Если КоличествоЭлементовДублейБИН_ИИН > 0 Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		СтруктураПараметровСообщенияОДублях.Вставить("БИН_ИИН", НСтр("ru = 'БИН / ИИН'"));
		
		Если КоличествоЭлементовДублейБИН_ИИН = 1 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			
		ИначеЕсли КоличествоЭлементовДублейБИН_ИИН < 5 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублейБИН_ИИН);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			
		Иначе
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублейБИН_ИИН);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			
		КонецЕсли;	
		
		Элементы.БИН_ИИНПоказатьДубли.Видимость = Истина;
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [БИН_ИИН] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		Форма.НадписьПоясненияНекорректногоБИН = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, 
																									   СтруктураПараметровСообщенияОДублях);
		
	КонецЕсли;

	Если КоличествоЭлементовДублейРНН > 0 Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		СтруктураПараметровСообщенияОДублях.Вставить("РНН", НСтр("ru = 'РНН'"));
		
		Если КоличествоЭлементовДублейРНН = 1 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			
		ИначеЕсли КоличествоЭлементовДублейРНН < 5 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублейРНН);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			
		Иначе
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублейРНН);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			
		КонецЕсли;	
		
		Элементы.РННПоказатьДубли.Видимость = Истина;
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [РНН] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		Форма.НадписьПоясненияНекорректногоРНН = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, 
																									   СтруктураПараметровСообщенияОДублях);
		
	КонецЕсли;

	Если НЕ Форма.ЕстьДубли Тогда
		
		Если Форма.БИН_ИИНВведенКорректно Тогда
			
			Форма.НадписьПоясненияНекорректногоБИН = "";
			
		КонецЕсли;
		
		Если Форма.РННВведенКорректно Тогда
			
			Форма.НадписьПоясненияНекорректногоРНН = "";
			
		КонецЕсли;

		Элементы.БИН_ИИНПоказатьДубли.Видимость = Ложь;
		Элементы.РННПоказатьДубли.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВыполнитьПоискДублейСервер(Знач Значение, Знач Ссылка, ПроверяемыеДанные = "БИН_ИИН")
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоБИН_ИИНилиРНН(СокрЛП(Значение), Ссылка, ПроверяемыеДанные).Количество();
КонецФункции	

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства 

// Основной банковский счет

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
	
	// Если основным назначен другой банковский счет, то разблокируем предыдущий основной
	Если Объект.ОсновнойБанковскийСчет <> ОсновнойБанковскийСчет
		И БанковскийСчетЗаблокирован Тогда
		
		РазблокироватьРеквизитПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
		БанковскийСчетЗаблокирован = Ложь;
		
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазблокироватьРеквизитПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОповеститьВФорме(ИмяСобытия, Параметр = Неопределено, Источник = Неопределено) 
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РассылкаОповещенияИзТекущейФормы = Истина;
	Оповестить(ИмяСобытия, Параметр, Источник);
	РассылкаОповещенияИзТекущейФормы = Ложь;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

#Область Контрагент

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымКГД(Команда)
	ЗаполнитьРеквизитыПоДаннымКГДНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымКГДНаКлиенте(ПолеПоискаБИН = Истина)
	
	ТекстСообщения = "";
	Если ПолеПоискаБИН Тогда
		БИН = ЭтотОбъект.ПолеПоискаБИН;
	Иначе
		БИН = Объект.ИдентификационныйКодЛичности;
	КонецЕсли;
	
	Если Не РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(БИН, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОтветСервиса = КонтрагентыФормыВызовСервера.ПолучитьРеквизитыПоДаннымКГД(СокрЛП(БИН));
	
	Если ТипЗнч(ОтветСервиса) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса);
		Возврат;
	Иначе
		Если ТипЗнч(ОтветСервиса) <> Тип("Структура") Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		ИначеЕсли НЕ ОтветСервиса.result Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОтветСервиса.errorMsg);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьДубли(ЭтотОбъект, Истина, "БИН");
	
	КоличествоЭлементовДублейБИН_ИИН = ВыполнитьПоискДублейСервер(БИН, Объект.Ссылка, "БИН_ИИН");
	
	ПрописатьИнформационныеНадписиДляДублей(ЭтотОбъект, КоличествоЭлементовДублейБИН_ИИН, 0);
	
	Если КоличествоЭлементовДублейБИН_ИИН > 0 Тогда
		Если ПолеПоискаБИН Тогда
			ТекстВопроса = НСтр("ru = 'В базе уже имеется контрагент с таким БИН/ИИН. Вы хотите записать новый элемент?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'В базе уже имеется контрагент с таким БИН/ИИН. Вы хотите перезаполнить текущие реквизиты?'");
		КонецЕсли;
		
	Иначе
		Если ПолеПоискаБИН Тогда
			ТекстВопроса = НСтр("ru = 'Для продолжения заполнения необходимо записать элемент справочника. Записать?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перезаполнить текущие реквизиты??'"); 
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтветСервиса",ОтветСервиса);
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписьЭлементаПолеБИНПослеВопроса",ЭтотОбъект,ДополнительныеПараметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьЭлементаПолеБИНПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(ДополнительныеПараметры.ОтветСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ДанныеЗаполненияКГД)
	
	СпрОбъект = РеквизитФормыВЗначение("Объект");
	СпрОбъект.Заполнить(ДанныеЗаполненияКГД);
	ЗначениеВРеквизитФормы(СпрОбъект, "Объект"); 
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеФормыПоискаБИНПриИзменении(Элемент)
	
	ПроверитьДубли(ЭтотОбъект, Истина, "БИН");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБИН(Команда)
	ЗаполнитьРеквизитыПоДаннымКГДНаКлиенте(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ПустаяСтрока(ТекстЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоБИН(ТекстЗаполнения) Тогда
		
		Объект.Наименование = "";
		ЭтаФорма.ПолеПоискаБИН = ТекстЗаполнения;
					
	Иначе
		Объект.Наименование = ТекстЗаполнения;
	КонецЕсли;
	
	ТекстЗаполнения = Неопределено;
	
КонецПроцедуры

Функция ЭтоБИН(СтрокаБИН) Экспорт
	
	Возврат ЗначениеЗаполнено(СтрокаБИН)
		И СтрДлина(СтрокаБИН) = 12
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаБИН);
	
КонецФункции  

#КонецОбласти

#Область ЗадолженностьПокупателя 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСведенияОВзаиморасчетахСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
		
	СведенияОЗадолженностиКонтрагента = СведенияОВзаиморасчетах(Объект.Ссылка);
	
	НетЗадолженностиПоставщику = СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику = 0 И СведенияОЗадолженностиКонтрагента.АвансПоставщику = 0
		И СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество = 0;
	НетЗадолженностиПокупателя = СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя = 0 И СведенияОЗадолженностиКонтрагента.АвансПокупателя = 0
		И СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемКоличество = 0;
	
	Элементы.ДекорацияДолговНет.Видимость = НетЗадолженностиПокупателя И НетЗадолженностиПоставщику;
	Элементы.ГруппаЗадолженностьПокупателей.Видимость = Не НетЗадолженностиПокупателя;
	Элементы.ГруппаЗадолженностьПоставщикам.Видимость = Не НетЗадолженностиПоставщику;
	
	КонтрагентЗадолженностьПоставщику    = Формат(СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику, "ЧДЦ=0");
	
	КонтрагентАвансПоставщику  = Формат(СведенияОЗадолженностиКонтрагента.АвансПоставщику, "ЧДЦ=0");
	
	КонтрагентЗадолженностьПокупателя   = Формат(СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя, "ЧДЦ=0");

	КонтрагентАвансПокупателя = Формат(СведенияОЗадолженностиКонтрагента.АвансПокупателя, "ЧДЦ=0");
	
	Если СведенияОЗадолженностиКонтрагента.НеОплаченныеСчетаПокупателемКоличество = 0 Тогда
		КонтрагентНеоплаченныеСчетаПокупателей = "0 ";
	Иначе
		КонтрагентНеоплаченныеСчетаПокупателей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 на %2'"),
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемКоличество,
			Формат(СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемСумма, "ЧДЦ=0"));
	КонецЕсли;
	
	Если СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество = 0 Тогда
		КонтрагентНеоплаченныеСчетаПоставщиков = "0 ";
	Иначе
		КонтрагентНеоплаченныеСчетаПоставщиков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 на %2'"),
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество,
			Формат(СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковСумма, "ЧДЦ=0"));
	КонецЕсли;

	Если Элементы.ГруппаЗадолженностьПоставщикам.Видимость Тогда
		
		Форма.ЗадолженностьПоставщику = КонтрагентЗадолженностьПоставщику;
		Форма.АвансПоставщику = КонтрагентАвансПоставщику;
		Форма.НеоплаченныеСчетаПоставщиков = КонтрагентНеоплаченныеСчетаПоставщиков;

		Элементы.ЗадолженностьПоставщику.Видимость = СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику <> 0;
		Элементы.АвансПоставщику.Видимость = СведенияОЗадолженностиКонтрагента.АвансПоставщику <> 0;
		Элементы.НеоплаченныеСчетаПоставщиков.Видимость =
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество <> 0;
		
	КонецЕсли;
	
	Если Элементы.ГруппаЗадолженностьПокупателей.Видимость Тогда
		
		Форма.ЗадолженностьПокупателя = КонтрагентЗадолженностьПокупателя;
		Форма.АвансПокупателя = КонтрагентАвансПокупателя;
		Форма.НеоплаченныеСчетаПокупателя = КонтрагентНеоплаченныеСчетаПокупателей;

		Элементы.ЗадолженностьПокупателя.Видимость = СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя <> 0;
		Элементы.АвансПокупателя.Видимость = СведенияОЗадолженностиКонтрагента.АвансПокупателя <> 0;
		Элементы.ГруппаНеоплаченныеСчетаПокупателя.Видимость =
			СведенияОЗадолженностиКонтрагента.НеОплаченныеСчетаПокупателемКоличество <> 0;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОВзаиморасчетах(Знач Контрагент)
	
	Результат = Справочники.Контрагенты.ЗадолженностьПоКонтрагенту(Контрагент);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоНеоплаченнымСчетамПокупателем()
	
	КлючВарианта = "АнализНеоплаченныхСчетовПокупателям";
	ИмяОтчета = "АнализНеоплаченныхСчетовПокупателям";
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоНеоплаченнымСчетамПоставщиков()
	
	КлючВарианта = "АнализНеоплаченныхСчетовПоставщиков";
	ИмяОтчета = "АнализНеоплаченныхСчетовПоставщиков";
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта)

	ПараметрыОтчета = ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Объект.Ссылка); 
	
	ИмяФормыОтчета = "Отчет." + ИмяОтчета + ".Форма.ФормаОтчета";
	
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыОтчета, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Контрагент)
	
	Возврат Справочники.Контрагенты.ПараметрыДляОтчета(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПокупателей()
	
	КлючВарианта = "ЗадолженностьПокупателей";  
	
	ИмяОтчета = "ЗадолженностьПокупателей";

	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);   
	
КонецПроцедуры  

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПоставщикам()
		
	КлючВарианта = "ЗадолженностьПоставщикам";  
	
	ИмяОтчета = "ЗадолженностьПоставщикам";      
	
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериод()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции
 
#КонецОбласти


