#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьМассивПодчиненныхКонтрагентов(ГоловнойКонтрагент) Экспорт
	
	МассивКонтрагентов	= Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнойКонтрагент",	ГоловнойКонтрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|	И Контрагенты.Ссылка <> &ГоловнойКонтрагент
	|	И НЕ Контрагенты.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	МассивКонтрагентов	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция ПолучитьРозничногоКонтрагента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа = ЛОЖЬ
	|	И Контрагенты.ИдентификационныйКодЛичности = ""000000000000""
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.следующий();
		Возврат Выборка.Ссылка;
	Иначе
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ИдентификационныйКодЛичности = "000000000000";
		НовыйКонтрагент.Наименование = "Розничная выручка";
		НовыйКонтрагент.НаименованиеПолное = "Розничная выручка";
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.РНН = "000000000000";
		НовыйКонтрагент.Записать();
		
		Возврат НовыйКонтрагент.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентовПоНаименованиюБИНилиРНН(Наименование, БИН, РНН) Экспорт 
	
	МассивКонтрагентов	= Новый Массив;
	
	Если НЕ (ЗначениеЗаполнено(Наименование) ИЛИ ЗначениеЗаполнено(БИН) ИЛИ ЗначениеЗаполнено(РНН)) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БИН", БИН);
	Запрос.УстановитьПараметр("ИскатьПоБИН", ЗначениеЗаполнено(БИН));
	Запрос.УстановитьПараметр("РНН", РНН);
	Запрос.УстановитьПараметр("ИскатьПоРНН", ЗначениеЗаполнено(РНН));
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	ИЛИ (&ИскатьПоБИН И Контрагенты.ИдентификационныйКодЛичности = &БИН)
	|	ИЛИ (&ИскатьПоРНН И Контрагенты.РНН = &РНН)
	|	И НЕ Контрагенты.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	МассивКонтрагентов	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

//Функция определяет наличие дублей у контрагента.
// 
// Параметры:
//  БИН_ИИН - БИН / ИИН проверяемого контрагента, Тип - Строка(12)
//  Ссылка - Сам проверяемый контрагент, Тип - СправочникСсылка.Контрагенты
//
Функция ПроверитьДублиСправочникаКонтрагентыПоБИН_ИИНилиРНН(Знач БИН_ИИНилиРНН, Знач Ссылка, ПроверяемыеДанные = "БИН_ИИН") Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ИмяРеквизита = "РНН";
	Если ПроверяемыеДанные = "БИН_ИИН" Тогда 
		ИмяРеквизита = "ИдентификационныйКодЛичности";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.Ссылка = &Ссылка
	|	И Контрагенты." + ИмяРеквизита + " = &БИН_ИИНилиРНН";
	
	Запрос.УстановитьПараметр("БИН_ИИНилиРНН", СокрЛП(БИН_ИИНилиРНН));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДублей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		Дубли.Добавить(ВыборкаДублей.Ссылка);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции

Функция ВозможноИспользованиеКонтрагента(Контрагент, Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК КонтрагентЯвляетсяЮрЛицом
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не является физическим лицом, расчет налогов при поступлении активов и услуг для него не предусмотрен!'"), СокрЛП(Контрагент));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗадолженностьПоКонтрагенту(Контрагент, Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗадолженностьПокупателя", 0);
	Результат.Вставить("ЗадолженностьПоставщику", 0);
	Результат.Вставить("АвансПокупателя", 0);  
	Результат.Вставить("АвансПоставщику", 0); 
	Результат.Вставить("НеОплаченныеСчетаПокупателемСумма", 0);
	Результат.Вставить("НеОплаченныеСчетаПокупателемКоличество", 0);
	Результат.Вставить("НеоплаченныеСчетаПоставщиковСумма", 0);
	Результат.Вставить("НеоплаченныеСчетаПоставщиковКоличество", 0); 
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПокупателю.Ссылка) КАК НеОплаченныеСчетаПокупателемКоличество,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Валюты.Кратность, 0) = 0
	|				ТОГДА СчетНаОплатуПокупателю.СуммаДокумента
	|			ИНАЧЕ СчетНаОплатуПокупателю.СуммаДокумента * Валюты.Курс / Валюты.Кратность
	|		КОНЕЦ) КАК НеОплаченныеСчетаПокупателемСумма
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = СчетНаОплатуПокупателю.Ссылка)
	|			И (СтатусыДокументов.Организация = СчетНаОплатуПокупателю.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК Валюты
	|		ПО СчетНаОплатуПокупателю.ВалютаДокумента = Валюты.Валюта
	|ГДЕ
	|	СчетНаОплатуПокупателю.Контрагент = &Контрагент
	|	И ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)) В (&СтатусыНеоплаченныхСчетов)
	|   И СчетНаОплатуПокупателю.Организация В(&СписокОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Ссылка) КАК НеоплаченныеСчетаПоставщиковКоличество,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Валюты.Кратность, 0) = 0
	|				ТОГДА СчетНаОплатуПоставщика.СуммаДокумента
	|			ИНАЧЕ СчетНаОплатуПоставщика.СуммаДокумента * Валюты.Курс / Валюты.Кратность
	|		КОНЕЦ) КАК НеоплаченныеСчетаПоставщиковСумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = СчетНаОплатуПоставщика.Ссылка)
	|			И (СтатусыДокументов.Организация = СчетНаОплатуПоставщика.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК Валюты
	|		ПО СчетНаОплатуПоставщика.ВалютаДокумента = Валюты.Валюта
	|ГДЕ
	|	СчетНаОплатуПоставщика.Контрагент = &Контрагент
	|	И ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)) В (&СтатусыНеоплаченныхСчетов)
	|	И СчетНаОплатуПоставщика.Организация В(&СписокОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПоставщика.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&СписокСчетовСПокупателями)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьПокупателя,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&СписокСчетовСПоставщиками)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьПоставщику,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовАвансыПолученные)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансПокупателя,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовАвансыВыданные)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансПоставщику
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (&СписокСчетов),
	|			&СубконтоКонтрагентДоговор,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПокупателей)
	|					ТОГДА Остатки.ЗадолженностьПокупателя
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЗадолженностьПокупателя,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПоставщиков)
	|					ТОГДА Остатки.ЗадолженностьПоставщику
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЗадолженностьПоставщику,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПокупателей)
	|					ТОГДА Остатки.АвансПокупателя
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК АвансПокупателя,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПоставщиков)
	|					ТОГДА Остатки.АвансПоставщику
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК АвансПоставщику
	|ИЗ
	|	Остатки КАК Остатки";
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	СтатусыНеоплаченныхСчетов = Новый Массив;
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ПустаяСсылка());
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
		
	СписокДоступныхОрганизаций = БухгалтерскиеОтчеты.ПолучитьСписокДоступныхОрганизаций();
	
	ВидыДоговоровПокупателей = Новый Массив;
	ВидыДоговоровПокупателей.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем); 
	ВидыДоговоровПокупателей.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ВидыДоговоровПоставщиков = Новый Массив;
	ВидыДоговоровПоставщиков.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоровПоставщиков.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	Запрос.УстановитьПараметр("СписокСчетовСПокупателями", БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("СписокСчетовСПоставщиками", БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Истина, Истина, Истина));
	СписокСчетов = БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Истина, Истина, Истина), Истина);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);	
	Запрос.УстановитьПараметр("ВидыДоговоровПокупателей", ВидыДоговоровПокупателей);
	Запрос.УстановитьПараметр("ВидыДоговоровПоставщиков", ВидыДоговоровПоставщиков);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("СтатусыНеоплаченныхСчетов", СтатусыНеоплаченныхСчетов);   
	
	СчетаУчетаРасчетовПоАвансамПолученным = Новый Массив(); 
	СчетаУчетаРасчетовПоАвансамПолученным.Добавить(ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные); 
	СчетаУчетаРасчетовПоАвансамПолученным.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАвансыПолученные);

	Запрос.УстановитьПараметр("СписокСчетовАвансыПолученные", СчетаУчетаРасчетовПоАвансамПолученным); 
	
	СчетаУчетаРасчетовПоАвансамВыданным = Новый Массив(); 
	СчетаУчетаРасчетовПоАвансамВыданным.Добавить(ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные); 
	СчетаУчетаРасчетовПоАвансамВыданным.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАвансыВыданные);
			
	Запрос.УстановитьПараметр("СписокСчетовАвансыВыданные", СчетаУчетаРасчетовПоАвансамВыданным);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[0].Выгрузить()[0]);
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[1].Выгрузить()[0]);
	КонецЕсли; 
	
	Если Не РезультатЗапроса[3].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[3].Выгрузить()[0]);
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

// Возвращает параметры, необходимые для формирования отчета с расшифровкой по переданному контрагенту.
//
// Параметры:
//  ИмяОтчета - Строка - имя отчета, для которого формируются параметры.
//  КлючВарианта - Строка - имя ключа варианта отчета
//  Контрагент - СправочникСсылка.Контрагенты - значение отбора для формируемого отчета
//
Функция ПараметрыДляОтчета(ИмяОтчета, КлючВарианта, Контрагент) Экспорт
	
	ТекущаяДатаНаСервере = ТекущаяДатаСеанса();
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецДня(ТекущаяДатаНаСервере));  
	
	Если НЕ ИмяОтчета = "АнализНеоплаченныхСчетовПокупателям" И НЕ ИмяОтчета = "АнализНеоплаченныхСчетовПоставщиков" Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	Если ИмяОтчета = "ЗадолженностьПокупателей" ИЛИ ИмяОтчета = "ЗадолженностьПоставщикам" Тогда
		
		Группировка = Новый Массив();
		
		ГруппировкаКонтрагент = Новый Структура("Использование, Поле, Представление, ТипГруппировки",
		Истина, "Контрагент", "Контрагент", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);
		
		Группировка.Добавить(ГруппировкаКонтрагент);
		
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", Группировка); 
		
	КонецЕсли;

	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить(ИмяОтчета, ПользовательскиеНастройки);
	
	УсловияОтбора = Новый Структура();
	УсловияОтбора.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ОбщиеНастройки = Новый Структура();
	ОбщиеНастройки.Вставить("Объект", УсловияОтбора);
	ОбщиеНастройки.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ОбщиеНастройки, Новый УникальныйИдентификатор);  
	
	ЗаполнятьТиповыеНастройки = Новый Структура;
	ЗаполнятьТиповыеНастройки.Вставить("Отбор", Ложь);
	ЗаполнятьТиповыеНастройки.Вставить("Группировка", Истина);
	ЗаполнятьТиповыеНастройки.Вставить("ВыводимыеДанные", Истина);
	ЗаполнятьТиповыеНастройки.Вставить("Показатели", Истина);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно);	
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВидРасшифровки", 2);
	ПараметрыОтчета.Вставить("РежимРасшифровки", Истина);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчета.Вставить("АдресНастроек", АдресХранилища);
	ПараметрыОтчета.Вставить("ИДРасшифровки", ИмяОтчета);
	ПараметрыОтчета.Вставить("ЗаполняемыеНастройки", ЗаполнятьТиповыеНастройки);
	ПараметрыОтчета.Вставить("КлючВарианта", КлючВарианта);
	
	Если ИмяОтчета = "ЗадолженностьПокупателей" ИЛИ ИмяОтчета = "ЗадолженностьПоставщикам" Тогда	
		ПараметрыОтчета.Вставить("ПредставлениеСпискаОрганизаций"  		 , "");
		ПараметрыОтчета.Вставить("СписокСтруктурныхЕдиниц"				 , Новый СписокЗначений);
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

#КонецЕсли
