
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ПодготовитьФормуНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьДатыВвозаНаТерриториюРК();
	
	//	++кибернетика: 2024-08-08 Искендеров Алишер
		киб_ПодготовитьФормуНаСервере();
		киб_ЗаполнитьСписокМестонахождения();
	//	--кибернетика: 2024-08-08 Искендеров Алишер
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ОсновныеСредства", ПараметрыЗаписи, Объект.Ссылка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВводНачальныхОстатков"
	 ИЛИ ИмяСобытия = "Запись_ВводНачальныхОстатковОС"
	 ИЛИ ИмяСобытия = "Запись_ВозвратТоваровПоставщику"
	 ИЛИ ИмяСобытия = "Запись_ИзменениеСостоянияОС"
	 ИЛИ ИмяСобытия = "Запись_ПередачаОС"
	 ИЛИ ИмяСобытия = "Запись_ПеремещениеОС"
	 ИЛИ ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
	 ИЛИ ИмяСобытия = "Запись_ПринятиеКУчетуОС"
	 ИЛИ ИмяСобытия = "Запись_РеструктуризацияОС"
	 ИЛИ ИмяСобытия = "Запись_СписаниеОС" Тогда
		
		ОбработкаОповещенияНаСервере();
		
	КонецЕсли; 

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Организация) Тогда

		//регистр ПараметрыРасчетаТранспортногоНалога
		Если ЗаписатьТранспортныйНалог Тогда
			
			МенеджерЗаписиТН = РеквизитФормыВЗначение("МенеджерЗаписиТранспортныйНалог");
			
			МенеджерЗаписиТН.ОсновноеСредство = Объект.Ссылка;
			МенеджерЗаписиТН.Организация      = Организация;
			
			Попытка
				МенеджерЗаписиТН.Записать();
				ЗаписатьТранспортныйНалог = Ложь;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
				
		КонецЕсли;
	
		//регистр ПараметрыРасчетаЗемельногоНалога
		Если ЗаписатьЗемельныйНалог Тогда
		
			МенеджерЗаписиЗН = РеквизитФормыВЗначение("МенеджерЗаписиЗемельныйНалог");
			
			МенеджерЗаписиЗН.ОсновноеСредство = Объект.Ссылка;
			МенеджерЗаписиЗН.Организация      = Организация;
			
			Попытка
				МенеджерЗаписиЗН.Записать();
				ЗаписатьЗемельныйНалог = Ложь;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если  МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.Мотоцикл") 
		И Не ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.ЕдиницаИзмеренияНалоговойБазы) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не указана единица измерения мощности двигателя'"),,"ЕдиницаИзмеренияНалоговойБазы",, Отказ);
	КонецЕсли;

    Штрихкод = Объект.Штрихкод;
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ТипШтрихкода = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
		Если ТипШтрихкода <> "EAN13" Тогда
			Текстсообщения = НСтр("ru = 'Штрихкод ""%1"" не соответствует типу EAN13'");
			Текстсообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текстсообщения, Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Штрихкод", "Объект",Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	//	++кибернетика: 2024-08-08 Искендеров Алишер
	//киб_СписокМестонахожденияОС = ЭтаФорма.киб_СписокМестонахожденияОС;
	Для Каждого Строка из ЭтаФорма.киб_СписокМестонахожденияОС Цикл
		Если Не Строка.ЕстьЗапись Тогда
			киб_ЗаписатьВРегистрСведенияОМестонахождении(Строка.Местонахождение, Строка.Период);				
		КонецЕсли;
	КонецЦикла;
	//	--кибернетика: 2024-08-08 Искендеров Алишер               
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если  ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.НоменклатураГСВС.Форма.ФормаВыбора") Тогда
		
		УстановитьКодТНВЭД(ВыбранноеЗначение);
		ДобавитьИнформациюОНоменклатуреГСВС();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 МногострочноеПолеНачалоВыбора("НаименованиеПолное", НСтр("ru='Полное наименование'"));
КонецПроцедуры

&НаКлиенте
Процедура ИзготовительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МногострочноеПолеНачалоВыбора("Изготовитель", НСтр("ru='Изготовитель'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаводскойНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МногострочноеПолеНачалоВыбора("ЗаводскойНомер", НСтр("ru='Заводской номер'"));
КонецПроцедуры

&НаКлиенте
Процедура НомерПаспортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МногострочноеПолеНачалоВыбора("НомерПаспорта", НСтр("ru='Номер паспорта'"));
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортногоСредстваПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	УстановитьВидимостьДатыВвозаНаТерриториюРК();
	
	Если ЗначениеЗаполнено(Объект.ДатаВыпуска) И НЕ ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.ДатаВыпуска) Тогда
		МенеджерЗаписиТранспортныйНалог.ДатаВыпуска = Объект.ДатаВыпуска;
	КонецЕсли;
	
	Если МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.Мотоцикл") Тогда
		
		КодЕдиницыИзмерения = Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.НайтиПоЗначению("214");
		Если КодЕдиницыИзмерения <> Неопределено Тогда
			МенеджерЗаписиТранспортныйНалог.ЕдиницаИзмеренияНалоговойБазы = КодЕдиницыИзмерения.Значение;
		Иначе
			МенеджерЗаписиТранспортныйНалог.ЕдиницаИзмеренияНалоговойБазы = "";
		КонецЕсли;   		
	КонецЕсли;      
	
	ЗаписатьТранспортныйНалог = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСведенийПриИзменении(Элемент)
	
	ДатаСведенийПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпускаПриИзменении(Элемент)
	
	Если Элементы.ГруппаТранспортныйНалог.Видимость Тогда
		МенеджерЗаписиТранспортныйНалог.ДатаВыпуска = Объект.ДатаВыпуска;
		ЗаписатьТранспортныйНалог = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументПоступленияБУНажатие(Элемент, СтандартнаяОбработка)
	ГиперссылкаДокументНажатие(ДокументПоступленияБУ, "ПоступлениеТоваровУслуг", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка)
	ГиперссылкаДокументНажатие(ДокументПринятияКУчетуБУ, "ПринятиеКУчетуОС", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка)
	ГиперссылкаДокументНажатие(ДокументСнятоСУчетаБУ, "СписаниеОС", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоРКПриИзменении(Элемент)
	ПроизведеноПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроизводительПриИзменении(Элемент)
	СтранаПроизводительПриИзмененииНаСервере();
	ЗаписатьТранспортныйНалог = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитТранспортногоНалогаПриИзменении(Элемент)
	ЗаписатьТранспортныйНалог = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитЗемельногоНалогаПриИзменении(Элемент)
	ЗаписатьЗемельныйНалог = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И НЕ ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	ОбновитьПредставлениеЭлемента("КодСтрокиТНВЭД");
	
	УправлениеФормой(ЭтотОбъект)
    	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипКодаГСВС", ПредопределенноеЗначение("Перечисление.ТипыКодовГСВС.ТНВЭД"));
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ТекущийКодТНВЭД"	  , ?(НЕ ЗначениеЗаполнено(Объект.КодТНВЭД), Неопределено, СокрЛП(Объект.КодТНВЭД)));
	
	ОткрытьФорму("Справочник.НоменклатураГСВС.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Истина);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СоставКомплекта

&НаКлиенте
Процедура СоставКомплектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ТипДокумента = ПолучитьИмяДокументаПоСсылке(ТекущиеДанные.Документ);
		ОткрытьФорму("Документ." + ТипДокумента + ".ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Документ));
	
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Функция ПечатьОС(ПараметрыПечати) Экспорт
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("Форма") Тогда
			ДатаСведений = ПараметрыПечати.Форма.ДатаСведений;
			Организация  = ПараметрыПечати.Форма.Организация;
		КонецЕсли; 
	Иначе
		ДатаСведений = ЭтаФорма.ДатаСведений;
		Организация  = Неопределено;
	КонецЕсли;	
	
	ПараметрыПечати.ДополнительныеПараметры.Вставить("ДатаСведений", ДатаСведений);
	ПараметрыПечати.ДополнительныеПараметры.Вставить("Организация",  Организация);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПараметрыПечати.МенеджерПечати, ПараметрыПечати.Идентификатор, 
		ПараметрыПечати.ОбъектыПечати, ПараметрыПечати.Форма, ПараметрыПечати.ДополнительныеПараметры);
		
КонецФункции

&НаКлиенте
Функция ПечатьШтрихкодовОС(ПараметрыПечати) Экспорт
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("Форма") Тогда
			ДатаСведений = ПараметрыПечати.Форма.ДатаСведений;
			Организация  = ПараметрыПечати.Форма.Организация;
		КонецЕсли; 
	Иначе
		ДатаСведений = ЭтаФорма.ДатаСведений;
		Организация  = Неопределено;
	КонецЕсли;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация"	, Организация);
	ДополнительныеПараметры.Вставить("ДатаСведений"	, ДатаСведений);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОбъектыПечати"				, ПараметрыПечати.ОбъектыПечати);
	СтруктураРезультат.Вставить("Идентификатор" 			, УникальныйИдентификатор);
	СтруктураРезультат.Вставить("ДополнительныеПараметры"	, ДополнительныеПараметры);
	СтруктураРезультат.Вставить("Форма"						, ЭтаФорма);
	
	УправлениеПечатьюБККлиент.ПечатьШтрихкодовОС(СтруктураРезультат);
		
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если ЗначениеЗаполнено(Объект.Штрихкод) Тогда
		ТекстВопроса = НСтр("ru= 'Основному средству уже назначен штрихкод. Создать новый?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНовыйШтрихкод", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		Объект.Штрихкод = СформироватьШтрихкодEAN13();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНовыйШтрихкод(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ДА Тогда
		Объект.Штрихкод = СформироватьШтрихкодEAN13();
	КонецЕсли;
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура МногострочноеПолеНачалоВыбора(ИмяРеквизита, ТекстЗаголовка)
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);

	Оповещение = Новый ОписаниеОповещения("МногострочноеПолеЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Объект[ИмяРеквизита], ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура МногострочноеПолеЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		Объект[Параметры.ИмяРеквизита] = Строка;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	//обновление наименования строки ТНВЭД
	ОбновитьПредставлениеЭлемента("КодСтрокиТНВЭД");

	ДатаСведений = ТекущаяДатаСеанса(); 
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьОписания();
	УстановитьСвязьСРегистрами();
	ВывестиИнформацияОКомплектеОС();	
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ПолучитьФункциональнуюОпцию("ШтрихкодУстанавливаетсяВГлавномУзлеРИБ") Тогда // В подчиненных узлах РИБ не выполняется
			Элементы.Штрихкод.ТолькоПросмотр 	= Истина;
			Элементы.НовыйШтрихкод.Доступность 	= Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение",Метаданные.Справочники.ОсновныеСредства) ТОгда
		Элементы.Штрихкод.ТолькоПросмотр 	= Истина;
		Элементы.НовыйШтрихкод.Доступность 	= Ложь;
		Элементы.КодТНВЭД.ТолькоПросмотр 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ЗаполнитьТекстГипперссылокДокументов(Форма);
	
	Элементы = Форма.Элементы;
		
	Если Элементы.ГруппаТранспортныйНалог.Видимость Тогда
		//сначала установим видимость для всех элементов формы, как Ложь
		Элементы.ОбъемДвигателя.Видимость                        = Ложь;
		Элементы.Грузоподъемность.Видимость                      = Ложь;
		Элементы.КоличествоПосадочныхМест.Видимость              = Ложь;
		Элементы.МощностьВКиловаттах.Видимость                   = Ложь;
		Элементы.МощностьВЛошадиныхСилах.Видимость               = Ложь;
		Элементы.ПроизводствоСтранСНГ.Видимость                  = Ложь;
		Элементы.ЭксплуатацияВРКдо1апреля1999г.Видимость         = Ложь;
		Элементы.ГруппаСведенияОПроизводителе.Видимость          = Ложь;
		
		Элементы.ГруппаПараметрыТранспортногоСредстваПоНалоговойБазе.Видимость = Ложь;
		
		Если Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.ЛегковойАвтомобиль") Тогда
			Элементы.ОбъемДвигателя.Видимость                    = Истина;
			Элементы.ПроизводствоСтранСНГ.Видимость              = Истина;
			Элементы.ГруппаСведенияОПроизводителе.Видимость	     = Истина;
			
		ИначеЕсли Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.ГрузовойАвтомобиль") Тогда
			Элементы.Грузоподъемность.Видимость                  = Истина;
			Элементы.ПроизводствоСтранСНГ.Видимость              = Истина;
			
		ИначеЕсли Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.Автобус") Тогда
			Элементы.КоличествоПосадочныхМест.Видимость          = Истина;	
			                                             
		ИначеЕсли Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.Мотоцикл") Тогда			
			Элементы.ПроизводствоСтранСНГ.Видимость              					= Истина;
			Элементы.ГруппаПараметрыТранспортногоСредстваПоНалоговойБазе.Видимость = Истина;
			
		ИначеЕсли Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.ЛетательныйАппарат") 
			  ИЛИ Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав")
			  ИЛИ Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав") Тогда
			
			Элементы.МощностьВКиловаттах.Видимость               = Истина;
			Если Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.ЛетательныйАппарат")  Тогда
				Элементы.ЭксплуатацияВРКдо1апреля1999г.Видимость = Истина;
			КонецЕсли;	
			
		ИначеЕсли Форма.МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = ПредопределенноеЗначение("Перечисление.ВидыТранспортныхСредств.Катер") Тогда
			Элементы.МощностьВЛошадиныхСилах.Видимость           = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияПереченьИзъятия.Видимость         = НЕ (Элементы.ДекорацияПереченьИзъятия.Заголовок = "");
	Элементы.ДекорацияВедетсяУчетПоТоварамВС.Видимость  = НЕ (Элементы.ДекорацияВедетсяУчетПоТоварамВС.Заголовок = "");
	Элементы.ДекорацияУникальныйТовар.Видимость         = НЕ (Элементы.ДекорацияУникальныйТовар.Заголовок = "");
	Элементы.ДекорацияТоварДвойногоНазначения.Видимость = НЕ (Элементы.ДекорацияТоварДвойногоНазначения.Заголовок = "");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписания()
  	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();	
	
	// Данные для заполнения закладки Бухгалтерский учет
	// Поиск организации, по которой основное средство отражалось в регл. учете
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	| ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	| РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекОрганизация = РезультатЗапроса.Выгрузить()[0].Организация;
		Организация = ТекОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		
		// Данные для заполнения закладки "Бухгалтерский учет"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
		Запрос.УстановитьПараметр("СубконтоОС",       ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|           ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления) КАК СпособПоступленияБУ,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации) КАК СпособАмортизацииБУ,
		|           ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
		|           ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ,
		|           МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
		|           МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемРаботБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК ПроцентГодовойАмортизацииБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэфУскоренияБУ,
		|           ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ,
		|           СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК НаправленияАмортизацииБУ,
		|           СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаСтоимостиБУ,
		|           СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетУчетаАмортизацииБУ,
		|			ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК ТекущаяСтоимостьБУ,
		|			ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК ТекАмортизацияБУ,
		|           СостоянияОС.Состояние КАК ТекущееСостояниеБУ
		|ИЗ
		|           РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&ДатаСведений, , &СубконтоОС, Организация = &Организация И Субконто1 = &ОсновноеСредство) КАК СтоимостьОС_БУ
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&ДатаСведений, , &СубконтоОС, Организация = &Организация И Субконто1 = &ОсновноеСредство) КАК АмортизацияОС_БУ
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
		|                       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|                                              СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|                                              СостоянияОС.Состояние КАК Состояние
		|                                   ИЗ
		|                                              РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		|														&ДатаСведений,
		|														ОсновноеСредство = &ОсновноеСредство) КАК СостоянияОС ) КАК СостоянияОС
		|                         ПО СостоянияОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
			
			ТекущаяСтоимостьБУ          = ВыборкаЗаписей.ТекущаяСтоимостьБУ;
			ТекАмортизацияБУ            = ВыборкаЗаписей.ТекАмортизацияБУ;
			ИнвентарныйНомер            = ВыборкаЗаписей.ИнвентарныйНомер;
			СпособПоступленияБУ         = ВыборкаЗаписей.СпособПоступленияБУ;
			СпособАмортизацииБУ         = ВыборкаЗаписей.СпособАмортизацииБУ;
			ПервоначальнаяСтоимостьБУ   = ВыборкаЗаписей.ПервоначальнаяСтоимостьБУ;
			ПараметрВыработкиБУ         = ВыборкаЗаписей.ПараметрВыработкиБУ;
			ЕдиницаПараметраВыработкиБУ = ВыборкаЗаписей.ЕдиницаПараметраВыработкиБУ;
			МОЛБУ                       = ВыборкаЗаписей.МОЛБУ;
			ПодразделениеБУ             = ВыборкаЗаписей.ПодразделениеБУ;
			СрокИспользованияБУ         = ВыборкаЗаписей.СрокИспользованияБУ;
			ОбъемРаботБУ                = ВыборкаЗаписей.ОбъемРаботБУ;
			ПроцентГодовойАмортизацииБУ = ВыборкаЗаписей.ПроцентГодовойАмортизацииБУ;
			КоэфУскоренияБУ             = ВыборкаЗаписей.КоэфУскоренияБУ;
			ГодовойГрафикБУ             = ВыборкаЗаписей.ГодовойГрафикБУ;
			НаправленияАмортизацииБУ    = ВыборкаЗаписей.НаправленияАмортизацииБУ;
			СчетУчетаСтоимостиБУ        = ВыборкаЗаписей.СчетУчетаСтоимостиБУ;
			СчетУчетаАмортизацииБУ      = ВыборкаЗаписей.СчетУчетаАмортизацииБУ;
			СостояниеБУ                 = ВыборкаЗаписей.ТекущееСостояниеБУ;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ПоследнееСостояние = ПолучитьПоследнееСостояниеОС(ДатаСведений, Объект.Ссылка, ТекОрганизация);
	СостояниеБУ        = ПоследнееСостояние.СостояниеОС;
	
	УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, ТекОрганизация, Перечисления.ВидыСостоянийОС.Поступило,     ДатаСведений, ДокументПоступленияБУ,    ПоступилоБУ);
	УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, ТекОрганизация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ДатаСведений, ДокументПринятияКУчетуБУ, ПринятоКУчетуБУ);
	УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, ТекОрганизация, Перечисления.ВидыСостоянийОС.СнятоСУчета,   ДатаСведений, ДокументСнятоСУчетаБУ,    СнятоСУчетаБУ);
	
	ЗаполнитьТекстГипперссылокДокументов(ЭтотОбъект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Справочник ""основные средства"" (заполнение описания)", ВремяНачалаЗамера);
	
КонецПроцедуры

 &НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстГипперссылокДокументов(Форма) Экспорт
		
	Если (Форма.ДокументПоступленияБУ <> "" И Форма.ДокументПоступленияБУ <> Неопределено) И ЗначениеЗаполнено(Форма.ДокументПоступленияБУ) Тогда
		Форма.ГиперссылкаДокументПоступленияБУ = Строка(Форма.ДокументПоступленияБУ);
	Иначе
		Форма.ГиперссылкаДокументПоступленияБУ = НСтр("ru='Ввести документ поступления'");
		Форма.ПоступилоБУ = 0;
	КонецЕсли;
	
	Если (Форма.ДокументПринятияКУчетуБУ <> "" И Форма.ДокументПринятияКУчетуБУ <> Неопределено) И ЗначениеЗаполнено(Форма.ДокументПринятияКУчетуБУ) Тогда
		Форма.ГиперссылкаДокументПринятияКУчетуБУ = Строка(Форма.ДокументПринятияКУчетуБУ);
	Иначе
		Форма.ГиперссылкаДокументПринятияКУчетуБУ = НСтр("ru='Ввести документ принятия к учету'");
		Форма.ПринятоКУчетуБУ = 0;
	КонецЕсли;

	Если (Форма.ДокументСнятоСУчетаБУ <> "" И Форма.ДокументСнятоСУчетаБУ <> Неопределено) И ЗначениеЗаполнено(Форма.ДокументСнятоСУчетаБУ) Тогда
		Форма.ГиперссылкаДокументСнятияСУчетаБУ = Строка(Форма.ДокументСнятоСУчетаБУ);
	Иначе
		Форма.ГиперссылкаДокументСнятияСУчетаБУ = НСтр("ru='Ввести документ списания'");
		Форма.СнятоСУчетаБУ = 0;
	КонецЕсли;    
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнееСостояниеОС(Период, ОсновноеСредство, Организация) Экспорт

	ДанныеОСостоянии = Новый Структура("СостояниеОС, Дата, Документ, Событие, НазваниеДокумента, НомерДокумента");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ОС",          ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	СостоянияОСОрганизаций.Регистратор КАК Документ,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Состояние КАК СостояниеОС,
	|	СобытияОСОрганизаций.Событие,
	|	СобытияОСОрганизаций.НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация 
	|			И ОсновноеСредство = &ОС) КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СостоянияОСОрганизаций.Регистратор = СобытияОСОрганизаций.Регистратор 
	|			И СостоянияОСОрганизаций.Период = СобытияОСОрганизаций.Период 
	|			И СостоянияОСОрганизаций.Организация = СобытияОСОрганизаций.Организация 
	|			И СостоянияОСОрганизаций.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоков = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДоков.Следующий() Тогда
		
		ДанныеОСостоянии.Вставить("СостояниеОС"		  , ВыборкаДоков.СостояниеОС);
		ДанныеОСостоянии.Вставить("Дата"			  , ВыборкаДоков.Дата);
		ДанныеОСостоянии.Вставить("Документ"		  , ВыборкаДоков.Документ);
		ДанныеОСостоянии.Вставить("Событие"			  , ВыборкаДоков.Событие);
		ДанныеОСостоянии.Вставить("НазваниеДокумента" , ВыборкаДоков.НазваниеДокумента);
		ДанныеОСостоянии.Вставить("НомерДокумента"	  , ВыборкаДоков.НомерДокумента);

	КонецЕсли;
		
	Возврат ДанныеОСостоянии;
	
КонецФункции

&НаСервере
Процедура УстановитьСвязьСРегистрами()
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();	
	
	ЗаписатьЗемельныйНалог    = Ложь;
	ЗаписатьТранспортныйНалог = Ложь;
	
	// Проверим являлся ли объект объектом земельного или транспортного налогов
	Запрос = Новый Запрос("ВЫБРАТЬ	                      
	|	СУММА(ОбъектыНалогообложения.НачислятьТранспортныйНалог) КАК НачислятьТранспортныйНалог,
	|	СУММА(ОбъектыНалогообложения.НачислятьЗемельныйНалог) КАК НачислятьЗемельныйНалог
	|ИЗ
	|	(ВЫБРАТЬ	                      
	|		ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектыТранспортногоНалога.НачислятьНалог), 0) как НачислятьТранспортныйНалог,
	|		0 как НачислятьЗемельныйНалог
	|	ИЗ
	|		РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	|	ГДЕ
	|		ОбъектыТранспортногоНалога.ОбъектНалогообложения = &ОбъектНалогообложения	                      
	|		И ОбъектыТранспортногоНалога.НачислятьНалог = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ	                      
	|		0,
	|		ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектыЗемельногоНалога.НачислятьНалог), 0)
	|	ИЗ
	|		РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	|	ГДЕ
	|		ОбъектыЗемельногоНалога.ОбъектНалогообложения = &ОбъектНалогообложения	
	|		И ОбъектыЗемельногоНалога.НачислятьНалог = ИСТИНА) КАК ОбъектыНалогообложения");
	
	Запрос.УстановитьПараметр("ОбъектНалогообложения", Объект.Ссылка);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	//Проверяем является ли основное средство, объектом транспортного налога	 	 
	 Если Выборка.НачислятьТранспортныйНалог > 0 Тогда
		 Элементы.ГруппаТранспортныйНалог.Видимость = Истина;
		 ПрочитатьПараметрыНалога("ТранспортныйНалог");
	 Иначе
		 Элементы.ГруппаТранспортныйНалог.Видимость = Ложь;
	 КонецЕсли;
	 
	 //Проверяем является ли основное средство, объектом земельного налога	 
	 Если Выборка.НачислятьЗемельныйНалог > 0 Тогда
		 Элементы.ГруппаЗемельныйНалог.Видимость = Истина;
		 ПрочитатьПараметрыНалога("ЗемельныйНалог");
	 Иначе
		 Элементы.ГруппаЗемельныйНалог.Видимость = Ложь;
	 КонецЕсли;	 
	 
	 ОценкаПроизводительности.ЗакончитьЗамерВремени("Справочник ""основные средства"" (связь с регистрами)", ВремяНачалаЗамера);
	 
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыНалога(Налог)
	
	Если Не Параметры.Ключ.Пустая() Тогда
		
		Если Налог = "ТранспортныйНалог" Тогда
			//регистр ПараметрыРасчетаТранспортногоНалога
			МенеджерЗаписиТН = РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.СоздатьМенеджерЗаписи();
			МенеджерЗаписиТН.Организация      = Организация;
			МенеджерЗаписиТН.ОсновноеСредство = Объект.Ссылка;
			МенеджерЗаписиТН.Прочитать();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиТранспортныйНалог, МенеджерЗаписиТН);
			
			Если МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель.Код = "398" Тогда
				ПроизводствоРК = Истина;
			Иначе
				ПроизводствоРК = Ложь;
			КонецЕсли;
			
			СписокКодовЕдиницИзмеренияТС = ПолучитьСписокКодовЕдиницИзмеренияТС();
			Для Каждого ЕдиницаИзмеренияТС Из СписокКодовЕдиницИзмеренияТС Цикл
				Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.Добавить(ЕдиницаИзмеренияТС.Значение, ЕдиницаИзмеренияТС.Представление);
			КонецЦикла;

		Иначе
			//регистр ПараметрыРасчетаЗемельногоНалога
			МенеджерЗаписиЗН = РегистрыСведений.ПараметрыРасчетаЗемельногоНалога.СоздатьМенеджерЗаписи();
			МенеджерЗаписиЗН.Организация      = Организация;
			МенеджерЗаписиЗН.ОсновноеСредство = Объект.Ссылка;
			МенеджерЗаписиЗН.Прочитать();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиЗемельныйНалог, МенеджерЗаписиЗН);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиИнформацияОКомплектеОС()
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();	
	
	// сначала очистим старые данные
	СоставКомплекта.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставОССрезПоследних.ОсновноеСредство,
	|	СоставОССрезПоследних.Период,
	|	СоставОССрезПоследних.СостояниеВСоставеОС,
	|	СоставОССрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.СоставОС КАК СоставОССрезПоследних
	|ГДЕ
	|	ВСоставеОС = &ОсновноеСредство
	|	И Период <= &ДатаСведений 	
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не	РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();		
		Элементы.СоставКомплекта.Видимость = Истина;
		Пока Выборка.Следующий() Цикл
			СтрокаОС = СоставКомплекта.Добавить();
			СтрокаОС.Документ            = Выборка.Регистратор;
			СтрокаОС.ОсновноеСредство    = Выборка.ОсновноеСредство;
			СтрокаОС.СостояниеВКомплекте = Выборка.СостояниеВСоставеОС;
			СтрокаОС.Период              = Выборка.Период;			
		КонецЦикла;
		
		ТекстВСостав = НСтр("ru='Состав комплекта основного средства - %1'");
		ТекстВСостав = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВСостав, Объект.Наименование);			
		Элементы.ВСоставеОС.Заголовок = ТекстВСостав;
		
	Иначе
		Элементы.СоставКомплекта.Видимость = Ложь;
	КонецЕсли;  
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставОССрезПоследних.ВСоставеОС,
	|	СоставОССрезПоследних.СостояниеВСоставеОС
	|ИЗ
	|	РегистрСведений.СоставОС.СрезПоследних(
	|		&ДатаСведений,
	|		ОсновноеСредство = &ОсновноеСредство
	|) КАК СоставОССрезПоследних";
	
	РезультатЗапроса1 = Запрос.Выполнить();
	СостояниеВСоставе = "";
	Если Не	РезультатЗапроса1.Пустой() Тогда
		
		Выборка = РезультатЗапроса1.Выбрать();
		Выборка.Следующий();
		СостояниеВСоставе = Выборка.СостояниеВСоставеОС;
		
		Если СостояниеВСоставе = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав Тогда
			ВСоставеОС = Выборка.ВСоставеОС;
			Элементы.ВСоставеОС.Заголовок = НСтр("ru='Входит в состав комплекта ОС:'");
			Элементы.ВСоставеОС.Видимость = Истина;
		Иначе
			Элементы.ВСоставеОС.Видимость = Ложь;
		КонецЕсли;	
		
	Иначе
		Элементы.ВСоставеОС.Видимость = Ложь;
	КонецЕсли;     
	
	Если РезультатЗапроса.Пустой() И (РезультатЗапроса1.Пустой() Или СостояниеВСоставе = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) Тогда
		Элементы.ВСоставеОС.Заголовок = НСтр("ru='Не участвует в комплектации ОС'");
	КонецЕсли;                   	
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Справочник ""основные средства"" (заполнение информации о комплекте)", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДатыВвозаНаТерриториюРК(КодСтраны = "")
	
	Если Не ЗначениеЗаполнено(КодСтраны) И ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель) Тогда
		КодСтраны = Строка(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель, "Код").Код);
	КонецЕсли;
	
	ВидимостьДатыВвозаНаТерриториюРК = (МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль
										И Не (МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или КодСтраны = "398"));
			
	Элементы.ДатаВвозаНаТерриториюРК.Видимость = ВидимостьДатыВвозаНаТерриториюРК;
	
КонецПроцедуры

&НаСервере
Процедура ДатаСведенийПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	ЗаполнитьОписания();
    ВывестиИнформацияОКомплектеОС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяДокументаПоСсылке(СсылкаНаДокумент)
	Возврат СсылкаНаДокумент.Метаданные().Имя;	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаДокументНажатие(ЭлементДляПроверки, ВидДокумента, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЭлементДляПроверки) И Не Параметры.Ключ.Пустая() Тогда
			
		Форма = ПолучитьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
		Форма.Модифицированность = Истина;
		Форма.Открыть();
		
	ИначеЕсли ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
		
		ТипДокумента = ПолучитьИмяДокументаПоСсылке(ЭлементДляПроверки);
		
		ОткрытьФорму("Документ." + ТипДокумента + ".ФормаОбъекта", Новый Структура("Ключ", ЭлементДляПроверки));
	Иначе
		ТекстСообщения = НСтр("ru='Необходимо записать основное средство'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроизведеноПриИзмененииНаСервере()
		
	Если ПроизводствоРК = 1 Тогда
		МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан;
		МенеджерЗаписиТранспортныйНалог.ДатаВвозаНаТерриториюРК = Дата(1,1,1);
		Модифицированность = Истина;
	Иначе 
		
		КодСтраны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель, "Код").Код;
		
		Если ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель) И	
			(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или КодСтраны = "398") Тогда
		
			МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.ПустаяСсылка();
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьТранспортныйНалог = Истина;
					
	УстановитьВидимостьДатыВвозаНаТерриториюРК();
	
КонецПроцедуры 

&НаСервере
Процедура СтранаПроизводительПриИзмененииНаСервере()
	
	КодСтраны = "";
	Если ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель) Тогда
		КодСтраны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель, "Код").Код;
	КонецЕсли;

	//контроль соответствия переключателя и значения страны-производителя
	Если МенеджерЗаписиТранспортныйНалог.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или КодСтраны = "398" Тогда
		ПроизводствоРК = 1;
		МенеджерЗаписиТранспортныйНалог.ДатаВвозаНаТерриториюРК = Дата(1,1,1);
	Иначе
		ПроизводствоРК = 0;
	КонецЕсли;	
	
	УстановитьВидимостьДатыВвозаНаТерриториюРК(КодСтраны);    
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	ЗаполнитьОписания();
	ЗаполнитьТекстГипперссылокДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
	 	ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьСписокКодовЕдиницИзмеренияТС()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", НСтр("ru='л. с.'"));
	Список.Добавить("214", НСтр("ru='кВт'"));
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКодовЕдиницИзмеренияТС()

&НаКлиенте
Процедура МощностьВКиловаттахПоНалоговойБазеПриИзменении(Элемент)
	ЗаписатьТранспортныйНалог = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНалоговойБазыПриИзменении(Элемент)
	ЗаписатьТранспортныйНалог = Истина;   
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	
	Возврат ПодключаемоеОборудованиеБКВызовСервера.СформироватьШтрихкод();
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "КодСтрокиТНВЭД" Тогда
		
		Если ПустаяСтрока(СтрЗаменить(Объект.КодТНВЭД, ".", "")) Тогда
			Элементы.ДекорацияРасшифровкаКодСтрокиТНВЭД.Заголовок = НСтр("ru ='<не указано>'");
			Элементы.ДекорацияВедетсяУчетПоТоварамВС.Заголовок = "";
			Элементы.ДекорацияПереченьИзъятия.Заголовок = "";
			Элементы.ДекорацияУникальныйТовар.Заголовок = "";
			Элементы.ДекорацияТоварДвойногоНазначения.Заголовок = "";
		Иначе
			ДобавитьИнформациюОНоменклатуреГСВС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнформациюОНоменклатуреГСВС() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("КодТНВЭД", Объект.КодТНВЭД);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакТовараДвойногоНазначения КАК ПризнакТовараДвойногоНазначения,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакУникальногоТовара КАК ПризнакУникальногоТовара,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ПризнакПеречняИзьятий,
		|	СпрНоменклатураГСВС.КодГСВС КАК КодТНВЭД,
		|	СпрНоменклатураГСВС.ПолноеНаименованиеRu КАК ПолноеНаименование
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК СпрНоменклатураГСВС
		|		ПО СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС = СпрНоменклатураГСВС.Ссылка
		|ГДЕ
		|	СпрНоменклатураГСВС.КодГСВС = &КодТНВЭД
		|	И СпрНоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПризнакУчетаНаВиртуальномСкладе Тогда
			Элементы.ДекорацияВедетсяУчетПоТоварамВС.Заголовок = НСтр("ru ='Товар ВС;'");
		Иначе
			Элементы.ДекорацияВедетсяУчетПоТоварамВС.Заголовок = "";
		КонецЕсли;
		Если Выборка.ПризнакПеречняИзьятий Тогда
			Элементы.ДекорацияПереченьИзъятия.Заголовок = НСтр("ru ='Товар входит в перечень изъятий;'");
		Иначе
			Элементы.ДекорацияПереченьИзъятия.Заголовок = "";
		КонецЕсли;
		Если Выборка.ПризнакУникальногоТовара Тогда
			Элементы.ДекорацияУникальныйТовар.Заголовок = НСтр("ru ='Уникальный товар'");
		Иначе
			Элементы.ДекорацияУникальныйТовар.Заголовок = "";
		КонецЕсли;
		Если Выборка.ПризнакТовараДвойногоНазначения Тогда
			Элементы.ДекорацияТоварДвойногоНазначения.Заголовок = НСтр("ru ='Экспортный контроль'");
		Иначе
			Элементы.ДекорацияТоварДвойногоНазначения.Заголовок = "";
		КонецЕсли;
		Если ПустаяСтрока(Выборка.ПолноеНаименование) Тогда
			Элементы.ДекорацияРасшифровкаКодСтрокиТНВЭД.Заголовок = СтрШаблон(НСтр("ru ='строка с кодом %1 не найдена.'"),СокрЛП(Объект.КодТНВЭД));
		Иначе
			Элементы.ДекорацияРасшифровкаКодСтрокиТНВЭД.Заголовок = Выборка.ПолноеНаименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодТНВЭД(НомеклатураГСВС)
	
	Объект.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомеклатураГСВС, "КодГСВС");
	
КонецПроцедуры


//	++кибернетика: 2024-08-08 Искендеров Алишер - добавление реквизитов формы
&НаСервере
Процедура киб_ПодготовитьФормуНаСервере()

	//страница Местонахождения
	НоваяГруппа = ЭтаФорма.Элементы.Вставить("киб_ГруппаМестонахождениеОС", Тип("ГруппаФормы"),Элементы.Страницы, Элементы.ГруппаДополнительныеРеквизиты);
	НоваяГруппа.Заголовок = "Местонахождение ОС";
	НоваяГруппа.Вид = ВидГруппыФормы.Страница;
	//НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	НоваяГруппа.ОтображатьЗаголовок = Истина; 
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	//Создание реквизитов
	ДобавляемыеРеквизиты = Новый Массив; //Определяем массив добавляемых реквизитов
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("РегистрСведенийНаборЗаписей.киб_СведенияОМестонахожденииОС"));
	НовыйРеквизит = Новый РеквизитФормы("киб_СписокМестонахожденияОС", Новый ОписаниеТипов(МассивТипов));
	МассивТипов.Очистить();
	НовыйРеквизит.Имя = "киб_СписокМестонахожденияОС";
	НовыйРеквизит.Заголовок = "Местонахождение ОС";
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЕстьЗапись", Новый ОписаниеТипов("Булево"));
	НовыйРеквизит.Имя = "ЕстьЗапись";
	НовыйРеквизит.Заголовок = "Есть запись";
	НовыйРеквизит.Путь = "киб_СписокМестонахожденияОС";
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты); //Применяем реквизиты
	
	//Добавление набора записей Местонахождения
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("киб_СписокМестонахожденияОС", Тип("ТаблицаФормы"), Элементы.киб_ГруппаМестонахождениеОС);
	НовыйЭлемент.ПутьКДанным = "киб_СписокМестонахожденияОС";
	НовыйЭлемент.УстановитьДействие("ПередНачаломДобавления", "киб_СписокМестонахожденияПередНачаломДобавления");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "киб_СписокМестонахожденияПриИзменении");
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("киб_СписокМестонахожденияОСПериод", Тип("ПолеФормы"), Элементы.киб_СписокМестонахожденияОС);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "киб_СписокМестонахожденияОС.Период";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("киб_СписокМестонахожденияОСМестонахождение", Тип("ПолеФормы"), Элементы.киб_СписокМестонахожденияОС);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "киб_СписокМестонахожденияОС.Местонахождение";
	
КонецПроцедуры
//	--кибернетика: 2024-08-08 Искендеров Алишер

//	++кибернетика: 2024-08-08 Искендеров Алишер - работа с регистром киб_СведенияОМестонахожденииОС
&НаКлиенте
Процедура киб_СписокМестонахожденияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Параметры.Ключ.Пустая() Тогда
		Отказ = Истина;
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = НСтр("ru = 'Объект не записан. Перед добавлением сведений о местонахождении необходимо записать объект. Выполнить запись?'");
		Оповещение = Новый ОписаниеОповещения("киб_ПослеЗакрытияВопросаОЗаписиОбъекта", ЭтотОбъект, Новый Структура("Действие", "ДобавитьМестонахождения"));
	    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура киб_СписокМестонахожденияПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры


&НаКлиенте
Процедура киб_ПослеЗакрытияВопросаОЗаписиОбъекта(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;                                     
		
КонецПроцедуры

&НаСервере
Процедура киб_ЗаполнитьСписокМестонахождения()

	// СведенияОМестонахожденииОС
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	киб_СведенияОМестонахожденииОС.Период КАК Период,
		|	киб_СведенияОМестонахожденииОС.ОсновноеСредство КАК ОсновноеСредство,
		|	киб_СведенияОМестонахожденииОС.Местонахождение КАК Местонахождение,
		|	ИСТИНА КАК ЕстьЗапись
		|ИЗ
		|	РегистрСведений.киб_СведенияОМестонахожденииОС КАК киб_СведенияОМестонахожденииОС
		|ГДЕ
		|	киб_СведенияОМестонахожденииОС.ОсновноеСредство = &ОсновноеСредство";
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ЭтаФорма.киб_СписокМестонахожденияОС.Загрузить(РезультатЗапроса.Выгрузить());
		ЭтаФорма.киб_СписокМестонахожденияОС.Сортировать("Период");	
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура киб_ЗаписатьВРегистрСведенияОМестонахождении(Местонахождение, Период)
	
	МенеджерЗаписи = РегистрыСведений.киб_СведенияОМестонахожденииОС.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОсновноеСредство = Объект.Ссылка;
	МенеджерЗаписи.Местонахождение = Местонахождение;
	МенеджерЗаписи.Период = Период;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры
//	--кибернетика: 2024-08-08 Искендеров Алишер               
