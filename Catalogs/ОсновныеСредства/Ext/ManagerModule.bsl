#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ВыполнитьСозданиеОбъектов(Параметры, АдресХранилища) Экспорт
	
	ДанныеЗаполнения = Параметры.ПараметрыВыполнения;
	
	НачальныйКод = ДанныеЗаполнения.НачальныйКод;
	Количество   = ДанныеЗаполнения.Количество;    	
	                             	
	НачатьТранзакцию();
	
	ОшибкаТранзакции = Ложь;
	
	Для НомерЭлемента = 1 По Количество Цикл
		
		НовыйЭлемент     = Справочники.ОсновныеСредства.СоздатьЭлемент();
		НовыйКод         = УвеличитьКод(НачальныйКод, НомерЭлемента - 1);
		НовыйЭлемент.Код = НовыйКод;
				
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДанныеЗаполнения);
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка: не удалось записать элемент справочника с кодом %1! %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НовыйКод, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 				 
			ОшибкаТранзакции = Истина;
			Прервать;							 
		КонецПопытки;
		
	КонецЦикла;

	Если ОшибкаТранзакции Тогда 
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru='Групповое создание элементов справочника не выполнено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция УвеличитьКод(ИсходныйКод, Шаг = 1) Экспорт
	
	СтроковаяЧасть1 = ""; // строковая часть, располагающаяся перед числовой частью кода
	ЧисловаяЧасть   = ""; // числовая часть кода, которая, собственно, и увеличивается
	СтроковаяЧасть2 = ""; // строковая часть, располагающаяся после числовой части кода
	
	// Получение числовой части исходного кода
	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ИсходныйКод);
	
	Если НЕ ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
		Возврат "";
	КонецЕсли;
	
	// Поиск позиций начала и окончания числовой части
	НачалоЧисловойЧасти    = Найти(ИсходныйКод, ЧисловаяЧасть);
	ОкончаниеЧисловойЧасти = НачалоЧисловойЧасти + СтрДлина(ЧисловаяЧасть) - 1;
	
	// Выделение строковых частей
	Если НачалоЧисловойЧасти > 1 Тогда // числовая часть начинается не с первого символа исходного кода
		СтроковаяЧасть1 = Лев(ИсходныйКод, НачалоЧисловойЧасти - 1);
	КонецЕсли;
	
	Если ОкончаниеЧисловойЧасти < СтрДлина(ИсходныйКод) Тогда // числовая часть заканчивается не на последнем символе исходного кода
		СтроковаяЧасть2 = Сред(ИсходныйКод, ОкончаниеЧисловойЧасти + 1);
	КонецЕсли;

	// Формирование новой числовой части
	НоваяЧисловаяЧасть = Формат(Макс(1, Число(ЧисловаяЧасть) + Шаг), "ЧЦ=" + СокрЛП(СтрДлина(ЧисловаяЧасть)) + "; ЧВН=; ЧДЦ=0; ЧГ=0");
	
	// Сборка нового кода
	НовыйКод = СтроковаяЧасть1 + НоваяЧисловаяЧасть + СтроковаяЧасть2;
	
	Возврат НовыйКод;
	
КонецФункции

Функция ПолучитьЧисловуюЧасть(ИсходнаяСтрока) Экспорт
	
	ЧисловаяЧасть = "";
	
	Для Позиция = 1 По СтрДлина(ИсходнаяСтрока) Цикл
	
		Символ = Сред(ИсходнаяСтрока, Позиция, 1);
		
		// Если символ = цифра, включить его в числовую часть
		Если Найти("0123456789", Символ) > 0 Тогда
			ЧисловаяЧасть = ЧисловаяЧасть + Символ; 
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка, существует ли числовая часть
	Если СтрДлина(ЧисловаяЧасть) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЧисловаяЧасть;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ДА-2
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ОсновныеСредства";
	КомандаПечати.Идентификатор = "ДА2";
	КомандаПечати.Представление = НСтр("ru = 'Форма ДА-2'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	КомандаПечати.Обработчик = "Форма.ПечатьОС";
	
	// Штрихкода ОС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "Форма.ПечатьШтрихкодовОС";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ШтрихкодаОС";
	КомандаПечати.Представление = НСтр("ru = 'Штрихкоды ОС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 100;

		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать ДА2
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДА2");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДА2",
			НСтр("ru = 'Форма ДА-2"),
			ПечатьДА2(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"ОбщиеМакеты.ПФ_MXL_ДА2");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДА2(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") 
		И ПараметрыПечати.Свойство("ДатаСведений")
		И  ПараметрыПечати.Свойство("Организация") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
		Организация  = ПараметрыПечати.Организация;
	Иначе
		ДатаСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
		Организация  = Неопределено;
	КонецЕсли;
			
	Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабДок = Новый ТабличныйДокумент();	
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОсновныеСредства_ДА2";
	
	Макет  = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ДА2");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл 
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Если Организация = Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
			Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			| ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
			|ИЗ
			| РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
			|";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Организация = РезультатЗапроса.Выгрузить()[0].Организация;
			КонецЕсли;
			
		КонецЕсли;
		
		//Последние сведения об ОС
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Организация"		, Организация);
		Запрос.УстановитьПараметр("ДатаСведений"	, ДатаСведений);
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		Запрос.УстановитьПараметр("СубконтоОС"		, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК НормаАмортизации,
		|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокСлужбыПолезной,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокСлужбыНормативной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.Изготовитель КАК СТРОКА(1000)) КАК ИзготовительОС,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.НомерПаспорта КАК СТРОКА(1000)) КАК НомерПаспорта,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.ЗаводскойНомер КАК СТРОКА(1000)) КАК ЗаводскойНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство  = &ОсновноеСредство) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство  = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство  = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация";
		ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
		
		Если ТекущиеСведенияОС.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='На момент печати основное средство <%1> не принималось к учету. Нельзя сформировать инвентарную карточку объекта!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
			Продолжить;
		КонецЕсли; 
		
		Если ТекущиеСведенияОС.Следующий() Тогда
						
			// Заполнение сведений об организации, номера документа, даты составления и других полей		
			ЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторона");
			
			СведенияОбОрганизации 							  = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Организация, ДатаСведений);
			ЛицеваяСторона.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
			ЛицеваяСторона.Параметры.ОрганизацияРНН_БИН		  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ДатаСведений, Ложь, "");
			
			ЛицеваяСторона.Параметры.Подразделение = ТекущиеСведенияОС.Подразделение;
			ЛицеваяСторона.Параметры.МОЛ 		   = ТекущиеСведенияОС.МОЛ;
			
			ЛицеваяСторона.Параметры.ДатаДокумента  = Формат(ДатаСведений, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
			ЛицеваяСторона.Параметры.НомерДокумента = ТекущиеСведенияОС.ИнвентарныйНомер;
			
			ЛицеваяСторона.Параметры.ИзготовительАктива = Ссылка.Изготовитель;
			
			// Заполнение таблицы, которая расположена сверху и имеет 19 колонок
			
			ЛицеваяСторона.Параметры.НаименованиеАктива		 = СокрЛП(ТекущиеСведенияОС.НаименованиеОС);
			ЛицеваяСторона.Параметры.ПервоначальнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
			
			ДатаДокРегистратора = "";
			ДокРегистратор      = "";
			
			УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
			
			ДокументВводаДата  = ДатаДокРегистратора;
			ДокументВводаНомер = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");	
			
			ТекстСообщения = НСтр("ru='№%1 от %2'", КодЯзыка);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, ""), Формат(ДокументВводаДата, "ДФ=dd.MM.yyyy"));
			ЛицеваяСторона.Параметры.ДокументВводаДатаНомер = ТекстСообщения;
			
			ЛицеваяСторона.Параметры.ГодВыпуска       = Формат(ТекущиеСведенияОС.ГодВыпуска, "Л=" + КодЯзыка + "; ДФ=yyyy");
			ЛицеваяСторона.Параметры.ИнвентарныйНомер = ТекущиеСведенияОС.ИнвентарныйНомер;
			ЛицеваяСторона.Параметры.ЗаводскойНомер   = СокрЛП(ТекущиеСведенияОС.ЗаводскойНомер);
			ЛицеваяСторона.Параметры.НомерПаспорта    = СокрЛП(ТекущиеСведенияОС.НомерПаспорта);
			
			ДатаДокРегистратора = "";
			ДокРегистратор      = "";
			
			УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.Поступило, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
			
			ПараметрыСостоянияПоступилоДата = ДатаДокРегистратора;
			
			ЛицеваяСторона.Параметры.ДокументПриобритенияНаименование = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");
			ЛицеваяСторона.Параметры.ДокументПриобритенияНомер 		  = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");
			ЛицеваяСторона.Параметры.ДокументПриобритенияДата		  = Формат(ДатаДокРегистратора, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");;
			ЛицеваяСторона.Параметры.СрокПолезногоИспользования		  = ТекущиеСведенияОС.СрокСлужбыПолезной;
			
			СуммаНачисленнойАмортизации = "";
			ЛиквидационнаяСтоимость		= "";
			СтоимостьАмортизацияОС = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуОС(Организация, Ссылка, ДатаСведений);
			Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
				СуммаНачисленнойАмортизации = СтоимостьАмортизацияОС[0].АмортизацияБУ;
				ЛиквидационнаяСтоимость		= СтоимостьАмортизацияОС[0].ЛиквидационнаяСтоимостьБУ;
			КонецЕсли;
			ЛицеваяСторона.Параметры.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
			ЛицеваяСторона.Параметры.ЛиквидационнаяСтоимость	 = ЛиквидационнаяСтоимость;
			
			ДатаДокРегистратора = "";
			ДокРегистратор      = "";
			
			УправлениеВнеоборотнымиАктивамиСервер.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.СнятоСУчета, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
			
			ИмяДокументаВыбытия = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");	
			ДокументВыбытия     = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");
			Если ЗначениеЗаполнено(ДокументВыбытия) Тогда	
				Если ИмяДокументаВыбытия = "Передача ОС" Тогда
					ПричинаВыбытия		 = НСтр("ru='передача ОС'", КодЯзыка);
				ИначеЕсли ИмяДокументаВыбытия = "Списание ОС" Тогда
					ПричинаВыбытия = НСтр("ru='списание ОС'", КодЯзыка);
				КонецЕсли;
				
				ЛицеваяСторона.Параметры.ПричинаВыбытия = ПричинаВыбытия;
				ИмяДокументаВыбытияДата                 = ДатаДокРегистратора;
				ИмяДокументаВыбытияНомер                = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");
				
				ТекстСообщения = НСтр("ru='№%1 от %2'", КодЯзыка);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяДокументаВыбытияНомер, Формат(ИмяДокументаВыбытияДата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
				ЛицеваяСторона.Параметры.ДокументВыбытияДатаНомер = ТекстСообщения;
				
				Если ТипЗнч(ДокументВыбытия) = Тип("ДокументСсылка.ПередачаОС") Тогда
					СтрокаОС = ДокументВыбытия.ОС.Найти(Ссылка, "ОсновноеСредство");
					Если СтрокаОС <> Неопределено Тогда
						ЛицеваяСторона.Параметры.СуммаДоходаУбыткаОтРеализации = СтрокаОС.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
				БалансоваяСтоимость = СтоимостьАмортизацияОС[0].СтоимостьБУ - СтоимостьАмортизацияОС[0].АмортизацияБУ;
			КонецЕсли;
			
			ЛицеваяСторона.Параметры.БалансоваяСтоимость = БалансоваяСтоимость;
			ЛицеваяСторона.Параметры.Валюта = Валюта;
			
			ТабДок.Вывести(ЛицеваяСторона);	
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Заполнение таблицы, которая имеет 8 колонок и содержит сведения о ремонте, достройке и т.д.	
			СведенияОДостройкеИРемонтеШапка 				 = Макет.ПолучитьОбласть("СведенияОДостройкеИРемонтеШапка");
			СведенияОДостройкеИРемонтеШапка.Параметры.Валюта = Валюта;		
			ТабДок.Вывести(СведенияОДостройкеИРемонтеШапка);
			
			ЗапросМодернизацииРемонты = Новый Запрос();
			ЗапросМодернизацииРемонты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СобытияОС.Регистратор,
			|	СобытияОС.Период КАК Период,
			|	СобытияОС.НомерДокумента,
			|	СобытияОС.СуммаЗатратБУ КАК СуммаЗатрат,
			|	ВЫБОР
			|		КОГДА СобытияОС.Событие.ВидСобытияОС В (&МассивВидовСобытийМодернизации)
			|			ТОГДА ""Модернизация""
			|		КОГДА СобытияОС.Событие.ВидСобытияОС В (&МассивВидовСобытийРемонта)
			|			ТОГДА ""Ремонт""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК СодержимоеСтроки
			|ИЗ
			|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОС
			|ГДЕ
			|	СобытияОС.ОсновноеСредство = &ОсновноеСредство
			|	И СобытияОС.Период МЕЖДУ &ДатаПоступления И &ДатаСведений
			|	И СобытияОС.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";		
			
			ЗапросМодернизацииРемонты.УстановитьПараметр("ОсновноеСредство", Ссылка);
			ЗапросМодернизацииРемонты.УстановитьПараметр("ДатаПоступления" , ПараметрыСостоянияПоступилоДата);
			ЗапросМодернизацииРемонты.УстановитьПараметр("ДатаСведений"	   , ДатаСведений);
			ЗапросМодернизацииРемонты.УстановитьПараметр("Организация"	   , Организация);
			
			МассивВидовСобытийМодернизации = Новый Массив();
			МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
			МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Достройка);
			МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
			МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
			МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
			ЗапросМодернизацииРемонты.УстановитьПараметр("МассивВидовСобытийМодернизации", МассивВидовСобытийМодернизации);
			
			МассивВидовСобытийРемонта = Новый Массив();
			МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
			МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
			МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
			ЗапросМодернизацииРемонты.УстановитьПараметр("МассивВидовСобытийРемонта", МассивВидовСобытийРемонта);
			
			РезультатМодернизацииРемонты = ЗапросМодернизацииРемонты.Выполнить().Выбрать();
			
			ТабЗначМодернизацииОС = Новый ТаблицаЗначений();
			ТабЗначМодернизацииОС.Колонки.Добавить("ДокМодернизацииДата");
			ТабЗначМодернизацииОС.Колонки.Добавить("ДокМодернизацииНомер");
			ТабЗначМодернизацииОС.Колонки.Добавить("ИнвентарныйНомер");
			ТабЗначМодернизацииОС.Колонки.Добавить("ЗатратыНаМодернизацию");
			
			ТабЗначРемонтыОС = Новый ТаблицаЗначений();
			ТабЗначРемонтыОС.Колонки.Добавить("ДокРемонтаДата");
			ТабЗначРемонтыОС.Колонки.Добавить("ДокРемонтаНомер");
			ТабЗначРемонтыОС.Колонки.Добавить("ЗатратыНаРемонт");
			
			Пока РезультатМодернизацииРемонты.Следующий() Цикл
				
				Если РезультатМодернизацииРемонты.СодержимоеСтроки = "Модернизация" Тогда
					
					СтрокаТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Добавить();
					СтрокаТабЗначМодернизацииОС.ДокМодернизацииДата   = Формат(РезультатМодернизацииРемонты.Период, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
					СтрокаТабЗначМодернизацииОС.ДокМодернизацииНомер  = РезультатМодернизацииРемонты.НомерДокумента;
					СтрокаТабЗначМодернизацииОС.ИнвентарныйНомер      = ТекущиеСведенияОС.ИнвентарныйНомер;
					СтрокаТабЗначМодернизацииОС.ЗатратыНаМодернизацию = РезультатМодернизацииРемонты.СуммаЗатрат;
					
				ИначеЕсли РезультатМодернизацииРемонты.СодержимоеСтроки = "Ремонт" Тогда
					
					СтрокаТабЗначРемонтыОС = ТабЗначРемонтыОС.Добавить();
					СтрокаТабЗначРемонтыОС.ДокРемонтаДата  = Формат(РезультатМодернизацииРемонты.Период, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
					СтрокаТабЗначРемонтыОС.ДокРемонтаНомер = РезультатМодернизацииРемонты.НомерДокумента;
					СтрокаТабЗначРемонтыОС.ЗатратыНаРемонт = РезультатМодернизацииРемонты.СуммаЗатрат;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МаксимальныйИндексТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Количество() - 1;
			МаксимальныйИндексТабЗначРемонтыОС 		= ТабЗначРемонтыОС.Количество() - 1;	
			МаксимальныйИндекс 						= Макс(МаксимальныйИндексТабЗначМодернизацииОС, МаксимальныйИндексТабЗначРемонтыОС);
			
			Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
				
				СведенияОДостройкеИРемонтеСтрока = Макет.ПолучитьОбласть("СведенияОДостройкеИРемонтеСтрока");		
				
				Если МаксимальныйИндексТабЗначМодернизацииОС >= ИндексСтроки Тогда
					СтрокаТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Получить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(СведенияОДостройкеИРемонтеСтрока.Параметры, СтрокаТабЗначМодернизацииОС);
				КонецЕсли;
				
				Если МаксимальныйИндексТабЗначРемонтыОС >= ИндексСтроки Тогда
					СтрокаТабЗначРемонтыОС = ТабЗначРемонтыОС.Получить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(СведенияОДостройкеИРемонтеСтрока.Параметры, СтрокаТабЗначРемонтыОС);
				КонецЕсли;
				
				ТабДок.Вывести(СведенияОДостройкеИРемонтеСтрока);
				
			КонецЦикла;	
			
			// Заполнение таблиц "Сведения о переоценки" и "Сведения о внутренем перемещении" 	
			СведенияОПереоценкиИПеремещенииШапка 				  = Макет.ПолучитьОбласть("СведенияОПереоценкиИПеремещенииШапка");	
			СведенияОПереоценкиИПеремещенииШапка.Параметры.Валюта = Валюта;		
			ТабДок.Вывести(СведенияОПереоценкиИПеремещенииШапка);
			
			ЗапросПеремещенияОС = Новый Запрос();
			
			ЗапросПеремещенияОС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МестонахождениеОС.Местонахождение КАК Местонахождение,
			|	МестонахождениеОС.Период КАК Период,
			|	ТИПЗНАЧЕНИЯ(МестонахождениеОС.Регистратор) КАК РегистраторТип,
			|	МестонахождениеОС.Регистратор.Номер КАК РегистраторНомер,
			|	МестонахождениеОС.Регистратор.Дата КАК РегистраторДата
			|ИЗ
			|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОС
			|ГДЕ
			|	МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
			|	И МестонахождениеОС.Период > &ДатаПоступления
			|	И МестонахождениеОС.Период <= &ДатаСведений
			|	И МестонахождениеОС.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";	
			
			ЗапросПеремещенияОС.УстановитьПараметр("ОсновноеСредство", Ссылка);
			ЗапросПеремещенияОС.УстановитьПараметр("ДатаПоступления" , ПараметрыСостоянияПоступилоДата);
			ЗапросПеремещенияОС.УстановитьПараметр("ДатаСведений"	 , ДатаСведений);
			ЗапросПеремещенияОС.УстановитьПараметр("Организация"	 , Организация);
			
			ТабЗначПеремещенияОС = Новый ТаблицаЗначений();
			ТабЗначПеремещенияОС.Колонки.Добавить("ПеремещениеДокументДатаНомер");
			ТабЗначПеремещенияОС.Колонки.Добавить("Подразделение");
			ТабЗначПеремещенияОС.Колонки.Добавить("БалансоваяСтоимость");
			
			ВыборкаПеремещенияОС = ЗапросПеремещенияОС.Выполнить().Выбрать();
			
			Пока ВыборкаПеремещенияОС.Следующий() Цикл
				
				СтрокаТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Добавить();
				
				ПеремещениеДокументДатаНомер = "Документ, Дата, Номер";
				ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Документ", ВыборкаПеремещенияОС.РегистраторТип);
				ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Дата",     ВыборкаПеремещенияОС.РегистраторНомер);
				ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Номер",    Формат(ВыборкаПеремещенияОС.РегистраторДата, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));	
				СтрокаТабЗначПеремещенияОС.ПеремещениеДокументДатаНомер = ПеремещениеДокументДатаНомер;
				
				СтрокаТабЗначПеремещенияОС.Подразделение = ВыборкаПеремещенияОС.Местонахождение;
				
				СтоимостьАмортизацияОС = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьСтоимостьПоСпискуОС(Организация, Ссылка, Новый Граница(ВыборкаПеремещенияОС.Период));
				Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
					БалансоваяСтоимость 						   = СтоимостьАмортизацияОС[0].СтоимостьБУ - СтоимостьАмортизацияОС[0].АмортизацияБУ;
					СтрокаТабЗначПеремещенияОС.БалансоваяСтоимость = БалансоваяСтоимость;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросПереоценкиОС = Новый Запрос();  	
			ЗапросПереоценкиОС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПереоценкаВнеоборотныхАктивов.Период КАК Период,
			|	СРЕДНЕЕ(ПереоценкаВнеоборотныхАктивовОС.ПереоцененнаяСтоимостьБУ) КАК ПереоцененнаяСтоимость
			|ИЗ
			|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов КАК ПереоценкаВнеоборотныхАктивов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаВнеоборотныхАктивов.ОС КАК ПереоценкаВнеоборотныхАктивовОС
			|		ПО ПереоценкаВнеоборотныхАктивов.Регистратор = ПереоценкаВнеоборотныхАктивовОС.Ссылка
			|			И ПереоценкаВнеоборотныхАктивов.ВнеоборотныйАктив = ПереоценкаВнеоборотныхАктивовОС.ОсновноеСредство
			|ГДЕ
			|	ПереоценкаВнеоборотныхАктивов.Организация = &Организация
			|	И ПереоценкаВнеоборотныхАктивов.ВнеоборотныйАктив = &ВнеоборотныйАктив
			|	И ПереоценкаВнеоборотныхАктивов.Период МЕЖДУ &ДатаПоступления И &ДатаСведений
			|
			|СГРУППИРОВАТЬ ПО
			|	ПереоценкаВнеоборотныхАктивов.Период";	
			
			ЗапросПереоценкиОС.УстановитьПараметр("Организация"		 , Организация);
			ЗапросПереоценкиОС.УстановитьПараметр("ВнеоборотныйАктив", Ссылка);
			ЗапросПереоценкиОС.УстановитьПараметр("ДатаПоступления"	 , ПараметрыСостоянияПоступилоДата);
			ЗапросПереоценкиОС.УстановитьПараметр("ДатаСведений"	 , ДатаСведений);
			
			ТабЗначПереоценкиОС = Новый ТаблицаЗначений();
			ТабЗначПереоценкиОС.Колонки.Добавить("ПереоценкаДата");
			ТабЗначПереоценкиОС.Колонки.Добавить("СтоимостьСУчетомПереоценки");
			
			ВыборкаПереоценкиОС = ЗапросПереоценкиОС.Выполнить().Выбрать();
			
			Пока ВыборкаПереоценкиОС.Следующий() Цикл
				СтрокаТабЗначПереоценкиОС							 = ТабЗначПереоценкиОС.Добавить();
				СтрокаТабЗначПереоценкиОС.ПереоценкаДата 			 = Формат(ВыборкаПереоценкиОС.Период, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"); 
				СтрокаТабЗначПереоценкиОС.СтоимостьСУчетомПереоценки = ВыборкаПереоценкиОС.ПереоцененнаяСтоимость;		
			КонецЦикла;
			
			МаксимальныйИндексТабЗначПереоценкиОС  = ТабЗначПереоценкиОС.Количество() - 1;
			МаксимальныйИндексТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Количество() - 1;	
			МаксимальныйИндекс 					   = Макс(МаксимальныйИндексТабЗначПереоценкиОС, МаксимальныйИндексТабЗначПеремещенияОС);
			
			Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
				
				СведенияОПереоценкиИПеремещенииСтрока = Макет.ПолучитьОбласть("СведенияОПереоценкиИПеремещенииСтрока");		
				
				Если МаксимальныйИндексТабЗначПереоценкиОС >= ИндексСтроки Тогда
					СтрокаТабЗначПереоценкиОС = ТабЗначПереоценкиОС.Получить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(СведенияОПереоценкиИПеремещенииСтрока.Параметры, СтрокаТабЗначПереоценкиОС);
				Иначе
					ОбластьСведенияОПереоценкиСтрока = СведенияОПереоценкиИПеремещенииСтрока.Область("СведенияОПереоценкиСтрока");
					ОбластьСведенияОПереоценкиСтрока.Очистить(Истина, Истина, Истина);
				КонецЕсли;
				
				Если МаксимальныйИндексТабЗначПеремещенияОС >= ИндексСтроки Тогда
					СтрокаТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Получить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(СведенияОПереоценкиИПеремещенииСтрока.Параметры, СтрокаТабЗначПеремещенияОС);
				Иначе
					ОбластьСведенияОПеремещенииСтрока = СведенияОПереоценкиИПеремещенииСтрока.Область("СведенияОПеремещенииСтрока");
					ОбластьСведенияОПеремещенииСтрока.Очистить(Истина, Истина, Истина);		
				КонецЕсли;
				
				ТабДок.Вывести(СведенияОПереоценкиИПеремещенииСтрока);
				
			КонецЦикла;
			
			// Вывод таблицы "Краткая индивидуальная характеристика актива"  	
			КраткаяИндивидуальнаяХарактеристикаАктива = Макет.ПолучитьОбласть("КраткаяИндивидуальнаяХарактеристикаАктива");
			ТабДок.Вывести(КраткаяИндивидуальнаяХарактеристикаАктива);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Изменение параметров возвращаемого табличного документа	
	ТабДок.АвтоМасштаб		   = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху		   = 0;
	ТабДок.ПолеСнизу		   = 0;
	
	Возврат ТабДок;
	
КонецФункции 


#Область ПечатьШтрихкодовОС

Функция ДанныеДляПечатиШтрихкодовОС(ОбъектыПечати,Параметры) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&МассивОС)";
	
	Запрос.УстановитьПараметр("МассивОС", ОбъектыПечати);
	
	// Подготовка данных для заполенения табличной части обработки печати
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОС"			, Запрос.Выполнить().Выгрузить());
	СтруктураРезультат.Вставить("Организация"	, Параметры.Организация);
	СтруктураРезультат.Вставить("ДатаСведений"	, Параметры.ДатаСведений);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции	

#КонецОбласти

#Область Прочее

Процедура УстановитьПараметрыДинамическогоСпискаОсновныхСредств(Строки, ПолеПоиска = "Ссылка") Экспорт
	
	Если Не ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ТекущаяДатаСеанса()) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОС = Строки.ПолучитьКлючи();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОсновныеСредства.Ссылка КАК Ссылка,
		|	ОсновныеСредства.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВТ_СписокОС
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|ГДЕ
		|	ОсновныеСредства.Ссылка В(&СписокОС)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодТНВЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НоменклатураГСВС.Ссылка КАК Ссылка,
		|	НоменклатураГСВС.КодГСВС КАК КодГСВС
		|ПОМЕСТИТЬ ВТ_СписокНоменклатурыГСВС
		|ИЗ
		|	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
		|ГДЕ
		|	НоменклатураГСВС.КодГСВС В
		|			(ВЫБРАТЬ
		|				Т.КодТНВЭД
		|			ИЗ
		|				ВТ_СписокОС КАК Т)
		|	И НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакТовараДвойногоНазначения КАК ПризнакТовараДвойногоНазначения,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакУникальногоТовара КАК ПризнакУникальногоТовара,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ПризнакПеречняИзьятий,
		|	СписокНоменклатурыГСВС.КодГСВС КАК КодТНВЭД
		|ПОМЕСТИТЬ ВТ_СведенияОНоменклатуре
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
		|			&Дата,
		|			НоменклатураГСВС В
		|				(ВЫБРАТЬ
		|					Т.Ссылка
		|				ИЗ
		|					ВТ_СписокНоменклатурыГСВС КАК Т)) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНоменклатурыГСВС КАК СписокНоменклатурыГСВС
		|		ПО СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС = СписокНоменклатурыГСВС.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодТНВЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СписокОС.Ссылка КАК Ссылка,
		|	ВТ_СведенияОНоменклатуре.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
		|	ВТ_СведенияОНоменклатуре.ПризнакТовараДвойногоНазначения КАК ПризнакТовараДвойногоНазначения,
		|	ВТ_СведенияОНоменклатуре.ПризнакУникальногоТовара КАК ПризнакУникальногоТовара,
		|	ВТ_СведенияОНоменклатуре.ПризнакПеречняИзьятий КАК ПризнакПеречняИзьятий
		|ИЗ
		|	ВТ_СписокОС КАК ВТ_СписокОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОНоменклатуре КАК ВТ_СведенияОНоменклатуре
		|		ПО ВТ_СписокОС.КодТНВЭД = ВТ_СведенияОНоменклатуре.КодТНВЭД";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Строки Цикл
		МассивПоиска = ТаблицаПараметров.НайтиСтроки(Новый Структура("Ссылка",Элемент.Значение.Данные[ПолеПоиска]));
		Если МассивПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Значение.Данные.Свойство("ПризнакУчетаНаВиртуальномСкладе")Тогда
			Элемент.Значение.Данные.ПризнакУчетаНаВиртуальномСкладе = МассивПоиска[0].ПризнакУчетаНаВиртуальномСкладе;
		КонецЕсли;
		Если Элемент.Значение.Данные.Свойство("ПризнакУникальногоТовара")Тогда
			Элемент.Значение.Данные.ПризнакУникальногоТовара = МассивПоиска[0].ПризнакУникальногоТовара;
		КонецЕсли;
		Если Элемент.Значение.Данные.Свойство("ПризнакПеречняИзьятий")Тогда
			Элемент.Значение.Данные.ПризнакПеречняИзьятий = МассивПоиска[0].ПризнакПеречняИзьятий;
		КонецЕсли;
		Если Элемент.Значение.Данные.Свойство("ПризнакТовараДвойногоНазначения")Тогда
			Элемент.Значение.Данные.ПризнакТовараДвойногоНазначения = МассивПоиска[0].ПризнакТовараДвойногоНазначения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
 