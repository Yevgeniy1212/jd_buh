
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Устнавливаем отбор 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,	
		"НеИспользуется",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,Истина
		);	
		
	Если Параметры.РежимВыбора Тогда
		Элементы.Список.РежимВыбора = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияБК.ФормаСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.Приоритет = 1 
		ИЛИ ПолучитьЗначениеРеквизита(ТекущиеДанные.Ссылка,"ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = -1;
	
	ВыполнитьКомандуНаСервере(НаправлениеСдвига, ТекущиеДанные.Приоритет);
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено 
		ИЛИ ПолучитьЗначениеРеквизита(ТекущиеДанные.Ссылка,"ПометкаУдаления")  Тогда 
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = 1;
	
	ВыполнитьКомандуНаСервере(НаправлениеСдвига, ТекущиеДанные.Приоритет);
	
	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ВыполнитьКомандуНаСервере(НаправлениеСдвига, ТекущийПриоритет)
	
	ВременныйПриоритет	= Справочники.ВычетыИПН.МаксимальныйПриоритет() + 1;
	СоседнийПриоритет	= ТекущийПриоритет + НаправлениеСдвига;
	
	ТекущийВычет		= ПолучитьВычетПоПриоритету(ТекущийПриоритет);
	СоседнийВычет 		= ПолучитьВычетПоПриоритету(СоседнийПриоритет);
	Если СоседнийВычет = Неопределено или ТекущийВычет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВычетыИПН");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийВычет.Ссылка);
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВычетыИПН");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СоседнийВычет.Ссылка);
		Блокировка.Заблокировать();
		
		ТекущийВычет.Приоритет 	= ВременныйПриоритет;
		ТекущийВычет.Записать();
		
		СоседнийВычет.Приоритет = ТекущийПриоритет;
		СоседнийВычет.Записать();
		
		ТекущийВычет.Приоритет 	= СоседнийПриоритет;
		ТекущийВычет.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обновление приоритетов справочников'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ВычетыИПН,
			ТекущийВычет,ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'При обновлении приоритетов справочника возникла ошибка, см. ""Журнал регистрации"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ОтображатьНеиспользуемыеВидыВычетовПриИзменении(Элемент)
	Элементы.НеИспользуется.Видимость 			= ОтображатьНеиспользуемыеВидыВычетов;
	//Устнавливаем отбор
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,	
		"НеИспользуется",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		, Не ОтображатьНеиспользуемыеВидыВычетов
		);			
КонецПроцедуры

&НаСервере
Функция ПолучитьВычетПоПриоритету(Приоритет)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ВычетыИПН.Ссылка КАК Вычет
	|ИЗ
	|	Справочник.ВычетыИПН КАК ВычетыИПН
	|ГДЕ
	|	ВычетыИПН.Приоритет = &Приоритет";
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Вычет.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции

#КонецОбласти