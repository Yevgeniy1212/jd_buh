#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоБанковскихСчетовОрганизации", Новый Структура("Организация", Организация)) Тогда
		//Перед тем, как возвращать значение ФО, проверим его корректность и установим опцию правильно, если была ошибка
		ПроверитьКорректностьЗначенияФОИспользоватьНесколькоБанковскихСчетовОрганизации(Организация);
	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоБанковскихСчетовОрганизации",
		Новый Структура("Организация", Организация));
	
КонецФункции
	
Процедура ПроверитьУстановитьЗначениеОпцииИспользоватьНесколькоБанковскихСчетовОрганизации(Организация, ПометкаУдаления = Ложь, ЭтоНовый = Неопределено) Экспорт
	
	ДолжныИспользоваться = ПометкаУдаления ИЛИ КоличествоБанковскихСчетовОрганизации(Организация) > 1;
    Если ДолжныИспользоваться Тогда
        ВключитьИспользованиеНесколькоБанковскихСчетов(Организация);
	Иначе
		Если ЭтоНовый <> Неопределено Тогда
			ВключитьИспользованиеНесколькоБанковскихСчетов(Организация, Ложь);
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

Процедура ВключитьИспользованиеНесколькоБанковскихСчетов(Организация, УстановитьЗначение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации.СоздатьМенеджерЗаписи();
	Запись.Организация  = Организация;
	Запись.Используется = ?(УстановитьЗначение <> Неопределено, УстановитьЗначение, Истина);
	Запись.Записать();
	
КонецПроцедуры

Функция КоличествоБанковскихСчетовОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция БанковскийСчетОрганизацииПоУмолчанию(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК Счет,
	|	Организации.Ссылка ЕСТЬ НЕ NULL КАК ОсновнойСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО БанковскиеСчета.Владелец = Организации.Ссылка
	|			И БанковскиеСчета.Ссылка = Организации.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойСчет УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Счет;
	Иначе
		Выборка.Следующий();
		Если Выборка.ОсновнойСчет = Истина Тогда
			Возврат Выборка.Счет;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	
КонецФункции

Процедура ПроверитьКорректностьЗначенияФОИспользоватьНесколькоБанковскихСчетовОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК Счет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
		
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			//Если у Организации всего 1 счет, значит Фо установлена верно
			ИсправитьЗначениеФункциональнойОпции = Ложь;
		Иначе
			//Если счетов несколько, значит допущена ошибка, значение функциональной опции не соответствует состоянию ИБ
			ИсправитьЗначениеФункциональнойОпции = Истина;
		КонецЕсли;
	Иначе
		// Если ФО стоит в Ложь, и счетов нет - исправлять ничего не нужно
		ИсправитьЗначениеФункциональнойОпции = Ложь;
	КонецЕсли;
	
	Если ИсправитьЗначениеФункциональнойОпции Тогда 
		// Значение функциональной опции не соответствует состоянию ИБ
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скорректирована запись для %1 в регистре сведений ""Использовать несколько банковских счетов организации""'"), Организация);
				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка состояния функциональной опции'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации,, ТекстСообщения);
		
		// Устанавливаем ФО в Истина
		ВключитьИспользованиеНесколькоБанковскихСчетов(Организация);
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	

	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
		
	Если Параметры.Свойство("ВыбиратьСчетаВВалюте") И Параметры.ВыбиратьСчетаВВалюте Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		СтрокаПоиска = Неопределено;
		
		Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРегламентированногоУчета
		|	И БанковскиеСчета.Наименование ПОДОБНО &ШаблонНаименования"; 	
		
		Если Параметры.Свойство("Отбор") Тогда			   
			ТекстОтбор = "";
			Для Каждого ЭлементСтруктуры Из Параметры.Отбор Цикл
				ВидСравненияВЗапрос = " = ";
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ФиксированныйМассив") Тогда
					ВидСравненияВЗапрос =  " В ";
				КонецЕсли;
				
				ТекстОтбор =  ТекстОтбор + " И " + ЭлементСтруктуры.Ключ  + ВидСравненияВЗапрос +  " (&Параметр" + ЭлементСтруктуры.Ключ + ")";
				Запрос.УстановитьПараметр("Параметр" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЦикла;
			Запрос.Текст = Запрос.Текст + ТекстОтбор;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ШаблонНаименования", "%" + СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДанныеВыбора = Новый СписокЗначений();
		
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ПометкаУдаления Тогда
				СтруктураЗначение = Новый Структура("Значение,ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
				ДанныеВыбора.Добавить(СтруктураЗначение,,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Ссылка,);
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

Процедура ВключитьИспользованиеОбменаСБанком(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.ОбменСБанкомВключен = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	
	Параметры.ОбработкаЗавершена = Результат.Пустой();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектДляОбработки = Выборка.Ссылка.ПолучитьОбъект();
			Если ОбъектДляОбработки = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектДляОбработки.ОбменСБанкомВключен = Истина;
			ОбъектДляОбработки.ИспользоватьОбменСБанком = Истина;
			ОбъектДляОбработки.Кодировка = "UTF8";
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектДляОбработки);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОсновнойБанковскийСчет(Владелец, БанковскийСчет) Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации")
		И НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентОрганизацияОбъект = Владелец.ПолучитьОбъект();
	
	УстановитьОсновнойБанковскийСчет = Истина;
	
	Попытка
		КонтрагентОрганизацияОбъект.Заблокировать();
	Исключение
		// в случае блокировки - не выполнять изменение объекта
		УстановитьОсновнойБанковскийСчет = Ложь;
		// записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заблокировать объект.'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,, КонтрагентОрганизацияОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	Если УстановитьОсновнойБанковскийСчет Тогда
		КонтрагентОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскийСчет;
		КонтрагентОрганизацияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли