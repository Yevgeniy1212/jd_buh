
 ////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

 &НаКлиенте
 Процедура ПослеЗаписи(ПараметрыЗаписи)
	 
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Владелец.Доступность = Объект.Ссылка.Пустая();
	
	Если ЗначениеЗаполнено(параметры.ЗначениеКопирования) И ТипЗнч(Параметры.ЗначениеКопирования) = ТипЗнч(Объект.Ссылка) Тогда
		Характеристика = Параметры.ЗначениеКопирования;  //скопируем значения источника
	Иначе
		Характеристика = Объект.Ссылка;
	КонецЕсли;
	Записывать = Истина;
	ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика);
	
КонецПроцедуры

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Характеристика - ссылка на справочник Характеристик, значения свойства которого надо прочитать.
//
&НаСервере
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Характеристика);
	запрос.Текст = "ВЫБРАТЬ
	               |	си_ЗначенияСвойствОбъектов.Свойство,
	               |	си_ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	РегистрСведений.си_ЗначенияСвойствОбъектов КАК си_ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	си_ЗначенияСвойствОбъектов.Объект = &Ссылка";
	Результат = Запрос.Выполнить();
	ТЧ = Результат.Выгрузить();
	СвойстваИЗначения.Загрузить(ТЧ);
	//Обработки.си_ЗначенияСвойствОбъекта.ПрочитатьЗаполнитьСвойстваИЗначения(СвойстваИЗначения,Объект.Ссылка);
	
КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();

	Список.Добавить(СформироватьНаименование(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения));

	//РезультатВыбора = ВыбратьИзСписка(Список, Элементы.Наименование);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораЗначения",ЭтаФорма,Элемент);
    ПоказатьВыборИзСписка(Оповещение, Список, Элемент);

	//Если РезультатВыбора <> Неопределено Тогда
	//	Объект.Наименование = РезультатВыбора.Значение;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПослеВыбораЗначения(РезультатВыбора, ПараметрыОповещения) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Наименование = РезультатВыбора.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ПрочитатьЗаполнитьСвойстваИЗначения(Объект.Ссылка);
КонецПроцедуры

// Функция устанавливает новое наименование характеристики по значениям свойств.
//
// Параметры:
//  КоллекцияЗначенийСвойств - коллекция значений, имеющая свойство Значение.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
&НаСервере
Функция СформироватьНаименование(знач КоллекцияЗначенийСвойств) Экспорт

	Строка = "";

	Для Каждого ЭлементКоллекции Из КоллекцияЗначенийСвойств Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			Строка = Строка + ЭлементКоллекции.Значение + ", ";
		КонецЕсли;
	КонецЦикла;

	Строка = Лев(Строка, СтрДлина(Строка) - 2);

	Если ПустаяСтрока(Строка) Тогда
		Строка = "<Свойства не назначены>";
	КонецЕсли;

	Возврат Строка;

КонецФункции // СформироватьНаименование()

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗаписью(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Записывать = Ложь;
	Иначе
		Записывать = Ложь;
		АналогичныеХарактеристики = Параметры.АналогичныеХарактеристики;
		ЗаголовокВыбора = "Выберите одну из существующих характеристик вместо создаваемой вновь.";
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбора", ЭтотОбъект);
		АналогичныеХарактеристики.ПоказатьВыборЭлемента(Оп, АналогичныеХарактеристики, Элементы.ФормаКоманднаяПанель);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПослеВыбора(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Закрыть();
		ПоказатьЗначение(,Результат.Значение.Характеристика);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьАналогичныеХарактеристики()
	АналогичныеХарактеристики = АналогичныеХарактеристики();
	СписокАналогов = Новый СписокЗначений;
	ТекстДляСтруктуры = "";
	Для Каждого Колонка Из АналогичныеХарактеристики.Колонки Цикл
		ТекстДляСтруктуры = ТекстДляСтруктуры + Колонка.Имя;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из АналогичныеХарактеристики Цикл
		СтруктураСтроки = Новый Структура(ТекстДляСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,СтрокаТЧ);
		СписокАналогов.Добавить(СтруктураСтроки,СтрокаТЧ.Характеристика);
	КонецЦикла;
	
	Возврат СписокАналогов;
КонецФункции

// Функция проверяет, есть ли характеристики с аналогичными значениями свойств.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений, содержащая аналогичные характеристики. 
//  Таблица состоит из одной колонки, содержащей ссылку на характеристики.
//
&НаСервере
Функция АналогичныеХарактеристики()

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ВладелецХарактеристики", Объект.Владелец);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		си_ХарактеристикиСпецодеждыИИнвентаря.Ссылка КАК Характеристика
	|	ИЗ
	|		Справочник.си_ХарактеристикиСпецодеждыИИнвентаря КАК си_ХарактеристикиСпецодеждыИИнвентаря
	|	ГДЕ
	|		си_ХарактеристикиСпецодеждыИИнвентаря.Владелец = &ВладелецХарактеристики) КАК ХарактеристикиНоменклатуры";

	Для Каждого Строка Из ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Индекс = ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Индекс(Строка);

			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);

			Запрос.Текст = Запрос.Текст +
			"
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.си_ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Индекс + "
			|
			|ПО
			|	ЗначенияСвойствОбъектов" + Индекс + ".Объект = ХарактеристикиНоменклатуры.Характеристика
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс +"
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс +"
			|";
		КонецЕсли;
	КонецЦикла;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // АналогичныеХарактеристики()

&НаКлиенте
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)
	Объект.Наименование = СформироватьНаименование(СвойстваИЗначения);
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Отказ = Не Записывать;
	Если Не Отказ Тогда
		
		Для Каждого СтрокаТЧ Из СвойстваИЗначения Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда 
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.си_ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Значение = Объект.Ссылка;
			НаборЗаписей.Отбор.Объект.Использование = Истина;
			НаборЗаписей.Отбор.Свойство.Значение = СтрокаТЧ.Свойство;
			НаборЗаписей.Отбор.Свойство.Использование = Истина;
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = Объект.Ссылка;
			НоваяЗапись.Свойство = СтрокаТЧ.Свойство;
			НоваяЗапись.Значение = СтрокаТЧ.Значение;
			НаборЗаписей.Записать();
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры


