
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляСинхронизацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	
	ИспользоватьДляСинхронизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;	
	Объект = Форма.Объект;
	
	Элементы.ИспользоватьДляРегламентногоЗадания.Видимость = Объект.ИспользоватьДляСинхронизации;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьДляСинхронизацииПриИзмененииНаСервере()
	
	Если НЕ Объект.ИспользоватьДляСинхронизации Тогда
		Объект.ИспользоватьДляРегламентногоЗадания = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессию(Команда)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ОбработчикОповщенияВыбораДанных = Новый ОписаниеОповещения("ОбработчикОповщенияЗакрытьФормуВводПароля", ЭтаФорма);
		
		ПользователиИСЭСФ = Новый Массив;
		ПользователиИСЭСФ.Добавить(Объект.Владелец);
		
		ЭСФКлиент.ПаролиАутентификации(ОбработчикОповщенияВыбораДанных, ПользователиИСЭСФ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповщенияЗакрытьФормуВводПароля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда			
		ПарольАутентификации = Результат[Объект.Владелец];
		ЗакрытьВыбраннуюСессиюНаСервере(Объект.Ссылка,ПарольАутентификации);				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьВыбраннуюСессиюНаСервере(Профиль, Пароль)
	
	ЭСФСервер.ЗакрытьСессиюПоДаннымПрофиля(Профиль, Пароль);
	//++ НЕ ЭСФ
	ВССервер.ЗакрытьСессиюПоДаннымПрофиля(Профиль, Пароль);
	//-- НЕ ЭСФ
           	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСессию(Команда)
	
	Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
		
		ОбработчикОповщенияВыбораДанных = Новый ОписаниеОповещения("ОбработчикОповщенияВыбораДанных", ЭтаФорма);
		ПользователиИСЭСФ = Новый Массив;
		ПользователиИСЭСФ.Добавить(Объект.Владелец);
		
		Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
			КоллекцияСтруктурныхЕдиниц = Новый Соответствие;
			КоллекцияСтруктурныхЕдиниц.Вставить(Объект.СтруктурнаяЕдиница, Объект.Ссылка);
			ДополнительныеПараметры = Новый Структура("СписокСтруктурныхЕдиниц, МассивПользователейИСЭСФБезПароля, ТребуетсяВыборСертификатаВхода", 
				КоллекцияСтруктурныхЕдиниц, ПользователиИСЭСФ, Истина);
			ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповщенияВыбораДанных, ДополнительныеПараметры);
		Иначе
			ЭСФКлиент.ПаролиАутентификации(ОбработчикОповщенияВыбораДанных, ПользователиИСЭСФ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповщенияВыбораДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() Тогда
			ДанныеКлючаЭЦП = ПодготовитьДанныеКлючаЭЦП(Результат);
			ОткрытьСессиюСПодписьюПоПрофилюНаКлиенте(Объект.Ссылка, ДанныеКлючаЭЦП);
		Иначе
			ОткрытьСессиюПоПрофилю(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьСессиюПоПрофилю(Профиль)
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Профиль);	
	
	ИдентфикаторСессии = ЭСФСервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
	Если ЗначениеЗаполнено(ИдентфикаторСессии) Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =НСтр("ru = 'Вход в ИС ЭСФ успешно выполнен.'");
		Сообщение.Сообщить();				
		ЭСФСервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентфикаторСессии);
	КонецЕсли;	  
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСессиюСПодписьюПоПрофилюНаКлиенте(Профиль, ДанныеКлючаЭЦП = Неопределено)
	
	ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(Профиль);
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	ПараметрыОткрытияСессии = ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию();
	ПараметрыОткрытияСессии.ТребуетсяДополнительноеОткрытиеСессииВС = Истина;
	ИдентификаторСессии = ЭСФКлиент.ОткрытьСессиюСПодписьюПользователя(Профиль, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Вход в ИС ЭСФ успешно выполнен.'");
		Сообщение.Сообщить();
		ЭСФВызовСервера.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.АктивныеСессииИСЭСФ"));
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПодготовитьДанныеКлючаЭЦП(РезультатВводаДанных)
	
	ДанныеКлючаДляВхода = Неопределено;
	Если ТипЗнч(РезультатВводаДанных) = Тип("Соответствие") Тогда
		ДанныеСтруктурнойЕдиницы = РезультатВводаДанных.Получить(Объект.СтруктурнаяЕдиница);
		Если ТипЗнч(ДанныеСтруктурнойЕдиницы) = Тип("Структура") Тогда
			КлючВхода = Неопределено;
			ПарольВхода = Неопределено;
			ДанныеСтруктурнойЕдиницы.Свойство("КлючВходаBase64", КлючВхода);
			ДанныеСтруктурнойЕдиницы.Свойство("ПарольВхода", ПарольВхода);
			Если ЗначениеЗаполнено(КлючВхода) И ЗначениеЗаполнено(ПарольВхода) Тогда
				ДанныеКлючаДляВхода = Новый Структура;
				ДанныеКлючаДляВхода.Вставить("КлючBase64",КлючВхода);
				ДанныеКлючаДляВхода.Вставить("Пароль",ПарольВхода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеКлючаДляВхода;
	
КонецФункции

#КонецОбласти