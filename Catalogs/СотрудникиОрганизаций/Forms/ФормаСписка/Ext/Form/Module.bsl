 ////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
 
&НаКлиенте
Перем ИдентификаторЗамера;  
  
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов 

	РежимВыбораСписка = Неопределено;
	МножественныйВыбор = Неопределено;
	
	Если Параметры.Свойство("РежимВыбора", РежимВыбораСписка) И ТипЗнч(РежимВыбораСписка) = Тип("Булево") Тогда
		Элементы.Список.РежимВыбора = РежимВыбораСписка;
	КонецЕсли;  
	
	Если Параметры.Свойство("МножественныйВыбор", МножественныйВыбор) И ТипЗнч(МножественныйВыбор) = Тип("Булево") Тогда
		Элементы.Список.МножественныйВыбор = МножественныйВыбор;
	КонецЕсли;  
	
	Если Параметры.Свойство("ВыбиратьФизЛицо") И Параметры.ВыбиратьФизЛицо Тогда
		ВыбиратьФизЛицо = Параметры.ВыбиратьФизЛицо;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборОрганизация") И ЗначениеЗаполнено(Параметры.ОтборОрганизация) Тогда
		ОтборОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Параметры.ОтборОрганизация);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборПодразделениеОрганизации") И ЗначениеЗаполнено(Параметры.ОтборПодразделениеОрганизации) Тогда
		ОтборПодразделениеОрганизации = Параметры.ОтборПодразделениеОрганизации;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбиратьТолькоРезидентовРК") И Параметры.ВыбиратьТолькоРезидентовРК Тогда
		ВыбиратьТолькоРезидентовРК = Параметры.ВыбиратьТолькоРезидентовРК;
	КонецЕсли;
		
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	УчетПоВсемОрганизациям 		 = ЗначенияНастроекПользователя.УчетПоВсемОрганизациям;
	ОсновнаяОрганизация    		 = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаПереопределяемый.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список", Новый Структура("ИмяПоляИндикатораПроблем", "ИндикаторПроблем"));
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	ОбщегоНазначенияБК.ФормаСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	УстановитьРежимОтображенияСписка(ЭтотОбъект);
	УстановитьРежимОтображенияАрхиваСотрудников(ЭтотОбъект);
	
	ОбработатьИзменениеИспользованияИерархии(ЭтотОбъект);	
	
	ЗаполнитьДеревоПодразделений();

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	ПодготовитьФормуНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РежимОтображенияСпискаПриИзменении(Элемент)
	
	УстановитьРежимОтображенияСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)

	УстановитьОтборПоОрганизации(ЭтотОбъект);
	ЗаполнитьДеревоПодразделений();
	
	Попытка
		Элементы.ПодразделенияОрганизаций.Обновить();
	Исключение
		//
	КонецПопытки;
	ТекущаяСтрока = Элементы.ПодразделенияОрганизаций.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.ПодразделенияОрганизаций.Развернуть(ТекущаяСтрока, Истина);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПодразделенияОрганизаций

&НаКлиенте
Процедура ПодразделенияОрганизацийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПодразделенияОрганизацийПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВидыЗанятости

&НаКлиенте
Процедура ВидыЗанятостиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоВидуЗанятости", 0.1, Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если ВыбиратьФизЛицо Тогда
		
		Если  ТипЗнч(Значение) = Тип("Массив") Тогда  
			МассивЗначение = ?(Значение.Количество() > 1, Истина, Ложь);
		Иначе
			МассивЗначение = Ложь;
		КонецЕсли;
		
		Если МассивЗначение Тогда 
			
			СтандартнаяОбработка = Ложь;
			ОповеститьОВыборе(ПолучитьМассивФизЛиц(Значение));
		
		Иначе
	
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			
			Если ТекущиеДанные = Неопределено Тогда 
				СтандартнаяОбработка = Ложь;
				Возврат; 
			КонецЕсли;
			
			ТекущееФизЛицо = ТекущиеДанные.ФизЛицо;
			Если НЕ ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		
			СтандартнаяОбработка = Ложь;
			ОповеститьОВыборе(ТекущееФизЛицо);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивФизЛиц(МассивСотрудников)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&МассивСотрудников)
	|	И СотрудникиОрганизаций.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
КонецФункции	

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаПереопределяемый.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ИдентификаторЗамера = Неопределено Тогда
		ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамера, "ОткрытиеФормыЭлементаСправочникаСотрудники");
	ИдентификаторЗамера = Неопределено;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ИзменитьЛичныеДанные(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ФизЛицо);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИерархию(Команда)

	ИспользоватьИерархию = НЕ ИспользоватьИерархию;
	ОбработатьИзменениеИспользованияИерархии(ЭтотОбъект);	
	УстановитьРежимОтображенияСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАктуальностьСотрудников(Команда)

	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяСтрока = Неопределено;
	
	МассивСотрудников = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		Иначе 
			МассивСотрудников.Добавить(Строка);
			ПоследняяСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные			= Элементы.Список.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		ТекущаяАктуальность	= ТекущиеДанные.Актуальность;
		Наименование		= ТекущиеДанные.Наименование;
	ИначеЕсли ПоследняяСтрока <> Неопределено Тогда
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ПоследняяСтрока);
		ТекущаяАктуальность	= ДанныеСтроки.Актуальность;
		Наименование		= ДанныеСтроки.Наименование;
	Иначе 
		Возврат;
	КонецЕсли;
	

	Если МассивСотрудников.Количество() > 1 Тогда
		Если ТекущаяАктуальность Тогда
			ТекстВопроса = 
				НСтр("ru = 'Поместить выделенных сотрудников в архив?
				|
				|Сотрудники, помещенные в архив, не будут показаны в списке.'");
		Иначе
			ТекстВопроса =
				НСтр("ru = 'Извлечь выделенных сотрудников из архива? 
				|
				|После извлечения из архива сотрудники будут показываться в списке.'");
		КонецЕсли;
	Иначе
		Если ТекущаяАктуальность Тогда 						
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поместить сотрудника: %1 в архив.
				|
				|Сотрудник, помещенный в архив, не будет показан в списке.'"), Наименование);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Извлечь сотрудника: %1 из архива. 
				|
				|После извлечения из архива сотрудник будет показываться в списке.'"), Наименование);
		КонецЕсли;
	КонецЕсли;

	Режим = РежимДиалогаВопрос.ДаНет;
	СтруктураПараметров = Новый Структура("МассивСотрудников, ЗначениеАктуальности", МассивСотрудников, НЕ ТекущаяАктуальность);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСменеАктуальности", ЭтотОбъект, СтруктураПараметров);
    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьАрхивСотрудников(Команда)
	
	ПоказыватьАрхив = НЕ ПоказыватьАрхив;
	УстановитьРежимОтображенияАрхиваСотрудников(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтрольВеденияУчета
&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КонецЕсли;
	ИдентификаторЗамера = Неопределено;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Если НЕ ЗначениеЗаполнено(РежимОтображенияСписка) Тогда
		РежимОтображенияСписка = "ПоПодразделениям";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеИспользованияИерархии(Форма)
	
	Форма.Элементы.ФормаИспользоватьИерархию.Пометка = Форма.ИспользоватьИерархию;
	Форма.Элементы.ГруппаДерево.Видимость = Форма.ИспользоватьИерархию;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийПриАктивизацииСтрокиОбработчикОжидания()
	
	УстановитьОтборПоПодразделению(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимОтображенияСписка(Форма)
	
	Элементы = Форма.Элементы;

	Если НЕ Форма.ИспользоватьИерархию Тогда
		ОчиститьОтборыПоРежимуОтображенияСписка(Форма);
		УстановитьОтборПоПодразделению(Форма);
	Иначе

		Элементы.ГруппаОтображениеСписка.ТекущаяСтраница = Элементы.ГруппаОтображениеСписка.ПодчиненныеЭлементы[Форма.РежимОтображенияСписка];
		
		ОчиститьОтборыПоРежимуОтображенияСписка(Форма, Форма.РежимОтображенияСписка);
		
		Если Форма.РежимОтображенияСписка = "ПоГруппам" Тогда
			Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
			
		ИначеЕсли Форма.РежимОтображенияСписка = "ПоПодразделениям" Тогда
			УстановитьОтборПоПодразделению(Форма);
					
		КонецЕсли;
	КонецЕсли;	
	
	Если Форма.РежимОтображенияСписка = "ПоВидуЗанятости"  Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ВидыЗанятости, "ВсеСотрудники", НСтр("ru='Все сотрудники'"));
	КонецЕсли;
	
	// Отбор по организации устанавливаем всегда
	УстановитьОтборПоОрганизации(Форма);

	Если Форма.ВыбиратьТолькоРезидентовРК Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, "НеЯвляетсяНалоговымРезидентомРК", Ложь,, НСтр("ru='Только резиденты РК'"), Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимОтображенияАрхиваСотрудников(Форма)
	
	Форма.Элементы.ФормаПоказыватьАрхивСотрудников.Пометка = Форма.ПоказыватьАрхив;
	
	Если Форма.ПоказыватьАрхив Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "Актуальность");
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Актуальность", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьОтборыПоРежимуОтображенияСписка(Форма, РежимОтображения = "")
	
	Элементы = Форма.Элементы;
	
	Если РежимОтображения <> "ПоГруппам" Тогда  	                                           
		Элементы.Список.ТекущийРодитель = Неопределено;
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	Если РежимОтображения <> "ПоПодразделениям" Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации");

	КонецЕсли;
	
	Если РежимОтображения <> "ПоВидуЗанятости" И Элементы.РежимОтображенияСписка.СписокВыбора.НайтиПоЗначению("ПоВидуЗанятости") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ВидЗанятости");
	КонецЕсли;

	// Если учет ведется не по всем организациям, то всегда устанавливаем отбор по структурной единице
	Если НЕ Форма.УчетПоВсемОрганизациям Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница", Форма.ОсновнаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.УчетПоВсемОрганизациям Тогда
		Форма.ОтборОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Форма.ОсновнаяОрганизация);
		Элементы.ОтборОрганизация.Доступность = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Форма.ОтборОрганизация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Организация", Форма.ОтборОрганизация);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)
	
	Если НЕ Форма.ИспользоватьИерархию 
		И ЗначениеЗаполнено(Форма.ОтборПодразделениеОрганизации) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации", Форма.ОтборПодразделениеОрганизации, ВидСравненияКомпоновкиДанных.ВИерархии);
		
	ИначеЕсли Форма.ИспользоватьИерархию Тогда 	
		Элементы = Форма.Элементы;
		
		Попытка
			ТекущиеДанные = Элементы.ПодразделенияОрганизаций.ТекущиеДанные;
		Исключение
			ТекущиеДанные = Неопределено;
		КонецПопытки;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации");
		
			Если НЕ Форма.УчетПоВсемОрганизациям Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница", Форма.ОсновнаяОрганизация);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;

		Если ТекущиеДанные.Ссылка = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации");
			Если НЕ Форма.УчетПоВсемОрганизациям Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница", Форма.ОсновнаяОрганизация);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница");
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации", ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.ВИерархии);
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ТекущееПодразделениеОрганизации");
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ТекущаяСтруктурнаяЕдиница", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоВидуЗанятости()
	
	ТекущиеДанные = Элементы.ВидыЗанятости.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВидЗанятости", ТекущиеДанные.Ссылка);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВидЗанятости");
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДеревоПодразделений()
	
	ДеревоПодразделений = РеквизитФормыВЗначение("ПодразделенияОрганизаций");

	ДеревоПодразделений.Строки.Очистить();
	КорневаяСтрока = ДеревоПодразделений.Строки.Добавить();
	КорневаяСтрока.Наименование = НСтр("ru = 'Все организации'");
	КорневаяСтрока.Ссылка 		= Неопределено;
	
	Запрос = Новый Запрос;
	
	ТекстУсловияПоОрганизации1 = "";
	ТекстУсловияПоОрганизации2 = "";
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		
		ТекстУсловияПоОрганизации1 = "
		|ГДЕ 
		|	(Организации.Ссылка = &Организация
		|		ИЛИ Организации.ГоловнаяОрганизация = &Организация)";
		
		ТекстУсловияПоОрганизации2 = "
		|ГДЕ 
		|	(ПодразделенияОрганизаций.Владелец = &Организация
		|		ИЛИ ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &Организация)";
	
		Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	КонецЕсли;
	
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	Если НЕ ЗначенияНастроекПользователя.УчетПоВсемОрганизациям Тогда
		
		ТекстУсловияПоОрганизации1 = ТекстУсловияПоОрганизации1 + ?(ЗначениеЗаполнено(ТекстУсловияПоОрганизации1), "	И ", "ГДЕ ") + "
		|	Организации.Ссылка = &ОсновнаяОрганизация";
		
		ТекстУсловияПоОрганизации2 = ТекстУсловияПоОрганизации2 + ?(ЗначениеЗаполнено(ТекстУсловияПоОрганизации2), "	И ", "ГДЕ ") + "
		|	ПодразделенияОрганизаций.Владелец = &ОсновнаяОрганизация";
		
		Запрос.УстановитьПараметр("ОсновнаяОрганизация", Справочники.Организации.ОрганизацияПоУмолчанию());
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.Наименование,
		|	НЕОПРЕДЕЛЕНО КАК Родитель, 
		|	ИСТИНА КАК ЭтоОрганизация,
		|	НЕОПРЕДЕЛЕНО КАК Код
		|ИЗ
		|	Справочник.Организации КАК Организации " + ТекстУсловияПоОрганизации1 + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Наименование,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПодразделенияОрганизаций.Владелец
		|		ИНАЧЕ ПодразделенияОрганизаций.Родитель
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ПодразделенияОрганизаций.Код
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций " + ТекстУсловияПоОрганизации2 + " 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель,
		|	Наименование";
		
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВыборки Из Выборка Цикл
		
		Если ДеревоПодразделений.Строки.Найти(СтрокаВыборки.Ссылка, , Истина) = Неопределено Тогда 
			ДобавитьСтрокуВДерево(ДеревоПодразделений, КорневаяСтрока.Строки, СтрокаВыборки, Выборка);	
		КонецЕсли;			
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПодразделений, "ПодразделенияОрганизаций");
	
КонецПроцедуры

&НаСервереБезКонтекста
//Процедура преднозначена для добавления строки в дерево значений
//которое формируется по подразделениям
Функция ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ДобавляемоеЗначение, ПереченьЗначений)
	
	//Проверяем есть ли у данного подразделения родитель
	Если ЗначениеЗаполнено(ДобавляемоеЗначение.Родитель) Тогда
		
		Если ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.Родитель, , Истина) = Неопределено Тогда 
			//Подразделение родитель не найдено в дереве сначала добавим его.
			Если ПереченьЗначений.Найти(ДобавляемоеЗначение.Родитель, "Ссылка") <> Неопределено Тогда 
				НайденныйУровень = ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ПереченьЗначений.Найти(ДобавляемоеЗначение.Родитель, "Ссылка"), ПереченьЗначений);
			Иначе 
				НайденныйУровень = Уровень;
			КонецЕсли;
			
			Если ТипЗнч(НайденныйУровень) = Тип("СтрокаДереваЗначений") Тогда
                НоваяСтрока = НайденныйУровень.Строки.Добавить();       
			Иначе
				НоваяСтрока = НайденныйУровень.Добавить();       
			КонецЕсли;			
			
			НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
			НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
			НоваяСтрока.ЭтоОрганизация = ДобавляемоеЗначение.ЭтоОрганизация;	
			НоваяСтрока.Код			   = ДобавляемоеЗначение.Код;	
		Иначе 
			//Подразделение родитель найдено, добавим к нему текущее подразделение.
			НоваяСтрока = ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.Родитель, , Истина).Строки.Добавить();
			НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
			НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
			НоваяСтрока.ЭтоОрганизация = ДобавляемоеЗначение.ЭтоОрганизация;	
			НоваяСтрока.Код			   = ДобавляемоеЗначение.Код;	
		КонецЕсли;
		
	Иначе
		//У подразделения нет родителя, просто добавим его в дерево.
		НоваяСтрока = Уровень.Добавить();
		НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
		НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
		НоваяСтрока.ЭтоОрганизация = ДобавляемоеЗначение.ЭтоОрганизация;	
		НоваяСтрока.Код			   = ДобавляемоеЗначение.Код;	
		
	КонецЕсли;
	
	Возврат НоваяСтрока;		
	
КонецФункции //ДобавитьСтрокуВДерево

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСменеАктуальности(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	ИзменитьАктуальностьСотрдуниковНаСервере(Параметры.МассивСотрудников, Параметры.ЗначениеАктуальности);
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере 
Процедура ИзменитьАктуальностьСотрдуниковНаСервере(МассивСотрудников, ЗначениеАктуальности)
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		Объект = Сотрудник.ПолучитьОбъект();
		Объект.Актуальность = ЗначениеАктуальности;
		Объект.Записать();
		
	КонецЦикла;
	
	// после смены актуальности уточним заголовок команды
	УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(МассивСотрудников, Неопределено, ЗначениеАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОбработчикОжидания()
	
	// уточним наименование и доступность команды ИзменитьАктуальность
	УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(Элементы.Список.ВыделенныеСтроки, Элементы.Список.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(Знач ВыделенныеСтроки, Знач ТекущиеДанные, Знач Актуальность = Неопределено) 
	
	
	// Если выделенных строк нет - команды недоступны
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстЗаголовкаКоманды = "";
						  
	// Если выделенная строка одна - обратимся к текущим данным строки
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
	
		Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда 
		
			Если Актуальность = Неопределено И ТекущиеДанные <> Неопределено Тогда
				Актуальность = ТекущиеДанные.Актуальность;	
			Иначе 
				Актуальность = Истина;
			КонецЕсли;

			Если Актуальность Тогда
				ТекстЗаголовкаКоманды = НСтр("ru = 'Поместить сотрудника в архив'");
			Иначе
				ТекстЗаголовкаКоманды = НСтр("ru = 'Извлечь сотрудника из архива'");
			КонецЕсли;
		Иначе
			ТекстЗаголовкаКоманды = "";
		КонецЕсли;

		
	// Выделенных строк больше одной, получим данные запросом
	Иначе
		МассивСотрудников = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			Иначе 
				МассивСотрудников.Добавить(ВыделеннаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокСотрудников",	МассивСотрудников);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	МАКСИМУМ(СотрудникиОрганизаций.Актуальность) КАК Актуальные,
			|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) КАК Неактуальные
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) = МАКСИМУМ(СотрудникиОрганизаций.Актуальность)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.Актуальные Тогда
				ТекстЗаголовкаКоманды = НСтр("ru = 'Поместить сотрудников в архив'");
			Иначе
				ТекстЗаголовкаКоманды = НСтр("ru = 'Извлечь сотрудников из архива'");
			КонецЕсли;
		Иначе
			ТекстЗаголовкаКоманды = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗаголовкаКоманды) Тогда
		Элементы.ФормаИзменитьАктуальностьСотрудников.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьАктуальностьСотрудников.Доступность = Ложь;
	Иначе
		Элементы.ФормаИзменитьАктуальностьСотрудников.Доступность = Истина;
		Элементы.ФормаИзменитьАктуальностьСотрудников.Заголовок = ТекстЗаголовкаКоманды;
		Элементы.СписокКонтекстноеМенюИзменитьАктуальностьСотрудников.Доступность = Истина;
		Элементы.СписокКонтекстноеМенюИзменитьАктуальностьСотрудников.Заголовок = ТекстЗаголовкаКоманды;
	КонецЕсли;
	
КонецПроцедуры



